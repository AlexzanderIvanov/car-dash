
EcumasterBlackCanWithTouchGFX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002b5d4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004f60  0802b7a4  0802b7a4  0003b7a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000046f6  08030704  08030704  00040704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 ExtFlashSection 000354f8  08034dfc  08034dfc  00044dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 00000630  0806a2f4  0806a2f4  0007a2f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  0806a924  0806a924  00080140  2**0
                  CONTENTS
  7 .ARM          00000008  0806a924  0806a924  0007a924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  0806a92c  0806a92c  00080140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  0806a92c  0806a92c  0007a92c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  0806a940  0806a940  0007a940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         00000140  20000000  0806a948  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000ccec  20000140  0806aa88  00080140  2**2
                  ALLOC
 13 ._user_heap_stack 00000604  2000ce2c  0806aa88  0008ce2c  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  00080140  2**0
                  CONTENTS, READONLY
 15 .debug_info   0006fe5d  00000000  00000000  00080170  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 00011143  00000000  00000000  000effcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00005268  00000000  00000000  00101110  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00004ba8  00000000  00000000  00106378  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  0003dd52  00000000  00000000  0010af20  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   0004cd8c  00000000  00000000  00148c72  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    0013914d  00000000  00000000  001959fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      000000fa  00000000  00000000  002ceb4b  2**0
                  CONTENTS, READONLY
 23 .debug_frame  000164c0  00000000  00000000  002cec48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000140 	.word	0x20000140
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0802b78c 	.word	0x0802b78c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000144 	.word	0x20000144
 800020c:	0802b78c 	.word	0x0802b78c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__gedf2>:
 8000628:	f04f 3cff 	mov.w	ip, #4294967295
 800062c:	e006      	b.n	800063c <__cmpdf2+0x4>
 800062e:	bf00      	nop

08000630 <__ledf2>:
 8000630:	f04f 0c01 	mov.w	ip, #1
 8000634:	e002      	b.n	800063c <__cmpdf2+0x4>
 8000636:	bf00      	nop

08000638 <__cmpdf2>:
 8000638:	f04f 0c01 	mov.w	ip, #1
 800063c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000640:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000644:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000648:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800064c:	bf18      	it	ne
 800064e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000652:	d01b      	beq.n	800068c <__cmpdf2+0x54>
 8000654:	b001      	add	sp, #4
 8000656:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800065a:	bf0c      	ite	eq
 800065c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000660:	ea91 0f03 	teqne	r1, r3
 8000664:	bf02      	ittt	eq
 8000666:	ea90 0f02 	teqeq	r0, r2
 800066a:	2000      	moveq	r0, #0
 800066c:	4770      	bxeq	lr
 800066e:	f110 0f00 	cmn.w	r0, #0
 8000672:	ea91 0f03 	teq	r1, r3
 8000676:	bf58      	it	pl
 8000678:	4299      	cmppl	r1, r3
 800067a:	bf08      	it	eq
 800067c:	4290      	cmpeq	r0, r2
 800067e:	bf2c      	ite	cs
 8000680:	17d8      	asrcs	r0, r3, #31
 8000682:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000686:	f040 0001 	orr.w	r0, r0, #1
 800068a:	4770      	bx	lr
 800068c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000690:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000694:	d102      	bne.n	800069c <__cmpdf2+0x64>
 8000696:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800069a:	d107      	bne.n	80006ac <__cmpdf2+0x74>
 800069c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006a4:	d1d6      	bne.n	8000654 <__cmpdf2+0x1c>
 80006a6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006aa:	d0d3      	beq.n	8000654 <__cmpdf2+0x1c>
 80006ac:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <__aeabi_cdrcmple>:
 80006b4:	4684      	mov	ip, r0
 80006b6:	4610      	mov	r0, r2
 80006b8:	4662      	mov	r2, ip
 80006ba:	468c      	mov	ip, r1
 80006bc:	4619      	mov	r1, r3
 80006be:	4663      	mov	r3, ip
 80006c0:	e000      	b.n	80006c4 <__aeabi_cdcmpeq>
 80006c2:	bf00      	nop

080006c4 <__aeabi_cdcmpeq>:
 80006c4:	b501      	push	{r0, lr}
 80006c6:	f7ff ffb7 	bl	8000638 <__cmpdf2>
 80006ca:	2800      	cmp	r0, #0
 80006cc:	bf48      	it	mi
 80006ce:	f110 0f00 	cmnmi.w	r0, #0
 80006d2:	bd01      	pop	{r0, pc}

080006d4 <__aeabi_dcmpeq>:
 80006d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d8:	f7ff fff4 	bl	80006c4 <__aeabi_cdcmpeq>
 80006dc:	bf0c      	ite	eq
 80006de:	2001      	moveq	r0, #1
 80006e0:	2000      	movne	r0, #0
 80006e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e6:	bf00      	nop

080006e8 <__aeabi_dcmplt>:
 80006e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ec:	f7ff ffea 	bl	80006c4 <__aeabi_cdcmpeq>
 80006f0:	bf34      	ite	cc
 80006f2:	2001      	movcc	r0, #1
 80006f4:	2000      	movcs	r0, #0
 80006f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006fa:	bf00      	nop

080006fc <__aeabi_dcmple>:
 80006fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000700:	f7ff ffe0 	bl	80006c4 <__aeabi_cdcmpeq>
 8000704:	bf94      	ite	ls
 8000706:	2001      	movls	r0, #1
 8000708:	2000      	movhi	r0, #0
 800070a:	f85d fb08 	ldr.w	pc, [sp], #8
 800070e:	bf00      	nop

08000710 <__aeabi_dcmpge>:
 8000710:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000714:	f7ff ffce 	bl	80006b4 <__aeabi_cdrcmple>
 8000718:	bf94      	ite	ls
 800071a:	2001      	movls	r0, #1
 800071c:	2000      	movhi	r0, #0
 800071e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000722:	bf00      	nop

08000724 <__aeabi_dcmpgt>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff ffc4 	bl	80006b4 <__aeabi_cdrcmple>
 800072c:	bf34      	ite	cc
 800072e:	2001      	movcc	r0, #1
 8000730:	2000      	movcs	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_d2f>:
 8000738:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800073c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000740:	bf24      	itt	cs
 8000742:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000746:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800074a:	d90d      	bls.n	8000768 <__aeabi_d2f+0x30>
 800074c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000750:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000754:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000758:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800075c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000760:	bf08      	it	eq
 8000762:	f020 0001 	biceq.w	r0, r0, #1
 8000766:	4770      	bx	lr
 8000768:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800076c:	d121      	bne.n	80007b2 <__aeabi_d2f+0x7a>
 800076e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000772:	bfbc      	itt	lt
 8000774:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000778:	4770      	bxlt	lr
 800077a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800077e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000782:	f1c2 0218 	rsb	r2, r2, #24
 8000786:	f1c2 0c20 	rsb	ip, r2, #32
 800078a:	fa10 f30c 	lsls.w	r3, r0, ip
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	bf18      	it	ne
 8000794:	f040 0001 	orrne.w	r0, r0, #1
 8000798:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800079c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007a0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80007a4:	ea40 000c 	orr.w	r0, r0, ip
 80007a8:	fa23 f302 	lsr.w	r3, r3, r2
 80007ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80007b0:	e7cc      	b.n	800074c <__aeabi_d2f+0x14>
 80007b2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80007b6:	d107      	bne.n	80007c8 <__aeabi_d2f+0x90>
 80007b8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007bc:	bf1e      	ittt	ne
 80007be:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007c2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007c6:	4770      	bxne	lr
 80007c8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop

080007d8 <__aeabi_uldivmod>:
 80007d8:	b953      	cbnz	r3, 80007f0 <__aeabi_uldivmod+0x18>
 80007da:	b94a      	cbnz	r2, 80007f0 <__aeabi_uldivmod+0x18>
 80007dc:	2900      	cmp	r1, #0
 80007de:	bf08      	it	eq
 80007e0:	2800      	cmpeq	r0, #0
 80007e2:	bf1c      	itt	ne
 80007e4:	f04f 31ff 	movne.w	r1, #4294967295
 80007e8:	f04f 30ff 	movne.w	r0, #4294967295
 80007ec:	f000 b972 	b.w	8000ad4 <__aeabi_idiv0>
 80007f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007f8:	f000 f806 	bl	8000808 <__udivmoddi4>
 80007fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000800:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000804:	b004      	add	sp, #16
 8000806:	4770      	bx	lr

08000808 <__udivmoddi4>:
 8000808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800080c:	9e08      	ldr	r6, [sp, #32]
 800080e:	4604      	mov	r4, r0
 8000810:	4688      	mov	r8, r1
 8000812:	2b00      	cmp	r3, #0
 8000814:	d14b      	bne.n	80008ae <__udivmoddi4+0xa6>
 8000816:	428a      	cmp	r2, r1
 8000818:	4615      	mov	r5, r2
 800081a:	d967      	bls.n	80008ec <__udivmoddi4+0xe4>
 800081c:	fab2 f282 	clz	r2, r2
 8000820:	b14a      	cbz	r2, 8000836 <__udivmoddi4+0x2e>
 8000822:	f1c2 0720 	rsb	r7, r2, #32
 8000826:	fa01 f302 	lsl.w	r3, r1, r2
 800082a:	fa20 f707 	lsr.w	r7, r0, r7
 800082e:	4095      	lsls	r5, r2
 8000830:	ea47 0803 	orr.w	r8, r7, r3
 8000834:	4094      	lsls	r4, r2
 8000836:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800083a:	0c23      	lsrs	r3, r4, #16
 800083c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000840:	fa1f fc85 	uxth.w	ip, r5
 8000844:	fb0e 8817 	mls	r8, lr, r7, r8
 8000848:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800084c:	fb07 f10c 	mul.w	r1, r7, ip
 8000850:	4299      	cmp	r1, r3
 8000852:	d909      	bls.n	8000868 <__udivmoddi4+0x60>
 8000854:	18eb      	adds	r3, r5, r3
 8000856:	f107 30ff 	add.w	r0, r7, #4294967295
 800085a:	f080 811b 	bcs.w	8000a94 <__udivmoddi4+0x28c>
 800085e:	4299      	cmp	r1, r3
 8000860:	f240 8118 	bls.w	8000a94 <__udivmoddi4+0x28c>
 8000864:	3f02      	subs	r7, #2
 8000866:	442b      	add	r3, r5
 8000868:	1a5b      	subs	r3, r3, r1
 800086a:	b2a4      	uxth	r4, r4
 800086c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000870:	fb0e 3310 	mls	r3, lr, r0, r3
 8000874:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000878:	fb00 fc0c 	mul.w	ip, r0, ip
 800087c:	45a4      	cmp	ip, r4
 800087e:	d909      	bls.n	8000894 <__udivmoddi4+0x8c>
 8000880:	192c      	adds	r4, r5, r4
 8000882:	f100 33ff 	add.w	r3, r0, #4294967295
 8000886:	f080 8107 	bcs.w	8000a98 <__udivmoddi4+0x290>
 800088a:	45a4      	cmp	ip, r4
 800088c:	f240 8104 	bls.w	8000a98 <__udivmoddi4+0x290>
 8000890:	3802      	subs	r0, #2
 8000892:	442c      	add	r4, r5
 8000894:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000898:	eba4 040c 	sub.w	r4, r4, ip
 800089c:	2700      	movs	r7, #0
 800089e:	b11e      	cbz	r6, 80008a8 <__udivmoddi4+0xa0>
 80008a0:	40d4      	lsrs	r4, r2
 80008a2:	2300      	movs	r3, #0
 80008a4:	e9c6 4300 	strd	r4, r3, [r6]
 80008a8:	4639      	mov	r1, r7
 80008aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ae:	428b      	cmp	r3, r1
 80008b0:	d909      	bls.n	80008c6 <__udivmoddi4+0xbe>
 80008b2:	2e00      	cmp	r6, #0
 80008b4:	f000 80eb 	beq.w	8000a8e <__udivmoddi4+0x286>
 80008b8:	2700      	movs	r7, #0
 80008ba:	e9c6 0100 	strd	r0, r1, [r6]
 80008be:	4638      	mov	r0, r7
 80008c0:	4639      	mov	r1, r7
 80008c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008c6:	fab3 f783 	clz	r7, r3
 80008ca:	2f00      	cmp	r7, #0
 80008cc:	d147      	bne.n	800095e <__udivmoddi4+0x156>
 80008ce:	428b      	cmp	r3, r1
 80008d0:	d302      	bcc.n	80008d8 <__udivmoddi4+0xd0>
 80008d2:	4282      	cmp	r2, r0
 80008d4:	f200 80fa 	bhi.w	8000acc <__udivmoddi4+0x2c4>
 80008d8:	1a84      	subs	r4, r0, r2
 80008da:	eb61 0303 	sbc.w	r3, r1, r3
 80008de:	2001      	movs	r0, #1
 80008e0:	4698      	mov	r8, r3
 80008e2:	2e00      	cmp	r6, #0
 80008e4:	d0e0      	beq.n	80008a8 <__udivmoddi4+0xa0>
 80008e6:	e9c6 4800 	strd	r4, r8, [r6]
 80008ea:	e7dd      	b.n	80008a8 <__udivmoddi4+0xa0>
 80008ec:	b902      	cbnz	r2, 80008f0 <__udivmoddi4+0xe8>
 80008ee:	deff      	udf	#255	; 0xff
 80008f0:	fab2 f282 	clz	r2, r2
 80008f4:	2a00      	cmp	r2, #0
 80008f6:	f040 808f 	bne.w	8000a18 <__udivmoddi4+0x210>
 80008fa:	1b49      	subs	r1, r1, r5
 80008fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000900:	fa1f f885 	uxth.w	r8, r5
 8000904:	2701      	movs	r7, #1
 8000906:	fbb1 fcfe 	udiv	ip, r1, lr
 800090a:	0c23      	lsrs	r3, r4, #16
 800090c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000910:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000914:	fb08 f10c 	mul.w	r1, r8, ip
 8000918:	4299      	cmp	r1, r3
 800091a:	d907      	bls.n	800092c <__udivmoddi4+0x124>
 800091c:	18eb      	adds	r3, r5, r3
 800091e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000922:	d202      	bcs.n	800092a <__udivmoddi4+0x122>
 8000924:	4299      	cmp	r1, r3
 8000926:	f200 80cd 	bhi.w	8000ac4 <__udivmoddi4+0x2bc>
 800092a:	4684      	mov	ip, r0
 800092c:	1a59      	subs	r1, r3, r1
 800092e:	b2a3      	uxth	r3, r4
 8000930:	fbb1 f0fe 	udiv	r0, r1, lr
 8000934:	fb0e 1410 	mls	r4, lr, r0, r1
 8000938:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800093c:	fb08 f800 	mul.w	r8, r8, r0
 8000940:	45a0      	cmp	r8, r4
 8000942:	d907      	bls.n	8000954 <__udivmoddi4+0x14c>
 8000944:	192c      	adds	r4, r5, r4
 8000946:	f100 33ff 	add.w	r3, r0, #4294967295
 800094a:	d202      	bcs.n	8000952 <__udivmoddi4+0x14a>
 800094c:	45a0      	cmp	r8, r4
 800094e:	f200 80b6 	bhi.w	8000abe <__udivmoddi4+0x2b6>
 8000952:	4618      	mov	r0, r3
 8000954:	eba4 0408 	sub.w	r4, r4, r8
 8000958:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800095c:	e79f      	b.n	800089e <__udivmoddi4+0x96>
 800095e:	f1c7 0c20 	rsb	ip, r7, #32
 8000962:	40bb      	lsls	r3, r7
 8000964:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000968:	ea4e 0e03 	orr.w	lr, lr, r3
 800096c:	fa01 f407 	lsl.w	r4, r1, r7
 8000970:	fa20 f50c 	lsr.w	r5, r0, ip
 8000974:	fa21 f30c 	lsr.w	r3, r1, ip
 8000978:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800097c:	4325      	orrs	r5, r4
 800097e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000982:	0c2c      	lsrs	r4, r5, #16
 8000984:	fb08 3319 	mls	r3, r8, r9, r3
 8000988:	fa1f fa8e 	uxth.w	sl, lr
 800098c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000990:	fb09 f40a 	mul.w	r4, r9, sl
 8000994:	429c      	cmp	r4, r3
 8000996:	fa02 f207 	lsl.w	r2, r2, r7
 800099a:	fa00 f107 	lsl.w	r1, r0, r7
 800099e:	d90b      	bls.n	80009b8 <__udivmoddi4+0x1b0>
 80009a0:	eb1e 0303 	adds.w	r3, lr, r3
 80009a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80009a8:	f080 8087 	bcs.w	8000aba <__udivmoddi4+0x2b2>
 80009ac:	429c      	cmp	r4, r3
 80009ae:	f240 8084 	bls.w	8000aba <__udivmoddi4+0x2b2>
 80009b2:	f1a9 0902 	sub.w	r9, r9, #2
 80009b6:	4473      	add	r3, lr
 80009b8:	1b1b      	subs	r3, r3, r4
 80009ba:	b2ad      	uxth	r5, r5
 80009bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009c0:	fb08 3310 	mls	r3, r8, r0, r3
 80009c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80009c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80009cc:	45a2      	cmp	sl, r4
 80009ce:	d908      	bls.n	80009e2 <__udivmoddi4+0x1da>
 80009d0:	eb1e 0404 	adds.w	r4, lr, r4
 80009d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80009d8:	d26b      	bcs.n	8000ab2 <__udivmoddi4+0x2aa>
 80009da:	45a2      	cmp	sl, r4
 80009dc:	d969      	bls.n	8000ab2 <__udivmoddi4+0x2aa>
 80009de:	3802      	subs	r0, #2
 80009e0:	4474      	add	r4, lr
 80009e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80009e6:	fba0 8902 	umull	r8, r9, r0, r2
 80009ea:	eba4 040a 	sub.w	r4, r4, sl
 80009ee:	454c      	cmp	r4, r9
 80009f0:	46c2      	mov	sl, r8
 80009f2:	464b      	mov	r3, r9
 80009f4:	d354      	bcc.n	8000aa0 <__udivmoddi4+0x298>
 80009f6:	d051      	beq.n	8000a9c <__udivmoddi4+0x294>
 80009f8:	2e00      	cmp	r6, #0
 80009fa:	d069      	beq.n	8000ad0 <__udivmoddi4+0x2c8>
 80009fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000a00:	eb64 0403 	sbc.w	r4, r4, r3
 8000a04:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000a08:	40fd      	lsrs	r5, r7
 8000a0a:	40fc      	lsrs	r4, r7
 8000a0c:	ea4c 0505 	orr.w	r5, ip, r5
 8000a10:	e9c6 5400 	strd	r5, r4, [r6]
 8000a14:	2700      	movs	r7, #0
 8000a16:	e747      	b.n	80008a8 <__udivmoddi4+0xa0>
 8000a18:	f1c2 0320 	rsb	r3, r2, #32
 8000a1c:	fa20 f703 	lsr.w	r7, r0, r3
 8000a20:	4095      	lsls	r5, r2
 8000a22:	fa01 f002 	lsl.w	r0, r1, r2
 8000a26:	fa21 f303 	lsr.w	r3, r1, r3
 8000a2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a2e:	4338      	orrs	r0, r7
 8000a30:	0c01      	lsrs	r1, r0, #16
 8000a32:	fbb3 f7fe 	udiv	r7, r3, lr
 8000a36:	fa1f f885 	uxth.w	r8, r5
 8000a3a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000a3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a42:	fb07 f308 	mul.w	r3, r7, r8
 8000a46:	428b      	cmp	r3, r1
 8000a48:	fa04 f402 	lsl.w	r4, r4, r2
 8000a4c:	d907      	bls.n	8000a5e <__udivmoddi4+0x256>
 8000a4e:	1869      	adds	r1, r5, r1
 8000a50:	f107 3cff 	add.w	ip, r7, #4294967295
 8000a54:	d22f      	bcs.n	8000ab6 <__udivmoddi4+0x2ae>
 8000a56:	428b      	cmp	r3, r1
 8000a58:	d92d      	bls.n	8000ab6 <__udivmoddi4+0x2ae>
 8000a5a:	3f02      	subs	r7, #2
 8000a5c:	4429      	add	r1, r5
 8000a5e:	1acb      	subs	r3, r1, r3
 8000a60:	b281      	uxth	r1, r0
 8000a62:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a66:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a6e:	fb00 f308 	mul.w	r3, r0, r8
 8000a72:	428b      	cmp	r3, r1
 8000a74:	d907      	bls.n	8000a86 <__udivmoddi4+0x27e>
 8000a76:	1869      	adds	r1, r5, r1
 8000a78:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a7c:	d217      	bcs.n	8000aae <__udivmoddi4+0x2a6>
 8000a7e:	428b      	cmp	r3, r1
 8000a80:	d915      	bls.n	8000aae <__udivmoddi4+0x2a6>
 8000a82:	3802      	subs	r0, #2
 8000a84:	4429      	add	r1, r5
 8000a86:	1ac9      	subs	r1, r1, r3
 8000a88:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000a8c:	e73b      	b.n	8000906 <__udivmoddi4+0xfe>
 8000a8e:	4637      	mov	r7, r6
 8000a90:	4630      	mov	r0, r6
 8000a92:	e709      	b.n	80008a8 <__udivmoddi4+0xa0>
 8000a94:	4607      	mov	r7, r0
 8000a96:	e6e7      	b.n	8000868 <__udivmoddi4+0x60>
 8000a98:	4618      	mov	r0, r3
 8000a9a:	e6fb      	b.n	8000894 <__udivmoddi4+0x8c>
 8000a9c:	4541      	cmp	r1, r8
 8000a9e:	d2ab      	bcs.n	80009f8 <__udivmoddi4+0x1f0>
 8000aa0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000aa4:	eb69 020e 	sbc.w	r2, r9, lr
 8000aa8:	3801      	subs	r0, #1
 8000aaa:	4613      	mov	r3, r2
 8000aac:	e7a4      	b.n	80009f8 <__udivmoddi4+0x1f0>
 8000aae:	4660      	mov	r0, ip
 8000ab0:	e7e9      	b.n	8000a86 <__udivmoddi4+0x27e>
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	e795      	b.n	80009e2 <__udivmoddi4+0x1da>
 8000ab6:	4667      	mov	r7, ip
 8000ab8:	e7d1      	b.n	8000a5e <__udivmoddi4+0x256>
 8000aba:	4681      	mov	r9, r0
 8000abc:	e77c      	b.n	80009b8 <__udivmoddi4+0x1b0>
 8000abe:	3802      	subs	r0, #2
 8000ac0:	442c      	add	r4, r5
 8000ac2:	e747      	b.n	8000954 <__udivmoddi4+0x14c>
 8000ac4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ac8:	442b      	add	r3, r5
 8000aca:	e72f      	b.n	800092c <__udivmoddi4+0x124>
 8000acc:	4638      	mov	r0, r7
 8000ace:	e708      	b.n	80008e2 <__udivmoddi4+0xda>
 8000ad0:	4637      	mov	r7, r6
 8000ad2:	e6e9      	b.n	80008a8 <__udivmoddi4+0xa0>

08000ad4 <__aeabi_idiv0>:
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	b083      	sub	sp, #12
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
 8000aee:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
	...

08000b0c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	4a07      	ldr	r2, [pc, #28]	; (8000b38 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b1c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	4a06      	ldr	r2, [pc, #24]	; (8000b3c <vApplicationGetIdleTaskMemory+0x30>)
 8000b22:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2280      	movs	r2, #128	; 0x80
 8000b28:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000b2a:	bf00      	nop
 8000b2c:	3714      	adds	r7, #20
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	2000015c 	.word	0x2000015c
 8000b3c:	200001b4 	.word	0x200001b4

08000b40 <SecondTask>:

extern xQueueHandle messageQ;
extern xQueueHandle settingsMessageQ;

void SecondTask(void const* argument)
{
 8000b40:	b5b0      	push	{r4, r5, r7, lr}
 8000b42:	b0a2      	sub	sp, #136	; 0x88
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]

	settings_message settings_val = {6500, 1, 2, 3, 4, 5, 6, 7, 8, 0};
 8000b48:	4ba3      	ldr	r3, [pc, #652]	; (8000dd8 <SecondTask+0x298>)
 8000b4a:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8000b4e:	461d      	mov	r5, r3
 8000b50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b58:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b5c:	e884 0003 	stmia.w	r4, {r0, r1}
	xQueueSend(settingsMessageQ, &settings_val,0);
 8000b60:	4b9e      	ldr	r3, [pc, #632]	; (8000ddc <SecondTask+0x29c>)
 8000b62:	6818      	ldr	r0, [r3, #0]
 8000b64:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000b68:	2300      	movs	r3, #0
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f00c fd58 	bl	800d620 <xQueueGenericSend>
	osDelay(150);
 8000b70:	2096      	movs	r0, #150	; 0x96
 8000b72:	f00c fa67 	bl	800d044 <osDelay>

	static const int demo_mode = 0;
	for(;;)
	{
		if(demo_mode)
 8000b76:	4b9a      	ldr	r3, [pc, #616]	; (8000de0 <SecondTask+0x2a0>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f000 81c0 	beq.w	8000f00 <SecondTask+0x3c0>
		{
			rpm = (rpm >= 8000) ? 0: rpm + 100;
 8000b80:	4b98      	ldr	r3, [pc, #608]	; (8000de4 <SecondTask+0x2a4>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000b88:	da03      	bge.n	8000b92 <SecondTask+0x52>
 8000b8a:	4b96      	ldr	r3, [pc, #600]	; (8000de4 <SecondTask+0x2a4>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	3364      	adds	r3, #100	; 0x64
 8000b90:	e000      	b.n	8000b94 <SecondTask+0x54>
 8000b92:	2300      	movs	r3, #0
 8000b94:	4a93      	ldr	r2, [pc, #588]	; (8000de4 <SecondTask+0x2a4>)
 8000b96:	6013      	str	r3, [r2, #0]
			clt = (clt >= 250) ? -40: clt + 3;
 8000b98:	4b93      	ldr	r3, [pc, #588]	; (8000de8 <SecondTask+0x2a8>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2bf9      	cmp	r3, #249	; 0xf9
 8000b9e:	dc03      	bgt.n	8000ba8 <SecondTask+0x68>
 8000ba0:	4b91      	ldr	r3, [pc, #580]	; (8000de8 <SecondTask+0x2a8>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	3303      	adds	r3, #3
 8000ba6:	e001      	b.n	8000bac <SecondTask+0x6c>
 8000ba8:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8000bac:	4a8e      	ldr	r2, [pc, #568]	; (8000de8 <SecondTask+0x2a8>)
 8000bae:	6013      	str	r3, [r2, #0]
			map = (map >= 450) ? 1: map + 6;
 8000bb0:	4b8e      	ldr	r3, [pc, #568]	; (8000dec <SecondTask+0x2ac>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8000bb8:	da03      	bge.n	8000bc2 <SecondTask+0x82>
 8000bba:	4b8c      	ldr	r3, [pc, #560]	; (8000dec <SecondTask+0x2ac>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	3306      	adds	r3, #6
 8000bc0:	e000      	b.n	8000bc4 <SecondTask+0x84>
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	4a89      	ldr	r2, [pc, #548]	; (8000dec <SecondTask+0x2ac>)
 8000bc6:	6013      	str	r3, [r2, #0]
			lambda = (lambda >= 1.4) ? 0.6: lambda + 0.05;
 8000bc8:	4b89      	ldr	r3, [pc, #548]	; (8000df0 <SecondTask+0x2b0>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fcd3 	bl	8000578 <__aeabi_f2d>
 8000bd2:	a377      	add	r3, pc, #476	; (adr r3, 8000db0 <SecondTask+0x270>)
 8000bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bd8:	f7ff fd9a 	bl	8000710 <__aeabi_dcmpge>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <SecondTask+0xa6>
 8000be2:	4b84      	ldr	r3, [pc, #528]	; (8000df4 <SecondTask+0x2b4>)
 8000be4:	e010      	b.n	8000c08 <SecondTask+0xc8>
 8000be6:	4b82      	ldr	r3, [pc, #520]	; (8000df0 <SecondTask+0x2b0>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff fcc4 	bl	8000578 <__aeabi_f2d>
 8000bf0:	a371      	add	r3, pc, #452	; (adr r3, 8000db8 <SecondTask+0x278>)
 8000bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bf6:	f7ff fb61 	bl	80002bc <__adddf3>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	460c      	mov	r4, r1
 8000bfe:	4618      	mov	r0, r3
 8000c00:	4621      	mov	r1, r4
 8000c02:	f7ff fd99 	bl	8000738 <__aeabi_d2f>
 8000c06:	4603      	mov	r3, r0
 8000c08:	4a79      	ldr	r2, [pc, #484]	; (8000df0 <SecondTask+0x2b0>)
 8000c0a:	6013      	str	r3, [r2, #0]
			lambda_targ = (lambda_targ >= 1.4) ? 0.65: lambda_targ + 0.06;
 8000c0c:	4b7a      	ldr	r3, [pc, #488]	; (8000df8 <SecondTask+0x2b8>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fcb1 	bl	8000578 <__aeabi_f2d>
 8000c16:	a366      	add	r3, pc, #408	; (adr r3, 8000db0 <SecondTask+0x270>)
 8000c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c1c:	f7ff fd78 	bl	8000710 <__aeabi_dcmpge>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <SecondTask+0xea>
 8000c26:	4b75      	ldr	r3, [pc, #468]	; (8000dfc <SecondTask+0x2bc>)
 8000c28:	e010      	b.n	8000c4c <SecondTask+0x10c>
 8000c2a:	4b73      	ldr	r3, [pc, #460]	; (8000df8 <SecondTask+0x2b8>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff fca2 	bl	8000578 <__aeabi_f2d>
 8000c34:	a362      	add	r3, pc, #392	; (adr r3, 8000dc0 <SecondTask+0x280>)
 8000c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c3a:	f7ff fb3f 	bl	80002bc <__adddf3>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	460c      	mov	r4, r1
 8000c42:	4618      	mov	r0, r3
 8000c44:	4621      	mov	r1, r4
 8000c46:	f7ff fd77 	bl	8000738 <__aeabi_d2f>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	4a6a      	ldr	r2, [pc, #424]	; (8000df8 <SecondTask+0x2b8>)
 8000c4e:	6013      	str	r3, [r2, #0]
			oil_tmp = (oil_tmp >= 160) ? 1: oil_tmp + 2;
 8000c50:	4b6b      	ldr	r3, [pc, #428]	; (8000e00 <SecondTask+0x2c0>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b9f      	cmp	r3, #159	; 0x9f
 8000c56:	dc03      	bgt.n	8000c60 <SecondTask+0x120>
 8000c58:	4b69      	ldr	r3, [pc, #420]	; (8000e00 <SecondTask+0x2c0>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	3302      	adds	r3, #2
 8000c5e:	e000      	b.n	8000c62 <SecondTask+0x122>
 8000c60:	2301      	movs	r3, #1
 8000c62:	4a67      	ldr	r2, [pc, #412]	; (8000e00 <SecondTask+0x2c0>)
 8000c64:	6013      	str	r3, [r2, #0]
			oil_press = (oil_press >= 12.0) ? 0.1: oil_press + 0.1;
 8000c66:	4b67      	ldr	r3, [pc, #412]	; (8000e04 <SecondTask+0x2c4>)
 8000c68:	edd3 7a00 	vldr	s15, [r3]
 8000c6c:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8000c70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c78:	db01      	blt.n	8000c7e <SecondTask+0x13e>
 8000c7a:	4b63      	ldr	r3, [pc, #396]	; (8000e08 <SecondTask+0x2c8>)
 8000c7c:	e010      	b.n	8000ca0 <SecondTask+0x160>
 8000c7e:	4b61      	ldr	r3, [pc, #388]	; (8000e04 <SecondTask+0x2c4>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fc78 	bl	8000578 <__aeabi_f2d>
 8000c88:	a34f      	add	r3, pc, #316	; (adr r3, 8000dc8 <SecondTask+0x288>)
 8000c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c8e:	f7ff fb15 	bl	80002bc <__adddf3>
 8000c92:	4603      	mov	r3, r0
 8000c94:	460c      	mov	r4, r1
 8000c96:	4618      	mov	r0, r3
 8000c98:	4621      	mov	r1, r4
 8000c9a:	f7ff fd4d 	bl	8000738 <__aeabi_d2f>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	4a58      	ldr	r2, [pc, #352]	; (8000e04 <SecondTask+0x2c4>)
 8000ca2:	6013      	str	r3, [r2, #0]
			fuel_press = (fuel_press >= 100) ? 1: iat + 2;
 8000ca4:	4b59      	ldr	r3, [pc, #356]	; (8000e0c <SecondTask+0x2cc>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2b63      	cmp	r3, #99	; 0x63
 8000caa:	dc03      	bgt.n	8000cb4 <SecondTask+0x174>
 8000cac:	4b58      	ldr	r3, [pc, #352]	; (8000e10 <SecondTask+0x2d0>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	3302      	adds	r3, #2
 8000cb2:	e000      	b.n	8000cb6 <SecondTask+0x176>
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	4a55      	ldr	r2, [pc, #340]	; (8000e0c <SecondTask+0x2cc>)
 8000cb8:	6013      	str	r3, [r2, #0]
			iat = (iat >= 100) ? 1: iat + 2;
 8000cba:	4b55      	ldr	r3, [pc, #340]	; (8000e10 <SecondTask+0x2d0>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2b63      	cmp	r3, #99	; 0x63
 8000cc0:	dc03      	bgt.n	8000cca <SecondTask+0x18a>
 8000cc2:	4b53      	ldr	r3, [pc, #332]	; (8000e10 <SecondTask+0x2d0>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	3302      	adds	r3, #2
 8000cc8:	e000      	b.n	8000ccc <SecondTask+0x18c>
 8000cca:	2301      	movs	r3, #1
 8000ccc:	4a50      	ldr	r2, [pc, #320]	; (8000e10 <SecondTask+0x2d0>)
 8000cce:	6013      	str	r3, [r2, #0]
			egt = (egt >= 760) ? 500: egt +12;
 8000cd0:	4b50      	ldr	r3, [pc, #320]	; (8000e14 <SecondTask+0x2d4>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f5b3 7f3e 	cmp.w	r3, #760	; 0x2f8
 8000cd8:	da03      	bge.n	8000ce2 <SecondTask+0x1a2>
 8000cda:	4b4e      	ldr	r3, [pc, #312]	; (8000e14 <SecondTask+0x2d4>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	330c      	adds	r3, #12
 8000ce0:	e001      	b.n	8000ce6 <SecondTask+0x1a6>
 8000ce2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ce6:	4a4b      	ldr	r2, [pc, #300]	; (8000e14 <SecondTask+0x2d4>)
 8000ce8:	6013      	str	r3, [r2, #0]
			egt_2 = (egt >= 760) ? 500: egt_2 +12;
 8000cea:	4b4a      	ldr	r3, [pc, #296]	; (8000e14 <SecondTask+0x2d4>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f5b3 7f3e 	cmp.w	r3, #760	; 0x2f8
 8000cf2:	da03      	bge.n	8000cfc <SecondTask+0x1bc>
 8000cf4:	4b48      	ldr	r3, [pc, #288]	; (8000e18 <SecondTask+0x2d8>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	330c      	adds	r3, #12
 8000cfa:	e001      	b.n	8000d00 <SecondTask+0x1c0>
 8000cfc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d00:	4a45      	ldr	r2, [pc, #276]	; (8000e18 <SecondTask+0x2d8>)
 8000d02:	6013      	str	r3, [r2, #0]
			tps = (tps >= 100) ? 0: tps + 4;
 8000d04:	4b45      	ldr	r3, [pc, #276]	; (8000e1c <SecondTask+0x2dc>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2b63      	cmp	r3, #99	; 0x63
 8000d0a:	dc03      	bgt.n	8000d14 <SecondTask+0x1d4>
 8000d0c:	4b43      	ldr	r3, [pc, #268]	; (8000e1c <SecondTask+0x2dc>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	3304      	adds	r3, #4
 8000d12:	e000      	b.n	8000d16 <SecondTask+0x1d6>
 8000d14:	2300      	movs	r3, #0
 8000d16:	4a41      	ldr	r2, [pc, #260]	; (8000e1c <SecondTask+0x2dc>)
 8000d18:	6013      	str	r3, [r2, #0]
			batt_v = (batt_v >= 20.0) ? 10.0: batt_v + 0.6;
 8000d1a:	4b41      	ldr	r3, [pc, #260]	; (8000e20 <SecondTask+0x2e0>)
 8000d1c:	edd3 7a00 	vldr	s15, [r3]
 8000d20:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000d24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d2c:	db01      	blt.n	8000d32 <SecondTask+0x1f2>
 8000d2e:	4b3d      	ldr	r3, [pc, #244]	; (8000e24 <SecondTask+0x2e4>)
 8000d30:	e010      	b.n	8000d54 <SecondTask+0x214>
 8000d32:	4b3b      	ldr	r3, [pc, #236]	; (8000e20 <SecondTask+0x2e0>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff fc1e 	bl	8000578 <__aeabi_f2d>
 8000d3c:	a324      	add	r3, pc, #144	; (adr r3, 8000dd0 <SecondTask+0x290>)
 8000d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d42:	f7ff fabb 	bl	80002bc <__adddf3>
 8000d46:	4603      	mov	r3, r0
 8000d48:	460c      	mov	r4, r1
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	4621      	mov	r1, r4
 8000d4e:	f7ff fcf3 	bl	8000738 <__aeabi_d2f>
 8000d52:	4603      	mov	r3, r0
 8000d54:	4a32      	ldr	r2, [pc, #200]	; (8000e20 <SecondTask+0x2e0>)
 8000d56:	6013      	str	r3, [r2, #0]
			ing_ang = (ing_ang >= 20.0) ? 10.0: ing_ang + 0.6;
 8000d58:	4b33      	ldr	r3, [pc, #204]	; (8000e28 <SecondTask+0x2e8>)
 8000d5a:	edd3 7a00 	vldr	s15, [r3]
 8000d5e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000d62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d6a:	db01      	blt.n	8000d70 <SecondTask+0x230>
 8000d6c:	4b2d      	ldr	r3, [pc, #180]	; (8000e24 <SecondTask+0x2e4>)
 8000d6e:	e010      	b.n	8000d92 <SecondTask+0x252>
 8000d70:	4b2d      	ldr	r3, [pc, #180]	; (8000e28 <SecondTask+0x2e8>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fbff 	bl	8000578 <__aeabi_f2d>
 8000d7a:	a315      	add	r3, pc, #84	; (adr r3, 8000dd0 <SecondTask+0x290>)
 8000d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d80:	f7ff fa9c 	bl	80002bc <__adddf3>
 8000d84:	4603      	mov	r3, r0
 8000d86:	460c      	mov	r4, r1
 8000d88:	4618      	mov	r0, r3
 8000d8a:	4621      	mov	r1, r4
 8000d8c:	f7ff fcd4 	bl	8000738 <__aeabi_d2f>
 8000d90:	4603      	mov	r3, r0
 8000d92:	4a25      	ldr	r2, [pc, #148]	; (8000e28 <SecondTask+0x2e8>)
 8000d94:	6013      	str	r3, [r2, #0]
			ve = (ve >= 21.0) ? 10.0: ve + 0.6;
 8000d96:	4b25      	ldr	r3, [pc, #148]	; (8000e2c <SecondTask+0x2ec>)
 8000d98:	edd3 7a00 	vldr	s15, [r3]
 8000d9c:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
 8000da0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000da8:	db42      	blt.n	8000e30 <SecondTask+0x2f0>
 8000daa:	4b1e      	ldr	r3, [pc, #120]	; (8000e24 <SecondTask+0x2e4>)
 8000dac:	e051      	b.n	8000e52 <SecondTask+0x312>
 8000dae:	bf00      	nop
 8000db0:	66666666 	.word	0x66666666
 8000db4:	3ff66666 	.word	0x3ff66666
 8000db8:	9999999a 	.word	0x9999999a
 8000dbc:	3fa99999 	.word	0x3fa99999
 8000dc0:	eb851eb8 	.word	0xeb851eb8
 8000dc4:	3faeb851 	.word	0x3faeb851
 8000dc8:	9999999a 	.word	0x9999999a
 8000dcc:	3fb99999 	.word	0x3fb99999
 8000dd0:	33333333 	.word	0x33333333
 8000dd4:	3fe33333 	.word	0x3fe33333
 8000dd8:	0802b7a4 	.word	0x0802b7a4
 8000ddc:	200087f8 	.word	0x200087f8
 8000de0:	0802c204 	.word	0x0802c204
 8000de4:	20000004 	.word	0x20000004
 8000de8:	2000000c 	.word	0x2000000c
 8000dec:	20000008 	.word	0x20000008
 8000df0:	20000010 	.word	0x20000010
 8000df4:	3f19999a 	.word	0x3f19999a
 8000df8:	20000014 	.word	0x20000014
 8000dfc:	3f266666 	.word	0x3f266666
 8000e00:	200003c4 	.word	0x200003c4
 8000e04:	200003c8 	.word	0x200003c8
 8000e08:	3dcccccd 	.word	0x3dcccccd
 8000e0c:	200003cc 	.word	0x200003cc
 8000e10:	200003d0 	.word	0x200003d0
 8000e14:	200003d4 	.word	0x200003d4
 8000e18:	200003d8 	.word	0x200003d8
 8000e1c:	200003dc 	.word	0x200003dc
 8000e20:	200003e0 	.word	0x200003e0
 8000e24:	41200000 	.word	0x41200000
 8000e28:	200003e4 	.word	0x200003e4
 8000e2c:	200003f0 	.word	0x200003f0
 8000e30:	4b5d      	ldr	r3, [pc, #372]	; (8000fa8 <SecondTask+0x468>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fb9f 	bl	8000578 <__aeabi_f2d>
 8000e3a:	a359      	add	r3, pc, #356	; (adr r3, 8000fa0 <SecondTask+0x460>)
 8000e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e40:	f7ff fa3c 	bl	80002bc <__adddf3>
 8000e44:	4603      	mov	r3, r0
 8000e46:	460c      	mov	r4, r1
 8000e48:	4618      	mov	r0, r3
 8000e4a:	4621      	mov	r1, r4
 8000e4c:	f7ff fc74 	bl	8000738 <__aeabi_d2f>
 8000e50:	4603      	mov	r3, r0
 8000e52:	4a55      	ldr	r2, [pc, #340]	; (8000fa8 <SecondTask+0x468>)
 8000e54:	6013      	str	r3, [r2, #0]
			boost_dc = (boost_dc >= 20.0) ? 10.0: boost_dc + 0.6;
 8000e56:	4b55      	ldr	r3, [pc, #340]	; (8000fac <SecondTask+0x46c>)
 8000e58:	edd3 7a00 	vldr	s15, [r3]
 8000e5c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000e60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e68:	db01      	blt.n	8000e6e <SecondTask+0x32e>
 8000e6a:	4b51      	ldr	r3, [pc, #324]	; (8000fb0 <SecondTask+0x470>)
 8000e6c:	e010      	b.n	8000e90 <SecondTask+0x350>
 8000e6e:	4b4f      	ldr	r3, [pc, #316]	; (8000fac <SecondTask+0x46c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fb80 	bl	8000578 <__aeabi_f2d>
 8000e78:	a349      	add	r3, pc, #292	; (adr r3, 8000fa0 <SecondTask+0x460>)
 8000e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e7e:	f7ff fa1d 	bl	80002bc <__adddf3>
 8000e82:	4603      	mov	r3, r0
 8000e84:	460c      	mov	r4, r1
 8000e86:	4618      	mov	r0, r3
 8000e88:	4621      	mov	r1, r4
 8000e8a:	f7ff fc55 	bl	8000738 <__aeabi_d2f>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	4a46      	ldr	r2, [pc, #280]	; (8000fac <SecondTask+0x46c>)
 8000e92:	6013      	str	r3, [r2, #0]
			boost_trgt = (boost_trgt >= 23) ? 10: boost_trgt + 1;
 8000e94:	4b47      	ldr	r3, [pc, #284]	; (8000fb4 <SecondTask+0x474>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b16      	cmp	r3, #22
 8000e9a:	dc03      	bgt.n	8000ea4 <SecondTask+0x364>
 8000e9c:	4b45      	ldr	r3, [pc, #276]	; (8000fb4 <SecondTask+0x474>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	e000      	b.n	8000ea6 <SecondTask+0x366>
 8000ea4:	230a      	movs	r3, #10
 8000ea6:	4a43      	ldr	r2, [pc, #268]	; (8000fb4 <SecondTask+0x474>)
 8000ea8:	6013      	str	r3, [r2, #0]
			injector_dc = (injector_dc >= 24.0) ? 10.0: injector_dc + 0.6;
 8000eaa:	4b43      	ldr	r3, [pc, #268]	; (8000fb8 <SecondTask+0x478>)
 8000eac:	edd3 7a00 	vldr	s15, [r3]
 8000eb0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8000eb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ebc:	db01      	blt.n	8000ec2 <SecondTask+0x382>
 8000ebe:	4b3c      	ldr	r3, [pc, #240]	; (8000fb0 <SecondTask+0x470>)
 8000ec0:	e010      	b.n	8000ee4 <SecondTask+0x3a4>
 8000ec2:	4b3d      	ldr	r3, [pc, #244]	; (8000fb8 <SecondTask+0x478>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff fb56 	bl	8000578 <__aeabi_f2d>
 8000ecc:	a334      	add	r3, pc, #208	; (adr r3, 8000fa0 <SecondTask+0x460>)
 8000ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed2:	f7ff f9f3 	bl	80002bc <__adddf3>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	460c      	mov	r4, r1
 8000eda:	4618      	mov	r0, r3
 8000edc:	4621      	mov	r1, r4
 8000ede:	f7ff fc2b 	bl	8000738 <__aeabi_d2f>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	4a34      	ldr	r2, [pc, #208]	; (8000fb8 <SecondTask+0x478>)
 8000ee6:	6013      	str	r3, [r2, #0]
			emu_errors = 0;
 8000ee8:	4b34      	ldr	r3, [pc, #208]	; (8000fbc <SecondTask+0x47c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
			emu_protection = 0;
 8000eee:	4b34      	ldr	r3, [pc, #208]	; (8000fc0 <SecondTask+0x480>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
			eng_protection_code = 0;
 8000ef4:	4b33      	ldr	r3, [pc, #204]	; (8000fc4 <SecondTask+0x484>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
			check_eng_code = 0;
 8000efa:	4b33      	ldr	r3, [pc, #204]	; (8000fc8 <SecondTask+0x488>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
		}

		display_values dispVals = {rpm, clt, map, lambda, lambda_targ, oil_tmp, oil_press, fuel_press, iat, egt, egt_2, tps, batt_v,
 8000f00:	4b32      	ldr	r3, [pc, #200]	; (8000fcc <SecondTask+0x48c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	60bb      	str	r3, [r7, #8]
 8000f06:	4b32      	ldr	r3, [pc, #200]	; (8000fd0 <SecondTask+0x490>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	4b31      	ldr	r3, [pc, #196]	; (8000fd4 <SecondTask+0x494>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	613b      	str	r3, [r7, #16]
 8000f12:	4b31      	ldr	r3, [pc, #196]	; (8000fd8 <SecondTask+0x498>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	617b      	str	r3, [r7, #20]
 8000f18:	4b30      	ldr	r3, [pc, #192]	; (8000fdc <SecondTask+0x49c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	61bb      	str	r3, [r7, #24]
 8000f1e:	4b30      	ldr	r3, [pc, #192]	; (8000fe0 <SecondTask+0x4a0>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	61fb      	str	r3, [r7, #28]
 8000f24:	4b2f      	ldr	r3, [pc, #188]	; (8000fe4 <SecondTask+0x4a4>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	623b      	str	r3, [r7, #32]
 8000f2a:	4b2f      	ldr	r3, [pc, #188]	; (8000fe8 <SecondTask+0x4a8>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8000f30:	4b2e      	ldr	r3, [pc, #184]	; (8000fec <SecondTask+0x4ac>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f36:	4b2e      	ldr	r3, [pc, #184]	; (8000ff0 <SecondTask+0x4b0>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f3c:	4b2d      	ldr	r3, [pc, #180]	; (8000ff4 <SecondTask+0x4b4>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	633b      	str	r3, [r7, #48]	; 0x30
 8000f42:	4b2d      	ldr	r3, [pc, #180]	; (8000ff8 <SecondTask+0x4b8>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	637b      	str	r3, [r7, #52]	; 0x34
 8000f48:	4b2c      	ldr	r3, [pc, #176]	; (8000ffc <SecondTask+0x4bc>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f4e:	4b2c      	ldr	r3, [pc, #176]	; (8001000 <SecondTask+0x4c0>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f54:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <SecondTask+0x47c>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	643b      	str	r3, [r7, #64]	; 0x40
 8000f5a:	4b19      	ldr	r3, [pc, #100]	; (8000fc0 <SecondTask+0x480>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	647b      	str	r3, [r7, #68]	; 0x44
 8000f60:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <SecondTask+0x468>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	64bb      	str	r3, [r7, #72]	; 0x48
 8000f66:	4b11      	ldr	r3, [pc, #68]	; (8000fac <SecondTask+0x46c>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000f6c:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <SecondTask+0x474>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	653b      	str	r3, [r7, #80]	; 0x50
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <SecondTask+0x478>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	657b      	str	r3, [r7, #84]	; 0x54
 8000f78:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <SecondTask+0x488>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	65bb      	str	r3, [r7, #88]	; 0x58
 8000f7e:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <SecondTask+0x484>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	65fb      	str	r3, [r7, #92]	; 0x5c
		ing_ang, emu_errors, emu_protection, ve, boost_dc, boost_trgt, injector_dc, check_eng_code, eng_protection_code};
	    xQueueSend(messageQ, &dispVals,0);
 8000f84:	4b1f      	ldr	r3, [pc, #124]	; (8001004 <SecondTask+0x4c4>)
 8000f86:	6818      	ldr	r0, [r3, #0]
 8000f88:	f107 0108 	add.w	r1, r7, #8
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f00c fb46 	bl	800d620 <xQueueGenericSend>
		osDelay(50);
 8000f94:	2032      	movs	r0, #50	; 0x32
 8000f96:	f00c f855 	bl	800d044 <osDelay>
	{
 8000f9a:	e5ec      	b.n	8000b76 <SecondTask+0x36>
 8000f9c:	f3af 8000 	nop.w
 8000fa0:	33333333 	.word	0x33333333
 8000fa4:	3fe33333 	.word	0x3fe33333
 8000fa8:	200003f0 	.word	0x200003f0
 8000fac:	200003f4 	.word	0x200003f4
 8000fb0:	41200000 	.word	0x41200000
 8000fb4:	200003f8 	.word	0x200003f8
 8000fb8:	200003fc 	.word	0x200003fc
 8000fbc:	200003e8 	.word	0x200003e8
 8000fc0:	200003ec 	.word	0x200003ec
 8000fc4:	20000404 	.word	0x20000404
 8000fc8:	20000400 	.word	0x20000400
 8000fcc:	20000004 	.word	0x20000004
 8000fd0:	2000000c 	.word	0x2000000c
 8000fd4:	20000008 	.word	0x20000008
 8000fd8:	20000010 	.word	0x20000010
 8000fdc:	20000014 	.word	0x20000014
 8000fe0:	200003c4 	.word	0x200003c4
 8000fe4:	200003c8 	.word	0x200003c8
 8000fe8:	200003cc 	.word	0x200003cc
 8000fec:	200003d0 	.word	0x200003d0
 8000ff0:	200003d4 	.word	0x200003d4
 8000ff4:	200003d8 	.word	0x200003d8
 8000ff8:	200003dc 	.word	0x200003dc
 8000ffc:	200003e0 	.word	0x200003e0
 8001000:	200003e4 	.word	0x200003e4
 8001004:	200087f4 	.word	0x200087f4

08001008 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001008:	b5b0      	push	{r4, r5, r7, lr}
 800100a:	b08e      	sub	sp, #56	; 0x38
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800100e:	f002 fd88 	bl	8003b22 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001012:	f000 f85f 	bl	80010d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001016:	f001 fa5b 	bl	80024d0 <MX_GPIO_Init>
  MX_ADC3_Init();
 800101a:	f000 f917 	bl	800124c <MX_ADC3_Init>
  MX_CRC_Init();
 800101e:	f000 fb93 	bl	8001748 <MX_CRC_Init>
  MX_DCMI_Init();
 8001022:	f000 fbb3 	bl	800178c <MX_DCMI_Init>
  MX_DMA2D_Init();
 8001026:	f000 fbe5 	bl	80017f4 <MX_DMA2D_Init>
  MX_FMC_Init();
 800102a:	f001 f9a5 	bl	8002378 <MX_FMC_Init>
  MX_LTDC_Init();
 800102e:	f000 fc13 	bl	8001858 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8001032:	f000 fc93 	bl	800195c <MX_QUADSPI_Init>
  MX_RTC_Init();
 8001036:	f000 fcbd 	bl	80019b4 <MX_RTC_Init>
  MX_SAI2_Init();
 800103a:	f000 fd63 	bl	8001b04 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 800103e:	f000 fe09 	bl	8001c54 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8001042:	f000 fe27 	bl	8001c94 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8001046:	f000 fe55 	bl	8001cf4 <MX_SPI2_Init>
  MX_TIM1_Init();
 800104a:	f000 fe91 	bl	8001d70 <MX_TIM1_Init>
  MX_TIM2_Init();
 800104e:	f000 ff3b 	bl	8001ec8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001052:	f000 ffaf 	bl	8001fb4 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001056:	f001 f823 	bl	80020a0 <MX_TIM5_Init>
  MX_TIM8_Init();
 800105a:	f001 f897 	bl	800218c <MX_TIM8_Init>
  MX_TIM12_Init();
 800105e:	f001 f8e7 	bl	8002230 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8001062:	f001 f929 	bl	80022b8 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001066:	f001 f957 	bl	8002318 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 800106a:	f00b fca7 	bl	800c9bc <MX_FATFS_Init>
  MX_CAN1_Init();
 800106e:	f000 f93f 	bl	80012f0 <MX_CAN1_Init>
  MX_TouchGFX_Init();
 8001072:	f00f f91b 	bl	80102ac <MX_TouchGFX_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8001076:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <main+0xbc>)
 8001078:	f107 041c 	add.w	r4, r7, #28
 800107c:	461d      	mov	r5, r3
 800107e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001080:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001082:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001086:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800108a:	f107 031c 	add.w	r3, r7, #28
 800108e:	2100      	movs	r1, #0
 8001090:	4618      	mov	r0, r3
 8001092:	f00b ff8b 	bl	800cfac <osThreadCreate>
 8001096:	4602      	mov	r2, r0
 8001098:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <main+0xc0>)
 800109a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(second, SecondTask, osPriorityNormal, 0, 512);
 800109c:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <main+0xc4>)
 800109e:	463c      	mov	r4, r7
 80010a0:	461d      	mov	r5, r3
 80010a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  secondTaskHandle = osThreadCreate(osThread(second), NULL);
 80010ae:	463b      	mov	r3, r7
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f00b ff7a 	bl	800cfac <osThreadCreate>
 80010b8:	4602      	mov	r2, r0
 80010ba:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <main+0xc8>)
 80010bc:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80010be:	f00b ff52 	bl	800cf66 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010c2:	e7fe      	b.n	80010c2 <main+0xba>
 80010c4:	0802b7d8 	.word	0x0802b7d8
 80010c8:	2000c8f4 	.word	0x2000c8f4
 80010cc:	0802b7fc 	.word	0x0802b7fc
 80010d0:	2000c3dc 	.word	0x2000c3dc

080010d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b0b4      	sub	sp, #208	; 0xd0
 80010d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010da:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80010de:	2230      	movs	r2, #48	; 0x30
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f029 fbd5 	bl	802a892 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010f8:	f107 0308 	add.w	r3, r7, #8
 80010fc:	2284      	movs	r2, #132	; 0x84
 80010fe:	2100      	movs	r1, #0
 8001100:	4618      	mov	r0, r3
 8001102:	f029 fbc6 	bl	802a892 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8001106:	f005 ff0d 	bl	8006f24 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800110a:	4b4d      	ldr	r3, [pc, #308]	; (8001240 <SystemClock_Config+0x16c>)
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	4a4c      	ldr	r2, [pc, #304]	; (8001240 <SystemClock_Config+0x16c>)
 8001110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001114:	6413      	str	r3, [r2, #64]	; 0x40
 8001116:	4b4a      	ldr	r3, [pc, #296]	; (8001240 <SystemClock_Config+0x16c>)
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001122:	4b48      	ldr	r3, [pc, #288]	; (8001244 <SystemClock_Config+0x170>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a47      	ldr	r2, [pc, #284]	; (8001244 <SystemClock_Config+0x170>)
 8001128:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800112c:	6013      	str	r3, [r2, #0]
 800112e:	4b45      	ldr	r3, [pc, #276]	; (8001244 <SystemClock_Config+0x170>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001136:	603b      	str	r3, [r7, #0]
 8001138:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800113a:	2309      	movs	r3, #9
 800113c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001140:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001144:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001148:	2301      	movs	r3, #1
 800114a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800114e:	2302      	movs	r3, #2
 8001150:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001154:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001158:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 800115c:	2319      	movs	r3, #25
 800115e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001162:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001166:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800116a:	2302      	movs	r3, #2
 800116c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001170:	2309      	movs	r3, #9
 8001172:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001176:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800117a:	4618      	mov	r0, r3
 800117c:	f005 fff4 	bl	8007168 <HAL_RCC_OscConfig>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001186:	f001 fbd7 	bl	8002938 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800118a:	f005 fedb 	bl	8006f44 <HAL_PWREx_EnableOverDrive>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001194:	f001 fbd0 	bl	8002938 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001198:	230f      	movs	r3, #15
 800119a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800119e:	2302      	movs	r3, #2
 80011a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011a4:	2300      	movs	r3, #0
 80011a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80011ba:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80011be:	2106      	movs	r1, #6
 80011c0:	4618      	mov	r0, r3
 80011c2:	f006 fa75 	bl	80076b0 <HAL_RCC_ClockConfig>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 80011cc:	f001 fbb4 	bl	8002938 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 80011d0:	4b1d      	ldr	r3, [pc, #116]	; (8001248 <SystemClock_Config+0x174>)
 80011d2:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 80011d4:	2364      	movs	r3, #100	; 0x64
 80011d6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80011d8:	2302      	movs	r3, #2
 80011da:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80011dc:	2302      	movs	r3, #2
 80011de:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80011e0:	2302      	movs	r3, #2
 80011e2:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80011e4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80011e8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80011ea:	2305      	movs	r3, #5
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80011ee:	2302      	movs	r3, #2
 80011f0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80011f2:	2303      	movs	r3, #3
 80011f4:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 80011f6:	2301      	movs	r3, #1
 80011f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80011fa:	2301      	movs	r3, #1
 80011fc:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80011fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001202:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001204:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001208:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800120a:	2300      	movs	r3, #0
 800120c:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800120e:	2300      	movs	r3, #0
 8001210:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001212:	2300      	movs	r3, #0
 8001214:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001216:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800121a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800121e:	2300      	movs	r3, #0
 8001220:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001224:	f107 0308 	add.w	r3, r7, #8
 8001228:	4618      	mov	r0, r3
 800122a:	f006 fc45 	bl	8007ab8 <HAL_RCCEx_PeriphCLKConfig>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <SystemClock_Config+0x164>
  {
    Error_Handler();
 8001234:	f001 fb80 	bl	8002938 <Error_Handler>
  }
}
 8001238:	bf00      	nop
 800123a:	37d0      	adds	r7, #208	; 0xd0
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40023800 	.word	0x40023800
 8001244:	40007000 	.word	0x40007000
 8001248:	01b00868 	.word	0x01b00868

0800124c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001252:	463b      	mov	r3, r7
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 800125e:	4b21      	ldr	r3, [pc, #132]	; (80012e4 <MX_ADC3_Init+0x98>)
 8001260:	4a21      	ldr	r2, [pc, #132]	; (80012e8 <MX_ADC3_Init+0x9c>)
 8001262:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001264:	4b1f      	ldr	r3, [pc, #124]	; (80012e4 <MX_ADC3_Init+0x98>)
 8001266:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800126a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800126c:	4b1d      	ldr	r3, [pc, #116]	; (80012e4 <MX_ADC3_Init+0x98>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001272:	4b1c      	ldr	r3, [pc, #112]	; (80012e4 <MX_ADC3_Init+0x98>)
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001278:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <MX_ADC3_Init+0x98>)
 800127a:	2200      	movs	r2, #0
 800127c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800127e:	4b19      	ldr	r3, [pc, #100]	; (80012e4 <MX_ADC3_Init+0x98>)
 8001280:	2200      	movs	r2, #0
 8001282:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001286:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <MX_ADC3_Init+0x98>)
 8001288:	2200      	movs	r2, #0
 800128a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800128c:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <MX_ADC3_Init+0x98>)
 800128e:	4a17      	ldr	r2, [pc, #92]	; (80012ec <MX_ADC3_Init+0xa0>)
 8001290:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001292:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <MX_ADC3_Init+0x98>)
 8001294:	2200      	movs	r2, #0
 8001296:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <MX_ADC3_Init+0x98>)
 800129a:	2201      	movs	r2, #1
 800129c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800129e:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <MX_ADC3_Init+0x98>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012a6:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <MX_ADC3_Init+0x98>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80012ac:	480d      	ldr	r0, [pc, #52]	; (80012e4 <MX_ADC3_Init+0x98>)
 80012ae:	f002 fc87 	bl	8003bc0 <HAL_ADC_Init>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80012b8:	f001 fb3e 	bl	8002938 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80012bc:	2304      	movs	r3, #4
 80012be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012c0:	2301      	movs	r3, #1
 80012c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012c4:	2300      	movs	r3, #0
 80012c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012c8:	463b      	mov	r3, r7
 80012ca:	4619      	mov	r1, r3
 80012cc:	4805      	ldr	r0, [pc, #20]	; (80012e4 <MX_ADC3_Init+0x98>)
 80012ce:	f002 fcbb 	bl	8003c48 <HAL_ADC_ConfigChannel>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80012d8:	f001 fb2e 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80012dc:	bf00      	nop
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	2000c4f8 	.word	0x2000c4f8
 80012e8:	40012200 	.word	0x40012200
 80012ec:	0f000001 	.word	0x0f000001

080012f0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08a      	sub	sp, #40	; 0x28
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80012f6:	4b30      	ldr	r3, [pc, #192]	; (80013b8 <MX_CAN1_Init+0xc8>)
 80012f8:	4a30      	ldr	r2, [pc, #192]	; (80013bc <MX_CAN1_Init+0xcc>)
 80012fa:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 20;
 80012fc:	4b2e      	ldr	r3, [pc, #184]	; (80013b8 <MX_CAN1_Init+0xc8>)
 80012fe:	2214      	movs	r2, #20
 8001300:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001302:	4b2d      	ldr	r3, [pc, #180]	; (80013b8 <MX_CAN1_Init+0xc8>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001308:	4b2b      	ldr	r3, [pc, #172]	; (80013b8 <MX_CAN1_Init+0xc8>)
 800130a:	2200      	movs	r2, #0
 800130c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 800130e:	4b2a      	ldr	r3, [pc, #168]	; (80013b8 <MX_CAN1_Init+0xc8>)
 8001310:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001314:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001316:	4b28      	ldr	r3, [pc, #160]	; (80013b8 <MX_CAN1_Init+0xc8>)
 8001318:	2200      	movs	r2, #0
 800131a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800131c:	4b26      	ldr	r3, [pc, #152]	; (80013b8 <MX_CAN1_Init+0xc8>)
 800131e:	2200      	movs	r2, #0
 8001320:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001322:	4b25      	ldr	r3, [pc, #148]	; (80013b8 <MX_CAN1_Init+0xc8>)
 8001324:	2200      	movs	r2, #0
 8001326:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001328:	4b23      	ldr	r3, [pc, #140]	; (80013b8 <MX_CAN1_Init+0xc8>)
 800132a:	2200      	movs	r2, #0
 800132c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800132e:	4b22      	ldr	r3, [pc, #136]	; (80013b8 <MX_CAN1_Init+0xc8>)
 8001330:	2200      	movs	r2, #0
 8001332:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001334:	4b20      	ldr	r3, [pc, #128]	; (80013b8 <MX_CAN1_Init+0xc8>)
 8001336:	2200      	movs	r2, #0
 8001338:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800133a:	4b1f      	ldr	r3, [pc, #124]	; (80013b8 <MX_CAN1_Init+0xc8>)
 800133c:	2200      	movs	r2, #0
 800133e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001340:	481d      	ldr	r0, [pc, #116]	; (80013b8 <MX_CAN1_Init+0xc8>)
 8001342:	f002 fec5 	bl	80040d0 <HAL_CAN_Init>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800134c:	f001 faf4 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterBank = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001354:	2300      	movs	r3, #0
 8001356:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001358:	2301      	movs	r3, #1
 800135a:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 800135c:	2300      	movs	r3, #0
 800135e:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8001360:	2300      	movs	r3, #0
 8001362:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8001364:	2300      	movs	r3, #0
 8001366:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8001368:	2300      	movs	r3, #0
 800136a:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800136c:	2300      	movs	r3, #0
 800136e:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8001370:	2301      	movs	r3, #1
 8001372:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 8001374:	230e      	movs	r3, #14
 8001376:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8001378:	463b      	mov	r3, r7
 800137a:	4619      	mov	r1, r3
 800137c:	480e      	ldr	r0, [pc, #56]	; (80013b8 <MX_CAN1_Init+0xc8>)
 800137e:	f002 ffa3 	bl	80042c8 <HAL_CAN_ConfigFilter>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_CAN1_Init+0x9c>
  {
    /* Filter configuration Error */
    Error_Handler();
 8001388:	f001 fad6 	bl	8002938 <Error_Handler>
  }

  /*##-3- Start the CAN peripheral ###########################################*/
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 800138c:	480a      	ldr	r0, [pc, #40]	; (80013b8 <MX_CAN1_Init+0xc8>)
 800138e:	f003 f87b 	bl	8004488 <HAL_CAN_Start>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_CAN1_Init+0xac>
  {
   /* Start Error */
   Error_Handler();
 8001398:	f001 face 	bl	8002938 <Error_Handler>
  }

  /*##-4- Activate CAN RX notification #######################################*/
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800139c:	2102      	movs	r1, #2
 800139e:	4806      	ldr	r0, [pc, #24]	; (80013b8 <MX_CAN1_Init+0xc8>)
 80013a0:	f003 f9c8 	bl	8004734 <HAL_CAN_ActivateNotification>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_CAN1_Init+0xbe>
  {
    /* Notification Error */
    Error_Handler();
 80013aa:	f001 fac5 	bl	8002938 <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 80013ae:	bf00      	nop
 80013b0:	3728      	adds	r7, #40	; 0x28
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	2000c8cc 	.word	0x2000c8cc
 80013bc:	40006400 	.word	0x40006400

080013c0 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08c      	sub	sp, #48	; 0x30
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Get RX message */
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80013c8:	4ba7      	ldr	r3, [pc, #668]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 80013ca:	4aa8      	ldr	r2, [pc, #672]	; (800166c <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 80013cc:	2100      	movs	r1, #0
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f003 f89e 	bl	8004510 <HAL_CAN_GetRxMessage>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    /* Reception Error */
    Error_Handler();
 80013da:	f001 faad 	bl	8002938 <Error_Handler>
  }

  /* Package one */
  if ((RxHeader.StdId == 0x600) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 80013de:	4ba3      	ldr	r3, [pc, #652]	; (800166c <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80013e6:	d145      	bne.n	8001474 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
 80013e8:	4ba0      	ldr	r3, [pc, #640]	; (800166c <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d141      	bne.n	8001474 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
 80013f0:	4b9e      	ldr	r3, [pc, #632]	; (800166c <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 80013f2:	691b      	ldr	r3, [r3, #16]
 80013f4:	2b08      	cmp	r3, #8
 80013f6:	d13d      	bne.n	8001474 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
  {
	 uint16_t rpm_in = (RxData[0] << 0) | (RxData[1] << 8);
 80013f8:	4b9b      	ldr	r3, [pc, #620]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	b21a      	sxth	r2, r3
 80013fe:	4b9a      	ldr	r3, [pc, #616]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 8001400:	785b      	ldrb	r3, [r3, #1]
 8001402:	021b      	lsls	r3, r3, #8
 8001404:	b21b      	sxth	r3, r3
 8001406:	4313      	orrs	r3, r2
 8001408:	b21b      	sxth	r3, r3
 800140a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 uint8_t tps_in = RxData[2];
 800140c:	4b96      	ldr	r3, [pc, #600]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 800140e:	789b      	ldrb	r3, [r3, #2]
 8001410:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	 uint8_t iat_in = RxData[3];
 8001414:	4b94      	ldr	r3, [pc, #592]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 8001416:	78db      	ldrb	r3, [r3, #3]
 8001418:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	 uint16_t map_in = (RxData[4] << 0) | (RxData[5] << 8);
 800141c:	4b92      	ldr	r3, [pc, #584]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 800141e:	791b      	ldrb	r3, [r3, #4]
 8001420:	b21a      	sxth	r2, r3
 8001422:	4b91      	ldr	r3, [pc, #580]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 8001424:	795b      	ldrb	r3, [r3, #5]
 8001426:	021b      	lsls	r3, r3, #8
 8001428:	b21b      	sxth	r3, r3
 800142a:	4313      	orrs	r3, r2
 800142c:	b21b      	sxth	r3, r3
 800142e:	857b      	strh	r3, [r7, #42]	; 0x2a

	 rpm = (int)rpm_in;
 8001430:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001432:	4a8f      	ldr	r2, [pc, #572]	; (8001670 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b0>)
 8001434:	6013      	str	r3, [r2, #0]
	 map = ((int)map_in*1.0f);
 8001436:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001438:	ee07 3a90 	vmov	s15, r3
 800143c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001440:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001444:	ee17 2a90 	vmov	r2, s15
 8001448:	4b8a      	ldr	r3, [pc, #552]	; (8001674 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>)
 800144a:	601a      	str	r2, [r3, #0]
	 iat = (int)iat_in;
 800144c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001450:	4a89      	ldr	r2, [pc, #548]	; (8001678 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 8001452:	6013      	str	r3, [r2, #0]
	 tps = (int)(((float)tps_in)*0.5f);
 8001454:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001458:	ee07 3a90 	vmov	s15, r3
 800145c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001460:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001464:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001468:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800146c:	ee17 2a90 	vmov	r2, s15
 8001470:	4b82      	ldr	r3, [pc, #520]	; (800167c <HAL_CAN_RxFifo0MsgPendingCallback+0x2bc>)
 8001472:	601a      	str	r2, [r3, #0]
	 (void)map;
	 (void)iat;
  }

  if ((RxHeader.StdId == 0x602) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 8001474:	4b7d      	ldr	r3, [pc, #500]	; (800166c <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f240 6202 	movw	r2, #1538	; 0x602
 800147c:	4293      	cmp	r3, r2
 800147e:	d12d      	bne.n	80014dc <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>
 8001480:	4b7a      	ldr	r3, [pc, #488]	; (800166c <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d129      	bne.n	80014dc <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>
 8001488:	4b78      	ldr	r3, [pc, #480]	; (800166c <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 800148a:	691b      	ldr	r3, [r3, #16]
 800148c:	2b08      	cmp	r3, #8
 800148e:	d125      	bne.n	80014dc <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>
  {
	 uint8_t oil_tmp_in = RxData[3];
 8001490:	4b75      	ldr	r3, [pc, #468]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 8001492:	78db      	ldrb	r3, [r3, #3]
 8001494:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	 uint8_t oil_press_in = RxData[4];
 8001498:	4b73      	ldr	r3, [pc, #460]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 800149a:	791b      	ldrb	r3, [r3, #4]
 800149c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	 uint16_t clt_in = (RxData[6] << 0) | (RxData[7] << 8);
 80014a0:	4b71      	ldr	r3, [pc, #452]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 80014a2:	799b      	ldrb	r3, [r3, #6]
 80014a4:	b21a      	sxth	r2, r3
 80014a6:	4b70      	ldr	r3, [pc, #448]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 80014a8:	79db      	ldrb	r3, [r3, #7]
 80014aa:	021b      	lsls	r3, r3, #8
 80014ac:	b21b      	sxth	r3, r3
 80014ae:	4313      	orrs	r3, r2
 80014b0:	b21b      	sxth	r3, r3
 80014b2:	84fb      	strh	r3, [r7, #38]	; 0x26

	 oil_tmp = ((int)oil_tmp_in) * 1;
 80014b4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80014b8:	4a71      	ldr	r2, [pc, #452]	; (8001680 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 80014ba:	6013      	str	r3, [r2, #0]
	 oil_press = ((int)oil_press_in) * 0.0625f;
 80014bc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80014c0:	ee07 3a90 	vmov	s15, r3
 80014c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014c8:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8001684 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>
 80014cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014d0:	4b6d      	ldr	r3, [pc, #436]	; (8001688 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 80014d2:	edc3 7a00 	vstr	s15, [r3]
	 clt = ((int)clt_in) * 1;
 80014d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014d8:	4a6c      	ldr	r2, [pc, #432]	; (800168c <HAL_CAN_RxFifo0MsgPendingCallback+0x2cc>)
 80014da:	6013      	str	r3, [r2, #0]
  }

  if ((RxHeader.StdId == 0x603) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 80014dc:	4b63      	ldr	r3, [pc, #396]	; (800166c <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f240 6203 	movw	r2, #1539	; 0x603
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d143      	bne.n	8001570 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>
 80014e8:	4b60      	ldr	r3, [pc, #384]	; (800166c <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d13f      	bne.n	8001570 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>
 80014f0:	4b5e      	ldr	r3, [pc, #376]	; (800166c <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	2b08      	cmp	r3, #8
 80014f6:	d13b      	bne.n	8001570 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>
  {
	 uint8_t ing_ang_in = RxData[0];
 80014f8:	4b5b      	ldr	r3, [pc, #364]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	 uint8_t lambda_in = RxData[2];
 8001500:	4b59      	ldr	r3, [pc, #356]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 8001502:	789b      	ldrb	r3, [r3, #2]
 8001504:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	 uint16_t egt_1_in = (RxData[4] << 0) | (RxData[5] << 8);
 8001508:	4b57      	ldr	r3, [pc, #348]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 800150a:	791b      	ldrb	r3, [r3, #4]
 800150c:	b21a      	sxth	r2, r3
 800150e:	4b56      	ldr	r3, [pc, #344]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 8001510:	795b      	ldrb	r3, [r3, #5]
 8001512:	021b      	lsls	r3, r3, #8
 8001514:	b21b      	sxth	r3, r3
 8001516:	4313      	orrs	r3, r2
 8001518:	b21b      	sxth	r3, r3
 800151a:	847b      	strh	r3, [r7, #34]	; 0x22
	 uint16_t egt_2_in = (RxData[6] << 0) | (RxData[7] << 8);
 800151c:	4b52      	ldr	r3, [pc, #328]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 800151e:	799b      	ldrb	r3, [r3, #6]
 8001520:	b21a      	sxth	r2, r3
 8001522:	4b51      	ldr	r3, [pc, #324]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 8001524:	79db      	ldrb	r3, [r3, #7]
 8001526:	021b      	lsls	r3, r3, #8
 8001528:	b21b      	sxth	r3, r3
 800152a:	4313      	orrs	r3, r2
 800152c:	b21b      	sxth	r3, r3
 800152e:	843b      	strh	r3, [r7, #32]

	 ing_ang = ((float) ing_ang_in) * 0.5f;
 8001530:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001534:	ee07 3a90 	vmov	s15, r3
 8001538:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800153c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001540:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001544:	4b52      	ldr	r3, [pc, #328]	; (8001690 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d0>)
 8001546:	edc3 7a00 	vstr	s15, [r3]
	 lambda = ((float)lambda_in)*0.0078125f;
 800154a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800154e:	ee07 3a90 	vmov	s15, r3
 8001552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001556:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001694 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d4>
 800155a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800155e:	4b4e      	ldr	r3, [pc, #312]	; (8001698 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d8>)
 8001560:	edc3 7a00 	vstr	s15, [r3]
	 egt = (int)egt_1_in;
 8001564:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001566:	4a4d      	ldr	r2, [pc, #308]	; (800169c <HAL_CAN_RxFifo0MsgPendingCallback+0x2dc>)
 8001568:	6013      	str	r3, [r2, #0]
	 egt_2 = (int)egt_2_in;
 800156a:	8c3b      	ldrh	r3, [r7, #32]
 800156c:	4a4c      	ldr	r2, [pc, #304]	; (80016a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e0>)
 800156e:	6013      	str	r3, [r2, #0]
   }

  if ((RxHeader.StdId == 0x604) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 8001570:	4b3e      	ldr	r3, [pc, #248]	; (800166c <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f240 6204 	movw	r2, #1540	; 0x604
 8001578:	4293      	cmp	r3, r2
 800157a:	d12c      	bne.n	80015d6 <HAL_CAN_RxFifo0MsgPendingCallback+0x216>
 800157c:	4b3b      	ldr	r3, [pc, #236]	; (800166c <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d128      	bne.n	80015d6 <HAL_CAN_RxFifo0MsgPendingCallback+0x216>
 8001584:	4b39      	ldr	r3, [pc, #228]	; (800166c <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 8001586:	691b      	ldr	r3, [r3, #16]
 8001588:	2b08      	cmp	r3, #8
 800158a:	d124      	bne.n	80015d6 <HAL_CAN_RxFifo0MsgPendingCallback+0x216>
  {
	 uint16_t batt_in = (RxData[2] << 0) | (RxData[3] << 8);
 800158c:	4b36      	ldr	r3, [pc, #216]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 800158e:	789b      	ldrb	r3, [r3, #2]
 8001590:	b21a      	sxth	r2, r3
 8001592:	4b35      	ldr	r3, [pc, #212]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 8001594:	78db      	ldrb	r3, [r3, #3]
 8001596:	021b      	lsls	r3, r3, #8
 8001598:	b21b      	sxth	r3, r3
 800159a:	4313      	orrs	r3, r2
 800159c:	b21b      	sxth	r3, r3
 800159e:	83fb      	strh	r3, [r7, #30]
	 uint16_t emu_errors_in = (RxData[4] << 0) | (RxData[5] << 8);
 80015a0:	4b31      	ldr	r3, [pc, #196]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 80015a2:	791b      	ldrb	r3, [r3, #4]
 80015a4:	b21a      	sxth	r2, r3
 80015a6:	4b30      	ldr	r3, [pc, #192]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 80015a8:	795b      	ldrb	r3, [r3, #5]
 80015aa:	021b      	lsls	r3, r3, #8
 80015ac:	b21b      	sxth	r3, r3
 80015ae:	4313      	orrs	r3, r2
 80015b0:	b21b      	sxth	r3, r3
 80015b2:	83bb      	strh	r3, [r7, #28]
	 float battery_voltage = ((float)batt_in)*0.027f;
 80015b4:	8bfb      	ldrh	r3, [r7, #30]
 80015b6:	ee07 3a90 	vmov	s15, r3
 80015ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015be:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80016a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e4>
 80015c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015c6:	edc7 7a06 	vstr	s15, [r7, #24]
	 batt_v = battery_voltage;
 80015ca:	4a37      	ldr	r2, [pc, #220]	; (80016a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	6013      	str	r3, [r2, #0]
	 (void)batt_v;
	 emu_errors = (int) emu_errors_in;
 80015d0:	8bbb      	ldrh	r3, [r7, #28]
 80015d2:	4a36      	ldr	r2, [pc, #216]	; (80016ac <HAL_CAN_RxFifo0MsgPendingCallback+0x2ec>)
 80015d4:	6013      	str	r3, [r2, #0]

  }

  if ((RxHeader.StdId == 0x500) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 8))
 80015d6:	4b25      	ldr	r3, [pc, #148]	; (800166c <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80015de:	d17b      	bne.n	80016d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x318>
 80015e0:	4b22      	ldr	r3, [pc, #136]	; (800166c <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d177      	bne.n	80016d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x318>
 80015e8:	4b20      	ldr	r3, [pc, #128]	; (800166c <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	2b08      	cmp	r3, #8
 80015ee:	d173      	bne.n	80016d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x318>
    {
  	 uint8_t lambda_targ_in = RxData[0];
 80015f0:	4b1d      	ldr	r3, [pc, #116]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	75fb      	strb	r3, [r7, #23]
  	 uint16_t fuel_p_d = (RxData[1] << 0) | (RxData[2] << 8);
 80015f6:	4b1c      	ldr	r3, [pc, #112]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 80015f8:	785b      	ldrb	r3, [r3, #1]
 80015fa:	b21a      	sxth	r2, r3
 80015fc:	4b1a      	ldr	r3, [pc, #104]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 80015fe:	789b      	ldrb	r3, [r3, #2]
 8001600:	021b      	lsls	r3, r3, #8
 8001602:	b21b      	sxth	r3, r3
 8001604:	4313      	orrs	r3, r2
 8001606:	b21b      	sxth	r3, r3
 8001608:	82bb      	strh	r3, [r7, #20]
	 uint16_t ve_in = (RxData[3] << 0) | (RxData[4] << 8);
 800160a:	4b17      	ldr	r3, [pc, #92]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 800160c:	78db      	ldrb	r3, [r3, #3]
 800160e:	b21a      	sxth	r2, r3
 8001610:	4b15      	ldr	r3, [pc, #84]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 8001612:	791b      	ldrb	r3, [r3, #4]
 8001614:	021b      	lsls	r3, r3, #8
 8001616:	b21b      	sxth	r3, r3
 8001618:	4313      	orrs	r3, r2
 800161a:	b21b      	sxth	r3, r3
 800161c:	827b      	strh	r3, [r7, #18]
	 uint8_t boost_trgt_in = RxData[5];
 800161e:	4b12      	ldr	r3, [pc, #72]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 8001620:	795b      	ldrb	r3, [r3, #5]
 8001622:	747b      	strb	r3, [r7, #17]
	 uint8_t emu_protection_in = RxData[5];
 8001624:	4b10      	ldr	r3, [pc, #64]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 8001626:	795b      	ldrb	r3, [r3, #5]
 8001628:	743b      	strb	r3, [r7, #16]
	 uint8_t injector_dc_in = RxData[7];
 800162a:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 800162c:	79db      	ldrb	r3, [r3, #7]
 800162e:	73fb      	strb	r3, [r7, #15]

  	 lambda_targ = ((float)lambda_targ_in) / 100;
 8001630:	7dfb      	ldrb	r3, [r7, #23]
 8001632:	ee07 3a90 	vmov	s15, r3
 8001636:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800163a:	eddf 6a1d 	vldr	s13, [pc, #116]	; 80016b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2f0>
 800163e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001642:	4b1c      	ldr	r3, [pc, #112]	; (80016b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2f4>)
 8001644:	edc3 7a00 	vstr	s15, [r3]
  	 fuel_press = ((int)fuel_p_d);
 8001648:	8abb      	ldrh	r3, [r7, #20]
 800164a:	4a1b      	ldr	r2, [pc, #108]	; (80016b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2f8>)
 800164c:	6013      	str	r3, [r2, #0]
  	 ve = (float) ve_in;
 800164e:	8a7b      	ldrh	r3, [r7, #18]
 8001650:	ee07 3a90 	vmov	s15, r3
 8001654:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001658:	4b18      	ldr	r3, [pc, #96]	; (80016bc <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 800165a:	edc3 7a00 	vstr	s15, [r3]
  	 boost_trgt = (int) boost_trgt_in;
 800165e:	7c7b      	ldrb	r3, [r7, #17]
 8001660:	4a17      	ldr	r2, [pc, #92]	; (80016c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x300>)
 8001662:	6013      	str	r3, [r2, #0]
  	 emu_protection = (int) emu_protection_in;
 8001664:	7c3b      	ldrb	r3, [r7, #16]
 8001666:	e02d      	b.n	80016c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x304>
 8001668:	2000c5e8 	.word	0x2000c5e8
 800166c:	2000c2a4 	.word	0x2000c2a4
 8001670:	20000004 	.word	0x20000004
 8001674:	20000008 	.word	0x20000008
 8001678:	200003d0 	.word	0x200003d0
 800167c:	200003dc 	.word	0x200003dc
 8001680:	200003c4 	.word	0x200003c4
 8001684:	3d800000 	.word	0x3d800000
 8001688:	200003c8 	.word	0x200003c8
 800168c:	2000000c 	.word	0x2000000c
 8001690:	200003e4 	.word	0x200003e4
 8001694:	3c000000 	.word	0x3c000000
 8001698:	20000010 	.word	0x20000010
 800169c:	200003d4 	.word	0x200003d4
 80016a0:	200003d8 	.word	0x200003d8
 80016a4:	3cdd2f1b 	.word	0x3cdd2f1b
 80016a8:	200003e0 	.word	0x200003e0
 80016ac:	200003e8 	.word	0x200003e8
 80016b0:	42c80000 	.word	0x42c80000
 80016b4:	20000014 	.word	0x20000014
 80016b8:	200003cc 	.word	0x200003cc
 80016bc:	200003f0 	.word	0x200003f0
 80016c0:	200003f8 	.word	0x200003f8
 80016c4:	4a19      	ldr	r2, [pc, #100]	; (800172c <HAL_CAN_RxFifo0MsgPendingCallback+0x36c>)
 80016c6:	6013      	str	r3, [r2, #0]
  	 injector_dc = (float) injector_dc_in;
 80016c8:	7bfb      	ldrb	r3, [r7, #15]
 80016ca:	ee07 3a90 	vmov	s15, r3
 80016ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016d2:	4b17      	ldr	r3, [pc, #92]	; (8001730 <HAL_CAN_RxFifo0MsgPendingCallback+0x370>)
 80016d4:	edc3 7a00 	vstr	s15, [r3]
    }

  if ((RxHeader.StdId == 0x501) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 3))
 80016d8:	4b16      	ldr	r3, [pc, #88]	; (8001734 <HAL_CAN_RxFifo0MsgPendingCallback+0x374>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f240 5201 	movw	r2, #1281	; 0x501
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d11e      	bne.n	8001722 <HAL_CAN_RxFifo0MsgPendingCallback+0x362>
 80016e4:	4b13      	ldr	r3, [pc, #76]	; (8001734 <HAL_CAN_RxFifo0MsgPendingCallback+0x374>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d11a      	bne.n	8001722 <HAL_CAN_RxFifo0MsgPendingCallback+0x362>
 80016ec:	4b11      	ldr	r3, [pc, #68]	; (8001734 <HAL_CAN_RxFifo0MsgPendingCallback+0x374>)
 80016ee:	691b      	ldr	r3, [r3, #16]
 80016f0:	2b03      	cmp	r3, #3
 80016f2:	d116      	bne.n	8001722 <HAL_CAN_RxFifo0MsgPendingCallback+0x362>
  {
	uint8_t eng_protection_code_in = RxData[0];
 80016f4:	4b10      	ldr	r3, [pc, #64]	; (8001738 <HAL_CAN_RxFifo0MsgPendingCallback+0x378>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	73bb      	strb	r3, [r7, #14]
	uint8_t check_eng_code_in = RxData[1];
 80016fa:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <HAL_CAN_RxFifo0MsgPendingCallback+0x378>)
 80016fc:	785b      	ldrb	r3, [r3, #1]
 80016fe:	737b      	strb	r3, [r7, #13]
	 uint8_t boost_dc_in = RxData[2];
 8001700:	4b0d      	ldr	r3, [pc, #52]	; (8001738 <HAL_CAN_RxFifo0MsgPendingCallback+0x378>)
 8001702:	789b      	ldrb	r3, [r3, #2]
 8001704:	733b      	strb	r3, [r7, #12]

	 eng_protection_code = (int)eng_protection_code_in;
 8001706:	7bbb      	ldrb	r3, [r7, #14]
 8001708:	4a0c      	ldr	r2, [pc, #48]	; (800173c <HAL_CAN_RxFifo0MsgPendingCallback+0x37c>)
 800170a:	6013      	str	r3, [r2, #0]
	 check_eng_code = (int) check_eng_code_in;
 800170c:	7b7b      	ldrb	r3, [r7, #13]
 800170e:	4a0c      	ldr	r2, [pc, #48]	; (8001740 <HAL_CAN_RxFifo0MsgPendingCallback+0x380>)
 8001710:	6013      	str	r3, [r2, #0]
	 boost_dc = (float) boost_dc_in;
 8001712:	7b3b      	ldrb	r3, [r7, #12]
 8001714:	ee07 3a90 	vmov	s15, r3
 8001718:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800171c:	4b09      	ldr	r3, [pc, #36]	; (8001744 <HAL_CAN_RxFifo0MsgPendingCallback+0x384>)
 800171e:	edc3 7a00 	vstr	s15, [r3]

  }
}
 8001722:	bf00      	nop
 8001724:	3730      	adds	r7, #48	; 0x30
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	200003ec 	.word	0x200003ec
 8001730:	200003fc 	.word	0x200003fc
 8001734:	2000c2a4 	.word	0x2000c2a4
 8001738:	2000c5e8 	.word	0x2000c5e8
 800173c:	20000404 	.word	0x20000404
 8001740:	20000400 	.word	0x20000400
 8001744:	200003f4 	.word	0x200003f4

08001748 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800174c:	4b0d      	ldr	r3, [pc, #52]	; (8001784 <MX_CRC_Init+0x3c>)
 800174e:	4a0e      	ldr	r2, [pc, #56]	; (8001788 <MX_CRC_Init+0x40>)
 8001750:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001752:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <MX_CRC_Init+0x3c>)
 8001754:	2200      	movs	r2, #0
 8001756:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001758:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <MX_CRC_Init+0x3c>)
 800175a:	2200      	movs	r2, #0
 800175c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800175e:	4b09      	ldr	r3, [pc, #36]	; (8001784 <MX_CRC_Init+0x3c>)
 8001760:	2200      	movs	r2, #0
 8001762:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001764:	4b07      	ldr	r3, [pc, #28]	; (8001784 <MX_CRC_Init+0x3c>)
 8001766:	2200      	movs	r2, #0
 8001768:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800176a:	4b06      	ldr	r3, [pc, #24]	; (8001784 <MX_CRC_Init+0x3c>)
 800176c:	2201      	movs	r2, #1
 800176e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001770:	4804      	ldr	r0, [pc, #16]	; (8001784 <MX_CRC_Init+0x3c>)
 8001772:	f003 fb41 	bl	8004df8 <HAL_CRC_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800177c:	f001 f8dc 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}
 8001784:	2000c450 	.word	0x2000c450
 8001788:	40023000 	.word	0x40023000

0800178c <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8001790:	4b16      	ldr	r3, [pc, #88]	; (80017ec <MX_DCMI_Init+0x60>)
 8001792:	4a17      	ldr	r2, [pc, #92]	; (80017f0 <MX_DCMI_Init+0x64>)
 8001794:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001796:	4b15      	ldr	r3, [pc, #84]	; (80017ec <MX_DCMI_Init+0x60>)
 8001798:	2200      	movs	r2, #0
 800179a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 800179c:	4b13      	ldr	r3, [pc, #76]	; (80017ec <MX_DCMI_Init+0x60>)
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80017a2:	4b12      	ldr	r3, [pc, #72]	; (80017ec <MX_DCMI_Init+0x60>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80017a8:	4b10      	ldr	r3, [pc, #64]	; (80017ec <MX_DCMI_Init+0x60>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80017ae:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <MX_DCMI_Init+0x60>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80017b4:	4b0d      	ldr	r3, [pc, #52]	; (80017ec <MX_DCMI_Init+0x60>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80017ba:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <MX_DCMI_Init+0x60>)
 80017bc:	2200      	movs	r2, #0
 80017be:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80017c0:	4b0a      	ldr	r3, [pc, #40]	; (80017ec <MX_DCMI_Init+0x60>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80017c6:	4b09      	ldr	r3, [pc, #36]	; (80017ec <MX_DCMI_Init+0x60>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80017cc:	4b07      	ldr	r3, [pc, #28]	; (80017ec <MX_DCMI_Init+0x60>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80017d2:	4b06      	ldr	r3, [pc, #24]	; (80017ec <MX_DCMI_Init+0x60>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80017d8:	4804      	ldr	r0, [pc, #16]	; (80017ec <MX_DCMI_Init+0x60>)
 80017da:	f003 fbf7 	bl	8004fcc <HAL_DCMI_Init>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80017e4:	f001 f8a8 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	2000c400 	.word	0x2000c400
 80017f0:	50050000 	.word	0x50050000

080017f4 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80017f8:	4b15      	ldr	r3, [pc, #84]	; (8001850 <MX_DMA2D_Init+0x5c>)
 80017fa:	4a16      	ldr	r2, [pc, #88]	; (8001854 <MX_DMA2D_Init+0x60>)
 80017fc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80017fe:	4b14      	ldr	r3, [pc, #80]	; (8001850 <MX_DMA2D_Init+0x5c>)
 8001800:	2200      	movs	r2, #0
 8001802:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001804:	4b12      	ldr	r3, [pc, #72]	; (8001850 <MX_DMA2D_Init+0x5c>)
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800180a:	4b11      	ldr	r3, [pc, #68]	; (8001850 <MX_DMA2D_Init+0x5c>)
 800180c:	2200      	movs	r2, #0
 800180e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001810:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <MX_DMA2D_Init+0x5c>)
 8001812:	2200      	movs	r2, #0
 8001814:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001816:	4b0e      	ldr	r3, [pc, #56]	; (8001850 <MX_DMA2D_Init+0x5c>)
 8001818:	2200      	movs	r2, #0
 800181a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800181c:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <MX_DMA2D_Init+0x5c>)
 800181e:	2200      	movs	r2, #0
 8001820:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001822:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <MX_DMA2D_Init+0x5c>)
 8001824:	2200      	movs	r2, #0
 8001826:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001828:	4809      	ldr	r0, [pc, #36]	; (8001850 <MX_DMA2D_Init+0x5c>)
 800182a:	f003 fce3 	bl	80051f4 <HAL_DMA2D_Init>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001834:	f001 f880 	bl	8002938 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001838:	2101      	movs	r1, #1
 800183a:	4805      	ldr	r0, [pc, #20]	; (8001850 <MX_DMA2D_Init+0x5c>)
 800183c:	f003 ffa4 	bl	8005788 <HAL_DMA2D_ConfigLayer>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001846:	f001 f877 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	2000c74c 	.word	0x2000c74c
 8001854:	4002b000 	.word	0x4002b000

08001858 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08e      	sub	sp, #56	; 0x38
 800185c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800185e:	1d3b      	adds	r3, r7, #4
 8001860:	2234      	movs	r2, #52	; 0x34
 8001862:	2100      	movs	r1, #0
 8001864:	4618      	mov	r0, r3
 8001866:	f029 f814 	bl	802a892 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800186a:	4b3a      	ldr	r3, [pc, #232]	; (8001954 <MX_LTDC_Init+0xfc>)
 800186c:	4a3a      	ldr	r2, [pc, #232]	; (8001958 <MX_LTDC_Init+0x100>)
 800186e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001870:	4b38      	ldr	r3, [pc, #224]	; (8001954 <MX_LTDC_Init+0xfc>)
 8001872:	2200      	movs	r2, #0
 8001874:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001876:	4b37      	ldr	r3, [pc, #220]	; (8001954 <MX_LTDC_Init+0xfc>)
 8001878:	2200      	movs	r2, #0
 800187a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800187c:	4b35      	ldr	r3, [pc, #212]	; (8001954 <MX_LTDC_Init+0xfc>)
 800187e:	2200      	movs	r2, #0
 8001880:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001882:	4b34      	ldr	r3, [pc, #208]	; (8001954 <MX_LTDC_Init+0xfc>)
 8001884:	2200      	movs	r2, #0
 8001886:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001888:	4b32      	ldr	r3, [pc, #200]	; (8001954 <MX_LTDC_Init+0xfc>)
 800188a:	2228      	movs	r2, #40	; 0x28
 800188c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800188e:	4b31      	ldr	r3, [pc, #196]	; (8001954 <MX_LTDC_Init+0xfc>)
 8001890:	2209      	movs	r2, #9
 8001892:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001894:	4b2f      	ldr	r3, [pc, #188]	; (8001954 <MX_LTDC_Init+0xfc>)
 8001896:	2235      	movs	r2, #53	; 0x35
 8001898:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800189a:	4b2e      	ldr	r3, [pc, #184]	; (8001954 <MX_LTDC_Init+0xfc>)
 800189c:	220b      	movs	r2, #11
 800189e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80018a0:	4b2c      	ldr	r3, [pc, #176]	; (8001954 <MX_LTDC_Init+0xfc>)
 80018a2:	f240 2215 	movw	r2, #533	; 0x215
 80018a6:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80018a8:	4b2a      	ldr	r3, [pc, #168]	; (8001954 <MX_LTDC_Init+0xfc>)
 80018aa:	f240 121b 	movw	r2, #283	; 0x11b
 80018ae:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 80018b0:	4b28      	ldr	r3, [pc, #160]	; (8001954 <MX_LTDC_Init+0xfc>)
 80018b2:	f240 2235 	movw	r2, #565	; 0x235
 80018b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 80018b8:	4b26      	ldr	r3, [pc, #152]	; (8001954 <MX_LTDC_Init+0xfc>)
 80018ba:	f240 121d 	movw	r2, #285	; 0x11d
 80018be:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80018c0:	4b24      	ldr	r3, [pc, #144]	; (8001954 <MX_LTDC_Init+0xfc>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80018c8:	4b22      	ldr	r3, [pc, #136]	; (8001954 <MX_LTDC_Init+0xfc>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80018d0:	4b20      	ldr	r3, [pc, #128]	; (8001954 <MX_LTDC_Init+0xfc>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80018d8:	481e      	ldr	r0, [pc, #120]	; (8001954 <MX_LTDC_Init+0xfc>)
 80018da:	f004 ff8b 	bl	80067f4 <HAL_LTDC_Init>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80018e4:	f001 f828 	bl	8002938 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80018e8:	2300      	movs	r3, #0
 80018ea:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80018ec:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80018f0:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80018f6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80018fa:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 80018fc:	2301      	movs	r3, #1
 80018fe:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001900:	23ff      	movs	r3, #255	; 0xff
 8001902:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001904:	2300      	movs	r3, #0
 8001906:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001908:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800190c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800190e:	2305      	movs	r3, #5
 8001910:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001912:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001916:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001918:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800191c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800191e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001922:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001924:	2300      	movs	r3, #0
 8001926:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800192a:	2300      	movs	r3, #0
 800192c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001930:	2300      	movs	r3, #0
 8001932:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001936:	1d3b      	adds	r3, r7, #4
 8001938:	2200      	movs	r2, #0
 800193a:	4619      	mov	r1, r3
 800193c:	4805      	ldr	r0, [pc, #20]	; (8001954 <MX_LTDC_Init+0xfc>)
 800193e:	f005 f8e1 	bl	8006b04 <HAL_LTDC_ConfigLayer>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001948:	f000 fff6 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800194c:	bf00      	nop
 800194e:	3738      	adds	r7, #56	; 0x38
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	2000c540 	.word	0x2000c540
 8001958:	40016800 	.word	0x40016800

0800195c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001960:	4b12      	ldr	r3, [pc, #72]	; (80019ac <MX_QUADSPI_Init+0x50>)
 8001962:	4a13      	ldr	r2, [pc, #76]	; (80019b0 <MX_QUADSPI_Init+0x54>)
 8001964:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8001966:	4b11      	ldr	r3, [pc, #68]	; (80019ac <MX_QUADSPI_Init+0x50>)
 8001968:	22ff      	movs	r2, #255	; 0xff
 800196a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 800196c:	4b0f      	ldr	r3, [pc, #60]	; (80019ac <MX_QUADSPI_Init+0x50>)
 800196e:	2201      	movs	r2, #1
 8001970:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001972:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <MX_QUADSPI_Init+0x50>)
 8001974:	2200      	movs	r2, #0
 8001976:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001978:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <MX_QUADSPI_Init+0x50>)
 800197a:	2201      	movs	r2, #1
 800197c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800197e:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <MX_QUADSPI_Init+0x50>)
 8001980:	2200      	movs	r2, #0
 8001982:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001984:	4b09      	ldr	r3, [pc, #36]	; (80019ac <MX_QUADSPI_Init+0x50>)
 8001986:	2200      	movs	r2, #0
 8001988:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800198a:	4b08      	ldr	r3, [pc, #32]	; (80019ac <MX_QUADSPI_Init+0x50>)
 800198c:	2200      	movs	r2, #0
 800198e:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001990:	4b06      	ldr	r3, [pc, #24]	; (80019ac <MX_QUADSPI_Init+0x50>)
 8001992:	2200      	movs	r2, #0
 8001994:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001996:	4805      	ldr	r0, [pc, #20]	; (80019ac <MX_QUADSPI_Init+0x50>)
 8001998:	f005 fb24 	bl	8006fe4 <HAL_QSPI_Init>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80019a2:	f000 ffc9 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	2000c6b4 	.word	0x2000c6b4
 80019b0:	a0001000 	.word	0xa0001000

080019b4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b092      	sub	sp, #72	; 0x48
 80019b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80019ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	605a      	str	r2, [r3, #4]
 80019c4:	609a      	str	r2, [r3, #8]
 80019c6:	60da      	str	r2, [r3, #12]
 80019c8:	611a      	str	r2, [r3, #16]
 80019ca:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 80019cc:	2300      	movs	r3, #0
 80019ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 80019d0:	463b      	mov	r3, r7
 80019d2:	222c      	movs	r2, #44	; 0x2c
 80019d4:	2100      	movs	r1, #0
 80019d6:	4618      	mov	r0, r3
 80019d8:	f028 ff5b 	bl	802a892 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80019dc:	4b47      	ldr	r3, [pc, #284]	; (8001afc <MX_RTC_Init+0x148>)
 80019de:	4a48      	ldr	r2, [pc, #288]	; (8001b00 <MX_RTC_Init+0x14c>)
 80019e0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80019e2:	4b46      	ldr	r3, [pc, #280]	; (8001afc <MX_RTC_Init+0x148>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80019e8:	4b44      	ldr	r3, [pc, #272]	; (8001afc <MX_RTC_Init+0x148>)
 80019ea:	227f      	movs	r2, #127	; 0x7f
 80019ec:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80019ee:	4b43      	ldr	r3, [pc, #268]	; (8001afc <MX_RTC_Init+0x148>)
 80019f0:	22ff      	movs	r2, #255	; 0xff
 80019f2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80019f4:	4b41      	ldr	r3, [pc, #260]	; (8001afc <MX_RTC_Init+0x148>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80019fa:	4b40      	ldr	r3, [pc, #256]	; (8001afc <MX_RTC_Init+0x148>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a00:	4b3e      	ldr	r3, [pc, #248]	; (8001afc <MX_RTC_Init+0x148>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a06:	483d      	ldr	r0, [pc, #244]	; (8001afc <MX_RTC_Init+0x148>)
 8001a08:	f006 fd78 	bl	80084fc <HAL_RTC_Init>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001a12:	f000 ff91 	bl	8002938 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8001a22:	2300      	movs	r3, #0
 8001a24:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001a30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a34:	2201      	movs	r2, #1
 8001a36:	4619      	mov	r1, r3
 8001a38:	4830      	ldr	r0, [pc, #192]	; (8001afc <MX_RTC_Init+0x148>)
 8001a3a:	f006 fddb 	bl	80085f4 <HAL_RTC_SetTime>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001a44:	f000 ff78 	bl	8002938 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8001a54:	2301      	movs	r3, #1
 8001a56:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001a60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a64:	2201      	movs	r2, #1
 8001a66:	4619      	mov	r1, r3
 8001a68:	4824      	ldr	r0, [pc, #144]	; (8001afc <MX_RTC_Init+0x148>)
 8001a6a:	f006 fe81 	bl	8008770 <HAL_RTC_SetDate>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001a74:	f000 ff60 	bl	8002938 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001a90:	2300      	movs	r3, #0
 8001a92:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8001aa2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001aa8:	463b      	mov	r3, r7
 8001aaa:	2201      	movs	r2, #1
 8001aac:	4619      	mov	r1, r3
 8001aae:	4813      	ldr	r0, [pc, #76]	; (8001afc <MX_RTC_Init+0x148>)
 8001ab0:	f006 ff06 	bl	80088c0 <HAL_RTC_SetAlarm>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8001aba:	f000 ff3d 	bl	8002938 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 8001ac4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ac8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001aca:	463b      	mov	r3, r7
 8001acc:	2201      	movs	r2, #1
 8001ace:	4619      	mov	r1, r3
 8001ad0:	480a      	ldr	r0, [pc, #40]	; (8001afc <MX_RTC_Init+0x148>)
 8001ad2:	f006 fef5 	bl	80088c0 <HAL_RTC_SetAlarm>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_RTC_Init+0x12c>
  {
    Error_Handler();
 8001adc:	f000 ff2c 	bl	8002938 <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	4805      	ldr	r0, [pc, #20]	; (8001afc <MX_RTC_Init+0x148>)
 8001ae6:	f007 f875 	bl	8008bd4 <HAL_RTCEx_SetTimeStamp>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_RTC_Init+0x140>
  {
    Error_Handler();
 8001af0:	f000 ff22 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001af4:	bf00      	nop
 8001af6:	3748      	adds	r7, #72	; 0x48
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	2000c3e0 	.word	0x2000c3e0
 8001b00:	40002800 	.word	0x40002800

08001b04 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001b08:	4b4d      	ldr	r3, [pc, #308]	; (8001c40 <MX_SAI2_Init+0x13c>)
 8001b0a:	4a4e      	ldr	r2, [pc, #312]	; (8001c44 <MX_SAI2_Init+0x140>)
 8001b0c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001b0e:	4b4c      	ldr	r3, [pc, #304]	; (8001c40 <MX_SAI2_Init+0x13c>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001b14:	4b4a      	ldr	r3, [pc, #296]	; (8001c40 <MX_SAI2_Init+0x13c>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001b1a:	4b49      	ldr	r3, [pc, #292]	; (8001c40 <MX_SAI2_Init+0x13c>)
 8001b1c:	2240      	movs	r2, #64	; 0x40
 8001b1e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001b20:	4b47      	ldr	r3, [pc, #284]	; (8001c40 <MX_SAI2_Init+0x13c>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001b26:	4b46      	ldr	r3, [pc, #280]	; (8001c40 <MX_SAI2_Init+0x13c>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001b2c:	4b44      	ldr	r3, [pc, #272]	; (8001c40 <MX_SAI2_Init+0x13c>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001b32:	4b43      	ldr	r3, [pc, #268]	; (8001c40 <MX_SAI2_Init+0x13c>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001b38:	4b41      	ldr	r3, [pc, #260]	; (8001c40 <MX_SAI2_Init+0x13c>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001b3e:	4b40      	ldr	r3, [pc, #256]	; (8001c40 <MX_SAI2_Init+0x13c>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001b44:	4b3e      	ldr	r3, [pc, #248]	; (8001c40 <MX_SAI2_Init+0x13c>)
 8001b46:	4a40      	ldr	r2, [pc, #256]	; (8001c48 <MX_SAI2_Init+0x144>)
 8001b48:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001b4a:	4b3d      	ldr	r3, [pc, #244]	; (8001c40 <MX_SAI2_Init+0x13c>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001b50:	4b3b      	ldr	r3, [pc, #236]	; (8001c40 <MX_SAI2_Init+0x13c>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001b56:	4b3a      	ldr	r3, [pc, #232]	; (8001c40 <MX_SAI2_Init+0x13c>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001b5c:	4b38      	ldr	r3, [pc, #224]	; (8001c40 <MX_SAI2_Init+0x13c>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001b62:	4b37      	ldr	r3, [pc, #220]	; (8001c40 <MX_SAI2_Init+0x13c>)
 8001b64:	2208      	movs	r2, #8
 8001b66:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001b68:	4b35      	ldr	r3, [pc, #212]	; (8001c40 <MX_SAI2_Init+0x13c>)
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001b6e:	4b34      	ldr	r3, [pc, #208]	; (8001c40 <MX_SAI2_Init+0x13c>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001b74:	4b32      	ldr	r3, [pc, #200]	; (8001c40 <MX_SAI2_Init+0x13c>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001b7a:	4b31      	ldr	r3, [pc, #196]	; (8001c40 <MX_SAI2_Init+0x13c>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001b80:	4b2f      	ldr	r3, [pc, #188]	; (8001c40 <MX_SAI2_Init+0x13c>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001b86:	4b2e      	ldr	r3, [pc, #184]	; (8001c40 <MX_SAI2_Init+0x13c>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001b8c:	4b2c      	ldr	r3, [pc, #176]	; (8001c40 <MX_SAI2_Init+0x13c>)
 8001b8e:	2201      	movs	r2, #1
 8001b90:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001b92:	4b2b      	ldr	r3, [pc, #172]	; (8001c40 <MX_SAI2_Init+0x13c>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001b98:	4829      	ldr	r0, [pc, #164]	; (8001c40 <MX_SAI2_Init+0x13c>)
 8001b9a:	f007 f871 	bl	8008c80 <HAL_SAI_Init>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8001ba4:	f000 fec8 	bl	8002938 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001ba8:	4b28      	ldr	r3, [pc, #160]	; (8001c4c <MX_SAI2_Init+0x148>)
 8001baa:	4a29      	ldr	r2, [pc, #164]	; (8001c50 <MX_SAI2_Init+0x14c>)
 8001bac:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001bae:	4b27      	ldr	r3, [pc, #156]	; (8001c4c <MX_SAI2_Init+0x148>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001bb4:	4b25      	ldr	r3, [pc, #148]	; (8001c4c <MX_SAI2_Init+0x148>)
 8001bb6:	2203      	movs	r2, #3
 8001bb8:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001bba:	4b24      	ldr	r3, [pc, #144]	; (8001c4c <MX_SAI2_Init+0x148>)
 8001bbc:	2240      	movs	r2, #64	; 0x40
 8001bbe:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001bc0:	4b22      	ldr	r3, [pc, #136]	; (8001c4c <MX_SAI2_Init+0x148>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001bc6:	4b21      	ldr	r3, [pc, #132]	; (8001c4c <MX_SAI2_Init+0x148>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001bcc:	4b1f      	ldr	r3, [pc, #124]	; (8001c4c <MX_SAI2_Init+0x148>)
 8001bce:	2201      	movs	r2, #1
 8001bd0:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001bd2:	4b1e      	ldr	r3, [pc, #120]	; (8001c4c <MX_SAI2_Init+0x148>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001bd8:	4b1c      	ldr	r3, [pc, #112]	; (8001c4c <MX_SAI2_Init+0x148>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001bde:	4b1b      	ldr	r3, [pc, #108]	; (8001c4c <MX_SAI2_Init+0x148>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001be4:	4b19      	ldr	r3, [pc, #100]	; (8001c4c <MX_SAI2_Init+0x148>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001bea:	4b18      	ldr	r3, [pc, #96]	; (8001c4c <MX_SAI2_Init+0x148>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001bf0:	4b16      	ldr	r3, [pc, #88]	; (8001c4c <MX_SAI2_Init+0x148>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001bf6:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <MX_SAI2_Init+0x148>)
 8001bf8:	2208      	movs	r2, #8
 8001bfa:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001bfc:	4b13      	ldr	r3, [pc, #76]	; (8001c4c <MX_SAI2_Init+0x148>)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001c02:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <MX_SAI2_Init+0x148>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001c08:	4b10      	ldr	r3, [pc, #64]	; (8001c4c <MX_SAI2_Init+0x148>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001c0e:	4b0f      	ldr	r3, [pc, #60]	; (8001c4c <MX_SAI2_Init+0x148>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001c14:	4b0d      	ldr	r3, [pc, #52]	; (8001c4c <MX_SAI2_Init+0x148>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001c1a:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <MX_SAI2_Init+0x148>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001c20:	4b0a      	ldr	r3, [pc, #40]	; (8001c4c <MX_SAI2_Init+0x148>)
 8001c22:	2201      	movs	r2, #1
 8001c24:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001c26:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <MX_SAI2_Init+0x148>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001c2c:	4807      	ldr	r0, [pc, #28]	; (8001c4c <MX_SAI2_Init+0x148>)
 8001c2e:	f007 f827 	bl	8008c80 <HAL_SAI_Init>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8001c38:	f000 fe7e 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001c3c:	bf00      	nop
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	2000c358 	.word	0x2000c358
 8001c44:	40015c04 	.word	0x40015c04
 8001c48:	0002ee00 	.word	0x0002ee00
 8001c4c:	2000c630 	.word	0x2000c630
 8001c50:	40015c24 	.word	0x40015c24

08001c54 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001c58:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <MX_SDMMC1_SD_Init+0x38>)
 8001c5a:	4a0d      	ldr	r2, [pc, #52]	; (8001c90 <MX_SDMMC1_SD_Init+0x3c>)
 8001c5c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001c5e:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <MX_SDMMC1_SD_Init+0x38>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001c64:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <MX_SDMMC1_SD_Init+0x38>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001c6a:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <MX_SDMMC1_SD_Init+0x38>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001c70:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <MX_SDMMC1_SD_Init+0x38>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001c76:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <MX_SDMMC1_SD_Init+0x38>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001c7c:	4b03      	ldr	r3, [pc, #12]	; (8001c8c <MX_SDMMC1_SD_Init+0x38>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001c82:	bf00      	nop
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	2000c474 	.word	0x2000c474
 8001c90:	40012c00 	.word	0x40012c00

08001c94 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001c98:	4b15      	ldr	r3, [pc, #84]	; (8001cf0 <MX_SPDIFRX_Init+0x5c>)
 8001c9a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001c9e:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001ca0:	4b13      	ldr	r3, [pc, #76]	; (8001cf0 <MX_SPDIFRX_Init+0x5c>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001ca6:	4b12      	ldr	r3, [pc, #72]	; (8001cf0 <MX_SPDIFRX_Init+0x5c>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001cac:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <MX_SPDIFRX_Init+0x5c>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001cb2:	4b0f      	ldr	r3, [pc, #60]	; (8001cf0 <MX_SPDIFRX_Init+0x5c>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001cb8:	4b0d      	ldr	r3, [pc, #52]	; (8001cf0 <MX_SPDIFRX_Init+0x5c>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001cbe:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <MX_SPDIFRX_Init+0x5c>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001cc4:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <MX_SPDIFRX_Init+0x5c>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001cca:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <MX_SPDIFRX_Init+0x5c>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001cd0:	4b07      	ldr	r3, [pc, #28]	; (8001cf0 <MX_SPDIFRX_Init+0x5c>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001cd6:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <MX_SPDIFRX_Init+0x5c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001cdc:	4804      	ldr	r0, [pc, #16]	; (8001cf0 <MX_SPDIFRX_Init+0x5c>)
 8001cde:	f008 fa63 	bl	800a1a8 <HAL_SPDIFRX_Init>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001ce8:	f000 fe26 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8001cec:	bf00      	nop
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	2000c700 	.word	0x2000c700

08001cf4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001cf8:	4b1b      	ldr	r3, [pc, #108]	; (8001d68 <MX_SPI2_Init+0x74>)
 8001cfa:	4a1c      	ldr	r2, [pc, #112]	; (8001d6c <MX_SPI2_Init+0x78>)
 8001cfc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001cfe:	4b1a      	ldr	r3, [pc, #104]	; (8001d68 <MX_SPI2_Init+0x74>)
 8001d00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d04:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001d06:	4b18      	ldr	r3, [pc, #96]	; (8001d68 <MX_SPI2_Init+0x74>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001d0c:	4b16      	ldr	r3, [pc, #88]	; (8001d68 <MX_SPI2_Init+0x74>)
 8001d0e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001d12:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d14:	4b14      	ldr	r3, [pc, #80]	; (8001d68 <MX_SPI2_Init+0x74>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d1a:	4b13      	ldr	r3, [pc, #76]	; (8001d68 <MX_SPI2_Init+0x74>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d20:	4b11      	ldr	r3, [pc, #68]	; (8001d68 <MX_SPI2_Init+0x74>)
 8001d22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d26:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d28:	4b0f      	ldr	r3, [pc, #60]	; (8001d68 <MX_SPI2_Init+0x74>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d2e:	4b0e      	ldr	r3, [pc, #56]	; (8001d68 <MX_SPI2_Init+0x74>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d34:	4b0c      	ldr	r3, [pc, #48]	; (8001d68 <MX_SPI2_Init+0x74>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d3a:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <MX_SPI2_Init+0x74>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001d40:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <MX_SPI2_Init+0x74>)
 8001d42:	2207      	movs	r2, #7
 8001d44:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d46:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <MX_SPI2_Init+0x74>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d4c:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <MX_SPI2_Init+0x74>)
 8001d4e:	2208      	movs	r2, #8
 8001d50:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d52:	4805      	ldr	r0, [pc, #20]	; (8001d68 <MX_SPI2_Init+0x74>)
 8001d54:	f008 fa84 	bl	800a260 <HAL_SPI_Init>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001d5e:	f000 fdeb 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	2000c2f4 	.word	0x2000c2f4
 8001d6c:	40003800 	.word	0x40003800

08001d70 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b09a      	sub	sp, #104	; 0x68
 8001d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d76:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	605a      	str	r2, [r3, #4]
 8001d80:	609a      	str	r2, [r3, #8]
 8001d82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d84:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	60da      	str	r2, [r3, #12]
 8001d9e:	611a      	str	r2, [r3, #16]
 8001da0:	615a      	str	r2, [r3, #20]
 8001da2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001da4:	1d3b      	adds	r3, r7, #4
 8001da6:	222c      	movs	r2, #44	; 0x2c
 8001da8:	2100      	movs	r1, #0
 8001daa:	4618      	mov	r0, r3
 8001dac:	f028 fd71 	bl	802a892 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001db0:	4b43      	ldr	r3, [pc, #268]	; (8001ec0 <MX_TIM1_Init+0x150>)
 8001db2:	4a44      	ldr	r2, [pc, #272]	; (8001ec4 <MX_TIM1_Init+0x154>)
 8001db4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001db6:	4b42      	ldr	r3, [pc, #264]	; (8001ec0 <MX_TIM1_Init+0x150>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dbc:	4b40      	ldr	r3, [pc, #256]	; (8001ec0 <MX_TIM1_Init+0x150>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8001dc2:	4b3f      	ldr	r3, [pc, #252]	; (8001ec0 <MX_TIM1_Init+0x150>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dc8:	4b3d      	ldr	r3, [pc, #244]	; (8001ec0 <MX_TIM1_Init+0x150>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001dce:	4b3c      	ldr	r3, [pc, #240]	; (8001ec0 <MX_TIM1_Init+0x150>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dd4:	4b3a      	ldr	r3, [pc, #232]	; (8001ec0 <MX_TIM1_Init+0x150>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001dda:	4839      	ldr	r0, [pc, #228]	; (8001ec0 <MX_TIM1_Init+0x150>)
 8001ddc:	f008 fad2 	bl	800a384 <HAL_TIM_Base_Init>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001de6:	f000 fda7 	bl	8002938 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dee:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001df0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001df4:	4619      	mov	r1, r3
 8001df6:	4832      	ldr	r0, [pc, #200]	; (8001ec0 <MX_TIM1_Init+0x150>)
 8001df8:	f008 fd7c 	bl	800a8f4 <HAL_TIM_ConfigClockSource>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001e02:	f000 fd99 	bl	8002938 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e06:	482e      	ldr	r0, [pc, #184]	; (8001ec0 <MX_TIM1_Init+0x150>)
 8001e08:	f008 fb12 	bl	800a430 <HAL_TIM_PWM_Init>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001e12:	f000 fd91 	bl	8002938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e16:	2300      	movs	r3, #0
 8001e18:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e22:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e26:	4619      	mov	r1, r3
 8001e28:	4825      	ldr	r0, [pc, #148]	; (8001ec0 <MX_TIM1_Init+0x150>)
 8001e2a:	f009 f9dd 	bl	800b1e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001e34:	f000 fd80 	bl	8002938 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e38:	2360      	movs	r3, #96	; 0x60
 8001e3a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e40:	2300      	movs	r3, #0
 8001e42:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e44:	2300      	movs	r3, #0
 8001e46:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e50:	2300      	movs	r3, #0
 8001e52:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e58:	2200      	movs	r2, #0
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4818      	ldr	r0, [pc, #96]	; (8001ec0 <MX_TIM1_Init+0x150>)
 8001e5e:	f008 fc31 	bl	800a6c4 <HAL_TIM_PWM_ConfigChannel>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001e68:	f000 fd66 	bl	8002938 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e70:	2300      	movs	r3, #0
 8001e72:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e74:	2300      	movs	r3, #0
 8001e76:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e84:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e86:	2300      	movs	r3, #0
 8001e88:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e92:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e94:	2300      	movs	r3, #0
 8001e96:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e9c:	1d3b      	adds	r3, r7, #4
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4807      	ldr	r0, [pc, #28]	; (8001ec0 <MX_TIM1_Init+0x150>)
 8001ea2:	f009 fa2f 	bl	800b304 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001eac:	f000 fd44 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001eb0:	4803      	ldr	r0, [pc, #12]	; (8001ec0 <MX_TIM1_Init+0x150>)
 8001eb2:	f001 fa3b 	bl	800332c <HAL_TIM_MspPostInit>

}
 8001eb6:	bf00      	nop
 8001eb8:	3768      	adds	r7, #104	; 0x68
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	2000c88c 	.word	0x2000c88c
 8001ec4:	40010000 	.word	0x40010000

08001ec8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b08e      	sub	sp, #56	; 0x38
 8001ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ece:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	605a      	str	r2, [r3, #4]
 8001ed8:	609a      	str	r2, [r3, #8]
 8001eda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001edc:	f107 031c 	add.w	r3, r7, #28
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	605a      	str	r2, [r3, #4]
 8001ee6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ee8:	463b      	mov	r3, r7
 8001eea:	2200      	movs	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	605a      	str	r2, [r3, #4]
 8001ef0:	609a      	str	r2, [r3, #8]
 8001ef2:	60da      	str	r2, [r3, #12]
 8001ef4:	611a      	str	r2, [r3, #16]
 8001ef6:	615a      	str	r2, [r3, #20]
 8001ef8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001efa:	4b2d      	ldr	r3, [pc, #180]	; (8001fb0 <MX_TIM2_Init+0xe8>)
 8001efc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f00:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f02:	4b2b      	ldr	r3, [pc, #172]	; (8001fb0 <MX_TIM2_Init+0xe8>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f08:	4b29      	ldr	r3, [pc, #164]	; (8001fb0 <MX_TIM2_Init+0xe8>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8001f0e:	4b28      	ldr	r3, [pc, #160]	; (8001fb0 <MX_TIM2_Init+0xe8>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f14:	4b26      	ldr	r3, [pc, #152]	; (8001fb0 <MX_TIM2_Init+0xe8>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f1a:	4b25      	ldr	r3, [pc, #148]	; (8001fb0 <MX_TIM2_Init+0xe8>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f20:	4823      	ldr	r0, [pc, #140]	; (8001fb0 <MX_TIM2_Init+0xe8>)
 8001f22:	f008 fa2f 	bl	800a384 <HAL_TIM_Base_Init>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001f2c:	f000 fd04 	bl	8002938 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f34:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	481c      	ldr	r0, [pc, #112]	; (8001fb0 <MX_TIM2_Init+0xe8>)
 8001f3e:	f008 fcd9 	bl	800a8f4 <HAL_TIM_ConfigClockSource>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001f48:	f000 fcf6 	bl	8002938 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f4c:	4818      	ldr	r0, [pc, #96]	; (8001fb0 <MX_TIM2_Init+0xe8>)
 8001f4e:	f008 fa6f 	bl	800a430 <HAL_TIM_PWM_Init>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001f58:	f000 fcee 	bl	8002938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f60:	2300      	movs	r3, #0
 8001f62:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f64:	f107 031c 	add.w	r3, r7, #28
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4811      	ldr	r0, [pc, #68]	; (8001fb0 <MX_TIM2_Init+0xe8>)
 8001f6c:	f009 f93c 	bl	800b1e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001f76:	f000 fcdf 	bl	8002938 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f7a:	2360      	movs	r3, #96	; 0x60
 8001f7c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f82:	2300      	movs	r3, #0
 8001f84:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f86:	2300      	movs	r3, #0
 8001f88:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f8a:	463b      	mov	r3, r7
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4807      	ldr	r0, [pc, #28]	; (8001fb0 <MX_TIM2_Init+0xe8>)
 8001f92:	f008 fb97 	bl	800a6c4 <HAL_TIM_PWM_ConfigChannel>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001f9c:	f000 fccc 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001fa0:	4803      	ldr	r0, [pc, #12]	; (8001fb0 <MX_TIM2_Init+0xe8>)
 8001fa2:	f001 f9c3 	bl	800332c <HAL_TIM_MspPostInit>

}
 8001fa6:	bf00      	nop
 8001fa8:	3738      	adds	r7, #56	; 0x38
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	2000c938 	.word	0x2000c938

08001fb4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08e      	sub	sp, #56	; 0x38
 8001fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	605a      	str	r2, [r3, #4]
 8001fc4:	609a      	str	r2, [r3, #8]
 8001fc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fc8:	f107 031c 	add.w	r3, r7, #28
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fd4:	463b      	mov	r3, r7
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	605a      	str	r2, [r3, #4]
 8001fdc:	609a      	str	r2, [r3, #8]
 8001fde:	60da      	str	r2, [r3, #12]
 8001fe0:	611a      	str	r2, [r3, #16]
 8001fe2:	615a      	str	r2, [r3, #20]
 8001fe4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fe6:	4b2c      	ldr	r3, [pc, #176]	; (8002098 <MX_TIM3_Init+0xe4>)
 8001fe8:	4a2c      	ldr	r2, [pc, #176]	; (800209c <MX_TIM3_Init+0xe8>)
 8001fea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001fec:	4b2a      	ldr	r3, [pc, #168]	; (8002098 <MX_TIM3_Init+0xe4>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff2:	4b29      	ldr	r3, [pc, #164]	; (8002098 <MX_TIM3_Init+0xe4>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8001ff8:	4b27      	ldr	r3, [pc, #156]	; (8002098 <MX_TIM3_Init+0xe4>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ffe:	4b26      	ldr	r3, [pc, #152]	; (8002098 <MX_TIM3_Init+0xe4>)
 8002000:	2200      	movs	r2, #0
 8002002:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002004:	4b24      	ldr	r3, [pc, #144]	; (8002098 <MX_TIM3_Init+0xe4>)
 8002006:	2200      	movs	r2, #0
 8002008:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800200a:	4823      	ldr	r0, [pc, #140]	; (8002098 <MX_TIM3_Init+0xe4>)
 800200c:	f008 f9ba 	bl	800a384 <HAL_TIM_Base_Init>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002016:	f000 fc8f 	bl	8002938 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800201a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800201e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002020:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002024:	4619      	mov	r1, r3
 8002026:	481c      	ldr	r0, [pc, #112]	; (8002098 <MX_TIM3_Init+0xe4>)
 8002028:	f008 fc64 	bl	800a8f4 <HAL_TIM_ConfigClockSource>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002032:	f000 fc81 	bl	8002938 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002036:	4818      	ldr	r0, [pc, #96]	; (8002098 <MX_TIM3_Init+0xe4>)
 8002038:	f008 f9fa 	bl	800a430 <HAL_TIM_PWM_Init>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002042:	f000 fc79 	bl	8002938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002046:	2300      	movs	r3, #0
 8002048:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800204a:	2300      	movs	r3, #0
 800204c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800204e:	f107 031c 	add.w	r3, r7, #28
 8002052:	4619      	mov	r1, r3
 8002054:	4810      	ldr	r0, [pc, #64]	; (8002098 <MX_TIM3_Init+0xe4>)
 8002056:	f009 f8c7 	bl	800b1e8 <HAL_TIMEx_MasterConfigSynchronization>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002060:	f000 fc6a 	bl	8002938 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002064:	2360      	movs	r3, #96	; 0x60
 8002066:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002068:	2300      	movs	r3, #0
 800206a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800206c:	2300      	movs	r3, #0
 800206e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002070:	2300      	movs	r3, #0
 8002072:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002074:	463b      	mov	r3, r7
 8002076:	2200      	movs	r2, #0
 8002078:	4619      	mov	r1, r3
 800207a:	4807      	ldr	r0, [pc, #28]	; (8002098 <MX_TIM3_Init+0xe4>)
 800207c:	f008 fb22 	bl	800a6c4 <HAL_TIM_PWM_ConfigChannel>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002086:	f000 fc57 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800208a:	4803      	ldr	r0, [pc, #12]	; (8002098 <MX_TIM3_Init+0xe4>)
 800208c:	f001 f94e 	bl	800332c <HAL_TIM_MspPostInit>

}
 8002090:	bf00      	nop
 8002092:	3738      	adds	r7, #56	; 0x38
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	2000c224 	.word	0x2000c224
 800209c:	40000400 	.word	0x40000400

080020a0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b08e      	sub	sp, #56	; 0x38
 80020a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	605a      	str	r2, [r3, #4]
 80020b0:	609a      	str	r2, [r3, #8]
 80020b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020b4:	f107 031c 	add.w	r3, r7, #28
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020c0:	463b      	mov	r3, r7
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	605a      	str	r2, [r3, #4]
 80020c8:	609a      	str	r2, [r3, #8]
 80020ca:	60da      	str	r2, [r3, #12]
 80020cc:	611a      	str	r2, [r3, #16]
 80020ce:	615a      	str	r2, [r3, #20]
 80020d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80020d2:	4b2c      	ldr	r3, [pc, #176]	; (8002184 <MX_TIM5_Init+0xe4>)
 80020d4:	4a2c      	ldr	r2, [pc, #176]	; (8002188 <MX_TIM5_Init+0xe8>)
 80020d6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80020d8:	4b2a      	ldr	r3, [pc, #168]	; (8002184 <MX_TIM5_Init+0xe4>)
 80020da:	2200      	movs	r2, #0
 80020dc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020de:	4b29      	ldr	r3, [pc, #164]	; (8002184 <MX_TIM5_Init+0xe4>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 80020e4:	4b27      	ldr	r3, [pc, #156]	; (8002184 <MX_TIM5_Init+0xe4>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ea:	4b26      	ldr	r3, [pc, #152]	; (8002184 <MX_TIM5_Init+0xe4>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020f0:	4b24      	ldr	r3, [pc, #144]	; (8002184 <MX_TIM5_Init+0xe4>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80020f6:	4823      	ldr	r0, [pc, #140]	; (8002184 <MX_TIM5_Init+0xe4>)
 80020f8:	f008 f944 	bl	800a384 <HAL_TIM_Base_Init>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8002102:	f000 fc19 	bl	8002938 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002106:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800210a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800210c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002110:	4619      	mov	r1, r3
 8002112:	481c      	ldr	r0, [pc, #112]	; (8002184 <MX_TIM5_Init+0xe4>)
 8002114:	f008 fbee 	bl	800a8f4 <HAL_TIM_ConfigClockSource>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800211e:	f000 fc0b 	bl	8002938 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002122:	4818      	ldr	r0, [pc, #96]	; (8002184 <MX_TIM5_Init+0xe4>)
 8002124:	f008 f984 	bl	800a430 <HAL_TIM_PWM_Init>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800212e:	f000 fc03 	bl	8002938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002132:	2300      	movs	r3, #0
 8002134:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002136:	2300      	movs	r3, #0
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800213a:	f107 031c 	add.w	r3, r7, #28
 800213e:	4619      	mov	r1, r3
 8002140:	4810      	ldr	r0, [pc, #64]	; (8002184 <MX_TIM5_Init+0xe4>)
 8002142:	f009 f851 	bl	800b1e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800214c:	f000 fbf4 	bl	8002938 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002150:	2360      	movs	r3, #96	; 0x60
 8002152:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002154:	2300      	movs	r3, #0
 8002156:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002158:	2300      	movs	r3, #0
 800215a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800215c:	2300      	movs	r3, #0
 800215e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002160:	463b      	mov	r3, r7
 8002162:	220c      	movs	r2, #12
 8002164:	4619      	mov	r1, r3
 8002166:	4807      	ldr	r0, [pc, #28]	; (8002184 <MX_TIM5_Init+0xe4>)
 8002168:	f008 faac 	bl	800a6c4 <HAL_TIM_PWM_ConfigChannel>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8002172:	f000 fbe1 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002176:	4803      	ldr	r0, [pc, #12]	; (8002184 <MX_TIM5_Init+0xe4>)
 8002178:	f001 f8d8 	bl	800332c <HAL_TIM_MspPostInit>

}
 800217c:	bf00      	nop
 800217e:	3738      	adds	r7, #56	; 0x38
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	2000c8f8 	.word	0x2000c8f8
 8002188:	40000c00 	.word	0x40000c00

0800218c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b088      	sub	sp, #32
 8002190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002192:	f107 0310 	add.w	r3, r7, #16
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	605a      	str	r2, [r3, #4]
 800219c:	609a      	str	r2, [r3, #8]
 800219e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021a0:	1d3b      	adds	r3, r7, #4
 80021a2:	2200      	movs	r2, #0
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	605a      	str	r2, [r3, #4]
 80021a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80021aa:	4b1f      	ldr	r3, [pc, #124]	; (8002228 <MX_TIM8_Init+0x9c>)
 80021ac:	4a1f      	ldr	r2, [pc, #124]	; (800222c <MX_TIM8_Init+0xa0>)
 80021ae:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80021b0:	4b1d      	ldr	r3, [pc, #116]	; (8002228 <MX_TIM8_Init+0x9c>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021b6:	4b1c      	ldr	r3, [pc, #112]	; (8002228 <MX_TIM8_Init+0x9c>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 80021bc:	4b1a      	ldr	r3, [pc, #104]	; (8002228 <MX_TIM8_Init+0x9c>)
 80021be:	2200      	movs	r2, #0
 80021c0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021c2:	4b19      	ldr	r3, [pc, #100]	; (8002228 <MX_TIM8_Init+0x9c>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80021c8:	4b17      	ldr	r3, [pc, #92]	; (8002228 <MX_TIM8_Init+0x9c>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ce:	4b16      	ldr	r3, [pc, #88]	; (8002228 <MX_TIM8_Init+0x9c>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80021d4:	4814      	ldr	r0, [pc, #80]	; (8002228 <MX_TIM8_Init+0x9c>)
 80021d6:	f008 f8d5 	bl	800a384 <HAL_TIM_Base_Init>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 80021e0:	f000 fbaa 	bl	8002938 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80021ea:	f107 0310 	add.w	r3, r7, #16
 80021ee:	4619      	mov	r1, r3
 80021f0:	480d      	ldr	r0, [pc, #52]	; (8002228 <MX_TIM8_Init+0x9c>)
 80021f2:	f008 fb7f 	bl	800a8f4 <HAL_TIM_ConfigClockSource>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 80021fc:	f000 fb9c 	bl	8002938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002200:	2300      	movs	r3, #0
 8002202:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002204:	2300      	movs	r3, #0
 8002206:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002208:	2300      	movs	r3, #0
 800220a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800220c:	1d3b      	adds	r3, r7, #4
 800220e:	4619      	mov	r1, r3
 8002210:	4805      	ldr	r0, [pc, #20]	; (8002228 <MX_TIM8_Init+0x9c>)
 8002212:	f008 ffe9 	bl	800b1e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 800221c:	f000 fb8c 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002220:	bf00      	nop
 8002222:	3720      	adds	r7, #32
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	2000c264 	.word	0x2000c264
 800222c:	40010400 	.word	0x40010400

08002230 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b088      	sub	sp, #32
 8002234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002236:	1d3b      	adds	r3, r7, #4
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	605a      	str	r2, [r3, #4]
 800223e:	609a      	str	r2, [r3, #8]
 8002240:	60da      	str	r2, [r3, #12]
 8002242:	611a      	str	r2, [r3, #16]
 8002244:	615a      	str	r2, [r3, #20]
 8002246:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002248:	4b19      	ldr	r3, [pc, #100]	; (80022b0 <MX_TIM12_Init+0x80>)
 800224a:	4a1a      	ldr	r2, [pc, #104]	; (80022b4 <MX_TIM12_Init+0x84>)
 800224c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800224e:	4b18      	ldr	r3, [pc, #96]	; (80022b0 <MX_TIM12_Init+0x80>)
 8002250:	2200      	movs	r2, #0
 8002252:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002254:	4b16      	ldr	r3, [pc, #88]	; (80022b0 <MX_TIM12_Init+0x80>)
 8002256:	2200      	movs	r2, #0
 8002258:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 800225a:	4b15      	ldr	r3, [pc, #84]	; (80022b0 <MX_TIM12_Init+0x80>)
 800225c:	2200      	movs	r2, #0
 800225e:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002260:	4b13      	ldr	r3, [pc, #76]	; (80022b0 <MX_TIM12_Init+0x80>)
 8002262:	2200      	movs	r2, #0
 8002264:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002266:	4b12      	ldr	r3, [pc, #72]	; (80022b0 <MX_TIM12_Init+0x80>)
 8002268:	2200      	movs	r2, #0
 800226a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800226c:	4810      	ldr	r0, [pc, #64]	; (80022b0 <MX_TIM12_Init+0x80>)
 800226e:	f008 f8df 	bl	800a430 <HAL_TIM_PWM_Init>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 8002278:	f000 fb5e 	bl	8002938 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800227c:	2360      	movs	r3, #96	; 0x60
 800227e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002280:	2300      	movs	r3, #0
 8002282:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002284:	2300      	movs	r3, #0
 8002286:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002288:	2300      	movs	r3, #0
 800228a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800228c:	1d3b      	adds	r3, r7, #4
 800228e:	2200      	movs	r2, #0
 8002290:	4619      	mov	r1, r3
 8002292:	4807      	ldr	r0, [pc, #28]	; (80022b0 <MX_TIM12_Init+0x80>)
 8002294:	f008 fa16 	bl	800a6c4 <HAL_TIM_PWM_ConfigChannel>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 800229e:	f000 fb4b 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80022a2:	4803      	ldr	r0, [pc, #12]	; (80022b0 <MX_TIM12_Init+0x80>)
 80022a4:	f001 f842 	bl	800332c <HAL_TIM_MspPostInit>

}
 80022a8:	bf00      	nop
 80022aa:	3720      	adds	r7, #32
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	2000c5f0 	.word	0x2000c5f0
 80022b4:	40001800 	.word	0x40001800

080022b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022bc:	4b14      	ldr	r3, [pc, #80]	; (8002310 <MX_USART1_UART_Init+0x58>)
 80022be:	4a15      	ldr	r2, [pc, #84]	; (8002314 <MX_USART1_UART_Init+0x5c>)
 80022c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80022c2:	4b13      	ldr	r3, [pc, #76]	; (8002310 <MX_USART1_UART_Init+0x58>)
 80022c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022ca:	4b11      	ldr	r3, [pc, #68]	; (8002310 <MX_USART1_UART_Init+0x58>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022d0:	4b0f      	ldr	r3, [pc, #60]	; (8002310 <MX_USART1_UART_Init+0x58>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022d6:	4b0e      	ldr	r3, [pc, #56]	; (8002310 <MX_USART1_UART_Init+0x58>)
 80022d8:	2200      	movs	r2, #0
 80022da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022dc:	4b0c      	ldr	r3, [pc, #48]	; (8002310 <MX_USART1_UART_Init+0x58>)
 80022de:	220c      	movs	r2, #12
 80022e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022e2:	4b0b      	ldr	r3, [pc, #44]	; (8002310 <MX_USART1_UART_Init+0x58>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022e8:	4b09      	ldr	r3, [pc, #36]	; (8002310 <MX_USART1_UART_Init+0x58>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022ee:	4b08      	ldr	r3, [pc, #32]	; (8002310 <MX_USART1_UART_Init+0x58>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022f4:	4b06      	ldr	r3, [pc, #24]	; (8002310 <MX_USART1_UART_Init+0x58>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022fa:	4805      	ldr	r0, [pc, #20]	; (8002310 <MX_USART1_UART_Init+0x58>)
 80022fc:	f009 f89e 	bl	800b43c <HAL_UART_Init>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002306:	f000 fb17 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	2000c80c 	.word	0x2000c80c
 8002314:	40011000 	.word	0x40011000

08002318 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800231c:	4b14      	ldr	r3, [pc, #80]	; (8002370 <MX_USART6_UART_Init+0x58>)
 800231e:	4a15      	ldr	r2, [pc, #84]	; (8002374 <MX_USART6_UART_Init+0x5c>)
 8002320:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002322:	4b13      	ldr	r3, [pc, #76]	; (8002370 <MX_USART6_UART_Init+0x58>)
 8002324:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002328:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800232a:	4b11      	ldr	r3, [pc, #68]	; (8002370 <MX_USART6_UART_Init+0x58>)
 800232c:	2200      	movs	r2, #0
 800232e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002330:	4b0f      	ldr	r3, [pc, #60]	; (8002370 <MX_USART6_UART_Init+0x58>)
 8002332:	2200      	movs	r2, #0
 8002334:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002336:	4b0e      	ldr	r3, [pc, #56]	; (8002370 <MX_USART6_UART_Init+0x58>)
 8002338:	2200      	movs	r2, #0
 800233a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800233c:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <MX_USART6_UART_Init+0x58>)
 800233e:	220c      	movs	r2, #12
 8002340:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002342:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <MX_USART6_UART_Init+0x58>)
 8002344:	2200      	movs	r2, #0
 8002346:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002348:	4b09      	ldr	r3, [pc, #36]	; (8002370 <MX_USART6_UART_Init+0x58>)
 800234a:	2200      	movs	r2, #0
 800234c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800234e:	4b08      	ldr	r3, [pc, #32]	; (8002370 <MX_USART6_UART_Init+0x58>)
 8002350:	2200      	movs	r2, #0
 8002352:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002354:	4b06      	ldr	r3, [pc, #24]	; (8002370 <MX_USART6_UART_Init+0x58>)
 8002356:	2200      	movs	r2, #0
 8002358:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800235a:	4805      	ldr	r0, [pc, #20]	; (8002370 <MX_USART6_UART_Init+0x58>)
 800235c:	f009 f86e 	bl	800b43c <HAL_UART_Init>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8002366:	f000 fae7 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	2000c78c 	.word	0x2000c78c
 8002374:	40011400 	.word	0x40011400

08002378 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b088      	sub	sp, #32
 800237c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800237e:	1d3b      	adds	r3, r7, #4
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	605a      	str	r2, [r3, #4]
 8002386:	609a      	str	r2, [r3, #8]
 8002388:	60da      	str	r2, [r3, #12]
 800238a:	611a      	str	r2, [r3, #16]
 800238c:	615a      	str	r2, [r3, #20]
 800238e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002390:	4b4c      	ldr	r3, [pc, #304]	; (80024c4 <MX_FMC_Init+0x14c>)
 8002392:	4a4d      	ldr	r2, [pc, #308]	; (80024c8 <MX_FMC_Init+0x150>)
 8002394:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8002396:	4b4b      	ldr	r3, [pc, #300]	; (80024c4 <MX_FMC_Init+0x14c>)
 8002398:	2200      	movs	r2, #0
 800239a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800239c:	4b49      	ldr	r3, [pc, #292]	; (80024c4 <MX_FMC_Init+0x14c>)
 800239e:	2200      	movs	r2, #0
 80023a0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80023a2:	4b48      	ldr	r3, [pc, #288]	; (80024c4 <MX_FMC_Init+0x14c>)
 80023a4:	2204      	movs	r2, #4
 80023a6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80023a8:	4b46      	ldr	r3, [pc, #280]	; (80024c4 <MX_FMC_Init+0x14c>)
 80023aa:	2210      	movs	r2, #16
 80023ac:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80023ae:	4b45      	ldr	r3, [pc, #276]	; (80024c4 <MX_FMC_Init+0x14c>)
 80023b0:	2240      	movs	r2, #64	; 0x40
 80023b2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80023b4:	4b43      	ldr	r3, [pc, #268]	; (80024c4 <MX_FMC_Init+0x14c>)
 80023b6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80023ba:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80023bc:	4b41      	ldr	r3, [pc, #260]	; (80024c4 <MX_FMC_Init+0x14c>)
 80023be:	2200      	movs	r2, #0
 80023c0:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80023c2:	4b40      	ldr	r3, [pc, #256]	; (80024c4 <MX_FMC_Init+0x14c>)
 80023c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023c8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80023ca:	4b3e      	ldr	r3, [pc, #248]	; (80024c4 <MX_FMC_Init+0x14c>)
 80023cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023d0:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80023d2:	4b3c      	ldr	r3, [pc, #240]	; (80024c4 <MX_FMC_Init+0x14c>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80023d8:	2302      	movs	r3, #2
 80023da:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80023dc:	2307      	movs	r3, #7
 80023de:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80023e0:	2304      	movs	r3, #4
 80023e2:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80023e4:	2307      	movs	r3, #7
 80023e6:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80023e8:	2303      	movs	r3, #3
 80023ea:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80023ec:	2302      	movs	r3, #2
 80023ee:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80023f0:	2302      	movs	r3, #2
 80023f2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80023f4:	1d3b      	adds	r3, r7, #4
 80023f6:	4619      	mov	r1, r3
 80023f8:	4832      	ldr	r0, [pc, #200]	; (80024c4 <MX_FMC_Init+0x14c>)
 80023fa:	f007 fe55 	bl	800a0a8 <HAL_SDRAM_Init>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8002404:	f000 fa98 	bl	8002938 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  __IO uint32_t tmpmrd = 0;
 8002408:	2300      	movs	r3, #0
 800240a:	603b      	str	r3, [r7, #0]

    /* Step 1: Configure a clock configuration enable command */
    Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800240c:	4b2f      	ldr	r3, [pc, #188]	; (80024cc <MX_FMC_Init+0x154>)
 800240e:	2201      	movs	r2, #1
 8002410:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 8002412:	4b2e      	ldr	r3, [pc, #184]	; (80024cc <MX_FMC_Init+0x154>)
 8002414:	2210      	movs	r2, #16
 8002416:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 8002418:	4b2c      	ldr	r3, [pc, #176]	; (80024cc <MX_FMC_Init+0x154>)
 800241a:	2201      	movs	r2, #1
 800241c:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 800241e:	4b2b      	ldr	r3, [pc, #172]	; (80024cc <MX_FMC_Init+0x154>)
 8002420:	2200      	movs	r2, #0
 8002422:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002424:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002428:	4928      	ldr	r1, [pc, #160]	; (80024cc <MX_FMC_Init+0x154>)
 800242a:	4826      	ldr	r0, [pc, #152]	; (80024c4 <MX_FMC_Init+0x14c>)
 800242c:	f007 fe70 	bl	800a110 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 8002430:	2001      	movs	r0, #1
 8002432:	f001 fba3 	bl	8003b7c <HAL_Delay>

    /* Step 3: Configure a PALL (precharge all) command */
    Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8002436:	4b25      	ldr	r3, [pc, #148]	; (80024cc <MX_FMC_Init+0x154>)
 8002438:	2202      	movs	r2, #2
 800243a:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800243c:	4b23      	ldr	r3, [pc, #140]	; (80024cc <MX_FMC_Init+0x154>)
 800243e:	2210      	movs	r2, #16
 8002440:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 8002442:	4b22      	ldr	r3, [pc, #136]	; (80024cc <MX_FMC_Init+0x154>)
 8002444:	2201      	movs	r2, #1
 8002446:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 8002448:	4b20      	ldr	r3, [pc, #128]	; (80024cc <MX_FMC_Init+0x154>)
 800244a:	2200      	movs	r2, #0
 800244c:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800244e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002452:	491e      	ldr	r1, [pc, #120]	; (80024cc <MX_FMC_Init+0x154>)
 8002454:	481b      	ldr	r0, [pc, #108]	; (80024c4 <MX_FMC_Init+0x14c>)
 8002456:	f007 fe5b 	bl	800a110 <HAL_SDRAM_SendCommand>

    /* Step 4: Configure an Auto Refresh command */
    Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800245a:	4b1c      	ldr	r3, [pc, #112]	; (80024cc <MX_FMC_Init+0x154>)
 800245c:	2203      	movs	r2, #3
 800245e:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002460:	4b1a      	ldr	r3, [pc, #104]	; (80024cc <MX_FMC_Init+0x154>)
 8002462:	2210      	movs	r2, #16
 8002464:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 8;
 8002466:	4b19      	ldr	r3, [pc, #100]	; (80024cc <MX_FMC_Init+0x154>)
 8002468:	2208      	movs	r2, #8
 800246a:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 800246c:	4b17      	ldr	r3, [pc, #92]	; (80024cc <MX_FMC_Init+0x154>)
 800246e:	2200      	movs	r2, #0
 8002470:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002472:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002476:	4915      	ldr	r1, [pc, #84]	; (80024cc <MX_FMC_Init+0x154>)
 8002478:	4812      	ldr	r0, [pc, #72]	; (80024c4 <MX_FMC_Init+0x14c>)
 800247a:	f007 fe49 	bl	800a110 <HAL_SDRAM_SendCommand>

    /* Step 5: Program the external memory mode register */
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 800247e:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002482:	603b      	str	r3, [r7, #0]
             SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL    | \
             SDRAM_MODEREG_CAS_LATENCY_3            | \
             SDRAM_MODEREG_OPERATING_MODE_STANDARD  | \
             SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

    Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8002484:	4b11      	ldr	r3, [pc, #68]	; (80024cc <MX_FMC_Init+0x154>)
 8002486:	2204      	movs	r2, #4
 8002488:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800248a:	4b10      	ldr	r3, [pc, #64]	; (80024cc <MX_FMC_Init+0x154>)
 800248c:	2210      	movs	r2, #16
 800248e:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 8002490:	4b0e      	ldr	r3, [pc, #56]	; (80024cc <MX_FMC_Init+0x154>)
 8002492:	2201      	movs	r2, #1
 8002494:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = tmpmrd;
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	4a0c      	ldr	r2, [pc, #48]	; (80024cc <MX_FMC_Init+0x154>)
 800249a:	60d3      	str	r3, [r2, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800249c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024a0:	490a      	ldr	r1, [pc, #40]	; (80024cc <MX_FMC_Init+0x154>)
 80024a2:	4808      	ldr	r0, [pc, #32]	; (80024c4 <MX_FMC_Init+0x14c>)
 80024a4:	f007 fe34 	bl	800a110 <HAL_SDRAM_SendCommand>

    /* Step 6: Set the refresh rate counter */
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 80024a8:	f240 712b 	movw	r1, #1835	; 0x72b
 80024ac:	4805      	ldr	r0, [pc, #20]	; (80024c4 <MX_FMC_Init+0x14c>)
 80024ae:	f007 fe5a 	bl	800a166 <HAL_SDRAM_ProgramRefreshRate>

    //Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
    FMC_Bank1->BTCR[0] = 0x000030D2;
 80024b2:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80024b6:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80024ba:	601a      	str	r2, [r3, #0]
  /* USER CODE END FMC_Init 2 */
}
 80024bc:	bf00      	nop
 80024be:	3720      	adds	r7, #32
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	2000c2c0 	.word	0x2000c2c0
 80024c8:	a0000140 	.word	0xa0000140
 80024cc:	200003b4 	.word	0x200003b4

080024d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b090      	sub	sp, #64	; 0x40
 80024d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024da:	2200      	movs	r2, #0
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	605a      	str	r2, [r3, #4]
 80024e0:	609a      	str	r2, [r3, #8]
 80024e2:	60da      	str	r2, [r3, #12]
 80024e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80024e6:	4baf      	ldr	r3, [pc, #700]	; (80027a4 <MX_GPIO_Init+0x2d4>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	4aae      	ldr	r2, [pc, #696]	; (80027a4 <MX_GPIO_Init+0x2d4>)
 80024ec:	f043 0310 	orr.w	r3, r3, #16
 80024f0:	6313      	str	r3, [r2, #48]	; 0x30
 80024f2:	4bac      	ldr	r3, [pc, #688]	; (80027a4 <MX_GPIO_Init+0x2d4>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	f003 0310 	and.w	r3, r3, #16
 80024fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80024fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80024fe:	4ba9      	ldr	r3, [pc, #676]	; (80027a4 <MX_GPIO_Init+0x2d4>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	4aa8      	ldr	r2, [pc, #672]	; (80027a4 <MX_GPIO_Init+0x2d4>)
 8002504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002508:	6313      	str	r3, [r2, #48]	; 0x30
 800250a:	4ba6      	ldr	r3, [pc, #664]	; (80027a4 <MX_GPIO_Init+0x2d4>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002512:	627b      	str	r3, [r7, #36]	; 0x24
 8002514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002516:	4ba3      	ldr	r3, [pc, #652]	; (80027a4 <MX_GPIO_Init+0x2d4>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	4aa2      	ldr	r2, [pc, #648]	; (80027a4 <MX_GPIO_Init+0x2d4>)
 800251c:	f043 0302 	orr.w	r3, r3, #2
 8002520:	6313      	str	r3, [r2, #48]	; 0x30
 8002522:	4ba0      	ldr	r3, [pc, #640]	; (80027a4 <MX_GPIO_Init+0x2d4>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	623b      	str	r3, [r7, #32]
 800252c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800252e:	4b9d      	ldr	r3, [pc, #628]	; (80027a4 <MX_GPIO_Init+0x2d4>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	4a9c      	ldr	r2, [pc, #624]	; (80027a4 <MX_GPIO_Init+0x2d4>)
 8002534:	f043 0308 	orr.w	r3, r3, #8
 8002538:	6313      	str	r3, [r2, #48]	; 0x30
 800253a:	4b9a      	ldr	r3, [pc, #616]	; (80027a4 <MX_GPIO_Init+0x2d4>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	f003 0308 	and.w	r3, r3, #8
 8002542:	61fb      	str	r3, [r7, #28]
 8002544:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002546:	4b97      	ldr	r3, [pc, #604]	; (80027a4 <MX_GPIO_Init+0x2d4>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	4a96      	ldr	r2, [pc, #600]	; (80027a4 <MX_GPIO_Init+0x2d4>)
 800254c:	f043 0304 	orr.w	r3, r3, #4
 8002550:	6313      	str	r3, [r2, #48]	; 0x30
 8002552:	4b94      	ldr	r3, [pc, #592]	; (80027a4 <MX_GPIO_Init+0x2d4>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	f003 0304 	and.w	r3, r3, #4
 800255a:	61bb      	str	r3, [r7, #24]
 800255c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800255e:	4b91      	ldr	r3, [pc, #580]	; (80027a4 <MX_GPIO_Init+0x2d4>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	4a90      	ldr	r2, [pc, #576]	; (80027a4 <MX_GPIO_Init+0x2d4>)
 8002564:	f043 0301 	orr.w	r3, r3, #1
 8002568:	6313      	str	r3, [r2, #48]	; 0x30
 800256a:	4b8e      	ldr	r3, [pc, #568]	; (80027a4 <MX_GPIO_Init+0x2d4>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	617b      	str	r3, [r7, #20]
 8002574:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002576:	4b8b      	ldr	r3, [pc, #556]	; (80027a4 <MX_GPIO_Init+0x2d4>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	4a8a      	ldr	r2, [pc, #552]	; (80027a4 <MX_GPIO_Init+0x2d4>)
 800257c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002580:	6313      	str	r3, [r2, #48]	; 0x30
 8002582:	4b88      	ldr	r3, [pc, #544]	; (80027a4 <MX_GPIO_Init+0x2d4>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800258a:	613b      	str	r3, [r7, #16]
 800258c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800258e:	4b85      	ldr	r3, [pc, #532]	; (80027a4 <MX_GPIO_Init+0x2d4>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	4a84      	ldr	r2, [pc, #528]	; (80027a4 <MX_GPIO_Init+0x2d4>)
 8002594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002598:	6313      	str	r3, [r2, #48]	; 0x30
 800259a:	4b82      	ldr	r3, [pc, #520]	; (80027a4 <MX_GPIO_Init+0x2d4>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80025a6:	4b7f      	ldr	r3, [pc, #508]	; (80027a4 <MX_GPIO_Init+0x2d4>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	4a7e      	ldr	r2, [pc, #504]	; (80027a4 <MX_GPIO_Init+0x2d4>)
 80025ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025b0:	6313      	str	r3, [r2, #48]	; 0x30
 80025b2:	4b7c      	ldr	r3, [pc, #496]	; (80027a4 <MX_GPIO_Init+0x2d4>)
 80025b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ba:	60bb      	str	r3, [r7, #8]
 80025bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80025be:	4b79      	ldr	r3, [pc, #484]	; (80027a4 <MX_GPIO_Init+0x2d4>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	4a78      	ldr	r2, [pc, #480]	; (80027a4 <MX_GPIO_Init+0x2d4>)
 80025c4:	f043 0320 	orr.w	r3, r3, #32
 80025c8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ca:	4b76      	ldr	r3, [pc, #472]	; (80027a4 <MX_GPIO_Init+0x2d4>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ce:	f003 0320 	and.w	r3, r3, #32
 80025d2:	607b      	str	r3, [r7, #4]
 80025d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025d6:	4b73      	ldr	r3, [pc, #460]	; (80027a4 <MX_GPIO_Init+0x2d4>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	4a72      	ldr	r2, [pc, #456]	; (80027a4 <MX_GPIO_Init+0x2d4>)
 80025dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025e0:	6313      	str	r3, [r2, #48]	; 0x30
 80025e2:	4b70      	ldr	r3, [pc, #448]	; (80027a4 <MX_GPIO_Init+0x2d4>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ea:	603b      	str	r3, [r7, #0]
 80025ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80025ee:	2201      	movs	r2, #1
 80025f0:	2120      	movs	r1, #32
 80025f2:	486d      	ldr	r0, [pc, #436]	; (80027a8 <MX_GPIO_Init+0x2d8>)
 80025f4:	f003 fbb8 	bl	8005d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 80025f8:	2200      	movs	r2, #0
 80025fa:	210c      	movs	r1, #12
 80025fc:	486b      	ldr	r0, [pc, #428]	; (80027ac <MX_GPIO_Init+0x2dc>)
 80025fe:	f003 fbb3 	bl	8005d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8002602:	2201      	movs	r2, #1
 8002604:	2108      	movs	r1, #8
 8002606:	486a      	ldr	r0, [pc, #424]	; (80027b0 <MX_GPIO_Init+0x2e0>)
 8002608:	f003 fbae 	bl	8005d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800260c:	2201      	movs	r2, #1
 800260e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002612:	4866      	ldr	r0, [pc, #408]	; (80027ac <MX_GPIO_Init+0x2dc>)
 8002614:	f003 fba8 	bl	8005d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8002618:	2200      	movs	r2, #0
 800261a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800261e:	4865      	ldr	r0, [pc, #404]	; (80027b4 <MX_GPIO_Init+0x2e4>)
 8002620:	f003 fba2 	bl	8005d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002624:	2200      	movs	r2, #0
 8002626:	21c8      	movs	r1, #200	; 0xc8
 8002628:	4863      	ldr	r0, [pc, #396]	; (80027b8 <MX_GPIO_Init+0x2e8>)
 800262a:	f003 fb9d 	bl	8005d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800262e:	2308      	movs	r3, #8
 8002630:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002632:	2300      	movs	r3, #0
 8002634:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002636:	2300      	movs	r3, #0
 8002638:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800263a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800263e:	4619      	mov	r1, r3
 8002640:	485e      	ldr	r0, [pc, #376]	; (80027bc <MX_GPIO_Init+0x2ec>)
 8002642:	f003 f9cf 	bl	80059e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8002646:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800264a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264c:	2302      	movs	r3, #2
 800264e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002650:	2300      	movs	r3, #0
 8002652:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002654:	2303      	movs	r3, #3
 8002656:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002658:	230b      	movs	r3, #11
 800265a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800265c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002660:	4619      	mov	r1, r3
 8002662:	4855      	ldr	r0, [pc, #340]	; (80027b8 <MX_GPIO_Init+0x2e8>)
 8002664:	f003 f9be 	bl	80059e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 8002668:	f643 4323 	movw	r3, #15395	; 0x3c23
 800266c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266e:	2302      	movs	r3, #2
 8002670:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002672:	2300      	movs	r3, #0
 8002674:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002676:	2303      	movs	r3, #3
 8002678:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800267a:	230a      	movs	r3, #10
 800267c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800267e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002682:	4619      	mov	r1, r3
 8002684:	484e      	ldr	r0, [pc, #312]	; (80027c0 <MX_GPIO_Init+0x2f0>)
 8002686:	f003 f9ad 	bl	80059e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800268a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800268e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002690:	2300      	movs	r3, #0
 8002692:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002694:	2300      	movs	r3, #0
 8002696:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002698:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800269c:	4619      	mov	r1, r3
 800269e:	4849      	ldr	r0, [pc, #292]	; (80027c4 <MX_GPIO_Init+0x2f4>)
 80026a0:	f003 f9a0 	bl	80059e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80026a4:	2340      	movs	r3, #64	; 0x40
 80026a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80026a8:	4b47      	ldr	r3, [pc, #284]	; (80027c8 <MX_GPIO_Init+0x2f8>)
 80026aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ac:	2300      	movs	r3, #0
 80026ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80026b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026b4:	4619      	mov	r1, r3
 80026b6:	483c      	ldr	r0, [pc, #240]	; (80027a8 <MX_GPIO_Init+0x2d8>)
 80026b8:	f003 f994 	bl	80059e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80026bc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80026c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c2:	2302      	movs	r3, #2
 80026c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c6:	2300      	movs	r3, #0
 80026c8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ca:	2303      	movs	r3, #3
 80026cc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80026ce:	230a      	movs	r3, #10
 80026d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026d6:	4619      	mov	r1, r3
 80026d8:	483c      	ldr	r0, [pc, #240]	; (80027cc <MX_GPIO_Init+0x2fc>)
 80026da:	f003 f983 	bl	80059e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80026de:	2320      	movs	r3, #32
 80026e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026e2:	2301      	movs	r3, #1
 80026e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e6:	2300      	movs	r3, #0
 80026e8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ea:	2300      	movs	r3, #0
 80026ec:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80026ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026f2:	4619      	mov	r1, r3
 80026f4:	482c      	ldr	r0, [pc, #176]	; (80027a8 <MX_GPIO_Init+0x2d8>)
 80026f6:	f003 f975 	bl	80059e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80026fa:	f241 030c 	movw	r3, #4108	; 0x100c
 80026fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002700:	2301      	movs	r3, #1
 8002702:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002704:	2300      	movs	r3, #0
 8002706:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002708:	2300      	movs	r3, #0
 800270a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800270c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002710:	4619      	mov	r1, r3
 8002712:	4826      	ldr	r0, [pc, #152]	; (80027ac <MX_GPIO_Init+0x2dc>)
 8002714:	f003 f966 	bl	80059e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002718:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800271c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800271e:	2300      	movs	r3, #0
 8002720:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002722:	2300      	movs	r3, #0
 8002724:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002726:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800272a:	4619      	mov	r1, r3
 800272c:	4828      	ldr	r0, [pc, #160]	; (80027d0 <MX_GPIO_Init+0x300>)
 800272e:	f003 f959 	bl	80059e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002732:	2308      	movs	r3, #8
 8002734:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002736:	2301      	movs	r3, #1
 8002738:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273a:	2300      	movs	r3, #0
 800273c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273e:	2300      	movs	r3, #0
 8002740:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002742:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002746:	4619      	mov	r1, r3
 8002748:	4819      	ldr	r0, [pc, #100]	; (80027b0 <MX_GPIO_Init+0x2e0>)
 800274a:	f003 f94b 	bl	80059e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800274e:	2310      	movs	r3, #16
 8002750:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002752:	2300      	movs	r3, #0
 8002754:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002756:	2300      	movs	r3, #0
 8002758:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800275a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800275e:	4619      	mov	r1, r3
 8002760:	4811      	ldr	r0, [pc, #68]	; (80027a8 <MX_GPIO_Init+0x2d8>)
 8002762:	f003 f93f 	bl	80059e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8002766:	f248 0304 	movw	r3, #32772	; 0x8004
 800276a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800276c:	2300      	movs	r3, #0
 800276e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002770:	2300      	movs	r3, #0
 8002772:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002774:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002778:	4619      	mov	r1, r3
 800277a:	480e      	ldr	r0, [pc, #56]	; (80027b4 <MX_GPIO_Init+0x2e4>)
 800277c:	f003 f932 	bl	80059e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8002780:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002784:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002786:	2301      	movs	r3, #1
 8002788:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278a:	2300      	movs	r3, #0
 800278c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800278e:	2300      	movs	r3, #0
 8002790:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002792:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002796:	4619      	mov	r1, r3
 8002798:	4806      	ldr	r0, [pc, #24]	; (80027b4 <MX_GPIO_Init+0x2e4>)
 800279a:	f003 f923 	bl	80059e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800279e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027a2:	e017      	b.n	80027d4 <MX_GPIO_Init+0x304>
 80027a4:	40023800 	.word	0x40023800
 80027a8:	40020c00 	.word	0x40020c00
 80027ac:	40022000 	.word	0x40022000
 80027b0:	40022800 	.word	0x40022800
 80027b4:	40021c00 	.word	0x40021c00
 80027b8:	40021800 	.word	0x40021800
 80027bc:	40021000 	.word	0x40021000
 80027c0:	40020400 	.word	0x40020400
 80027c4:	40022400 	.word	0x40022400
 80027c8:	10120000 	.word	0x10120000
 80027cc:	40020000 	.word	0x40020000
 80027d0:	40020800 	.word	0x40020800
 80027d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80027d6:	4b44      	ldr	r3, [pc, #272]	; (80028e8 <MX_GPIO_Init+0x418>)
 80027d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027da:	2300      	movs	r3, #0
 80027dc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80027de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027e2:	4619      	mov	r1, r3
 80027e4:	4841      	ldr	r0, [pc, #260]	; (80028ec <MX_GPIO_Init+0x41c>)
 80027e6:	f003 f8fd 	bl	80059e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80027ea:	2310      	movs	r3, #16
 80027ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ee:	2302      	movs	r3, #2
 80027f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f2:	2300      	movs	r3, #0
 80027f4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027f6:	2303      	movs	r3, #3
 80027f8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80027fa:	230a      	movs	r3, #10
 80027fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80027fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002802:	4619      	mov	r1, r3
 8002804:	483a      	ldr	r0, [pc, #232]	; (80028f0 <MX_GPIO_Init+0x420>)
 8002806:	f003 f8ed 	bl	80059e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800280a:	23c8      	movs	r3, #200	; 0xc8
 800280c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800280e:	2301      	movs	r3, #1
 8002810:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002812:	2300      	movs	r3, #0
 8002814:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002816:	2300      	movs	r3, #0
 8002818:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800281a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800281e:	4619      	mov	r1, r3
 8002820:	4834      	ldr	r0, [pc, #208]	; (80028f4 <MX_GPIO_Init+0x424>)
 8002822:	f003 f8df 	bl	80059e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002826:	2305      	movs	r3, #5
 8002828:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282a:	2302      	movs	r3, #2
 800282c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282e:	2300      	movs	r3, #0
 8002830:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002832:	2303      	movs	r3, #3
 8002834:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002836:	230a      	movs	r3, #10
 8002838:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800283a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800283e:	4619      	mov	r1, r3
 8002840:	482d      	ldr	r0, [pc, #180]	; (80028f8 <MX_GPIO_Init+0x428>)
 8002842:	f003 f8cf 	bl	80059e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002846:	2332      	movs	r3, #50	; 0x32
 8002848:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284a:	2302      	movs	r3, #2
 800284c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284e:	2300      	movs	r3, #0
 8002850:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002852:	2303      	movs	r3, #3
 8002854:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002856:	230b      	movs	r3, #11
 8002858:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800285a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800285e:	4619      	mov	r1, r3
 8002860:	4825      	ldr	r0, [pc, #148]	; (80028f8 <MX_GPIO_Init+0x428>)
 8002862:	f003 f8bf 	bl	80059e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8002866:	2304      	movs	r3, #4
 8002868:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800286a:	2300      	movs	r3, #0
 800286c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286e:	2300      	movs	r3, #0
 8002870:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8002872:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002876:	4619      	mov	r1, r3
 8002878:	481e      	ldr	r0, [pc, #120]	; (80028f4 <MX_GPIO_Init+0x424>)
 800287a:	f003 f8b3 	bl	80059e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800287e:	2386      	movs	r3, #134	; 0x86
 8002880:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002882:	2302      	movs	r3, #2
 8002884:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002886:	2300      	movs	r3, #0
 8002888:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800288a:	2303      	movs	r3, #3
 800288c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800288e:	230b      	movs	r3, #11
 8002890:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002892:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002896:	4619      	mov	r1, r3
 8002898:	4818      	ldr	r0, [pc, #96]	; (80028fc <MX_GPIO_Init+0x42c>)
 800289a:	f003 f8a3 	bl	80059e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800289e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80028a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028a4:	2312      	movs	r3, #18
 80028a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028a8:	2301      	movs	r3, #1
 80028aa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ac:	2303      	movs	r3, #3
 80028ae:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80028b0:	2304      	movs	r3, #4
 80028b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80028b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028b8:	4619      	mov	r1, r3
 80028ba:	480d      	ldr	r0, [pc, #52]	; (80028f0 <MX_GPIO_Init+0x420>)
 80028bc:	f003 f892 	bl	80059e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80028c0:	2328      	movs	r3, #40	; 0x28
 80028c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c4:	2302      	movs	r3, #2
 80028c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c8:	2300      	movs	r3, #0
 80028ca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028cc:	2303      	movs	r3, #3
 80028ce:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80028d0:	230a      	movs	r3, #10
 80028d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028d8:	4619      	mov	r1, r3
 80028da:	4808      	ldr	r0, [pc, #32]	; (80028fc <MX_GPIO_Init+0x42c>)
 80028dc:	f003 f882 	bl	80059e4 <HAL_GPIO_Init>

}
 80028e0:	bf00      	nop
 80028e2:	3740      	adds	r7, #64	; 0x40
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	10120000 	.word	0x10120000
 80028ec:	40022000 	.word	0x40022000
 80028f0:	40021c00 	.word	0x40021c00
 80028f4:	40021800 	.word	0x40021800
 80028f8:	40020800 	.word	0x40020800
 80028fc:	40020000 	.word	0x40020000

08002900 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  MX_TouchGFX_Process();
 8002908:	f00d fcd6 	bl	80102b8 <MX_TouchGFX_Process>
  /* Infinite loop */

  for(;;)
  {
    osDelay(1);
 800290c:	2001      	movs	r0, #1
 800290e:	f00a fb99 	bl	800d044 <osDelay>
 8002912:	e7fb      	b.n	800290c <StartDefaultTask+0xc>

08002914 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a04      	ldr	r2, [pc, #16]	; (8002934 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d101      	bne.n	800292a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002926:	f001 f909 	bl	8003b3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800292a:	bf00      	nop
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40001000 	.word	0x40001000

08002938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800293c:	bf00      	nop
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
	...

08002948 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800294e:	4b11      	ldr	r3, [pc, #68]	; (8002994 <HAL_MspInit+0x4c>)
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	4a10      	ldr	r2, [pc, #64]	; (8002994 <HAL_MspInit+0x4c>)
 8002954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002958:	6413      	str	r3, [r2, #64]	; 0x40
 800295a:	4b0e      	ldr	r3, [pc, #56]	; (8002994 <HAL_MspInit+0x4c>)
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002962:	607b      	str	r3, [r7, #4]
 8002964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002966:	4b0b      	ldr	r3, [pc, #44]	; (8002994 <HAL_MspInit+0x4c>)
 8002968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296a:	4a0a      	ldr	r2, [pc, #40]	; (8002994 <HAL_MspInit+0x4c>)
 800296c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002970:	6453      	str	r3, [r2, #68]	; 0x44
 8002972:	4b08      	ldr	r3, [pc, #32]	; (8002994 <HAL_MspInit+0x4c>)
 8002974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002976:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800297a:	603b      	str	r3, [r7, #0]
 800297c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800297e:	2200      	movs	r2, #0
 8002980:	210f      	movs	r1, #15
 8002982:	f06f 0001 	mvn.w	r0, #1
 8002986:	f002 f9ff 	bl	8004d88 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800298a:	bf00      	nop
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40023800 	.word	0x40023800

08002998 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b08a      	sub	sp, #40	; 0x28
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a0:	f107 0314 	add.w	r3, r7, #20
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	605a      	str	r2, [r3, #4]
 80029aa:	609a      	str	r2, [r3, #8]
 80029ac:	60da      	str	r2, [r3, #12]
 80029ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a21      	ldr	r2, [pc, #132]	; (8002a3c <HAL_ADC_MspInit+0xa4>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d13c      	bne.n	8002a34 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80029ba:	4b21      	ldr	r3, [pc, #132]	; (8002a40 <HAL_ADC_MspInit+0xa8>)
 80029bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029be:	4a20      	ldr	r2, [pc, #128]	; (8002a40 <HAL_ADC_MspInit+0xa8>)
 80029c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029c4:	6453      	str	r3, [r2, #68]	; 0x44
 80029c6:	4b1e      	ldr	r3, [pc, #120]	; (8002a40 <HAL_ADC_MspInit+0xa8>)
 80029c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ce:	613b      	str	r3, [r7, #16]
 80029d0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80029d2:	4b1b      	ldr	r3, [pc, #108]	; (8002a40 <HAL_ADC_MspInit+0xa8>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	4a1a      	ldr	r2, [pc, #104]	; (8002a40 <HAL_ADC_MspInit+0xa8>)
 80029d8:	f043 0320 	orr.w	r3, r3, #32
 80029dc:	6313      	str	r3, [r2, #48]	; 0x30
 80029de:	4b18      	ldr	r3, [pc, #96]	; (8002a40 <HAL_ADC_MspInit+0xa8>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	f003 0320 	and.w	r3, r3, #32
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ea:	4b15      	ldr	r3, [pc, #84]	; (8002a40 <HAL_ADC_MspInit+0xa8>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ee:	4a14      	ldr	r2, [pc, #80]	; (8002a40 <HAL_ADC_MspInit+0xa8>)
 80029f0:	f043 0301 	orr.w	r3, r3, #1
 80029f4:	6313      	str	r3, [r2, #48]	; 0x30
 80029f6:	4b12      	ldr	r3, [pc, #72]	; (8002a40 <HAL_ADC_MspInit+0xa8>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	60bb      	str	r3, [r7, #8]
 8002a00:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 8002a02:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8002a06:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a10:	f107 0314 	add.w	r3, r7, #20
 8002a14:	4619      	mov	r1, r3
 8002a16:	480b      	ldr	r0, [pc, #44]	; (8002a44 <HAL_ADC_MspInit+0xac>)
 8002a18:	f002 ffe4 	bl	80059e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a20:	2303      	movs	r3, #3
 8002a22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8002a28:	f107 0314 	add.w	r3, r7, #20
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	4806      	ldr	r0, [pc, #24]	; (8002a48 <HAL_ADC_MspInit+0xb0>)
 8002a30:	f002 ffd8 	bl	80059e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002a34:	bf00      	nop
 8002a36:	3728      	adds	r7, #40	; 0x28
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	40012200 	.word	0x40012200
 8002a40:	40023800 	.word	0x40023800
 8002a44:	40021400 	.word	0x40021400
 8002a48:	40020000 	.word	0x40020000

08002a4c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b08a      	sub	sp, #40	; 0x28
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a54:	f107 0314 	add.w	r3, r7, #20
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	605a      	str	r2, [r3, #4]
 8002a5e:	609a      	str	r2, [r3, #8]
 8002a60:	60da      	str	r2, [r3, #12]
 8002a62:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a1b      	ldr	r2, [pc, #108]	; (8002ad8 <HAL_CAN_MspInit+0x8c>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d130      	bne.n	8002ad0 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002a6e:	4b1b      	ldr	r3, [pc, #108]	; (8002adc <HAL_CAN_MspInit+0x90>)
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	4a1a      	ldr	r2, [pc, #104]	; (8002adc <HAL_CAN_MspInit+0x90>)
 8002a74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a78:	6413      	str	r3, [r2, #64]	; 0x40
 8002a7a:	4b18      	ldr	r3, [pc, #96]	; (8002adc <HAL_CAN_MspInit+0x90>)
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a82:	613b      	str	r3, [r7, #16]
 8002a84:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a86:	4b15      	ldr	r3, [pc, #84]	; (8002adc <HAL_CAN_MspInit+0x90>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8a:	4a14      	ldr	r2, [pc, #80]	; (8002adc <HAL_CAN_MspInit+0x90>)
 8002a8c:	f043 0302 	orr.w	r3, r3, #2
 8002a90:	6313      	str	r3, [r2, #48]	; 0x30
 8002a92:	4b12      	ldr	r3, [pc, #72]	; (8002adc <HAL_CAN_MspInit+0x90>)
 8002a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	60fb      	str	r3, [r7, #12]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a9e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002aa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aac:	2303      	movs	r3, #3
 8002aae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002ab0:	2309      	movs	r3, #9
 8002ab2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ab4:	f107 0314 	add.w	r3, r7, #20
 8002ab8:	4619      	mov	r1, r3
 8002aba:	4809      	ldr	r0, [pc, #36]	; (8002ae0 <HAL_CAN_MspInit+0x94>)
 8002abc:	f002 ff92 	bl	80059e4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	2105      	movs	r1, #5
 8002ac4:	2014      	movs	r0, #20
 8002ac6:	f002 f95f 	bl	8004d88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002aca:	2014      	movs	r0, #20
 8002acc:	f002 f978 	bl	8004dc0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002ad0:	bf00      	nop
 8002ad2:	3728      	adds	r7, #40	; 0x28
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40006400 	.word	0x40006400
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	40020400 	.word	0x40020400

08002ae4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a0a      	ldr	r2, [pc, #40]	; (8002b1c <HAL_CRC_MspInit+0x38>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d10b      	bne.n	8002b0e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002af6:	4b0a      	ldr	r3, [pc, #40]	; (8002b20 <HAL_CRC_MspInit+0x3c>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	4a09      	ldr	r2, [pc, #36]	; (8002b20 <HAL_CRC_MspInit+0x3c>)
 8002afc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b00:	6313      	str	r3, [r2, #48]	; 0x30
 8002b02:	4b07      	ldr	r3, [pc, #28]	; (8002b20 <HAL_CRC_MspInit+0x3c>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002b0e:	bf00      	nop
 8002b10:	3714      	adds	r7, #20
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	40023000 	.word	0x40023000
 8002b20:	40023800 	.word	0x40023800

08002b24 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b08e      	sub	sp, #56	; 0x38
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	605a      	str	r2, [r3, #4]
 8002b36:	609a      	str	r2, [r3, #8]
 8002b38:	60da      	str	r2, [r3, #12]
 8002b3a:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a50      	ldr	r2, [pc, #320]	; (8002c84 <HAL_DCMI_MspInit+0x160>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	f040 809a 	bne.w	8002c7c <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002b48:	4b4f      	ldr	r3, [pc, #316]	; (8002c88 <HAL_DCMI_MspInit+0x164>)
 8002b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b4c:	4a4e      	ldr	r2, [pc, #312]	; (8002c88 <HAL_DCMI_MspInit+0x164>)
 8002b4e:	f043 0301 	orr.w	r3, r3, #1
 8002b52:	6353      	str	r3, [r2, #52]	; 0x34
 8002b54:	4b4c      	ldr	r3, [pc, #304]	; (8002c88 <HAL_DCMI_MspInit+0x164>)
 8002b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	623b      	str	r3, [r7, #32]
 8002b5e:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b60:	4b49      	ldr	r3, [pc, #292]	; (8002c88 <HAL_DCMI_MspInit+0x164>)
 8002b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b64:	4a48      	ldr	r2, [pc, #288]	; (8002c88 <HAL_DCMI_MspInit+0x164>)
 8002b66:	f043 0310 	orr.w	r3, r3, #16
 8002b6a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b6c:	4b46      	ldr	r3, [pc, #280]	; (8002c88 <HAL_DCMI_MspInit+0x164>)
 8002b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b70:	f003 0310 	and.w	r3, r3, #16
 8002b74:	61fb      	str	r3, [r7, #28]
 8002b76:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b78:	4b43      	ldr	r3, [pc, #268]	; (8002c88 <HAL_DCMI_MspInit+0x164>)
 8002b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7c:	4a42      	ldr	r2, [pc, #264]	; (8002c88 <HAL_DCMI_MspInit+0x164>)
 8002b7e:	f043 0308 	orr.w	r3, r3, #8
 8002b82:	6313      	str	r3, [r2, #48]	; 0x30
 8002b84:	4b40      	ldr	r3, [pc, #256]	; (8002c88 <HAL_DCMI_MspInit+0x164>)
 8002b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b88:	f003 0308 	and.w	r3, r3, #8
 8002b8c:	61bb      	str	r3, [r7, #24]
 8002b8e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b90:	4b3d      	ldr	r3, [pc, #244]	; (8002c88 <HAL_DCMI_MspInit+0x164>)
 8002b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b94:	4a3c      	ldr	r2, [pc, #240]	; (8002c88 <HAL_DCMI_MspInit+0x164>)
 8002b96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b9a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9c:	4b3a      	ldr	r3, [pc, #232]	; (8002c88 <HAL_DCMI_MspInit+0x164>)
 8002b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba4:	617b      	str	r3, [r7, #20]
 8002ba6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ba8:	4b37      	ldr	r3, [pc, #220]	; (8002c88 <HAL_DCMI_MspInit+0x164>)
 8002baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bac:	4a36      	ldr	r2, [pc, #216]	; (8002c88 <HAL_DCMI_MspInit+0x164>)
 8002bae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bb2:	6313      	str	r3, [r2, #48]	; 0x30
 8002bb4:	4b34      	ldr	r3, [pc, #208]	; (8002c88 <HAL_DCMI_MspInit+0x164>)
 8002bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bbc:	613b      	str	r3, [r7, #16]
 8002bbe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc0:	4b31      	ldr	r3, [pc, #196]	; (8002c88 <HAL_DCMI_MspInit+0x164>)
 8002bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc4:	4a30      	ldr	r2, [pc, #192]	; (8002c88 <HAL_DCMI_MspInit+0x164>)
 8002bc6:	f043 0301 	orr.w	r3, r3, #1
 8002bca:	6313      	str	r3, [r2, #48]	; 0x30
 8002bcc:	4b2e      	ldr	r3, [pc, #184]	; (8002c88 <HAL_DCMI_MspInit+0x164>)
 8002bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	60fb      	str	r3, [r7, #12]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002bd8:	2360      	movs	r3, #96	; 0x60
 8002bda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be0:	2300      	movs	r3, #0
 8002be2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be4:	2300      	movs	r3, #0
 8002be6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002be8:	230d      	movs	r3, #13
 8002bea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4826      	ldr	r0, [pc, #152]	; (8002c8c <HAL_DCMI_MspInit+0x168>)
 8002bf4:	f002 fef6 	bl	80059e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8002bf8:	2308      	movs	r3, #8
 8002bfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c00:	2300      	movs	r3, #0
 8002c02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c04:	2300      	movs	r3, #0
 8002c06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002c08:	230d      	movs	r3, #13
 8002c0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002c0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c10:	4619      	mov	r1, r3
 8002c12:	481f      	ldr	r0, [pc, #124]	; (8002c90 <HAL_DCMI_MspInit+0x16c>)
 8002c14:	f002 fee6 	bl	80059e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8002c18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1e:	2302      	movs	r3, #2
 8002c20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c22:	2300      	movs	r3, #0
 8002c24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c26:	2300      	movs	r3, #0
 8002c28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002c2a:	230d      	movs	r3, #13
 8002c2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8002c2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c32:	4619      	mov	r1, r3
 8002c34:	4817      	ldr	r0, [pc, #92]	; (8002c94 <HAL_DCMI_MspInit+0x170>)
 8002c36:	f002 fed5 	bl	80059e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 8002c3a:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8002c3e:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c40:	2302      	movs	r3, #2
 8002c42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c44:	2300      	movs	r3, #0
 8002c46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002c4c:	230d      	movs	r3, #13
 8002c4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002c50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c54:	4619      	mov	r1, r3
 8002c56:	4810      	ldr	r0, [pc, #64]	; (8002c98 <HAL_DCMI_MspInit+0x174>)
 8002c58:	f002 fec4 	bl	80059e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002c5c:	2350      	movs	r3, #80	; 0x50
 8002c5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c60:	2302      	movs	r3, #2
 8002c62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c64:	2300      	movs	r3, #0
 8002c66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002c6c:	230d      	movs	r3, #13
 8002c6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c74:	4619      	mov	r1, r3
 8002c76:	4809      	ldr	r0, [pc, #36]	; (8002c9c <HAL_DCMI_MspInit+0x178>)
 8002c78:	f002 feb4 	bl	80059e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002c7c:	bf00      	nop
 8002c7e:	3738      	adds	r7, #56	; 0x38
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	50050000 	.word	0x50050000
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	40020c00 	.word	0x40020c00
 8002c94:	40021800 	.word	0x40021800
 8002c98:	40021c00 	.word	0x40021c00
 8002c9c:	40020000 	.word	0x40020000

08002ca0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a0d      	ldr	r2, [pc, #52]	; (8002ce4 <HAL_DMA2D_MspInit+0x44>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d113      	bne.n	8002cda <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002cb2:	4b0d      	ldr	r3, [pc, #52]	; (8002ce8 <HAL_DMA2D_MspInit+0x48>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	4a0c      	ldr	r2, [pc, #48]	; (8002ce8 <HAL_DMA2D_MspInit+0x48>)
 8002cb8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cbe:	4b0a      	ldr	r3, [pc, #40]	; (8002ce8 <HAL_DMA2D_MspInit+0x48>)
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002cca:	2200      	movs	r2, #0
 8002ccc:	2105      	movs	r1, #5
 8002cce:	205a      	movs	r0, #90	; 0x5a
 8002cd0:	f002 f85a 	bl	8004d88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002cd4:	205a      	movs	r0, #90	; 0x5a
 8002cd6:	f002 f873 	bl	8004dc0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002cda:	bf00      	nop
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	4002b000 	.word	0x4002b000
 8002ce8:	40023800 	.word	0x40023800

08002cec <HAL_DMA2D_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a07      	ldr	r2, [pc, #28]	; (8002d18 <HAL_DMA2D_MspDeInit+0x2c>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d108      	bne.n	8002d10 <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 8002cfe:	4b07      	ldr	r3, [pc, #28]	; (8002d1c <HAL_DMA2D_MspDeInit+0x30>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	4a06      	ldr	r2, [pc, #24]	; (8002d1c <HAL_DMA2D_MspDeInit+0x30>)
 8002d04:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002d08:	6313      	str	r3, [r2, #48]	; 0x30

    /* DMA2D interrupt DeInit */
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 8002d0a:	205a      	movs	r0, #90	; 0x5a
 8002d0c:	f002 f866 	bl	8004ddc <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }

}
 8002d10:	bf00      	nop
 8002d12:	3708      	adds	r7, #8
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	4002b000 	.word	0x4002b000
 8002d1c:	40023800 	.word	0x40023800

08002d20 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b08e      	sub	sp, #56	; 0x38
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	605a      	str	r2, [r3, #4]
 8002d32:	609a      	str	r2, [r3, #8]
 8002d34:	60da      	str	r2, [r3, #12]
 8002d36:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a55      	ldr	r2, [pc, #340]	; (8002e94 <HAL_LTDC_MspInit+0x174>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	f040 80a3 	bne.w	8002e8a <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002d44:	4b54      	ldr	r3, [pc, #336]	; (8002e98 <HAL_LTDC_MspInit+0x178>)
 8002d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d48:	4a53      	ldr	r2, [pc, #332]	; (8002e98 <HAL_LTDC_MspInit+0x178>)
 8002d4a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d4e:	6453      	str	r3, [r2, #68]	; 0x44
 8002d50:	4b51      	ldr	r3, [pc, #324]	; (8002e98 <HAL_LTDC_MspInit+0x178>)
 8002d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d58:	623b      	str	r3, [r7, #32]
 8002d5a:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d5c:	4b4e      	ldr	r3, [pc, #312]	; (8002e98 <HAL_LTDC_MspInit+0x178>)
 8002d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d60:	4a4d      	ldr	r2, [pc, #308]	; (8002e98 <HAL_LTDC_MspInit+0x178>)
 8002d62:	f043 0310 	orr.w	r3, r3, #16
 8002d66:	6313      	str	r3, [r2, #48]	; 0x30
 8002d68:	4b4b      	ldr	r3, [pc, #300]	; (8002e98 <HAL_LTDC_MspInit+0x178>)
 8002d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6c:	f003 0310 	and.w	r3, r3, #16
 8002d70:	61fb      	str	r3, [r7, #28]
 8002d72:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002d74:	4b48      	ldr	r3, [pc, #288]	; (8002e98 <HAL_LTDC_MspInit+0x178>)
 8002d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d78:	4a47      	ldr	r2, [pc, #284]	; (8002e98 <HAL_LTDC_MspInit+0x178>)
 8002d7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d7e:	6313      	str	r3, [r2, #48]	; 0x30
 8002d80:	4b45      	ldr	r3, [pc, #276]	; (8002e98 <HAL_LTDC_MspInit+0x178>)
 8002d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d88:	61bb      	str	r3, [r7, #24]
 8002d8a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002d8c:	4b42      	ldr	r3, [pc, #264]	; (8002e98 <HAL_LTDC_MspInit+0x178>)
 8002d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d90:	4a41      	ldr	r2, [pc, #260]	; (8002e98 <HAL_LTDC_MspInit+0x178>)
 8002d92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d96:	6313      	str	r3, [r2, #48]	; 0x30
 8002d98:	4b3f      	ldr	r3, [pc, #252]	; (8002e98 <HAL_LTDC_MspInit+0x178>)
 8002d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da0:	617b      	str	r3, [r7, #20]
 8002da2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002da4:	4b3c      	ldr	r3, [pc, #240]	; (8002e98 <HAL_LTDC_MspInit+0x178>)
 8002da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da8:	4a3b      	ldr	r2, [pc, #236]	; (8002e98 <HAL_LTDC_MspInit+0x178>)
 8002daa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dae:	6313      	str	r3, [r2, #48]	; 0x30
 8002db0:	4b39      	ldr	r3, [pc, #228]	; (8002e98 <HAL_LTDC_MspInit+0x178>)
 8002db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db8:	613b      	str	r3, [r7, #16]
 8002dba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002dbc:	4b36      	ldr	r3, [pc, #216]	; (8002e98 <HAL_LTDC_MspInit+0x178>)
 8002dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc0:	4a35      	ldr	r2, [pc, #212]	; (8002e98 <HAL_LTDC_MspInit+0x178>)
 8002dc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc6:	6313      	str	r3, [r2, #48]	; 0x30
 8002dc8:	4b33      	ldr	r3, [pc, #204]	; (8002e98 <HAL_LTDC_MspInit+0x178>)
 8002dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002dd4:	2310      	movs	r3, #16
 8002dd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd8:	2302      	movs	r3, #2
 8002dda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de0:	2300      	movs	r3, #0
 8002de2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002de4:	230e      	movs	r3, #14
 8002de6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002de8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dec:	4619      	mov	r1, r3
 8002dee:	482b      	ldr	r0, [pc, #172]	; (8002e9c <HAL_LTDC_MspInit+0x17c>)
 8002df0:	f002 fdf8 	bl	80059e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8002df4:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002df8:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e02:	2300      	movs	r3, #0
 8002e04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002e06:	230e      	movs	r3, #14
 8002e08:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002e0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e0e:	4619      	mov	r1, r3
 8002e10:	4823      	ldr	r0, [pc, #140]	; (8002ea0 <HAL_LTDC_MspInit+0x180>)
 8002e12:	f002 fde7 	bl	80059e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8002e16:	23f7      	movs	r3, #247	; 0xf7
 8002e18:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e22:	2300      	movs	r3, #0
 8002e24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002e26:	230e      	movs	r3, #14
 8002e28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002e2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e2e:	4619      	mov	r1, r3
 8002e30:	481c      	ldr	r0, [pc, #112]	; (8002ea4 <HAL_LTDC_MspInit+0x184>)
 8002e32:	f002 fdd7 	bl	80059e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002e36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e40:	2300      	movs	r3, #0
 8002e42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e44:	2300      	movs	r3, #0
 8002e46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002e48:	2309      	movs	r3, #9
 8002e4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002e4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e50:	4619      	mov	r1, r3
 8002e52:	4815      	ldr	r0, [pc, #84]	; (8002ea8 <HAL_LTDC_MspInit+0x188>)
 8002e54:	f002 fdc6 	bl	80059e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002e58:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002e5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5e:	2302      	movs	r3, #2
 8002e60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e62:	2300      	movs	r3, #0
 8002e64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e66:	2300      	movs	r3, #0
 8002e68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002e6a:	230e      	movs	r3, #14
 8002e6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e72:	4619      	mov	r1, r3
 8002e74:	480d      	ldr	r0, [pc, #52]	; (8002eac <HAL_LTDC_MspInit+0x18c>)
 8002e76:	f002 fdb5 	bl	80059e4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	2105      	movs	r1, #5
 8002e7e:	2058      	movs	r0, #88	; 0x58
 8002e80:	f001 ff82 	bl	8004d88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002e84:	2058      	movs	r0, #88	; 0x58
 8002e86:	f001 ff9b 	bl	8004dc0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002e8a:	bf00      	nop
 8002e8c:	3738      	adds	r7, #56	; 0x38
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40016800 	.word	0x40016800
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	40022400 	.word	0x40022400
 8002ea4:	40022800 	.word	0x40022800
 8002ea8:	40021800 	.word	0x40021800
 8002eac:	40022000 	.word	0x40022000

08002eb0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b08c      	sub	sp, #48	; 0x30
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb8:	f107 031c 	add.w	r3, r7, #28
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	605a      	str	r2, [r3, #4]
 8002ec2:	609a      	str	r2, [r3, #8]
 8002ec4:	60da      	str	r2, [r3, #12]
 8002ec6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a3b      	ldr	r2, [pc, #236]	; (8002fbc <HAL_QSPI_MspInit+0x10c>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d170      	bne.n	8002fb4 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002ed2:	4b3b      	ldr	r3, [pc, #236]	; (8002fc0 <HAL_QSPI_MspInit+0x110>)
 8002ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed6:	4a3a      	ldr	r2, [pc, #232]	; (8002fc0 <HAL_QSPI_MspInit+0x110>)
 8002ed8:	f043 0302 	orr.w	r3, r3, #2
 8002edc:	6393      	str	r3, [r2, #56]	; 0x38
 8002ede:	4b38      	ldr	r3, [pc, #224]	; (8002fc0 <HAL_QSPI_MspInit+0x110>)
 8002ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	61bb      	str	r3, [r7, #24]
 8002ee8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002eea:	4b35      	ldr	r3, [pc, #212]	; (8002fc0 <HAL_QSPI_MspInit+0x110>)
 8002eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eee:	4a34      	ldr	r2, [pc, #208]	; (8002fc0 <HAL_QSPI_MspInit+0x110>)
 8002ef0:	f043 0310 	orr.w	r3, r3, #16
 8002ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ef6:	4b32      	ldr	r3, [pc, #200]	; (8002fc0 <HAL_QSPI_MspInit+0x110>)
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efa:	f003 0310 	and.w	r3, r3, #16
 8002efe:	617b      	str	r3, [r7, #20]
 8002f00:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f02:	4b2f      	ldr	r3, [pc, #188]	; (8002fc0 <HAL_QSPI_MspInit+0x110>)
 8002f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f06:	4a2e      	ldr	r2, [pc, #184]	; (8002fc0 <HAL_QSPI_MspInit+0x110>)
 8002f08:	f043 0302 	orr.w	r3, r3, #2
 8002f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f0e:	4b2c      	ldr	r3, [pc, #176]	; (8002fc0 <HAL_QSPI_MspInit+0x110>)
 8002f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	613b      	str	r3, [r7, #16]
 8002f18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f1a:	4b29      	ldr	r3, [pc, #164]	; (8002fc0 <HAL_QSPI_MspInit+0x110>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	4a28      	ldr	r2, [pc, #160]	; (8002fc0 <HAL_QSPI_MspInit+0x110>)
 8002f20:	f043 0308 	orr.w	r3, r3, #8
 8002f24:	6313      	str	r3, [r2, #48]	; 0x30
 8002f26:	4b26      	ldr	r3, [pc, #152]	; (8002fc0 <HAL_QSPI_MspInit+0x110>)
 8002f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2a:	f003 0308 	and.w	r3, r3, #8
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002f32:	2304      	movs	r3, #4
 8002f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f36:	2302      	movs	r3, #2
 8002f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002f42:	2309      	movs	r3, #9
 8002f44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002f46:	f107 031c 	add.w	r3, r7, #28
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	481d      	ldr	r0, [pc, #116]	; (8002fc4 <HAL_QSPI_MspInit+0x114>)
 8002f4e:	f002 fd49 	bl	80059e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002f52:	2340      	movs	r3, #64	; 0x40
 8002f54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f56:	2302      	movs	r3, #2
 8002f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002f62:	230a      	movs	r3, #10
 8002f64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002f66:	f107 031c 	add.w	r3, r7, #28
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	4816      	ldr	r0, [pc, #88]	; (8002fc8 <HAL_QSPI_MspInit+0x118>)
 8002f6e:	f002 fd39 	bl	80059e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f72:	2304      	movs	r3, #4
 8002f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f76:	2302      	movs	r3, #2
 8002f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002f82:	2309      	movs	r3, #9
 8002f84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f86:	f107 031c 	add.w	r3, r7, #28
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	480e      	ldr	r0, [pc, #56]	; (8002fc8 <HAL_QSPI_MspInit+0x118>)
 8002f8e:	f002 fd29 	bl	80059e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002f92:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f98:	2302      	movs	r3, #2
 8002f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002fa4:	2309      	movs	r3, #9
 8002fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fa8:	f107 031c 	add.w	r3, r7, #28
 8002fac:	4619      	mov	r1, r3
 8002fae:	4807      	ldr	r0, [pc, #28]	; (8002fcc <HAL_QSPI_MspInit+0x11c>)
 8002fb0:	f002 fd18 	bl	80059e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002fb4:	bf00      	nop
 8002fb6:	3730      	adds	r7, #48	; 0x30
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	a0001000 	.word	0xa0001000
 8002fc0:	40023800 	.word	0x40023800
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	40020400 	.word	0x40020400
 8002fcc:	40020c00 	.word	0x40020c00

08002fd0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a07      	ldr	r2, [pc, #28]	; (8002ffc <HAL_RTC_MspInit+0x2c>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d105      	bne.n	8002fee <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002fe2:	4b07      	ldr	r3, [pc, #28]	; (8003000 <HAL_RTC_MspInit+0x30>)
 8002fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe6:	4a06      	ldr	r2, [pc, #24]	; (8003000 <HAL_RTC_MspInit+0x30>)
 8002fe8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fec:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	40002800 	.word	0x40002800
 8003000:	40023800 	.word	0x40023800

08003004 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b08a      	sub	sp, #40	; 0x28
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800300c:	f107 0314 	add.w	r3, r7, #20
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	605a      	str	r2, [r3, #4]
 8003016:	609a      	str	r2, [r3, #8]
 8003018:	60da      	str	r2, [r3, #12]
 800301a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a25      	ldr	r2, [pc, #148]	; (80030b8 <HAL_SD_MspInit+0xb4>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d144      	bne.n	80030b0 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003026:	4b25      	ldr	r3, [pc, #148]	; (80030bc <HAL_SD_MspInit+0xb8>)
 8003028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302a:	4a24      	ldr	r2, [pc, #144]	; (80030bc <HAL_SD_MspInit+0xb8>)
 800302c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003030:	6453      	str	r3, [r2, #68]	; 0x44
 8003032:	4b22      	ldr	r3, [pc, #136]	; (80030bc <HAL_SD_MspInit+0xb8>)
 8003034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003036:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800303a:	613b      	str	r3, [r7, #16]
 800303c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800303e:	4b1f      	ldr	r3, [pc, #124]	; (80030bc <HAL_SD_MspInit+0xb8>)
 8003040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003042:	4a1e      	ldr	r2, [pc, #120]	; (80030bc <HAL_SD_MspInit+0xb8>)
 8003044:	f043 0304 	orr.w	r3, r3, #4
 8003048:	6313      	str	r3, [r2, #48]	; 0x30
 800304a:	4b1c      	ldr	r3, [pc, #112]	; (80030bc <HAL_SD_MspInit+0xb8>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	f003 0304 	and.w	r3, r3, #4
 8003052:	60fb      	str	r3, [r7, #12]
 8003054:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003056:	4b19      	ldr	r3, [pc, #100]	; (80030bc <HAL_SD_MspInit+0xb8>)
 8003058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305a:	4a18      	ldr	r2, [pc, #96]	; (80030bc <HAL_SD_MspInit+0xb8>)
 800305c:	f043 0308 	orr.w	r3, r3, #8
 8003060:	6313      	str	r3, [r2, #48]	; 0x30
 8003062:	4b16      	ldr	r3, [pc, #88]	; (80030bc <HAL_SD_MspInit+0xb8>)
 8003064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003066:	f003 0308 	and.w	r3, r3, #8
 800306a:	60bb      	str	r3, [r7, #8]
 800306c:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 800306e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003072:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003074:	2302      	movs	r3, #2
 8003076:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003078:	2300      	movs	r3, #0
 800307a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800307c:	2303      	movs	r3, #3
 800307e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003080:	230c      	movs	r3, #12
 8003082:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003084:	f107 0314 	add.w	r3, r7, #20
 8003088:	4619      	mov	r1, r3
 800308a:	480d      	ldr	r0, [pc, #52]	; (80030c0 <HAL_SD_MspInit+0xbc>)
 800308c:	f002 fcaa 	bl	80059e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8003090:	2304      	movs	r3, #4
 8003092:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003094:	2302      	movs	r3, #2
 8003096:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003098:	2300      	movs	r3, #0
 800309a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800309c:	2303      	movs	r3, #3
 800309e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80030a0:	230c      	movs	r3, #12
 80030a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 80030a4:	f107 0314 	add.w	r3, r7, #20
 80030a8:	4619      	mov	r1, r3
 80030aa:	4806      	ldr	r0, [pc, #24]	; (80030c4 <HAL_SD_MspInit+0xc0>)
 80030ac:	f002 fc9a 	bl	80059e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80030b0:	bf00      	nop
 80030b2:	3728      	adds	r7, #40	; 0x28
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	40012c00 	.word	0x40012c00
 80030bc:	40023800 	.word	0x40023800
 80030c0:	40020800 	.word	0x40020800
 80030c4:	40020c00 	.word	0x40020c00

080030c8 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b08a      	sub	sp, #40	; 0x28
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d0:	f107 0314 	add.w	r3, r7, #20
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]
 80030d8:	605a      	str	r2, [r3, #4]
 80030da:	609a      	str	r2, [r3, #8]
 80030dc:	60da      	str	r2, [r3, #12]
 80030de:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 80030e8:	d127      	bne.n	800313a <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 80030ea:	4b16      	ldr	r3, [pc, #88]	; (8003144 <HAL_SPDIFRX_MspInit+0x7c>)
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	4a15      	ldr	r2, [pc, #84]	; (8003144 <HAL_SPDIFRX_MspInit+0x7c>)
 80030f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030f4:	6413      	str	r3, [r2, #64]	; 0x40
 80030f6:	4b13      	ldr	r3, [pc, #76]	; (8003144 <HAL_SPDIFRX_MspInit+0x7c>)
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030fe:	613b      	str	r3, [r7, #16]
 8003100:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003102:	4b10      	ldr	r3, [pc, #64]	; (8003144 <HAL_SPDIFRX_MspInit+0x7c>)
 8003104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003106:	4a0f      	ldr	r2, [pc, #60]	; (8003144 <HAL_SPDIFRX_MspInit+0x7c>)
 8003108:	f043 0308 	orr.w	r3, r3, #8
 800310c:	6313      	str	r3, [r2, #48]	; 0x30
 800310e:	4b0d      	ldr	r3, [pc, #52]	; (8003144 <HAL_SPDIFRX_MspInit+0x7c>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003112:	f003 0308 	and.w	r3, r3, #8
 8003116:	60fb      	str	r3, [r7, #12]
 8003118:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration    
    PD7     ------> SPDIFRX_IN0 
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800311a:	2380      	movs	r3, #128	; 0x80
 800311c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800311e:	2302      	movs	r3, #2
 8003120:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003122:	2300      	movs	r3, #0
 8003124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003126:	2300      	movs	r3, #0
 8003128:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800312a:	2308      	movs	r3, #8
 800312c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800312e:	f107 0314 	add.w	r3, r7, #20
 8003132:	4619      	mov	r1, r3
 8003134:	4804      	ldr	r0, [pc, #16]	; (8003148 <HAL_SPDIFRX_MspInit+0x80>)
 8003136:	f002 fc55 	bl	80059e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 800313a:	bf00      	nop
 800313c:	3728      	adds	r7, #40	; 0x28
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	40023800 	.word	0x40023800
 8003148:	40020c00 	.word	0x40020c00

0800314c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b08a      	sub	sp, #40	; 0x28
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003154:	f107 0314 	add.w	r3, r7, #20
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	605a      	str	r2, [r3, #4]
 800315e:	609a      	str	r2, [r3, #8]
 8003160:	60da      	str	r2, [r3, #12]
 8003162:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a25      	ldr	r2, [pc, #148]	; (8003200 <HAL_SPI_MspInit+0xb4>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d144      	bne.n	80031f8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800316e:	4b25      	ldr	r3, [pc, #148]	; (8003204 <HAL_SPI_MspInit+0xb8>)
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	4a24      	ldr	r2, [pc, #144]	; (8003204 <HAL_SPI_MspInit+0xb8>)
 8003174:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003178:	6413      	str	r3, [r2, #64]	; 0x40
 800317a:	4b22      	ldr	r3, [pc, #136]	; (8003204 <HAL_SPI_MspInit+0xb8>)
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003182:	613b      	str	r3, [r7, #16]
 8003184:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003186:	4b1f      	ldr	r3, [pc, #124]	; (8003204 <HAL_SPI_MspInit+0xb8>)
 8003188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318a:	4a1e      	ldr	r2, [pc, #120]	; (8003204 <HAL_SPI_MspInit+0xb8>)
 800318c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003190:	6313      	str	r3, [r2, #48]	; 0x30
 8003192:	4b1c      	ldr	r3, [pc, #112]	; (8003204 <HAL_SPI_MspInit+0xb8>)
 8003194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800319a:	60fb      	str	r3, [r7, #12]
 800319c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800319e:	4b19      	ldr	r3, [pc, #100]	; (8003204 <HAL_SPI_MspInit+0xb8>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a2:	4a18      	ldr	r2, [pc, #96]	; (8003204 <HAL_SPI_MspInit+0xb8>)
 80031a4:	f043 0302 	orr.w	r3, r3, #2
 80031a8:	6313      	str	r3, [r2, #48]	; 0x30
 80031aa:	4b16      	ldr	r3, [pc, #88]	; (8003204 <HAL_SPI_MspInit+0xb8>)
 80031ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	60bb      	str	r3, [r7, #8]
 80031b4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80031b6:	2302      	movs	r3, #2
 80031b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ba:	2302      	movs	r3, #2
 80031bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031be:	2300      	movs	r3, #0
 80031c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c2:	2300      	movs	r3, #0
 80031c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80031c6:	2305      	movs	r3, #5
 80031c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80031ca:	f107 0314 	add.w	r3, r7, #20
 80031ce:	4619      	mov	r1, r3
 80031d0:	480d      	ldr	r0, [pc, #52]	; (8003208 <HAL_SPI_MspInit+0xbc>)
 80031d2:	f002 fc07 	bl	80059e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80031d6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80031da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031dc:	2302      	movs	r3, #2
 80031de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e0:	2300      	movs	r3, #0
 80031e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031e4:	2300      	movs	r3, #0
 80031e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80031e8:	2305      	movs	r3, #5
 80031ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031ec:	f107 0314 	add.w	r3, r7, #20
 80031f0:	4619      	mov	r1, r3
 80031f2:	4806      	ldr	r0, [pc, #24]	; (800320c <HAL_SPI_MspInit+0xc0>)
 80031f4:	f002 fbf6 	bl	80059e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80031f8:	bf00      	nop
 80031fa:	3728      	adds	r7, #40	; 0x28
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	40003800 	.word	0x40003800
 8003204:	40023800 	.word	0x40023800
 8003208:	40022000 	.word	0x40022000
 800320c:	40020400 	.word	0x40020400

08003210 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003210:	b480      	push	{r7}
 8003212:	b089      	sub	sp, #36	; 0x24
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a2e      	ldr	r2, [pc, #184]	; (80032d8 <HAL_TIM_Base_MspInit+0xc8>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d10c      	bne.n	800323c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003222:	4b2e      	ldr	r3, [pc, #184]	; (80032dc <HAL_TIM_Base_MspInit+0xcc>)
 8003224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003226:	4a2d      	ldr	r2, [pc, #180]	; (80032dc <HAL_TIM_Base_MspInit+0xcc>)
 8003228:	f043 0301 	orr.w	r3, r3, #1
 800322c:	6453      	str	r3, [r2, #68]	; 0x44
 800322e:	4b2b      	ldr	r3, [pc, #172]	; (80032dc <HAL_TIM_Base_MspInit+0xcc>)
 8003230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	61fb      	str	r3, [r7, #28]
 8003238:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800323a:	e046      	b.n	80032ca <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003244:	d10c      	bne.n	8003260 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003246:	4b25      	ldr	r3, [pc, #148]	; (80032dc <HAL_TIM_Base_MspInit+0xcc>)
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	4a24      	ldr	r2, [pc, #144]	; (80032dc <HAL_TIM_Base_MspInit+0xcc>)
 800324c:	f043 0301 	orr.w	r3, r3, #1
 8003250:	6413      	str	r3, [r2, #64]	; 0x40
 8003252:	4b22      	ldr	r3, [pc, #136]	; (80032dc <HAL_TIM_Base_MspInit+0xcc>)
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	61bb      	str	r3, [r7, #24]
 800325c:	69bb      	ldr	r3, [r7, #24]
}
 800325e:	e034      	b.n	80032ca <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a1e      	ldr	r2, [pc, #120]	; (80032e0 <HAL_TIM_Base_MspInit+0xd0>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d10c      	bne.n	8003284 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800326a:	4b1c      	ldr	r3, [pc, #112]	; (80032dc <HAL_TIM_Base_MspInit+0xcc>)
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	4a1b      	ldr	r2, [pc, #108]	; (80032dc <HAL_TIM_Base_MspInit+0xcc>)
 8003270:	f043 0302 	orr.w	r3, r3, #2
 8003274:	6413      	str	r3, [r2, #64]	; 0x40
 8003276:	4b19      	ldr	r3, [pc, #100]	; (80032dc <HAL_TIM_Base_MspInit+0xcc>)
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	617b      	str	r3, [r7, #20]
 8003280:	697b      	ldr	r3, [r7, #20]
}
 8003282:	e022      	b.n	80032ca <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a16      	ldr	r2, [pc, #88]	; (80032e4 <HAL_TIM_Base_MspInit+0xd4>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d10c      	bne.n	80032a8 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800328e:	4b13      	ldr	r3, [pc, #76]	; (80032dc <HAL_TIM_Base_MspInit+0xcc>)
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	4a12      	ldr	r2, [pc, #72]	; (80032dc <HAL_TIM_Base_MspInit+0xcc>)
 8003294:	f043 0308 	orr.w	r3, r3, #8
 8003298:	6413      	str	r3, [r2, #64]	; 0x40
 800329a:	4b10      	ldr	r3, [pc, #64]	; (80032dc <HAL_TIM_Base_MspInit+0xcc>)
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	f003 0308 	and.w	r3, r3, #8
 80032a2:	613b      	str	r3, [r7, #16]
 80032a4:	693b      	ldr	r3, [r7, #16]
}
 80032a6:	e010      	b.n	80032ca <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a0e      	ldr	r2, [pc, #56]	; (80032e8 <HAL_TIM_Base_MspInit+0xd8>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d10b      	bne.n	80032ca <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80032b2:	4b0a      	ldr	r3, [pc, #40]	; (80032dc <HAL_TIM_Base_MspInit+0xcc>)
 80032b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b6:	4a09      	ldr	r2, [pc, #36]	; (80032dc <HAL_TIM_Base_MspInit+0xcc>)
 80032b8:	f043 0302 	orr.w	r3, r3, #2
 80032bc:	6453      	str	r3, [r2, #68]	; 0x44
 80032be:	4b07      	ldr	r3, [pc, #28]	; (80032dc <HAL_TIM_Base_MspInit+0xcc>)
 80032c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	68fb      	ldr	r3, [r7, #12]
}
 80032ca:	bf00      	nop
 80032cc:	3724      	adds	r7, #36	; 0x24
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	40010000 	.word	0x40010000
 80032dc:	40023800 	.word	0x40023800
 80032e0:	40000400 	.word	0x40000400
 80032e4:	40000c00 	.word	0x40000c00
 80032e8:	40010400 	.word	0x40010400

080032ec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a0a      	ldr	r2, [pc, #40]	; (8003324 <HAL_TIM_PWM_MspInit+0x38>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d10b      	bne.n	8003316 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80032fe:	4b0a      	ldr	r3, [pc, #40]	; (8003328 <HAL_TIM_PWM_MspInit+0x3c>)
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	4a09      	ldr	r2, [pc, #36]	; (8003328 <HAL_TIM_PWM_MspInit+0x3c>)
 8003304:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003308:	6413      	str	r3, [r2, #64]	; 0x40
 800330a:	4b07      	ldr	r3, [pc, #28]	; (8003328 <HAL_TIM_PWM_MspInit+0x3c>)
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003312:	60fb      	str	r3, [r7, #12]
 8003314:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8003316:	bf00      	nop
 8003318:	3714      	adds	r7, #20
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	40001800 	.word	0x40001800
 8003328:	40023800 	.word	0x40023800

0800332c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b08c      	sub	sp, #48	; 0x30
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003334:	f107 031c 	add.w	r3, r7, #28
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	605a      	str	r2, [r3, #4]
 800333e:	609a      	str	r2, [r3, #8]
 8003340:	60da      	str	r2, [r3, #12]
 8003342:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a56      	ldr	r2, [pc, #344]	; (80034a4 <HAL_TIM_MspPostInit+0x178>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d11d      	bne.n	800338a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800334e:	4b56      	ldr	r3, [pc, #344]	; (80034a8 <HAL_TIM_MspPostInit+0x17c>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	4a55      	ldr	r2, [pc, #340]	; (80034a8 <HAL_TIM_MspPostInit+0x17c>)
 8003354:	f043 0301 	orr.w	r3, r3, #1
 8003358:	6313      	str	r3, [r2, #48]	; 0x30
 800335a:	4b53      	ldr	r3, [pc, #332]	; (80034a8 <HAL_TIM_MspPostInit+0x17c>)
 800335c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	61bb      	str	r3, [r7, #24]
 8003364:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8003366:	f44f 7380 	mov.w	r3, #256	; 0x100
 800336a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800336c:	2302      	movs	r3, #2
 800336e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003370:	2300      	movs	r3, #0
 8003372:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003374:	2300      	movs	r3, #0
 8003376:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003378:	2301      	movs	r3, #1
 800337a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800337c:	f107 031c 	add.w	r3, r7, #28
 8003380:	4619      	mov	r1, r3
 8003382:	484a      	ldr	r0, [pc, #296]	; (80034ac <HAL_TIM_MspPostInit+0x180>)
 8003384:	f002 fb2e 	bl	80059e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003388:	e087      	b.n	800349a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003392:	d11d      	bne.n	80033d0 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003394:	4b44      	ldr	r3, [pc, #272]	; (80034a8 <HAL_TIM_MspPostInit+0x17c>)
 8003396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003398:	4a43      	ldr	r2, [pc, #268]	; (80034a8 <HAL_TIM_MspPostInit+0x17c>)
 800339a:	f043 0301 	orr.w	r3, r3, #1
 800339e:	6313      	str	r3, [r2, #48]	; 0x30
 80033a0:	4b41      	ldr	r3, [pc, #260]	; (80034a8 <HAL_TIM_MspPostInit+0x17c>)
 80033a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	617b      	str	r3, [r7, #20]
 80033aa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80033ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b2:	2302      	movs	r3, #2
 80033b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b6:	2300      	movs	r3, #0
 80033b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ba:	2300      	movs	r3, #0
 80033bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80033be:	2301      	movs	r3, #1
 80033c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80033c2:	f107 031c 	add.w	r3, r7, #28
 80033c6:	4619      	mov	r1, r3
 80033c8:	4838      	ldr	r0, [pc, #224]	; (80034ac <HAL_TIM_MspPostInit+0x180>)
 80033ca:	f002 fb0b 	bl	80059e4 <HAL_GPIO_Init>
}
 80033ce:	e064      	b.n	800349a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a36      	ldr	r2, [pc, #216]	; (80034b0 <HAL_TIM_MspPostInit+0x184>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d11c      	bne.n	8003414 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033da:	4b33      	ldr	r3, [pc, #204]	; (80034a8 <HAL_TIM_MspPostInit+0x17c>)
 80033dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033de:	4a32      	ldr	r2, [pc, #200]	; (80034a8 <HAL_TIM_MspPostInit+0x17c>)
 80033e0:	f043 0302 	orr.w	r3, r3, #2
 80033e4:	6313      	str	r3, [r2, #48]	; 0x30
 80033e6:	4b30      	ldr	r3, [pc, #192]	; (80034a8 <HAL_TIM_MspPostInit+0x17c>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	613b      	str	r3, [r7, #16]
 80033f0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80033f2:	2310      	movs	r3, #16
 80033f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f6:	2302      	movs	r3, #2
 80033f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fa:	2300      	movs	r3, #0
 80033fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033fe:	2300      	movs	r3, #0
 8003400:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003402:	2302      	movs	r3, #2
 8003404:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8003406:	f107 031c 	add.w	r3, r7, #28
 800340a:	4619      	mov	r1, r3
 800340c:	4829      	ldr	r0, [pc, #164]	; (80034b4 <HAL_TIM_MspPostInit+0x188>)
 800340e:	f002 fae9 	bl	80059e4 <HAL_GPIO_Init>
}
 8003412:	e042      	b.n	800349a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a27      	ldr	r2, [pc, #156]	; (80034b8 <HAL_TIM_MspPostInit+0x18c>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d11c      	bne.n	8003458 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800341e:	4b22      	ldr	r3, [pc, #136]	; (80034a8 <HAL_TIM_MspPostInit+0x17c>)
 8003420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003422:	4a21      	ldr	r2, [pc, #132]	; (80034a8 <HAL_TIM_MspPostInit+0x17c>)
 8003424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003428:	6313      	str	r3, [r2, #48]	; 0x30
 800342a:	4b1f      	ldr	r3, [pc, #124]	; (80034a8 <HAL_TIM_MspPostInit+0x17c>)
 800342c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003432:	60fb      	str	r3, [r7, #12]
 8003434:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8003436:	2301      	movs	r3, #1
 8003438:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800343a:	2302      	movs	r3, #2
 800343c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343e:	2300      	movs	r3, #0
 8003440:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003442:	2300      	movs	r3, #0
 8003444:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003446:	2302      	movs	r3, #2
 8003448:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800344a:	f107 031c 	add.w	r3, r7, #28
 800344e:	4619      	mov	r1, r3
 8003450:	481a      	ldr	r0, [pc, #104]	; (80034bc <HAL_TIM_MspPostInit+0x190>)
 8003452:	f002 fac7 	bl	80059e4 <HAL_GPIO_Init>
}
 8003456:	e020      	b.n	800349a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a18      	ldr	r2, [pc, #96]	; (80034c0 <HAL_TIM_MspPostInit+0x194>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d11b      	bne.n	800349a <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003462:	4b11      	ldr	r3, [pc, #68]	; (80034a8 <HAL_TIM_MspPostInit+0x17c>)
 8003464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003466:	4a10      	ldr	r2, [pc, #64]	; (80034a8 <HAL_TIM_MspPostInit+0x17c>)
 8003468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800346c:	6313      	str	r3, [r2, #48]	; 0x30
 800346e:	4b0e      	ldr	r3, [pc, #56]	; (80034a8 <HAL_TIM_MspPostInit+0x17c>)
 8003470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003476:	60bb      	str	r3, [r7, #8]
 8003478:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800347a:	2340      	movs	r3, #64	; 0x40
 800347c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800347e:	2302      	movs	r3, #2
 8003480:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003482:	2300      	movs	r3, #0
 8003484:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003486:	2300      	movs	r3, #0
 8003488:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800348a:	2309      	movs	r3, #9
 800348c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800348e:	f107 031c 	add.w	r3, r7, #28
 8003492:	4619      	mov	r1, r3
 8003494:	480b      	ldr	r0, [pc, #44]	; (80034c4 <HAL_TIM_MspPostInit+0x198>)
 8003496:	f002 faa5 	bl	80059e4 <HAL_GPIO_Init>
}
 800349a:	bf00      	nop
 800349c:	3730      	adds	r7, #48	; 0x30
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	40010000 	.word	0x40010000
 80034a8:	40023800 	.word	0x40023800
 80034ac:	40020000 	.word	0x40020000
 80034b0:	40000400 	.word	0x40000400
 80034b4:	40020400 	.word	0x40020400
 80034b8:	40000c00 	.word	0x40000c00
 80034bc:	40022000 	.word	0x40022000
 80034c0:	40001800 	.word	0x40001800
 80034c4:	40021c00 	.word	0x40021c00

080034c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b08c      	sub	sp, #48	; 0x30
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034d0:	f107 031c 	add.w	r3, r7, #28
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]
 80034d8:	605a      	str	r2, [r3, #4]
 80034da:	609a      	str	r2, [r3, #8]
 80034dc:	60da      	str	r2, [r3, #12]
 80034de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a3c      	ldr	r2, [pc, #240]	; (80035d8 <HAL_UART_MspInit+0x110>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d145      	bne.n	8003576 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80034ea:	4b3c      	ldr	r3, [pc, #240]	; (80035dc <HAL_UART_MspInit+0x114>)
 80034ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ee:	4a3b      	ldr	r2, [pc, #236]	; (80035dc <HAL_UART_MspInit+0x114>)
 80034f0:	f043 0310 	orr.w	r3, r3, #16
 80034f4:	6453      	str	r3, [r2, #68]	; 0x44
 80034f6:	4b39      	ldr	r3, [pc, #228]	; (80035dc <HAL_UART_MspInit+0x114>)
 80034f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fa:	f003 0310 	and.w	r3, r3, #16
 80034fe:	61bb      	str	r3, [r7, #24]
 8003500:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003502:	4b36      	ldr	r3, [pc, #216]	; (80035dc <HAL_UART_MspInit+0x114>)
 8003504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003506:	4a35      	ldr	r2, [pc, #212]	; (80035dc <HAL_UART_MspInit+0x114>)
 8003508:	f043 0302 	orr.w	r3, r3, #2
 800350c:	6313      	str	r3, [r2, #48]	; 0x30
 800350e:	4b33      	ldr	r3, [pc, #204]	; (80035dc <HAL_UART_MspInit+0x114>)
 8003510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	617b      	str	r3, [r7, #20]
 8003518:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800351a:	4b30      	ldr	r3, [pc, #192]	; (80035dc <HAL_UART_MspInit+0x114>)
 800351c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351e:	4a2f      	ldr	r2, [pc, #188]	; (80035dc <HAL_UART_MspInit+0x114>)
 8003520:	f043 0301 	orr.w	r3, r3, #1
 8003524:	6313      	str	r3, [r2, #48]	; 0x30
 8003526:	4b2d      	ldr	r3, [pc, #180]	; (80035dc <HAL_UART_MspInit+0x114>)
 8003528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	613b      	str	r3, [r7, #16]
 8003530:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003532:	2380      	movs	r3, #128	; 0x80
 8003534:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003536:	2302      	movs	r3, #2
 8003538:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800353a:	2300      	movs	r3, #0
 800353c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800353e:	2300      	movs	r3, #0
 8003540:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003542:	2307      	movs	r3, #7
 8003544:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003546:	f107 031c 	add.w	r3, r7, #28
 800354a:	4619      	mov	r1, r3
 800354c:	4824      	ldr	r0, [pc, #144]	; (80035e0 <HAL_UART_MspInit+0x118>)
 800354e:	f002 fa49 	bl	80059e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8003552:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003556:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003558:	2302      	movs	r3, #2
 800355a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355c:	2300      	movs	r3, #0
 800355e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003560:	2300      	movs	r3, #0
 8003562:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003564:	2307      	movs	r3, #7
 8003566:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003568:	f107 031c 	add.w	r3, r7, #28
 800356c:	4619      	mov	r1, r3
 800356e:	481d      	ldr	r0, [pc, #116]	; (80035e4 <HAL_UART_MspInit+0x11c>)
 8003570:	f002 fa38 	bl	80059e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003574:	e02c      	b.n	80035d0 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a1b      	ldr	r2, [pc, #108]	; (80035e8 <HAL_UART_MspInit+0x120>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d127      	bne.n	80035d0 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003580:	4b16      	ldr	r3, [pc, #88]	; (80035dc <HAL_UART_MspInit+0x114>)
 8003582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003584:	4a15      	ldr	r2, [pc, #84]	; (80035dc <HAL_UART_MspInit+0x114>)
 8003586:	f043 0320 	orr.w	r3, r3, #32
 800358a:	6453      	str	r3, [r2, #68]	; 0x44
 800358c:	4b13      	ldr	r3, [pc, #76]	; (80035dc <HAL_UART_MspInit+0x114>)
 800358e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003590:	f003 0320 	and.w	r3, r3, #32
 8003594:	60fb      	str	r3, [r7, #12]
 8003596:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003598:	4b10      	ldr	r3, [pc, #64]	; (80035dc <HAL_UART_MspInit+0x114>)
 800359a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359c:	4a0f      	ldr	r2, [pc, #60]	; (80035dc <HAL_UART_MspInit+0x114>)
 800359e:	f043 0304 	orr.w	r3, r3, #4
 80035a2:	6313      	str	r3, [r2, #48]	; 0x30
 80035a4:	4b0d      	ldr	r3, [pc, #52]	; (80035dc <HAL_UART_MspInit+0x114>)
 80035a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	60bb      	str	r3, [r7, #8]
 80035ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80035b0:	23c0      	movs	r3, #192	; 0xc0
 80035b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035b4:	2302      	movs	r3, #2
 80035b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b8:	2300      	movs	r3, #0
 80035ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035bc:	2303      	movs	r3, #3
 80035be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80035c0:	2308      	movs	r3, #8
 80035c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035c4:	f107 031c 	add.w	r3, r7, #28
 80035c8:	4619      	mov	r1, r3
 80035ca:	4808      	ldr	r0, [pc, #32]	; (80035ec <HAL_UART_MspInit+0x124>)
 80035cc:	f002 fa0a 	bl	80059e4 <HAL_GPIO_Init>
}
 80035d0:	bf00      	nop
 80035d2:	3730      	adds	r7, #48	; 0x30
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	40011000 	.word	0x40011000
 80035dc:	40023800 	.word	0x40023800
 80035e0:	40020400 	.word	0x40020400
 80035e4:	40020000 	.word	0x40020000
 80035e8:	40011400 	.word	0x40011400
 80035ec:	40020800 	.word	0x40020800

080035f0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80035f6:	1d3b      	adds	r3, r7, #4
 80035f8:	2200      	movs	r2, #0
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	605a      	str	r2, [r3, #4]
 80035fe:	609a      	str	r2, [r3, #8]
 8003600:	60da      	str	r2, [r3, #12]
 8003602:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003604:	4b3a      	ldr	r3, [pc, #232]	; (80036f0 <HAL_FMC_MspInit+0x100>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d16d      	bne.n	80036e8 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 800360c:	4b38      	ldr	r3, [pc, #224]	; (80036f0 <HAL_FMC_MspInit+0x100>)
 800360e:	2201      	movs	r2, #1
 8003610:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003612:	4b38      	ldr	r3, [pc, #224]	; (80036f4 <HAL_FMC_MspInit+0x104>)
 8003614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003616:	4a37      	ldr	r2, [pc, #220]	; (80036f4 <HAL_FMC_MspInit+0x104>)
 8003618:	f043 0301 	orr.w	r3, r3, #1
 800361c:	6393      	str	r3, [r2, #56]	; 0x38
 800361e:	4b35      	ldr	r3, [pc, #212]	; (80036f4 <HAL_FMC_MspInit+0x104>)
 8003620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	603b      	str	r3, [r7, #0]
 8003628:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 800362a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800362e:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003630:	2302      	movs	r3, #2
 8003632:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003634:	2300      	movs	r3, #0
 8003636:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003638:	2303      	movs	r3, #3
 800363a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800363c:	230c      	movs	r3, #12
 800363e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003640:	1d3b      	adds	r3, r7, #4
 8003642:	4619      	mov	r1, r3
 8003644:	482c      	ldr	r0, [pc, #176]	; (80036f8 <HAL_FMC_MspInit+0x108>)
 8003646:	f002 f9cd 	bl	80059e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 800364a:	f248 1333 	movw	r3, #33075	; 0x8133
 800364e:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003650:	2302      	movs	r3, #2
 8003652:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003654:	2300      	movs	r3, #0
 8003656:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003658:	2303      	movs	r3, #3
 800365a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800365c:	230c      	movs	r3, #12
 800365e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003660:	1d3b      	adds	r3, r7, #4
 8003662:	4619      	mov	r1, r3
 8003664:	4825      	ldr	r0, [pc, #148]	; (80036fc <HAL_FMC_MspInit+0x10c>)
 8003666:	f002 f9bd 	bl	80059e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 800366a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800366e:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003670:	2302      	movs	r3, #2
 8003672:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003674:	2300      	movs	r3, #0
 8003676:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003678:	2303      	movs	r3, #3
 800367a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800367c:	230c      	movs	r3, #12
 800367e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003680:	1d3b      	adds	r3, r7, #4
 8003682:	4619      	mov	r1, r3
 8003684:	481e      	ldr	r0, [pc, #120]	; (8003700 <HAL_FMC_MspInit+0x110>)
 8003686:	f002 f9ad 	bl	80059e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 800368a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800368e:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003690:	2302      	movs	r3, #2
 8003692:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003694:	2300      	movs	r3, #0
 8003696:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003698:	2303      	movs	r3, #3
 800369a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800369c:	230c      	movs	r3, #12
 800369e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80036a0:	1d3b      	adds	r3, r7, #4
 80036a2:	4619      	mov	r1, r3
 80036a4:	4817      	ldr	r0, [pc, #92]	; (8003704 <HAL_FMC_MspInit+0x114>)
 80036a6:	f002 f99d 	bl	80059e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80036aa:	2328      	movs	r3, #40	; 0x28
 80036ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ae:	2302      	movs	r3, #2
 80036b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b2:	2300      	movs	r3, #0
 80036b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036b6:	2303      	movs	r3, #3
 80036b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80036ba:	230c      	movs	r3, #12
 80036bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80036be:	1d3b      	adds	r3, r7, #4
 80036c0:	4619      	mov	r1, r3
 80036c2:	4811      	ldr	r0, [pc, #68]	; (8003708 <HAL_FMC_MspInit+0x118>)
 80036c4:	f002 f98e 	bl	80059e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80036c8:	2308      	movs	r3, #8
 80036ca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036cc:	2302      	movs	r3, #2
 80036ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d0:	2300      	movs	r3, #0
 80036d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036d4:	2303      	movs	r3, #3
 80036d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80036d8:	230c      	movs	r3, #12
 80036da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80036dc:	1d3b      	adds	r3, r7, #4
 80036de:	4619      	mov	r1, r3
 80036e0:	480a      	ldr	r0, [pc, #40]	; (800370c <HAL_FMC_MspInit+0x11c>)
 80036e2:	f002 f97f 	bl	80059e4 <HAL_GPIO_Init>
 80036e6:	e000      	b.n	80036ea <HAL_FMC_MspInit+0xfa>
    return;
 80036e8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80036ea:	3718      	adds	r7, #24
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	20000408 	.word	0x20000408
 80036f4:	40023800 	.word	0x40023800
 80036f8:	40021000 	.word	0x40021000
 80036fc:	40021800 	.word	0x40021800
 8003700:	40020c00 	.word	0x40020c00
 8003704:	40021400 	.word	0x40021400
 8003708:	40021c00 	.word	0x40021c00
 800370c:	40020800 	.word	0x40020800

08003710 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003718:	f7ff ff6a 	bl	80035f0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800371c:	bf00      	nop
 800371e:	3708      	adds	r7, #8
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b08a      	sub	sp, #40	; 0x28
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a2b      	ldr	r2, [pc, #172]	; (80037e0 <HAL_SAI_MspInit+0xbc>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d124      	bne.n	8003780 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8003736:	4b2b      	ldr	r3, [pc, #172]	; (80037e4 <HAL_SAI_MspInit+0xc0>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10b      	bne.n	8003756 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800373e:	4b2a      	ldr	r3, [pc, #168]	; (80037e8 <HAL_SAI_MspInit+0xc4>)
 8003740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003742:	4a29      	ldr	r2, [pc, #164]	; (80037e8 <HAL_SAI_MspInit+0xc4>)
 8003744:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003748:	6453      	str	r3, [r2, #68]	; 0x44
 800374a:	4b27      	ldr	r3, [pc, #156]	; (80037e8 <HAL_SAI_MspInit+0xc4>)
 800374c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003752:	613b      	str	r3, [r7, #16]
 8003754:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8003756:	4b23      	ldr	r3, [pc, #140]	; (80037e4 <HAL_SAI_MspInit+0xc0>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	3301      	adds	r3, #1
 800375c:	4a21      	ldr	r2, [pc, #132]	; (80037e4 <HAL_SAI_MspInit+0xc0>)
 800375e:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8003760:	23f0      	movs	r3, #240	; 0xf0
 8003762:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003764:	2302      	movs	r3, #2
 8003766:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003768:	2300      	movs	r3, #0
 800376a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800376c:	2300      	movs	r3, #0
 800376e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003770:	230a      	movs	r3, #10
 8003772:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003774:	f107 0314 	add.w	r3, r7, #20
 8003778:	4619      	mov	r1, r3
 800377a:	481c      	ldr	r0, [pc, #112]	; (80037ec <HAL_SAI_MspInit+0xc8>)
 800377c:	f002 f932 	bl	80059e4 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a1a      	ldr	r2, [pc, #104]	; (80037f0 <HAL_SAI_MspInit+0xcc>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d125      	bne.n	80037d6 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 800378a:	4b16      	ldr	r3, [pc, #88]	; (80037e4 <HAL_SAI_MspInit+0xc0>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10b      	bne.n	80037aa <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003792:	4b15      	ldr	r3, [pc, #84]	; (80037e8 <HAL_SAI_MspInit+0xc4>)
 8003794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003796:	4a14      	ldr	r2, [pc, #80]	; (80037e8 <HAL_SAI_MspInit+0xc4>)
 8003798:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800379c:	6453      	str	r3, [r2, #68]	; 0x44
 800379e:	4b12      	ldr	r3, [pc, #72]	; (80037e8 <HAL_SAI_MspInit+0xc4>)
 80037a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037a6:	60fb      	str	r3, [r7, #12]
 80037a8:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 80037aa:	4b0e      	ldr	r3, [pc, #56]	; (80037e4 <HAL_SAI_MspInit+0xc0>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	3301      	adds	r3, #1
 80037b0:	4a0c      	ldr	r2, [pc, #48]	; (80037e4 <HAL_SAI_MspInit+0xc0>)
 80037b2:	6013      	str	r3, [r2, #0]
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80037b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ba:	2302      	movs	r3, #2
 80037bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037be:	2300      	movs	r3, #0
 80037c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037c2:	2300      	movs	r3, #0
 80037c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80037c6:	230a      	movs	r3, #10
 80037c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80037ca:	f107 0314 	add.w	r3, r7, #20
 80037ce:	4619      	mov	r1, r3
 80037d0:	4808      	ldr	r0, [pc, #32]	; (80037f4 <HAL_SAI_MspInit+0xd0>)
 80037d2:	f002 f907 	bl	80059e4 <HAL_GPIO_Init>

    }
}
 80037d6:	bf00      	nop
 80037d8:	3728      	adds	r7, #40	; 0x28
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	40015c04 	.word	0x40015c04
 80037e4:	2000040c 	.word	0x2000040c
 80037e8:	40023800 	.word	0x40023800
 80037ec:	40022000 	.word	0x40022000
 80037f0:	40015c24 	.word	0x40015c24
 80037f4:	40021800 	.word	0x40021800

080037f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b08c      	sub	sp, #48	; 0x30
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003800:	2300      	movs	r3, #0
 8003802:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003804:	2300      	movs	r3, #0
 8003806:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8003808:	2200      	movs	r2, #0
 800380a:	6879      	ldr	r1, [r7, #4]
 800380c:	2036      	movs	r0, #54	; 0x36
 800380e:	f001 fabb 	bl	8004d88 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8003812:	2036      	movs	r0, #54	; 0x36
 8003814:	f001 fad4 	bl	8004dc0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003818:	4b1f      	ldr	r3, [pc, #124]	; (8003898 <HAL_InitTick+0xa0>)
 800381a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381c:	4a1e      	ldr	r2, [pc, #120]	; (8003898 <HAL_InitTick+0xa0>)
 800381e:	f043 0310 	orr.w	r3, r3, #16
 8003822:	6413      	str	r3, [r2, #64]	; 0x40
 8003824:	4b1c      	ldr	r3, [pc, #112]	; (8003898 <HAL_InitTick+0xa0>)
 8003826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003828:	f003 0310 	and.w	r3, r3, #16
 800382c:	60fb      	str	r3, [r7, #12]
 800382e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003830:	f107 0210 	add.w	r2, r7, #16
 8003834:	f107 0314 	add.w	r3, r7, #20
 8003838:	4611      	mov	r1, r2
 800383a:	4618      	mov	r0, r3
 800383c:	f004 f90a 	bl	8007a54 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003840:	f004 f8e0 	bl	8007a04 <HAL_RCC_GetPCLK1Freq>
 8003844:	4603      	mov	r3, r0
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800384a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800384c:	4a13      	ldr	r2, [pc, #76]	; (800389c <HAL_InitTick+0xa4>)
 800384e:	fba2 2303 	umull	r2, r3, r2, r3
 8003852:	0c9b      	lsrs	r3, r3, #18
 8003854:	3b01      	subs	r3, #1
 8003856:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003858:	4b11      	ldr	r3, [pc, #68]	; (80038a0 <HAL_InitTick+0xa8>)
 800385a:	4a12      	ldr	r2, [pc, #72]	; (80038a4 <HAL_InitTick+0xac>)
 800385c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800385e:	4b10      	ldr	r3, [pc, #64]	; (80038a0 <HAL_InitTick+0xa8>)
 8003860:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003864:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003866:	4a0e      	ldr	r2, [pc, #56]	; (80038a0 <HAL_InitTick+0xa8>)
 8003868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800386c:	4b0c      	ldr	r3, [pc, #48]	; (80038a0 <HAL_InitTick+0xa8>)
 800386e:	2200      	movs	r2, #0
 8003870:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003872:	4b0b      	ldr	r3, [pc, #44]	; (80038a0 <HAL_InitTick+0xa8>)
 8003874:	2200      	movs	r2, #0
 8003876:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003878:	4809      	ldr	r0, [pc, #36]	; (80038a0 <HAL_InitTick+0xa8>)
 800387a:	f006 fd83 	bl	800a384 <HAL_TIM_Base_Init>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d104      	bne.n	800388e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003884:	4806      	ldr	r0, [pc, #24]	; (80038a0 <HAL_InitTick+0xa8>)
 8003886:	f006 fda9 	bl	800a3dc <HAL_TIM_Base_Start_IT>
 800388a:	4603      	mov	r3, r0
 800388c:	e000      	b.n	8003890 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
}
 8003890:	4618      	mov	r0, r3
 8003892:	3730      	adds	r7, #48	; 0x30
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	40023800 	.word	0x40023800
 800389c:	431bde83 	.word	0x431bde83
 80038a0:	2000c978 	.word	0x2000c978
 80038a4:	40001000 	.word	0x40001000

080038a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80038ac:	bf00      	nop
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr

080038b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038b6:	b480      	push	{r7}
 80038b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038ba:	e7fe      	b.n	80038ba <HardFault_Handler+0x4>

080038bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038bc:	b480      	push	{r7}
 80038be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038c0:	e7fe      	b.n	80038c0 <MemManage_Handler+0x4>

080038c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038c2:	b480      	push	{r7}
 80038c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038c6:	e7fe      	b.n	80038c6 <BusFault_Handler+0x4>

080038c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038c8:	b480      	push	{r7}
 80038ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038cc:	e7fe      	b.n	80038cc <UsageFault_Handler+0x4>

080038ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038ce:	b480      	push	{r7}
 80038d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038d2:	bf00      	nop
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80038e0:	4802      	ldr	r0, [pc, #8]	; (80038ec <CAN1_RX0_IRQHandler+0x10>)
 80038e2:	f000 ff4d 	bl	8004780 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80038e6:	bf00      	nop
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	2000c8cc 	.word	0x2000c8cc

080038f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80038f4:	4802      	ldr	r0, [pc, #8]	; (8003900 <TIM6_DAC_IRQHandler+0x10>)
 80038f6:	f006 fdc6 	bl	800a486 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80038fa:	bf00      	nop
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	2000c978 	.word	0x2000c978

08003904 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003908:	4802      	ldr	r0, [pc, #8]	; (8003914 <LTDC_IRQHandler+0x10>)
 800390a:	f003 f843 	bl	8006994 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800390e:	bf00      	nop
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	2000c540 	.word	0x2000c540

08003918 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800391c:	4802      	ldr	r0, [pc, #8]	; (8003928 <DMA2D_IRQHandler+0x10>)
 800391e:	f001 fe22 	bl	8005566 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003922:	bf00      	nop
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	2000c74c 	.word	0x2000c74c

0800392c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
	return 1;
 8003930:	2301      	movs	r3, #1
}
 8003932:	4618      	mov	r0, r3
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <_kill>:

int _kill(int pid, int sig)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003946:	f026 ff4d 	bl	802a7e4 <__errno>
 800394a:	4602      	mov	r2, r0
 800394c:	2316      	movs	r3, #22
 800394e:	6013      	str	r3, [r2, #0]
	return -1;
 8003950:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003954:	4618      	mov	r0, r3
 8003956:	3708      	adds	r7, #8
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <_exit>:

void _exit (int status)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003964:	f04f 31ff 	mov.w	r1, #4294967295
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f7ff ffe7 	bl	800393c <_kill>
	while (1) {}		/* Make sure we hang here */
 800396e:	e7fe      	b.n	800396e <_exit+0x12>

08003970 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800397c:	2300      	movs	r3, #0
 800397e:	617b      	str	r3, [r7, #20]
 8003980:	e00a      	b.n	8003998 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003982:	f3af 8000 	nop.w
 8003986:	4601      	mov	r1, r0
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	1c5a      	adds	r2, r3, #1
 800398c:	60ba      	str	r2, [r7, #8]
 800398e:	b2ca      	uxtb	r2, r1
 8003990:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	3301      	adds	r3, #1
 8003996:	617b      	str	r3, [r7, #20]
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	429a      	cmp	r2, r3
 800399e:	dbf0      	blt.n	8003982 <_read+0x12>
	}

return len;
 80039a0:	687b      	ldr	r3, [r7, #4]
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3718      	adds	r7, #24
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b086      	sub	sp, #24
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	60f8      	str	r0, [r7, #12]
 80039b2:	60b9      	str	r1, [r7, #8]
 80039b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039b6:	2300      	movs	r3, #0
 80039b8:	617b      	str	r3, [r7, #20]
 80039ba:	e009      	b.n	80039d0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	1c5a      	adds	r2, r3, #1
 80039c0:	60ba      	str	r2, [r7, #8]
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	3301      	adds	r3, #1
 80039ce:	617b      	str	r3, [r7, #20]
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	dbf1      	blt.n	80039bc <_write+0x12>
	}
	return len;
 80039d8:	687b      	ldr	r3, [r7, #4]
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3718      	adds	r7, #24
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <_close>:

int _close(int file)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b083      	sub	sp, #12
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
	return -1;
 80039ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr

080039fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039fa:	b480      	push	{r7}
 80039fc:	b083      	sub	sp, #12
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
 8003a02:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a0a:	605a      	str	r2, [r3, #4]
	return 0;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr

08003a1a <_isatty>:

int _isatty(int file)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b083      	sub	sp, #12
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
	return 1;
 8003a22:	2301      	movs	r3, #1
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
	return 0;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3714      	adds	r7, #20
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
	...

08003a4c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003a54:	4b11      	ldr	r3, [pc, #68]	; (8003a9c <_sbrk+0x50>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d102      	bne.n	8003a62 <_sbrk+0x16>
		heap_end = &end;
 8003a5c:	4b0f      	ldr	r3, [pc, #60]	; (8003a9c <_sbrk+0x50>)
 8003a5e:	4a10      	ldr	r2, [pc, #64]	; (8003aa0 <_sbrk+0x54>)
 8003a60:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003a62:	4b0e      	ldr	r3, [pc, #56]	; (8003a9c <_sbrk+0x50>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003a68:	4b0c      	ldr	r3, [pc, #48]	; (8003a9c <_sbrk+0x50>)
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4413      	add	r3, r2
 8003a70:	466a      	mov	r2, sp
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d907      	bls.n	8003a86 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003a76:	f026 feb5 	bl	802a7e4 <__errno>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	230c      	movs	r3, #12
 8003a7e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003a80:	f04f 33ff 	mov.w	r3, #4294967295
 8003a84:	e006      	b.n	8003a94 <_sbrk+0x48>
	}

	heap_end += incr;
 8003a86:	4b05      	ldr	r3, [pc, #20]	; (8003a9c <_sbrk+0x50>)
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	4a03      	ldr	r2, [pc, #12]	; (8003a9c <_sbrk+0x50>)
 8003a90:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003a92:	68fb      	ldr	r3, [r7, #12]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3710      	adds	r7, #16
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	20000410 	.word	0x20000410
 8003aa0:	2000ce30 	.word	0x2000ce30

08003aa4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003aa8:	4b08      	ldr	r3, [pc, #32]	; (8003acc <SystemInit+0x28>)
 8003aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aae:	4a07      	ldr	r2, [pc, #28]	; (8003acc <SystemInit+0x28>)
 8003ab0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ab4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003ab8:	4b04      	ldr	r3, [pc, #16]	; (8003acc <SystemInit+0x28>)
 8003aba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003abe:	609a      	str	r2, [r3, #8]
#endif
}
 8003ac0:	bf00      	nop
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	e000ed00 	.word	0xe000ed00

08003ad0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003ad0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b08 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003ad4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003ad6:	e003      	b.n	8003ae0 <LoopCopyDataInit>

08003ad8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003ad8:	4b0c      	ldr	r3, [pc, #48]	; (8003b0c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003ada:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003adc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003ade:	3104      	adds	r1, #4

08003ae0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003ae0:	480b      	ldr	r0, [pc, #44]	; (8003b10 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003ae2:	4b0c      	ldr	r3, [pc, #48]	; (8003b14 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003ae4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003ae6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003ae8:	d3f6      	bcc.n	8003ad8 <CopyDataInit>
  ldr  r2, =_sbss
 8003aea:	4a0b      	ldr	r2, [pc, #44]	; (8003b18 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003aec:	e002      	b.n	8003af4 <LoopFillZerobss>

08003aee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003aee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003af0:	f842 3b04 	str.w	r3, [r2], #4

08003af4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003af4:	4b09      	ldr	r3, [pc, #36]	; (8003b1c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003af6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003af8:	d3f9      	bcc.n	8003aee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003afa:	f7ff ffd3 	bl	8003aa4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003afe:	f026 fe89 	bl	802a814 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b02:	f7fd fa81 	bl	8001008 <main>
  bx  lr    
 8003b06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003b08:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8003b0c:	0806a948 	.word	0x0806a948
  ldr  r0, =_sdata
 8003b10:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003b14:	20000140 	.word	0x20000140
  ldr  r2, =_sbss
 8003b18:	20000140 	.word	0x20000140
  ldr  r3, = _ebss
 8003b1c:	2000ce2c 	.word	0x2000ce2c

08003b20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b20:	e7fe      	b.n	8003b20 <ADC_IRQHandler>

08003b22 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b26:	2003      	movs	r0, #3
 8003b28:	f001 f923 	bl	8004d72 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b2c:	2000      	movs	r0, #0
 8003b2e:	f7ff fe63 	bl	80037f8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003b32:	f7fe ff09 	bl	8002948 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b40:	4b06      	ldr	r3, [pc, #24]	; (8003b5c <HAL_IncTick+0x20>)
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	461a      	mov	r2, r3
 8003b46:	4b06      	ldr	r3, [pc, #24]	; (8003b60 <HAL_IncTick+0x24>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	4a04      	ldr	r2, [pc, #16]	; (8003b60 <HAL_IncTick+0x24>)
 8003b4e:	6013      	str	r3, [r2, #0]
}
 8003b50:	bf00      	nop
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	20000020 	.word	0x20000020
 8003b60:	2000c9b8 	.word	0x2000c9b8

08003b64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
  return uwTick;
 8003b68:	4b03      	ldr	r3, [pc, #12]	; (8003b78 <HAL_GetTick+0x14>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	2000c9b8 	.word	0x2000c9b8

08003b7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b84:	f7ff ffee 	bl	8003b64 <HAL_GetTick>
 8003b88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b94:	d005      	beq.n	8003ba2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b96:	4b09      	ldr	r3, [pc, #36]	; (8003bbc <HAL_Delay+0x40>)
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003ba2:	bf00      	nop
 8003ba4:	f7ff ffde 	bl	8003b64 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d8f7      	bhi.n	8003ba4 <HAL_Delay+0x28>
  {
  }
}
 8003bb4:	bf00      	nop
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	20000020 	.word	0x20000020

08003bc0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e031      	b.n	8003c3a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d109      	bne.n	8003bf2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7fe feda 	bl	8002998 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	f003 0310 	and.w	r3, r3, #16
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d116      	bne.n	8003c2c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c02:	4b10      	ldr	r3, [pc, #64]	; (8003c44 <HAL_ADC_Init+0x84>)
 8003c04:	4013      	ands	r3, r2
 8003c06:	f043 0202 	orr.w	r2, r3, #2
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f964 	bl	8003edc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	f023 0303 	bic.w	r3, r3, #3
 8003c22:	f043 0201 	orr.w	r2, r3, #1
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	641a      	str	r2, [r3, #64]	; 0x40
 8003c2a:	e001      	b.n	8003c30 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	ffffeefd 	.word	0xffffeefd

08003c48 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003c52:	2300      	movs	r3, #0
 8003c54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d101      	bne.n	8003c64 <HAL_ADC_ConfigChannel+0x1c>
 8003c60:	2302      	movs	r3, #2
 8003c62:	e12a      	b.n	8003eba <HAL_ADC_ConfigChannel+0x272>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2b09      	cmp	r3, #9
 8003c72:	d93a      	bls.n	8003cea <HAL_ADC_ConfigChannel+0xa2>
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c7c:	d035      	beq.n	8003cea <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68d9      	ldr	r1, [r3, #12]
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	005b      	lsls	r3, r3, #1
 8003c90:	4413      	add	r3, r2
 8003c92:	3b1e      	subs	r3, #30
 8003c94:	2207      	movs	r2, #7
 8003c96:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9a:	43da      	mvns	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	400a      	ands	r2, r1
 8003ca2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a87      	ldr	r2, [pc, #540]	; (8003ec8 <HAL_ADC_ConfigChannel+0x280>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d10a      	bne.n	8003cc4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68d9      	ldr	r1, [r3, #12]
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	061a      	lsls	r2, r3, #24
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003cc2:	e035      	b.n	8003d30 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68d9      	ldr	r1, [r3, #12]
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	689a      	ldr	r2, [r3, #8]
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	4403      	add	r3, r0
 8003cdc:	3b1e      	subs	r3, #30
 8003cde:	409a      	lsls	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ce8:	e022      	b.n	8003d30 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	6919      	ldr	r1, [r3, #16]
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	4413      	add	r3, r2
 8003cfe:	2207      	movs	r2, #7
 8003d00:	fa02 f303 	lsl.w	r3, r2, r3
 8003d04:	43da      	mvns	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	400a      	ands	r2, r1
 8003d0c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	6919      	ldr	r1, [r3, #16]
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	4618      	mov	r0, r3
 8003d20:	4603      	mov	r3, r0
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	4403      	add	r3, r0
 8003d26:	409a      	lsls	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	2b06      	cmp	r3, #6
 8003d36:	d824      	bhi.n	8003d82 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685a      	ldr	r2, [r3, #4]
 8003d42:	4613      	mov	r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	4413      	add	r3, r2
 8003d48:	3b05      	subs	r3, #5
 8003d4a:	221f      	movs	r2, #31
 8003d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d50:	43da      	mvns	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	400a      	ands	r2, r1
 8003d58:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	4618      	mov	r0, r3
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4413      	add	r3, r2
 8003d72:	3b05      	subs	r3, #5
 8003d74:	fa00 f203 	lsl.w	r2, r0, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	635a      	str	r2, [r3, #52]	; 0x34
 8003d80:	e04c      	b.n	8003e1c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2b0c      	cmp	r3, #12
 8003d88:	d824      	bhi.n	8003dd4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685a      	ldr	r2, [r3, #4]
 8003d94:	4613      	mov	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	3b23      	subs	r3, #35	; 0x23
 8003d9c:	221f      	movs	r2, #31
 8003d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003da2:	43da      	mvns	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	400a      	ands	r2, r1
 8003daa:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	4618      	mov	r0, r3
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685a      	ldr	r2, [r3, #4]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	4413      	add	r3, r2
 8003dc4:	3b23      	subs	r3, #35	; 0x23
 8003dc6:	fa00 f203 	lsl.w	r2, r0, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	631a      	str	r2, [r3, #48]	; 0x30
 8003dd2:	e023      	b.n	8003e1c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	4613      	mov	r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	4413      	add	r3, r2
 8003de4:	3b41      	subs	r3, #65	; 0x41
 8003de6:	221f      	movs	r2, #31
 8003de8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dec:	43da      	mvns	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	400a      	ands	r2, r1
 8003df4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	4618      	mov	r0, r3
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685a      	ldr	r2, [r3, #4]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	4413      	add	r3, r2
 8003e0e:	3b41      	subs	r3, #65	; 0x41
 8003e10:	fa00 f203 	lsl.w	r2, r0, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a2a      	ldr	r2, [pc, #168]	; (8003ecc <HAL_ADC_ConfigChannel+0x284>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d10a      	bne.n	8003e3c <HAL_ADC_ConfigChannel+0x1f4>
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e2e:	d105      	bne.n	8003e3c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003e30:	4b27      	ldr	r3, [pc, #156]	; (8003ed0 <HAL_ADC_ConfigChannel+0x288>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	4a26      	ldr	r2, [pc, #152]	; (8003ed0 <HAL_ADC_ConfigChannel+0x288>)
 8003e36:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003e3a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a22      	ldr	r2, [pc, #136]	; (8003ecc <HAL_ADC_ConfigChannel+0x284>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d109      	bne.n	8003e5a <HAL_ADC_ConfigChannel+0x212>
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2b12      	cmp	r3, #18
 8003e4c:	d105      	bne.n	8003e5a <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003e4e:	4b20      	ldr	r3, [pc, #128]	; (8003ed0 <HAL_ADC_ConfigChannel+0x288>)
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	4a1f      	ldr	r2, [pc, #124]	; (8003ed0 <HAL_ADC_ConfigChannel+0x288>)
 8003e54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e58:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a1b      	ldr	r2, [pc, #108]	; (8003ecc <HAL_ADC_ConfigChannel+0x284>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d125      	bne.n	8003eb0 <HAL_ADC_ConfigChannel+0x268>
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a17      	ldr	r2, [pc, #92]	; (8003ec8 <HAL_ADC_ConfigChannel+0x280>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d003      	beq.n	8003e76 <HAL_ADC_ConfigChannel+0x22e>
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2b11      	cmp	r3, #17
 8003e74:	d11c      	bne.n	8003eb0 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003e76:	4b16      	ldr	r3, [pc, #88]	; (8003ed0 <HAL_ADC_ConfigChannel+0x288>)
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	4a15      	ldr	r2, [pc, #84]	; (8003ed0 <HAL_ADC_ConfigChannel+0x288>)
 8003e7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e80:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a10      	ldr	r2, [pc, #64]	; (8003ec8 <HAL_ADC_ConfigChannel+0x280>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d111      	bne.n	8003eb0 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003e8c:	4b11      	ldr	r3, [pc, #68]	; (8003ed4 <HAL_ADC_ConfigChannel+0x28c>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a11      	ldr	r2, [pc, #68]	; (8003ed8 <HAL_ADC_ConfigChannel+0x290>)
 8003e92:	fba2 2303 	umull	r2, r3, r2, r3
 8003e96:	0c9a      	lsrs	r2, r3, #18
 8003e98:	4613      	mov	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4413      	add	r3, r2
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003ea2:	e002      	b.n	8003eaa <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1f9      	bne.n	8003ea4 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3714      	adds	r7, #20
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	10000012 	.word	0x10000012
 8003ecc:	40012000 	.word	0x40012000
 8003ed0:	40012300 	.word	0x40012300
 8003ed4:	20000018 	.word	0x20000018
 8003ed8:	431bde83 	.word	0x431bde83

08003edc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003ee4:	4b78      	ldr	r3, [pc, #480]	; (80040c8 <ADC_Init+0x1ec>)
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	4a77      	ldr	r2, [pc, #476]	; (80040c8 <ADC_Init+0x1ec>)
 8003eea:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003eee:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003ef0:	4b75      	ldr	r3, [pc, #468]	; (80040c8 <ADC_Init+0x1ec>)
 8003ef2:	685a      	ldr	r2, [r3, #4]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	4973      	ldr	r1, [pc, #460]	; (80040c8 <ADC_Init+0x1ec>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	685a      	ldr	r2, [r3, #4]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	6859      	ldr	r1, [r3, #4]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	021a      	lsls	r2, r3, #8
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	685a      	ldr	r2, [r3, #4]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003f30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	6859      	ldr	r1, [r3, #4]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689a      	ldr	r2, [r3, #8]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	430a      	orrs	r2, r1
 8003f42:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689a      	ldr	r2, [r3, #8]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	6899      	ldr	r1, [r3, #8]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68da      	ldr	r2, [r3, #12]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	430a      	orrs	r2, r1
 8003f64:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6a:	4a58      	ldr	r2, [pc, #352]	; (80040cc <ADC_Init+0x1f0>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d022      	beq.n	8003fb6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	689a      	ldr	r2, [r3, #8]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f7e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	6899      	ldr	r1, [r3, #8]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	689a      	ldr	r2, [r3, #8]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003fa0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	6899      	ldr	r1, [r3, #8]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	609a      	str	r2, [r3, #8]
 8003fb4:	e00f      	b.n	8003fd6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	689a      	ldr	r2, [r3, #8]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003fc4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	689a      	ldr	r2, [r3, #8]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003fd4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	689a      	ldr	r2, [r3, #8]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 0202 	bic.w	r2, r2, #2
 8003fe4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6899      	ldr	r1, [r3, #8]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	005a      	lsls	r2, r3, #1
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d01b      	beq.n	800403c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004012:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004022:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6859      	ldr	r1, [r3, #4]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402e:	3b01      	subs	r3, #1
 8004030:	035a      	lsls	r2, r3, #13
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	430a      	orrs	r2, r1
 8004038:	605a      	str	r2, [r3, #4]
 800403a:	e007      	b.n	800404c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800404a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800405a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	69db      	ldr	r3, [r3, #28]
 8004066:	3b01      	subs	r3, #1
 8004068:	051a      	lsls	r2, r3, #20
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	430a      	orrs	r2, r1
 8004070:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	689a      	ldr	r2, [r3, #8]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004080:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	6899      	ldr	r1, [r3, #8]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800408e:	025a      	lsls	r2, r3, #9
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	430a      	orrs	r2, r1
 8004096:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	689a      	ldr	r2, [r3, #8]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6899      	ldr	r1, [r3, #8]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	029a      	lsls	r2, r3, #10
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	430a      	orrs	r2, r1
 80040ba:	609a      	str	r2, [r3, #8]
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr
 80040c8:	40012300 	.word	0x40012300
 80040cc:	0f000001 	.word	0x0f000001

080040d0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e0ed      	b.n	80042be <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d102      	bne.n	80040f4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f7fe fcac 	bl	8002a4c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f022 0202 	bic.w	r2, r2, #2
 8004102:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004104:	f7ff fd2e 	bl	8003b64 <HAL_GetTick>
 8004108:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800410a:	e012      	b.n	8004132 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800410c:	f7ff fd2a 	bl	8003b64 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b0a      	cmp	r3, #10
 8004118:	d90b      	bls.n	8004132 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2205      	movs	r2, #5
 800412a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e0c5      	b.n	80042be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1e5      	bne.n	800410c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f042 0201 	orr.w	r2, r2, #1
 800414e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004150:	f7ff fd08 	bl	8003b64 <HAL_GetTick>
 8004154:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004156:	e012      	b.n	800417e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004158:	f7ff fd04 	bl	8003b64 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b0a      	cmp	r3, #10
 8004164:	d90b      	bls.n	800417e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2205      	movs	r2, #5
 8004176:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e09f      	b.n	80042be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f003 0301 	and.w	r3, r3, #1
 8004188:	2b00      	cmp	r3, #0
 800418a:	d0e5      	beq.n	8004158 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	7e1b      	ldrb	r3, [r3, #24]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d108      	bne.n	80041a6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80041a2:	601a      	str	r2, [r3, #0]
 80041a4:	e007      	b.n	80041b6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	7e5b      	ldrb	r3, [r3, #25]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d108      	bne.n	80041d0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041cc:	601a      	str	r2, [r3, #0]
 80041ce:	e007      	b.n	80041e0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041de:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	7e9b      	ldrb	r3, [r3, #26]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d108      	bne.n	80041fa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f042 0220 	orr.w	r2, r2, #32
 80041f6:	601a      	str	r2, [r3, #0]
 80041f8:	e007      	b.n	800420a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f022 0220 	bic.w	r2, r2, #32
 8004208:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	7edb      	ldrb	r3, [r3, #27]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d108      	bne.n	8004224 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 0210 	bic.w	r2, r2, #16
 8004220:	601a      	str	r2, [r3, #0]
 8004222:	e007      	b.n	8004234 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f042 0210 	orr.w	r2, r2, #16
 8004232:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	7f1b      	ldrb	r3, [r3, #28]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d108      	bne.n	800424e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f042 0208 	orr.w	r2, r2, #8
 800424a:	601a      	str	r2, [r3, #0]
 800424c:	e007      	b.n	800425e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f022 0208 	bic.w	r2, r2, #8
 800425c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	7f5b      	ldrb	r3, [r3, #29]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d108      	bne.n	8004278 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f042 0204 	orr.w	r2, r2, #4
 8004274:	601a      	str	r2, [r3, #0]
 8004276:	e007      	b.n	8004288 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f022 0204 	bic.w	r2, r2, #4
 8004286:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689a      	ldr	r2, [r3, #8]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	431a      	orrs	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	431a      	orrs	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	695b      	ldr	r3, [r3, #20]
 800429c:	ea42 0103 	orr.w	r1, r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	1e5a      	subs	r2, r3, #1
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	430a      	orrs	r2, r1
 80042ac:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3710      	adds	r7, #16
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
	...

080042c8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b087      	sub	sp, #28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042de:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80042e0:	7cfb      	ldrb	r3, [r7, #19]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d003      	beq.n	80042ee <HAL_CAN_ConfigFilter+0x26>
 80042e6:	7cfb      	ldrb	r3, [r7, #19]
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	f040 80be 	bne.w	800446a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80042ee:	4b65      	ldr	r3, [pc, #404]	; (8004484 <HAL_CAN_ConfigFilter+0x1bc>)
 80042f0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80042f8:	f043 0201 	orr.w	r2, r3, #1
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004308:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431c:	021b      	lsls	r3, r3, #8
 800431e:	431a      	orrs	r2, r3
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	f003 031f 	and.w	r3, r3, #31
 800432e:	2201      	movs	r2, #1
 8004330:	fa02 f303 	lsl.w	r3, r2, r3
 8004334:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	43db      	mvns	r3, r3
 8004340:	401a      	ands	r2, r3
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	69db      	ldr	r3, [r3, #28]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d123      	bne.n	8004398 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	43db      	mvns	r3, r3
 800435a:	401a      	ands	r2, r3
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800436e:	683a      	ldr	r2, [r7, #0]
 8004370:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004372:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	3248      	adds	r2, #72	; 0x48
 8004378:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800438c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800438e:	6979      	ldr	r1, [r7, #20]
 8004390:	3348      	adds	r3, #72	; 0x48
 8004392:	00db      	lsls	r3, r3, #3
 8004394:	440b      	add	r3, r1
 8004396:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	69db      	ldr	r3, [r3, #28]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d122      	bne.n	80043e6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	431a      	orrs	r2, r3
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80043bc:	683a      	ldr	r2, [r7, #0]
 80043be:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80043c0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	3248      	adds	r2, #72	; 0x48
 80043c6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80043da:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80043dc:	6979      	ldr	r1, [r7, #20]
 80043de:	3348      	adds	r3, #72	; 0x48
 80043e0:	00db      	lsls	r3, r3, #3
 80043e2:	440b      	add	r3, r1
 80043e4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d109      	bne.n	8004402 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	43db      	mvns	r3, r3
 80043f8:	401a      	ands	r2, r3
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004400:	e007      	b.n	8004412 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	431a      	orrs	r2, r3
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d109      	bne.n	800442e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	43db      	mvns	r3, r3
 8004424:	401a      	ands	r2, r3
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800442c:	e007      	b.n	800443e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	431a      	orrs	r2, r3
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	2b01      	cmp	r3, #1
 8004444:	d107      	bne.n	8004456 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	431a      	orrs	r2, r3
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800445c:	f023 0201 	bic.w	r2, r3, #1
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004466:	2300      	movs	r3, #0
 8004468:	e006      	b.n	8004478 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
  }
}
 8004478:	4618      	mov	r0, r3
 800447a:	371c      	adds	r7, #28
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr
 8004484:	40006400 	.word	0x40006400

08004488 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004496:	b2db      	uxtb	r3, r3
 8004498:	2b01      	cmp	r3, #1
 800449a:	d12e      	bne.n	80044fa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2202      	movs	r2, #2
 80044a0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f022 0201 	bic.w	r2, r2, #1
 80044b2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80044b4:	f7ff fb56 	bl	8003b64 <HAL_GetTick>
 80044b8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80044ba:	e012      	b.n	80044e2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80044bc:	f7ff fb52 	bl	8003b64 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b0a      	cmp	r3, #10
 80044c8:	d90b      	bls.n	80044e2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2205      	movs	r2, #5
 80044da:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e012      	b.n	8004508 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1e5      	bne.n	80044bc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80044f6:	2300      	movs	r3, #0
 80044f8:	e006      	b.n	8004508 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
  }
}
 8004508:	4618      	mov	r0, r3
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004510:	b480      	push	{r7}
 8004512:	b087      	sub	sp, #28
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	607a      	str	r2, [r7, #4]
 800451c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004524:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004526:	7dfb      	ldrb	r3, [r7, #23]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d003      	beq.n	8004534 <HAL_CAN_GetRxMessage+0x24>
 800452c:	7dfb      	ldrb	r3, [r7, #23]
 800452e:	2b02      	cmp	r3, #2
 8004530:	f040 80f3 	bne.w	800471a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10e      	bne.n	8004558 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f003 0303 	and.w	r3, r3, #3
 8004544:	2b00      	cmp	r3, #0
 8004546:	d116      	bne.n	8004576 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e0e7      	b.n	8004728 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	f003 0303 	and.w	r3, r3, #3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d107      	bne.n	8004576 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e0d8      	b.n	8004728 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	331b      	adds	r3, #27
 800457e:	011b      	lsls	r3, r3, #4
 8004580:	4413      	add	r3, r2
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0204 	and.w	r2, r3, #4
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10c      	bne.n	80045ae <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	331b      	adds	r3, #27
 800459c:	011b      	lsls	r3, r3, #4
 800459e:	4413      	add	r3, r2
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	0d5b      	lsrs	r3, r3, #21
 80045a4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	601a      	str	r2, [r3, #0]
 80045ac:	e00b      	b.n	80045c6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	331b      	adds	r3, #27
 80045b6:	011b      	lsls	r3, r3, #4
 80045b8:	4413      	add	r3, r2
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	08db      	lsrs	r3, r3, #3
 80045be:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	331b      	adds	r3, #27
 80045ce:	011b      	lsls	r3, r3, #4
 80045d0:	4413      	add	r3, r2
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0202 	and.w	r2, r3, #2
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	331b      	adds	r3, #27
 80045e4:	011b      	lsls	r3, r3, #4
 80045e6:	4413      	add	r3, r2
 80045e8:	3304      	adds	r3, #4
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 020f 	and.w	r2, r3, #15
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	331b      	adds	r3, #27
 80045fc:	011b      	lsls	r3, r3, #4
 80045fe:	4413      	add	r3, r2
 8004600:	3304      	adds	r3, #4
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	0a1b      	lsrs	r3, r3, #8
 8004606:	b2da      	uxtb	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	331b      	adds	r3, #27
 8004614:	011b      	lsls	r3, r3, #4
 8004616:	4413      	add	r3, r2
 8004618:	3304      	adds	r3, #4
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	0c1b      	lsrs	r3, r3, #16
 800461e:	b29a      	uxth	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	011b      	lsls	r3, r3, #4
 800462c:	4413      	add	r3, r2
 800462e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	b2da      	uxtb	r2, r3
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	011b      	lsls	r3, r3, #4
 8004642:	4413      	add	r3, r2
 8004644:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	0a1a      	lsrs	r2, r3, #8
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	3301      	adds	r3, #1
 8004650:	b2d2      	uxtb	r2, r2
 8004652:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	011b      	lsls	r3, r3, #4
 800465c:	4413      	add	r3, r2
 800465e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	0c1a      	lsrs	r2, r3, #16
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	3302      	adds	r3, #2
 800466a:	b2d2      	uxtb	r2, r2
 800466c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	011b      	lsls	r3, r3, #4
 8004676:	4413      	add	r3, r2
 8004678:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	0e1a      	lsrs	r2, r3, #24
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	3303      	adds	r3, #3
 8004684:	b2d2      	uxtb	r2, r2
 8004686:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	011b      	lsls	r3, r3, #4
 8004690:	4413      	add	r3, r2
 8004692:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	3304      	adds	r3, #4
 800469c:	b2d2      	uxtb	r2, r2
 800469e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	011b      	lsls	r3, r3, #4
 80046a8:	4413      	add	r3, r2
 80046aa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	0a1a      	lsrs	r2, r3, #8
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	3305      	adds	r3, #5
 80046b6:	b2d2      	uxtb	r2, r2
 80046b8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	011b      	lsls	r3, r3, #4
 80046c2:	4413      	add	r3, r2
 80046c4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	0c1a      	lsrs	r2, r3, #16
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	3306      	adds	r3, #6
 80046d0:	b2d2      	uxtb	r2, r2
 80046d2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	011b      	lsls	r3, r3, #4
 80046dc:	4413      	add	r3, r2
 80046de:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	0e1a      	lsrs	r2, r3, #24
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	3307      	adds	r3, #7
 80046ea:	b2d2      	uxtb	r2, r2
 80046ec:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d108      	bne.n	8004706 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68da      	ldr	r2, [r3, #12]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f042 0220 	orr.w	r2, r2, #32
 8004702:	60da      	str	r2, [r3, #12]
 8004704:	e007      	b.n	8004716 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	691a      	ldr	r2, [r3, #16]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f042 0220 	orr.w	r2, r2, #32
 8004714:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004716:	2300      	movs	r3, #0
 8004718:	e006      	b.n	8004728 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
  }
}
 8004728:	4618      	mov	r0, r3
 800472a:	371c      	adds	r7, #28
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004744:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004746:	7bfb      	ldrb	r3, [r7, #15]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d002      	beq.n	8004752 <HAL_CAN_ActivateNotification+0x1e>
 800474c:	7bfb      	ldrb	r3, [r7, #15]
 800474e:	2b02      	cmp	r3, #2
 8004750:	d109      	bne.n	8004766 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	6959      	ldr	r1, [r3, #20]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	430a      	orrs	r2, r1
 8004760:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004762:	2300      	movs	r3, #0
 8004764:	e006      	b.n	8004774 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
  }
}
 8004774:	4618      	mov	r0, r3
 8004776:	3714      	adds	r7, #20
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b08a      	sub	sp, #40	; 0x28
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004788:	2300      	movs	r3, #0
 800478a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80047bc:	6a3b      	ldr	r3, [r7, #32]
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d07c      	beq.n	80048c0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	f003 0301 	and.w	r3, r3, #1
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d023      	beq.n	8004818 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2201      	movs	r2, #1
 80047d6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f97d 	bl	8004ae2 <HAL_CAN_TxMailbox0CompleteCallback>
 80047e8:	e016      	b.n	8004818 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	f003 0304 	and.w	r3, r3, #4
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d004      	beq.n	80047fe <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80047f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80047fa:	627b      	str	r3, [r7, #36]	; 0x24
 80047fc:	e00c      	b.n	8004818 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	f003 0308 	and.w	r3, r3, #8
 8004804:	2b00      	cmp	r3, #0
 8004806:	d004      	beq.n	8004812 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800480e:	627b      	str	r3, [r7, #36]	; 0x24
 8004810:	e002      	b.n	8004818 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 f983 	bl	8004b1e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800481e:	2b00      	cmp	r3, #0
 8004820:	d024      	beq.n	800486c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f44f 7280 	mov.w	r2, #256	; 0x100
 800482a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004832:	2b00      	cmp	r3, #0
 8004834:	d003      	beq.n	800483e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 f95d 	bl	8004af6 <HAL_CAN_TxMailbox1CompleteCallback>
 800483c:	e016      	b.n	800486c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004844:	2b00      	cmp	r3, #0
 8004846:	d004      	beq.n	8004852 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800484e:	627b      	str	r3, [r7, #36]	; 0x24
 8004850:	e00c      	b.n	800486c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004858:	2b00      	cmp	r3, #0
 800485a:	d004      	beq.n	8004866 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800485c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004862:	627b      	str	r3, [r7, #36]	; 0x24
 8004864:	e002      	b.n	800486c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 f963 	bl	8004b32 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d024      	beq.n	80048c0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800487e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d003      	beq.n	8004892 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 f93d 	bl	8004b0a <HAL_CAN_TxMailbox2CompleteCallback>
 8004890:	e016      	b.n	80048c0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d004      	beq.n	80048a6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800489c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048a2:	627b      	str	r3, [r7, #36]	; 0x24
 80048a4:	e00c      	b.n	80048c0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d004      	beq.n	80048ba <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80048b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048b6:	627b      	str	r3, [r7, #36]	; 0x24
 80048b8:	e002      	b.n	80048c0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f943 	bl	8004b46 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80048c0:	6a3b      	ldr	r3, [r7, #32]
 80048c2:	f003 0308 	and.w	r3, r3, #8
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00c      	beq.n	80048e4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	f003 0310 	and.w	r3, r3, #16
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d007      	beq.n	80048e4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80048d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048da:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2210      	movs	r2, #16
 80048e2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80048e4:	6a3b      	ldr	r3, [r7, #32]
 80048e6:	f003 0304 	and.w	r3, r3, #4
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00b      	beq.n	8004906 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	f003 0308 	and.w	r3, r3, #8
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d006      	beq.n	8004906 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2208      	movs	r2, #8
 80048fe:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 f92a 	bl	8004b5a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004906:	6a3b      	ldr	r3, [r7, #32]
 8004908:	f003 0302 	and.w	r3, r3, #2
 800490c:	2b00      	cmp	r3, #0
 800490e:	d009      	beq.n	8004924 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	f003 0303 	and.w	r3, r3, #3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d002      	beq.n	8004924 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7fc fd4e 	bl	80013c0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004924:	6a3b      	ldr	r3, [r7, #32]
 8004926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00c      	beq.n	8004948 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	f003 0310 	and.w	r3, r3, #16
 8004934:	2b00      	cmp	r3, #0
 8004936:	d007      	beq.n	8004948 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800493e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2210      	movs	r2, #16
 8004946:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004948:	6a3b      	ldr	r3, [r7, #32]
 800494a:	f003 0320 	and.w	r3, r3, #32
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00b      	beq.n	800496a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	f003 0308 	and.w	r3, r3, #8
 8004958:	2b00      	cmp	r3, #0
 800495a:	d006      	beq.n	800496a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2208      	movs	r2, #8
 8004962:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 f90c 	bl	8004b82 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800496a:	6a3b      	ldr	r3, [r7, #32]
 800496c:	f003 0310 	and.w	r3, r3, #16
 8004970:	2b00      	cmp	r3, #0
 8004972:	d009      	beq.n	8004988 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	f003 0303 	and.w	r3, r3, #3
 800497e:	2b00      	cmp	r3, #0
 8004980:	d002      	beq.n	8004988 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f8f3 	bl	8004b6e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004988:	6a3b      	ldr	r3, [r7, #32]
 800498a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00b      	beq.n	80049aa <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	f003 0310 	and.w	r3, r3, #16
 8004998:	2b00      	cmp	r3, #0
 800499a:	d006      	beq.n	80049aa <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2210      	movs	r2, #16
 80049a2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 f8f6 	bl	8004b96 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80049aa:	6a3b      	ldr	r3, [r7, #32]
 80049ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00b      	beq.n	80049cc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	f003 0308 	and.w	r3, r3, #8
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d006      	beq.n	80049cc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2208      	movs	r2, #8
 80049c4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f8ef 	bl	8004baa <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80049cc:	6a3b      	ldr	r3, [r7, #32]
 80049ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d075      	beq.n	8004ac2 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	f003 0304 	and.w	r3, r3, #4
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d06c      	beq.n	8004aba <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80049e0:	6a3b      	ldr	r3, [r7, #32]
 80049e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d008      	beq.n	80049fc <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d003      	beq.n	80049fc <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80049f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f6:	f043 0301 	orr.w	r3, r3, #1
 80049fa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80049fc:	6a3b      	ldr	r3, [r7, #32]
 80049fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d008      	beq.n	8004a18 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d003      	beq.n	8004a18 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	f043 0302 	orr.w	r3, r3, #2
 8004a16:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004a18:	6a3b      	ldr	r3, [r7, #32]
 8004a1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d008      	beq.n	8004a34 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d003      	beq.n	8004a34 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2e:	f043 0304 	orr.w	r3, r3, #4
 8004a32:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004a34:	6a3b      	ldr	r3, [r7, #32]
 8004a36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d03d      	beq.n	8004aba <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d038      	beq.n	8004aba <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a4e:	2b30      	cmp	r3, #48	; 0x30
 8004a50:	d017      	beq.n	8004a82 <HAL_CAN_IRQHandler+0x302>
 8004a52:	2b30      	cmp	r3, #48	; 0x30
 8004a54:	d804      	bhi.n	8004a60 <HAL_CAN_IRQHandler+0x2e0>
 8004a56:	2b10      	cmp	r3, #16
 8004a58:	d009      	beq.n	8004a6e <HAL_CAN_IRQHandler+0x2ee>
 8004a5a:	2b20      	cmp	r3, #32
 8004a5c:	d00c      	beq.n	8004a78 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004a5e:	e024      	b.n	8004aaa <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8004a60:	2b50      	cmp	r3, #80	; 0x50
 8004a62:	d018      	beq.n	8004a96 <HAL_CAN_IRQHandler+0x316>
 8004a64:	2b60      	cmp	r3, #96	; 0x60
 8004a66:	d01b      	beq.n	8004aa0 <HAL_CAN_IRQHandler+0x320>
 8004a68:	2b40      	cmp	r3, #64	; 0x40
 8004a6a:	d00f      	beq.n	8004a8c <HAL_CAN_IRQHandler+0x30c>
            break;
 8004a6c:	e01d      	b.n	8004aaa <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	f043 0308 	orr.w	r3, r3, #8
 8004a74:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a76:	e018      	b.n	8004aaa <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7a:	f043 0310 	orr.w	r3, r3, #16
 8004a7e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a80:	e013      	b.n	8004aaa <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a84:	f043 0320 	orr.w	r3, r3, #32
 8004a88:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a8a:	e00e      	b.n	8004aaa <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8004a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a92:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a94:	e009      	b.n	8004aaa <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8004a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a9c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a9e:	e004      	b.n	8004aaa <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aa6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004aa8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	699a      	ldr	r2, [r3, #24]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004ab8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2204      	movs	r2, #4
 8004ac0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d008      	beq.n	8004ada <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 f872 	bl	8004bbe <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004ada:	bf00      	nop
 8004adc:	3728      	adds	r7, #40	; 0x28
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	b083      	sub	sp, #12
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004aea:	bf00      	nop
 8004aec:	370c      	adds	r7, #12
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr

08004af6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004af6:	b480      	push	{r7}
 8004af8:	b083      	sub	sp, #12
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004afe:	bf00      	nop
 8004b00:	370c      	adds	r7, #12
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr

08004b0a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004b0a:	b480      	push	{r7}
 8004b0c:	b083      	sub	sp, #12
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004b12:	bf00      	nop
 8004b14:	370c      	adds	r7, #12
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr

08004b1e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004b1e:	b480      	push	{r7}
 8004b20:	b083      	sub	sp, #12
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004b26:	bf00      	nop
 8004b28:	370c      	adds	r7, #12
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr

08004b32 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004b32:	b480      	push	{r7}
 8004b34:	b083      	sub	sp, #12
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004b3a:	bf00      	nop
 8004b3c:	370c      	adds	r7, #12
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr

08004b46 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004b46:	b480      	push	{r7}
 8004b48:	b083      	sub	sp, #12
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004b4e:	bf00      	nop
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b083      	sub	sp, #12
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004b62:	bf00      	nop
 8004b64:	370c      	adds	r7, #12
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr

08004b6e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004b6e:	b480      	push	{r7}
 8004b70:	b083      	sub	sp, #12
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004b76:	bf00      	nop
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004b82:	b480      	push	{r7}
 8004b84:	b083      	sub	sp, #12
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004b8a:	bf00      	nop
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004b96:	b480      	push	{r7}
 8004b98:	b083      	sub	sp, #12
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004b9e:	bf00      	nop
 8004ba0:	370c      	adds	r7, #12
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr

08004baa <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004baa:	b480      	push	{r7}
 8004bac:	b083      	sub	sp, #12
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004bb2:	bf00      	nop
 8004bb4:	370c      	adds	r7, #12
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr

08004bbe <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004bbe:	b480      	push	{r7}
 8004bc0:	b083      	sub	sp, #12
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004bc6:	bf00      	nop
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
	...

08004bd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f003 0307 	and.w	r3, r3, #7
 8004be2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004be4:	4b0b      	ldr	r3, [pc, #44]	; (8004c14 <__NVIC_SetPriorityGrouping+0x40>)
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004bea:	68ba      	ldr	r2, [r7, #8]
 8004bec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004bfc:	4b06      	ldr	r3, [pc, #24]	; (8004c18 <__NVIC_SetPriorityGrouping+0x44>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c02:	4a04      	ldr	r2, [pc, #16]	; (8004c14 <__NVIC_SetPriorityGrouping+0x40>)
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	60d3      	str	r3, [r2, #12]
}
 8004c08:	bf00      	nop
 8004c0a:	3714      	adds	r7, #20
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr
 8004c14:	e000ed00 	.word	0xe000ed00
 8004c18:	05fa0000 	.word	0x05fa0000

08004c1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c20:	4b04      	ldr	r3, [pc, #16]	; (8004c34 <__NVIC_GetPriorityGrouping+0x18>)
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	0a1b      	lsrs	r3, r3, #8
 8004c26:	f003 0307 	and.w	r3, r3, #7
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr
 8004c34:	e000ed00 	.word	0xe000ed00

08004c38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	4603      	mov	r3, r0
 8004c40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	db0b      	blt.n	8004c62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c4a:	79fb      	ldrb	r3, [r7, #7]
 8004c4c:	f003 021f 	and.w	r2, r3, #31
 8004c50:	4907      	ldr	r1, [pc, #28]	; (8004c70 <__NVIC_EnableIRQ+0x38>)
 8004c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c56:	095b      	lsrs	r3, r3, #5
 8004c58:	2001      	movs	r0, #1
 8004c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8004c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004c62:	bf00      	nop
 8004c64:	370c      	adds	r7, #12
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	e000e100 	.word	0xe000e100

08004c74 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	db10      	blt.n	8004ca8 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c86:	79fb      	ldrb	r3, [r7, #7]
 8004c88:	f003 021f 	and.w	r2, r3, #31
 8004c8c:	4909      	ldr	r1, [pc, #36]	; (8004cb4 <__NVIC_DisableIRQ+0x40>)
 8004c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c92:	095b      	lsrs	r3, r3, #5
 8004c94:	2001      	movs	r0, #1
 8004c96:	fa00 f202 	lsl.w	r2, r0, r2
 8004c9a:	3320      	adds	r3, #32
 8004c9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004ca0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004ca4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8004ca8:	bf00      	nop
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr
 8004cb4:	e000e100 	.word	0xe000e100

08004cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	6039      	str	r1, [r7, #0]
 8004cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	db0a      	blt.n	8004ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	b2da      	uxtb	r2, r3
 8004cd0:	490c      	ldr	r1, [pc, #48]	; (8004d04 <__NVIC_SetPriority+0x4c>)
 8004cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cd6:	0112      	lsls	r2, r2, #4
 8004cd8:	b2d2      	uxtb	r2, r2
 8004cda:	440b      	add	r3, r1
 8004cdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ce0:	e00a      	b.n	8004cf8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	b2da      	uxtb	r2, r3
 8004ce6:	4908      	ldr	r1, [pc, #32]	; (8004d08 <__NVIC_SetPriority+0x50>)
 8004ce8:	79fb      	ldrb	r3, [r7, #7]
 8004cea:	f003 030f 	and.w	r3, r3, #15
 8004cee:	3b04      	subs	r3, #4
 8004cf0:	0112      	lsls	r2, r2, #4
 8004cf2:	b2d2      	uxtb	r2, r2
 8004cf4:	440b      	add	r3, r1
 8004cf6:	761a      	strb	r2, [r3, #24]
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr
 8004d04:	e000e100 	.word	0xe000e100
 8004d08:	e000ed00 	.word	0xe000ed00

08004d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b089      	sub	sp, #36	; 0x24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f003 0307 	and.w	r3, r3, #7
 8004d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	f1c3 0307 	rsb	r3, r3, #7
 8004d26:	2b04      	cmp	r3, #4
 8004d28:	bf28      	it	cs
 8004d2a:	2304      	movcs	r3, #4
 8004d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	3304      	adds	r3, #4
 8004d32:	2b06      	cmp	r3, #6
 8004d34:	d902      	bls.n	8004d3c <NVIC_EncodePriority+0x30>
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	3b03      	subs	r3, #3
 8004d3a:	e000      	b.n	8004d3e <NVIC_EncodePriority+0x32>
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d40:	f04f 32ff 	mov.w	r2, #4294967295
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4a:	43da      	mvns	r2, r3
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	401a      	ands	r2, r3
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d54:	f04f 31ff 	mov.w	r1, #4294967295
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d5e:	43d9      	mvns	r1, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d64:	4313      	orrs	r3, r2
         );
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3724      	adds	r7, #36	; 0x24
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr

08004d72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b082      	sub	sp, #8
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f7ff ff2a 	bl	8004bd4 <__NVIC_SetPriorityGrouping>
}
 8004d80:	bf00      	nop
 8004d82:	3708      	adds	r7, #8
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b086      	sub	sp, #24
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	4603      	mov	r3, r0
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	607a      	str	r2, [r7, #4]
 8004d94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004d96:	2300      	movs	r3, #0
 8004d98:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d9a:	f7ff ff3f 	bl	8004c1c <__NVIC_GetPriorityGrouping>
 8004d9e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	68b9      	ldr	r1, [r7, #8]
 8004da4:	6978      	ldr	r0, [r7, #20]
 8004da6:	f7ff ffb1 	bl	8004d0c <NVIC_EncodePriority>
 8004daa:	4602      	mov	r2, r0
 8004dac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004db0:	4611      	mov	r1, r2
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7ff ff80 	bl	8004cb8 <__NVIC_SetPriority>
}
 8004db8:	bf00      	nop
 8004dba:	3718      	adds	r7, #24
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7ff ff32 	bl	8004c38 <__NVIC_EnableIRQ>
}
 8004dd4:	bf00      	nop
 8004dd6:	3708      	adds	r7, #8
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	4603      	mov	r3, r0
 8004de4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7ff ff42 	bl	8004c74 <__NVIC_DisableIRQ>
}
 8004df0:	bf00      	nop
 8004df2:	3708      	adds	r7, #8
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e054      	b.n	8004eb4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	7f5b      	ldrb	r3, [r3, #29]
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d105      	bne.n	8004e20 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f7fd fe62 	bl	8002ae4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2202      	movs	r2, #2
 8004e24:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	791b      	ldrb	r3, [r3, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d10c      	bne.n	8004e48 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a22      	ldr	r2, [pc, #136]	; (8004ebc <HAL_CRC_Init+0xc4>)
 8004e34:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	689a      	ldr	r2, [r3, #8]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f022 0218 	bic.w	r2, r2, #24
 8004e44:	609a      	str	r2, [r3, #8]
 8004e46:	e00c      	b.n	8004e62 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6899      	ldr	r1, [r3, #8]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	461a      	mov	r2, r3
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 f834 	bl	8004ec0 <HAL_CRCEx_Polynomial_Set>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d001      	beq.n	8004e62 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e028      	b.n	8004eb4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	795b      	ldrb	r3, [r3, #5]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d105      	bne.n	8004e76 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f04f 32ff 	mov.w	r2, #4294967295
 8004e72:	611a      	str	r2, [r3, #16]
 8004e74:	e004      	b.n	8004e80 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	6912      	ldr	r2, [r2, #16]
 8004e7e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	695a      	ldr	r2, [r3, #20]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	699a      	ldr	r2, [r3, #24]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3708      	adds	r7, #8
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	04c11db7 	.word	0x04c11db7

08004ec0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b087      	sub	sp, #28
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004ed0:	231f      	movs	r3, #31
 8004ed2:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004ed4:	bf00      	nop
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	1e5a      	subs	r2, r3, #1
 8004eda:	613a      	str	r2, [r7, #16]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d009      	beq.n	8004ef4 <HAL_CRCEx_Polynomial_Set+0x34>
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	f003 031f 	and.w	r3, r3, #31
 8004ee6:	68ba      	ldr	r2, [r7, #8]
 8004ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8004eec:	f003 0301 	and.w	r3, r3, #1
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d0f0      	beq.n	8004ed6 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2b18      	cmp	r3, #24
 8004ef8:	d846      	bhi.n	8004f88 <HAL_CRCEx_Polynomial_Set+0xc8>
 8004efa:	a201      	add	r2, pc, #4	; (adr r2, 8004f00 <HAL_CRCEx_Polynomial_Set+0x40>)
 8004efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f00:	08004f8f 	.word	0x08004f8f
 8004f04:	08004f89 	.word	0x08004f89
 8004f08:	08004f89 	.word	0x08004f89
 8004f0c:	08004f89 	.word	0x08004f89
 8004f10:	08004f89 	.word	0x08004f89
 8004f14:	08004f89 	.word	0x08004f89
 8004f18:	08004f89 	.word	0x08004f89
 8004f1c:	08004f89 	.word	0x08004f89
 8004f20:	08004f7d 	.word	0x08004f7d
 8004f24:	08004f89 	.word	0x08004f89
 8004f28:	08004f89 	.word	0x08004f89
 8004f2c:	08004f89 	.word	0x08004f89
 8004f30:	08004f89 	.word	0x08004f89
 8004f34:	08004f89 	.word	0x08004f89
 8004f38:	08004f89 	.word	0x08004f89
 8004f3c:	08004f89 	.word	0x08004f89
 8004f40:	08004f71 	.word	0x08004f71
 8004f44:	08004f89 	.word	0x08004f89
 8004f48:	08004f89 	.word	0x08004f89
 8004f4c:	08004f89 	.word	0x08004f89
 8004f50:	08004f89 	.word	0x08004f89
 8004f54:	08004f89 	.word	0x08004f89
 8004f58:	08004f89 	.word	0x08004f89
 8004f5c:	08004f89 	.word	0x08004f89
 8004f60:	08004f65 	.word	0x08004f65
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	2b06      	cmp	r3, #6
 8004f68:	d913      	bls.n	8004f92 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004f6e:	e010      	b.n	8004f92 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	2b07      	cmp	r3, #7
 8004f74:	d90f      	bls.n	8004f96 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004f7a:	e00c      	b.n	8004f96 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	2b0f      	cmp	r3, #15
 8004f80:	d90b      	bls.n	8004f9a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004f86:	e008      	b.n	8004f9a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	75fb      	strb	r3, [r7, #23]
      break;
 8004f8c:	e006      	b.n	8004f9c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004f8e:	bf00      	nop
 8004f90:	e004      	b.n	8004f9c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004f92:	bf00      	nop
 8004f94:	e002      	b.n	8004f9c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004f96:	bf00      	nop
 8004f98:	e000      	b.n	8004f9c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004f9a:	bf00      	nop
  }
  if (status == HAL_OK)
 8004f9c:	7dfb      	ldrb	r3, [r7, #23]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10d      	bne.n	8004fbe <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68ba      	ldr	r2, [r7, #8]
 8004fa8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f023 0118 	bic.w	r1, r3, #24
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004fbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	371c      	adds	r7, #28
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e069      	b.n	80050b2 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d102      	bne.n	8004ff0 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f7fd fd9a 	bl	8002b24 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d002      	beq.n	8005006 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	6819      	ldr	r1, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	4b2a      	ldr	r3, [pc, #168]	; (80050bc <HAL_DCMI_Init+0xf0>)
 8005012:	400b      	ands	r3, r1
 8005014:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	6819      	ldr	r1, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	685a      	ldr	r2, [r3, #4]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	695b      	ldr	r3, [r3, #20]
 8005024:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800502a:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8005036:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8005042:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005048:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800504e:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005054:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800505a:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	430a      	orrs	r2, r1
 8005062:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	2b10      	cmp	r3, #16
 800506a:	d112      	bne.n	8005092 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	7f1b      	ldrb	r3, [r3, #28]
 8005070:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	7f5b      	ldrb	r3, [r3, #29]
 8005076:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005078:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	7f9b      	ldrb	r3, [r3, #30]
 800507e:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8005080:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	7fdb      	ldrb	r3, [r3, #31]
 8005088:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800508e:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005090:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68da      	ldr	r2, [r3, #12]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f042 021e 	orr.w	r2, r2, #30
 80050a0:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3708      	adds	r7, #8
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	ffe0f007 	.word	0xffe0f007

080050c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b086      	sub	sp, #24
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
 80050cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050ce:	2300      	movs	r3, #0
 80050d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d101      	bne.n	80050e6 <HAL_DMA_Start_IT+0x26>
 80050e2:	2302      	movs	r3, #2
 80050e4:	e048      	b.n	8005178 <HAL_DMA_Start_IT+0xb8>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d137      	bne.n	800516a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2202      	movs	r2, #2
 80050fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2200      	movs	r2, #0
 8005106:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	68b9      	ldr	r1, [r7, #8]
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f000 f842 	bl	8005198 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005118:	223f      	movs	r2, #63	; 0x3f
 800511a:	409a      	lsls	r2, r3
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f042 0216 	orr.w	r2, r2, #22
 800512e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	695a      	ldr	r2, [r3, #20]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800513e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005144:	2b00      	cmp	r3, #0
 8005146:	d007      	beq.n	8005158 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f042 0208 	orr.w	r2, r2, #8
 8005156:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f042 0201 	orr.w	r2, r2, #1
 8005166:	601a      	str	r2, [r3, #0]
 8005168:	e005      	b.n	8005176 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005172:	2302      	movs	r3, #2
 8005174:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005176:	7dfb      	ldrb	r3, [r7, #23]
}
 8005178:	4618      	mov	r0, r3
 800517a:	3718      	adds	r7, #24
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800518c:	4618      	mov	r0, r3
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
 80051a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80051b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	683a      	ldr	r2, [r7, #0]
 80051bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	2b40      	cmp	r3, #64	; 0x40
 80051c4:	d108      	bne.n	80051d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68ba      	ldr	r2, [r7, #8]
 80051d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80051d6:	e007      	b.n	80051e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68ba      	ldr	r2, [r7, #8]
 80051de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	60da      	str	r2, [r3, #12]
}
 80051e8:	bf00      	nop
 80051ea:	3714      	adds	r7, #20
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d101      	bne.n	8005206 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e039      	b.n	800527a <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800520c:	b2db      	uxtb	r3, r3
 800520e:	2b00      	cmp	r3, #0
 8005210:	d106      	bne.n	8005220 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f7fd fd40 	bl	8002ca0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2202      	movs	r2, #2
 8005224:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685a      	ldr	r2, [r3, #4]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	430a      	orrs	r2, r1
 800523c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005244:	f023 0107 	bic.w	r1, r3, #7
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	689a      	ldr	r2, [r3, #8]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	430a      	orrs	r2, r1
 8005252:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800525a:	4b0a      	ldr	r3, [pc, #40]	; (8005284 <HAL_DMA2D_Init+0x90>)
 800525c:	4013      	ands	r3, r2
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	68d1      	ldr	r1, [r2, #12]
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	6812      	ldr	r2, [r2, #0]
 8005266:	430b      	orrs	r3, r1
 8005268:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3708      	adds	r7, #8
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	ffffc000 	.word	0xffffc000

08005288 <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e05f      	b.n	800535a <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 800529a:	4b32      	ldr	r3, [pc, #200]	; (8005364 <HAL_DMA2D_DeInit+0xdc>)
 800529c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d02e      	beq.n	8005304 <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d107      	bne.n	80052c4 <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 f8c1 	bl	800543c <HAL_DMA2D_Abort>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d021      	beq.n	8005304 <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e04a      	b.n	800535a <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ca:	f003 0320 	and.w	r3, r3, #32
 80052ce:	2b20      	cmp	r3, #32
 80052d0:	d108      	bne.n	80052e4 <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 80052d2:	2100      	movs	r1, #0
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 f8f7 	bl	80054c8 <HAL_DMA2D_CLUTLoading_Abort>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d011      	beq.n	8005304 <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e03a      	b.n	800535a <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	69db      	ldr	r3, [r3, #28]
 80052ea:	f003 0320 	and.w	r3, r3, #32
 80052ee:	2b20      	cmp	r3, #32
 80052f0:	d108      	bne.n	8005304 <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 80052f2:	2101      	movs	r1, #1
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f000 f8e7 	bl	80054c8 <HAL_DMA2D_CLUTLoading_Abort>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d001      	beq.n	8005304 <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e02a      	b.n	800535a <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2200      	movs	r2, #0
 800530a:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	223f      	movs	r2, #63	; 0x3f
 8005312:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2200      	movs	r2, #0
 800531a:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2200      	movs	r2, #0
 8005322:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2200      	movs	r2, #0
 800532a:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2200      	movs	r2, #0
 8005332:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2200      	movs	r2, #0
 800533a:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f7fd fcd5 	bl	8002cec <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3708      	adds	r7, #8
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	40023800 	.word	0x40023800

08005368 <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af02      	add	r7, sp, #8
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
 8005374:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800537c:	2b01      	cmp	r3, #1
 800537e:	d101      	bne.n	8005384 <HAL_DMA2D_Start_IT+0x1c>
 8005380:	2302      	movs	r3, #2
 8005382:	e020      	b.n	80053c6 <HAL_DMA2D_Start_IT+0x5e>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2202      	movs	r2, #2
 8005390:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	9300      	str	r3, [sp, #0]
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	68b9      	ldr	r1, [r7, #8]
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	f000 fa84 	bl	80058ac <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 80053b2:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f042 0201 	orr.w	r2, r2, #1
 80053c2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}

080053ce <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b086      	sub	sp, #24
 80053d2:	af02      	add	r7, sp, #8
 80053d4:	60f8      	str	r0, [r7, #12]
 80053d6:	60b9      	str	r1, [r7, #8]
 80053d8:	607a      	str	r2, [r7, #4]
 80053da:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d101      	bne.n	80053ea <HAL_DMA2D_BlendingStart_IT+0x1c>
 80053e6:	2302      	movs	r3, #2
 80053e8:	e024      	b.n	8005434 <HAL_DMA2D_BlendingStart_IT+0x66>
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2202      	movs	r2, #2
 80053f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	683a      	ldr	r2, [r7, #0]
 800540a:	68b9      	ldr	r1, [r7, #8]
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f000 fa4d 	bl	80058ac <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8005420:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f042 0201 	orr.w	r2, r2, #1
 8005430:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005432:	2300      	movs	r3, #0
}
 8005434:	4618      	mov	r0, r3
 8005436:	3710      	adds	r7, #16
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f023 0205 	bic.w	r2, r3, #5
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f042 0204 	orr.w	r2, r2, #4
 8005456:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005458:	f7fe fb84 	bl	8003b64 <HAL_GetTick>
 800545c:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800545e:	e017      	b.n	8005490 <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8005460:	f7fe fb80 	bl	8003b64 <HAL_GetTick>
 8005464:	4602      	mov	r2, r0
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800546e:	d90f      	bls.n	8005490 <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005474:	f043 0220 	orr.w	r2, r3, #32
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2203      	movs	r2, #3
 8005480:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e017      	b.n	80054c0 <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0301 	and.w	r3, r3, #1
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1e0      	bne.n	8005460 <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 80054ac:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3710      	adds	r7, #16
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	3324      	adds	r3, #36	; 0x24
 80054d8:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f042 0204 	orr.w	r2, r2, #4
 80054e8:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d103      	bne.n	80054f8 <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	331c      	adds	r3, #28
 80054f6:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 80054f8:	f7fe fb34 	bl	8003b64 <HAL_GetTick>
 80054fc:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 80054fe:	e017      	b.n	8005530 <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8005500:	f7fe fb30 	bl	8003b64 <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800550e:	d90f      	bls.n	8005530 <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005514:	f043 0220 	orr.w	r2, r3, #32
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2203      	movs	r2, #3
 8005520:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e016      	b.n	800555e <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0320 	and.w	r3, r3, #32
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1e1      	bne.n	8005500 <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 800554a:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b084      	sub	sp, #16
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f003 0301 	and.w	r3, r3, #1
 8005584:	2b00      	cmp	r3, #0
 8005586:	d026      	beq.n	80055d6 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800558e:	2b00      	cmp	r3, #0
 8005590:	d021      	beq.n	80055d6 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055a0:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a6:	f043 0201 	orr.w	r2, r3, #1
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2201      	movs	r2, #1
 80055b4:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2204      	movs	r2, #4
 80055ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d003      	beq.n	80055d6 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f003 0320 	and.w	r3, r3, #32
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d026      	beq.n	800562e <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d021      	beq.n	800562e <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055f8:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2220      	movs	r2, #32
 8005600:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005606:	f043 0202 	orr.w	r2, r3, #2
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2204      	movs	r2, #4
 8005612:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d003      	beq.n	800562e <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f003 0308 	and.w	r3, r3, #8
 8005634:	2b00      	cmp	r3, #0
 8005636:	d026      	beq.n	8005686 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800563e:	2b00      	cmp	r3, #0
 8005640:	d021      	beq.n	8005686 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005650:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2208      	movs	r2, #8
 8005658:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800565e:	f043 0204 	orr.w	r2, r3, #4
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2204      	movs	r2, #4
 800566a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d003      	beq.n	8005686 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f003 0304 	and.w	r3, r3, #4
 800568c:	2b00      	cmp	r3, #0
 800568e:	d013      	beq.n	80056b8 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00e      	beq.n	80056b8 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056a8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2204      	movs	r2, #4
 80056b0:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 f853 	bl	800575e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f003 0302 	and.w	r3, r3, #2
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d024      	beq.n	800570c <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d01f      	beq.n	800570c <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80056da:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2202      	movs	r2, #2
 80056e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d003      	beq.n	800570c <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f003 0310 	and.w	r3, r3, #16
 8005712:	2b00      	cmp	r3, #0
 8005714:	d01f      	beq.n	8005756 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d01a      	beq.n	8005756 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800572e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2210      	movs	r2, #16
 8005736:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 f80e 	bl	8005772 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8005756:	bf00      	nop
 8005758:	3710      	adds	r7, #16
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800575e:	b480      	push	{r7}
 8005760:	b083      	sub	sp, #12
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8005766:	bf00      	nop
 8005768:	370c      	adds	r7, #12
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005772:	b480      	push	{r7}
 8005774:	b083      	sub	sp, #12
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800577a:	bf00      	nop
 800577c:	370c      	adds	r7, #12
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr
	...

08005788 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005788:	b480      	push	{r7}
 800578a:	b087      	sub	sp, #28
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d101      	bne.n	80057a8 <HAL_DMA2D_ConfigLayer+0x20>
 80057a4:	2302      	movs	r3, #2
 80057a6:	e079      	b.n	800589c <HAL_DMA2D_ConfigLayer+0x114>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2202      	movs	r2, #2
 80057b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	011b      	lsls	r3, r3, #4
 80057bc:	3318      	adds	r3, #24
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	4413      	add	r3, r2
 80057c2:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	685a      	ldr	r2, [r3, #4]
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	041b      	lsls	r3, r3, #16
 80057ce:	4313      	orrs	r3, r2
 80057d0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80057d2:	4b35      	ldr	r3, [pc, #212]	; (80058a8 <HAL_DMA2D_ConfigLayer+0x120>)
 80057d4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	2b0a      	cmp	r3, #10
 80057dc:	d003      	beq.n	80057e6 <HAL_DMA2D_ConfigLayer+0x5e>
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	2b09      	cmp	r3, #9
 80057e4:	d107      	bne.n	80057f6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	617b      	str	r3, [r7, #20]
 80057f4:	e005      	b.n	8005802 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	061b      	lsls	r3, r3, #24
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	4313      	orrs	r3, r2
 8005800:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d120      	bne.n	800584a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	43db      	mvns	r3, r3
 8005812:	ea02 0103 	and.w	r1, r2, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	430a      	orrs	r2, r1
 800581e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	693a      	ldr	r2, [r7, #16]
 8005826:	6812      	ldr	r2, [r2, #0]
 8005828:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	2b0a      	cmp	r3, #10
 8005830:	d003      	beq.n	800583a <HAL_DMA2D_ConfigLayer+0xb2>
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	2b09      	cmp	r3, #9
 8005838:	d127      	bne.n	800588a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	68da      	ldr	r2, [r3, #12]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005846:	629a      	str	r2, [r3, #40]	; 0x28
 8005848:	e01f      	b.n	800588a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	69da      	ldr	r2, [r3, #28]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	43db      	mvns	r3, r3
 8005854:	ea02 0103 	and.w	r1, r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	697a      	ldr	r2, [r7, #20]
 800585e:	430a      	orrs	r2, r1
 8005860:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	6812      	ldr	r2, [r2, #0]
 800586a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	2b0a      	cmp	r3, #10
 8005872:	d003      	beq.n	800587c <HAL_DMA2D_ConfigLayer+0xf4>
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	2b09      	cmp	r3, #9
 800587a:	d106      	bne.n	800588a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	68da      	ldr	r2, [r3, #12]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005888:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2201      	movs	r2, #1
 800588e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	371c      	adds	r7, #28
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr
 80058a8:	ff03000f 	.word	0xff03000f

080058ac <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b08b      	sub	sp, #44	; 0x2c
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]
 80058b8:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058c0:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	041a      	lsls	r2, r3, #16
 80058c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ca:	431a      	orrs	r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	430a      	orrs	r2, r1
 80058d2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80058e4:	d174      	bne.n	80059d0 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80058ec:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80058f4:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80058fc:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	b2db      	uxtb	r3, r3
 8005902:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d108      	bne.n	800591e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 800590c:	69ba      	ldr	r2, [r7, #24]
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	431a      	orrs	r2, r3
 8005912:	6a3b      	ldr	r3, [r7, #32]
 8005914:	4313      	orrs	r3, r2
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	4313      	orrs	r3, r2
 800591a:	627b      	str	r3, [r7, #36]	; 0x24
 800591c:	e053      	b.n	80059c6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	2b01      	cmp	r3, #1
 8005924:	d106      	bne.n	8005934 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005926:	69ba      	ldr	r2, [r7, #24]
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	4313      	orrs	r3, r2
 800592c:	697a      	ldr	r2, [r7, #20]
 800592e:	4313      	orrs	r3, r2
 8005930:	627b      	str	r3, [r7, #36]	; 0x24
 8005932:	e048      	b.n	80059c6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	2b02      	cmp	r3, #2
 800593a:	d111      	bne.n	8005960 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	0cdb      	lsrs	r3, r3, #19
 8005940:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	0a9b      	lsrs	r3, r3, #10
 8005946:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	08db      	lsrs	r3, r3, #3
 800594c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	015a      	lsls	r2, r3, #5
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	02db      	lsls	r3, r3, #11
 8005956:	4313      	orrs	r3, r2
 8005958:	697a      	ldr	r2, [r7, #20]
 800595a:	4313      	orrs	r3, r2
 800595c:	627b      	str	r3, [r7, #36]	; 0x24
 800595e:	e032      	b.n	80059c6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	2b03      	cmp	r3, #3
 8005966:	d117      	bne.n	8005998 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005968:	6a3b      	ldr	r3, [r7, #32]
 800596a:	0fdb      	lsrs	r3, r3, #31
 800596c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	0cdb      	lsrs	r3, r3, #19
 8005972:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	0adb      	lsrs	r3, r3, #11
 8005978:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	08db      	lsrs	r3, r3, #3
 800597e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	015a      	lsls	r2, r3, #5
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	029b      	lsls	r3, r3, #10
 8005988:	431a      	orrs	r2, r3
 800598a:	6a3b      	ldr	r3, [r7, #32]
 800598c:	03db      	lsls	r3, r3, #15
 800598e:	4313      	orrs	r3, r2
 8005990:	697a      	ldr	r2, [r7, #20]
 8005992:	4313      	orrs	r3, r2
 8005994:	627b      	str	r3, [r7, #36]	; 0x24
 8005996:	e016      	b.n	80059c6 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005998:	6a3b      	ldr	r3, [r7, #32]
 800599a:	0f1b      	lsrs	r3, r3, #28
 800599c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	0d1b      	lsrs	r3, r3, #20
 80059a2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	0b1b      	lsrs	r3, r3, #12
 80059a8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	091b      	lsrs	r3, r3, #4
 80059ae:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	011a      	lsls	r2, r3, #4
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	021b      	lsls	r3, r3, #8
 80059b8:	431a      	orrs	r2, r3
 80059ba:	6a3b      	ldr	r3, [r7, #32]
 80059bc:	031b      	lsls	r3, r3, #12
 80059be:	4313      	orrs	r3, r2
 80059c0:	697a      	ldr	r2, [r7, #20]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059cc:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80059ce:	e003      	b.n	80059d8 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68ba      	ldr	r2, [r7, #8]
 80059d6:	60da      	str	r2, [r3, #12]
}
 80059d8:	bf00      	nop
 80059da:	372c      	adds	r7, #44	; 0x2c
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b089      	sub	sp, #36	; 0x24
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80059ee:	2300      	movs	r3, #0
 80059f0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80059f2:	2300      	movs	r3, #0
 80059f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80059f6:	2300      	movs	r3, #0
 80059f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80059fa:	2300      	movs	r3, #0
 80059fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80059fe:	2300      	movs	r3, #0
 8005a00:	61fb      	str	r3, [r7, #28]
 8005a02:	e175      	b.n	8005cf0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005a04:	2201      	movs	r2, #1
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	4013      	ands	r3, r2
 8005a16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	f040 8164 	bne.w	8005cea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d00b      	beq.n	8005a42 <HAL_GPIO_Init+0x5e>
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d007      	beq.n	8005a42 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005a36:	2b11      	cmp	r3, #17
 8005a38:	d003      	beq.n	8005a42 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	2b12      	cmp	r3, #18
 8005a40:	d130      	bne.n	8005aa4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	005b      	lsls	r3, r3, #1
 8005a4c:	2203      	movs	r2, #3
 8005a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a52:	43db      	mvns	r3, r3
 8005a54:	69ba      	ldr	r2, [r7, #24]
 8005a56:	4013      	ands	r3, r2
 8005a58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	68da      	ldr	r2, [r3, #12]
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	005b      	lsls	r3, r3, #1
 8005a62:	fa02 f303 	lsl.w	r3, r2, r3
 8005a66:	69ba      	ldr	r2, [r7, #24]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	69ba      	ldr	r2, [r7, #24]
 8005a70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005a78:	2201      	movs	r2, #1
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a80:	43db      	mvns	r3, r3
 8005a82:	69ba      	ldr	r2, [r7, #24]
 8005a84:	4013      	ands	r3, r2
 8005a86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	091b      	lsrs	r3, r3, #4
 8005a8e:	f003 0201 	and.w	r2, r3, #1
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	fa02 f303 	lsl.w	r3, r2, r3
 8005a98:	69ba      	ldr	r2, [r7, #24]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	69ba      	ldr	r2, [r7, #24]
 8005aa2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	005b      	lsls	r3, r3, #1
 8005aae:	2203      	movs	r2, #3
 8005ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab4:	43db      	mvns	r3, r3
 8005ab6:	69ba      	ldr	r2, [r7, #24]
 8005ab8:	4013      	ands	r3, r2
 8005aba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	689a      	ldr	r2, [r3, #8]
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	005b      	lsls	r3, r3, #1
 8005ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac8:	69ba      	ldr	r2, [r7, #24]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	69ba      	ldr	r2, [r7, #24]
 8005ad2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	d003      	beq.n	8005ae4 <HAL_GPIO_Init+0x100>
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	2b12      	cmp	r3, #18
 8005ae2:	d123      	bne.n	8005b2c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	08da      	lsrs	r2, r3, #3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	3208      	adds	r2, #8
 8005aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005af0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	f003 0307 	and.w	r3, r3, #7
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	220f      	movs	r2, #15
 8005afc:	fa02 f303 	lsl.w	r3, r2, r3
 8005b00:	43db      	mvns	r3, r3
 8005b02:	69ba      	ldr	r2, [r7, #24]
 8005b04:	4013      	ands	r3, r2
 8005b06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	691a      	ldr	r2, [r3, #16]
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	f003 0307 	and.w	r3, r3, #7
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	fa02 f303 	lsl.w	r3, r2, r3
 8005b18:	69ba      	ldr	r2, [r7, #24]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	08da      	lsrs	r2, r3, #3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	3208      	adds	r2, #8
 8005b26:	69b9      	ldr	r1, [r7, #24]
 8005b28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	005b      	lsls	r3, r3, #1
 8005b36:	2203      	movs	r2, #3
 8005b38:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3c:	43db      	mvns	r3, r3
 8005b3e:	69ba      	ldr	r2, [r7, #24]
 8005b40:	4013      	ands	r3, r2
 8005b42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	f003 0203 	and.w	r2, r3, #3
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	005b      	lsls	r3, r3, #1
 8005b50:	fa02 f303 	lsl.w	r3, r2, r3
 8005b54:	69ba      	ldr	r2, [r7, #24]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	69ba      	ldr	r2, [r7, #24]
 8005b5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	f000 80be 	beq.w	8005cea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b6e:	4b65      	ldr	r3, [pc, #404]	; (8005d04 <HAL_GPIO_Init+0x320>)
 8005b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b72:	4a64      	ldr	r2, [pc, #400]	; (8005d04 <HAL_GPIO_Init+0x320>)
 8005b74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b78:	6453      	str	r3, [r2, #68]	; 0x44
 8005b7a:	4b62      	ldr	r3, [pc, #392]	; (8005d04 <HAL_GPIO_Init+0x320>)
 8005b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b82:	60fb      	str	r3, [r7, #12]
 8005b84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005b86:	4a60      	ldr	r2, [pc, #384]	; (8005d08 <HAL_GPIO_Init+0x324>)
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	089b      	lsrs	r3, r3, #2
 8005b8c:	3302      	adds	r3, #2
 8005b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	f003 0303 	and.w	r3, r3, #3
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	220f      	movs	r2, #15
 8005b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba2:	43db      	mvns	r3, r3
 8005ba4:	69ba      	ldr	r2, [r7, #24]
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a57      	ldr	r2, [pc, #348]	; (8005d0c <HAL_GPIO_Init+0x328>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d037      	beq.n	8005c22 <HAL_GPIO_Init+0x23e>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a56      	ldr	r2, [pc, #344]	; (8005d10 <HAL_GPIO_Init+0x32c>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d031      	beq.n	8005c1e <HAL_GPIO_Init+0x23a>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a55      	ldr	r2, [pc, #340]	; (8005d14 <HAL_GPIO_Init+0x330>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d02b      	beq.n	8005c1a <HAL_GPIO_Init+0x236>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a54      	ldr	r2, [pc, #336]	; (8005d18 <HAL_GPIO_Init+0x334>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d025      	beq.n	8005c16 <HAL_GPIO_Init+0x232>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a53      	ldr	r2, [pc, #332]	; (8005d1c <HAL_GPIO_Init+0x338>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d01f      	beq.n	8005c12 <HAL_GPIO_Init+0x22e>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a52      	ldr	r2, [pc, #328]	; (8005d20 <HAL_GPIO_Init+0x33c>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d019      	beq.n	8005c0e <HAL_GPIO_Init+0x22a>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a51      	ldr	r2, [pc, #324]	; (8005d24 <HAL_GPIO_Init+0x340>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d013      	beq.n	8005c0a <HAL_GPIO_Init+0x226>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a50      	ldr	r2, [pc, #320]	; (8005d28 <HAL_GPIO_Init+0x344>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d00d      	beq.n	8005c06 <HAL_GPIO_Init+0x222>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a4f      	ldr	r2, [pc, #316]	; (8005d2c <HAL_GPIO_Init+0x348>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d007      	beq.n	8005c02 <HAL_GPIO_Init+0x21e>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a4e      	ldr	r2, [pc, #312]	; (8005d30 <HAL_GPIO_Init+0x34c>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d101      	bne.n	8005bfe <HAL_GPIO_Init+0x21a>
 8005bfa:	2309      	movs	r3, #9
 8005bfc:	e012      	b.n	8005c24 <HAL_GPIO_Init+0x240>
 8005bfe:	230a      	movs	r3, #10
 8005c00:	e010      	b.n	8005c24 <HAL_GPIO_Init+0x240>
 8005c02:	2308      	movs	r3, #8
 8005c04:	e00e      	b.n	8005c24 <HAL_GPIO_Init+0x240>
 8005c06:	2307      	movs	r3, #7
 8005c08:	e00c      	b.n	8005c24 <HAL_GPIO_Init+0x240>
 8005c0a:	2306      	movs	r3, #6
 8005c0c:	e00a      	b.n	8005c24 <HAL_GPIO_Init+0x240>
 8005c0e:	2305      	movs	r3, #5
 8005c10:	e008      	b.n	8005c24 <HAL_GPIO_Init+0x240>
 8005c12:	2304      	movs	r3, #4
 8005c14:	e006      	b.n	8005c24 <HAL_GPIO_Init+0x240>
 8005c16:	2303      	movs	r3, #3
 8005c18:	e004      	b.n	8005c24 <HAL_GPIO_Init+0x240>
 8005c1a:	2302      	movs	r3, #2
 8005c1c:	e002      	b.n	8005c24 <HAL_GPIO_Init+0x240>
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e000      	b.n	8005c24 <HAL_GPIO_Init+0x240>
 8005c22:	2300      	movs	r3, #0
 8005c24:	69fa      	ldr	r2, [r7, #28]
 8005c26:	f002 0203 	and.w	r2, r2, #3
 8005c2a:	0092      	lsls	r2, r2, #2
 8005c2c:	4093      	lsls	r3, r2
 8005c2e:	69ba      	ldr	r2, [r7, #24]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005c34:	4934      	ldr	r1, [pc, #208]	; (8005d08 <HAL_GPIO_Init+0x324>)
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	089b      	lsrs	r3, r3, #2
 8005c3a:	3302      	adds	r3, #2
 8005c3c:	69ba      	ldr	r2, [r7, #24]
 8005c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005c42:	4b3c      	ldr	r3, [pc, #240]	; (8005d34 <HAL_GPIO_Init+0x350>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	43db      	mvns	r3, r3
 8005c4c:	69ba      	ldr	r2, [r7, #24]
 8005c4e:	4013      	ands	r3, r2
 8005c50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d003      	beq.n	8005c66 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005c5e:	69ba      	ldr	r2, [r7, #24]
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005c66:	4a33      	ldr	r2, [pc, #204]	; (8005d34 <HAL_GPIO_Init+0x350>)
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005c6c:	4b31      	ldr	r3, [pc, #196]	; (8005d34 <HAL_GPIO_Init+0x350>)
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	43db      	mvns	r3, r3
 8005c76:	69ba      	ldr	r2, [r7, #24]
 8005c78:	4013      	ands	r3, r2
 8005c7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d003      	beq.n	8005c90 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005c88:	69ba      	ldr	r2, [r7, #24]
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005c90:	4a28      	ldr	r2, [pc, #160]	; (8005d34 <HAL_GPIO_Init+0x350>)
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005c96:	4b27      	ldr	r3, [pc, #156]	; (8005d34 <HAL_GPIO_Init+0x350>)
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	43db      	mvns	r3, r3
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d003      	beq.n	8005cba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005cb2:	69ba      	ldr	r2, [r7, #24]
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005cba:	4a1e      	ldr	r2, [pc, #120]	; (8005d34 <HAL_GPIO_Init+0x350>)
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005cc0:	4b1c      	ldr	r3, [pc, #112]	; (8005d34 <HAL_GPIO_Init+0x350>)
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	43db      	mvns	r3, r3
 8005cca:	69ba      	ldr	r2, [r7, #24]
 8005ccc:	4013      	ands	r3, r2
 8005cce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d003      	beq.n	8005ce4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005cdc:	69ba      	ldr	r2, [r7, #24]
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005ce4:	4a13      	ldr	r2, [pc, #76]	; (8005d34 <HAL_GPIO_Init+0x350>)
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	3301      	adds	r3, #1
 8005cee:	61fb      	str	r3, [r7, #28]
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	2b0f      	cmp	r3, #15
 8005cf4:	f67f ae86 	bls.w	8005a04 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005cf8:	bf00      	nop
 8005cfa:	3724      	adds	r7, #36	; 0x24
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr
 8005d04:	40023800 	.word	0x40023800
 8005d08:	40013800 	.word	0x40013800
 8005d0c:	40020000 	.word	0x40020000
 8005d10:	40020400 	.word	0x40020400
 8005d14:	40020800 	.word	0x40020800
 8005d18:	40020c00 	.word	0x40020c00
 8005d1c:	40021000 	.word	0x40021000
 8005d20:	40021400 	.word	0x40021400
 8005d24:	40021800 	.word	0x40021800
 8005d28:	40021c00 	.word	0x40021c00
 8005d2c:	40022000 	.word	0x40022000
 8005d30:	40022400 	.word	0x40022400
 8005d34:	40013c00 	.word	0x40013c00

08005d38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	460b      	mov	r3, r1
 8005d42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	691a      	ldr	r2, [r3, #16]
 8005d48:	887b      	ldrh	r3, [r7, #2]
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d002      	beq.n	8005d56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005d50:	2301      	movs	r3, #1
 8005d52:	73fb      	strb	r3, [r7, #15]
 8005d54:	e001      	b.n	8005d5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005d56:	2300      	movs	r3, #0
 8005d58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3714      	adds	r7, #20
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	460b      	mov	r3, r1
 8005d72:	807b      	strh	r3, [r7, #2]
 8005d74:	4613      	mov	r3, r2
 8005d76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005d78:	787b      	ldrb	r3, [r7, #1]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d003      	beq.n	8005d86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d7e:	887a      	ldrh	r2, [r7, #2]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005d84:	e003      	b.n	8005d8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005d86:	887b      	ldrh	r3, [r7, #2]
 8005d88:	041a      	lsls	r2, r3, #16
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	619a      	str	r2, [r3, #24]
}
 8005d8e:	bf00      	nop
 8005d90:	370c      	adds	r7, #12
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
	...

08005d9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d101      	bne.n	8005dae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e07f      	b.n	8005eae <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d106      	bne.n	8005dc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 f8a9 	bl	8005f1a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2224      	movs	r2, #36	; 0x24
 8005dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f022 0201 	bic.w	r2, r2, #1
 8005dde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685a      	ldr	r2, [r3, #4]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005dec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	689a      	ldr	r2, [r3, #8]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005dfc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d107      	bne.n	8005e16 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	689a      	ldr	r2, [r3, #8]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e12:	609a      	str	r2, [r3, #8]
 8005e14:	e006      	b.n	8005e24 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	689a      	ldr	r2, [r3, #8]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005e22:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d104      	bne.n	8005e36 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e34:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	6859      	ldr	r1, [r3, #4]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	4b1d      	ldr	r3, [pc, #116]	; (8005eb8 <HAL_I2C_Init+0x11c>)
 8005e42:	430b      	orrs	r3, r1
 8005e44:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68da      	ldr	r2, [r3, #12]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e54:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	691a      	ldr	r2, [r3, #16]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	695b      	ldr	r3, [r3, #20]
 8005e5e:	ea42 0103 	orr.w	r1, r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	699b      	ldr	r3, [r3, #24]
 8005e66:	021a      	lsls	r2, r3, #8
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	430a      	orrs	r2, r1
 8005e6e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	69d9      	ldr	r1, [r3, #28]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6a1a      	ldr	r2, [r3, #32]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	430a      	orrs	r2, r1
 8005e7e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f042 0201 	orr.w	r2, r2, #1
 8005e8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2220      	movs	r2, #32
 8005e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3708      	adds	r7, #8
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	02008000 	.word	0x02008000

08005ebc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d101      	bne.n	8005ece <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e021      	b.n	8005f12 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2224      	movs	r2, #36	; 0x24
 8005ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f022 0201 	bic.w	r2, r2, #1
 8005ee4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 f821 	bl	8005f2e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3708      	adds	r7, #8
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b083      	sub	sp, #12
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005f22:	bf00      	nop
 8005f24:	370c      	adds	r7, #12
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr

08005f2e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005f2e:	b480      	push	{r7}
 8005f30:	b083      	sub	sp, #12
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005f36:	bf00      	nop
 8005f38:	370c      	adds	r7, #12
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr
	...

08005f44 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b088      	sub	sp, #32
 8005f48:	af02      	add	r7, sp, #8
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	4608      	mov	r0, r1
 8005f4e:	4611      	mov	r1, r2
 8005f50:	461a      	mov	r2, r3
 8005f52:	4603      	mov	r3, r0
 8005f54:	817b      	strh	r3, [r7, #10]
 8005f56:	460b      	mov	r3, r1
 8005f58:	813b      	strh	r3, [r7, #8]
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	2b20      	cmp	r3, #32
 8005f68:	f040 80f9 	bne.w	800615e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f6c:	6a3b      	ldr	r3, [r7, #32]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d002      	beq.n	8005f78 <HAL_I2C_Mem_Write+0x34>
 8005f72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d105      	bne.n	8005f84 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f7e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e0ed      	b.n	8006160 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d101      	bne.n	8005f92 <HAL_I2C_Mem_Write+0x4e>
 8005f8e:	2302      	movs	r3, #2
 8005f90:	e0e6      	b.n	8006160 <HAL_I2C_Mem_Write+0x21c>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2201      	movs	r2, #1
 8005f96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005f9a:	f7fd fde3 	bl	8003b64 <HAL_GetTick>
 8005f9e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	9300      	str	r3, [sp, #0]
 8005fa4:	2319      	movs	r3, #25
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005fac:	68f8      	ldr	r0, [r7, #12]
 8005fae:	f000 fad1 	bl	8006554 <I2C_WaitOnFlagUntilTimeout>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d001      	beq.n	8005fbc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e0d1      	b.n	8006160 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2221      	movs	r2, #33	; 0x21
 8005fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2240      	movs	r2, #64	; 0x40
 8005fc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6a3a      	ldr	r2, [r7, #32]
 8005fd6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005fdc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005fe4:	88f8      	ldrh	r0, [r7, #6]
 8005fe6:	893a      	ldrh	r2, [r7, #8]
 8005fe8:	8979      	ldrh	r1, [r7, #10]
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	9301      	str	r3, [sp, #4]
 8005fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff0:	9300      	str	r3, [sp, #0]
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f000 f9e1 	bl	80063bc <I2C_RequestMemoryWrite>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d005      	beq.n	800600c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2200      	movs	r2, #0
 8006004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e0a9      	b.n	8006160 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006010:	b29b      	uxth	r3, r3
 8006012:	2bff      	cmp	r3, #255	; 0xff
 8006014:	d90e      	bls.n	8006034 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	22ff      	movs	r2, #255	; 0xff
 800601a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006020:	b2da      	uxtb	r2, r3
 8006022:	8979      	ldrh	r1, [r7, #10]
 8006024:	2300      	movs	r3, #0
 8006026:	9300      	str	r3, [sp, #0]
 8006028:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800602c:	68f8      	ldr	r0, [r7, #12]
 800602e:	f000 fbb3 	bl	8006798 <I2C_TransferConfig>
 8006032:	e00f      	b.n	8006054 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006038:	b29a      	uxth	r2, r3
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006042:	b2da      	uxtb	r2, r3
 8006044:	8979      	ldrh	r1, [r7, #10]
 8006046:	2300      	movs	r3, #0
 8006048:	9300      	str	r3, [sp, #0]
 800604a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f000 fba2 	bl	8006798 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006054:	697a      	ldr	r2, [r7, #20]
 8006056:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f000 fabb 	bl	80065d4 <I2C_WaitOnTXISFlagUntilTimeout>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d001      	beq.n	8006068 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	e07b      	b.n	8006160 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606c:	781a      	ldrb	r2, [r3, #0]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006078:	1c5a      	adds	r2, r3, #1
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006082:	b29b      	uxth	r3, r3
 8006084:	3b01      	subs	r3, #1
 8006086:	b29a      	uxth	r2, r3
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006090:	3b01      	subs	r3, #1
 8006092:	b29a      	uxth	r2, r3
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800609c:	b29b      	uxth	r3, r3
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d034      	beq.n	800610c <HAL_I2C_Mem_Write+0x1c8>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d130      	bne.n	800610c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	9300      	str	r3, [sp, #0]
 80060ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b0:	2200      	movs	r2, #0
 80060b2:	2180      	movs	r1, #128	; 0x80
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	f000 fa4d 	bl	8006554 <I2C_WaitOnFlagUntilTimeout>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d001      	beq.n	80060c4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e04d      	b.n	8006160 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	2bff      	cmp	r3, #255	; 0xff
 80060cc:	d90e      	bls.n	80060ec <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	22ff      	movs	r2, #255	; 0xff
 80060d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060d8:	b2da      	uxtb	r2, r3
 80060da:	8979      	ldrh	r1, [r7, #10]
 80060dc:	2300      	movs	r3, #0
 80060de:	9300      	str	r3, [sp, #0]
 80060e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f000 fb57 	bl	8006798 <I2C_TransferConfig>
 80060ea:	e00f      	b.n	800610c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060fa:	b2da      	uxtb	r2, r3
 80060fc:	8979      	ldrh	r1, [r7, #10]
 80060fe:	2300      	movs	r3, #0
 8006100:	9300      	str	r3, [sp, #0]
 8006102:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006106:	68f8      	ldr	r0, [r7, #12]
 8006108:	f000 fb46 	bl	8006798 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006110:	b29b      	uxth	r3, r3
 8006112:	2b00      	cmp	r3, #0
 8006114:	d19e      	bne.n	8006054 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800611a:	68f8      	ldr	r0, [r7, #12]
 800611c:	f000 fa9a 	bl	8006654 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d001      	beq.n	800612a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e01a      	b.n	8006160 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2220      	movs	r2, #32
 8006130:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	6859      	ldr	r1, [r3, #4]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	4b0a      	ldr	r3, [pc, #40]	; (8006168 <HAL_I2C_Mem_Write+0x224>)
 800613e:	400b      	ands	r3, r1
 8006140:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2220      	movs	r2, #32
 8006146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2200      	movs	r2, #0
 800614e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800615a:	2300      	movs	r3, #0
 800615c:	e000      	b.n	8006160 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800615e:	2302      	movs	r3, #2
  }
}
 8006160:	4618      	mov	r0, r3
 8006162:	3718      	adds	r7, #24
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	fe00e800 	.word	0xfe00e800

0800616c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b088      	sub	sp, #32
 8006170:	af02      	add	r7, sp, #8
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	4608      	mov	r0, r1
 8006176:	4611      	mov	r1, r2
 8006178:	461a      	mov	r2, r3
 800617a:	4603      	mov	r3, r0
 800617c:	817b      	strh	r3, [r7, #10]
 800617e:	460b      	mov	r3, r1
 8006180:	813b      	strh	r3, [r7, #8]
 8006182:	4613      	mov	r3, r2
 8006184:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800618c:	b2db      	uxtb	r3, r3
 800618e:	2b20      	cmp	r3, #32
 8006190:	f040 80fd 	bne.w	800638e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006194:	6a3b      	ldr	r3, [r7, #32]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d002      	beq.n	80061a0 <HAL_I2C_Mem_Read+0x34>
 800619a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800619c:	2b00      	cmp	r3, #0
 800619e:	d105      	bne.n	80061ac <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061a6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e0f1      	b.n	8006390 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d101      	bne.n	80061ba <HAL_I2C_Mem_Read+0x4e>
 80061b6:	2302      	movs	r3, #2
 80061b8:	e0ea      	b.n	8006390 <HAL_I2C_Mem_Read+0x224>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2201      	movs	r2, #1
 80061be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80061c2:	f7fd fccf 	bl	8003b64 <HAL_GetTick>
 80061c6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	9300      	str	r3, [sp, #0]
 80061cc:	2319      	movs	r3, #25
 80061ce:	2201      	movs	r2, #1
 80061d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80061d4:	68f8      	ldr	r0, [r7, #12]
 80061d6:	f000 f9bd 	bl	8006554 <I2C_WaitOnFlagUntilTimeout>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d001      	beq.n	80061e4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e0d5      	b.n	8006390 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2222      	movs	r2, #34	; 0x22
 80061e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2240      	movs	r2, #64	; 0x40
 80061f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2200      	movs	r2, #0
 80061f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6a3a      	ldr	r2, [r7, #32]
 80061fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006204:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2200      	movs	r2, #0
 800620a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800620c:	88f8      	ldrh	r0, [r7, #6]
 800620e:	893a      	ldrh	r2, [r7, #8]
 8006210:	8979      	ldrh	r1, [r7, #10]
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	9301      	str	r3, [sp, #4]
 8006216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006218:	9300      	str	r3, [sp, #0]
 800621a:	4603      	mov	r3, r0
 800621c:	68f8      	ldr	r0, [r7, #12]
 800621e:	f000 f921 	bl	8006464 <I2C_RequestMemoryRead>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d005      	beq.n	8006234 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e0ad      	b.n	8006390 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006238:	b29b      	uxth	r3, r3
 800623a:	2bff      	cmp	r3, #255	; 0xff
 800623c:	d90e      	bls.n	800625c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	22ff      	movs	r2, #255	; 0xff
 8006242:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006248:	b2da      	uxtb	r2, r3
 800624a:	8979      	ldrh	r1, [r7, #10]
 800624c:	4b52      	ldr	r3, [pc, #328]	; (8006398 <HAL_I2C_Mem_Read+0x22c>)
 800624e:	9300      	str	r3, [sp, #0]
 8006250:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f000 fa9f 	bl	8006798 <I2C_TransferConfig>
 800625a:	e00f      	b.n	800627c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006260:	b29a      	uxth	r2, r3
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800626a:	b2da      	uxtb	r2, r3
 800626c:	8979      	ldrh	r1, [r7, #10]
 800626e:	4b4a      	ldr	r3, [pc, #296]	; (8006398 <HAL_I2C_Mem_Read+0x22c>)
 8006270:	9300      	str	r3, [sp, #0]
 8006272:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006276:	68f8      	ldr	r0, [r7, #12]
 8006278:	f000 fa8e 	bl	8006798 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	9300      	str	r3, [sp, #0]
 8006280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006282:	2200      	movs	r2, #0
 8006284:	2104      	movs	r1, #4
 8006286:	68f8      	ldr	r0, [r7, #12]
 8006288:	f000 f964 	bl	8006554 <I2C_WaitOnFlagUntilTimeout>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d001      	beq.n	8006296 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e07c      	b.n	8006390 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a0:	b2d2      	uxtb	r2, r2
 80062a2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a8:	1c5a      	adds	r2, r3, #1
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062b2:	3b01      	subs	r3, #1
 80062b4:	b29a      	uxth	r2, r3
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062be:	b29b      	uxth	r3, r3
 80062c0:	3b01      	subs	r3, #1
 80062c2:	b29a      	uxth	r2, r3
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d034      	beq.n	800633c <HAL_I2C_Mem_Read+0x1d0>
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d130      	bne.n	800633c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	9300      	str	r3, [sp, #0]
 80062de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e0:	2200      	movs	r2, #0
 80062e2:	2180      	movs	r1, #128	; 0x80
 80062e4:	68f8      	ldr	r0, [r7, #12]
 80062e6:	f000 f935 	bl	8006554 <I2C_WaitOnFlagUntilTimeout>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d001      	beq.n	80062f4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e04d      	b.n	8006390 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	2bff      	cmp	r3, #255	; 0xff
 80062fc:	d90e      	bls.n	800631c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	22ff      	movs	r2, #255	; 0xff
 8006302:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006308:	b2da      	uxtb	r2, r3
 800630a:	8979      	ldrh	r1, [r7, #10]
 800630c:	2300      	movs	r3, #0
 800630e:	9300      	str	r3, [sp, #0]
 8006310:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	f000 fa3f 	bl	8006798 <I2C_TransferConfig>
 800631a:	e00f      	b.n	800633c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006320:	b29a      	uxth	r2, r3
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800632a:	b2da      	uxtb	r2, r3
 800632c:	8979      	ldrh	r1, [r7, #10]
 800632e:	2300      	movs	r3, #0
 8006330:	9300      	str	r3, [sp, #0]
 8006332:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	f000 fa2e 	bl	8006798 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006340:	b29b      	uxth	r3, r3
 8006342:	2b00      	cmp	r3, #0
 8006344:	d19a      	bne.n	800627c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006346:	697a      	ldr	r2, [r7, #20]
 8006348:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800634a:	68f8      	ldr	r0, [r7, #12]
 800634c:	f000 f982 	bl	8006654 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006350:	4603      	mov	r3, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d001      	beq.n	800635a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e01a      	b.n	8006390 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2220      	movs	r2, #32
 8006360:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	6859      	ldr	r1, [r3, #4]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	4b0b      	ldr	r3, [pc, #44]	; (800639c <HAL_I2C_Mem_Read+0x230>)
 800636e:	400b      	ands	r3, r1
 8006370:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2220      	movs	r2, #32
 8006376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800638a:	2300      	movs	r3, #0
 800638c:	e000      	b.n	8006390 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800638e:	2302      	movs	r3, #2
  }
}
 8006390:	4618      	mov	r0, r3
 8006392:	3718      	adds	r7, #24
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}
 8006398:	80002400 	.word	0x80002400
 800639c:	fe00e800 	.word	0xfe00e800

080063a0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063ae:	b2db      	uxtb	r3, r3
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b086      	sub	sp, #24
 80063c0:	af02      	add	r7, sp, #8
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	4608      	mov	r0, r1
 80063c6:	4611      	mov	r1, r2
 80063c8:	461a      	mov	r2, r3
 80063ca:	4603      	mov	r3, r0
 80063cc:	817b      	strh	r3, [r7, #10]
 80063ce:	460b      	mov	r3, r1
 80063d0:	813b      	strh	r3, [r7, #8]
 80063d2:	4613      	mov	r3, r2
 80063d4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80063d6:	88fb      	ldrh	r3, [r7, #6]
 80063d8:	b2da      	uxtb	r2, r3
 80063da:	8979      	ldrh	r1, [r7, #10]
 80063dc:	4b20      	ldr	r3, [pc, #128]	; (8006460 <I2C_RequestMemoryWrite+0xa4>)
 80063de:	9300      	str	r3, [sp, #0]
 80063e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	f000 f9d7 	bl	8006798 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063ea:	69fa      	ldr	r2, [r7, #28]
 80063ec:	69b9      	ldr	r1, [r7, #24]
 80063ee:	68f8      	ldr	r0, [r7, #12]
 80063f0:	f000 f8f0 	bl	80065d4 <I2C_WaitOnTXISFlagUntilTimeout>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d001      	beq.n	80063fe <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e02c      	b.n	8006458 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80063fe:	88fb      	ldrh	r3, [r7, #6]
 8006400:	2b01      	cmp	r3, #1
 8006402:	d105      	bne.n	8006410 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006404:	893b      	ldrh	r3, [r7, #8]
 8006406:	b2da      	uxtb	r2, r3
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	629a      	str	r2, [r3, #40]	; 0x28
 800640e:	e015      	b.n	800643c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006410:	893b      	ldrh	r3, [r7, #8]
 8006412:	0a1b      	lsrs	r3, r3, #8
 8006414:	b29b      	uxth	r3, r3
 8006416:	b2da      	uxtb	r2, r3
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800641e:	69fa      	ldr	r2, [r7, #28]
 8006420:	69b9      	ldr	r1, [r7, #24]
 8006422:	68f8      	ldr	r0, [r7, #12]
 8006424:	f000 f8d6 	bl	80065d4 <I2C_WaitOnTXISFlagUntilTimeout>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d001      	beq.n	8006432 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e012      	b.n	8006458 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006432:	893b      	ldrh	r3, [r7, #8]
 8006434:	b2da      	uxtb	r2, r3
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	9300      	str	r3, [sp, #0]
 8006440:	69bb      	ldr	r3, [r7, #24]
 8006442:	2200      	movs	r2, #0
 8006444:	2180      	movs	r1, #128	; 0x80
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	f000 f884 	bl	8006554 <I2C_WaitOnFlagUntilTimeout>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d001      	beq.n	8006456 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e000      	b.n	8006458 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3710      	adds	r7, #16
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}
 8006460:	80002000 	.word	0x80002000

08006464 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b086      	sub	sp, #24
 8006468:	af02      	add	r7, sp, #8
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	4608      	mov	r0, r1
 800646e:	4611      	mov	r1, r2
 8006470:	461a      	mov	r2, r3
 8006472:	4603      	mov	r3, r0
 8006474:	817b      	strh	r3, [r7, #10]
 8006476:	460b      	mov	r3, r1
 8006478:	813b      	strh	r3, [r7, #8]
 800647a:	4613      	mov	r3, r2
 800647c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800647e:	88fb      	ldrh	r3, [r7, #6]
 8006480:	b2da      	uxtb	r2, r3
 8006482:	8979      	ldrh	r1, [r7, #10]
 8006484:	4b20      	ldr	r3, [pc, #128]	; (8006508 <I2C_RequestMemoryRead+0xa4>)
 8006486:	9300      	str	r3, [sp, #0]
 8006488:	2300      	movs	r3, #0
 800648a:	68f8      	ldr	r0, [r7, #12]
 800648c:	f000 f984 	bl	8006798 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006490:	69fa      	ldr	r2, [r7, #28]
 8006492:	69b9      	ldr	r1, [r7, #24]
 8006494:	68f8      	ldr	r0, [r7, #12]
 8006496:	f000 f89d 	bl	80065d4 <I2C_WaitOnTXISFlagUntilTimeout>
 800649a:	4603      	mov	r3, r0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d001      	beq.n	80064a4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	e02c      	b.n	80064fe <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80064a4:	88fb      	ldrh	r3, [r7, #6]
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d105      	bne.n	80064b6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80064aa:	893b      	ldrh	r3, [r7, #8]
 80064ac:	b2da      	uxtb	r2, r3
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	629a      	str	r2, [r3, #40]	; 0x28
 80064b4:	e015      	b.n	80064e2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80064b6:	893b      	ldrh	r3, [r7, #8]
 80064b8:	0a1b      	lsrs	r3, r3, #8
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	b2da      	uxtb	r2, r3
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064c4:	69fa      	ldr	r2, [r7, #28]
 80064c6:	69b9      	ldr	r1, [r7, #24]
 80064c8:	68f8      	ldr	r0, [r7, #12]
 80064ca:	f000 f883 	bl	80065d4 <I2C_WaitOnTXISFlagUntilTimeout>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d001      	beq.n	80064d8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e012      	b.n	80064fe <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80064d8:	893b      	ldrh	r3, [r7, #8]
 80064da:	b2da      	uxtb	r2, r3
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	9300      	str	r3, [sp, #0]
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	2200      	movs	r2, #0
 80064ea:	2140      	movs	r1, #64	; 0x40
 80064ec:	68f8      	ldr	r0, [r7, #12]
 80064ee:	f000 f831 	bl	8006554 <I2C_WaitOnFlagUntilTimeout>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d001      	beq.n	80064fc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e000      	b.n	80064fe <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80064fc:	2300      	movs	r3, #0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3710      	adds	r7, #16
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	80002000 	.word	0x80002000

0800650c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	f003 0302 	and.w	r3, r3, #2
 800651e:	2b02      	cmp	r3, #2
 8006520:	d103      	bne.n	800652a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2200      	movs	r2, #0
 8006528:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	699b      	ldr	r3, [r3, #24]
 8006530:	f003 0301 	and.w	r3, r3, #1
 8006534:	2b01      	cmp	r3, #1
 8006536:	d007      	beq.n	8006548 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	699a      	ldr	r2, [r3, #24]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f042 0201 	orr.w	r2, r2, #1
 8006546:	619a      	str	r2, [r3, #24]
  }
}
 8006548:	bf00      	nop
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	603b      	str	r3, [r7, #0]
 8006560:	4613      	mov	r3, r2
 8006562:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006564:	e022      	b.n	80065ac <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800656c:	d01e      	beq.n	80065ac <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800656e:	f7fd faf9 	bl	8003b64 <HAL_GetTick>
 8006572:	4602      	mov	r2, r0
 8006574:	69bb      	ldr	r3, [r7, #24]
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	683a      	ldr	r2, [r7, #0]
 800657a:	429a      	cmp	r2, r3
 800657c:	d302      	bcc.n	8006584 <I2C_WaitOnFlagUntilTimeout+0x30>
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d113      	bne.n	80065ac <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006588:	f043 0220 	orr.w	r2, r3, #32
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2220      	movs	r2, #32
 8006594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2200      	movs	r2, #0
 800659c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	e00f      	b.n	80065cc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	699a      	ldr	r2, [r3, #24]
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	4013      	ands	r3, r2
 80065b6:	68ba      	ldr	r2, [r7, #8]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	bf0c      	ite	eq
 80065bc:	2301      	moveq	r3, #1
 80065be:	2300      	movne	r3, #0
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	461a      	mov	r2, r3
 80065c4:	79fb      	ldrb	r3, [r7, #7]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d0cd      	beq.n	8006566 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80065ca:	2300      	movs	r3, #0
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3710      	adds	r7, #16
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80065e0:	e02c      	b.n	800663c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	68b9      	ldr	r1, [r7, #8]
 80065e6:	68f8      	ldr	r0, [r7, #12]
 80065e8:	f000 f870 	bl	80066cc <I2C_IsAcknowledgeFailed>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d001      	beq.n	80065f6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e02a      	b.n	800664c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065fc:	d01e      	beq.n	800663c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065fe:	f7fd fab1 	bl	8003b64 <HAL_GetTick>
 8006602:	4602      	mov	r2, r0
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	68ba      	ldr	r2, [r7, #8]
 800660a:	429a      	cmp	r2, r3
 800660c:	d302      	bcc.n	8006614 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d113      	bne.n	800663c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006618:	f043 0220 	orr.w	r2, r3, #32
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2220      	movs	r2, #32
 8006624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2200      	movs	r2, #0
 8006634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	e007      	b.n	800664c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	699b      	ldr	r3, [r3, #24]
 8006642:	f003 0302 	and.w	r3, r3, #2
 8006646:	2b02      	cmp	r3, #2
 8006648:	d1cb      	bne.n	80065e2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800664a:	2300      	movs	r3, #0
}
 800664c:	4618      	mov	r0, r3
 800664e:	3710      	adds	r7, #16
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006660:	e028      	b.n	80066b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	68b9      	ldr	r1, [r7, #8]
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	f000 f830 	bl	80066cc <I2C_IsAcknowledgeFailed>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d001      	beq.n	8006676 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e026      	b.n	80066c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006676:	f7fd fa75 	bl	8003b64 <HAL_GetTick>
 800667a:	4602      	mov	r2, r0
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	1ad3      	subs	r3, r2, r3
 8006680:	68ba      	ldr	r2, [r7, #8]
 8006682:	429a      	cmp	r2, r3
 8006684:	d302      	bcc.n	800668c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d113      	bne.n	80066b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006690:	f043 0220 	orr.w	r2, r3, #32
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2220      	movs	r2, #32
 800669c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	e007      	b.n	80066c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	699b      	ldr	r3, [r3, #24]
 80066ba:	f003 0320 	and.w	r3, r3, #32
 80066be:	2b20      	cmp	r3, #32
 80066c0:	d1cf      	bne.n	8006662 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3710      	adds	r7, #16
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	60b9      	str	r1, [r7, #8]
 80066d6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	f003 0310 	and.w	r3, r3, #16
 80066e2:	2b10      	cmp	r3, #16
 80066e4:	d151      	bne.n	800678a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80066e6:	e022      	b.n	800672e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ee:	d01e      	beq.n	800672e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066f0:	f7fd fa38 	bl	8003b64 <HAL_GetTick>
 80066f4:	4602      	mov	r2, r0
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	68ba      	ldr	r2, [r7, #8]
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d302      	bcc.n	8006706 <I2C_IsAcknowledgeFailed+0x3a>
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d113      	bne.n	800672e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800670a:	f043 0220 	orr.w	r2, r3, #32
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2220      	movs	r2, #32
 8006716:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e02e      	b.n	800678c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	699b      	ldr	r3, [r3, #24]
 8006734:	f003 0320 	and.w	r3, r3, #32
 8006738:	2b20      	cmp	r3, #32
 800673a:	d1d5      	bne.n	80066e8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	2210      	movs	r2, #16
 8006742:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2220      	movs	r2, #32
 800674a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800674c:	68f8      	ldr	r0, [r7, #12]
 800674e:	f7ff fedd 	bl	800650c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	6859      	ldr	r1, [r3, #4]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	4b0d      	ldr	r3, [pc, #52]	; (8006794 <I2C_IsAcknowledgeFailed+0xc8>)
 800675e:	400b      	ands	r3, r1
 8006760:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006766:	f043 0204 	orr.w	r2, r3, #4
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2220      	movs	r2, #32
 8006772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e000      	b.n	800678c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	3710      	adds	r7, #16
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}
 8006794:	fe00e800 	.word	0xfe00e800

08006798 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8006798:	b480      	push	{r7}
 800679a:	b085      	sub	sp, #20
 800679c:	af00      	add	r7, sp, #0
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	607b      	str	r3, [r7, #4]
 80067a2:	460b      	mov	r3, r1
 80067a4:	817b      	strh	r3, [r7, #10]
 80067a6:	4613      	mov	r3, r2
 80067a8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	685a      	ldr	r2, [r3, #4]
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	0d5b      	lsrs	r3, r3, #21
 80067b4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80067b8:	4b0d      	ldr	r3, [pc, #52]	; (80067f0 <I2C_TransferConfig+0x58>)
 80067ba:	430b      	orrs	r3, r1
 80067bc:	43db      	mvns	r3, r3
 80067be:	ea02 0103 	and.w	r1, r2, r3
 80067c2:	897b      	ldrh	r3, [r7, #10]
 80067c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80067c8:	7a7b      	ldrb	r3, [r7, #9]
 80067ca:	041b      	lsls	r3, r3, #16
 80067cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80067d0:	431a      	orrs	r2, r3
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	431a      	orrs	r2, r3
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	431a      	orrs	r2, r3
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	430a      	orrs	r2, r1
 80067e0:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80067e2:	bf00      	nop
 80067e4:	3714      	adds	r7, #20
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr
 80067ee:	bf00      	nop
 80067f0:	03ff63ff 	.word	0x03ff63ff

080067f4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d101      	bne.n	8006806 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e0bf      	b.n	8006986 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800680c:	b2db      	uxtb	r3, r3
 800680e:	2b00      	cmp	r3, #0
 8006810:	d106      	bne.n	8006820 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f7fc fa80 	bl	8002d20 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2202      	movs	r2, #2
 8006824:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	699a      	ldr	r2, [r3, #24]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006836:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	6999      	ldr	r1, [r3, #24]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	685a      	ldr	r2, [r3, #4]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800684c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	430a      	orrs	r2, r1
 800685a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	6899      	ldr	r1, [r3, #8]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	4b4a      	ldr	r3, [pc, #296]	; (8006990 <HAL_LTDC_Init+0x19c>)
 8006868:	400b      	ands	r3, r1
 800686a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	695b      	ldr	r3, [r3, #20]
 8006870:	041b      	lsls	r3, r3, #16
 8006872:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	6899      	ldr	r1, [r3, #8]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	699a      	ldr	r2, [r3, #24]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	431a      	orrs	r2, r3
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	430a      	orrs	r2, r1
 8006888:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68d9      	ldr	r1, [r3, #12]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	4b3e      	ldr	r3, [pc, #248]	; (8006990 <HAL_LTDC_Init+0x19c>)
 8006896:	400b      	ands	r3, r1
 8006898:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	69db      	ldr	r3, [r3, #28]
 800689e:	041b      	lsls	r3, r3, #16
 80068a0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68d9      	ldr	r1, [r3, #12]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6a1a      	ldr	r2, [r3, #32]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	431a      	orrs	r2, r3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	430a      	orrs	r2, r1
 80068b6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	6919      	ldr	r1, [r3, #16]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	4b33      	ldr	r3, [pc, #204]	; (8006990 <HAL_LTDC_Init+0x19c>)
 80068c4:	400b      	ands	r3, r1
 80068c6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068cc:	041b      	lsls	r3, r3, #16
 80068ce:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	6919      	ldr	r1, [r3, #16]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	431a      	orrs	r2, r3
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	430a      	orrs	r2, r1
 80068e4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	6959      	ldr	r1, [r3, #20]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	4b27      	ldr	r3, [pc, #156]	; (8006990 <HAL_LTDC_Init+0x19c>)
 80068f2:	400b      	ands	r3, r1
 80068f4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068fa:	041b      	lsls	r3, r3, #16
 80068fc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	6959      	ldr	r1, [r3, #20]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	431a      	orrs	r2, r3
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	430a      	orrs	r2, r1
 8006912:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800691a:	021b      	lsls	r3, r3, #8
 800691c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006924:	041b      	lsls	r3, r3, #16
 8006926:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006936:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800693e:	68ba      	ldr	r2, [r7, #8]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	4313      	orrs	r3, r2
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800694a:	431a      	orrs	r2, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	430a      	orrs	r2, r1
 8006952:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f042 0206 	orr.w	r2, r2, #6
 8006962:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	699a      	ldr	r2, [r3, #24]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f042 0201 	orr.w	r2, r2, #1
 8006972:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	3710      	adds	r7, #16
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	f000f800 	.word	0xf000f800

08006994 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069aa:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f003 0304 	and.w	r3, r3, #4
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d023      	beq.n	80069fe <HAL_LTDC_IRQHandler+0x6a>
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	f003 0304 	and.w	r3, r3, #4
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d01e      	beq.n	80069fe <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f022 0204 	bic.w	r2, r2, #4
 80069ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	2204      	movs	r2, #4
 80069d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80069de:	f043 0201 	orr.w	r2, r3, #1
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2204      	movs	r2, #4
 80069ec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 f86f 	bl	8006adc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f003 0302 	and.w	r3, r3, #2
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d023      	beq.n	8006a50 <HAL_LTDC_IRQHandler+0xbc>
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	f003 0302 	and.w	r3, r3, #2
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d01e      	beq.n	8006a50 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f022 0202 	bic.w	r2, r2, #2
 8006a20:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2202      	movs	r2, #2
 8006a28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006a30:	f043 0202 	orr.w	r2, r3, #2
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2204      	movs	r2, #4
 8006a3e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 f846 	bl	8006adc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f003 0301 	and.w	r3, r3, #1
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d01b      	beq.n	8006a92 <HAL_LTDC_IRQHandler+0xfe>
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	f003 0301 	and.w	r3, r3, #1
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d016      	beq.n	8006a92 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f022 0201 	bic.w	r2, r2, #1
 8006a72:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	2201      	movs	r2, #1
 8006a7a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f013 fb51 	bl	801a134 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f003 0308 	and.w	r3, r3, #8
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d01b      	beq.n	8006ad4 <HAL_LTDC_IRQHandler+0x140>
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	f003 0308 	and.w	r3, r3, #8
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d016      	beq.n	8006ad4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f022 0208 	bic.w	r2, r2, #8
 8006ab4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2208      	movs	r2, #8
 8006abc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 f80e 	bl	8006af0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006ad4:	bf00      	nop
 8006ad6:	3710      	adds	r7, #16
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006ae4:	bf00      	nop
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006af8:	bf00      	nop
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006b04:	b5b0      	push	{r4, r5, r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d101      	bne.n	8006b1e <HAL_LTDC_ConfigLayer+0x1a>
 8006b1a:	2302      	movs	r3, #2
 8006b1c:	e02c      	b.n	8006b78 <HAL_LTDC_ConfigLayer+0x74>
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2201      	movs	r2, #1
 8006b22:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2202      	movs	r2, #2
 8006b2a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006b2e:	68fa      	ldr	r2, [r7, #12]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2134      	movs	r1, #52	; 0x34
 8006b34:	fb01 f303 	mul.w	r3, r1, r3
 8006b38:	4413      	add	r3, r2
 8006b3a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	4614      	mov	r4, r2
 8006b42:	461d      	mov	r5, r3
 8006b44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b50:	682b      	ldr	r3, [r5, #0]
 8006b52:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	68b9      	ldr	r1, [r7, #8]
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f000 f849 	bl	8006bf0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2201      	movs	r2, #1
 8006b64:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006b76:	2300      	movs	r3, #0
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3710      	adds	r7, #16
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bdb0      	pop	{r4, r5, r7, pc}

08006b80 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d101      	bne.n	8006b98 <HAL_LTDC_ProgramLineEvent+0x18>
 8006b94:	2302      	movs	r3, #2
 8006b96:	e023      	b.n	8006be0 <HAL_LTDC_ProgramLineEvent+0x60>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2202      	movs	r2, #2
 8006ba4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f022 0201 	bic.w	r2, r2, #1
 8006bb6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8006bb8:	4a0c      	ldr	r2, [pc, #48]	; (8006bec <HAL_LTDC_ProgramLineEvent+0x6c>)
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f042 0201 	orr.w	r2, r2, #1
 8006bcc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006bde:	2300      	movs	r3, #0
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	370c      	adds	r7, #12
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr
 8006bec:	40016800 	.word	0x40016800

08006bf0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b089      	sub	sp, #36	; 0x24
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	685a      	ldr	r2, [r3, #4]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	0c1b      	lsrs	r3, r3, #16
 8006c08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c0c:	4413      	add	r3, r2
 8006c0e:	041b      	lsls	r3, r3, #16
 8006c10:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	461a      	mov	r2, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	01db      	lsls	r3, r3, #7
 8006c1c:	4413      	add	r3, r2
 8006c1e:	3384      	adds	r3, #132	; 0x84
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	6812      	ldr	r2, [r2, #0]
 8006c26:	4611      	mov	r1, r2
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	01d2      	lsls	r2, r2, #7
 8006c2c:	440a      	add	r2, r1
 8006c2e:	3284      	adds	r2, #132	; 0x84
 8006c30:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006c34:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	0c1b      	lsrs	r3, r3, #16
 8006c42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c46:	4413      	add	r3, r2
 8006c48:	1c5a      	adds	r2, r3, #1
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4619      	mov	r1, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	01db      	lsls	r3, r3, #7
 8006c54:	440b      	add	r3, r1
 8006c56:	3384      	adds	r3, #132	; 0x84
 8006c58:	4619      	mov	r1, r3
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	68da      	ldr	r2, [r3, #12]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c6e:	4413      	add	r3, r2
 8006c70:	041b      	lsls	r3, r3, #16
 8006c72:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	461a      	mov	r2, r3
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	01db      	lsls	r3, r3, #7
 8006c7e:	4413      	add	r3, r2
 8006c80:	3384      	adds	r3, #132	; 0x84
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	6812      	ldr	r2, [r2, #0]
 8006c88:	4611      	mov	r1, r2
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	01d2      	lsls	r2, r2, #7
 8006c8e:	440a      	add	r2, r1
 8006c90:	3284      	adds	r2, #132	; 0x84
 8006c92:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006c96:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	689a      	ldr	r2, [r3, #8]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	68db      	ldr	r3, [r3, #12]
 8006ca2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ca6:	4413      	add	r3, r2
 8006ca8:	1c5a      	adds	r2, r3, #1
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4619      	mov	r1, r3
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	01db      	lsls	r3, r3, #7
 8006cb4:	440b      	add	r3, r1
 8006cb6:	3384      	adds	r3, #132	; 0x84
 8006cb8:	4619      	mov	r1, r3
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	01db      	lsls	r3, r3, #7
 8006cca:	4413      	add	r3, r2
 8006ccc:	3384      	adds	r3, #132	; 0x84
 8006cce:	691b      	ldr	r3, [r3, #16]
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	6812      	ldr	r2, [r2, #0]
 8006cd4:	4611      	mov	r1, r2
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	01d2      	lsls	r2, r2, #7
 8006cda:	440a      	add	r2, r1
 8006cdc:	3284      	adds	r2, #132	; 0x84
 8006cde:	f023 0307 	bic.w	r3, r3, #7
 8006ce2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	461a      	mov	r2, r3
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	01db      	lsls	r3, r3, #7
 8006cee:	4413      	add	r3, r2
 8006cf0:	3384      	adds	r3, #132	; 0x84
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006d00:	021b      	lsls	r3, r3, #8
 8006d02:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006d0a:	041b      	lsls	r3, r3, #16
 8006d0c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	699b      	ldr	r3, [r3, #24]
 8006d12:	061b      	lsls	r3, r3, #24
 8006d14:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	01db      	lsls	r3, r3, #7
 8006d20:	4413      	add	r3, r2
 8006d22:	3384      	adds	r3, #132	; 0x84
 8006d24:	699b      	ldr	r3, [r3, #24]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	01db      	lsls	r3, r3, #7
 8006d30:	4413      	add	r3, r2
 8006d32:	3384      	adds	r3, #132	; 0x84
 8006d34:	461a      	mov	r2, r3
 8006d36:	2300      	movs	r3, #0
 8006d38:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d40:	461a      	mov	r2, r3
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	431a      	orrs	r2, r3
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	431a      	orrs	r2, r3
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4619      	mov	r1, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	01db      	lsls	r3, r3, #7
 8006d54:	440b      	add	r3, r1
 8006d56:	3384      	adds	r3, #132	; 0x84
 8006d58:	4619      	mov	r1, r3
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	461a      	mov	r2, r3
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	01db      	lsls	r3, r3, #7
 8006d6a:	4413      	add	r3, r2
 8006d6c:	3384      	adds	r3, #132	; 0x84
 8006d6e:	695b      	ldr	r3, [r3, #20]
 8006d70:	68fa      	ldr	r2, [r7, #12]
 8006d72:	6812      	ldr	r2, [r2, #0]
 8006d74:	4611      	mov	r1, r2
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	01d2      	lsls	r2, r2, #7
 8006d7a:	440a      	add	r2, r1
 8006d7c:	3284      	adds	r2, #132	; 0x84
 8006d7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006d82:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	461a      	mov	r2, r3
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	01db      	lsls	r3, r3, #7
 8006d8e:	4413      	add	r3, r2
 8006d90:	3384      	adds	r3, #132	; 0x84
 8006d92:	461a      	mov	r2, r3
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	695b      	ldr	r3, [r3, #20]
 8006d98:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	461a      	mov	r2, r3
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	01db      	lsls	r3, r3, #7
 8006da4:	4413      	add	r3, r2
 8006da6:	3384      	adds	r3, #132	; 0x84
 8006da8:	69da      	ldr	r2, [r3, #28]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4619      	mov	r1, r3
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	01db      	lsls	r3, r3, #7
 8006db4:	440b      	add	r3, r1
 8006db6:	3384      	adds	r3, #132	; 0x84
 8006db8:	4619      	mov	r1, r3
 8006dba:	4b58      	ldr	r3, [pc, #352]	; (8006f1c <LTDC_SetConfig+0x32c>)
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	69da      	ldr	r2, [r3, #28]
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	6a1b      	ldr	r3, [r3, #32]
 8006dc8:	68f9      	ldr	r1, [r7, #12]
 8006dca:	6809      	ldr	r1, [r1, #0]
 8006dcc:	4608      	mov	r0, r1
 8006dce:	6879      	ldr	r1, [r7, #4]
 8006dd0:	01c9      	lsls	r1, r1, #7
 8006dd2:	4401      	add	r1, r0
 8006dd4:	3184      	adds	r1, #132	; 0x84
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	461a      	mov	r2, r3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	01db      	lsls	r3, r3, #7
 8006de4:	4413      	add	r3, r2
 8006de6:	3384      	adds	r3, #132	; 0x84
 8006de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	461a      	mov	r2, r3
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	01db      	lsls	r3, r3, #7
 8006df4:	4413      	add	r3, r2
 8006df6:	3384      	adds	r3, #132	; 0x84
 8006df8:	461a      	mov	r2, r3
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	461a      	mov	r2, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	01db      	lsls	r3, r3, #7
 8006e08:	4413      	add	r3, r2
 8006e0a:	3384      	adds	r3, #132	; 0x84
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e12:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	691b      	ldr	r3, [r3, #16]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d102      	bne.n	8006e22 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006e1c:	2304      	movs	r3, #4
 8006e1e:	61fb      	str	r3, [r7, #28]
 8006e20:	e01b      	b.n	8006e5a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	691b      	ldr	r3, [r3, #16]
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d102      	bne.n	8006e30 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	61fb      	str	r3, [r7, #28]
 8006e2e:	e014      	b.n	8006e5a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	2b04      	cmp	r3, #4
 8006e36:	d00b      	beq.n	8006e50 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006e3c:	2b02      	cmp	r3, #2
 8006e3e:	d007      	beq.n	8006e50 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006e44:	2b03      	cmp	r3, #3
 8006e46:	d003      	beq.n	8006e50 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006e4c:	2b07      	cmp	r3, #7
 8006e4e:	d102      	bne.n	8006e56 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006e50:	2302      	movs	r3, #2
 8006e52:	61fb      	str	r3, [r7, #28]
 8006e54:	e001      	b.n	8006e5a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006e56:	2301      	movs	r3, #1
 8006e58:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	461a      	mov	r2, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	01db      	lsls	r3, r3, #7
 8006e64:	4413      	add	r3, r2
 8006e66:	3384      	adds	r3, #132	; 0x84
 8006e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e6a:	68fa      	ldr	r2, [r7, #12]
 8006e6c:	6812      	ldr	r2, [r2, #0]
 8006e6e:	4611      	mov	r1, r2
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	01d2      	lsls	r2, r2, #7
 8006e74:	440a      	add	r2, r1
 8006e76:	3284      	adds	r2, #132	; 0x84
 8006e78:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006e7c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e82:	69fa      	ldr	r2, [r7, #28]
 8006e84:	fb02 f303 	mul.w	r3, r2, r3
 8006e88:	041a      	lsls	r2, r3, #16
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	6859      	ldr	r1, [r3, #4]
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	1acb      	subs	r3, r1, r3
 8006e94:	69f9      	ldr	r1, [r7, #28]
 8006e96:	fb01 f303 	mul.w	r3, r1, r3
 8006e9a:	3303      	adds	r3, #3
 8006e9c:	68f9      	ldr	r1, [r7, #12]
 8006e9e:	6809      	ldr	r1, [r1, #0]
 8006ea0:	4608      	mov	r0, r1
 8006ea2:	6879      	ldr	r1, [r7, #4]
 8006ea4:	01c9      	lsls	r1, r1, #7
 8006ea6:	4401      	add	r1, r0
 8006ea8:	3184      	adds	r1, #132	; 0x84
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	01db      	lsls	r3, r3, #7
 8006eb8:	4413      	add	r3, r2
 8006eba:	3384      	adds	r3, #132	; 0x84
 8006ebc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	01db      	lsls	r3, r3, #7
 8006ec8:	440b      	add	r3, r1
 8006eca:	3384      	adds	r3, #132	; 0x84
 8006ecc:	4619      	mov	r1, r3
 8006ece:	4b14      	ldr	r3, [pc, #80]	; (8006f20 <LTDC_SetConfig+0x330>)
 8006ed0:	4013      	ands	r3, r2
 8006ed2:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	461a      	mov	r2, r3
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	01db      	lsls	r3, r3, #7
 8006ede:	4413      	add	r3, r2
 8006ee0:	3384      	adds	r3, #132	; 0x84
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	461a      	mov	r2, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	01db      	lsls	r3, r3, #7
 8006ef4:	4413      	add	r3, r2
 8006ef6:	3384      	adds	r3, #132	; 0x84
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	6812      	ldr	r2, [r2, #0]
 8006efe:	4611      	mov	r1, r2
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	01d2      	lsls	r2, r2, #7
 8006f04:	440a      	add	r2, r1
 8006f06:	3284      	adds	r2, #132	; 0x84
 8006f08:	f043 0301 	orr.w	r3, r3, #1
 8006f0c:	6013      	str	r3, [r2, #0]
}
 8006f0e:	bf00      	nop
 8006f10:	3724      	adds	r7, #36	; 0x24
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr
 8006f1a:	bf00      	nop
 8006f1c:	fffff8f8 	.word	0xfffff8f8
 8006f20:	fffff800 	.word	0xfffff800

08006f24 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006f24:	b480      	push	{r7}
 8006f26:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f28:	4b05      	ldr	r3, [pc, #20]	; (8006f40 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a04      	ldr	r2, [pc, #16]	; (8006f40 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f32:	6013      	str	r3, [r2, #0]
}
 8006f34:	bf00      	nop
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr
 8006f3e:	bf00      	nop
 8006f40:	40007000 	.word	0x40007000

08006f44 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006f4e:	4b23      	ldr	r3, [pc, #140]	; (8006fdc <HAL_PWREx_EnableOverDrive+0x98>)
 8006f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f52:	4a22      	ldr	r2, [pc, #136]	; (8006fdc <HAL_PWREx_EnableOverDrive+0x98>)
 8006f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f58:	6413      	str	r3, [r2, #64]	; 0x40
 8006f5a:	4b20      	ldr	r3, [pc, #128]	; (8006fdc <HAL_PWREx_EnableOverDrive+0x98>)
 8006f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f62:	603b      	str	r3, [r7, #0]
 8006f64:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006f66:	4b1e      	ldr	r3, [pc, #120]	; (8006fe0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a1d      	ldr	r2, [pc, #116]	; (8006fe0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f70:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006f72:	f7fc fdf7 	bl	8003b64 <HAL_GetTick>
 8006f76:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006f78:	e009      	b.n	8006f8e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006f7a:	f7fc fdf3 	bl	8003b64 <HAL_GetTick>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	1ad3      	subs	r3, r2, r3
 8006f84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f88:	d901      	bls.n	8006f8e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	e022      	b.n	8006fd4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006f8e:	4b14      	ldr	r3, [pc, #80]	; (8006fe0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f9a:	d1ee      	bne.n	8006f7a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006f9c:	4b10      	ldr	r3, [pc, #64]	; (8006fe0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a0f      	ldr	r2, [pc, #60]	; (8006fe0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006fa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fa6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006fa8:	f7fc fddc 	bl	8003b64 <HAL_GetTick>
 8006fac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006fae:	e009      	b.n	8006fc4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006fb0:	f7fc fdd8 	bl	8003b64 <HAL_GetTick>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	1ad3      	subs	r3, r2, r3
 8006fba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fbe:	d901      	bls.n	8006fc4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006fc0:	2303      	movs	r3, #3
 8006fc2:	e007      	b.n	8006fd4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006fc4:	4b06      	ldr	r3, [pc, #24]	; (8006fe0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fd0:	d1ee      	bne.n	8006fb0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3708      	adds	r7, #8
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	40023800 	.word	0x40023800
 8006fe0:	40007000 	.word	0x40007000

08006fe4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b086      	sub	sp, #24
 8006fe8:	af02      	add	r7, sp, #8
 8006fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006fec:	f7fc fdba 	bl	8003b64 <HAL_GetTick>
 8006ff0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d101      	bne.n	8006ffc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	e067      	b.n	80070cc <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007002:	b2db      	uxtb	r3, r3
 8007004:	2b00      	cmp	r3, #0
 8007006:	d10b      	bne.n	8007020 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2200      	movs	r2, #0
 800700c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f7fb ff4d 	bl	8002eb0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8007016:	f241 3188 	movw	r1, #5000	; 0x1388
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 f85e 	bl	80070dc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	3b01      	subs	r3, #1
 8007030:	021a      	lsls	r2, r3, #8
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	430a      	orrs	r2, r1
 8007038:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800703e:	9300      	str	r3, [sp, #0]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2200      	movs	r2, #0
 8007044:	2120      	movs	r1, #32
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 f856 	bl	80070f8 <QSPI_WaitFlagStateUntilTimeout>
 800704c:	4603      	mov	r3, r0
 800704e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8007050:	7afb      	ldrb	r3, [r7, #11]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d135      	bne.n	80070c2 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	4b1d      	ldr	r3, [pc, #116]	; (80070d4 <HAL_QSPI_Init+0xf0>)
 800705e:	4013      	ands	r3, r2
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	6852      	ldr	r2, [r2, #4]
 8007064:	0611      	lsls	r1, r2, #24
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	68d2      	ldr	r2, [r2, #12]
 800706a:	4311      	orrs	r1, r2
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	69d2      	ldr	r2, [r2, #28]
 8007070:	4311      	orrs	r1, r2
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	6a12      	ldr	r2, [r2, #32]
 8007076:	4311      	orrs	r1, r2
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	6812      	ldr	r2, [r2, #0]
 800707c:	430b      	orrs	r3, r1
 800707e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	685a      	ldr	r2, [r3, #4]
 8007086:	4b14      	ldr	r3, [pc, #80]	; (80070d8 <HAL_QSPI_Init+0xf4>)
 8007088:	4013      	ands	r3, r2
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	6912      	ldr	r2, [r2, #16]
 800708e:	0411      	lsls	r1, r2, #16
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	6952      	ldr	r2, [r2, #20]
 8007094:	4311      	orrs	r1, r2
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	6992      	ldr	r2, [r2, #24]
 800709a:	4311      	orrs	r1, r2
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	6812      	ldr	r2, [r2, #0]
 80070a0:	430b      	orrs	r3, r1
 80070a2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f042 0201 	orr.w	r2, r2, #1
 80070b2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2201      	movs	r2, #1
 80070be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80070ca:	7afb      	ldrb	r3, [r7, #11]
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	00ffff2f 	.word	0x00ffff2f
 80070d8:	ffe0f8fe 	.word	0xffe0f8fe

080070dc <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80070dc:	b480      	push	{r7}
 80070de:	b083      	sub	sp, #12
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	683a      	ldr	r2, [r7, #0]
 80070ea:	649a      	str	r2, [r3, #72]	; 0x48
}
 80070ec:	bf00      	nop
 80070ee:	370c      	adds	r7, #12
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr

080070f8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	603b      	str	r3, [r7, #0]
 8007104:	4613      	mov	r3, r2
 8007106:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007108:	e01a      	b.n	8007140 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007110:	d016      	beq.n	8007140 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007112:	f7fc fd27 	bl	8003b64 <HAL_GetTick>
 8007116:	4602      	mov	r2, r0
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	1ad3      	subs	r3, r2, r3
 800711c:	69ba      	ldr	r2, [r7, #24]
 800711e:	429a      	cmp	r2, r3
 8007120:	d302      	bcc.n	8007128 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d10b      	bne.n	8007140 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2204      	movs	r2, #4
 800712c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007134:	f043 0201 	orr.w	r2, r3, #1
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	e00e      	b.n	800715e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	689a      	ldr	r2, [r3, #8]
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	4013      	ands	r3, r2
 800714a:	2b00      	cmp	r3, #0
 800714c:	bf14      	ite	ne
 800714e:	2301      	movne	r3, #1
 8007150:	2300      	moveq	r3, #0
 8007152:	b2db      	uxtb	r3, r3
 8007154:	461a      	mov	r2, r3
 8007156:	79fb      	ldrb	r3, [r7, #7]
 8007158:	429a      	cmp	r2, r3
 800715a:	d1d6      	bne.n	800710a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
	...

08007168 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b086      	sub	sp, #24
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007170:	2300      	movs	r3, #0
 8007172:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d101      	bne.n	800717e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	e291      	b.n	80076a2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 0301 	and.w	r3, r3, #1
 8007186:	2b00      	cmp	r3, #0
 8007188:	f000 8087 	beq.w	800729a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800718c:	4b96      	ldr	r3, [pc, #600]	; (80073e8 <HAL_RCC_OscConfig+0x280>)
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	f003 030c 	and.w	r3, r3, #12
 8007194:	2b04      	cmp	r3, #4
 8007196:	d00c      	beq.n	80071b2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007198:	4b93      	ldr	r3, [pc, #588]	; (80073e8 <HAL_RCC_OscConfig+0x280>)
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	f003 030c 	and.w	r3, r3, #12
 80071a0:	2b08      	cmp	r3, #8
 80071a2:	d112      	bne.n	80071ca <HAL_RCC_OscConfig+0x62>
 80071a4:	4b90      	ldr	r3, [pc, #576]	; (80073e8 <HAL_RCC_OscConfig+0x280>)
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071b0:	d10b      	bne.n	80071ca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071b2:	4b8d      	ldr	r3, [pc, #564]	; (80073e8 <HAL_RCC_OscConfig+0x280>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d06c      	beq.n	8007298 <HAL_RCC_OscConfig+0x130>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d168      	bne.n	8007298 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e26b      	b.n	80076a2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071d2:	d106      	bne.n	80071e2 <HAL_RCC_OscConfig+0x7a>
 80071d4:	4b84      	ldr	r3, [pc, #528]	; (80073e8 <HAL_RCC_OscConfig+0x280>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a83      	ldr	r2, [pc, #524]	; (80073e8 <HAL_RCC_OscConfig+0x280>)
 80071da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071de:	6013      	str	r3, [r2, #0]
 80071e0:	e02e      	b.n	8007240 <HAL_RCC_OscConfig+0xd8>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d10c      	bne.n	8007204 <HAL_RCC_OscConfig+0x9c>
 80071ea:	4b7f      	ldr	r3, [pc, #508]	; (80073e8 <HAL_RCC_OscConfig+0x280>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a7e      	ldr	r2, [pc, #504]	; (80073e8 <HAL_RCC_OscConfig+0x280>)
 80071f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071f4:	6013      	str	r3, [r2, #0]
 80071f6:	4b7c      	ldr	r3, [pc, #496]	; (80073e8 <HAL_RCC_OscConfig+0x280>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a7b      	ldr	r2, [pc, #492]	; (80073e8 <HAL_RCC_OscConfig+0x280>)
 80071fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007200:	6013      	str	r3, [r2, #0]
 8007202:	e01d      	b.n	8007240 <HAL_RCC_OscConfig+0xd8>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800720c:	d10c      	bne.n	8007228 <HAL_RCC_OscConfig+0xc0>
 800720e:	4b76      	ldr	r3, [pc, #472]	; (80073e8 <HAL_RCC_OscConfig+0x280>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a75      	ldr	r2, [pc, #468]	; (80073e8 <HAL_RCC_OscConfig+0x280>)
 8007214:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007218:	6013      	str	r3, [r2, #0]
 800721a:	4b73      	ldr	r3, [pc, #460]	; (80073e8 <HAL_RCC_OscConfig+0x280>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a72      	ldr	r2, [pc, #456]	; (80073e8 <HAL_RCC_OscConfig+0x280>)
 8007220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007224:	6013      	str	r3, [r2, #0]
 8007226:	e00b      	b.n	8007240 <HAL_RCC_OscConfig+0xd8>
 8007228:	4b6f      	ldr	r3, [pc, #444]	; (80073e8 <HAL_RCC_OscConfig+0x280>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a6e      	ldr	r2, [pc, #440]	; (80073e8 <HAL_RCC_OscConfig+0x280>)
 800722e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007232:	6013      	str	r3, [r2, #0]
 8007234:	4b6c      	ldr	r3, [pc, #432]	; (80073e8 <HAL_RCC_OscConfig+0x280>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a6b      	ldr	r2, [pc, #428]	; (80073e8 <HAL_RCC_OscConfig+0x280>)
 800723a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800723e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d013      	beq.n	8007270 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007248:	f7fc fc8c 	bl	8003b64 <HAL_GetTick>
 800724c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800724e:	e008      	b.n	8007262 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007250:	f7fc fc88 	bl	8003b64 <HAL_GetTick>
 8007254:	4602      	mov	r2, r0
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	1ad3      	subs	r3, r2, r3
 800725a:	2b64      	cmp	r3, #100	; 0x64
 800725c:	d901      	bls.n	8007262 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800725e:	2303      	movs	r3, #3
 8007260:	e21f      	b.n	80076a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007262:	4b61      	ldr	r3, [pc, #388]	; (80073e8 <HAL_RCC_OscConfig+0x280>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800726a:	2b00      	cmp	r3, #0
 800726c:	d0f0      	beq.n	8007250 <HAL_RCC_OscConfig+0xe8>
 800726e:	e014      	b.n	800729a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007270:	f7fc fc78 	bl	8003b64 <HAL_GetTick>
 8007274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007276:	e008      	b.n	800728a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007278:	f7fc fc74 	bl	8003b64 <HAL_GetTick>
 800727c:	4602      	mov	r2, r0
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	1ad3      	subs	r3, r2, r3
 8007282:	2b64      	cmp	r3, #100	; 0x64
 8007284:	d901      	bls.n	800728a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007286:	2303      	movs	r3, #3
 8007288:	e20b      	b.n	80076a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800728a:	4b57      	ldr	r3, [pc, #348]	; (80073e8 <HAL_RCC_OscConfig+0x280>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007292:	2b00      	cmp	r3, #0
 8007294:	d1f0      	bne.n	8007278 <HAL_RCC_OscConfig+0x110>
 8007296:	e000      	b.n	800729a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007298:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f003 0302 	and.w	r3, r3, #2
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d069      	beq.n	800737a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80072a6:	4b50      	ldr	r3, [pc, #320]	; (80073e8 <HAL_RCC_OscConfig+0x280>)
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	f003 030c 	and.w	r3, r3, #12
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d00b      	beq.n	80072ca <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80072b2:	4b4d      	ldr	r3, [pc, #308]	; (80073e8 <HAL_RCC_OscConfig+0x280>)
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	f003 030c 	and.w	r3, r3, #12
 80072ba:	2b08      	cmp	r3, #8
 80072bc:	d11c      	bne.n	80072f8 <HAL_RCC_OscConfig+0x190>
 80072be:	4b4a      	ldr	r3, [pc, #296]	; (80073e8 <HAL_RCC_OscConfig+0x280>)
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d116      	bne.n	80072f8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80072ca:	4b47      	ldr	r3, [pc, #284]	; (80073e8 <HAL_RCC_OscConfig+0x280>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f003 0302 	and.w	r3, r3, #2
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d005      	beq.n	80072e2 <HAL_RCC_OscConfig+0x17a>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	68db      	ldr	r3, [r3, #12]
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d001      	beq.n	80072e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	e1df      	b.n	80076a2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072e2:	4b41      	ldr	r3, [pc, #260]	; (80073e8 <HAL_RCC_OscConfig+0x280>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	691b      	ldr	r3, [r3, #16]
 80072ee:	00db      	lsls	r3, r3, #3
 80072f0:	493d      	ldr	r1, [pc, #244]	; (80073e8 <HAL_RCC_OscConfig+0x280>)
 80072f2:	4313      	orrs	r3, r2
 80072f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80072f6:	e040      	b.n	800737a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d023      	beq.n	8007348 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007300:	4b39      	ldr	r3, [pc, #228]	; (80073e8 <HAL_RCC_OscConfig+0x280>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a38      	ldr	r2, [pc, #224]	; (80073e8 <HAL_RCC_OscConfig+0x280>)
 8007306:	f043 0301 	orr.w	r3, r3, #1
 800730a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800730c:	f7fc fc2a 	bl	8003b64 <HAL_GetTick>
 8007310:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007312:	e008      	b.n	8007326 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007314:	f7fc fc26 	bl	8003b64 <HAL_GetTick>
 8007318:	4602      	mov	r2, r0
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	1ad3      	subs	r3, r2, r3
 800731e:	2b02      	cmp	r3, #2
 8007320:	d901      	bls.n	8007326 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007322:	2303      	movs	r3, #3
 8007324:	e1bd      	b.n	80076a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007326:	4b30      	ldr	r3, [pc, #192]	; (80073e8 <HAL_RCC_OscConfig+0x280>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 0302 	and.w	r3, r3, #2
 800732e:	2b00      	cmp	r3, #0
 8007330:	d0f0      	beq.n	8007314 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007332:	4b2d      	ldr	r3, [pc, #180]	; (80073e8 <HAL_RCC_OscConfig+0x280>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	00db      	lsls	r3, r3, #3
 8007340:	4929      	ldr	r1, [pc, #164]	; (80073e8 <HAL_RCC_OscConfig+0x280>)
 8007342:	4313      	orrs	r3, r2
 8007344:	600b      	str	r3, [r1, #0]
 8007346:	e018      	b.n	800737a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007348:	4b27      	ldr	r3, [pc, #156]	; (80073e8 <HAL_RCC_OscConfig+0x280>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a26      	ldr	r2, [pc, #152]	; (80073e8 <HAL_RCC_OscConfig+0x280>)
 800734e:	f023 0301 	bic.w	r3, r3, #1
 8007352:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007354:	f7fc fc06 	bl	8003b64 <HAL_GetTick>
 8007358:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800735a:	e008      	b.n	800736e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800735c:	f7fc fc02 	bl	8003b64 <HAL_GetTick>
 8007360:	4602      	mov	r2, r0
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	1ad3      	subs	r3, r2, r3
 8007366:	2b02      	cmp	r3, #2
 8007368:	d901      	bls.n	800736e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800736a:	2303      	movs	r3, #3
 800736c:	e199      	b.n	80076a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800736e:	4b1e      	ldr	r3, [pc, #120]	; (80073e8 <HAL_RCC_OscConfig+0x280>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f003 0302 	and.w	r3, r3, #2
 8007376:	2b00      	cmp	r3, #0
 8007378:	d1f0      	bne.n	800735c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f003 0308 	and.w	r3, r3, #8
 8007382:	2b00      	cmp	r3, #0
 8007384:	d038      	beq.n	80073f8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	695b      	ldr	r3, [r3, #20]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d019      	beq.n	80073c2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800738e:	4b16      	ldr	r3, [pc, #88]	; (80073e8 <HAL_RCC_OscConfig+0x280>)
 8007390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007392:	4a15      	ldr	r2, [pc, #84]	; (80073e8 <HAL_RCC_OscConfig+0x280>)
 8007394:	f043 0301 	orr.w	r3, r3, #1
 8007398:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800739a:	f7fc fbe3 	bl	8003b64 <HAL_GetTick>
 800739e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073a0:	e008      	b.n	80073b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80073a2:	f7fc fbdf 	bl	8003b64 <HAL_GetTick>
 80073a6:	4602      	mov	r2, r0
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	1ad3      	subs	r3, r2, r3
 80073ac:	2b02      	cmp	r3, #2
 80073ae:	d901      	bls.n	80073b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80073b0:	2303      	movs	r3, #3
 80073b2:	e176      	b.n	80076a2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073b4:	4b0c      	ldr	r3, [pc, #48]	; (80073e8 <HAL_RCC_OscConfig+0x280>)
 80073b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073b8:	f003 0302 	and.w	r3, r3, #2
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d0f0      	beq.n	80073a2 <HAL_RCC_OscConfig+0x23a>
 80073c0:	e01a      	b.n	80073f8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80073c2:	4b09      	ldr	r3, [pc, #36]	; (80073e8 <HAL_RCC_OscConfig+0x280>)
 80073c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073c6:	4a08      	ldr	r2, [pc, #32]	; (80073e8 <HAL_RCC_OscConfig+0x280>)
 80073c8:	f023 0301 	bic.w	r3, r3, #1
 80073cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073ce:	f7fc fbc9 	bl	8003b64 <HAL_GetTick>
 80073d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80073d4:	e00a      	b.n	80073ec <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80073d6:	f7fc fbc5 	bl	8003b64 <HAL_GetTick>
 80073da:	4602      	mov	r2, r0
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	1ad3      	subs	r3, r2, r3
 80073e0:	2b02      	cmp	r3, #2
 80073e2:	d903      	bls.n	80073ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80073e4:	2303      	movs	r3, #3
 80073e6:	e15c      	b.n	80076a2 <HAL_RCC_OscConfig+0x53a>
 80073e8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80073ec:	4b91      	ldr	r3, [pc, #580]	; (8007634 <HAL_RCC_OscConfig+0x4cc>)
 80073ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073f0:	f003 0302 	and.w	r3, r3, #2
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d1ee      	bne.n	80073d6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f003 0304 	and.w	r3, r3, #4
 8007400:	2b00      	cmp	r3, #0
 8007402:	f000 80a4 	beq.w	800754e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007406:	4b8b      	ldr	r3, [pc, #556]	; (8007634 <HAL_RCC_OscConfig+0x4cc>)
 8007408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800740a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800740e:	2b00      	cmp	r3, #0
 8007410:	d10d      	bne.n	800742e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007412:	4b88      	ldr	r3, [pc, #544]	; (8007634 <HAL_RCC_OscConfig+0x4cc>)
 8007414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007416:	4a87      	ldr	r2, [pc, #540]	; (8007634 <HAL_RCC_OscConfig+0x4cc>)
 8007418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800741c:	6413      	str	r3, [r2, #64]	; 0x40
 800741e:	4b85      	ldr	r3, [pc, #532]	; (8007634 <HAL_RCC_OscConfig+0x4cc>)
 8007420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007426:	60bb      	str	r3, [r7, #8]
 8007428:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800742a:	2301      	movs	r3, #1
 800742c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800742e:	4b82      	ldr	r3, [pc, #520]	; (8007638 <HAL_RCC_OscConfig+0x4d0>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007436:	2b00      	cmp	r3, #0
 8007438:	d118      	bne.n	800746c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800743a:	4b7f      	ldr	r3, [pc, #508]	; (8007638 <HAL_RCC_OscConfig+0x4d0>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a7e      	ldr	r2, [pc, #504]	; (8007638 <HAL_RCC_OscConfig+0x4d0>)
 8007440:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007444:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007446:	f7fc fb8d 	bl	8003b64 <HAL_GetTick>
 800744a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800744c:	e008      	b.n	8007460 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800744e:	f7fc fb89 	bl	8003b64 <HAL_GetTick>
 8007452:	4602      	mov	r2, r0
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	1ad3      	subs	r3, r2, r3
 8007458:	2b64      	cmp	r3, #100	; 0x64
 800745a:	d901      	bls.n	8007460 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800745c:	2303      	movs	r3, #3
 800745e:	e120      	b.n	80076a2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007460:	4b75      	ldr	r3, [pc, #468]	; (8007638 <HAL_RCC_OscConfig+0x4d0>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007468:	2b00      	cmp	r3, #0
 800746a:	d0f0      	beq.n	800744e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	2b01      	cmp	r3, #1
 8007472:	d106      	bne.n	8007482 <HAL_RCC_OscConfig+0x31a>
 8007474:	4b6f      	ldr	r3, [pc, #444]	; (8007634 <HAL_RCC_OscConfig+0x4cc>)
 8007476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007478:	4a6e      	ldr	r2, [pc, #440]	; (8007634 <HAL_RCC_OscConfig+0x4cc>)
 800747a:	f043 0301 	orr.w	r3, r3, #1
 800747e:	6713      	str	r3, [r2, #112]	; 0x70
 8007480:	e02d      	b.n	80074de <HAL_RCC_OscConfig+0x376>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d10c      	bne.n	80074a4 <HAL_RCC_OscConfig+0x33c>
 800748a:	4b6a      	ldr	r3, [pc, #424]	; (8007634 <HAL_RCC_OscConfig+0x4cc>)
 800748c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800748e:	4a69      	ldr	r2, [pc, #420]	; (8007634 <HAL_RCC_OscConfig+0x4cc>)
 8007490:	f023 0301 	bic.w	r3, r3, #1
 8007494:	6713      	str	r3, [r2, #112]	; 0x70
 8007496:	4b67      	ldr	r3, [pc, #412]	; (8007634 <HAL_RCC_OscConfig+0x4cc>)
 8007498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800749a:	4a66      	ldr	r2, [pc, #408]	; (8007634 <HAL_RCC_OscConfig+0x4cc>)
 800749c:	f023 0304 	bic.w	r3, r3, #4
 80074a0:	6713      	str	r3, [r2, #112]	; 0x70
 80074a2:	e01c      	b.n	80074de <HAL_RCC_OscConfig+0x376>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	2b05      	cmp	r3, #5
 80074aa:	d10c      	bne.n	80074c6 <HAL_RCC_OscConfig+0x35e>
 80074ac:	4b61      	ldr	r3, [pc, #388]	; (8007634 <HAL_RCC_OscConfig+0x4cc>)
 80074ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074b0:	4a60      	ldr	r2, [pc, #384]	; (8007634 <HAL_RCC_OscConfig+0x4cc>)
 80074b2:	f043 0304 	orr.w	r3, r3, #4
 80074b6:	6713      	str	r3, [r2, #112]	; 0x70
 80074b8:	4b5e      	ldr	r3, [pc, #376]	; (8007634 <HAL_RCC_OscConfig+0x4cc>)
 80074ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074bc:	4a5d      	ldr	r2, [pc, #372]	; (8007634 <HAL_RCC_OscConfig+0x4cc>)
 80074be:	f043 0301 	orr.w	r3, r3, #1
 80074c2:	6713      	str	r3, [r2, #112]	; 0x70
 80074c4:	e00b      	b.n	80074de <HAL_RCC_OscConfig+0x376>
 80074c6:	4b5b      	ldr	r3, [pc, #364]	; (8007634 <HAL_RCC_OscConfig+0x4cc>)
 80074c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ca:	4a5a      	ldr	r2, [pc, #360]	; (8007634 <HAL_RCC_OscConfig+0x4cc>)
 80074cc:	f023 0301 	bic.w	r3, r3, #1
 80074d0:	6713      	str	r3, [r2, #112]	; 0x70
 80074d2:	4b58      	ldr	r3, [pc, #352]	; (8007634 <HAL_RCC_OscConfig+0x4cc>)
 80074d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074d6:	4a57      	ldr	r2, [pc, #348]	; (8007634 <HAL_RCC_OscConfig+0x4cc>)
 80074d8:	f023 0304 	bic.w	r3, r3, #4
 80074dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d015      	beq.n	8007512 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074e6:	f7fc fb3d 	bl	8003b64 <HAL_GetTick>
 80074ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074ec:	e00a      	b.n	8007504 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074ee:	f7fc fb39 	bl	8003b64 <HAL_GetTick>
 80074f2:	4602      	mov	r2, r0
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	1ad3      	subs	r3, r2, r3
 80074f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d901      	bls.n	8007504 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007500:	2303      	movs	r3, #3
 8007502:	e0ce      	b.n	80076a2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007504:	4b4b      	ldr	r3, [pc, #300]	; (8007634 <HAL_RCC_OscConfig+0x4cc>)
 8007506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007508:	f003 0302 	and.w	r3, r3, #2
 800750c:	2b00      	cmp	r3, #0
 800750e:	d0ee      	beq.n	80074ee <HAL_RCC_OscConfig+0x386>
 8007510:	e014      	b.n	800753c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007512:	f7fc fb27 	bl	8003b64 <HAL_GetTick>
 8007516:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007518:	e00a      	b.n	8007530 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800751a:	f7fc fb23 	bl	8003b64 <HAL_GetTick>
 800751e:	4602      	mov	r2, r0
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	1ad3      	subs	r3, r2, r3
 8007524:	f241 3288 	movw	r2, #5000	; 0x1388
 8007528:	4293      	cmp	r3, r2
 800752a:	d901      	bls.n	8007530 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800752c:	2303      	movs	r3, #3
 800752e:	e0b8      	b.n	80076a2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007530:	4b40      	ldr	r3, [pc, #256]	; (8007634 <HAL_RCC_OscConfig+0x4cc>)
 8007532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007534:	f003 0302 	and.w	r3, r3, #2
 8007538:	2b00      	cmp	r3, #0
 800753a:	d1ee      	bne.n	800751a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800753c:	7dfb      	ldrb	r3, [r7, #23]
 800753e:	2b01      	cmp	r3, #1
 8007540:	d105      	bne.n	800754e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007542:	4b3c      	ldr	r3, [pc, #240]	; (8007634 <HAL_RCC_OscConfig+0x4cc>)
 8007544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007546:	4a3b      	ldr	r2, [pc, #236]	; (8007634 <HAL_RCC_OscConfig+0x4cc>)
 8007548:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800754c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	699b      	ldr	r3, [r3, #24]
 8007552:	2b00      	cmp	r3, #0
 8007554:	f000 80a4 	beq.w	80076a0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007558:	4b36      	ldr	r3, [pc, #216]	; (8007634 <HAL_RCC_OscConfig+0x4cc>)
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	f003 030c 	and.w	r3, r3, #12
 8007560:	2b08      	cmp	r3, #8
 8007562:	d06b      	beq.n	800763c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	699b      	ldr	r3, [r3, #24]
 8007568:	2b02      	cmp	r3, #2
 800756a:	d149      	bne.n	8007600 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800756c:	4b31      	ldr	r3, [pc, #196]	; (8007634 <HAL_RCC_OscConfig+0x4cc>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a30      	ldr	r2, [pc, #192]	; (8007634 <HAL_RCC_OscConfig+0x4cc>)
 8007572:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007576:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007578:	f7fc faf4 	bl	8003b64 <HAL_GetTick>
 800757c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800757e:	e008      	b.n	8007592 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007580:	f7fc faf0 	bl	8003b64 <HAL_GetTick>
 8007584:	4602      	mov	r2, r0
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	1ad3      	subs	r3, r2, r3
 800758a:	2b02      	cmp	r3, #2
 800758c:	d901      	bls.n	8007592 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800758e:	2303      	movs	r3, #3
 8007590:	e087      	b.n	80076a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007592:	4b28      	ldr	r3, [pc, #160]	; (8007634 <HAL_RCC_OscConfig+0x4cc>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800759a:	2b00      	cmp	r3, #0
 800759c:	d1f0      	bne.n	8007580 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	69da      	ldr	r2, [r3, #28]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6a1b      	ldr	r3, [r3, #32]
 80075a6:	431a      	orrs	r2, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ac:	019b      	lsls	r3, r3, #6
 80075ae:	431a      	orrs	r2, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b4:	085b      	lsrs	r3, r3, #1
 80075b6:	3b01      	subs	r3, #1
 80075b8:	041b      	lsls	r3, r3, #16
 80075ba:	431a      	orrs	r2, r3
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c0:	061b      	lsls	r3, r3, #24
 80075c2:	4313      	orrs	r3, r2
 80075c4:	4a1b      	ldr	r2, [pc, #108]	; (8007634 <HAL_RCC_OscConfig+0x4cc>)
 80075c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80075ca:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80075cc:	4b19      	ldr	r3, [pc, #100]	; (8007634 <HAL_RCC_OscConfig+0x4cc>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a18      	ldr	r2, [pc, #96]	; (8007634 <HAL_RCC_OscConfig+0x4cc>)
 80075d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80075d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075d8:	f7fc fac4 	bl	8003b64 <HAL_GetTick>
 80075dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075de:	e008      	b.n	80075f2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075e0:	f7fc fac0 	bl	8003b64 <HAL_GetTick>
 80075e4:	4602      	mov	r2, r0
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	1ad3      	subs	r3, r2, r3
 80075ea:	2b02      	cmp	r3, #2
 80075ec:	d901      	bls.n	80075f2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80075ee:	2303      	movs	r3, #3
 80075f0:	e057      	b.n	80076a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075f2:	4b10      	ldr	r3, [pc, #64]	; (8007634 <HAL_RCC_OscConfig+0x4cc>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d0f0      	beq.n	80075e0 <HAL_RCC_OscConfig+0x478>
 80075fe:	e04f      	b.n	80076a0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007600:	4b0c      	ldr	r3, [pc, #48]	; (8007634 <HAL_RCC_OscConfig+0x4cc>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a0b      	ldr	r2, [pc, #44]	; (8007634 <HAL_RCC_OscConfig+0x4cc>)
 8007606:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800760a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800760c:	f7fc faaa 	bl	8003b64 <HAL_GetTick>
 8007610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007612:	e008      	b.n	8007626 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007614:	f7fc faa6 	bl	8003b64 <HAL_GetTick>
 8007618:	4602      	mov	r2, r0
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	2b02      	cmp	r3, #2
 8007620:	d901      	bls.n	8007626 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007622:	2303      	movs	r3, #3
 8007624:	e03d      	b.n	80076a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007626:	4b03      	ldr	r3, [pc, #12]	; (8007634 <HAL_RCC_OscConfig+0x4cc>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800762e:	2b00      	cmp	r3, #0
 8007630:	d1f0      	bne.n	8007614 <HAL_RCC_OscConfig+0x4ac>
 8007632:	e035      	b.n	80076a0 <HAL_RCC_OscConfig+0x538>
 8007634:	40023800 	.word	0x40023800
 8007638:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800763c:	4b1b      	ldr	r3, [pc, #108]	; (80076ac <HAL_RCC_OscConfig+0x544>)
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	699b      	ldr	r3, [r3, #24]
 8007646:	2b01      	cmp	r3, #1
 8007648:	d028      	beq.n	800769c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007654:	429a      	cmp	r2, r3
 8007656:	d121      	bne.n	800769c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007662:	429a      	cmp	r2, r3
 8007664:	d11a      	bne.n	800769c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007666:	68fa      	ldr	r2, [r7, #12]
 8007668:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800766c:	4013      	ands	r3, r2
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007672:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007674:	4293      	cmp	r3, r2
 8007676:	d111      	bne.n	800769c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007682:	085b      	lsrs	r3, r3, #1
 8007684:	3b01      	subs	r3, #1
 8007686:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007688:	429a      	cmp	r2, r3
 800768a:	d107      	bne.n	800769c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007696:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007698:	429a      	cmp	r2, r3
 800769a:	d001      	beq.n	80076a0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	e000      	b.n	80076a2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3718      	adds	r7, #24
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop
 80076ac:	40023800 	.word	0x40023800

080076b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80076ba:	2300      	movs	r3, #0
 80076bc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d101      	bne.n	80076c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	e0d0      	b.n	800786a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80076c8:	4b6a      	ldr	r3, [pc, #424]	; (8007874 <HAL_RCC_ClockConfig+0x1c4>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f003 030f 	and.w	r3, r3, #15
 80076d0:	683a      	ldr	r2, [r7, #0]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d910      	bls.n	80076f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076d6:	4b67      	ldr	r3, [pc, #412]	; (8007874 <HAL_RCC_ClockConfig+0x1c4>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f023 020f 	bic.w	r2, r3, #15
 80076de:	4965      	ldr	r1, [pc, #404]	; (8007874 <HAL_RCC_ClockConfig+0x1c4>)
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	4313      	orrs	r3, r2
 80076e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076e6:	4b63      	ldr	r3, [pc, #396]	; (8007874 <HAL_RCC_ClockConfig+0x1c4>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f003 030f 	and.w	r3, r3, #15
 80076ee:	683a      	ldr	r2, [r7, #0]
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d001      	beq.n	80076f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	e0b8      	b.n	800786a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f003 0302 	and.w	r3, r3, #2
 8007700:	2b00      	cmp	r3, #0
 8007702:	d020      	beq.n	8007746 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f003 0304 	and.w	r3, r3, #4
 800770c:	2b00      	cmp	r3, #0
 800770e:	d005      	beq.n	800771c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007710:	4b59      	ldr	r3, [pc, #356]	; (8007878 <HAL_RCC_ClockConfig+0x1c8>)
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	4a58      	ldr	r2, [pc, #352]	; (8007878 <HAL_RCC_ClockConfig+0x1c8>)
 8007716:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800771a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f003 0308 	and.w	r3, r3, #8
 8007724:	2b00      	cmp	r3, #0
 8007726:	d005      	beq.n	8007734 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007728:	4b53      	ldr	r3, [pc, #332]	; (8007878 <HAL_RCC_ClockConfig+0x1c8>)
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	4a52      	ldr	r2, [pc, #328]	; (8007878 <HAL_RCC_ClockConfig+0x1c8>)
 800772e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007732:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007734:	4b50      	ldr	r3, [pc, #320]	; (8007878 <HAL_RCC_ClockConfig+0x1c8>)
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	494d      	ldr	r1, [pc, #308]	; (8007878 <HAL_RCC_ClockConfig+0x1c8>)
 8007742:	4313      	orrs	r3, r2
 8007744:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f003 0301 	and.w	r3, r3, #1
 800774e:	2b00      	cmp	r3, #0
 8007750:	d040      	beq.n	80077d4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	2b01      	cmp	r3, #1
 8007758:	d107      	bne.n	800776a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800775a:	4b47      	ldr	r3, [pc, #284]	; (8007878 <HAL_RCC_ClockConfig+0x1c8>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007762:	2b00      	cmp	r3, #0
 8007764:	d115      	bne.n	8007792 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	e07f      	b.n	800786a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	2b02      	cmp	r3, #2
 8007770:	d107      	bne.n	8007782 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007772:	4b41      	ldr	r3, [pc, #260]	; (8007878 <HAL_RCC_ClockConfig+0x1c8>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800777a:	2b00      	cmp	r3, #0
 800777c:	d109      	bne.n	8007792 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	e073      	b.n	800786a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007782:	4b3d      	ldr	r3, [pc, #244]	; (8007878 <HAL_RCC_ClockConfig+0x1c8>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f003 0302 	and.w	r3, r3, #2
 800778a:	2b00      	cmp	r3, #0
 800778c:	d101      	bne.n	8007792 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	e06b      	b.n	800786a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007792:	4b39      	ldr	r3, [pc, #228]	; (8007878 <HAL_RCC_ClockConfig+0x1c8>)
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	f023 0203 	bic.w	r2, r3, #3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	4936      	ldr	r1, [pc, #216]	; (8007878 <HAL_RCC_ClockConfig+0x1c8>)
 80077a0:	4313      	orrs	r3, r2
 80077a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077a4:	f7fc f9de 	bl	8003b64 <HAL_GetTick>
 80077a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077aa:	e00a      	b.n	80077c2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077ac:	f7fc f9da 	bl	8003b64 <HAL_GetTick>
 80077b0:	4602      	mov	r2, r0
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	1ad3      	subs	r3, r2, r3
 80077b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d901      	bls.n	80077c2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80077be:	2303      	movs	r3, #3
 80077c0:	e053      	b.n	800786a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077c2:	4b2d      	ldr	r3, [pc, #180]	; (8007878 <HAL_RCC_ClockConfig+0x1c8>)
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	f003 020c 	and.w	r2, r3, #12
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	009b      	lsls	r3, r3, #2
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d1eb      	bne.n	80077ac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80077d4:	4b27      	ldr	r3, [pc, #156]	; (8007874 <HAL_RCC_ClockConfig+0x1c4>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 030f 	and.w	r3, r3, #15
 80077dc:	683a      	ldr	r2, [r7, #0]
 80077de:	429a      	cmp	r2, r3
 80077e0:	d210      	bcs.n	8007804 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077e2:	4b24      	ldr	r3, [pc, #144]	; (8007874 <HAL_RCC_ClockConfig+0x1c4>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f023 020f 	bic.w	r2, r3, #15
 80077ea:	4922      	ldr	r1, [pc, #136]	; (8007874 <HAL_RCC_ClockConfig+0x1c4>)
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	4313      	orrs	r3, r2
 80077f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077f2:	4b20      	ldr	r3, [pc, #128]	; (8007874 <HAL_RCC_ClockConfig+0x1c4>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f003 030f 	and.w	r3, r3, #15
 80077fa:	683a      	ldr	r2, [r7, #0]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d001      	beq.n	8007804 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	e032      	b.n	800786a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f003 0304 	and.w	r3, r3, #4
 800780c:	2b00      	cmp	r3, #0
 800780e:	d008      	beq.n	8007822 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007810:	4b19      	ldr	r3, [pc, #100]	; (8007878 <HAL_RCC_ClockConfig+0x1c8>)
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	68db      	ldr	r3, [r3, #12]
 800781c:	4916      	ldr	r1, [pc, #88]	; (8007878 <HAL_RCC_ClockConfig+0x1c8>)
 800781e:	4313      	orrs	r3, r2
 8007820:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f003 0308 	and.w	r3, r3, #8
 800782a:	2b00      	cmp	r3, #0
 800782c:	d009      	beq.n	8007842 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800782e:	4b12      	ldr	r3, [pc, #72]	; (8007878 <HAL_RCC_ClockConfig+0x1c8>)
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	691b      	ldr	r3, [r3, #16]
 800783a:	00db      	lsls	r3, r3, #3
 800783c:	490e      	ldr	r1, [pc, #56]	; (8007878 <HAL_RCC_ClockConfig+0x1c8>)
 800783e:	4313      	orrs	r3, r2
 8007840:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007842:	f000 f821 	bl	8007888 <HAL_RCC_GetSysClockFreq>
 8007846:	4601      	mov	r1, r0
 8007848:	4b0b      	ldr	r3, [pc, #44]	; (8007878 <HAL_RCC_ClockConfig+0x1c8>)
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	091b      	lsrs	r3, r3, #4
 800784e:	f003 030f 	and.w	r3, r3, #15
 8007852:	4a0a      	ldr	r2, [pc, #40]	; (800787c <HAL_RCC_ClockConfig+0x1cc>)
 8007854:	5cd3      	ldrb	r3, [r2, r3]
 8007856:	fa21 f303 	lsr.w	r3, r1, r3
 800785a:	4a09      	ldr	r2, [pc, #36]	; (8007880 <HAL_RCC_ClockConfig+0x1d0>)
 800785c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800785e:	4b09      	ldr	r3, [pc, #36]	; (8007884 <HAL_RCC_ClockConfig+0x1d4>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4618      	mov	r0, r3
 8007864:	f7fb ffc8 	bl	80037f8 <HAL_InitTick>

  return HAL_OK;
 8007868:	2300      	movs	r3, #0
}
 800786a:	4618      	mov	r0, r3
 800786c:	3710      	adds	r7, #16
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
 8007872:	bf00      	nop
 8007874:	40023c00 	.word	0x40023c00
 8007878:	40023800 	.word	0x40023800
 800787c:	0802c208 	.word	0x0802c208
 8007880:	20000018 	.word	0x20000018
 8007884:	2000001c 	.word	0x2000001c

08007888 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800788a:	b085      	sub	sp, #20
 800788c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800788e:	2300      	movs	r3, #0
 8007890:	607b      	str	r3, [r7, #4]
 8007892:	2300      	movs	r3, #0
 8007894:	60fb      	str	r3, [r7, #12]
 8007896:	2300      	movs	r3, #0
 8007898:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800789a:	2300      	movs	r3, #0
 800789c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800789e:	4b50      	ldr	r3, [pc, #320]	; (80079e0 <HAL_RCC_GetSysClockFreq+0x158>)
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	f003 030c 	and.w	r3, r3, #12
 80078a6:	2b04      	cmp	r3, #4
 80078a8:	d007      	beq.n	80078ba <HAL_RCC_GetSysClockFreq+0x32>
 80078aa:	2b08      	cmp	r3, #8
 80078ac:	d008      	beq.n	80078c0 <HAL_RCC_GetSysClockFreq+0x38>
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	f040 808d 	bne.w	80079ce <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80078b4:	4b4b      	ldr	r3, [pc, #300]	; (80079e4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80078b6:	60bb      	str	r3, [r7, #8]
      break;
 80078b8:	e08c      	b.n	80079d4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80078ba:	4b4b      	ldr	r3, [pc, #300]	; (80079e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80078bc:	60bb      	str	r3, [r7, #8]
      break;
 80078be:	e089      	b.n	80079d4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80078c0:	4b47      	ldr	r3, [pc, #284]	; (80079e0 <HAL_RCC_GetSysClockFreq+0x158>)
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078c8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80078ca:	4b45      	ldr	r3, [pc, #276]	; (80079e0 <HAL_RCC_GetSysClockFreq+0x158>)
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d023      	beq.n	800791e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80078d6:	4b42      	ldr	r3, [pc, #264]	; (80079e0 <HAL_RCC_GetSysClockFreq+0x158>)
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	099b      	lsrs	r3, r3, #6
 80078dc:	f04f 0400 	mov.w	r4, #0
 80078e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80078e4:	f04f 0200 	mov.w	r2, #0
 80078e8:	ea03 0501 	and.w	r5, r3, r1
 80078ec:	ea04 0602 	and.w	r6, r4, r2
 80078f0:	4a3d      	ldr	r2, [pc, #244]	; (80079e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80078f2:	fb02 f106 	mul.w	r1, r2, r6
 80078f6:	2200      	movs	r2, #0
 80078f8:	fb02 f205 	mul.w	r2, r2, r5
 80078fc:	440a      	add	r2, r1
 80078fe:	493a      	ldr	r1, [pc, #232]	; (80079e8 <HAL_RCC_GetSysClockFreq+0x160>)
 8007900:	fba5 0101 	umull	r0, r1, r5, r1
 8007904:	1853      	adds	r3, r2, r1
 8007906:	4619      	mov	r1, r3
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f04f 0400 	mov.w	r4, #0
 800790e:	461a      	mov	r2, r3
 8007910:	4623      	mov	r3, r4
 8007912:	f7f8 ff61 	bl	80007d8 <__aeabi_uldivmod>
 8007916:	4603      	mov	r3, r0
 8007918:	460c      	mov	r4, r1
 800791a:	60fb      	str	r3, [r7, #12]
 800791c:	e049      	b.n	80079b2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800791e:	4b30      	ldr	r3, [pc, #192]	; (80079e0 <HAL_RCC_GetSysClockFreq+0x158>)
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	099b      	lsrs	r3, r3, #6
 8007924:	f04f 0400 	mov.w	r4, #0
 8007928:	f240 11ff 	movw	r1, #511	; 0x1ff
 800792c:	f04f 0200 	mov.w	r2, #0
 8007930:	ea03 0501 	and.w	r5, r3, r1
 8007934:	ea04 0602 	and.w	r6, r4, r2
 8007938:	4629      	mov	r1, r5
 800793a:	4632      	mov	r2, r6
 800793c:	f04f 0300 	mov.w	r3, #0
 8007940:	f04f 0400 	mov.w	r4, #0
 8007944:	0154      	lsls	r4, r2, #5
 8007946:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800794a:	014b      	lsls	r3, r1, #5
 800794c:	4619      	mov	r1, r3
 800794e:	4622      	mov	r2, r4
 8007950:	1b49      	subs	r1, r1, r5
 8007952:	eb62 0206 	sbc.w	r2, r2, r6
 8007956:	f04f 0300 	mov.w	r3, #0
 800795a:	f04f 0400 	mov.w	r4, #0
 800795e:	0194      	lsls	r4, r2, #6
 8007960:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007964:	018b      	lsls	r3, r1, #6
 8007966:	1a5b      	subs	r3, r3, r1
 8007968:	eb64 0402 	sbc.w	r4, r4, r2
 800796c:	f04f 0100 	mov.w	r1, #0
 8007970:	f04f 0200 	mov.w	r2, #0
 8007974:	00e2      	lsls	r2, r4, #3
 8007976:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800797a:	00d9      	lsls	r1, r3, #3
 800797c:	460b      	mov	r3, r1
 800797e:	4614      	mov	r4, r2
 8007980:	195b      	adds	r3, r3, r5
 8007982:	eb44 0406 	adc.w	r4, r4, r6
 8007986:	f04f 0100 	mov.w	r1, #0
 800798a:	f04f 0200 	mov.w	r2, #0
 800798e:	02a2      	lsls	r2, r4, #10
 8007990:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007994:	0299      	lsls	r1, r3, #10
 8007996:	460b      	mov	r3, r1
 8007998:	4614      	mov	r4, r2
 800799a:	4618      	mov	r0, r3
 800799c:	4621      	mov	r1, r4
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f04f 0400 	mov.w	r4, #0
 80079a4:	461a      	mov	r2, r3
 80079a6:	4623      	mov	r3, r4
 80079a8:	f7f8 ff16 	bl	80007d8 <__aeabi_uldivmod>
 80079ac:	4603      	mov	r3, r0
 80079ae:	460c      	mov	r4, r1
 80079b0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80079b2:	4b0b      	ldr	r3, [pc, #44]	; (80079e0 <HAL_RCC_GetSysClockFreq+0x158>)
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	0c1b      	lsrs	r3, r3, #16
 80079b8:	f003 0303 	and.w	r3, r3, #3
 80079bc:	3301      	adds	r3, #1
 80079be:	005b      	lsls	r3, r3, #1
 80079c0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80079c2:	68fa      	ldr	r2, [r7, #12]
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80079ca:	60bb      	str	r3, [r7, #8]
      break;
 80079cc:	e002      	b.n	80079d4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80079ce:	4b05      	ldr	r3, [pc, #20]	; (80079e4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80079d0:	60bb      	str	r3, [r7, #8]
      break;
 80079d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80079d4:	68bb      	ldr	r3, [r7, #8]
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3714      	adds	r7, #20
 80079da:	46bd      	mov	sp, r7
 80079dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079de:	bf00      	nop
 80079e0:	40023800 	.word	0x40023800
 80079e4:	00f42400 	.word	0x00f42400
 80079e8:	017d7840 	.word	0x017d7840

080079ec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80079ec:	b480      	push	{r7}
 80079ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80079f0:	4b03      	ldr	r3, [pc, #12]	; (8007a00 <HAL_RCC_GetHCLKFreq+0x14>)
 80079f2:	681b      	ldr	r3, [r3, #0]
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr
 80079fe:	bf00      	nop
 8007a00:	20000018 	.word	0x20000018

08007a04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007a08:	f7ff fff0 	bl	80079ec <HAL_RCC_GetHCLKFreq>
 8007a0c:	4601      	mov	r1, r0
 8007a0e:	4b05      	ldr	r3, [pc, #20]	; (8007a24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	0a9b      	lsrs	r3, r3, #10
 8007a14:	f003 0307 	and.w	r3, r3, #7
 8007a18:	4a03      	ldr	r2, [pc, #12]	; (8007a28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a1a:	5cd3      	ldrb	r3, [r2, r3]
 8007a1c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	40023800 	.word	0x40023800
 8007a28:	0802c218 	.word	0x0802c218

08007a2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007a30:	f7ff ffdc 	bl	80079ec <HAL_RCC_GetHCLKFreq>
 8007a34:	4601      	mov	r1, r0
 8007a36:	4b05      	ldr	r3, [pc, #20]	; (8007a4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	0b5b      	lsrs	r3, r3, #13
 8007a3c:	f003 0307 	and.w	r3, r3, #7
 8007a40:	4a03      	ldr	r2, [pc, #12]	; (8007a50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a42:	5cd3      	ldrb	r3, [r2, r3]
 8007a44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	40023800 	.word	0x40023800
 8007a50:	0802c218 	.word	0x0802c218

08007a54 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	220f      	movs	r2, #15
 8007a62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007a64:	4b12      	ldr	r3, [pc, #72]	; (8007ab0 <HAL_RCC_GetClockConfig+0x5c>)
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	f003 0203 	and.w	r2, r3, #3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007a70:	4b0f      	ldr	r3, [pc, #60]	; (8007ab0 <HAL_RCC_GetClockConfig+0x5c>)
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007a7c:	4b0c      	ldr	r3, [pc, #48]	; (8007ab0 <HAL_RCC_GetClockConfig+0x5c>)
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007a88:	4b09      	ldr	r3, [pc, #36]	; (8007ab0 <HAL_RCC_GetClockConfig+0x5c>)
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	08db      	lsrs	r3, r3, #3
 8007a8e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007a96:	4b07      	ldr	r3, [pc, #28]	; (8007ab4 <HAL_RCC_GetClockConfig+0x60>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f003 020f 	and.w	r2, r3, #15
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	601a      	str	r2, [r3, #0]
}
 8007aa2:	bf00      	nop
 8007aa4:	370c      	adds	r7, #12
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr
 8007aae:	bf00      	nop
 8007ab0:	40023800 	.word	0x40023800
 8007ab4:	40023c00 	.word	0x40023c00

08007ab8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b088      	sub	sp, #32
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007acc:	2300      	movs	r3, #0
 8007ace:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f003 0301 	and.w	r3, r3, #1
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d012      	beq.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007ae0:	4b69      	ldr	r3, [pc, #420]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	4a68      	ldr	r2, [pc, #416]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ae6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007aea:	6093      	str	r3, [r2, #8]
 8007aec:	4b66      	ldr	r3, [pc, #408]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007aee:	689a      	ldr	r2, [r3, #8]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007af4:	4964      	ldr	r1, [pc, #400]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007af6:	4313      	orrs	r3, r2
 8007af8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d101      	bne.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007b02:	2301      	movs	r3, #1
 8007b04:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d017      	beq.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007b12:	4b5d      	ldr	r3, [pc, #372]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b20:	4959      	ldr	r1, [pc, #356]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b22:	4313      	orrs	r3, r2
 8007b24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b30:	d101      	bne.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007b32:	2301      	movs	r3, #1
 8007b34:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d101      	bne.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d017      	beq.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007b4e:	4b4e      	ldr	r3, [pc, #312]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b54:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b5c:	494a      	ldr	r1, [pc, #296]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b6c:	d101      	bne.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d101      	bne.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d001      	beq.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f003 0320 	and.w	r3, r3, #32
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	f000 808b 	beq.w	8007cb2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007b9c:	4b3a      	ldr	r3, [pc, #232]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba0:	4a39      	ldr	r2, [pc, #228]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ba6:	6413      	str	r3, [r2, #64]	; 0x40
 8007ba8:	4b37      	ldr	r3, [pc, #220]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bb0:	60bb      	str	r3, [r7, #8]
 8007bb2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007bb4:	4b35      	ldr	r3, [pc, #212]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a34      	ldr	r2, [pc, #208]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007bba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bc0:	f7fb ffd0 	bl	8003b64 <HAL_GetTick>
 8007bc4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007bc6:	e008      	b.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007bc8:	f7fb ffcc 	bl	8003b64 <HAL_GetTick>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	1ad3      	subs	r3, r2, r3
 8007bd2:	2b64      	cmp	r3, #100	; 0x64
 8007bd4:	d901      	bls.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007bd6:	2303      	movs	r3, #3
 8007bd8:	e355      	b.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007bda:	4b2c      	ldr	r3, [pc, #176]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d0f0      	beq.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007be6:	4b28      	ldr	r3, [pc, #160]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d035      	beq.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bfe:	693a      	ldr	r2, [r7, #16]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d02e      	beq.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007c04:	4b20      	ldr	r3, [pc, #128]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c0c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007c0e:	4b1e      	ldr	r3, [pc, #120]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c12:	4a1d      	ldr	r2, [pc, #116]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c18:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007c1a:	4b1b      	ldr	r3, [pc, #108]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c1e:	4a1a      	ldr	r2, [pc, #104]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c24:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007c26:	4a18      	ldr	r2, [pc, #96]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007c2c:	4b16      	ldr	r3, [pc, #88]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c30:	f003 0301 	and.w	r3, r3, #1
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d114      	bne.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c38:	f7fb ff94 	bl	8003b64 <HAL_GetTick>
 8007c3c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c3e:	e00a      	b.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c40:	f7fb ff90 	bl	8003b64 <HAL_GetTick>
 8007c44:	4602      	mov	r2, r0
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	1ad3      	subs	r3, r2, r3
 8007c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d901      	bls.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007c52:	2303      	movs	r3, #3
 8007c54:	e317      	b.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c56:	4b0c      	ldr	r3, [pc, #48]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c5a:	f003 0302 	and.w	r3, r3, #2
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d0ee      	beq.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c6e:	d111      	bne.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007c70:	4b05      	ldr	r3, [pc, #20]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007c7c:	4b04      	ldr	r3, [pc, #16]	; (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007c7e:	400b      	ands	r3, r1
 8007c80:	4901      	ldr	r1, [pc, #4]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c82:	4313      	orrs	r3, r2
 8007c84:	608b      	str	r3, [r1, #8]
 8007c86:	e00b      	b.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007c88:	40023800 	.word	0x40023800
 8007c8c:	40007000 	.word	0x40007000
 8007c90:	0ffffcff 	.word	0x0ffffcff
 8007c94:	4bb0      	ldr	r3, [pc, #704]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	4aaf      	ldr	r2, [pc, #700]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007c9a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007c9e:	6093      	str	r3, [r2, #8]
 8007ca0:	4bad      	ldr	r3, [pc, #692]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007ca2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ca8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007cac:	49aa      	ldr	r1, [pc, #680]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f003 0310 	and.w	r3, r3, #16
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d010      	beq.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007cbe:	4ba6      	ldr	r3, [pc, #664]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007cc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cc4:	4aa4      	ldr	r2, [pc, #656]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007cc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007cca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007cce:	4ba2      	ldr	r3, [pc, #648]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007cd0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd8:	499f      	ldr	r1, [pc, #636]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d00a      	beq.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007cec:	4b9a      	ldr	r3, [pc, #616]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cf2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cfa:	4997      	ldr	r1, [pc, #604]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00a      	beq.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007d0e:	4b92      	ldr	r3, [pc, #584]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d14:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d1c:	498e      	ldr	r1, [pc, #568]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d00a      	beq.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007d30:	4b89      	ldr	r3, [pc, #548]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d3e:	4986      	ldr	r1, [pc, #536]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d40:	4313      	orrs	r3, r2
 8007d42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d00a      	beq.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007d52:	4b81      	ldr	r3, [pc, #516]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d58:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d60:	497d      	ldr	r1, [pc, #500]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d62:	4313      	orrs	r3, r2
 8007d64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d00a      	beq.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007d74:	4b78      	ldr	r3, [pc, #480]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d7a:	f023 0203 	bic.w	r2, r3, #3
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d82:	4975      	ldr	r1, [pc, #468]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d84:	4313      	orrs	r3, r2
 8007d86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d00a      	beq.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007d96:	4b70      	ldr	r3, [pc, #448]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d9c:	f023 020c 	bic.w	r2, r3, #12
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007da4:	496c      	ldr	r1, [pc, #432]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007da6:	4313      	orrs	r3, r2
 8007da8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d00a      	beq.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007db8:	4b67      	ldr	r3, [pc, #412]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dbe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dc6:	4964      	ldr	r1, [pc, #400]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d00a      	beq.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007dda:	4b5f      	ldr	r3, [pc, #380]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007de0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007de8:	495b      	ldr	r1, [pc, #364]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007dea:	4313      	orrs	r3, r2
 8007dec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d00a      	beq.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007dfc:	4b56      	ldr	r3, [pc, #344]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e02:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e0a:	4953      	ldr	r1, [pc, #332]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d00a      	beq.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007e1e:	4b4e      	ldr	r3, [pc, #312]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e24:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e2c:	494a      	ldr	r1, [pc, #296]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d00a      	beq.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007e40:	4b45      	ldr	r3, [pc, #276]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e46:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e4e:	4942      	ldr	r1, [pc, #264]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007e50:	4313      	orrs	r3, r2
 8007e52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d00a      	beq.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007e62:	4b3d      	ldr	r3, [pc, #244]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e68:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e70:	4939      	ldr	r1, [pc, #228]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007e72:	4313      	orrs	r3, r2
 8007e74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d00a      	beq.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007e84:	4b34      	ldr	r3, [pc, #208]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e8a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e92:	4931      	ldr	r1, [pc, #196]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007e94:	4313      	orrs	r3, r2
 8007e96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d011      	beq.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007ea6:	4b2c      	ldr	r3, [pc, #176]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eac:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007eb4:	4928      	ldr	r1, [pc, #160]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ec0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ec4:	d101      	bne.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f003 0308 	and.w	r3, r3, #8
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d001      	beq.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d00a      	beq.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007ee6:	4b1c      	ldr	r3, [pc, #112]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ef4:	4918      	ldr	r1, [pc, #96]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d00b      	beq.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007f08:	4b13      	ldr	r3, [pc, #76]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f0e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f18:	490f      	ldr	r1, [pc, #60]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d005      	beq.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f2e:	f040 80d8 	bne.w	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007f32:	4b09      	ldr	r3, [pc, #36]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a08      	ldr	r2, [pc, #32]	; (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007f38:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007f3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f3e:	f7fb fe11 	bl	8003b64 <HAL_GetTick>
 8007f42:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007f44:	e00a      	b.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007f46:	f7fb fe0d 	bl	8003b64 <HAL_GetTick>
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	1ad3      	subs	r3, r2, r3
 8007f50:	2b64      	cmp	r3, #100	; 0x64
 8007f52:	d903      	bls.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007f54:	2303      	movs	r3, #3
 8007f56:	e196      	b.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8007f58:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007f5c:	4b6c      	ldr	r3, [pc, #432]	; (8008110 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d1ee      	bne.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f003 0301 	and.w	r3, r3, #1
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d021      	beq.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d11d      	bne.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007f7c:	4b64      	ldr	r3, [pc, #400]	; (8008110 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007f7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f82:	0c1b      	lsrs	r3, r3, #16
 8007f84:	f003 0303 	and.w	r3, r3, #3
 8007f88:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007f8a:	4b61      	ldr	r3, [pc, #388]	; (8008110 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007f8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f90:	0e1b      	lsrs	r3, r3, #24
 8007f92:	f003 030f 	and.w	r3, r3, #15
 8007f96:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	019a      	lsls	r2, r3, #6
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	041b      	lsls	r3, r3, #16
 8007fa2:	431a      	orrs	r2, r3
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	061b      	lsls	r3, r3, #24
 8007fa8:	431a      	orrs	r2, r3
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	071b      	lsls	r3, r3, #28
 8007fb0:	4957      	ldr	r1, [pc, #348]	; (8008110 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d004      	beq.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x516>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fcc:	d00a      	beq.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d02e      	beq.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007fe2:	d129      	bne.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007fe4:	4b4a      	ldr	r3, [pc, #296]	; (8008110 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007fe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fea:	0c1b      	lsrs	r3, r3, #16
 8007fec:	f003 0303 	and.w	r3, r3, #3
 8007ff0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007ff2:	4b47      	ldr	r3, [pc, #284]	; (8008110 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007ff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ff8:	0f1b      	lsrs	r3, r3, #28
 8007ffa:	f003 0307 	and.w	r3, r3, #7
 8007ffe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	019a      	lsls	r2, r3, #6
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	041b      	lsls	r3, r3, #16
 800800a:	431a      	orrs	r2, r3
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	68db      	ldr	r3, [r3, #12]
 8008010:	061b      	lsls	r3, r3, #24
 8008012:	431a      	orrs	r2, r3
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	071b      	lsls	r3, r3, #28
 8008018:	493d      	ldr	r1, [pc, #244]	; (8008110 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800801a:	4313      	orrs	r3, r2
 800801c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008020:	4b3b      	ldr	r3, [pc, #236]	; (8008110 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008022:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008026:	f023 021f 	bic.w	r2, r3, #31
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800802e:	3b01      	subs	r3, #1
 8008030:	4937      	ldr	r1, [pc, #220]	; (8008110 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008032:	4313      	orrs	r3, r2
 8008034:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008040:	2b00      	cmp	r3, #0
 8008042:	d01d      	beq.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008044:	4b32      	ldr	r3, [pc, #200]	; (8008110 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008046:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800804a:	0e1b      	lsrs	r3, r3, #24
 800804c:	f003 030f 	and.w	r3, r3, #15
 8008050:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008052:	4b2f      	ldr	r3, [pc, #188]	; (8008110 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008054:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008058:	0f1b      	lsrs	r3, r3, #28
 800805a:	f003 0307 	and.w	r3, r3, #7
 800805e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	019a      	lsls	r2, r3, #6
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	691b      	ldr	r3, [r3, #16]
 800806a:	041b      	lsls	r3, r3, #16
 800806c:	431a      	orrs	r2, r3
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	061b      	lsls	r3, r3, #24
 8008072:	431a      	orrs	r2, r3
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	071b      	lsls	r3, r3, #28
 8008078:	4925      	ldr	r1, [pc, #148]	; (8008110 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800807a:	4313      	orrs	r3, r2
 800807c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008088:	2b00      	cmp	r3, #0
 800808a:	d011      	beq.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	019a      	lsls	r2, r3, #6
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	691b      	ldr	r3, [r3, #16]
 8008096:	041b      	lsls	r3, r3, #16
 8008098:	431a      	orrs	r2, r3
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	68db      	ldr	r3, [r3, #12]
 800809e:	061b      	lsls	r3, r3, #24
 80080a0:	431a      	orrs	r2, r3
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	071b      	lsls	r3, r3, #28
 80080a8:	4919      	ldr	r1, [pc, #100]	; (8008110 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80080aa:	4313      	orrs	r3, r2
 80080ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80080b0:	4b17      	ldr	r3, [pc, #92]	; (8008110 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a16      	ldr	r2, [pc, #88]	; (8008110 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80080b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80080ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080bc:	f7fb fd52 	bl	8003b64 <HAL_GetTick>
 80080c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80080c2:	e008      	b.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80080c4:	f7fb fd4e 	bl	8003b64 <HAL_GetTick>
 80080c8:	4602      	mov	r2, r0
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	1ad3      	subs	r3, r2, r3
 80080ce:	2b64      	cmp	r3, #100	; 0x64
 80080d0:	d901      	bls.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80080d2:	2303      	movs	r3, #3
 80080d4:	e0d7      	b.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80080d6:	4b0e      	ldr	r3, [pc, #56]	; (8008110 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d0f0      	beq.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80080e2:	69bb      	ldr	r3, [r7, #24]
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	f040 80cd 	bne.w	8008284 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80080ea:	4b09      	ldr	r3, [pc, #36]	; (8008110 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a08      	ldr	r2, [pc, #32]	; (8008110 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80080f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080f6:	f7fb fd35 	bl	8003b64 <HAL_GetTick>
 80080fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80080fc:	e00a      	b.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80080fe:	f7fb fd31 	bl	8003b64 <HAL_GetTick>
 8008102:	4602      	mov	r2, r0
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	1ad3      	subs	r3, r2, r3
 8008108:	2b64      	cmp	r3, #100	; 0x64
 800810a:	d903      	bls.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800810c:	2303      	movs	r3, #3
 800810e:	e0ba      	b.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8008110:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008114:	4b5e      	ldr	r3, [pc, #376]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800811c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008120:	d0ed      	beq.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800812a:	2b00      	cmp	r3, #0
 800812c:	d003      	beq.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008132:	2b00      	cmp	r3, #0
 8008134:	d009      	beq.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800813e:	2b00      	cmp	r3, #0
 8008140:	d02e      	beq.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008146:	2b00      	cmp	r3, #0
 8008148:	d12a      	bne.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800814a:	4b51      	ldr	r3, [pc, #324]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800814c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008150:	0c1b      	lsrs	r3, r3, #16
 8008152:	f003 0303 	and.w	r3, r3, #3
 8008156:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008158:	4b4d      	ldr	r3, [pc, #308]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800815a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800815e:	0f1b      	lsrs	r3, r3, #28
 8008160:	f003 0307 	and.w	r3, r3, #7
 8008164:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	695b      	ldr	r3, [r3, #20]
 800816a:	019a      	lsls	r2, r3, #6
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	041b      	lsls	r3, r3, #16
 8008170:	431a      	orrs	r2, r3
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	699b      	ldr	r3, [r3, #24]
 8008176:	061b      	lsls	r3, r3, #24
 8008178:	431a      	orrs	r2, r3
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	071b      	lsls	r3, r3, #28
 800817e:	4944      	ldr	r1, [pc, #272]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008180:	4313      	orrs	r3, r2
 8008182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008186:	4b42      	ldr	r3, [pc, #264]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008188:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800818c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008194:	3b01      	subs	r3, #1
 8008196:	021b      	lsls	r3, r3, #8
 8008198:	493d      	ldr	r1, [pc, #244]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800819a:	4313      	orrs	r3, r2
 800819c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d022      	beq.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80081b4:	d11d      	bne.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80081b6:	4b36      	ldr	r3, [pc, #216]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80081b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081bc:	0e1b      	lsrs	r3, r3, #24
 80081be:	f003 030f 	and.w	r3, r3, #15
 80081c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80081c4:	4b32      	ldr	r3, [pc, #200]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80081c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081ca:	0f1b      	lsrs	r3, r3, #28
 80081cc:	f003 0307 	and.w	r3, r3, #7
 80081d0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	695b      	ldr	r3, [r3, #20]
 80081d6:	019a      	lsls	r2, r3, #6
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6a1b      	ldr	r3, [r3, #32]
 80081dc:	041b      	lsls	r3, r3, #16
 80081de:	431a      	orrs	r2, r3
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	061b      	lsls	r3, r3, #24
 80081e4:	431a      	orrs	r2, r3
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	071b      	lsls	r3, r3, #28
 80081ea:	4929      	ldr	r1, [pc, #164]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80081ec:	4313      	orrs	r3, r2
 80081ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f003 0308 	and.w	r3, r3, #8
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d028      	beq.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80081fe:	4b24      	ldr	r3, [pc, #144]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008204:	0e1b      	lsrs	r3, r3, #24
 8008206:	f003 030f 	and.w	r3, r3, #15
 800820a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800820c:	4b20      	ldr	r3, [pc, #128]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800820e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008212:	0c1b      	lsrs	r3, r3, #16
 8008214:	f003 0303 	and.w	r3, r3, #3
 8008218:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	695b      	ldr	r3, [r3, #20]
 800821e:	019a      	lsls	r2, r3, #6
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	041b      	lsls	r3, r3, #16
 8008224:	431a      	orrs	r2, r3
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	061b      	lsls	r3, r3, #24
 800822a:	431a      	orrs	r2, r3
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	69db      	ldr	r3, [r3, #28]
 8008230:	071b      	lsls	r3, r3, #28
 8008232:	4917      	ldr	r1, [pc, #92]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008234:	4313      	orrs	r3, r2
 8008236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800823a:	4b15      	ldr	r3, [pc, #84]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800823c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008240:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008248:	4911      	ldr	r1, [pc, #68]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800824a:	4313      	orrs	r3, r2
 800824c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008250:	4b0f      	ldr	r3, [pc, #60]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a0e      	ldr	r2, [pc, #56]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800825a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800825c:	f7fb fc82 	bl	8003b64 <HAL_GetTick>
 8008260:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008262:	e008      	b.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008264:	f7fb fc7e 	bl	8003b64 <HAL_GetTick>
 8008268:	4602      	mov	r2, r0
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	1ad3      	subs	r3, r2, r3
 800826e:	2b64      	cmp	r3, #100	; 0x64
 8008270:	d901      	bls.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008272:	2303      	movs	r3, #3
 8008274:	e007      	b.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008276:	4b06      	ldr	r3, [pc, #24]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800827e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008282:	d1ef      	bne.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8008284:	2300      	movs	r3, #0
}
 8008286:	4618      	mov	r0, r3
 8008288:	3720      	adds	r7, #32
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop
 8008290:	40023800 	.word	0x40023800

08008294 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008294:	b480      	push	{r7}
 8008296:	b087      	sub	sp, #28
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800829c:	2300      	movs	r3, #0
 800829e:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80082a0:	2300      	movs	r3, #0
 80082a2:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80082a4:	2300      	movs	r3, #0
 80082a6:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80082a8:	2300      	movs	r3, #0
 80082aa:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80082b2:	f040 8086 	bne.w	80083c2 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 80082b6:	4b8d      	ldr	r3, [pc, #564]	; (80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80082b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082bc:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80082c4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082cc:	d03e      	beq.n	800834c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 80082ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80082d2:	d073      	beq.n	80083bc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d000      	beq.n	80082da <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80082d8:	e074      	b.n	80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80082da:	4b84      	ldr	r3, [pc, #528]	; (80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d108      	bne.n	80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80082e6:	4b81      	ldr	r3, [pc, #516]	; (80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082ee:	4a80      	ldr	r2, [pc, #512]	; (80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80082f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80082f4:	613b      	str	r3, [r7, #16]
 80082f6:	e007      	b.n	8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80082f8:	4b7c      	ldr	r3, [pc, #496]	; (80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008300:	4a7c      	ldr	r2, [pc, #496]	; (80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8008302:	fbb2 f3f3 	udiv	r3, r2, r3
 8008306:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008308:	4b78      	ldr	r3, [pc, #480]	; (80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800830a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800830e:	0e1b      	lsrs	r3, r3, #24
 8008310:	f003 030f 	and.w	r3, r3, #15
 8008314:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8008316:	4b75      	ldr	r3, [pc, #468]	; (80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800831c:	099b      	lsrs	r3, r3, #6
 800831e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008322:	693a      	ldr	r2, [r7, #16]
 8008324:	fb02 f203 	mul.w	r2, r2, r3
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	fbb2 f3f3 	udiv	r3, r2, r3
 800832e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008330:	4b6e      	ldr	r3, [pc, #440]	; (80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008332:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008336:	0a1b      	lsrs	r3, r3, #8
 8008338:	f003 031f 	and.w	r3, r3, #31
 800833c:	3301      	adds	r3, #1
 800833e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008340:	697a      	ldr	r2, [r7, #20]
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	fbb2 f3f3 	udiv	r3, r2, r3
 8008348:	617b      	str	r3, [r7, #20]
        break;
 800834a:	e03b      	b.n	80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800834c:	4b67      	ldr	r3, [pc, #412]	; (80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008354:	2b00      	cmp	r3, #0
 8008356:	d108      	bne.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008358:	4b64      	ldr	r3, [pc, #400]	; (80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008360:	4a63      	ldr	r2, [pc, #396]	; (80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8008362:	fbb2 f3f3 	udiv	r3, r2, r3
 8008366:	613b      	str	r3, [r7, #16]
 8008368:	e007      	b.n	800837a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800836a:	4b60      	ldr	r3, [pc, #384]	; (80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008372:	4a60      	ldr	r2, [pc, #384]	; (80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8008374:	fbb2 f3f3 	udiv	r3, r2, r3
 8008378:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800837a:	4b5c      	ldr	r3, [pc, #368]	; (80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800837c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008380:	0e1b      	lsrs	r3, r3, #24
 8008382:	f003 030f 	and.w	r3, r3, #15
 8008386:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8008388:	4b58      	ldr	r3, [pc, #352]	; (80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800838a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800838e:	099b      	lsrs	r3, r3, #6
 8008390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008394:	693a      	ldr	r2, [r7, #16]
 8008396:	fb02 f203 	mul.w	r2, r2, r3
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	fbb2 f3f3 	udiv	r3, r2, r3
 80083a0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80083a2:	4b52      	ldr	r3, [pc, #328]	; (80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80083a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083a8:	f003 031f 	and.w	r3, r3, #31
 80083ac:	3301      	adds	r3, #1
 80083ae:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80083b0:	697a      	ldr	r2, [r7, #20]
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80083b8:	617b      	str	r3, [r7, #20]
        break;
 80083ba:	e003      	b.n	80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 80083bc:	4b4e      	ldr	r3, [pc, #312]	; (80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80083be:	617b      	str	r3, [r7, #20]
        break;
 80083c0:	e000      	b.n	80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 80083c2:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083ca:	f040 8086 	bne.w	80084da <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 80083ce:	4b47      	ldr	r3, [pc, #284]	; (80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80083d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083d4:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80083dc:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083e4:	d03e      	beq.n	8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 80083e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80083ea:	d073      	beq.n	80084d4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d000      	beq.n	80083f2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80083f0:	e074      	b.n	80084dc <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80083f2:	4b3e      	ldr	r3, [pc, #248]	; (80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d108      	bne.n	8008410 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80083fe:	4b3b      	ldr	r3, [pc, #236]	; (80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008406:	4a3a      	ldr	r2, [pc, #232]	; (80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8008408:	fbb2 f3f3 	udiv	r3, r2, r3
 800840c:	613b      	str	r3, [r7, #16]
 800840e:	e007      	b.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008410:	4b36      	ldr	r3, [pc, #216]	; (80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008418:	4a36      	ldr	r2, [pc, #216]	; (80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800841a:	fbb2 f3f3 	udiv	r3, r2, r3
 800841e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008420:	4b32      	ldr	r3, [pc, #200]	; (80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008426:	0e1b      	lsrs	r3, r3, #24
 8008428:	f003 030f 	and.w	r3, r3, #15
 800842c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800842e:	4b2f      	ldr	r3, [pc, #188]	; (80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008434:	099b      	lsrs	r3, r3, #6
 8008436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800843a:	693a      	ldr	r2, [r7, #16]
 800843c:	fb02 f203 	mul.w	r2, r2, r3
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	fbb2 f3f3 	udiv	r3, r2, r3
 8008446:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008448:	4b28      	ldr	r3, [pc, #160]	; (80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800844a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800844e:	0a1b      	lsrs	r3, r3, #8
 8008450:	f003 031f 	and.w	r3, r3, #31
 8008454:	3301      	adds	r3, #1
 8008456:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008458:	697a      	ldr	r2, [r7, #20]
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008460:	617b      	str	r3, [r7, #20]
        break;
 8008462:	e03b      	b.n	80084dc <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008464:	4b21      	ldr	r3, [pc, #132]	; (80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800846c:	2b00      	cmp	r3, #0
 800846e:	d108      	bne.n	8008482 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008470:	4b1e      	ldr	r3, [pc, #120]	; (80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008478:	4a1d      	ldr	r2, [pc, #116]	; (80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800847a:	fbb2 f3f3 	udiv	r3, r2, r3
 800847e:	613b      	str	r3, [r7, #16]
 8008480:	e007      	b.n	8008492 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008482:	4b1a      	ldr	r3, [pc, #104]	; (80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800848a:	4a1a      	ldr	r2, [pc, #104]	; (80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800848c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008490:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8008492:	4b16      	ldr	r3, [pc, #88]	; (80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008494:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008498:	0e1b      	lsrs	r3, r3, #24
 800849a:	f003 030f 	and.w	r3, r3, #15
 800849e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80084a0:	4b12      	ldr	r3, [pc, #72]	; (80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80084a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084a6:	099b      	lsrs	r3, r3, #6
 80084a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084ac:	693a      	ldr	r2, [r7, #16]
 80084ae:	fb02 f203 	mul.w	r2, r2, r3
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80084b8:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80084ba:	4b0c      	ldr	r3, [pc, #48]	; (80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80084bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084c0:	f003 031f 	and.w	r3, r3, #31
 80084c4:	3301      	adds	r3, #1
 80084c6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80084c8:	697a      	ldr	r2, [r7, #20]
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80084d0:	617b      	str	r3, [r7, #20]
        break;
 80084d2:	e003      	b.n	80084dc <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 80084d4:	4b08      	ldr	r3, [pc, #32]	; (80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80084d6:	617b      	str	r3, [r7, #20]
        break;
 80084d8:	e000      	b.n	80084dc <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 80084da:	bf00      	nop

  return frequency;
 80084dc:	697b      	ldr	r3, [r7, #20]
}
 80084de:	4618      	mov	r0, r3
 80084e0:	371c      	adds	r7, #28
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr
 80084ea:	bf00      	nop
 80084ec:	40023800 	.word	0x40023800
 80084f0:	00f42400 	.word	0x00f42400
 80084f4:	017d7840 	.word	0x017d7840
 80084f8:	00bb8000 	.word	0x00bb8000

080084fc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b082      	sub	sp, #8
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d101      	bne.n	800850e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800850a:	2301      	movs	r3, #1
 800850c:	e06b      	b.n	80085e6 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	7f5b      	ldrb	r3, [r3, #29]
 8008512:	b2db      	uxtb	r3, r3
 8008514:	2b00      	cmp	r3, #0
 8008516:	d105      	bne.n	8008524 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2200      	movs	r2, #0
 800851c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f7fa fd56 	bl	8002fd0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2202      	movs	r2, #2
 8008528:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	22ca      	movs	r2, #202	; 0xca
 8008530:	625a      	str	r2, [r3, #36]	; 0x24
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	2253      	movs	r2, #83	; 0x53
 8008538:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 fb00 	bl	8008b40 <RTC_EnterInitMode>
 8008540:	4603      	mov	r3, r0
 8008542:	2b00      	cmp	r3, #0
 8008544:	d008      	beq.n	8008558 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	22ff      	movs	r2, #255	; 0xff
 800854c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2204      	movs	r2, #4
 8008552:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008554:	2301      	movs	r3, #1
 8008556:	e046      	b.n	80085e6 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	6899      	ldr	r1, [r3, #8]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	4b23      	ldr	r3, [pc, #140]	; (80085f0 <HAL_RTC_Init+0xf4>)
 8008564:	400b      	ands	r3, r1
 8008566:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	6899      	ldr	r1, [r3, #8]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	685a      	ldr	r2, [r3, #4]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	691b      	ldr	r3, [r3, #16]
 8008576:	431a      	orrs	r2, r3
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	695b      	ldr	r3, [r3, #20]
 800857c:	431a      	orrs	r2, r3
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	430a      	orrs	r2, r1
 8008584:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	687a      	ldr	r2, [r7, #4]
 800858c:	68d2      	ldr	r2, [r2, #12]
 800858e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	6919      	ldr	r1, [r3, #16]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	689b      	ldr	r3, [r3, #8]
 800859a:	041a      	lsls	r2, r3, #16
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	430a      	orrs	r2, r1
 80085a2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	68da      	ldr	r2, [r3, #12]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80085b2:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f022 0208 	bic.w	r2, r2, #8
 80085c2:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	699a      	ldr	r2, [r3, #24]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	430a      	orrs	r2, r1
 80085d4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	22ff      	movs	r2, #255	; 0xff
 80085dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2201      	movs	r2, #1
 80085e2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80085e4:	2300      	movs	r3, #0
  }
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3708      	adds	r7, #8
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop
 80085f0:	ff8fffbf 	.word	0xff8fffbf

080085f4 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80085f4:	b590      	push	{r4, r7, lr}
 80085f6:	b087      	sub	sp, #28
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	60f8      	str	r0, [r7, #12]
 80085fc:	60b9      	str	r1, [r7, #8]
 80085fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008600:	2300      	movs	r3, #0
 8008602:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	7f1b      	ldrb	r3, [r3, #28]
 8008608:	2b01      	cmp	r3, #1
 800860a:	d101      	bne.n	8008610 <HAL_RTC_SetTime+0x1c>
 800860c:	2302      	movs	r3, #2
 800860e:	e0a8      	b.n	8008762 <HAL_RTC_SetTime+0x16e>
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2201      	movs	r2, #1
 8008614:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2202      	movs	r2, #2
 800861a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d126      	bne.n	8008670 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800862c:	2b00      	cmp	r3, #0
 800862e:	d102      	bne.n	8008636 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	2200      	movs	r2, #0
 8008634:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	4618      	mov	r0, r3
 800863c:	f000 faac 	bl	8008b98 <RTC_ByteToBcd2>
 8008640:	4603      	mov	r3, r0
 8008642:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	785b      	ldrb	r3, [r3, #1]
 8008648:	4618      	mov	r0, r3
 800864a:	f000 faa5 	bl	8008b98 <RTC_ByteToBcd2>
 800864e:	4603      	mov	r3, r0
 8008650:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008652:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	789b      	ldrb	r3, [r3, #2]
 8008658:	4618      	mov	r0, r3
 800865a:	f000 fa9d 	bl	8008b98 <RTC_ByteToBcd2>
 800865e:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008660:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	7b1b      	ldrb	r3, [r3, #12]
 8008668:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800866a:	4313      	orrs	r3, r2
 800866c:	617b      	str	r3, [r7, #20]
 800866e:	e018      	b.n	80086a2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	689b      	ldr	r3, [r3, #8]
 8008676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800867a:	2b00      	cmp	r3, #0
 800867c:	d102      	bne.n	8008684 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	2200      	movs	r2, #0
 8008682:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	781b      	ldrb	r3, [r3, #0]
 8008688:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	785b      	ldrb	r3, [r3, #1]
 800868e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008690:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8008692:	68ba      	ldr	r2, [r7, #8]
 8008694:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8008696:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	7b1b      	ldrb	r3, [r3, #12]
 800869c:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800869e:	4313      	orrs	r3, r2
 80086a0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	22ca      	movs	r2, #202	; 0xca
 80086a8:	625a      	str	r2, [r3, #36]	; 0x24
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	2253      	movs	r2, #83	; 0x53
 80086b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80086b2:	68f8      	ldr	r0, [r7, #12]
 80086b4:	f000 fa44 	bl	8008b40 <RTC_EnterInitMode>
 80086b8:	4603      	mov	r3, r0
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d00b      	beq.n	80086d6 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	22ff      	movs	r2, #255	; 0xff
 80086c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2204      	movs	r2, #4
 80086ca:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2200      	movs	r2, #0
 80086d0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80086d2:	2301      	movs	r3, #1
 80086d4:	e045      	b.n	8008762 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	6979      	ldr	r1, [r7, #20]
 80086dc:	4b23      	ldr	r3, [pc, #140]	; (800876c <HAL_RTC_SetTime+0x178>)
 80086de:	400b      	ands	r3, r1
 80086e0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	689a      	ldr	r2, [r3, #8]
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80086f0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	6899      	ldr	r1, [r3, #8]
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	691a      	ldr	r2, [r3, #16]
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	695b      	ldr	r3, [r3, #20]
 8008700:	431a      	orrs	r2, r3
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	430a      	orrs	r2, r1
 8008708:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	68da      	ldr	r2, [r3, #12]
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008718:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	689b      	ldr	r3, [r3, #8]
 8008720:	f003 0320 	and.w	r3, r3, #32
 8008724:	2b00      	cmp	r3, #0
 8008726:	d111      	bne.n	800874c <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008728:	68f8      	ldr	r0, [r7, #12]
 800872a:	f000 f9e1 	bl	8008af0 <HAL_RTC_WaitForSynchro>
 800872e:	4603      	mov	r3, r0
 8008730:	2b00      	cmp	r3, #0
 8008732:	d00b      	beq.n	800874c <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	22ff      	movs	r2, #255	; 0xff
 800873a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2204      	movs	r2, #4
 8008740:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2200      	movs	r2, #0
 8008746:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008748:	2301      	movs	r3, #1
 800874a:	e00a      	b.n	8008762 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	22ff      	movs	r2, #255	; 0xff
 8008752:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2201      	movs	r2, #1
 8008758:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2200      	movs	r2, #0
 800875e:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8008760:	2300      	movs	r3, #0
  }
}
 8008762:	4618      	mov	r0, r3
 8008764:	371c      	adds	r7, #28
 8008766:	46bd      	mov	sp, r7
 8008768:	bd90      	pop	{r4, r7, pc}
 800876a:	bf00      	nop
 800876c:	007f7f7f 	.word	0x007f7f7f

08008770 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008770:	b590      	push	{r4, r7, lr}
 8008772:	b087      	sub	sp, #28
 8008774:	af00      	add	r7, sp, #0
 8008776:	60f8      	str	r0, [r7, #12]
 8008778:	60b9      	str	r1, [r7, #8]
 800877a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800877c:	2300      	movs	r3, #0
 800877e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	7f1b      	ldrb	r3, [r3, #28]
 8008784:	2b01      	cmp	r3, #1
 8008786:	d101      	bne.n	800878c <HAL_RTC_SetDate+0x1c>
 8008788:	2302      	movs	r3, #2
 800878a:	e092      	b.n	80088b2 <HAL_RTC_SetDate+0x142>
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2201      	movs	r2, #1
 8008790:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2202      	movs	r2, #2
 8008796:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d10e      	bne.n	80087bc <HAL_RTC_SetDate+0x4c>
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	785b      	ldrb	r3, [r3, #1]
 80087a2:	f003 0310 	and.w	r3, r3, #16
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d008      	beq.n	80087bc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	785b      	ldrb	r3, [r3, #1]
 80087ae:	f023 0310 	bic.w	r3, r3, #16
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	330a      	adds	r3, #10
 80087b6:	b2da      	uxtb	r2, r3
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d11c      	bne.n	80087fc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	78db      	ldrb	r3, [r3, #3]
 80087c6:	4618      	mov	r0, r3
 80087c8:	f000 f9e6 	bl	8008b98 <RTC_ByteToBcd2>
 80087cc:	4603      	mov	r3, r0
 80087ce:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	785b      	ldrb	r3, [r3, #1]
 80087d4:	4618      	mov	r0, r3
 80087d6:	f000 f9df 	bl	8008b98 <RTC_ByteToBcd2>
 80087da:	4603      	mov	r3, r0
 80087dc:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80087de:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	789b      	ldrb	r3, [r3, #2]
 80087e4:	4618      	mov	r0, r3
 80087e6:	f000 f9d7 	bl	8008b98 <RTC_ByteToBcd2>
 80087ea:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80087ec:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80087f6:	4313      	orrs	r3, r2
 80087f8:	617b      	str	r3, [r7, #20]
 80087fa:	e00e      	b.n	800881a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	78db      	ldrb	r3, [r3, #3]
 8008800:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	785b      	ldrb	r3, [r3, #1]
 8008806:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008808:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800880a:	68ba      	ldr	r2, [r7, #8]
 800880c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800880e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008816:	4313      	orrs	r3, r2
 8008818:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	22ca      	movs	r2, #202	; 0xca
 8008820:	625a      	str	r2, [r3, #36]	; 0x24
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	2253      	movs	r2, #83	; 0x53
 8008828:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800882a:	68f8      	ldr	r0, [r7, #12]
 800882c:	f000 f988 	bl	8008b40 <RTC_EnterInitMode>
 8008830:	4603      	mov	r3, r0
 8008832:	2b00      	cmp	r3, #0
 8008834:	d00b      	beq.n	800884e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	22ff      	movs	r2, #255	; 0xff
 800883c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2204      	movs	r2, #4
 8008842:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2200      	movs	r2, #0
 8008848:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800884a:	2301      	movs	r3, #1
 800884c:	e031      	b.n	80088b2 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681a      	ldr	r2, [r3, #0]
 8008852:	6979      	ldr	r1, [r7, #20]
 8008854:	4b19      	ldr	r3, [pc, #100]	; (80088bc <HAL_RTC_SetDate+0x14c>)
 8008856:	400b      	ands	r3, r1
 8008858:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	68da      	ldr	r2, [r3, #12]
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008868:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	689b      	ldr	r3, [r3, #8]
 8008870:	f003 0320 	and.w	r3, r3, #32
 8008874:	2b00      	cmp	r3, #0
 8008876:	d111      	bne.n	800889c <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008878:	68f8      	ldr	r0, [r7, #12]
 800887a:	f000 f939 	bl	8008af0 <HAL_RTC_WaitForSynchro>
 800887e:	4603      	mov	r3, r0
 8008880:	2b00      	cmp	r3, #0
 8008882:	d00b      	beq.n	800889c <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	22ff      	movs	r2, #255	; 0xff
 800888a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2204      	movs	r2, #4
 8008890:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2200      	movs	r2, #0
 8008896:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008898:	2301      	movs	r3, #1
 800889a:	e00a      	b.n	80088b2 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	22ff      	movs	r2, #255	; 0xff
 80088a2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2201      	movs	r2, #1
 80088a8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2200      	movs	r2, #0
 80088ae:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80088b0:	2300      	movs	r3, #0
  }
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	371c      	adds	r7, #28
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd90      	pop	{r4, r7, pc}
 80088ba:	bf00      	nop
 80088bc:	00ffff3f 	.word	0x00ffff3f

080088c0 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80088c0:	b590      	push	{r4, r7, lr}
 80088c2:	b089      	sub	sp, #36	; 0x24
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	60f8      	str	r0, [r7, #12]
 80088c8:	60b9      	str	r1, [r7, #8]
 80088ca:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 80088cc:	2300      	movs	r3, #0
 80088ce:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 80088d0:	2300      	movs	r3, #0
 80088d2:	61fb      	str	r3, [r7, #28]
 80088d4:	2300      	movs	r3, #0
 80088d6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	7f1b      	ldrb	r3, [r3, #28]
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d101      	bne.n	80088e4 <HAL_RTC_SetAlarm+0x24>
 80088e0:	2302      	movs	r3, #2
 80088e2:	e101      	b.n	8008ae8 <HAL_RTC_SetAlarm+0x228>
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2201      	movs	r2, #1
 80088e8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2202      	movs	r2, #2
 80088ee:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d137      	bne.n	8008966 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	689b      	ldr	r3, [r3, #8]
 80088fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008900:	2b00      	cmp	r3, #0
 8008902:	d102      	bne.n	800890a <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	2200      	movs	r2, #0
 8008908:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	4618      	mov	r0, r3
 8008910:	f000 f942 	bl	8008b98 <RTC_ByteToBcd2>
 8008914:	4603      	mov	r3, r0
 8008916:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	785b      	ldrb	r3, [r3, #1]
 800891c:	4618      	mov	r0, r3
 800891e:	f000 f93b 	bl	8008b98 <RTC_ByteToBcd2>
 8008922:	4603      	mov	r3, r0
 8008924:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008926:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	789b      	ldrb	r3, [r3, #2]
 800892c:	4618      	mov	r0, r3
 800892e:	f000 f933 	bl	8008b98 <RTC_ByteToBcd2>
 8008932:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008934:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	7b1b      	ldrb	r3, [r3, #12]
 800893c:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800893e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008948:	4618      	mov	r0, r3
 800894a:	f000 f925 	bl	8008b98 <RTC_ByteToBcd2>
 800894e:	4603      	mov	r3, r0
 8008950:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008952:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800895a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008960:	4313      	orrs	r3, r2
 8008962:	61fb      	str	r3, [r7, #28]
 8008964:	e023      	b.n	80089ae <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008970:	2b00      	cmp	r3, #0
 8008972:	d102      	bne.n	800897a <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	2200      	movs	r2, #0
 8008978:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	785b      	ldrb	r3, [r3, #1]
 8008984:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008986:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008988:	68ba      	ldr	r2, [r7, #8]
 800898a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800898c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	7b1b      	ldrb	r3, [r3, #12]
 8008992:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008994:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800899c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800899e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80089a4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80089aa:	4313      	orrs	r3, r2
 80089ac:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	685a      	ldr	r2, [r3, #4]
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	69db      	ldr	r3, [r3, #28]
 80089b6:	4313      	orrs	r3, r2
 80089b8:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	22ca      	movs	r2, #202	; 0xca
 80089c0:	625a      	str	r2, [r3, #36]	; 0x24
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	2253      	movs	r2, #83	; 0x53
 80089c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089d2:	d13f      	bne.n	8008a54 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	689a      	ldr	r2, [r3, #8]
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80089e2:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	689a      	ldr	r2, [r3, #8]
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80089f2:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80089f4:	f7fb f8b6 	bl	8003b64 <HAL_GetTick>
 80089f8:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80089fa:	e013      	b.n	8008a24 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80089fc:	f7fb f8b2 	bl	8003b64 <HAL_GetTick>
 8008a00:	4602      	mov	r2, r0
 8008a02:	69bb      	ldr	r3, [r7, #24]
 8008a04:	1ad3      	subs	r3, r2, r3
 8008a06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a0a:	d90b      	bls.n	8008a24 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	22ff      	movs	r2, #255	; 0xff
 8008a12:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2203      	movs	r2, #3
 8008a18:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008a20:	2303      	movs	r3, #3
 8008a22:	e061      	b.n	8008ae8 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	68db      	ldr	r3, [r3, #12]
 8008a2a:	f003 0301 	and.w	r3, r3, #1
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d0e4      	beq.n	80089fc <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	69fa      	ldr	r2, [r7, #28]
 8008a38:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	697a      	ldr	r2, [r7, #20]
 8008a40:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	689a      	ldr	r2, [r3, #8]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a50:	609a      	str	r2, [r3, #8]
 8008a52:	e03e      	b.n	8008ad2 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	689a      	ldr	r2, [r3, #8]
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008a62:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	689a      	ldr	r2, [r3, #8]
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008a72:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008a74:	f7fb f876 	bl	8003b64 <HAL_GetTick>
 8008a78:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008a7a:	e013      	b.n	8008aa4 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008a7c:	f7fb f872 	bl	8003b64 <HAL_GetTick>
 8008a80:	4602      	mov	r2, r0
 8008a82:	69bb      	ldr	r3, [r7, #24]
 8008a84:	1ad3      	subs	r3, r2, r3
 8008a86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a8a:	d90b      	bls.n	8008aa4 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	22ff      	movs	r2, #255	; 0xff
 8008a92:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2203      	movs	r2, #3
 8008a98:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008aa0:	2303      	movs	r3, #3
 8008aa2:	e021      	b.n	8008ae8 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	68db      	ldr	r3, [r3, #12]
 8008aaa:	f003 0302 	and.w	r3, r3, #2
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d0e4      	beq.n	8008a7c <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	69fa      	ldr	r2, [r7, #28]
 8008ab8:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	697a      	ldr	r2, [r7, #20]
 8008ac0:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	689a      	ldr	r2, [r3, #8]
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ad0:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	22ff      	movs	r2, #255	; 0xff
 8008ad8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2201      	movs	r2, #1
 8008ade:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008ae6:	2300      	movs	r3, #0
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3724      	adds	r7, #36	; 0x24
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd90      	pop	{r4, r7, pc}

08008af0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b084      	sub	sp, #16
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008af8:	2300      	movs	r3, #0
 8008afa:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	68da      	ldr	r2, [r3, #12]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008b0a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008b0c:	f7fb f82a 	bl	8003b64 <HAL_GetTick>
 8008b10:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008b12:	e009      	b.n	8008b28 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008b14:	f7fb f826 	bl	8003b64 <HAL_GetTick>
 8008b18:	4602      	mov	r2, r0
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	1ad3      	subs	r3, r2, r3
 8008b1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b22:	d901      	bls.n	8008b28 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008b24:	2303      	movs	r3, #3
 8008b26:	e007      	b.n	8008b38 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	68db      	ldr	r3, [r3, #12]
 8008b2e:	f003 0320 	and.w	r3, r3, #32
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d0ee      	beq.n	8008b14 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008b36:	2300      	movs	r3, #0
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3710      	adds	r7, #16
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}

08008b40 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	68db      	ldr	r3, [r3, #12]
 8008b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d119      	bne.n	8008b8e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8008b62:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008b64:	f7fa fffe 	bl	8003b64 <HAL_GetTick>
 8008b68:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008b6a:	e009      	b.n	8008b80 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008b6c:	f7fa fffa 	bl	8003b64 <HAL_GetTick>
 8008b70:	4602      	mov	r2, r0
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	1ad3      	subs	r3, r2, r3
 8008b76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b7a:	d901      	bls.n	8008b80 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008b7c:	2303      	movs	r3, #3
 8008b7e:	e007      	b.n	8008b90 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	68db      	ldr	r3, [r3, #12]
 8008b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d0ee      	beq.n	8008b6c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008b8e:	2300      	movs	r3, #0
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3710      	adds	r7, #16
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b085      	sub	sp, #20
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8008ba6:	e005      	b.n	8008bb4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	3301      	adds	r3, #1
 8008bac:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8008bae:	79fb      	ldrb	r3, [r7, #7]
 8008bb0:	3b0a      	subs	r3, #10
 8008bb2:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8008bb4:	79fb      	ldrb	r3, [r7, #7]
 8008bb6:	2b09      	cmp	r3, #9
 8008bb8:	d8f6      	bhi.n	8008ba8 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	011b      	lsls	r3, r3, #4
 8008bc0:	b2da      	uxtb	r2, r3
 8008bc2:	79fb      	ldrb	r3, [r7, #7]
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	b2db      	uxtb	r3, r3
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3714      	adds	r7, #20
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr

08008bd4 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b087      	sub	sp, #28
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	60f8      	str	r0, [r7, #12]
 8008bdc:	60b9      	str	r1, [r7, #8]
 8008bde:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008be0:	2300      	movs	r3, #0
 8008be2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	7f1b      	ldrb	r3, [r3, #28]
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	d101      	bne.n	8008bf0 <HAL_RTCEx_SetTimeStamp+0x1c>
 8008bec:	2302      	movs	r3, #2
 8008bee:	e03e      	b.n	8008c6e <HAL_RTCEx_SetTimeStamp+0x9a>
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2202      	movs	r2, #2
 8008bfa:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	689a      	ldr	r2, [r3, #8]
 8008c02:	4b1e      	ldr	r3, [pc, #120]	; (8008c7c <HAL_RTCEx_SetTimeStamp+0xa8>)
 8008c04:	4013      	ands	r3, r2
 8008c06:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8008c08:	697a      	ldr	r2, [r7, #20]
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	22ca      	movs	r2, #202	; 0xca
 8008c16:	625a      	str	r2, [r3, #36]	; 0x24
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	2253      	movs	r2, #83	; 0x53
 8008c1e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f022 0206 	bic.w	r2, r2, #6
 8008c2e:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	430a      	orrs	r2, r1
 8008c3e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	697a      	ldr	r2, [r7, #20]
 8008c46:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	689a      	ldr	r2, [r3, #8]
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c56:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	22ff      	movs	r2, #255	; 0xff
 8008c5e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2201      	movs	r2, #1
 8008c64:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008c6c:	2300      	movs	r3, #0
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	371c      	adds	r7, #28
 8008c72:	46bd      	mov	sp, r7
 8008c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c78:	4770      	bx	lr
 8008c7a:	bf00      	nop
 8008c7c:	fffff7f7 	.word	0xfffff7f7

08008c80 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b088      	sub	sp, #32
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8008c90:	2300      	movs	r3, #0
 8008c92:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d101      	bne.n	8008c9e <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	e149      	b.n	8008f32 <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d106      	bne.n	8008cb8 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2200      	movs	r2, #0
 8008cae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f7fa fd36 	bl	8003724 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2202      	movs	r2, #2
 8008cbc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 f94f 	bl	8008f64 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	68db      	ldr	r3, [r3, #12]
 8008cca:	2b01      	cmp	r3, #1
 8008ccc:	d007      	beq.n	8008cde <HAL_SAI_Init+0x5e>
 8008cce:	2b01      	cmp	r3, #1
 8008cd0:	d302      	bcc.n	8008cd8 <HAL_SAI_Init+0x58>
 8008cd2:	2b02      	cmp	r3, #2
 8008cd4:	d006      	beq.n	8008ce4 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 8008cd6:	e008      	b.n	8008cea <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	61fb      	str	r3, [r7, #28]
      break;
 8008cdc:	e005      	b.n	8008cea <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8008cde:	2310      	movs	r3, #16
 8008ce0:	61fb      	str	r3, [r7, #28]
      break;
 8008ce2:	e002      	b.n	8008cea <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8008ce4:	2320      	movs	r3, #32
 8008ce6:	61fb      	str	r3, [r7, #28]
      break;
 8008ce8:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	2b03      	cmp	r3, #3
 8008cf0:	d81d      	bhi.n	8008d2e <HAL_SAI_Init+0xae>
 8008cf2:	a201      	add	r2, pc, #4	; (adr r2, 8008cf8 <HAL_SAI_Init+0x78>)
 8008cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cf8:	08008d09 	.word	0x08008d09
 8008cfc:	08008d0f 	.word	0x08008d0f
 8008d00:	08008d17 	.word	0x08008d17
 8008d04:	08008d1f 	.word	0x08008d1f
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	617b      	str	r3, [r7, #20]
      }
      break;
 8008d0c:	e010      	b.n	8008d30 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 8008d0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d12:	617b      	str	r3, [r7, #20]
      }
      break;
 8008d14:	e00c      	b.n	8008d30 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8008d16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008d1a:	617b      	str	r3, [r7, #20]
      }
      break;
 8008d1c:	e008      	b.n	8008d30 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8008d1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008d22:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008d24:	69fb      	ldr	r3, [r7, #28]
 8008d26:	f043 0301 	orr.w	r3, r3, #1
 8008d2a:	61fb      	str	r3, [r7, #28]
      }
      break;
 8008d2c:	e000      	b.n	8008d30 <HAL_SAI_Init+0xb0>
  default:
    break;
 8008d2e:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a81      	ldr	r2, [pc, #516]	; (8008f3c <HAL_SAI_Init+0x2bc>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d004      	beq.n	8008d44 <HAL_SAI_Init+0xc4>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a80      	ldr	r2, [pc, #512]	; (8008f40 <HAL_SAI_Init+0x2c0>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d103      	bne.n	8008d4c <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 8008d44:	4a7f      	ldr	r2, [pc, #508]	; (8008f44 <HAL_SAI_Init+0x2c4>)
 8008d46:	69fb      	ldr	r3, [r7, #28]
 8008d48:	6013      	str	r3, [r2, #0]
 8008d4a:	e002      	b.n	8008d52 <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8008d4c:	4a7e      	ldr	r2, [pc, #504]	; (8008f48 <HAL_SAI_Init+0x2c8>)
 8008d4e:	69fb      	ldr	r3, [r7, #28]
 8008d50:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	69db      	ldr	r3, [r3, #28]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d043      	beq.n	8008de2 <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a76      	ldr	r2, [pc, #472]	; (8008f3c <HAL_SAI_Init+0x2bc>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d004      	beq.n	8008d72 <HAL_SAI_Init+0xf2>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a74      	ldr	r2, [pc, #464]	; (8008f40 <HAL_SAI_Init+0x2c0>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d104      	bne.n	8008d7c <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008d72:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008d76:	f7ff fa8d 	bl	8008294 <HAL_RCCEx_GetPeriphCLKFreq>
 8008d7a:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a72      	ldr	r2, [pc, #456]	; (8008f4c <HAL_SAI_Init+0x2cc>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d004      	beq.n	8008d90 <HAL_SAI_Init+0x110>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a71      	ldr	r2, [pc, #452]	; (8008f50 <HAL_SAI_Init+0x2d0>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d104      	bne.n	8008d9a <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8008d90:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008d94:	f7ff fa7e 	bl	8008294 <HAL_RCCEx_GetPeriphCLKFreq>
 8008d98:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8008d9a:	693a      	ldr	r2, [r7, #16]
 8008d9c:	4613      	mov	r3, r2
 8008d9e:	009b      	lsls	r3, r3, #2
 8008da0:	4413      	add	r3, r2
 8008da2:	005b      	lsls	r3, r3, #1
 8008da4:	461a      	mov	r2, r3
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	69db      	ldr	r3, [r3, #28]
 8008daa:	025b      	lsls	r3, r3, #9
 8008dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8008db0:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	4a67      	ldr	r2, [pc, #412]	; (8008f54 <HAL_SAI_Init+0x2d4>)
 8008db6:	fba2 2303 	umull	r2, r3, r2, r3
 8008dba:	08da      	lsrs	r2, r3, #3
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 8008dc0:	68f9      	ldr	r1, [r7, #12]
 8008dc2:	4b64      	ldr	r3, [pc, #400]	; (8008f54 <HAL_SAI_Init+0x2d4>)
 8008dc4:	fba3 2301 	umull	r2, r3, r3, r1
 8008dc8:	08da      	lsrs	r2, r3, #3
 8008dca:	4613      	mov	r3, r2
 8008dcc:	009b      	lsls	r3, r3, #2
 8008dce:	4413      	add	r3, r2
 8008dd0:	005b      	lsls	r3, r3, #1
 8008dd2:	1aca      	subs	r2, r1, r3
 8008dd4:	2a08      	cmp	r2, #8
 8008dd6:	d904      	bls.n	8008de2 <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6a1b      	ldr	r3, [r3, #32]
 8008ddc:	1c5a      	adds	r2, r3, #1
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d003      	beq.n	8008df2 <HAL_SAI_Init+0x172>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	685b      	ldr	r3, [r3, #4]
 8008dee:	2b02      	cmp	r3, #2
 8008df0:	d109      	bne.n	8008e06 <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008df6:	2b01      	cmp	r3, #1
 8008df8:	d101      	bne.n	8008dfe <HAL_SAI_Init+0x17e>
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	e001      	b.n	8008e02 <HAL_SAI_Init+0x182>
 8008dfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e02:	61bb      	str	r3, [r7, #24]
 8008e04:	e008      	b.n	8008e18 <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d102      	bne.n	8008e14 <HAL_SAI_Init+0x194>
 8008e0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e12:	e000      	b.n	8008e16 <HAL_SAI_Init+0x196>
 8008e14:	2300      	movs	r3, #0
 8008e16:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	6819      	ldr	r1, [r3, #0]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681a      	ldr	r2, [r3, #0]
 8008e22:	4b4d      	ldr	r3, [pc, #308]	; (8008f58 <HAL_SAI_Init+0x2d8>)
 8008e24:	400b      	ands	r3, r1
 8008e26:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	6819      	ldr	r1, [r3, #0]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	685a      	ldr	r2, [r3, #4]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e36:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008e3c:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e42:	431a      	orrs	r2, r3
 8008e44:	69bb      	ldr	r3, [r7, #24]
 8008e46:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 8008e48:	697b      	ldr	r3, [r7, #20]
 8008e4a:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8008e50:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	691b      	ldr	r3, [r3, #16]
 8008e56:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008e5c:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6a1b      	ldr	r3, [r3, #32]
 8008e62:	051b      	lsls	r3, r3, #20
 8008e64:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	430a      	orrs	r2, r1
 8008e6c:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	6859      	ldr	r1, [r3, #4]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	4b38      	ldr	r3, [pc, #224]	; (8008f5c <HAL_SAI_Init+0x2dc>)
 8008e7a:	400b      	ands	r3, r1
 8008e7c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	6859      	ldr	r1, [r3, #4]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	699a      	ldr	r2, [r3, #24]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e8c:	431a      	orrs	r2, r3
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e92:	431a      	orrs	r2, r3
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	430a      	orrs	r2, r1
 8008e9a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	6899      	ldr	r1, [r3, #8]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681a      	ldr	r2, [r3, #0]
 8008ea6:	4b2e      	ldr	r3, [pc, #184]	; (8008f60 <HAL_SAI_Init+0x2e0>)
 8008ea8:	400b      	ands	r3, r1
 8008eaa:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	6899      	ldr	r1, [r3, #8]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eb6:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008ebc:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 8008ec2:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 8008ec8:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ece:	3b01      	subs	r3, #1
 8008ed0:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 8008ed2:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	430a      	orrs	r2, r1
 8008eda:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	68d9      	ldr	r1, [r3, #12]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681a      	ldr	r2, [r3, #0]
 8008ee6:	f24f 0320 	movw	r3, #61472	; 0xf020
 8008eea:	400b      	ands	r3, r1
 8008eec:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	68d9      	ldr	r1, [r3, #12]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008efc:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f02:	041b      	lsls	r3, r3, #16
 8008f04:	431a      	orrs	r2, r3
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f0a:	3b01      	subs	r3, #1
 8008f0c:	021b      	lsls	r3, r3, #8
 8008f0e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	430a      	orrs	r2, r1
 8008f16:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2201      	movs	r2, #1
 8008f24:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008f30:	2300      	movs	r3, #0
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3720      	adds	r7, #32
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	40015804 	.word	0x40015804
 8008f40:	40015824 	.word	0x40015824
 8008f44:	40015800 	.word	0x40015800
 8008f48:	40015c00 	.word	0x40015c00
 8008f4c:	40015c04 	.word	0x40015c04
 8008f50:	40015c24 	.word	0x40015c24
 8008f54:	cccccccd 	.word	0xcccccccd
 8008f58:	ff05c010 	.word	0xff05c010
 8008f5c:	ffff1ff0 	.word	0xffff1ff0
 8008f60:	fff88000 	.word	0xfff88000

08008f64 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008f64:	b490      	push	{r4, r7}
 8008f66:	b084      	sub	sp, #16
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8008f6c:	4b16      	ldr	r3, [pc, #88]	; (8008fc8 <SAI_Disable+0x64>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a16      	ldr	r2, [pc, #88]	; (8008fcc <SAI_Disable+0x68>)
 8008f72:	fba2 2303 	umull	r2, r3, r2, r3
 8008f76:	0b1b      	lsrs	r3, r3, #12
 8008f78:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	681a      	ldr	r2, [r3, #0]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008f8c:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8008f8e:	4623      	mov	r3, r4
 8008f90:	1e5c      	subs	r4, r3, #1
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d10a      	bne.n	8008fac <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f9c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8008fa6:	2303      	movs	r3, #3
 8008fa8:	73fb      	strb	r3, [r7, #15]
      break;
 8008faa:	e006      	b.n	8008fba <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d1e9      	bne.n	8008f8e <SAI_Disable+0x2a>

  return status;
 8008fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3710      	adds	r7, #16
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bc90      	pop	{r4, r7}
 8008fc4:	4770      	bx	lr
 8008fc6:	bf00      	nop
 8008fc8:	20000018 	.word	0x20000018
 8008fcc:	95cbec1b 	.word	0x95cbec1b

08008fd0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b082      	sub	sp, #8
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d101      	bne.n	8008fe2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	e022      	b.n	8009028 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d105      	bne.n	8008ffa <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f7fa f805 	bl	8003004 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2203      	movs	r2, #3
 8008ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 f814 	bl	8009030 <HAL_SD_InitCard>
 8009008:	4603      	mov	r3, r0
 800900a:	2b00      	cmp	r3, #0
 800900c:	d001      	beq.n	8009012 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800900e:	2301      	movs	r3, #1
 8009010:	e00a      	b.n	8009028 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2200      	movs	r2, #0
 8009016:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2201      	movs	r2, #1
 8009022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009026:	2300      	movs	r3, #0
}
 8009028:	4618      	mov	r0, r3
 800902a:	3708      	adds	r7, #8
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}

08009030 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009030:	b5b0      	push	{r4, r5, r7, lr}
 8009032:	b08e      	sub	sp, #56	; 0x38
 8009034:	af04      	add	r7, sp, #16
 8009036:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009038:	2300      	movs	r3, #0
 800903a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800903c:	2300      	movs	r3, #0
 800903e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009040:	2300      	movs	r3, #0
 8009042:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009044:	2300      	movs	r3, #0
 8009046:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009048:	2300      	movs	r3, #0
 800904a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800904c:	2376      	movs	r3, #118	; 0x76
 800904e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681d      	ldr	r5, [r3, #0]
 8009054:	466c      	mov	r4, sp
 8009056:	f107 0314 	add.w	r3, r7, #20
 800905a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800905e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009062:	f107 0308 	add.w	r3, r7, #8
 8009066:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009068:	4628      	mov	r0, r5
 800906a:	f002 ff51 	bl	800bf10 <SDMMC_Init>
 800906e:	4603      	mov	r3, r0
 8009070:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8009074:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009078:	2b00      	cmp	r3, #0
 800907a:	d001      	beq.n	8009080 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800907c:	2301      	movs	r3, #1
 800907e:	e03b      	b.n	80090f8 <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	685a      	ldr	r2, [r3, #4]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800908e:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4618      	mov	r0, r3
 8009096:	f002 ff74 	bl	800bf82 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	685a      	ldr	r2, [r3, #4]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80090a8:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 fde6 	bl	8009c7c <SD_PowerON>
 80090b0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80090b2:	6a3b      	ldr	r3, [r7, #32]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d00b      	beq.n	80090d0 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2201      	movs	r2, #1
 80090bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090c4:	6a3b      	ldr	r3, [r7, #32]
 80090c6:	431a      	orrs	r2, r3
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80090cc:	2301      	movs	r3, #1
 80090ce:	e013      	b.n	80090f8 <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 fd05 	bl	8009ae0 <SD_InitCard>
 80090d6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80090d8:	6a3b      	ldr	r3, [r7, #32]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d00b      	beq.n	80090f6 <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2201      	movs	r2, #1
 80090e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090ea:	6a3b      	ldr	r3, [r7, #32]
 80090ec:	431a      	orrs	r2, r3
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80090f2:	2301      	movs	r3, #1
 80090f4:	e000      	b.n	80090f8 <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 80090f6:	2300      	movs	r3, #0
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3728      	adds	r7, #40	; 0x28
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bdb0      	pop	{r4, r5, r7, pc}

08009100 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b08c      	sub	sp, #48	; 0x30
 8009104:	af00      	add	r7, sp, #0
 8009106:	60f8      	str	r0, [r7, #12]
 8009108:	60b9      	str	r1, [r7, #8]
 800910a:	607a      	str	r2, [r7, #4]
 800910c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d107      	bne.n	8009128 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800911c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009124:	2301      	movs	r3, #1
 8009126:	e0cc      	b.n	80092c2 <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800912e:	b2db      	uxtb	r3, r3
 8009130:	2b01      	cmp	r3, #1
 8009132:	f040 80c5 	bne.w	80092c0 <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2200      	movs	r2, #0
 800913a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800913c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	441a      	add	r2, r3
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009146:	429a      	cmp	r2, r3
 8009148:	d907      	bls.n	800915a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800914e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009156:	2301      	movs	r3, #1
 8009158:	e0b3      	b.n	80092c2 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2203      	movs	r2, #3
 800915e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	2200      	movs	r2, #0
 8009168:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8009178:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800917e:	4a53      	ldr	r2, [pc, #332]	; (80092cc <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8009180:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009186:	4a52      	ldr	r2, [pc, #328]	; (80092d0 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8009188:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800918e:	2200      	movs	r2, #0
 8009190:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	3380      	adds	r3, #128	; 0x80
 800919c:	4619      	mov	r1, r3
 800919e:	68ba      	ldr	r2, [r7, #8]
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	025b      	lsls	r3, r3, #9
 80091a4:	089b      	lsrs	r3, r3, #2
 80091a6:	f7fb ff8b 	bl	80050c0 <HAL_DMA_Start_IT>
 80091aa:	4603      	mov	r3, r0
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d017      	beq.n	80091e0 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80091be:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a43      	ldr	r2, [pc, #268]	; (80092d4 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 80091c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2201      	movs	r2, #1
 80091d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80091dc:	2301      	movs	r3, #1
 80091de:	e070      	b.n	80092c2 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f042 0208 	orr.w	r2, r2, #8
 80091ee:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091f4:	2b01      	cmp	r3, #1
 80091f6:	d002      	beq.n	80091fe <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 80091f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091fa:	025b      	lsls	r3, r3, #9
 80091fc:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009206:	4618      	mov	r0, r3
 8009208:	f002 ff4e 	bl	800c0a8 <SDMMC_CmdBlockLength>
 800920c:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800920e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009210:	2b00      	cmp	r3, #0
 8009212:	d00f      	beq.n	8009234 <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	4a2e      	ldr	r2, [pc, #184]	; (80092d4 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 800921a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009222:	431a      	orrs	r2, r3
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2201      	movs	r2, #1
 800922c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8009230:	2301      	movs	r3, #1
 8009232:	e046      	b.n	80092c2 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009234:	f04f 33ff 	mov.w	r3, #4294967295
 8009238:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	025b      	lsls	r3, r3, #9
 800923e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009240:	2390      	movs	r3, #144	; 0x90
 8009242:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009244:	2302      	movs	r3, #2
 8009246:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009248:	2300      	movs	r3, #0
 800924a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800924c:	2301      	movs	r3, #1
 800924e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f107 0210 	add.w	r2, r7, #16
 8009258:	4611      	mov	r1, r2
 800925a:	4618      	mov	r0, r3
 800925c:	f002 fef8 	bl	800c050 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	2b01      	cmp	r3, #1
 8009264:	d90a      	bls.n	800927c <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2282      	movs	r2, #130	; 0x82
 800926a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009272:	4618      	mov	r0, r3
 8009274:	f002 ff5c 	bl	800c130 <SDMMC_CmdReadMultiBlock>
 8009278:	62f8      	str	r0, [r7, #44]	; 0x2c
 800927a:	e009      	b.n	8009290 <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2281      	movs	r2, #129	; 0x81
 8009280:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009288:	4618      	mov	r0, r3
 800928a:	f002 ff2f 	bl	800c0ec <SDMMC_CmdReadSingleBlock>
 800928e:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8009290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009292:	2b00      	cmp	r3, #0
 8009294:	d012      	beq.n	80092bc <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4a0e      	ldr	r2, [pc, #56]	; (80092d4 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 800929c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a4:	431a      	orrs	r2, r3
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2201      	movs	r2, #1
 80092ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	2200      	movs	r2, #0
 80092b6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80092b8:	2301      	movs	r3, #1
 80092ba:	e002      	b.n	80092c2 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 80092bc:	2300      	movs	r3, #0
 80092be:	e000      	b.n	80092c2 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 80092c0:	2302      	movs	r3, #2
  }
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3730      	adds	r7, #48	; 0x30
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}
 80092ca:	bf00      	nop
 80092cc:	080099cb 	.word	0x080099cb
 80092d0:	08009a3d 	.word	0x08009a3d
 80092d4:	004005ff 	.word	0x004005ff

080092d8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b08c      	sub	sp, #48	; 0x30
 80092dc:	af00      	add	r7, sp, #0
 80092de:	60f8      	str	r0, [r7, #12]
 80092e0:	60b9      	str	r1, [r7, #8]
 80092e2:	607a      	str	r2, [r7, #4]
 80092e4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d107      	bne.n	8009300 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092f4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80092fc:	2301      	movs	r3, #1
 80092fe:	e0cf      	b.n	80094a0 <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009306:	b2db      	uxtb	r3, r3
 8009308:	2b01      	cmp	r3, #1
 800930a:	f040 80c8 	bne.w	800949e <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2200      	movs	r2, #0
 8009312:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009314:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	441a      	add	r2, r3
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800931e:	429a      	cmp	r2, r3
 8009320:	d907      	bls.n	8009332 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009326:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800932e:	2301      	movs	r3, #1
 8009330:	e0b6      	b.n	80094a0 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2203      	movs	r2, #3
 8009336:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	2200      	movs	r2, #0
 8009340:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f042 021a 	orr.w	r2, r2, #26
 8009350:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009356:	4a54      	ldr	r2, [pc, #336]	; (80094a8 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8009358:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800935e:	4a53      	ldr	r2, [pc, #332]	; (80094ac <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8009360:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009366:	2200      	movs	r2, #0
 8009368:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800936e:	2b01      	cmp	r3, #1
 8009370:	d002      	beq.n	8009378 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8009372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009374:	025b      	lsls	r3, r3, #9
 8009376:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009380:	4618      	mov	r0, r3
 8009382:	f002 fe91 	bl	800c0a8 <SDMMC_CmdBlockLength>
 8009386:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800938a:	2b00      	cmp	r3, #0
 800938c:	d00f      	beq.n	80093ae <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	4a47      	ldr	r2, [pc, #284]	; (80094b0 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8009394:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800939a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800939c:	431a      	orrs	r2, r3
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2201      	movs	r2, #1
 80093a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80093aa:	2301      	movs	r3, #1
 80093ac:	e078      	b.n	80094a0 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d90a      	bls.n	80093ca <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	22a0      	movs	r2, #160	; 0xa0
 80093b8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093c0:	4618      	mov	r0, r3
 80093c2:	f002 fef9 	bl	800c1b8 <SDMMC_CmdWriteMultiBlock>
 80093c6:	62f8      	str	r0, [r7, #44]	; 0x2c
 80093c8:	e009      	b.n	80093de <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2290      	movs	r2, #144	; 0x90
 80093ce:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093d6:	4618      	mov	r0, r3
 80093d8:	f002 fecc 	bl	800c174 <SDMMC_CmdWriteSingleBlock>
 80093dc:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80093de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d012      	beq.n	800940a <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4a31      	ldr	r2, [pc, #196]	; (80094b0 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80093ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f2:	431a      	orrs	r2, r3
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2201      	movs	r2, #1
 80093fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2200      	movs	r2, #0
 8009404:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009406:	2301      	movs	r3, #1
 8009408:	e04a      	b.n	80094a0 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f042 0208 	orr.w	r2, r2, #8
 8009418:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800941e:	68b9      	ldr	r1, [r7, #8]
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	3380      	adds	r3, #128	; 0x80
 8009426:	461a      	mov	r2, r3
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	025b      	lsls	r3, r3, #9
 800942c:	089b      	lsrs	r3, r3, #2
 800942e:	f7fb fe47 	bl	80050c0 <HAL_DMA_Start_IT>
 8009432:	4603      	mov	r3, r0
 8009434:	2b00      	cmp	r3, #0
 8009436:	d01a      	beq.n	800946e <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f022 021a 	bic.w	r2, r2, #26
 8009446:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4a18      	ldr	r2, [pc, #96]	; (80094b0 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800944e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009454:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	2201      	movs	r2, #1
 8009460:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	2200      	movs	r2, #0
 8009468:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800946a:	2301      	movs	r3, #1
 800946c:	e018      	b.n	80094a0 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800946e:	f04f 33ff 	mov.w	r3, #4294967295
 8009472:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	025b      	lsls	r3, r3, #9
 8009478:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800947a:	2390      	movs	r3, #144	; 0x90
 800947c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800947e:	2300      	movs	r3, #0
 8009480:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009482:	2300      	movs	r3, #0
 8009484:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8009486:	2301      	movs	r3, #1
 8009488:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f107 0210 	add.w	r2, r7, #16
 8009492:	4611      	mov	r1, r2
 8009494:	4618      	mov	r0, r3
 8009496:	f002 fddb 	bl	800c050 <SDMMC_ConfigData>

      return HAL_OK;
 800949a:	2300      	movs	r3, #0
 800949c:	e000      	b.n	80094a0 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 800949e:	2302      	movs	r3, #2
  }
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	3730      	adds	r7, #48	; 0x30
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}
 80094a8:	080099a1 	.word	0x080099a1
 80094ac:	08009a3d 	.word	0x08009a3d
 80094b0:	004005ff 	.word	0x004005ff

080094b4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b083      	sub	sp, #12
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80094bc:	bf00      	nop
 80094be:	370c      	adds	r7, #12
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr

080094c8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b083      	sub	sp, #12
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094d6:	0f9b      	lsrs	r3, r3, #30
 80094d8:	b2da      	uxtb	r2, r3
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094e2:	0e9b      	lsrs	r3, r3, #26
 80094e4:	b2db      	uxtb	r3, r3
 80094e6:	f003 030f 	and.w	r3, r3, #15
 80094ea:	b2da      	uxtb	r2, r3
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094f4:	0e1b      	lsrs	r3, r3, #24
 80094f6:	b2db      	uxtb	r3, r3
 80094f8:	f003 0303 	and.w	r3, r3, #3
 80094fc:	b2da      	uxtb	r2, r3
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009506:	0c1b      	lsrs	r3, r3, #16
 8009508:	b2da      	uxtb	r2, r3
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009512:	0a1b      	lsrs	r3, r3, #8
 8009514:	b2da      	uxtb	r2, r3
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800951e:	b2da      	uxtb	r2, r3
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009528:	0d1b      	lsrs	r3, r3, #20
 800952a:	b29a      	uxth	r2, r3
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009534:	0c1b      	lsrs	r3, r3, #16
 8009536:	b2db      	uxtb	r3, r3
 8009538:	f003 030f 	and.w	r3, r3, #15
 800953c:	b2da      	uxtb	r2, r3
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009546:	0bdb      	lsrs	r3, r3, #15
 8009548:	b2db      	uxtb	r3, r3
 800954a:	f003 0301 	and.w	r3, r3, #1
 800954e:	b2da      	uxtb	r2, r3
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009558:	0b9b      	lsrs	r3, r3, #14
 800955a:	b2db      	uxtb	r3, r3
 800955c:	f003 0301 	and.w	r3, r3, #1
 8009560:	b2da      	uxtb	r2, r3
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800956a:	0b5b      	lsrs	r3, r3, #13
 800956c:	b2db      	uxtb	r3, r3
 800956e:	f003 0301 	and.w	r3, r3, #1
 8009572:	b2da      	uxtb	r2, r3
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800957c:	0b1b      	lsrs	r3, r3, #12
 800957e:	b2db      	uxtb	r3, r3
 8009580:	f003 0301 	and.w	r3, r3, #1
 8009584:	b2da      	uxtb	r2, r3
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	2200      	movs	r2, #0
 800958e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009594:	2b00      	cmp	r3, #0
 8009596:	d163      	bne.n	8009660 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800959c:	009a      	lsls	r2, r3, #2
 800959e:	f640 73fc 	movw	r3, #4092	; 0xffc
 80095a2:	4013      	ands	r3, r2
 80095a4:	687a      	ldr	r2, [r7, #4]
 80095a6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80095a8:	0f92      	lsrs	r2, r2, #30
 80095aa:	431a      	orrs	r2, r3
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095b4:	0edb      	lsrs	r3, r3, #27
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	f003 0307 	and.w	r3, r3, #7
 80095bc:	b2da      	uxtb	r2, r3
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095c6:	0e1b      	lsrs	r3, r3, #24
 80095c8:	b2db      	uxtb	r3, r3
 80095ca:	f003 0307 	and.w	r3, r3, #7
 80095ce:	b2da      	uxtb	r2, r3
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095d8:	0d5b      	lsrs	r3, r3, #21
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	f003 0307 	and.w	r3, r3, #7
 80095e0:	b2da      	uxtb	r2, r3
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095ea:	0c9b      	lsrs	r3, r3, #18
 80095ec:	b2db      	uxtb	r3, r3
 80095ee:	f003 0307 	and.w	r3, r3, #7
 80095f2:	b2da      	uxtb	r2, r3
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095fc:	0bdb      	lsrs	r3, r3, #15
 80095fe:	b2db      	uxtb	r3, r3
 8009600:	f003 0307 	and.w	r3, r3, #7
 8009604:	b2da      	uxtb	r2, r3
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	691b      	ldr	r3, [r3, #16]
 800960e:	1c5a      	adds	r2, r3, #1
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	7e1b      	ldrb	r3, [r3, #24]
 8009618:	b2db      	uxtb	r3, r3
 800961a:	f003 0307 	and.w	r3, r3, #7
 800961e:	3302      	adds	r3, #2
 8009620:	2201      	movs	r2, #1
 8009622:	fa02 f303 	lsl.w	r3, r2, r3
 8009626:	687a      	ldr	r2, [r7, #4]
 8009628:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800962a:	fb02 f203 	mul.w	r2, r2, r3
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	7a1b      	ldrb	r3, [r3, #8]
 8009636:	b2db      	uxtb	r3, r3
 8009638:	f003 030f 	and.w	r3, r3, #15
 800963c:	2201      	movs	r2, #1
 800963e:	409a      	lsls	r2, r3
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009648:	687a      	ldr	r2, [r7, #4]
 800964a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800964c:	0a52      	lsrs	r2, r2, #9
 800964e:	fb02 f203 	mul.w	r2, r2, r3
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f44f 7200 	mov.w	r2, #512	; 0x200
 800965c:	661a      	str	r2, [r3, #96]	; 0x60
 800965e:	e031      	b.n	80096c4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009664:	2b01      	cmp	r3, #1
 8009666:	d11d      	bne.n	80096a4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800966c:	041b      	lsls	r3, r3, #16
 800966e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009676:	0c1b      	lsrs	r3, r3, #16
 8009678:	431a      	orrs	r2, r3
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	691b      	ldr	r3, [r3, #16]
 8009682:	3301      	adds	r3, #1
 8009684:	029a      	lsls	r2, r3, #10
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009698:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	661a      	str	r2, [r3, #96]	; 0x60
 80096a2:	e00f      	b.n	80096c4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a58      	ldr	r2, [pc, #352]	; (800980c <HAL_SD_GetCardCSD+0x344>)
 80096aa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096b0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2201      	movs	r2, #1
 80096bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80096c0:	2301      	movs	r3, #1
 80096c2:	e09d      	b.n	8009800 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096c8:	0b9b      	lsrs	r3, r3, #14
 80096ca:	b2db      	uxtb	r3, r3
 80096cc:	f003 0301 	and.w	r3, r3, #1
 80096d0:	b2da      	uxtb	r2, r3
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096da:	09db      	lsrs	r3, r3, #7
 80096dc:	b2db      	uxtb	r3, r3
 80096de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096e2:	b2da      	uxtb	r2, r3
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096ec:	b2db      	uxtb	r3, r3
 80096ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096f2:	b2da      	uxtb	r2, r3
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096fc:	0fdb      	lsrs	r3, r3, #31
 80096fe:	b2da      	uxtb	r2, r3
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009708:	0f5b      	lsrs	r3, r3, #29
 800970a:	b2db      	uxtb	r3, r3
 800970c:	f003 0303 	and.w	r3, r3, #3
 8009710:	b2da      	uxtb	r2, r3
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800971a:	0e9b      	lsrs	r3, r3, #26
 800971c:	b2db      	uxtb	r3, r3
 800971e:	f003 0307 	and.w	r3, r3, #7
 8009722:	b2da      	uxtb	r2, r3
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800972c:	0d9b      	lsrs	r3, r3, #22
 800972e:	b2db      	uxtb	r3, r3
 8009730:	f003 030f 	and.w	r3, r3, #15
 8009734:	b2da      	uxtb	r2, r3
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800973e:	0d5b      	lsrs	r3, r3, #21
 8009740:	b2db      	uxtb	r3, r3
 8009742:	f003 0301 	and.w	r3, r3, #1
 8009746:	b2da      	uxtb	r2, r3
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	2200      	movs	r2, #0
 8009752:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800975a:	0c1b      	lsrs	r3, r3, #16
 800975c:	b2db      	uxtb	r3, r3
 800975e:	f003 0301 	and.w	r3, r3, #1
 8009762:	b2da      	uxtb	r2, r3
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800976e:	0bdb      	lsrs	r3, r3, #15
 8009770:	b2db      	uxtb	r3, r3
 8009772:	f003 0301 	and.w	r3, r3, #1
 8009776:	b2da      	uxtb	r2, r3
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009782:	0b9b      	lsrs	r3, r3, #14
 8009784:	b2db      	uxtb	r3, r3
 8009786:	f003 0301 	and.w	r3, r3, #1
 800978a:	b2da      	uxtb	r2, r3
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009796:	0b5b      	lsrs	r3, r3, #13
 8009798:	b2db      	uxtb	r3, r3
 800979a:	f003 0301 	and.w	r3, r3, #1
 800979e:	b2da      	uxtb	r2, r3
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097aa:	0b1b      	lsrs	r3, r3, #12
 80097ac:	b2db      	uxtb	r3, r3
 80097ae:	f003 0301 	and.w	r3, r3, #1
 80097b2:	b2da      	uxtb	r2, r3
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097be:	0a9b      	lsrs	r3, r3, #10
 80097c0:	b2db      	uxtb	r3, r3
 80097c2:	f003 0303 	and.w	r3, r3, #3
 80097c6:	b2da      	uxtb	r2, r3
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097d2:	0a1b      	lsrs	r3, r3, #8
 80097d4:	b2db      	uxtb	r3, r3
 80097d6:	f003 0303 	and.w	r3, r3, #3
 80097da:	b2da      	uxtb	r2, r3
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097e6:	085b      	lsrs	r3, r3, #1
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097ee:	b2da      	uxtb	r2, r3
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	2201      	movs	r2, #1
 80097fa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80097fe:	2300      	movs	r3, #0
}
 8009800:	4618      	mov	r0, r3
 8009802:	370c      	adds	r7, #12
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr
 800980c:	004005ff 	.word	0x004005ff

08009810 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009810:	b480      	push	{r7}
 8009812:	b083      	sub	sp, #12
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800985a:	2300      	movs	r3, #0
}
 800985c:	4618      	mov	r0, r3
 800985e:	370c      	adds	r7, #12
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009868:	b5b0      	push	{r4, r5, r7, lr}
 800986a:	b08e      	sub	sp, #56	; 0x38
 800986c:	af04      	add	r7, sp, #16
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2203      	movs	r2, #3
 8009876:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800987e:	2b03      	cmp	r3, #3
 8009880:	d02e      	beq.n	80098e0 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009888:	d106      	bne.n	8009898 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800988e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	639a      	str	r2, [r3, #56]	; 0x38
 8009896:	e029      	b.n	80098ec <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800989e:	d10a      	bne.n	80098b6 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f000 faa1 	bl	8009de8 <SD_WideBus_Enable>
 80098a6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ae:	431a      	orrs	r2, r3
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	639a      	str	r2, [r3, #56]	; 0x38
 80098b4:	e01a      	b.n	80098ec <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d10a      	bne.n	80098d2 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f000 fade 	bl	8009e7e <SD_WideBus_Disable>
 80098c2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ca:	431a      	orrs	r2, r3
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	639a      	str	r2, [r3, #56]	; 0x38
 80098d0:	e00c      	b.n	80098ec <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098d6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	639a      	str	r2, [r3, #56]	; 0x38
 80098de:	e005      	b.n	80098ec <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098e4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d009      	beq.n	8009908 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	4a18      	ldr	r2, [pc, #96]	; (800995c <HAL_SD_ConfigWideBusOperation+0xf4>)
 80098fa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2201      	movs	r2, #1
 8009900:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009904:	2301      	movs	r3, #1
 8009906:	e024      	b.n	8009952 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	685b      	ldr	r3, [r3, #4]
 800990c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	689b      	ldr	r3, [r3, #8]
 8009912:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	68db      	ldr	r3, [r3, #12]
 8009918:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	695b      	ldr	r3, [r3, #20]
 8009922:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	699b      	ldr	r3, [r3, #24]
 8009928:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681d      	ldr	r5, [r3, #0]
 800992e:	466c      	mov	r4, sp
 8009930:	f107 0318 	add.w	r3, r7, #24
 8009934:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009938:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800993c:	f107 030c 	add.w	r3, r7, #12
 8009940:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009942:	4628      	mov	r0, r5
 8009944:	f002 fae4 	bl	800bf10 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2201      	movs	r2, #1
 800994c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009950:	2300      	movs	r3, #0
}
 8009952:	4618      	mov	r0, r3
 8009954:	3728      	adds	r7, #40	; 0x28
 8009956:	46bd      	mov	sp, r7
 8009958:	bdb0      	pop	{r4, r5, r7, pc}
 800995a:	bf00      	nop
 800995c:	004005ff 	.word	0x004005ff

08009960 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b086      	sub	sp, #24
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009968:	2300      	movs	r3, #0
 800996a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800996c:	f107 030c 	add.w	r3, r7, #12
 8009970:	4619      	mov	r1, r3
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f000 fa10 	bl	8009d98 <SD_SendStatus>
 8009978:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d005      	beq.n	800998c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	431a      	orrs	r2, r3
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	0a5b      	lsrs	r3, r3, #9
 8009990:	f003 030f 	and.w	r3, r3, #15
 8009994:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009996:	693b      	ldr	r3, [r7, #16]
}
 8009998:	4618      	mov	r0, r3
 800999a:	3718      	adds	r7, #24
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}

080099a0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b085      	sub	sp, #20
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ac:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80099bc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80099be:	bf00      	nop
 80099c0:	3714      	adds	r7, #20
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr

080099ca <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80099ca:	b580      	push	{r7, lr}
 80099cc:	b084      	sub	sp, #16
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099d6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099dc:	2b82      	cmp	r3, #130	; 0x82
 80099de:	d111      	bne.n	8009a04 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4618      	mov	r0, r3
 80099e6:	f002 fc09 	bl	800c1fc <SDMMC_CmdStopTransfer>
 80099ea:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d008      	beq.n	8009a04 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	431a      	orrs	r2, r3
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80099fe:	68f8      	ldr	r0, [r7, #12]
 8009a00:	f7ff fd58 	bl	80094b4 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f022 0208 	bic.w	r2, r2, #8
 8009a12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f240 523a 	movw	r2, #1338	; 0x53a
 8009a1c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	2201      	movs	r2, #1
 8009a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8009a2c:	68f8      	ldr	r0, [r7, #12]
 8009a2e:	f003 f84f 	bl	800cad0 <HAL_SD_RxCpltCallback>
#endif
}
 8009a32:	bf00      	nop
 8009a34:	3710      	adds	r7, #16
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}
	...

08009a3c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b086      	sub	sp, #24
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a48:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f7fb fb98 	bl	8005180 <HAL_DMA_GetError>
 8009a50:	4603      	mov	r3, r0
 8009a52:	2b02      	cmp	r3, #2
 8009a54:	d03e      	beq.n	8009ad4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a5c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a64:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	2b01      	cmp	r3, #1
 8009a6a:	d002      	beq.n	8009a72 <SD_DMAError+0x36>
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	2b01      	cmp	r3, #1
 8009a70:	d12d      	bne.n	8009ace <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4a19      	ldr	r2, [pc, #100]	; (8009adc <SD_DMAError+0xa0>)
 8009a78:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009a88:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a8e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8009a96:	6978      	ldr	r0, [r7, #20]
 8009a98:	f7ff ff62 	bl	8009960 <HAL_SD_GetCardState>
 8009a9c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	2b06      	cmp	r3, #6
 8009aa2:	d002      	beq.n	8009aaa <SD_DMAError+0x6e>
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	2b05      	cmp	r3, #5
 8009aa8:	d10a      	bne.n	8009ac0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f002 fba4 	bl	800c1fc <SDMMC_CmdStopTransfer>
 8009ab4:	4602      	mov	r2, r0
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aba:	431a      	orrs	r2, r3
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	2201      	movs	r2, #1
 8009ac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	2200      	movs	r2, #0
 8009acc:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8009ace:	6978      	ldr	r0, [r7, #20]
 8009ad0:	f7ff fcf0 	bl	80094b4 <HAL_SD_ErrorCallback>
#endif
  }
}
 8009ad4:	bf00      	nop
 8009ad6:	3718      	adds	r7, #24
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}
 8009adc:	004005ff 	.word	0x004005ff

08009ae0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009ae0:	b5b0      	push	{r4, r5, r7, lr}
 8009ae2:	b094      	sub	sp, #80	; 0x50
 8009ae4:	af04      	add	r7, sp, #16
 8009ae6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009ae8:	2301      	movs	r3, #1
 8009aea:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4618      	mov	r0, r3
 8009af2:	f002 fa55 	bl	800bfa0 <SDMMC_GetPowerState>
 8009af6:	4603      	mov	r3, r0
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d102      	bne.n	8009b02 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009afc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009b00:	e0b7      	b.n	8009c72 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b06:	2b03      	cmp	r3, #3
 8009b08:	d02f      	beq.n	8009b6a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f002 fc7f 	bl	800c412 <SDMMC_CmdSendCID>
 8009b14:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d001      	beq.n	8009b20 <SD_InitCard+0x40>
    {
      return errorstate;
 8009b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b1e:	e0a8      	b.n	8009c72 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	2100      	movs	r1, #0
 8009b26:	4618      	mov	r0, r3
 8009b28:	f002 fa7f 	bl	800c02a <SDMMC_GetResponse>
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	2104      	movs	r1, #4
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f002 fa76 	bl	800c02a <SDMMC_GetResponse>
 8009b3e:	4602      	mov	r2, r0
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	2108      	movs	r1, #8
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f002 fa6d 	bl	800c02a <SDMMC_GetResponse>
 8009b50:	4602      	mov	r2, r0
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	210c      	movs	r1, #12
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f002 fa64 	bl	800c02a <SDMMC_GetResponse>
 8009b62:	4602      	mov	r2, r0
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b6e:	2b03      	cmp	r3, #3
 8009b70:	d00d      	beq.n	8009b8e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f107 020e 	add.w	r2, r7, #14
 8009b7a:	4611      	mov	r1, r2
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f002 fc85 	bl	800c48c <SDMMC_CmdSetRelAdd>
 8009b82:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d001      	beq.n	8009b8e <SD_InitCard+0xae>
    {
      return errorstate;
 8009b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b8c:	e071      	b.n	8009c72 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b92:	2b03      	cmp	r3, #3
 8009b94:	d036      	beq.n	8009c04 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009b96:	89fb      	ldrh	r3, [r7, #14]
 8009b98:	461a      	mov	r2, r3
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681a      	ldr	r2, [r3, #0]
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ba6:	041b      	lsls	r3, r3, #16
 8009ba8:	4619      	mov	r1, r3
 8009baa:	4610      	mov	r0, r2
 8009bac:	f002 fc4f 	bl	800c44e <SDMMC_CmdSendCSD>
 8009bb0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009bb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d001      	beq.n	8009bbc <SD_InitCard+0xdc>
    {
      return errorstate;
 8009bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bba:	e05a      	b.n	8009c72 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	2100      	movs	r1, #0
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f002 fa31 	bl	800c02a <SDMMC_GetResponse>
 8009bc8:	4602      	mov	r2, r0
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	2104      	movs	r1, #4
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f002 fa28 	bl	800c02a <SDMMC_GetResponse>
 8009bda:	4602      	mov	r2, r0
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	2108      	movs	r1, #8
 8009be6:	4618      	mov	r0, r3
 8009be8:	f002 fa1f 	bl	800c02a <SDMMC_GetResponse>
 8009bec:	4602      	mov	r2, r0
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	210c      	movs	r1, #12
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f002 fa16 	bl	800c02a <SDMMC_GetResponse>
 8009bfe:	4602      	mov	r2, r0
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	2104      	movs	r1, #4
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f002 fa0d 	bl	800c02a <SDMMC_GetResponse>
 8009c10:	4603      	mov	r3, r0
 8009c12:	0d1a      	lsrs	r2, r3, #20
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009c18:	f107 0310 	add.w	r3, r7, #16
 8009c1c:	4619      	mov	r1, r3
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f7ff fc52 	bl	80094c8 <HAL_SD_GetCardCSD>
 8009c24:	4603      	mov	r3, r0
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d002      	beq.n	8009c30 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009c2a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009c2e:	e020      	b.n	8009c72 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6819      	ldr	r1, [r3, #0]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c38:	041b      	lsls	r3, r3, #16
 8009c3a:	f04f 0400 	mov.w	r4, #0
 8009c3e:	461a      	mov	r2, r3
 8009c40:	4623      	mov	r3, r4
 8009c42:	4608      	mov	r0, r1
 8009c44:	f002 fafc 	bl	800c240 <SDMMC_CmdSelDesel>
 8009c48:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d001      	beq.n	8009c54 <SD_InitCard+0x174>
  {
    return errorstate;
 8009c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c52:	e00e      	b.n	8009c72 <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681d      	ldr	r5, [r3, #0]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	466c      	mov	r4, sp
 8009c5c:	f103 0210 	add.w	r2, r3, #16
 8009c60:	ca07      	ldmia	r2, {r0, r1, r2}
 8009c62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009c66:	3304      	adds	r3, #4
 8009c68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009c6a:	4628      	mov	r0, r5
 8009c6c:	f002 f950 	bl	800bf10 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009c70:	2300      	movs	r3, #0
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3740      	adds	r7, #64	; 0x40
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009c7c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b086      	sub	sp, #24
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c84:	2300      	movs	r3, #0
 8009c86:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	617b      	str	r3, [r7, #20]
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	4618      	mov	r0, r3
 8009c96:	f002 faf6 	bl	800c286 <SDMMC_CmdGoIdleState>
 8009c9a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d001      	beq.n	8009ca6 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	e072      	b.n	8009d8c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4618      	mov	r0, r3
 8009cac:	f002 fb09 	bl	800c2c2 <SDMMC_CmdOperCond>
 8009cb0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d00d      	beq.n	8009cd4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f002 fadf 	bl	800c286 <SDMMC_CmdGoIdleState>
 8009cc8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d004      	beq.n	8009cda <SD_PowerON+0x5e>
    {
      return errorstate;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	e05b      	b.n	8009d8c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d137      	bne.n	8009d52 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	2100      	movs	r1, #0
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f002 fb09 	bl	800c300 <SDMMC_CmdAppCommand>
 8009cee:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d02d      	beq.n	8009d52 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009cf6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009cfa:	e047      	b.n	8009d8c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	2100      	movs	r1, #0
 8009d02:	4618      	mov	r0, r3
 8009d04:	f002 fafc 	bl	800c300 <SDMMC_CmdAppCommand>
 8009d08:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d001      	beq.n	8009d14 <SD_PowerON+0x98>
    {
      return errorstate;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	e03b      	b.n	8009d8c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	491e      	ldr	r1, [pc, #120]	; (8009d94 <SD_PowerON+0x118>)
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f002 fb12 	bl	800c344 <SDMMC_CmdAppOperCommand>
 8009d20:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d002      	beq.n	8009d2e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009d28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009d2c:	e02e      	b.n	8009d8c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	2100      	movs	r1, #0
 8009d34:	4618      	mov	r0, r3
 8009d36:	f002 f978 	bl	800c02a <SDMMC_GetResponse>
 8009d3a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	0fdb      	lsrs	r3, r3, #31
 8009d40:	2b01      	cmp	r3, #1
 8009d42:	d101      	bne.n	8009d48 <SD_PowerON+0xcc>
 8009d44:	2301      	movs	r3, #1
 8009d46:	e000      	b.n	8009d4a <SD_PowerON+0xce>
 8009d48:	2300      	movs	r3, #0
 8009d4a:	613b      	str	r3, [r7, #16]

    count++;
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	3301      	adds	r3, #1
 8009d50:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d802      	bhi.n	8009d62 <SD_PowerON+0xe6>
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d0cc      	beq.n	8009cfc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d902      	bls.n	8009d72 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009d6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009d70:	e00c      	b.n	8009d8c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d003      	beq.n	8009d84 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2201      	movs	r2, #1
 8009d80:	645a      	str	r2, [r3, #68]	; 0x44
 8009d82:	e002      	b.n	8009d8a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2200      	movs	r2, #0
 8009d88:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009d8a:	2300      	movs	r3, #0
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3718      	adds	r7, #24
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}
 8009d94:	c1100000 	.word	0xc1100000

08009d98 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b084      	sub	sp, #16
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d102      	bne.n	8009dae <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009da8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009dac:	e018      	b.n	8009de0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681a      	ldr	r2, [r3, #0]
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009db6:	041b      	lsls	r3, r3, #16
 8009db8:	4619      	mov	r1, r3
 8009dba:	4610      	mov	r0, r2
 8009dbc:	f002 fb87 	bl	800c4ce <SDMMC_CmdSendStatus>
 8009dc0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d001      	beq.n	8009dcc <SD_SendStatus+0x34>
  {
    return errorstate;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	e009      	b.n	8009de0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	2100      	movs	r1, #0
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f002 f929 	bl	800c02a <SDMMC_GetResponse>
 8009dd8:	4602      	mov	r2, r0
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009dde:	2300      	movs	r3, #0
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3710      	adds	r7, #16
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}

08009de8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b086      	sub	sp, #24
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009df0:	2300      	movs	r3, #0
 8009df2:	60fb      	str	r3, [r7, #12]
 8009df4:	2300      	movs	r3, #0
 8009df6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	2100      	movs	r1, #0
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f002 f913 	bl	800c02a <SDMMC_GetResponse>
 8009e04:	4603      	mov	r3, r0
 8009e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e0e:	d102      	bne.n	8009e16 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009e10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009e14:	e02f      	b.n	8009e76 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009e16:	f107 030c 	add.w	r3, r7, #12
 8009e1a:	4619      	mov	r1, r3
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f000 f879 	bl	8009f14 <SD_FindSCR>
 8009e22:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d001      	beq.n	8009e2e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	e023      	b.n	8009e76 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d01c      	beq.n	8009e72 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e40:	041b      	lsls	r3, r3, #16
 8009e42:	4619      	mov	r1, r3
 8009e44:	4610      	mov	r0, r2
 8009e46:	f002 fa5b 	bl	800c300 <SDMMC_CmdAppCommand>
 8009e4a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d001      	beq.n	8009e56 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	e00f      	b.n	8009e76 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	2102      	movs	r1, #2
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f002 fa95 	bl	800c38c <SDMMC_CmdBusWidth>
 8009e62:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d001      	beq.n	8009e6e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	e003      	b.n	8009e76 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	e001      	b.n	8009e76 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009e72:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3718      	adds	r7, #24
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}

08009e7e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009e7e:	b580      	push	{r7, lr}
 8009e80:	b086      	sub	sp, #24
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009e86:	2300      	movs	r3, #0
 8009e88:	60fb      	str	r3, [r7, #12]
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	2100      	movs	r1, #0
 8009e94:	4618      	mov	r0, r3
 8009e96:	f002 f8c8 	bl	800c02a <SDMMC_GetResponse>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ea0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ea4:	d102      	bne.n	8009eac <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009ea6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009eaa:	e02f      	b.n	8009f0c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009eac:	f107 030c 	add.w	r3, r7, #12
 8009eb0:	4619      	mov	r1, r3
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f000 f82e 	bl	8009f14 <SD_FindSCR>
 8009eb8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d001      	beq.n	8009ec4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	e023      	b.n	8009f0c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d01c      	beq.n	8009f08 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681a      	ldr	r2, [r3, #0]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ed6:	041b      	lsls	r3, r3, #16
 8009ed8:	4619      	mov	r1, r3
 8009eda:	4610      	mov	r0, r2
 8009edc:	f002 fa10 	bl	800c300 <SDMMC_CmdAppCommand>
 8009ee0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d001      	beq.n	8009eec <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	e00f      	b.n	8009f0c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	2100      	movs	r1, #0
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f002 fa4a 	bl	800c38c <SDMMC_CmdBusWidth>
 8009ef8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d001      	beq.n	8009f04 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	e003      	b.n	8009f0c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009f04:	2300      	movs	r3, #0
 8009f06:	e001      	b.n	8009f0c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009f08:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3718      	adds	r7, #24
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}

08009f14 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009f14:	b590      	push	{r4, r7, lr}
 8009f16:	b08f      	sub	sp, #60	; 0x3c
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009f1e:	f7f9 fe21 	bl	8003b64 <HAL_GetTick>
 8009f22:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009f24:	2300      	movs	r3, #0
 8009f26:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009f28:	2300      	movs	r3, #0
 8009f2a:	60bb      	str	r3, [r7, #8]
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	2108      	movs	r1, #8
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f002 f8b4 	bl	800c0a8 <SDMMC_CmdBlockLength>
 8009f40:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d001      	beq.n	8009f4c <SD_FindSCR+0x38>
  {
    return errorstate;
 8009f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f4a:	e0a9      	b.n	800a0a0 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681a      	ldr	r2, [r3, #0]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f54:	041b      	lsls	r3, r3, #16
 8009f56:	4619      	mov	r1, r3
 8009f58:	4610      	mov	r0, r2
 8009f5a:	f002 f9d1 	bl	800c300 <SDMMC_CmdAppCommand>
 8009f5e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d001      	beq.n	8009f6a <SD_FindSCR+0x56>
  {
    return errorstate;
 8009f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f68:	e09a      	b.n	800a0a0 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8009f6e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009f70:	2308      	movs	r3, #8
 8009f72:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009f74:	2330      	movs	r3, #48	; 0x30
 8009f76:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009f78:	2302      	movs	r3, #2
 8009f7a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009f80:	2301      	movs	r3, #1
 8009f82:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f107 0210 	add.w	r2, r7, #16
 8009f8c:	4611      	mov	r1, r2
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f002 f85e 	bl	800c050 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f002 fa19 	bl	800c3d0 <SDMMC_CmdSendSCR>
 8009f9e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d022      	beq.n	8009fec <SD_FindSCR+0xd8>
  {
    return errorstate;
 8009fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa8:	e07a      	b.n	800a0a0 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d00e      	beq.n	8009fd6 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6819      	ldr	r1, [r3, #0]
 8009fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fbe:	009b      	lsls	r3, r3, #2
 8009fc0:	f107 0208 	add.w	r2, r7, #8
 8009fc4:	18d4      	adds	r4, r2, r3
 8009fc6:	4608      	mov	r0, r1
 8009fc8:	f001 ffce 	bl	800bf68 <SDMMC_ReadFIFO>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	6023      	str	r3, [r4, #0]
      index++;
 8009fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fd2:	3301      	adds	r3, #1
 8009fd4:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009fd6:	f7f9 fdc5 	bl	8003b64 <HAL_GetTick>
 8009fda:	4602      	mov	r2, r0
 8009fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fde:	1ad3      	subs	r3, r2, r3
 8009fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fe4:	d102      	bne.n	8009fec <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009fe6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009fea:	e059      	b.n	800a0a0 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ff2:	f240 432a 	movw	r3, #1066	; 0x42a
 8009ff6:	4013      	ands	r3, r2
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d0d6      	beq.n	8009faa <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a002:	f003 0308 	and.w	r3, r3, #8
 800a006:	2b00      	cmp	r3, #0
 800a008:	d005      	beq.n	800a016 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	2208      	movs	r2, #8
 800a010:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a012:	2308      	movs	r3, #8
 800a014:	e044      	b.n	800a0a0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a01c:	f003 0302 	and.w	r3, r3, #2
 800a020:	2b00      	cmp	r3, #0
 800a022:	d005      	beq.n	800a030 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	2202      	movs	r2, #2
 800a02a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a02c:	2302      	movs	r3, #2
 800a02e:	e037      	b.n	800a0a0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a036:	f003 0320 	and.w	r3, r3, #32
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d005      	beq.n	800a04a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	2220      	movs	r2, #32
 800a044:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a046:	2320      	movs	r3, #32
 800a048:	e02a      	b.n	800a0a0 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f240 523a 	movw	r2, #1338	; 0x53a
 800a052:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	061a      	lsls	r2, r3, #24
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	021b      	lsls	r3, r3, #8
 800a05c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a060:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	0a1b      	lsrs	r3, r3, #8
 800a066:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a06a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	0e1b      	lsrs	r3, r3, #24
 800a070:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a074:	601a      	str	r2, [r3, #0]
    scr++;
 800a076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a078:	3304      	adds	r3, #4
 800a07a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	061a      	lsls	r2, r3, #24
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	021b      	lsls	r3, r3, #8
 800a084:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a088:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	0a1b      	lsrs	r3, r3, #8
 800a08e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a092:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	0e1b      	lsrs	r3, r3, #24
 800a098:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a09c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a09e:	2300      	movs	r3, #0
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	373c      	adds	r7, #60	; 0x3c
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd90      	pop	{r4, r7, pc}

0800a0a8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b082      	sub	sp, #8
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
 800a0b0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d101      	bne.n	800a0bc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	e025      	b.n	800a108 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a0c2:	b2db      	uxtb	r3, r3
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d106      	bne.n	800a0d6 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f7f9 fb1d 	bl	8003710 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2202      	movs	r2, #2
 800a0da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681a      	ldr	r2, [r3, #0]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	3304      	adds	r3, #4
 800a0e6:	4619      	mov	r1, r3
 800a0e8:	4610      	mov	r0, r2
 800a0ea:	f001 fdeb 	bl	800bcc4 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6818      	ldr	r0, [r3, #0]
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	685b      	ldr	r3, [r3, #4]
 800a0f6:	461a      	mov	r2, r3
 800a0f8:	6839      	ldr	r1, [r7, #0]
 800a0fa:	f001 fe55 	bl	800bda8 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2201      	movs	r2, #1
 800a102:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800a106:	2300      	movs	r3, #0
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3708      	adds	r7, #8
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}

0800a110 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b084      	sub	sp, #16
 800a114:	af00      	add	r7, sp, #0
 800a116:	60f8      	str	r0, [r7, #12]
 800a118:	60b9      	str	r1, [r7, #8]
 800a11a:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a122:	b2db      	uxtb	r3, r3
 800a124:	2b02      	cmp	r3, #2
 800a126:	d101      	bne.n	800a12c <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800a128:	2302      	movs	r3, #2
 800a12a:	e018      	b.n	800a15e <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	2202      	movs	r2, #2
 800a130:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	687a      	ldr	r2, [r7, #4]
 800a13a:	68b9      	ldr	r1, [r7, #8]
 800a13c:	4618      	mov	r0, r3
 800a13e:	f001 feb3 	bl	800bea8 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	2b02      	cmp	r3, #2
 800a148:	d104      	bne.n	800a154 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	2205      	movs	r2, #5
 800a14e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800a152:	e003      	b.n	800a15c <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	2201      	movs	r2, #1
 800a158:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800a15c:	2300      	movs	r3, #0
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3710      	adds	r7, #16
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}

0800a166 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a166:	b580      	push	{r7, lr}
 800a168:	b082      	sub	sp, #8
 800a16a:	af00      	add	r7, sp, #0
 800a16c:	6078      	str	r0, [r7, #4]
 800a16e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a176:	b2db      	uxtb	r3, r3
 800a178:	2b02      	cmp	r3, #2
 800a17a:	d101      	bne.n	800a180 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800a17c:	2302      	movs	r3, #2
 800a17e:	e00e      	b.n	800a19e <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2202      	movs	r2, #2
 800a184:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	6839      	ldr	r1, [r7, #0]
 800a18e:	4618      	mov	r0, r3
 800a190:	f001 feab 	bl	800beea <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2201      	movs	r2, #1
 800a198:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800a19c:	2300      	movs	r3, #0
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3708      	adds	r7, #8
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}
	...

0800a1a8 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b084      	sub	sp, #16
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d101      	bne.n	800a1ba <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	e04c      	b.n	800a254 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a1c0:	b2db      	uxtb	r3, r3
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d106      	bne.n	800a1d4 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f7f8 ff7a 	bl	80030c8 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2202      	movs	r2, #2
 800a1d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	681a      	ldr	r2, [r3, #0]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f022 0203 	bic.w	r2, r2, #3
 800a1ea:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800a1f4:	68fa      	ldr	r2, [r7, #12]
 800a1f6:	4b19      	ldr	r3, [pc, #100]	; (800a25c <HAL_SPDIFRX_Init+0xb4>)
 800a1f8:	4013      	ands	r3, r2
 800a1fa:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800a204:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800a20a:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800a210:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800a216:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800a21c:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800a222:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800a228:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800a22e:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 800a234:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800a236:	68fa      	ldr	r2, [r7, #12]
 800a238:	4313      	orrs	r3, r2
 800a23a:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	68fa      	ldr	r2, [r7, #12]
 800a242:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2200      	movs	r2, #0
 800a248:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2201      	movs	r2, #1
 800a24e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800a252:	2300      	movs	r3, #0
}
 800a254:	4618      	mov	r0, r3
 800a256:	3710      	adds	r7, #16
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}
 800a25c:	fff88407 	.word	0xfff88407

0800a260 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b084      	sub	sp, #16
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d101      	bne.n	800a272 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a26e:	2301      	movs	r3, #1
 800a270:	e084      	b.n	800a37c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2200      	movs	r2, #0
 800a276:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a27e:	b2db      	uxtb	r3, r3
 800a280:	2b00      	cmp	r3, #0
 800a282:	d106      	bne.n	800a292 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2200      	movs	r2, #0
 800a288:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f7f8 ff5d 	bl	800314c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2202      	movs	r2, #2
 800a296:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	681a      	ldr	r2, [r3, #0]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a2a8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	68db      	ldr	r3, [r3, #12]
 800a2ae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a2b2:	d902      	bls.n	800a2ba <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	60fb      	str	r3, [r7, #12]
 800a2b8:	e002      	b.n	800a2c0 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a2ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a2be:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	68db      	ldr	r3, [r3, #12]
 800a2c4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a2c8:	d007      	beq.n	800a2da <HAL_SPI_Init+0x7a>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	68db      	ldr	r3, [r3, #12]
 800a2ce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a2d2:	d002      	beq.n	800a2da <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d10b      	bne.n	800a2fa <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	68db      	ldr	r3, [r3, #12]
 800a2e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a2ea:	d903      	bls.n	800a2f4 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2202      	movs	r2, #2
 800a2f0:	631a      	str	r2, [r3, #48]	; 0x30
 800a2f2:	e002      	b.n	800a2fa <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	685a      	ldr	r2, [r3, #4]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	689b      	ldr	r3, [r3, #8]
 800a302:	431a      	orrs	r2, r3
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	691b      	ldr	r3, [r3, #16]
 800a308:	431a      	orrs	r2, r3
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	695b      	ldr	r3, [r3, #20]
 800a30e:	431a      	orrs	r2, r3
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	699b      	ldr	r3, [r3, #24]
 800a314:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a318:	431a      	orrs	r2, r3
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	69db      	ldr	r3, [r3, #28]
 800a31e:	431a      	orrs	r2, r3
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6a1b      	ldr	r3, [r3, #32]
 800a324:	ea42 0103 	orr.w	r1, r2, r3
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	430a      	orrs	r2, r1
 800a332:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	699b      	ldr	r3, [r3, #24]
 800a338:	0c1b      	lsrs	r3, r3, #16
 800a33a:	f003 0204 	and.w	r2, r3, #4
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a342:	431a      	orrs	r2, r3
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a348:	431a      	orrs	r2, r3
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	68db      	ldr	r3, [r3, #12]
 800a34e:	ea42 0103 	orr.w	r1, r2, r3
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	68fa      	ldr	r2, [r7, #12]
 800a358:	430a      	orrs	r2, r1
 800a35a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	69da      	ldr	r2, [r3, #28]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a36a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2200      	movs	r2, #0
 800a370:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2201      	movs	r2, #1
 800a376:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a37a:	2300      	movs	r3, #0
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3710      	adds	r7, #16
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}

0800a384 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b082      	sub	sp, #8
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d101      	bne.n	800a396 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a392:	2301      	movs	r3, #1
 800a394:	e01d      	b.n	800a3d2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a39c:	b2db      	uxtb	r3, r3
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d106      	bne.n	800a3b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f7f8 ff30 	bl	8003210 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2202      	movs	r2, #2
 800a3b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681a      	ldr	r2, [r3, #0]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	3304      	adds	r3, #4
 800a3c0:	4619      	mov	r1, r3
 800a3c2:	4610      	mov	r0, r2
 800a3c4:	f000 fb78 	bl	800aab8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a3d0:	2300      	movs	r3, #0
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3708      	adds	r7, #8
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}
	...

0800a3dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b085      	sub	sp, #20
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	68da      	ldr	r2, [r3, #12]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f042 0201 	orr.w	r2, r2, #1
 800a3f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	689a      	ldr	r2, [r3, #8]
 800a3fa:	4b0c      	ldr	r3, [pc, #48]	; (800a42c <HAL_TIM_Base_Start_IT+0x50>)
 800a3fc:	4013      	ands	r3, r2
 800a3fe:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2b06      	cmp	r3, #6
 800a404:	d00b      	beq.n	800a41e <HAL_TIM_Base_Start_IT+0x42>
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a40c:	d007      	beq.n	800a41e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	681a      	ldr	r2, [r3, #0]
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f042 0201 	orr.w	r2, r2, #1
 800a41c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a41e:	2300      	movs	r3, #0
}
 800a420:	4618      	mov	r0, r3
 800a422:	3714      	adds	r7, #20
 800a424:	46bd      	mov	sp, r7
 800a426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42a:	4770      	bx	lr
 800a42c:	00010007 	.word	0x00010007

0800a430 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b082      	sub	sp, #8
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d101      	bne.n	800a442 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a43e:	2301      	movs	r3, #1
 800a440:	e01d      	b.n	800a47e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a448:	b2db      	uxtb	r3, r3
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d106      	bne.n	800a45c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2200      	movs	r2, #0
 800a452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f7f8 ff48 	bl	80032ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2202      	movs	r2, #2
 800a460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681a      	ldr	r2, [r3, #0]
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	3304      	adds	r3, #4
 800a46c:	4619      	mov	r1, r3
 800a46e:	4610      	mov	r0, r2
 800a470:	f000 fb22 	bl	800aab8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2201      	movs	r2, #1
 800a478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a47c:	2300      	movs	r3, #0
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3708      	adds	r7, #8
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}

0800a486 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a486:	b580      	push	{r7, lr}
 800a488:	b082      	sub	sp, #8
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	691b      	ldr	r3, [r3, #16]
 800a494:	f003 0302 	and.w	r3, r3, #2
 800a498:	2b02      	cmp	r3, #2
 800a49a:	d122      	bne.n	800a4e2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	68db      	ldr	r3, [r3, #12]
 800a4a2:	f003 0302 	and.w	r3, r3, #2
 800a4a6:	2b02      	cmp	r3, #2
 800a4a8:	d11b      	bne.n	800a4e2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f06f 0202 	mvn.w	r2, #2
 800a4b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	699b      	ldr	r3, [r3, #24]
 800a4c0:	f003 0303 	and.w	r3, r3, #3
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d003      	beq.n	800a4d0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f000 fad7 	bl	800aa7c <HAL_TIM_IC_CaptureCallback>
 800a4ce:	e005      	b.n	800a4dc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f000 fac9 	bl	800aa68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f000 fada 	bl	800aa90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	691b      	ldr	r3, [r3, #16]
 800a4e8:	f003 0304 	and.w	r3, r3, #4
 800a4ec:	2b04      	cmp	r3, #4
 800a4ee:	d122      	bne.n	800a536 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	68db      	ldr	r3, [r3, #12]
 800a4f6:	f003 0304 	and.w	r3, r3, #4
 800a4fa:	2b04      	cmp	r3, #4
 800a4fc:	d11b      	bne.n	800a536 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f06f 0204 	mvn.w	r2, #4
 800a506:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2202      	movs	r2, #2
 800a50c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	699b      	ldr	r3, [r3, #24]
 800a514:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d003      	beq.n	800a524 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f000 faad 	bl	800aa7c <HAL_TIM_IC_CaptureCallback>
 800a522:	e005      	b.n	800a530 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f000 fa9f 	bl	800aa68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f000 fab0 	bl	800aa90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2200      	movs	r2, #0
 800a534:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	691b      	ldr	r3, [r3, #16]
 800a53c:	f003 0308 	and.w	r3, r3, #8
 800a540:	2b08      	cmp	r3, #8
 800a542:	d122      	bne.n	800a58a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	68db      	ldr	r3, [r3, #12]
 800a54a:	f003 0308 	and.w	r3, r3, #8
 800a54e:	2b08      	cmp	r3, #8
 800a550:	d11b      	bne.n	800a58a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f06f 0208 	mvn.w	r2, #8
 800a55a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2204      	movs	r2, #4
 800a560:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	69db      	ldr	r3, [r3, #28]
 800a568:	f003 0303 	and.w	r3, r3, #3
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d003      	beq.n	800a578 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f000 fa83 	bl	800aa7c <HAL_TIM_IC_CaptureCallback>
 800a576:	e005      	b.n	800a584 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f000 fa75 	bl	800aa68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f000 fa86 	bl	800aa90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2200      	movs	r2, #0
 800a588:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	691b      	ldr	r3, [r3, #16]
 800a590:	f003 0310 	and.w	r3, r3, #16
 800a594:	2b10      	cmp	r3, #16
 800a596:	d122      	bne.n	800a5de <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	68db      	ldr	r3, [r3, #12]
 800a59e:	f003 0310 	and.w	r3, r3, #16
 800a5a2:	2b10      	cmp	r3, #16
 800a5a4:	d11b      	bne.n	800a5de <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f06f 0210 	mvn.w	r2, #16
 800a5ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2208      	movs	r2, #8
 800a5b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	69db      	ldr	r3, [r3, #28]
 800a5bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d003      	beq.n	800a5cc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f000 fa59 	bl	800aa7c <HAL_TIM_IC_CaptureCallback>
 800a5ca:	e005      	b.n	800a5d8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f000 fa4b 	bl	800aa68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f000 fa5c 	bl	800aa90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	691b      	ldr	r3, [r3, #16]
 800a5e4:	f003 0301 	and.w	r3, r3, #1
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	d10e      	bne.n	800a60a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	68db      	ldr	r3, [r3, #12]
 800a5f2:	f003 0301 	and.w	r3, r3, #1
 800a5f6:	2b01      	cmp	r3, #1
 800a5f8:	d107      	bne.n	800a60a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f06f 0201 	mvn.w	r2, #1
 800a602:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f7f8 f985 	bl	8002914 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	691b      	ldr	r3, [r3, #16]
 800a610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a614:	2b80      	cmp	r3, #128	; 0x80
 800a616:	d10e      	bne.n	800a636 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	68db      	ldr	r3, [r3, #12]
 800a61e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a622:	2b80      	cmp	r3, #128	; 0x80
 800a624:	d107      	bne.n	800a636 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a62e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f000 feef 	bl	800b414 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	691b      	ldr	r3, [r3, #16]
 800a63c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a640:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a644:	d10e      	bne.n	800a664 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	68db      	ldr	r3, [r3, #12]
 800a64c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a650:	2b80      	cmp	r3, #128	; 0x80
 800a652:	d107      	bne.n	800a664 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a65c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f000 fee2 	bl	800b428 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	691b      	ldr	r3, [r3, #16]
 800a66a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a66e:	2b40      	cmp	r3, #64	; 0x40
 800a670:	d10e      	bne.n	800a690 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	68db      	ldr	r3, [r3, #12]
 800a678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a67c:	2b40      	cmp	r3, #64	; 0x40
 800a67e:	d107      	bne.n	800a690 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f000 fa0a 	bl	800aaa4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	691b      	ldr	r3, [r3, #16]
 800a696:	f003 0320 	and.w	r3, r3, #32
 800a69a:	2b20      	cmp	r3, #32
 800a69c:	d10e      	bne.n	800a6bc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	68db      	ldr	r3, [r3, #12]
 800a6a4:	f003 0320 	and.w	r3, r3, #32
 800a6a8:	2b20      	cmp	r3, #32
 800a6aa:	d107      	bne.n	800a6bc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f06f 0220 	mvn.w	r2, #32
 800a6b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f000 fea2 	bl	800b400 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a6bc:	bf00      	nop
 800a6be:	3708      	adds	r7, #8
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}

0800a6c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b084      	sub	sp, #16
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	60f8      	str	r0, [r7, #12]
 800a6cc:	60b9      	str	r1, [r7, #8]
 800a6ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6d6:	2b01      	cmp	r3, #1
 800a6d8:	d101      	bne.n	800a6de <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a6da:	2302      	movs	r3, #2
 800a6dc:	e105      	b.n	800a8ea <HAL_TIM_PWM_ConfigChannel+0x226>
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	2202      	movs	r2, #2
 800a6ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2b14      	cmp	r3, #20
 800a6f2:	f200 80f0 	bhi.w	800a8d6 <HAL_TIM_PWM_ConfigChannel+0x212>
 800a6f6:	a201      	add	r2, pc, #4	; (adr r2, 800a6fc <HAL_TIM_PWM_ConfigChannel+0x38>)
 800a6f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6fc:	0800a751 	.word	0x0800a751
 800a700:	0800a8d7 	.word	0x0800a8d7
 800a704:	0800a8d7 	.word	0x0800a8d7
 800a708:	0800a8d7 	.word	0x0800a8d7
 800a70c:	0800a791 	.word	0x0800a791
 800a710:	0800a8d7 	.word	0x0800a8d7
 800a714:	0800a8d7 	.word	0x0800a8d7
 800a718:	0800a8d7 	.word	0x0800a8d7
 800a71c:	0800a7d3 	.word	0x0800a7d3
 800a720:	0800a8d7 	.word	0x0800a8d7
 800a724:	0800a8d7 	.word	0x0800a8d7
 800a728:	0800a8d7 	.word	0x0800a8d7
 800a72c:	0800a813 	.word	0x0800a813
 800a730:	0800a8d7 	.word	0x0800a8d7
 800a734:	0800a8d7 	.word	0x0800a8d7
 800a738:	0800a8d7 	.word	0x0800a8d7
 800a73c:	0800a855 	.word	0x0800a855
 800a740:	0800a8d7 	.word	0x0800a8d7
 800a744:	0800a8d7 	.word	0x0800a8d7
 800a748:	0800a8d7 	.word	0x0800a8d7
 800a74c:	0800a895 	.word	0x0800a895
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	68b9      	ldr	r1, [r7, #8]
 800a756:	4618      	mov	r0, r3
 800a758:	f000 fa4e 	bl	800abf8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	699a      	ldr	r2, [r3, #24]
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f042 0208 	orr.w	r2, r2, #8
 800a76a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	699a      	ldr	r2, [r3, #24]
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f022 0204 	bic.w	r2, r2, #4
 800a77a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	6999      	ldr	r1, [r3, #24]
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	691a      	ldr	r2, [r3, #16]
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	430a      	orrs	r2, r1
 800a78c:	619a      	str	r2, [r3, #24]
      break;
 800a78e:	e0a3      	b.n	800a8d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	68b9      	ldr	r1, [r7, #8]
 800a796:	4618      	mov	r0, r3
 800a798:	f000 faa0 	bl	800acdc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	699a      	ldr	r2, [r3, #24]
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a7aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	699a      	ldr	r2, [r3, #24]
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a7ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	6999      	ldr	r1, [r3, #24]
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	691b      	ldr	r3, [r3, #16]
 800a7c6:	021a      	lsls	r2, r3, #8
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	430a      	orrs	r2, r1
 800a7ce:	619a      	str	r2, [r3, #24]
      break;
 800a7d0:	e082      	b.n	800a8d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	68b9      	ldr	r1, [r7, #8]
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f000 faf7 	bl	800adcc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	69da      	ldr	r2, [r3, #28]
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f042 0208 	orr.w	r2, r2, #8
 800a7ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	69da      	ldr	r2, [r3, #28]
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f022 0204 	bic.w	r2, r2, #4
 800a7fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	69d9      	ldr	r1, [r3, #28]
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	691a      	ldr	r2, [r3, #16]
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	430a      	orrs	r2, r1
 800a80e:	61da      	str	r2, [r3, #28]
      break;
 800a810:	e062      	b.n	800a8d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	68b9      	ldr	r1, [r7, #8]
 800a818:	4618      	mov	r0, r3
 800a81a:	f000 fb4d 	bl	800aeb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	69da      	ldr	r2, [r3, #28]
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a82c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	69da      	ldr	r2, [r3, #28]
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a83c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	69d9      	ldr	r1, [r3, #28]
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	691b      	ldr	r3, [r3, #16]
 800a848:	021a      	lsls	r2, r3, #8
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	430a      	orrs	r2, r1
 800a850:	61da      	str	r2, [r3, #28]
      break;
 800a852:	e041      	b.n	800a8d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	68b9      	ldr	r1, [r7, #8]
 800a85a:	4618      	mov	r0, r3
 800a85c:	f000 fb84 	bl	800af68 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f042 0208 	orr.w	r2, r2, #8
 800a86e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f022 0204 	bic.w	r2, r2, #4
 800a87e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	691a      	ldr	r2, [r3, #16]
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	430a      	orrs	r2, r1
 800a890:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a892:	e021      	b.n	800a8d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	68b9      	ldr	r1, [r7, #8]
 800a89a:	4618      	mov	r0, r3
 800a89c:	f000 fbb6 	bl	800b00c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a8ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a8be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	691b      	ldr	r3, [r3, #16]
 800a8ca:	021a      	lsls	r2, r3, #8
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	430a      	orrs	r2, r1
 800a8d2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a8d4:	e000      	b.n	800a8d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800a8d6:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	2201      	movs	r2, #1
 800a8dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a8e8:	2300      	movs	r3, #0
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3710      	adds	r7, #16
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}
 800a8f2:	bf00      	nop

0800a8f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b084      	sub	sp, #16
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a904:	2b01      	cmp	r3, #1
 800a906:	d101      	bne.n	800a90c <HAL_TIM_ConfigClockSource+0x18>
 800a908:	2302      	movs	r3, #2
 800a90a:	e0a6      	b.n	800aa5a <HAL_TIM_ConfigClockSource+0x166>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2201      	movs	r2, #1
 800a910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2202      	movs	r2, #2
 800a918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	689b      	ldr	r3, [r3, #8]
 800a922:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a924:	68fa      	ldr	r2, [r7, #12]
 800a926:	4b4f      	ldr	r3, [pc, #316]	; (800aa64 <HAL_TIM_ConfigClockSource+0x170>)
 800a928:	4013      	ands	r3, r2
 800a92a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a932:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	68fa      	ldr	r2, [r7, #12]
 800a93a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	2b40      	cmp	r3, #64	; 0x40
 800a942:	d067      	beq.n	800aa14 <HAL_TIM_ConfigClockSource+0x120>
 800a944:	2b40      	cmp	r3, #64	; 0x40
 800a946:	d80b      	bhi.n	800a960 <HAL_TIM_ConfigClockSource+0x6c>
 800a948:	2b10      	cmp	r3, #16
 800a94a:	d073      	beq.n	800aa34 <HAL_TIM_ConfigClockSource+0x140>
 800a94c:	2b10      	cmp	r3, #16
 800a94e:	d802      	bhi.n	800a956 <HAL_TIM_ConfigClockSource+0x62>
 800a950:	2b00      	cmp	r3, #0
 800a952:	d06f      	beq.n	800aa34 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800a954:	e078      	b.n	800aa48 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a956:	2b20      	cmp	r3, #32
 800a958:	d06c      	beq.n	800aa34 <HAL_TIM_ConfigClockSource+0x140>
 800a95a:	2b30      	cmp	r3, #48	; 0x30
 800a95c:	d06a      	beq.n	800aa34 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800a95e:	e073      	b.n	800aa48 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a960:	2b70      	cmp	r3, #112	; 0x70
 800a962:	d00d      	beq.n	800a980 <HAL_TIM_ConfigClockSource+0x8c>
 800a964:	2b70      	cmp	r3, #112	; 0x70
 800a966:	d804      	bhi.n	800a972 <HAL_TIM_ConfigClockSource+0x7e>
 800a968:	2b50      	cmp	r3, #80	; 0x50
 800a96a:	d033      	beq.n	800a9d4 <HAL_TIM_ConfigClockSource+0xe0>
 800a96c:	2b60      	cmp	r3, #96	; 0x60
 800a96e:	d041      	beq.n	800a9f4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800a970:	e06a      	b.n	800aa48 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a976:	d066      	beq.n	800aa46 <HAL_TIM_ConfigClockSource+0x152>
 800a978:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a97c:	d017      	beq.n	800a9ae <HAL_TIM_ConfigClockSource+0xba>
      break;
 800a97e:	e063      	b.n	800aa48 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6818      	ldr	r0, [r3, #0]
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	6899      	ldr	r1, [r3, #8]
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	685a      	ldr	r2, [r3, #4]
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	68db      	ldr	r3, [r3, #12]
 800a990:	f000 fc0a 	bl	800b1a8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	689b      	ldr	r3, [r3, #8]
 800a99a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a9a2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	68fa      	ldr	r2, [r7, #12]
 800a9aa:	609a      	str	r2, [r3, #8]
      break;
 800a9ac:	e04c      	b.n	800aa48 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6818      	ldr	r0, [r3, #0]
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	6899      	ldr	r1, [r3, #8]
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	685a      	ldr	r2, [r3, #4]
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	68db      	ldr	r3, [r3, #12]
 800a9be:	f000 fbf3 	bl	800b1a8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	689a      	ldr	r2, [r3, #8]
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a9d0:	609a      	str	r2, [r3, #8]
      break;
 800a9d2:	e039      	b.n	800aa48 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6818      	ldr	r0, [r3, #0]
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	6859      	ldr	r1, [r3, #4]
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	68db      	ldr	r3, [r3, #12]
 800a9e0:	461a      	mov	r2, r3
 800a9e2:	f000 fb67 	bl	800b0b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	2150      	movs	r1, #80	; 0x50
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f000 fbc0 	bl	800b172 <TIM_ITRx_SetConfig>
      break;
 800a9f2:	e029      	b.n	800aa48 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6818      	ldr	r0, [r3, #0]
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	6859      	ldr	r1, [r3, #4]
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	68db      	ldr	r3, [r3, #12]
 800aa00:	461a      	mov	r2, r3
 800aa02:	f000 fb86 	bl	800b112 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	2160      	movs	r1, #96	; 0x60
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f000 fbb0 	bl	800b172 <TIM_ITRx_SetConfig>
      break;
 800aa12:	e019      	b.n	800aa48 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6818      	ldr	r0, [r3, #0]
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	6859      	ldr	r1, [r3, #4]
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	68db      	ldr	r3, [r3, #12]
 800aa20:	461a      	mov	r2, r3
 800aa22:	f000 fb47 	bl	800b0b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	2140      	movs	r1, #64	; 0x40
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f000 fba0 	bl	800b172 <TIM_ITRx_SetConfig>
      break;
 800aa32:	e009      	b.n	800aa48 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681a      	ldr	r2, [r3, #0]
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	4619      	mov	r1, r3
 800aa3e:	4610      	mov	r0, r2
 800aa40:	f000 fb97 	bl	800b172 <TIM_ITRx_SetConfig>
      break;
 800aa44:	e000      	b.n	800aa48 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800aa46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2200      	movs	r2, #0
 800aa54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aa58:	2300      	movs	r3, #0
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3710      	adds	r7, #16
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}
 800aa62:	bf00      	nop
 800aa64:	fffeff88 	.word	0xfffeff88

0800aa68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b083      	sub	sp, #12
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aa70:	bf00      	nop
 800aa72:	370c      	adds	r7, #12
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr

0800aa7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b083      	sub	sp, #12
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aa84:	bf00      	nop
 800aa86:	370c      	adds	r7, #12
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8e:	4770      	bx	lr

0800aa90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aa90:	b480      	push	{r7}
 800aa92:	b083      	sub	sp, #12
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aa98:	bf00      	nop
 800aa9a:	370c      	adds	r7, #12
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa2:	4770      	bx	lr

0800aaa4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b083      	sub	sp, #12
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aaac:	bf00      	nop
 800aaae:	370c      	adds	r7, #12
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr

0800aab8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b085      	sub	sp, #20
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
 800aac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	4a40      	ldr	r2, [pc, #256]	; (800abcc <TIM_Base_SetConfig+0x114>)
 800aacc:	4293      	cmp	r3, r2
 800aace:	d013      	beq.n	800aaf8 <TIM_Base_SetConfig+0x40>
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aad6:	d00f      	beq.n	800aaf8 <TIM_Base_SetConfig+0x40>
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	4a3d      	ldr	r2, [pc, #244]	; (800abd0 <TIM_Base_SetConfig+0x118>)
 800aadc:	4293      	cmp	r3, r2
 800aade:	d00b      	beq.n	800aaf8 <TIM_Base_SetConfig+0x40>
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	4a3c      	ldr	r2, [pc, #240]	; (800abd4 <TIM_Base_SetConfig+0x11c>)
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d007      	beq.n	800aaf8 <TIM_Base_SetConfig+0x40>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	4a3b      	ldr	r2, [pc, #236]	; (800abd8 <TIM_Base_SetConfig+0x120>)
 800aaec:	4293      	cmp	r3, r2
 800aaee:	d003      	beq.n	800aaf8 <TIM_Base_SetConfig+0x40>
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	4a3a      	ldr	r2, [pc, #232]	; (800abdc <TIM_Base_SetConfig+0x124>)
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	d108      	bne.n	800ab0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aafe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	685b      	ldr	r3, [r3, #4]
 800ab04:	68fa      	ldr	r2, [r7, #12]
 800ab06:	4313      	orrs	r3, r2
 800ab08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	4a2f      	ldr	r2, [pc, #188]	; (800abcc <TIM_Base_SetConfig+0x114>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d02b      	beq.n	800ab6a <TIM_Base_SetConfig+0xb2>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab18:	d027      	beq.n	800ab6a <TIM_Base_SetConfig+0xb2>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	4a2c      	ldr	r2, [pc, #176]	; (800abd0 <TIM_Base_SetConfig+0x118>)
 800ab1e:	4293      	cmp	r3, r2
 800ab20:	d023      	beq.n	800ab6a <TIM_Base_SetConfig+0xb2>
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	4a2b      	ldr	r2, [pc, #172]	; (800abd4 <TIM_Base_SetConfig+0x11c>)
 800ab26:	4293      	cmp	r3, r2
 800ab28:	d01f      	beq.n	800ab6a <TIM_Base_SetConfig+0xb2>
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	4a2a      	ldr	r2, [pc, #168]	; (800abd8 <TIM_Base_SetConfig+0x120>)
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	d01b      	beq.n	800ab6a <TIM_Base_SetConfig+0xb2>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	4a29      	ldr	r2, [pc, #164]	; (800abdc <TIM_Base_SetConfig+0x124>)
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d017      	beq.n	800ab6a <TIM_Base_SetConfig+0xb2>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	4a28      	ldr	r2, [pc, #160]	; (800abe0 <TIM_Base_SetConfig+0x128>)
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d013      	beq.n	800ab6a <TIM_Base_SetConfig+0xb2>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	4a27      	ldr	r2, [pc, #156]	; (800abe4 <TIM_Base_SetConfig+0x12c>)
 800ab46:	4293      	cmp	r3, r2
 800ab48:	d00f      	beq.n	800ab6a <TIM_Base_SetConfig+0xb2>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	4a26      	ldr	r2, [pc, #152]	; (800abe8 <TIM_Base_SetConfig+0x130>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d00b      	beq.n	800ab6a <TIM_Base_SetConfig+0xb2>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	4a25      	ldr	r2, [pc, #148]	; (800abec <TIM_Base_SetConfig+0x134>)
 800ab56:	4293      	cmp	r3, r2
 800ab58:	d007      	beq.n	800ab6a <TIM_Base_SetConfig+0xb2>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	4a24      	ldr	r2, [pc, #144]	; (800abf0 <TIM_Base_SetConfig+0x138>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d003      	beq.n	800ab6a <TIM_Base_SetConfig+0xb2>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	4a23      	ldr	r2, [pc, #140]	; (800abf4 <TIM_Base_SetConfig+0x13c>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d108      	bne.n	800ab7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	68db      	ldr	r3, [r3, #12]
 800ab76:	68fa      	ldr	r2, [r7, #12]
 800ab78:	4313      	orrs	r3, r2
 800ab7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	695b      	ldr	r3, [r3, #20]
 800ab86:	4313      	orrs	r3, r2
 800ab88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	68fa      	ldr	r2, [r7, #12]
 800ab8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	689a      	ldr	r2, [r3, #8]
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	681a      	ldr	r2, [r3, #0]
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	4a0a      	ldr	r2, [pc, #40]	; (800abcc <TIM_Base_SetConfig+0x114>)
 800aba4:	4293      	cmp	r3, r2
 800aba6:	d003      	beq.n	800abb0 <TIM_Base_SetConfig+0xf8>
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	4a0c      	ldr	r2, [pc, #48]	; (800abdc <TIM_Base_SetConfig+0x124>)
 800abac:	4293      	cmp	r3, r2
 800abae:	d103      	bne.n	800abb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	691a      	ldr	r2, [r3, #16]
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2201      	movs	r2, #1
 800abbc:	615a      	str	r2, [r3, #20]
}
 800abbe:	bf00      	nop
 800abc0:	3714      	adds	r7, #20
 800abc2:	46bd      	mov	sp, r7
 800abc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc8:	4770      	bx	lr
 800abca:	bf00      	nop
 800abcc:	40010000 	.word	0x40010000
 800abd0:	40000400 	.word	0x40000400
 800abd4:	40000800 	.word	0x40000800
 800abd8:	40000c00 	.word	0x40000c00
 800abdc:	40010400 	.word	0x40010400
 800abe0:	40014000 	.word	0x40014000
 800abe4:	40014400 	.word	0x40014400
 800abe8:	40014800 	.word	0x40014800
 800abec:	40001800 	.word	0x40001800
 800abf0:	40001c00 	.word	0x40001c00
 800abf4:	40002000 	.word	0x40002000

0800abf8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800abf8:	b480      	push	{r7}
 800abfa:	b087      	sub	sp, #28
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
 800ac00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6a1b      	ldr	r3, [r3, #32]
 800ac06:	f023 0201 	bic.w	r2, r3, #1
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6a1b      	ldr	r3, [r3, #32]
 800ac12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	685b      	ldr	r3, [r3, #4]
 800ac18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	699b      	ldr	r3, [r3, #24]
 800ac1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ac20:	68fa      	ldr	r2, [r7, #12]
 800ac22:	4b2b      	ldr	r3, [pc, #172]	; (800acd0 <TIM_OC1_SetConfig+0xd8>)
 800ac24:	4013      	ands	r3, r2
 800ac26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	f023 0303 	bic.w	r3, r3, #3
 800ac2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	68fa      	ldr	r2, [r7, #12]
 800ac36:	4313      	orrs	r3, r2
 800ac38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	f023 0302 	bic.w	r3, r3, #2
 800ac40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	689b      	ldr	r3, [r3, #8]
 800ac46:	697a      	ldr	r2, [r7, #20]
 800ac48:	4313      	orrs	r3, r2
 800ac4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	4a21      	ldr	r2, [pc, #132]	; (800acd4 <TIM_OC1_SetConfig+0xdc>)
 800ac50:	4293      	cmp	r3, r2
 800ac52:	d003      	beq.n	800ac5c <TIM_OC1_SetConfig+0x64>
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	4a20      	ldr	r2, [pc, #128]	; (800acd8 <TIM_OC1_SetConfig+0xe0>)
 800ac58:	4293      	cmp	r3, r2
 800ac5a:	d10c      	bne.n	800ac76 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	f023 0308 	bic.w	r3, r3, #8
 800ac62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	68db      	ldr	r3, [r3, #12]
 800ac68:	697a      	ldr	r2, [r7, #20]
 800ac6a:	4313      	orrs	r3, r2
 800ac6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	f023 0304 	bic.w	r3, r3, #4
 800ac74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	4a16      	ldr	r2, [pc, #88]	; (800acd4 <TIM_OC1_SetConfig+0xdc>)
 800ac7a:	4293      	cmp	r3, r2
 800ac7c:	d003      	beq.n	800ac86 <TIM_OC1_SetConfig+0x8e>
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	4a15      	ldr	r2, [pc, #84]	; (800acd8 <TIM_OC1_SetConfig+0xe0>)
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d111      	bne.n	800acaa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ac86:	693b      	ldr	r3, [r7, #16]
 800ac88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ac8e:	693b      	ldr	r3, [r7, #16]
 800ac90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ac94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	695b      	ldr	r3, [r3, #20]
 800ac9a:	693a      	ldr	r2, [r7, #16]
 800ac9c:	4313      	orrs	r3, r2
 800ac9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	699b      	ldr	r3, [r3, #24]
 800aca4:	693a      	ldr	r2, [r7, #16]
 800aca6:	4313      	orrs	r3, r2
 800aca8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	693a      	ldr	r2, [r7, #16]
 800acae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	68fa      	ldr	r2, [r7, #12]
 800acb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	685a      	ldr	r2, [r3, #4]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	697a      	ldr	r2, [r7, #20]
 800acc2:	621a      	str	r2, [r3, #32]
}
 800acc4:	bf00      	nop
 800acc6:	371c      	adds	r7, #28
 800acc8:	46bd      	mov	sp, r7
 800acca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acce:	4770      	bx	lr
 800acd0:	fffeff8f 	.word	0xfffeff8f
 800acd4:	40010000 	.word	0x40010000
 800acd8:	40010400 	.word	0x40010400

0800acdc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800acdc:	b480      	push	{r7}
 800acde:	b087      	sub	sp, #28
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
 800ace4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6a1b      	ldr	r3, [r3, #32]
 800acea:	f023 0210 	bic.w	r2, r3, #16
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6a1b      	ldr	r3, [r3, #32]
 800acf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	685b      	ldr	r3, [r3, #4]
 800acfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	699b      	ldr	r3, [r3, #24]
 800ad02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ad04:	68fa      	ldr	r2, [r7, #12]
 800ad06:	4b2e      	ldr	r3, [pc, #184]	; (800adc0 <TIM_OC2_SetConfig+0xe4>)
 800ad08:	4013      	ands	r3, r2
 800ad0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	021b      	lsls	r3, r3, #8
 800ad1a:	68fa      	ldr	r2, [r7, #12]
 800ad1c:	4313      	orrs	r3, r2
 800ad1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	f023 0320 	bic.w	r3, r3, #32
 800ad26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	689b      	ldr	r3, [r3, #8]
 800ad2c:	011b      	lsls	r3, r3, #4
 800ad2e:	697a      	ldr	r2, [r7, #20]
 800ad30:	4313      	orrs	r3, r2
 800ad32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	4a23      	ldr	r2, [pc, #140]	; (800adc4 <TIM_OC2_SetConfig+0xe8>)
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	d003      	beq.n	800ad44 <TIM_OC2_SetConfig+0x68>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	4a22      	ldr	r2, [pc, #136]	; (800adc8 <TIM_OC2_SetConfig+0xec>)
 800ad40:	4293      	cmp	r3, r2
 800ad42:	d10d      	bne.n	800ad60 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ad44:	697b      	ldr	r3, [r7, #20]
 800ad46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	68db      	ldr	r3, [r3, #12]
 800ad50:	011b      	lsls	r3, r3, #4
 800ad52:	697a      	ldr	r2, [r7, #20]
 800ad54:	4313      	orrs	r3, r2
 800ad56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	4a18      	ldr	r2, [pc, #96]	; (800adc4 <TIM_OC2_SetConfig+0xe8>)
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d003      	beq.n	800ad70 <TIM_OC2_SetConfig+0x94>
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	4a17      	ldr	r2, [pc, #92]	; (800adc8 <TIM_OC2_SetConfig+0xec>)
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d113      	bne.n	800ad98 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ad76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ad78:	693b      	ldr	r3, [r7, #16]
 800ad7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ad7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	695b      	ldr	r3, [r3, #20]
 800ad84:	009b      	lsls	r3, r3, #2
 800ad86:	693a      	ldr	r2, [r7, #16]
 800ad88:	4313      	orrs	r3, r2
 800ad8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	699b      	ldr	r3, [r3, #24]
 800ad90:	009b      	lsls	r3, r3, #2
 800ad92:	693a      	ldr	r2, [r7, #16]
 800ad94:	4313      	orrs	r3, r2
 800ad96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	693a      	ldr	r2, [r7, #16]
 800ad9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	68fa      	ldr	r2, [r7, #12]
 800ada2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	685a      	ldr	r2, [r3, #4]
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	697a      	ldr	r2, [r7, #20]
 800adb0:	621a      	str	r2, [r3, #32]
}
 800adb2:	bf00      	nop
 800adb4:	371c      	adds	r7, #28
 800adb6:	46bd      	mov	sp, r7
 800adb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbc:	4770      	bx	lr
 800adbe:	bf00      	nop
 800adc0:	feff8fff 	.word	0xfeff8fff
 800adc4:	40010000 	.word	0x40010000
 800adc8:	40010400 	.word	0x40010400

0800adcc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800adcc:	b480      	push	{r7}
 800adce:	b087      	sub	sp, #28
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
 800add4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6a1b      	ldr	r3, [r3, #32]
 800adda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6a1b      	ldr	r3, [r3, #32]
 800ade6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	685b      	ldr	r3, [r3, #4]
 800adec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	69db      	ldr	r3, [r3, #28]
 800adf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800adf4:	68fa      	ldr	r2, [r7, #12]
 800adf6:	4b2d      	ldr	r3, [pc, #180]	; (800aeac <TIM_OC3_SetConfig+0xe0>)
 800adf8:	4013      	ands	r3, r2
 800adfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	f023 0303 	bic.w	r3, r3, #3
 800ae02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	68fa      	ldr	r2, [r7, #12]
 800ae0a:	4313      	orrs	r3, r2
 800ae0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ae0e:	697b      	ldr	r3, [r7, #20]
 800ae10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ae14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	689b      	ldr	r3, [r3, #8]
 800ae1a:	021b      	lsls	r3, r3, #8
 800ae1c:	697a      	ldr	r2, [r7, #20]
 800ae1e:	4313      	orrs	r3, r2
 800ae20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	4a22      	ldr	r2, [pc, #136]	; (800aeb0 <TIM_OC3_SetConfig+0xe4>)
 800ae26:	4293      	cmp	r3, r2
 800ae28:	d003      	beq.n	800ae32 <TIM_OC3_SetConfig+0x66>
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	4a21      	ldr	r2, [pc, #132]	; (800aeb4 <TIM_OC3_SetConfig+0xe8>)
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	d10d      	bne.n	800ae4e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ae38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	68db      	ldr	r3, [r3, #12]
 800ae3e:	021b      	lsls	r3, r3, #8
 800ae40:	697a      	ldr	r2, [r7, #20]
 800ae42:	4313      	orrs	r3, r2
 800ae44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ae46:	697b      	ldr	r3, [r7, #20]
 800ae48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ae4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	4a17      	ldr	r2, [pc, #92]	; (800aeb0 <TIM_OC3_SetConfig+0xe4>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d003      	beq.n	800ae5e <TIM_OC3_SetConfig+0x92>
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	4a16      	ldr	r2, [pc, #88]	; (800aeb4 <TIM_OC3_SetConfig+0xe8>)
 800ae5a:	4293      	cmp	r3, r2
 800ae5c:	d113      	bne.n	800ae86 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ae66:	693b      	ldr	r3, [r7, #16]
 800ae68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ae6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	695b      	ldr	r3, [r3, #20]
 800ae72:	011b      	lsls	r3, r3, #4
 800ae74:	693a      	ldr	r2, [r7, #16]
 800ae76:	4313      	orrs	r3, r2
 800ae78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	699b      	ldr	r3, [r3, #24]
 800ae7e:	011b      	lsls	r3, r3, #4
 800ae80:	693a      	ldr	r2, [r7, #16]
 800ae82:	4313      	orrs	r3, r2
 800ae84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	693a      	ldr	r2, [r7, #16]
 800ae8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	68fa      	ldr	r2, [r7, #12]
 800ae90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	685a      	ldr	r2, [r3, #4]
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	697a      	ldr	r2, [r7, #20]
 800ae9e:	621a      	str	r2, [r3, #32]
}
 800aea0:	bf00      	nop
 800aea2:	371c      	adds	r7, #28
 800aea4:	46bd      	mov	sp, r7
 800aea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeaa:	4770      	bx	lr
 800aeac:	fffeff8f 	.word	0xfffeff8f
 800aeb0:	40010000 	.word	0x40010000
 800aeb4:	40010400 	.word	0x40010400

0800aeb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b087      	sub	sp, #28
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6a1b      	ldr	r3, [r3, #32]
 800aec6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6a1b      	ldr	r3, [r3, #32]
 800aed2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	685b      	ldr	r3, [r3, #4]
 800aed8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	69db      	ldr	r3, [r3, #28]
 800aede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800aee0:	68fa      	ldr	r2, [r7, #12]
 800aee2:	4b1e      	ldr	r3, [pc, #120]	; (800af5c <TIM_OC4_SetConfig+0xa4>)
 800aee4:	4013      	ands	r3, r2
 800aee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aeee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	021b      	lsls	r3, r3, #8
 800aef6:	68fa      	ldr	r2, [r7, #12]
 800aef8:	4313      	orrs	r3, r2
 800aefa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800af02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	689b      	ldr	r3, [r3, #8]
 800af08:	031b      	lsls	r3, r3, #12
 800af0a:	693a      	ldr	r2, [r7, #16]
 800af0c:	4313      	orrs	r3, r2
 800af0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	4a13      	ldr	r2, [pc, #76]	; (800af60 <TIM_OC4_SetConfig+0xa8>)
 800af14:	4293      	cmp	r3, r2
 800af16:	d003      	beq.n	800af20 <TIM_OC4_SetConfig+0x68>
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	4a12      	ldr	r2, [pc, #72]	; (800af64 <TIM_OC4_SetConfig+0xac>)
 800af1c:	4293      	cmp	r3, r2
 800af1e:	d109      	bne.n	800af34 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800af26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	695b      	ldr	r3, [r3, #20]
 800af2c:	019b      	lsls	r3, r3, #6
 800af2e:	697a      	ldr	r2, [r7, #20]
 800af30:	4313      	orrs	r3, r2
 800af32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	697a      	ldr	r2, [r7, #20]
 800af38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	68fa      	ldr	r2, [r7, #12]
 800af3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	685a      	ldr	r2, [r3, #4]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	693a      	ldr	r2, [r7, #16]
 800af4c:	621a      	str	r2, [r3, #32]
}
 800af4e:	bf00      	nop
 800af50:	371c      	adds	r7, #28
 800af52:	46bd      	mov	sp, r7
 800af54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af58:	4770      	bx	lr
 800af5a:	bf00      	nop
 800af5c:	feff8fff 	.word	0xfeff8fff
 800af60:	40010000 	.word	0x40010000
 800af64:	40010400 	.word	0x40010400

0800af68 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800af68:	b480      	push	{r7}
 800af6a:	b087      	sub	sp, #28
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6a1b      	ldr	r3, [r3, #32]
 800af76:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6a1b      	ldr	r3, [r3, #32]
 800af82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	685b      	ldr	r3, [r3, #4]
 800af88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800af90:	68fa      	ldr	r2, [r7, #12]
 800af92:	4b1b      	ldr	r3, [pc, #108]	; (800b000 <TIM_OC5_SetConfig+0x98>)
 800af94:	4013      	ands	r3, r2
 800af96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	68fa      	ldr	r2, [r7, #12]
 800af9e:	4313      	orrs	r3, r2
 800afa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800afa8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	689b      	ldr	r3, [r3, #8]
 800afae:	041b      	lsls	r3, r3, #16
 800afb0:	693a      	ldr	r2, [r7, #16]
 800afb2:	4313      	orrs	r3, r2
 800afb4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	4a12      	ldr	r2, [pc, #72]	; (800b004 <TIM_OC5_SetConfig+0x9c>)
 800afba:	4293      	cmp	r3, r2
 800afbc:	d003      	beq.n	800afc6 <TIM_OC5_SetConfig+0x5e>
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	4a11      	ldr	r2, [pc, #68]	; (800b008 <TIM_OC5_SetConfig+0xa0>)
 800afc2:	4293      	cmp	r3, r2
 800afc4:	d109      	bne.n	800afda <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800afc6:	697b      	ldr	r3, [r7, #20]
 800afc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800afcc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	695b      	ldr	r3, [r3, #20]
 800afd2:	021b      	lsls	r3, r3, #8
 800afd4:	697a      	ldr	r2, [r7, #20]
 800afd6:	4313      	orrs	r3, r2
 800afd8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	697a      	ldr	r2, [r7, #20]
 800afde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	68fa      	ldr	r2, [r7, #12]
 800afe4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	685a      	ldr	r2, [r3, #4]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	693a      	ldr	r2, [r7, #16]
 800aff2:	621a      	str	r2, [r3, #32]
}
 800aff4:	bf00      	nop
 800aff6:	371c      	adds	r7, #28
 800aff8:	46bd      	mov	sp, r7
 800affa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affe:	4770      	bx	lr
 800b000:	fffeff8f 	.word	0xfffeff8f
 800b004:	40010000 	.word	0x40010000
 800b008:	40010400 	.word	0x40010400

0800b00c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b00c:	b480      	push	{r7}
 800b00e:	b087      	sub	sp, #28
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6a1b      	ldr	r3, [r3, #32]
 800b01a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6a1b      	ldr	r3, [r3, #32]
 800b026:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	685b      	ldr	r3, [r3, #4]
 800b02c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b034:	68fa      	ldr	r2, [r7, #12]
 800b036:	4b1c      	ldr	r3, [pc, #112]	; (800b0a8 <TIM_OC6_SetConfig+0x9c>)
 800b038:	4013      	ands	r3, r2
 800b03a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	021b      	lsls	r3, r3, #8
 800b042:	68fa      	ldr	r2, [r7, #12]
 800b044:	4313      	orrs	r3, r2
 800b046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b048:	693b      	ldr	r3, [r7, #16]
 800b04a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b04e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	689b      	ldr	r3, [r3, #8]
 800b054:	051b      	lsls	r3, r3, #20
 800b056:	693a      	ldr	r2, [r7, #16]
 800b058:	4313      	orrs	r3, r2
 800b05a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	4a13      	ldr	r2, [pc, #76]	; (800b0ac <TIM_OC6_SetConfig+0xa0>)
 800b060:	4293      	cmp	r3, r2
 800b062:	d003      	beq.n	800b06c <TIM_OC6_SetConfig+0x60>
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	4a12      	ldr	r2, [pc, #72]	; (800b0b0 <TIM_OC6_SetConfig+0xa4>)
 800b068:	4293      	cmp	r3, r2
 800b06a:	d109      	bne.n	800b080 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b072:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	695b      	ldr	r3, [r3, #20]
 800b078:	029b      	lsls	r3, r3, #10
 800b07a:	697a      	ldr	r2, [r7, #20]
 800b07c:	4313      	orrs	r3, r2
 800b07e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	697a      	ldr	r2, [r7, #20]
 800b084:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	68fa      	ldr	r2, [r7, #12]
 800b08a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	685a      	ldr	r2, [r3, #4]
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	693a      	ldr	r2, [r7, #16]
 800b098:	621a      	str	r2, [r3, #32]
}
 800b09a:	bf00      	nop
 800b09c:	371c      	adds	r7, #28
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a4:	4770      	bx	lr
 800b0a6:	bf00      	nop
 800b0a8:	feff8fff 	.word	0xfeff8fff
 800b0ac:	40010000 	.word	0x40010000
 800b0b0:	40010400 	.word	0x40010400

0800b0b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	b087      	sub	sp, #28
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	60f8      	str	r0, [r7, #12]
 800b0bc:	60b9      	str	r1, [r7, #8]
 800b0be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	6a1b      	ldr	r3, [r3, #32]
 800b0c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	6a1b      	ldr	r3, [r3, #32]
 800b0ca:	f023 0201 	bic.w	r2, r3, #1
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	699b      	ldr	r3, [r3, #24]
 800b0d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b0d8:	693b      	ldr	r3, [r7, #16]
 800b0da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b0de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	011b      	lsls	r3, r3, #4
 800b0e4:	693a      	ldr	r2, [r7, #16]
 800b0e6:	4313      	orrs	r3, r2
 800b0e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b0ea:	697b      	ldr	r3, [r7, #20]
 800b0ec:	f023 030a 	bic.w	r3, r3, #10
 800b0f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b0f2:	697a      	ldr	r2, [r7, #20]
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	4313      	orrs	r3, r2
 800b0f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	693a      	ldr	r2, [r7, #16]
 800b0fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	697a      	ldr	r2, [r7, #20]
 800b104:	621a      	str	r2, [r3, #32]
}
 800b106:	bf00      	nop
 800b108:	371c      	adds	r7, #28
 800b10a:	46bd      	mov	sp, r7
 800b10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b110:	4770      	bx	lr

0800b112 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b112:	b480      	push	{r7}
 800b114:	b087      	sub	sp, #28
 800b116:	af00      	add	r7, sp, #0
 800b118:	60f8      	str	r0, [r7, #12]
 800b11a:	60b9      	str	r1, [r7, #8]
 800b11c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	6a1b      	ldr	r3, [r3, #32]
 800b122:	f023 0210 	bic.w	r2, r3, #16
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	699b      	ldr	r3, [r3, #24]
 800b12e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	6a1b      	ldr	r3, [r3, #32]
 800b134:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b13c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	031b      	lsls	r3, r3, #12
 800b142:	697a      	ldr	r2, [r7, #20]
 800b144:	4313      	orrs	r3, r2
 800b146:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b14e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	011b      	lsls	r3, r3, #4
 800b154:	693a      	ldr	r2, [r7, #16]
 800b156:	4313      	orrs	r3, r2
 800b158:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	697a      	ldr	r2, [r7, #20]
 800b15e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	693a      	ldr	r2, [r7, #16]
 800b164:	621a      	str	r2, [r3, #32]
}
 800b166:	bf00      	nop
 800b168:	371c      	adds	r7, #28
 800b16a:	46bd      	mov	sp, r7
 800b16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b170:	4770      	bx	lr

0800b172 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b172:	b480      	push	{r7}
 800b174:	b085      	sub	sp, #20
 800b176:	af00      	add	r7, sp, #0
 800b178:	6078      	str	r0, [r7, #4]
 800b17a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	689b      	ldr	r3, [r3, #8]
 800b180:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b188:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b18a:	683a      	ldr	r2, [r7, #0]
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	4313      	orrs	r3, r2
 800b190:	f043 0307 	orr.w	r3, r3, #7
 800b194:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	68fa      	ldr	r2, [r7, #12]
 800b19a:	609a      	str	r2, [r3, #8]
}
 800b19c:	bf00      	nop
 800b19e:	3714      	adds	r7, #20
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a6:	4770      	bx	lr

0800b1a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b087      	sub	sp, #28
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	60f8      	str	r0, [r7, #12]
 800b1b0:	60b9      	str	r1, [r7, #8]
 800b1b2:	607a      	str	r2, [r7, #4]
 800b1b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	689b      	ldr	r3, [r3, #8]
 800b1ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b1bc:	697b      	ldr	r3, [r7, #20]
 800b1be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b1c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	021a      	lsls	r2, r3, #8
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	431a      	orrs	r2, r3
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	4313      	orrs	r3, r2
 800b1d0:	697a      	ldr	r2, [r7, #20]
 800b1d2:	4313      	orrs	r3, r2
 800b1d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	697a      	ldr	r2, [r7, #20]
 800b1da:	609a      	str	r2, [r3, #8]
}
 800b1dc:	bf00      	nop
 800b1de:	371c      	adds	r7, #28
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e6:	4770      	bx	lr

0800b1e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	b085      	sub	sp, #20
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
 800b1f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b1f8:	2b01      	cmp	r3, #1
 800b1fa:	d101      	bne.n	800b200 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b1fc:	2302      	movs	r3, #2
 800b1fe:	e06d      	b.n	800b2dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2201      	movs	r2, #1
 800b204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2202      	movs	r2, #2
 800b20c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	685b      	ldr	r3, [r3, #4]
 800b216:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	689b      	ldr	r3, [r3, #8]
 800b21e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	4a30      	ldr	r2, [pc, #192]	; (800b2e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b226:	4293      	cmp	r3, r2
 800b228:	d004      	beq.n	800b234 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	4a2f      	ldr	r2, [pc, #188]	; (800b2ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b230:	4293      	cmp	r3, r2
 800b232:	d108      	bne.n	800b246 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b23a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	685b      	ldr	r3, [r3, #4]
 800b240:	68fa      	ldr	r2, [r7, #12]
 800b242:	4313      	orrs	r3, r2
 800b244:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b24c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	68fa      	ldr	r2, [r7, #12]
 800b254:	4313      	orrs	r3, r2
 800b256:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	68fa      	ldr	r2, [r7, #12]
 800b25e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	4a20      	ldr	r2, [pc, #128]	; (800b2e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b266:	4293      	cmp	r3, r2
 800b268:	d022      	beq.n	800b2b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b272:	d01d      	beq.n	800b2b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	4a1d      	ldr	r2, [pc, #116]	; (800b2f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b27a:	4293      	cmp	r3, r2
 800b27c:	d018      	beq.n	800b2b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	4a1c      	ldr	r2, [pc, #112]	; (800b2f4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b284:	4293      	cmp	r3, r2
 800b286:	d013      	beq.n	800b2b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	4a1a      	ldr	r2, [pc, #104]	; (800b2f8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b28e:	4293      	cmp	r3, r2
 800b290:	d00e      	beq.n	800b2b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	4a15      	ldr	r2, [pc, #84]	; (800b2ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b298:	4293      	cmp	r3, r2
 800b29a:	d009      	beq.n	800b2b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	4a16      	ldr	r2, [pc, #88]	; (800b2fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b2a2:	4293      	cmp	r3, r2
 800b2a4:	d004      	beq.n	800b2b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	4a15      	ldr	r2, [pc, #84]	; (800b300 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b2ac:	4293      	cmp	r3, r2
 800b2ae:	d10c      	bne.n	800b2ca <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b2b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	689b      	ldr	r3, [r3, #8]
 800b2bc:	68ba      	ldr	r2, [r7, #8]
 800b2be:	4313      	orrs	r3, r2
 800b2c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	68ba      	ldr	r2, [r7, #8]
 800b2c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2201      	movs	r2, #1
 800b2ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b2da:	2300      	movs	r3, #0
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3714      	adds	r7, #20
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e6:	4770      	bx	lr
 800b2e8:	40010000 	.word	0x40010000
 800b2ec:	40010400 	.word	0x40010400
 800b2f0:	40000400 	.word	0x40000400
 800b2f4:	40000800 	.word	0x40000800
 800b2f8:	40000c00 	.word	0x40000c00
 800b2fc:	40014000 	.word	0x40014000
 800b300:	40001800 	.word	0x40001800

0800b304 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b304:	b480      	push	{r7}
 800b306:	b085      	sub	sp, #20
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
 800b30c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b30e:	2300      	movs	r3, #0
 800b310:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b318:	2b01      	cmp	r3, #1
 800b31a:	d101      	bne.n	800b320 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b31c:	2302      	movs	r3, #2
 800b31e:	e065      	b.n	800b3ec <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2201      	movs	r2, #1
 800b324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	68db      	ldr	r3, [r3, #12]
 800b332:	4313      	orrs	r3, r2
 800b334:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	689b      	ldr	r3, [r3, #8]
 800b340:	4313      	orrs	r3, r2
 800b342:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	685b      	ldr	r3, [r3, #4]
 800b34e:	4313      	orrs	r3, r2
 800b350:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	4313      	orrs	r3, r2
 800b35e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	691b      	ldr	r3, [r3, #16]
 800b36a:	4313      	orrs	r3, r2
 800b36c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	695b      	ldr	r3, [r3, #20]
 800b378:	4313      	orrs	r3, r2
 800b37a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b386:	4313      	orrs	r3, r2
 800b388:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	699b      	ldr	r3, [r3, #24]
 800b394:	041b      	lsls	r3, r3, #16
 800b396:	4313      	orrs	r3, r2
 800b398:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	4a16      	ldr	r2, [pc, #88]	; (800b3f8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b3a0:	4293      	cmp	r3, r2
 800b3a2:	d004      	beq.n	800b3ae <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	4a14      	ldr	r2, [pc, #80]	; (800b3fc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b3aa:	4293      	cmp	r3, r2
 800b3ac:	d115      	bne.n	800b3da <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3b8:	051b      	lsls	r3, r3, #20
 800b3ba:	4313      	orrs	r3, r2
 800b3bc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	69db      	ldr	r3, [r3, #28]
 800b3c8:	4313      	orrs	r3, r2
 800b3ca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	6a1b      	ldr	r3, [r3, #32]
 800b3d6:	4313      	orrs	r3, r2
 800b3d8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	68fa      	ldr	r2, [r7, #12]
 800b3e0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b3ea:	2300      	movs	r3, #0
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3714      	adds	r7, #20
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f6:	4770      	bx	lr
 800b3f8:	40010000 	.word	0x40010000
 800b3fc:	40010400 	.word	0x40010400

0800b400 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b400:	b480      	push	{r7}
 800b402:	b083      	sub	sp, #12
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b408:	bf00      	nop
 800b40a:	370c      	adds	r7, #12
 800b40c:	46bd      	mov	sp, r7
 800b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b412:	4770      	bx	lr

0800b414 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b414:	b480      	push	{r7}
 800b416:	b083      	sub	sp, #12
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b41c:	bf00      	nop
 800b41e:	370c      	adds	r7, #12
 800b420:	46bd      	mov	sp, r7
 800b422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b426:	4770      	bx	lr

0800b428 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b428:	b480      	push	{r7}
 800b42a:	b083      	sub	sp, #12
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b430:	bf00      	nop
 800b432:	370c      	adds	r7, #12
 800b434:	46bd      	mov	sp, r7
 800b436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43a:	4770      	bx	lr

0800b43c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b082      	sub	sp, #8
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d101      	bne.n	800b44e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b44a:	2301      	movs	r3, #1
 800b44c:	e040      	b.n	800b4d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b452:	2b00      	cmp	r3, #0
 800b454:	d106      	bne.n	800b464 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2200      	movs	r2, #0
 800b45a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f7f8 f832 	bl	80034c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2224      	movs	r2, #36	; 0x24
 800b468:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	681a      	ldr	r2, [r3, #0]
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	f022 0201 	bic.w	r2, r2, #1
 800b478:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f000 f82c 	bl	800b4d8 <UART_SetConfig>
 800b480:	4603      	mov	r3, r0
 800b482:	2b01      	cmp	r3, #1
 800b484:	d101      	bne.n	800b48a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b486:	2301      	movs	r3, #1
 800b488:	e022      	b.n	800b4d0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d002      	beq.n	800b498 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f000 faca 	bl	800ba2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	685a      	ldr	r2, [r3, #4]
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b4a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	689a      	ldr	r2, [r3, #8]
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b4b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	681a      	ldr	r2, [r3, #0]
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f042 0201 	orr.w	r2, r2, #1
 800b4c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f000 fb51 	bl	800bb70 <UART_CheckIdleState>
 800b4ce:	4603      	mov	r3, r0
}
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	3708      	adds	r7, #8
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd80      	pop	{r7, pc}

0800b4d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b088      	sub	sp, #32
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	689a      	ldr	r2, [r3, #8]
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	691b      	ldr	r3, [r3, #16]
 800b4f0:	431a      	orrs	r2, r3
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	695b      	ldr	r3, [r3, #20]
 800b4f6:	431a      	orrs	r2, r3
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	69db      	ldr	r3, [r3, #28]
 800b4fc:	4313      	orrs	r3, r2
 800b4fe:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	681a      	ldr	r2, [r3, #0]
 800b506:	4bb1      	ldr	r3, [pc, #708]	; (800b7cc <UART_SetConfig+0x2f4>)
 800b508:	4013      	ands	r3, r2
 800b50a:	687a      	ldr	r2, [r7, #4]
 800b50c:	6812      	ldr	r2, [r2, #0]
 800b50e:	6939      	ldr	r1, [r7, #16]
 800b510:	430b      	orrs	r3, r1
 800b512:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	685b      	ldr	r3, [r3, #4]
 800b51a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	68da      	ldr	r2, [r3, #12]
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	430a      	orrs	r2, r1
 800b528:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	699b      	ldr	r3, [r3, #24]
 800b52e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6a1b      	ldr	r3, [r3, #32]
 800b534:	693a      	ldr	r2, [r7, #16]
 800b536:	4313      	orrs	r3, r2
 800b538:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	689b      	ldr	r3, [r3, #8]
 800b540:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	693a      	ldr	r2, [r7, #16]
 800b54a:	430a      	orrs	r2, r1
 800b54c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	4a9f      	ldr	r2, [pc, #636]	; (800b7d0 <UART_SetConfig+0x2f8>)
 800b554:	4293      	cmp	r3, r2
 800b556:	d121      	bne.n	800b59c <UART_SetConfig+0xc4>
 800b558:	4b9e      	ldr	r3, [pc, #632]	; (800b7d4 <UART_SetConfig+0x2fc>)
 800b55a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b55e:	f003 0303 	and.w	r3, r3, #3
 800b562:	2b03      	cmp	r3, #3
 800b564:	d816      	bhi.n	800b594 <UART_SetConfig+0xbc>
 800b566:	a201      	add	r2, pc, #4	; (adr r2, 800b56c <UART_SetConfig+0x94>)
 800b568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b56c:	0800b57d 	.word	0x0800b57d
 800b570:	0800b589 	.word	0x0800b589
 800b574:	0800b583 	.word	0x0800b583
 800b578:	0800b58f 	.word	0x0800b58f
 800b57c:	2301      	movs	r3, #1
 800b57e:	77fb      	strb	r3, [r7, #31]
 800b580:	e151      	b.n	800b826 <UART_SetConfig+0x34e>
 800b582:	2302      	movs	r3, #2
 800b584:	77fb      	strb	r3, [r7, #31]
 800b586:	e14e      	b.n	800b826 <UART_SetConfig+0x34e>
 800b588:	2304      	movs	r3, #4
 800b58a:	77fb      	strb	r3, [r7, #31]
 800b58c:	e14b      	b.n	800b826 <UART_SetConfig+0x34e>
 800b58e:	2308      	movs	r3, #8
 800b590:	77fb      	strb	r3, [r7, #31]
 800b592:	e148      	b.n	800b826 <UART_SetConfig+0x34e>
 800b594:	2310      	movs	r3, #16
 800b596:	77fb      	strb	r3, [r7, #31]
 800b598:	bf00      	nop
 800b59a:	e144      	b.n	800b826 <UART_SetConfig+0x34e>
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	4a8d      	ldr	r2, [pc, #564]	; (800b7d8 <UART_SetConfig+0x300>)
 800b5a2:	4293      	cmp	r3, r2
 800b5a4:	d134      	bne.n	800b610 <UART_SetConfig+0x138>
 800b5a6:	4b8b      	ldr	r3, [pc, #556]	; (800b7d4 <UART_SetConfig+0x2fc>)
 800b5a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5ac:	f003 030c 	and.w	r3, r3, #12
 800b5b0:	2b0c      	cmp	r3, #12
 800b5b2:	d829      	bhi.n	800b608 <UART_SetConfig+0x130>
 800b5b4:	a201      	add	r2, pc, #4	; (adr r2, 800b5bc <UART_SetConfig+0xe4>)
 800b5b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5ba:	bf00      	nop
 800b5bc:	0800b5f1 	.word	0x0800b5f1
 800b5c0:	0800b609 	.word	0x0800b609
 800b5c4:	0800b609 	.word	0x0800b609
 800b5c8:	0800b609 	.word	0x0800b609
 800b5cc:	0800b5fd 	.word	0x0800b5fd
 800b5d0:	0800b609 	.word	0x0800b609
 800b5d4:	0800b609 	.word	0x0800b609
 800b5d8:	0800b609 	.word	0x0800b609
 800b5dc:	0800b5f7 	.word	0x0800b5f7
 800b5e0:	0800b609 	.word	0x0800b609
 800b5e4:	0800b609 	.word	0x0800b609
 800b5e8:	0800b609 	.word	0x0800b609
 800b5ec:	0800b603 	.word	0x0800b603
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	77fb      	strb	r3, [r7, #31]
 800b5f4:	e117      	b.n	800b826 <UART_SetConfig+0x34e>
 800b5f6:	2302      	movs	r3, #2
 800b5f8:	77fb      	strb	r3, [r7, #31]
 800b5fa:	e114      	b.n	800b826 <UART_SetConfig+0x34e>
 800b5fc:	2304      	movs	r3, #4
 800b5fe:	77fb      	strb	r3, [r7, #31]
 800b600:	e111      	b.n	800b826 <UART_SetConfig+0x34e>
 800b602:	2308      	movs	r3, #8
 800b604:	77fb      	strb	r3, [r7, #31]
 800b606:	e10e      	b.n	800b826 <UART_SetConfig+0x34e>
 800b608:	2310      	movs	r3, #16
 800b60a:	77fb      	strb	r3, [r7, #31]
 800b60c:	bf00      	nop
 800b60e:	e10a      	b.n	800b826 <UART_SetConfig+0x34e>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	4a71      	ldr	r2, [pc, #452]	; (800b7dc <UART_SetConfig+0x304>)
 800b616:	4293      	cmp	r3, r2
 800b618:	d120      	bne.n	800b65c <UART_SetConfig+0x184>
 800b61a:	4b6e      	ldr	r3, [pc, #440]	; (800b7d4 <UART_SetConfig+0x2fc>)
 800b61c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b620:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b624:	2b10      	cmp	r3, #16
 800b626:	d00f      	beq.n	800b648 <UART_SetConfig+0x170>
 800b628:	2b10      	cmp	r3, #16
 800b62a:	d802      	bhi.n	800b632 <UART_SetConfig+0x15a>
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d005      	beq.n	800b63c <UART_SetConfig+0x164>
 800b630:	e010      	b.n	800b654 <UART_SetConfig+0x17c>
 800b632:	2b20      	cmp	r3, #32
 800b634:	d005      	beq.n	800b642 <UART_SetConfig+0x16a>
 800b636:	2b30      	cmp	r3, #48	; 0x30
 800b638:	d009      	beq.n	800b64e <UART_SetConfig+0x176>
 800b63a:	e00b      	b.n	800b654 <UART_SetConfig+0x17c>
 800b63c:	2300      	movs	r3, #0
 800b63e:	77fb      	strb	r3, [r7, #31]
 800b640:	e0f1      	b.n	800b826 <UART_SetConfig+0x34e>
 800b642:	2302      	movs	r3, #2
 800b644:	77fb      	strb	r3, [r7, #31]
 800b646:	e0ee      	b.n	800b826 <UART_SetConfig+0x34e>
 800b648:	2304      	movs	r3, #4
 800b64a:	77fb      	strb	r3, [r7, #31]
 800b64c:	e0eb      	b.n	800b826 <UART_SetConfig+0x34e>
 800b64e:	2308      	movs	r3, #8
 800b650:	77fb      	strb	r3, [r7, #31]
 800b652:	e0e8      	b.n	800b826 <UART_SetConfig+0x34e>
 800b654:	2310      	movs	r3, #16
 800b656:	77fb      	strb	r3, [r7, #31]
 800b658:	bf00      	nop
 800b65a:	e0e4      	b.n	800b826 <UART_SetConfig+0x34e>
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	4a5f      	ldr	r2, [pc, #380]	; (800b7e0 <UART_SetConfig+0x308>)
 800b662:	4293      	cmp	r3, r2
 800b664:	d120      	bne.n	800b6a8 <UART_SetConfig+0x1d0>
 800b666:	4b5b      	ldr	r3, [pc, #364]	; (800b7d4 <UART_SetConfig+0x2fc>)
 800b668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b66c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b670:	2b40      	cmp	r3, #64	; 0x40
 800b672:	d00f      	beq.n	800b694 <UART_SetConfig+0x1bc>
 800b674:	2b40      	cmp	r3, #64	; 0x40
 800b676:	d802      	bhi.n	800b67e <UART_SetConfig+0x1a6>
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d005      	beq.n	800b688 <UART_SetConfig+0x1b0>
 800b67c:	e010      	b.n	800b6a0 <UART_SetConfig+0x1c8>
 800b67e:	2b80      	cmp	r3, #128	; 0x80
 800b680:	d005      	beq.n	800b68e <UART_SetConfig+0x1b6>
 800b682:	2bc0      	cmp	r3, #192	; 0xc0
 800b684:	d009      	beq.n	800b69a <UART_SetConfig+0x1c2>
 800b686:	e00b      	b.n	800b6a0 <UART_SetConfig+0x1c8>
 800b688:	2300      	movs	r3, #0
 800b68a:	77fb      	strb	r3, [r7, #31]
 800b68c:	e0cb      	b.n	800b826 <UART_SetConfig+0x34e>
 800b68e:	2302      	movs	r3, #2
 800b690:	77fb      	strb	r3, [r7, #31]
 800b692:	e0c8      	b.n	800b826 <UART_SetConfig+0x34e>
 800b694:	2304      	movs	r3, #4
 800b696:	77fb      	strb	r3, [r7, #31]
 800b698:	e0c5      	b.n	800b826 <UART_SetConfig+0x34e>
 800b69a:	2308      	movs	r3, #8
 800b69c:	77fb      	strb	r3, [r7, #31]
 800b69e:	e0c2      	b.n	800b826 <UART_SetConfig+0x34e>
 800b6a0:	2310      	movs	r3, #16
 800b6a2:	77fb      	strb	r3, [r7, #31]
 800b6a4:	bf00      	nop
 800b6a6:	e0be      	b.n	800b826 <UART_SetConfig+0x34e>
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	4a4d      	ldr	r2, [pc, #308]	; (800b7e4 <UART_SetConfig+0x30c>)
 800b6ae:	4293      	cmp	r3, r2
 800b6b0:	d124      	bne.n	800b6fc <UART_SetConfig+0x224>
 800b6b2:	4b48      	ldr	r3, [pc, #288]	; (800b7d4 <UART_SetConfig+0x2fc>)
 800b6b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b6bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b6c0:	d012      	beq.n	800b6e8 <UART_SetConfig+0x210>
 800b6c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b6c6:	d802      	bhi.n	800b6ce <UART_SetConfig+0x1f6>
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d007      	beq.n	800b6dc <UART_SetConfig+0x204>
 800b6cc:	e012      	b.n	800b6f4 <UART_SetConfig+0x21c>
 800b6ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b6d2:	d006      	beq.n	800b6e2 <UART_SetConfig+0x20a>
 800b6d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b6d8:	d009      	beq.n	800b6ee <UART_SetConfig+0x216>
 800b6da:	e00b      	b.n	800b6f4 <UART_SetConfig+0x21c>
 800b6dc:	2300      	movs	r3, #0
 800b6de:	77fb      	strb	r3, [r7, #31]
 800b6e0:	e0a1      	b.n	800b826 <UART_SetConfig+0x34e>
 800b6e2:	2302      	movs	r3, #2
 800b6e4:	77fb      	strb	r3, [r7, #31]
 800b6e6:	e09e      	b.n	800b826 <UART_SetConfig+0x34e>
 800b6e8:	2304      	movs	r3, #4
 800b6ea:	77fb      	strb	r3, [r7, #31]
 800b6ec:	e09b      	b.n	800b826 <UART_SetConfig+0x34e>
 800b6ee:	2308      	movs	r3, #8
 800b6f0:	77fb      	strb	r3, [r7, #31]
 800b6f2:	e098      	b.n	800b826 <UART_SetConfig+0x34e>
 800b6f4:	2310      	movs	r3, #16
 800b6f6:	77fb      	strb	r3, [r7, #31]
 800b6f8:	bf00      	nop
 800b6fa:	e094      	b.n	800b826 <UART_SetConfig+0x34e>
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	4a39      	ldr	r2, [pc, #228]	; (800b7e8 <UART_SetConfig+0x310>)
 800b702:	4293      	cmp	r3, r2
 800b704:	d124      	bne.n	800b750 <UART_SetConfig+0x278>
 800b706:	4b33      	ldr	r3, [pc, #204]	; (800b7d4 <UART_SetConfig+0x2fc>)
 800b708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b70c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b710:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b714:	d012      	beq.n	800b73c <UART_SetConfig+0x264>
 800b716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b71a:	d802      	bhi.n	800b722 <UART_SetConfig+0x24a>
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d007      	beq.n	800b730 <UART_SetConfig+0x258>
 800b720:	e012      	b.n	800b748 <UART_SetConfig+0x270>
 800b722:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b726:	d006      	beq.n	800b736 <UART_SetConfig+0x25e>
 800b728:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b72c:	d009      	beq.n	800b742 <UART_SetConfig+0x26a>
 800b72e:	e00b      	b.n	800b748 <UART_SetConfig+0x270>
 800b730:	2301      	movs	r3, #1
 800b732:	77fb      	strb	r3, [r7, #31]
 800b734:	e077      	b.n	800b826 <UART_SetConfig+0x34e>
 800b736:	2302      	movs	r3, #2
 800b738:	77fb      	strb	r3, [r7, #31]
 800b73a:	e074      	b.n	800b826 <UART_SetConfig+0x34e>
 800b73c:	2304      	movs	r3, #4
 800b73e:	77fb      	strb	r3, [r7, #31]
 800b740:	e071      	b.n	800b826 <UART_SetConfig+0x34e>
 800b742:	2308      	movs	r3, #8
 800b744:	77fb      	strb	r3, [r7, #31]
 800b746:	e06e      	b.n	800b826 <UART_SetConfig+0x34e>
 800b748:	2310      	movs	r3, #16
 800b74a:	77fb      	strb	r3, [r7, #31]
 800b74c:	bf00      	nop
 800b74e:	e06a      	b.n	800b826 <UART_SetConfig+0x34e>
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	4a25      	ldr	r2, [pc, #148]	; (800b7ec <UART_SetConfig+0x314>)
 800b756:	4293      	cmp	r3, r2
 800b758:	d124      	bne.n	800b7a4 <UART_SetConfig+0x2cc>
 800b75a:	4b1e      	ldr	r3, [pc, #120]	; (800b7d4 <UART_SetConfig+0x2fc>)
 800b75c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b760:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b768:	d012      	beq.n	800b790 <UART_SetConfig+0x2b8>
 800b76a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b76e:	d802      	bhi.n	800b776 <UART_SetConfig+0x29e>
 800b770:	2b00      	cmp	r3, #0
 800b772:	d007      	beq.n	800b784 <UART_SetConfig+0x2ac>
 800b774:	e012      	b.n	800b79c <UART_SetConfig+0x2c4>
 800b776:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b77a:	d006      	beq.n	800b78a <UART_SetConfig+0x2b2>
 800b77c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b780:	d009      	beq.n	800b796 <UART_SetConfig+0x2be>
 800b782:	e00b      	b.n	800b79c <UART_SetConfig+0x2c4>
 800b784:	2300      	movs	r3, #0
 800b786:	77fb      	strb	r3, [r7, #31]
 800b788:	e04d      	b.n	800b826 <UART_SetConfig+0x34e>
 800b78a:	2302      	movs	r3, #2
 800b78c:	77fb      	strb	r3, [r7, #31]
 800b78e:	e04a      	b.n	800b826 <UART_SetConfig+0x34e>
 800b790:	2304      	movs	r3, #4
 800b792:	77fb      	strb	r3, [r7, #31]
 800b794:	e047      	b.n	800b826 <UART_SetConfig+0x34e>
 800b796:	2308      	movs	r3, #8
 800b798:	77fb      	strb	r3, [r7, #31]
 800b79a:	e044      	b.n	800b826 <UART_SetConfig+0x34e>
 800b79c:	2310      	movs	r3, #16
 800b79e:	77fb      	strb	r3, [r7, #31]
 800b7a0:	bf00      	nop
 800b7a2:	e040      	b.n	800b826 <UART_SetConfig+0x34e>
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	4a11      	ldr	r2, [pc, #68]	; (800b7f0 <UART_SetConfig+0x318>)
 800b7aa:	4293      	cmp	r3, r2
 800b7ac:	d139      	bne.n	800b822 <UART_SetConfig+0x34a>
 800b7ae:	4b09      	ldr	r3, [pc, #36]	; (800b7d4 <UART_SetConfig+0x2fc>)
 800b7b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b7b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b7bc:	d027      	beq.n	800b80e <UART_SetConfig+0x336>
 800b7be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b7c2:	d817      	bhi.n	800b7f4 <UART_SetConfig+0x31c>
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d01c      	beq.n	800b802 <UART_SetConfig+0x32a>
 800b7c8:	e027      	b.n	800b81a <UART_SetConfig+0x342>
 800b7ca:	bf00      	nop
 800b7cc:	efff69f3 	.word	0xefff69f3
 800b7d0:	40011000 	.word	0x40011000
 800b7d4:	40023800 	.word	0x40023800
 800b7d8:	40004400 	.word	0x40004400
 800b7dc:	40004800 	.word	0x40004800
 800b7e0:	40004c00 	.word	0x40004c00
 800b7e4:	40005000 	.word	0x40005000
 800b7e8:	40011400 	.word	0x40011400
 800b7ec:	40007800 	.word	0x40007800
 800b7f0:	40007c00 	.word	0x40007c00
 800b7f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b7f8:	d006      	beq.n	800b808 <UART_SetConfig+0x330>
 800b7fa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b7fe:	d009      	beq.n	800b814 <UART_SetConfig+0x33c>
 800b800:	e00b      	b.n	800b81a <UART_SetConfig+0x342>
 800b802:	2300      	movs	r3, #0
 800b804:	77fb      	strb	r3, [r7, #31]
 800b806:	e00e      	b.n	800b826 <UART_SetConfig+0x34e>
 800b808:	2302      	movs	r3, #2
 800b80a:	77fb      	strb	r3, [r7, #31]
 800b80c:	e00b      	b.n	800b826 <UART_SetConfig+0x34e>
 800b80e:	2304      	movs	r3, #4
 800b810:	77fb      	strb	r3, [r7, #31]
 800b812:	e008      	b.n	800b826 <UART_SetConfig+0x34e>
 800b814:	2308      	movs	r3, #8
 800b816:	77fb      	strb	r3, [r7, #31]
 800b818:	e005      	b.n	800b826 <UART_SetConfig+0x34e>
 800b81a:	2310      	movs	r3, #16
 800b81c:	77fb      	strb	r3, [r7, #31]
 800b81e:	bf00      	nop
 800b820:	e001      	b.n	800b826 <UART_SetConfig+0x34e>
 800b822:	2310      	movs	r3, #16
 800b824:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	69db      	ldr	r3, [r3, #28]
 800b82a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b82e:	d17f      	bne.n	800b930 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800b830:	7ffb      	ldrb	r3, [r7, #31]
 800b832:	2b08      	cmp	r3, #8
 800b834:	d85c      	bhi.n	800b8f0 <UART_SetConfig+0x418>
 800b836:	a201      	add	r2, pc, #4	; (adr r2, 800b83c <UART_SetConfig+0x364>)
 800b838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b83c:	0800b861 	.word	0x0800b861
 800b840:	0800b881 	.word	0x0800b881
 800b844:	0800b8a1 	.word	0x0800b8a1
 800b848:	0800b8f1 	.word	0x0800b8f1
 800b84c:	0800b8b9 	.word	0x0800b8b9
 800b850:	0800b8f1 	.word	0x0800b8f1
 800b854:	0800b8f1 	.word	0x0800b8f1
 800b858:	0800b8f1 	.word	0x0800b8f1
 800b85c:	0800b8d9 	.word	0x0800b8d9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b860:	f7fc f8d0 	bl	8007a04 <HAL_RCC_GetPCLK1Freq>
 800b864:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	005a      	lsls	r2, r3, #1
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	685b      	ldr	r3, [r3, #4]
 800b86e:	085b      	lsrs	r3, r3, #1
 800b870:	441a      	add	r2, r3
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	685b      	ldr	r3, [r3, #4]
 800b876:	fbb2 f3f3 	udiv	r3, r2, r3
 800b87a:	b29b      	uxth	r3, r3
 800b87c:	61bb      	str	r3, [r7, #24]
        break;
 800b87e:	e03a      	b.n	800b8f6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b880:	f7fc f8d4 	bl	8007a2c <HAL_RCC_GetPCLK2Freq>
 800b884:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	005a      	lsls	r2, r3, #1
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	685b      	ldr	r3, [r3, #4]
 800b88e:	085b      	lsrs	r3, r3, #1
 800b890:	441a      	add	r2, r3
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	685b      	ldr	r3, [r3, #4]
 800b896:	fbb2 f3f3 	udiv	r3, r2, r3
 800b89a:	b29b      	uxth	r3, r3
 800b89c:	61bb      	str	r3, [r7, #24]
        break;
 800b89e:	e02a      	b.n	800b8f6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	685b      	ldr	r3, [r3, #4]
 800b8a4:	085a      	lsrs	r2, r3, #1
 800b8a6:	4b5f      	ldr	r3, [pc, #380]	; (800ba24 <UART_SetConfig+0x54c>)
 800b8a8:	4413      	add	r3, r2
 800b8aa:	687a      	ldr	r2, [r7, #4]
 800b8ac:	6852      	ldr	r2, [r2, #4]
 800b8ae:	fbb3 f3f2 	udiv	r3, r3, r2
 800b8b2:	b29b      	uxth	r3, r3
 800b8b4:	61bb      	str	r3, [r7, #24]
        break;
 800b8b6:	e01e      	b.n	800b8f6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b8b8:	f7fb ffe6 	bl	8007888 <HAL_RCC_GetSysClockFreq>
 800b8bc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	005a      	lsls	r2, r3, #1
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	685b      	ldr	r3, [r3, #4]
 800b8c6:	085b      	lsrs	r3, r3, #1
 800b8c8:	441a      	add	r2, r3
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	685b      	ldr	r3, [r3, #4]
 800b8ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8d2:	b29b      	uxth	r3, r3
 800b8d4:	61bb      	str	r3, [r7, #24]
        break;
 800b8d6:	e00e      	b.n	800b8f6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	685b      	ldr	r3, [r3, #4]
 800b8dc:	085b      	lsrs	r3, r3, #1
 800b8de:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	685b      	ldr	r3, [r3, #4]
 800b8e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8ea:	b29b      	uxth	r3, r3
 800b8ec:	61bb      	str	r3, [r7, #24]
        break;
 800b8ee:	e002      	b.n	800b8f6 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	75fb      	strb	r3, [r7, #23]
        break;
 800b8f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b8f6:	69bb      	ldr	r3, [r7, #24]
 800b8f8:	2b0f      	cmp	r3, #15
 800b8fa:	d916      	bls.n	800b92a <UART_SetConfig+0x452>
 800b8fc:	69bb      	ldr	r3, [r7, #24]
 800b8fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b902:	d212      	bcs.n	800b92a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b904:	69bb      	ldr	r3, [r7, #24]
 800b906:	b29b      	uxth	r3, r3
 800b908:	f023 030f 	bic.w	r3, r3, #15
 800b90c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b90e:	69bb      	ldr	r3, [r7, #24]
 800b910:	085b      	lsrs	r3, r3, #1
 800b912:	b29b      	uxth	r3, r3
 800b914:	f003 0307 	and.w	r3, r3, #7
 800b918:	b29a      	uxth	r2, r3
 800b91a:	897b      	ldrh	r3, [r7, #10]
 800b91c:	4313      	orrs	r3, r2
 800b91e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	897a      	ldrh	r2, [r7, #10]
 800b926:	60da      	str	r2, [r3, #12]
 800b928:	e070      	b.n	800ba0c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800b92a:	2301      	movs	r3, #1
 800b92c:	75fb      	strb	r3, [r7, #23]
 800b92e:	e06d      	b.n	800ba0c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800b930:	7ffb      	ldrb	r3, [r7, #31]
 800b932:	2b08      	cmp	r3, #8
 800b934:	d859      	bhi.n	800b9ea <UART_SetConfig+0x512>
 800b936:	a201      	add	r2, pc, #4	; (adr r2, 800b93c <UART_SetConfig+0x464>)
 800b938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b93c:	0800b961 	.word	0x0800b961
 800b940:	0800b97f 	.word	0x0800b97f
 800b944:	0800b99d 	.word	0x0800b99d
 800b948:	0800b9eb 	.word	0x0800b9eb
 800b94c:	0800b9b5 	.word	0x0800b9b5
 800b950:	0800b9eb 	.word	0x0800b9eb
 800b954:	0800b9eb 	.word	0x0800b9eb
 800b958:	0800b9eb 	.word	0x0800b9eb
 800b95c:	0800b9d3 	.word	0x0800b9d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b960:	f7fc f850 	bl	8007a04 <HAL_RCC_GetPCLK1Freq>
 800b964:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	685b      	ldr	r3, [r3, #4]
 800b96a:	085a      	lsrs	r2, r3, #1
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	441a      	add	r2, r3
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	685b      	ldr	r3, [r3, #4]
 800b974:	fbb2 f3f3 	udiv	r3, r2, r3
 800b978:	b29b      	uxth	r3, r3
 800b97a:	61bb      	str	r3, [r7, #24]
        break;
 800b97c:	e038      	b.n	800b9f0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b97e:	f7fc f855 	bl	8007a2c <HAL_RCC_GetPCLK2Freq>
 800b982:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	685b      	ldr	r3, [r3, #4]
 800b988:	085a      	lsrs	r2, r3, #1
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	441a      	add	r2, r3
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	685b      	ldr	r3, [r3, #4]
 800b992:	fbb2 f3f3 	udiv	r3, r2, r3
 800b996:	b29b      	uxth	r3, r3
 800b998:	61bb      	str	r3, [r7, #24]
        break;
 800b99a:	e029      	b.n	800b9f0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	685b      	ldr	r3, [r3, #4]
 800b9a0:	085a      	lsrs	r2, r3, #1
 800b9a2:	4b21      	ldr	r3, [pc, #132]	; (800ba28 <UART_SetConfig+0x550>)
 800b9a4:	4413      	add	r3, r2
 800b9a6:	687a      	ldr	r2, [r7, #4]
 800b9a8:	6852      	ldr	r2, [r2, #4]
 800b9aa:	fbb3 f3f2 	udiv	r3, r3, r2
 800b9ae:	b29b      	uxth	r3, r3
 800b9b0:	61bb      	str	r3, [r7, #24]
        break;
 800b9b2:	e01d      	b.n	800b9f0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b9b4:	f7fb ff68 	bl	8007888 <HAL_RCC_GetSysClockFreq>
 800b9b8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	685b      	ldr	r3, [r3, #4]
 800b9be:	085a      	lsrs	r2, r3, #1
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	441a      	add	r2, r3
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	685b      	ldr	r3, [r3, #4]
 800b9c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9cc:	b29b      	uxth	r3, r3
 800b9ce:	61bb      	str	r3, [r7, #24]
        break;
 800b9d0:	e00e      	b.n	800b9f0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	685b      	ldr	r3, [r3, #4]
 800b9d6:	085b      	lsrs	r3, r3, #1
 800b9d8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	685b      	ldr	r3, [r3, #4]
 800b9e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9e4:	b29b      	uxth	r3, r3
 800b9e6:	61bb      	str	r3, [r7, #24]
        break;
 800b9e8:	e002      	b.n	800b9f0 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	75fb      	strb	r3, [r7, #23]
        break;
 800b9ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b9f0:	69bb      	ldr	r3, [r7, #24]
 800b9f2:	2b0f      	cmp	r3, #15
 800b9f4:	d908      	bls.n	800ba08 <UART_SetConfig+0x530>
 800b9f6:	69bb      	ldr	r3, [r7, #24]
 800b9f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9fc:	d204      	bcs.n	800ba08 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	69ba      	ldr	r2, [r7, #24]
 800ba04:	60da      	str	r2, [r3, #12]
 800ba06:	e001      	b.n	800ba0c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800ba08:	2301      	movs	r3, #1
 800ba0a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2200      	movs	r2, #0
 800ba10:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2200      	movs	r2, #0
 800ba16:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800ba18:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	3720      	adds	r7, #32
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}
 800ba22:	bf00      	nop
 800ba24:	01e84800 	.word	0x01e84800
 800ba28:	00f42400 	.word	0x00f42400

0800ba2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	b083      	sub	sp, #12
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba38:	f003 0301 	and.w	r3, r3, #1
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d00a      	beq.n	800ba56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	685b      	ldr	r3, [r3, #4]
 800ba46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	430a      	orrs	r2, r1
 800ba54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba5a:	f003 0302 	and.w	r3, r3, #2
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d00a      	beq.n	800ba78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	685b      	ldr	r3, [r3, #4]
 800ba68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	430a      	orrs	r2, r1
 800ba76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba7c:	f003 0304 	and.w	r3, r3, #4
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d00a      	beq.n	800ba9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	685b      	ldr	r3, [r3, #4]
 800ba8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	430a      	orrs	r2, r1
 800ba98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba9e:	f003 0308 	and.w	r3, r3, #8
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d00a      	beq.n	800babc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	685b      	ldr	r3, [r3, #4]
 800baac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	430a      	orrs	r2, r1
 800baba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bac0:	f003 0310 	and.w	r3, r3, #16
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d00a      	beq.n	800bade <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	689b      	ldr	r3, [r3, #8]
 800bace:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	430a      	orrs	r2, r1
 800badc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bae2:	f003 0320 	and.w	r3, r3, #32
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d00a      	beq.n	800bb00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	689b      	ldr	r3, [r3, #8]
 800baf0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	430a      	orrs	r2, r1
 800bafe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d01a      	beq.n	800bb42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	685b      	ldr	r3, [r3, #4]
 800bb12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	430a      	orrs	r2, r1
 800bb20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb2a:	d10a      	bne.n	800bb42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	685b      	ldr	r3, [r3, #4]
 800bb32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	430a      	orrs	r2, r1
 800bb40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d00a      	beq.n	800bb64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	685b      	ldr	r3, [r3, #4]
 800bb54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	430a      	orrs	r2, r1
 800bb62:	605a      	str	r2, [r3, #4]
  }
}
 800bb64:	bf00      	nop
 800bb66:	370c      	adds	r7, #12
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6e:	4770      	bx	lr

0800bb70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b086      	sub	sp, #24
 800bb74:	af02      	add	r7, sp, #8
 800bb76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800bb7e:	f7f7 fff1 	bl	8003b64 <HAL_GetTick>
 800bb82:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	f003 0308 	and.w	r3, r3, #8
 800bb8e:	2b08      	cmp	r3, #8
 800bb90:	d10e      	bne.n	800bbb0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bb92:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bb96:	9300      	str	r3, [sp, #0]
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	f000 f814 	bl	800bbce <UART_WaitOnFlagUntilTimeout>
 800bba6:	4603      	mov	r3, r0
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d001      	beq.n	800bbb0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bbac:	2303      	movs	r3, #3
 800bbae:	e00a      	b.n	800bbc6 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2220      	movs	r2, #32
 800bbb4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	2220      	movs	r2, #32
 800bbba:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800bbc4:	2300      	movs	r3, #0
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3710      	adds	r7, #16
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}

0800bbce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bbce:	b580      	push	{r7, lr}
 800bbd0:	b084      	sub	sp, #16
 800bbd2:	af00      	add	r7, sp, #0
 800bbd4:	60f8      	str	r0, [r7, #12]
 800bbd6:	60b9      	str	r1, [r7, #8]
 800bbd8:	603b      	str	r3, [r7, #0]
 800bbda:	4613      	mov	r3, r2
 800bbdc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bbde:	e05d      	b.n	800bc9c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bbe0:	69bb      	ldr	r3, [r7, #24]
 800bbe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbe6:	d059      	beq.n	800bc9c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bbe8:	f7f7 ffbc 	bl	8003b64 <HAL_GetTick>
 800bbec:	4602      	mov	r2, r0
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	1ad3      	subs	r3, r2, r3
 800bbf2:	69ba      	ldr	r2, [r7, #24]
 800bbf4:	429a      	cmp	r2, r3
 800bbf6:	d302      	bcc.n	800bbfe <UART_WaitOnFlagUntilTimeout+0x30>
 800bbf8:	69bb      	ldr	r3, [r7, #24]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d11b      	bne.n	800bc36 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	681a      	ldr	r2, [r3, #0]
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bc0c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	689a      	ldr	r2, [r3, #8]
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	f022 0201 	bic.w	r2, r2, #1
 800bc1c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	2220      	movs	r2, #32
 800bc22:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	2220      	movs	r2, #32
 800bc28:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800bc32:	2303      	movs	r3, #3
 800bc34:	e042      	b.n	800bcbc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	f003 0304 	and.w	r3, r3, #4
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d02b      	beq.n	800bc9c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	69db      	ldr	r3, [r3, #28]
 800bc4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bc4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc52:	d123      	bne.n	800bc9c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bc5c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	681a      	ldr	r2, [r3, #0]
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bc6c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	689a      	ldr	r2, [r3, #8]
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	f022 0201 	bic.w	r2, r2, #1
 800bc7c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	2220      	movs	r2, #32
 800bc82:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	2220      	movs	r2, #32
 800bc88:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	2220      	movs	r2, #32
 800bc8e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	2200      	movs	r2, #0
 800bc94:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800bc98:	2303      	movs	r3, #3
 800bc9a:	e00f      	b.n	800bcbc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	69da      	ldr	r2, [r3, #28]
 800bca2:	68bb      	ldr	r3, [r7, #8]
 800bca4:	4013      	ands	r3, r2
 800bca6:	68ba      	ldr	r2, [r7, #8]
 800bca8:	429a      	cmp	r2, r3
 800bcaa:	bf0c      	ite	eq
 800bcac:	2301      	moveq	r3, #1
 800bcae:	2300      	movne	r3, #0
 800bcb0:	b2db      	uxtb	r3, r3
 800bcb2:	461a      	mov	r2, r3
 800bcb4:	79fb      	ldrb	r3, [r7, #7]
 800bcb6:	429a      	cmp	r2, r3
 800bcb8:	d092      	beq.n	800bbe0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bcba:	2300      	movs	r3, #0
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3710      	adds	r7, #16
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}

0800bcc4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b085      	sub	sp, #20
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
 800bccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	2b01      	cmp	r3, #1
 800bcdc:	d027      	beq.n	800bd2e <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800bce4:	68fa      	ldr	r2, [r7, #12]
 800bce6:	4b2f      	ldr	r3, [pc, #188]	; (800bda4 <FMC_SDRAM_Init+0xe0>)
 800bce8:	4013      	ands	r3, r2
 800bcea:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bcf4:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800bcfa:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800bd00:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800bd06:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800bd0c:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800bd12:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800bd18:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800bd1e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bd20:	68fa      	ldr	r2, [r7, #12]
 800bd22:	4313      	orrs	r3, r2
 800bd24:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	68fa      	ldr	r2, [r7, #12]
 800bd2a:	601a      	str	r2, [r3, #0]
 800bd2c:	e032      	b.n	800bd94 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bd3a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800bd44:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800bd4a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800bd4c:	68fa      	ldr	r2, [r7, #12]
 800bd4e:	4313      	orrs	r3, r2
 800bd50:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	685b      	ldr	r3, [r3, #4]
 800bd56:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800bd58:	68ba      	ldr	r2, [r7, #8]
 800bd5a:	4b12      	ldr	r3, [pc, #72]	; (800bda4 <FMC_SDRAM_Init+0xe0>)
 800bd5c:	4013      	ands	r3, r2
 800bd5e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bd68:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800bd6e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800bd74:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800bd7a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800bd80:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bd82:	68ba      	ldr	r2, [r7, #8]
 800bd84:	4313      	orrs	r3, r2
 800bd86:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	68fa      	ldr	r2, [r7, #12]
 800bd8c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	68ba      	ldr	r2, [r7, #8]
 800bd92:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800bd94:	2300      	movs	r3, #0
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	3714      	adds	r7, #20
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda0:	4770      	bx	lr
 800bda2:	bf00      	nop
 800bda4:	ffff8000 	.word	0xffff8000

0800bda8 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800bda8:	b480      	push	{r7}
 800bdaa:	b087      	sub	sp, #28
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	60f8      	str	r0, [r7, #12]
 800bdb0:	60b9      	str	r1, [r7, #8]
 800bdb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800bdb8:	2300      	movs	r3, #0
 800bdba:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2b01      	cmp	r3, #1
 800bdc0:	d02e      	beq.n	800be20 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	689b      	ldr	r3, [r3, #8]
 800bdc6:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800bdc8:	697b      	ldr	r3, [r7, #20]
 800bdca:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bdce:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bdd0:	68bb      	ldr	r3, [r7, #8]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	685b      	ldr	r3, [r3, #4]
 800bdda:	3b01      	subs	r3, #1
 800bddc:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bdde:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800bde0:	68bb      	ldr	r3, [r7, #8]
 800bde2:	689b      	ldr	r3, [r3, #8]
 800bde4:	3b01      	subs	r3, #1
 800bde6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800bde8:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	68db      	ldr	r3, [r3, #12]
 800bdee:	3b01      	subs	r3, #1
 800bdf0:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800bdf2:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	691b      	ldr	r3, [r3, #16]
 800bdf8:	3b01      	subs	r3, #1
 800bdfa:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800bdfc:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800bdfe:	68bb      	ldr	r3, [r7, #8]
 800be00:	695b      	ldr	r3, [r3, #20]
 800be02:	3b01      	subs	r3, #1
 800be04:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800be06:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	699b      	ldr	r3, [r3, #24]
 800be0c:	3b01      	subs	r3, #1
 800be0e:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800be10:	4313      	orrs	r3, r2
 800be12:	697a      	ldr	r2, [r7, #20]
 800be14:	4313      	orrs	r3, r2
 800be16:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	697a      	ldr	r2, [r7, #20]
 800be1c:	609a      	str	r2, [r3, #8]
 800be1e:	e039      	b.n	800be94 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	689b      	ldr	r3, [r3, #8]
 800be24:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800be26:	697a      	ldr	r2, [r7, #20]
 800be28:	4b1e      	ldr	r3, [pc, #120]	; (800bea4 <FMC_SDRAM_Timing_Init+0xfc>)
 800be2a:	4013      	ands	r3, r2
 800be2c:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800be2e:	68bb      	ldr	r3, [r7, #8]
 800be30:	68db      	ldr	r3, [r3, #12]
 800be32:	3b01      	subs	r3, #1
 800be34:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800be36:	68bb      	ldr	r3, [r7, #8]
 800be38:	695b      	ldr	r3, [r3, #20]
 800be3a:	3b01      	subs	r3, #1
 800be3c:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800be3e:	4313      	orrs	r3, r2
 800be40:	697a      	ldr	r2, [r7, #20]
 800be42:	4313      	orrs	r3, r2
 800be44:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	68db      	ldr	r3, [r3, #12]
 800be4a:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800be4c:	693b      	ldr	r3, [r7, #16]
 800be4e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800be52:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800be54:	68bb      	ldr	r3, [r7, #8]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800be5a:	68bb      	ldr	r3, [r7, #8]
 800be5c:	685b      	ldr	r3, [r3, #4]
 800be5e:	3b01      	subs	r3, #1
 800be60:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800be62:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	689b      	ldr	r3, [r3, #8]
 800be68:	3b01      	subs	r3, #1
 800be6a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800be6c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	691b      	ldr	r3, [r3, #16]
 800be72:	3b01      	subs	r3, #1
 800be74:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800be76:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	699b      	ldr	r3, [r3, #24]
 800be7c:	3b01      	subs	r3, #1
 800be7e:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800be80:	4313      	orrs	r3, r2
 800be82:	693a      	ldr	r2, [r7, #16]
 800be84:	4313      	orrs	r3, r2
 800be86:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	697a      	ldr	r2, [r7, #20]
 800be8c:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	693a      	ldr	r2, [r7, #16]
 800be92:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800be94:	2300      	movs	r3, #0
}
 800be96:	4618      	mov	r0, r3
 800be98:	371c      	adds	r7, #28
 800be9a:	46bd      	mov	sp, r7
 800be9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea0:	4770      	bx	lr
 800bea2:	bf00      	nop
 800bea4:	ff0f0fff 	.word	0xff0f0fff

0800bea8 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800bea8:	b480      	push	{r7}
 800beaa:	b087      	sub	sp, #28
 800beac:	af00      	add	r7, sp, #0
 800beae:	60f8      	str	r0, [r7, #12]
 800beb0:	60b9      	str	r1, [r7, #8]
 800beb2:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800beb4:	2300      	movs	r3, #0
 800beb6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800beb8:	68bb      	ldr	r3, [r7, #8]
 800beba:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800bec0:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	689b      	ldr	r3, [r3, #8]
 800bec6:	3b01      	subs	r3, #1
 800bec8:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800beca:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	68db      	ldr	r3, [r3, #12]
 800bed0:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800bed2:	4313      	orrs	r3, r2
 800bed4:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800bed6:	697a      	ldr	r2, [r7, #20]
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800bedc:	2300      	movs	r3, #0
}
 800bede:	4618      	mov	r0, r3
 800bee0:	371c      	adds	r7, #28
 800bee2:	46bd      	mov	sp, r7
 800bee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee8:	4770      	bx	lr

0800beea <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800beea:	b480      	push	{r7}
 800beec:	b083      	sub	sp, #12
 800beee:	af00      	add	r7, sp, #0
 800bef0:	6078      	str	r0, [r7, #4]
 800bef2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	695a      	ldr	r2, [r3, #20]
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	005b      	lsls	r3, r3, #1
 800befc:	431a      	orrs	r2, r3
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800bf02:	2300      	movs	r3, #0
}
 800bf04:	4618      	mov	r0, r3
 800bf06:	370c      	adds	r7, #12
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0e:	4770      	bx	lr

0800bf10 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800bf10:	b084      	sub	sp, #16
 800bf12:	b480      	push	{r7}
 800bf14:	b085      	sub	sp, #20
 800bf16:	af00      	add	r7, sp, #0
 800bf18:	6078      	str	r0, [r7, #4]
 800bf1a:	f107 001c 	add.w	r0, r7, #28
 800bf1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800bf22:	2300      	movs	r3, #0
 800bf24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800bf26:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800bf28:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800bf2a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800bf2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800bf2e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800bf30:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800bf32:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800bf34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800bf36:	431a      	orrs	r2, r3
             Init.ClockDiv
 800bf38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800bf3a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800bf3c:	68fa      	ldr	r2, [r7, #12]
 800bf3e:	4313      	orrs	r3, r2
 800bf40:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	685a      	ldr	r2, [r3, #4]
 800bf46:	4b07      	ldr	r3, [pc, #28]	; (800bf64 <SDMMC_Init+0x54>)
 800bf48:	4013      	ands	r3, r2
 800bf4a:	68fa      	ldr	r2, [r7, #12]
 800bf4c:	431a      	orrs	r2, r3
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800bf52:	2300      	movs	r3, #0
}
 800bf54:	4618      	mov	r0, r3
 800bf56:	3714      	adds	r7, #20
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5e:	b004      	add	sp, #16
 800bf60:	4770      	bx	lr
 800bf62:	bf00      	nop
 800bf64:	ffff8100 	.word	0xffff8100

0800bf68 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800bf68:	b480      	push	{r7}
 800bf6a:	b083      	sub	sp, #12
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	370c      	adds	r7, #12
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf80:	4770      	bx	lr

0800bf82 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800bf82:	b580      	push	{r7, lr}
 800bf84:	b082      	sub	sp, #8
 800bf86:	af00      	add	r7, sp, #0
 800bf88:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2203      	movs	r2, #3
 800bf8e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800bf90:	2002      	movs	r0, #2
 800bf92:	f7f7 fdf3 	bl	8003b7c <HAL_Delay>
  
  return HAL_OK;
 800bf96:	2300      	movs	r3, #0
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3708      	adds	r7, #8
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}

0800bfa0 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800bfa0:	b480      	push	{r7}
 800bfa2:	b083      	sub	sp, #12
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	f003 0303 	and.w	r3, r3, #3
}
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	370c      	adds	r7, #12
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfba:	4770      	bx	lr

0800bfbc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800bfbc:	b480      	push	{r7}
 800bfbe:	b085      	sub	sp, #20
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
 800bfc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	681a      	ldr	r2, [r3, #0]
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bfda:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800bfe0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800bfe6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bfe8:	68fa      	ldr	r2, [r7, #12]
 800bfea:	4313      	orrs	r3, r2
 800bfec:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	68da      	ldr	r2, [r3, #12]
 800bff2:	4b06      	ldr	r3, [pc, #24]	; (800c00c <SDMMC_SendCommand+0x50>)
 800bff4:	4013      	ands	r3, r2
 800bff6:	68fa      	ldr	r2, [r7, #12]
 800bff8:	431a      	orrs	r2, r3
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800bffe:	2300      	movs	r3, #0
}
 800c000:	4618      	mov	r0, r3
 800c002:	3714      	adds	r7, #20
 800c004:	46bd      	mov	sp, r7
 800c006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00a:	4770      	bx	lr
 800c00c:	fffff000 	.word	0xfffff000

0800c010 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800c010:	b480      	push	{r7}
 800c012:	b083      	sub	sp, #12
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	691b      	ldr	r3, [r3, #16]
 800c01c:	b2db      	uxtb	r3, r3
}
 800c01e:	4618      	mov	r0, r3
 800c020:	370c      	adds	r7, #12
 800c022:	46bd      	mov	sp, r7
 800c024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c028:	4770      	bx	lr

0800c02a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800c02a:	b480      	push	{r7}
 800c02c:	b085      	sub	sp, #20
 800c02e:	af00      	add	r7, sp, #0
 800c030:	6078      	str	r0, [r7, #4]
 800c032:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	3314      	adds	r3, #20
 800c038:	461a      	mov	r2, r3
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	4413      	add	r3, r2
 800c03e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	681b      	ldr	r3, [r3, #0]
}  
 800c044:	4618      	mov	r0, r3
 800c046:	3714      	adds	r7, #20
 800c048:	46bd      	mov	sp, r7
 800c04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04e:	4770      	bx	lr

0800c050 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800c050:	b480      	push	{r7}
 800c052:	b085      	sub	sp, #20
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
 800c058:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c05a:	2300      	movs	r3, #0
 800c05c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	681a      	ldr	r2, [r3, #0]
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	685a      	ldr	r2, [r3, #4]
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c076:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c07c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c07e:	683b      	ldr	r3, [r7, #0]
 800c080:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c082:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c084:	68fa      	ldr	r2, [r7, #12]
 800c086:	4313      	orrs	r3, r2
 800c088:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c08e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	431a      	orrs	r2, r3
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c09a:	2300      	movs	r3, #0

}
 800c09c:	4618      	mov	r0, r3
 800c09e:	3714      	adds	r7, #20
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a6:	4770      	bx	lr

0800c0a8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b088      	sub	sp, #32
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
 800c0b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c0b6:	2310      	movs	r3, #16
 800c0b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c0ba:	2340      	movs	r3, #64	; 0x40
 800c0bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c0be:	2300      	movs	r3, #0
 800c0c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c0c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c0c8:	f107 0308 	add.w	r3, r7, #8
 800c0cc:	4619      	mov	r1, r3
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f7ff ff74 	bl	800bfbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800c0d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c0d8:	2110      	movs	r1, #16
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	f000 fa42 	bl	800c564 <SDMMC_GetCmdResp1>
 800c0e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c0e2:	69fb      	ldr	r3, [r7, #28]
}
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	3720      	adds	r7, #32
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd80      	pop	{r7, pc}

0800c0ec <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b088      	sub	sp, #32
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
 800c0f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c0fa:	2311      	movs	r3, #17
 800c0fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c0fe:	2340      	movs	r3, #64	; 0x40
 800c100:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c102:	2300      	movs	r3, #0
 800c104:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c106:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c10a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c10c:	f107 0308 	add.w	r3, r7, #8
 800c110:	4619      	mov	r1, r3
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	f7ff ff52 	bl	800bfbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c118:	f241 3288 	movw	r2, #5000	; 0x1388
 800c11c:	2111      	movs	r1, #17
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	f000 fa20 	bl	800c564 <SDMMC_GetCmdResp1>
 800c124:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c126:	69fb      	ldr	r3, [r7, #28]
}
 800c128:	4618      	mov	r0, r3
 800c12a:	3720      	adds	r7, #32
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}

0800c130 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b088      	sub	sp, #32
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
 800c138:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c13e:	2312      	movs	r3, #18
 800c140:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c142:	2340      	movs	r3, #64	; 0x40
 800c144:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c146:	2300      	movs	r3, #0
 800c148:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c14a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c14e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c150:	f107 0308 	add.w	r3, r7, #8
 800c154:	4619      	mov	r1, r3
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f7ff ff30 	bl	800bfbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c15c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c160:	2112      	movs	r1, #18
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	f000 f9fe 	bl	800c564 <SDMMC_GetCmdResp1>
 800c168:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c16a:	69fb      	ldr	r3, [r7, #28]
}
 800c16c:	4618      	mov	r0, r3
 800c16e:	3720      	adds	r7, #32
 800c170:	46bd      	mov	sp, r7
 800c172:	bd80      	pop	{r7, pc}

0800c174 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b088      	sub	sp, #32
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
 800c17c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c182:	2318      	movs	r3, #24
 800c184:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c186:	2340      	movs	r3, #64	; 0x40
 800c188:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c18a:	2300      	movs	r3, #0
 800c18c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c18e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c192:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c194:	f107 0308 	add.w	r3, r7, #8
 800c198:	4619      	mov	r1, r3
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f7ff ff0e 	bl	800bfbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c1a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c1a4:	2118      	movs	r1, #24
 800c1a6:	6878      	ldr	r0, [r7, #4]
 800c1a8:	f000 f9dc 	bl	800c564 <SDMMC_GetCmdResp1>
 800c1ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c1ae:	69fb      	ldr	r3, [r7, #28]
}
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	3720      	adds	r7, #32
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}

0800c1b8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b088      	sub	sp, #32
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
 800c1c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c1c6:	2319      	movs	r3, #25
 800c1c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c1ca:	2340      	movs	r3, #64	; 0x40
 800c1cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c1d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c1d8:	f107 0308 	add.w	r3, r7, #8
 800c1dc:	4619      	mov	r1, r3
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	f7ff feec 	bl	800bfbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c1e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c1e8:	2119      	movs	r1, #25
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f000 f9ba 	bl	800c564 <SDMMC_GetCmdResp1>
 800c1f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c1f2:	69fb      	ldr	r3, [r7, #28]
}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	3720      	adds	r7, #32
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}

0800c1fc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b088      	sub	sp, #32
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c204:	2300      	movs	r3, #0
 800c206:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c208:	230c      	movs	r3, #12
 800c20a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c20c:	2340      	movs	r3, #64	; 0x40
 800c20e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c210:	2300      	movs	r3, #0
 800c212:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c214:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c218:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c21a:	f107 0308 	add.w	r3, r7, #8
 800c21e:	4619      	mov	r1, r3
 800c220:	6878      	ldr	r0, [r7, #4]
 800c222:	f7ff fecb 	bl	800bfbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800c226:	4a05      	ldr	r2, [pc, #20]	; (800c23c <SDMMC_CmdStopTransfer+0x40>)
 800c228:	210c      	movs	r1, #12
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	f000 f99a 	bl	800c564 <SDMMC_GetCmdResp1>
 800c230:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c232:	69fb      	ldr	r3, [r7, #28]
}
 800c234:	4618      	mov	r0, r3
 800c236:	3720      	adds	r7, #32
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd80      	pop	{r7, pc}
 800c23c:	05f5e100 	.word	0x05f5e100

0800c240 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b08a      	sub	sp, #40	; 0x28
 800c244:	af00      	add	r7, sp, #0
 800c246:	60f8      	str	r0, [r7, #12]
 800c248:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c250:	2307      	movs	r3, #7
 800c252:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c254:	2340      	movs	r3, #64	; 0x40
 800c256:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c258:	2300      	movs	r3, #0
 800c25a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c25c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c260:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c262:	f107 0310 	add.w	r3, r7, #16
 800c266:	4619      	mov	r1, r3
 800c268:	68f8      	ldr	r0, [r7, #12]
 800c26a:	f7ff fea7 	bl	800bfbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c26e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c272:	2107      	movs	r1, #7
 800c274:	68f8      	ldr	r0, [r7, #12]
 800c276:	f000 f975 	bl	800c564 <SDMMC_GetCmdResp1>
 800c27a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800c27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c27e:	4618      	mov	r0, r3
 800c280:	3728      	adds	r7, #40	; 0x28
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}

0800c286 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800c286:	b580      	push	{r7, lr}
 800c288:	b088      	sub	sp, #32
 800c28a:	af00      	add	r7, sp, #0
 800c28c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800c28e:	2300      	movs	r3, #0
 800c290:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c292:	2300      	movs	r3, #0
 800c294:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800c296:	2300      	movs	r3, #0
 800c298:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c29a:	2300      	movs	r3, #0
 800c29c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c29e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c2a4:	f107 0308 	add.w	r3, r7, #8
 800c2a8:	4619      	mov	r1, r3
 800c2aa:	6878      	ldr	r0, [r7, #4]
 800c2ac:	f7ff fe86 	bl	800bfbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	f000 f92f 	bl	800c514 <SDMMC_GetCmdError>
 800c2b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c2b8:	69fb      	ldr	r3, [r7, #28]
}
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	3720      	adds	r7, #32
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}

0800c2c2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800c2c2:	b580      	push	{r7, lr}
 800c2c4:	b088      	sub	sp, #32
 800c2c6:	af00      	add	r7, sp, #0
 800c2c8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c2ca:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800c2ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c2d0:	2308      	movs	r3, #8
 800c2d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c2d4:	2340      	movs	r3, #64	; 0x40
 800c2d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c2d8:	2300      	movs	r3, #0
 800c2da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c2dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c2e2:	f107 0308 	add.w	r3, r7, #8
 800c2e6:	4619      	mov	r1, r3
 800c2e8:	6878      	ldr	r0, [r7, #4]
 800c2ea:	f7ff fe67 	bl	800bfbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f000 fb18 	bl	800c924 <SDMMC_GetCmdResp7>
 800c2f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c2f6:	69fb      	ldr	r3, [r7, #28]
}
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	3720      	adds	r7, #32
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd80      	pop	{r7, pc}

0800c300 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b088      	sub	sp, #32
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
 800c308:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c30e:	2337      	movs	r3, #55	; 0x37
 800c310:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c312:	2340      	movs	r3, #64	; 0x40
 800c314:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c316:	2300      	movs	r3, #0
 800c318:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c31a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c31e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c320:	f107 0308 	add.w	r3, r7, #8
 800c324:	4619      	mov	r1, r3
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f7ff fe48 	bl	800bfbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c32c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c330:	2137      	movs	r1, #55	; 0x37
 800c332:	6878      	ldr	r0, [r7, #4]
 800c334:	f000 f916 	bl	800c564 <SDMMC_GetCmdResp1>
 800c338:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c33a:	69fb      	ldr	r3, [r7, #28]
}
 800c33c:	4618      	mov	r0, r3
 800c33e:	3720      	adds	r7, #32
 800c340:	46bd      	mov	sp, r7
 800c342:	bd80      	pop	{r7, pc}

0800c344 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b088      	sub	sp, #32
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
 800c34c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800c34e:	683a      	ldr	r2, [r7, #0]
 800c350:	4b0d      	ldr	r3, [pc, #52]	; (800c388 <SDMMC_CmdAppOperCommand+0x44>)
 800c352:	4313      	orrs	r3, r2
 800c354:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c356:	2329      	movs	r3, #41	; 0x29
 800c358:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c35a:	2340      	movs	r3, #64	; 0x40
 800c35c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c35e:	2300      	movs	r3, #0
 800c360:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c362:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c366:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c368:	f107 0308 	add.w	r3, r7, #8
 800c36c:	4619      	mov	r1, r3
 800c36e:	6878      	ldr	r0, [r7, #4]
 800c370:	f7ff fe24 	bl	800bfbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c374:	6878      	ldr	r0, [r7, #4]
 800c376:	f000 fa27 	bl	800c7c8 <SDMMC_GetCmdResp3>
 800c37a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c37c:	69fb      	ldr	r3, [r7, #28]
}
 800c37e:	4618      	mov	r0, r3
 800c380:	3720      	adds	r7, #32
 800c382:	46bd      	mov	sp, r7
 800c384:	bd80      	pop	{r7, pc}
 800c386:	bf00      	nop
 800c388:	80100000 	.word	0x80100000

0800c38c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b088      	sub	sp, #32
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
 800c394:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c39a:	2306      	movs	r3, #6
 800c39c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c39e:	2340      	movs	r3, #64	; 0x40
 800c3a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c3a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c3aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c3ac:	f107 0308 	add.w	r3, r7, #8
 800c3b0:	4619      	mov	r1, r3
 800c3b2:	6878      	ldr	r0, [r7, #4]
 800c3b4:	f7ff fe02 	bl	800bfbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800c3b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c3bc:	2106      	movs	r1, #6
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f000 f8d0 	bl	800c564 <SDMMC_GetCmdResp1>
 800c3c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c3c6:	69fb      	ldr	r3, [r7, #28]
}
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	3720      	adds	r7, #32
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}

0800c3d0 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b088      	sub	sp, #32
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c3d8:	2300      	movs	r3, #0
 800c3da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c3dc:	2333      	movs	r3, #51	; 0x33
 800c3de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c3e0:	2340      	movs	r3, #64	; 0x40
 800c3e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c3e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c3ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c3ee:	f107 0308 	add.w	r3, r7, #8
 800c3f2:	4619      	mov	r1, r3
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	f7ff fde1 	bl	800bfbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800c3fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800c3fe:	2133      	movs	r1, #51	; 0x33
 800c400:	6878      	ldr	r0, [r7, #4]
 800c402:	f000 f8af 	bl	800c564 <SDMMC_GetCmdResp1>
 800c406:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c408:	69fb      	ldr	r3, [r7, #28]
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	3720      	adds	r7, #32
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}

0800c412 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c412:	b580      	push	{r7, lr}
 800c414:	b088      	sub	sp, #32
 800c416:	af00      	add	r7, sp, #0
 800c418:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c41a:	2300      	movs	r3, #0
 800c41c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c41e:	2302      	movs	r3, #2
 800c420:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c422:	23c0      	movs	r3, #192	; 0xc0
 800c424:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c426:	2300      	movs	r3, #0
 800c428:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c42a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c42e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c430:	f107 0308 	add.w	r3, r7, #8
 800c434:	4619      	mov	r1, r3
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	f7ff fdc0 	bl	800bfbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c43c:	6878      	ldr	r0, [r7, #4]
 800c43e:	f000 f97d 	bl	800c73c <SDMMC_GetCmdResp2>
 800c442:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c444:	69fb      	ldr	r3, [r7, #28]
}
 800c446:	4618      	mov	r0, r3
 800c448:	3720      	adds	r7, #32
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}

0800c44e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c44e:	b580      	push	{r7, lr}
 800c450:	b088      	sub	sp, #32
 800c452:	af00      	add	r7, sp, #0
 800c454:	6078      	str	r0, [r7, #4]
 800c456:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c45c:	2309      	movs	r3, #9
 800c45e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c460:	23c0      	movs	r3, #192	; 0xc0
 800c462:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c464:	2300      	movs	r3, #0
 800c466:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c468:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c46c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c46e:	f107 0308 	add.w	r3, r7, #8
 800c472:	4619      	mov	r1, r3
 800c474:	6878      	ldr	r0, [r7, #4]
 800c476:	f7ff fda1 	bl	800bfbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c47a:	6878      	ldr	r0, [r7, #4]
 800c47c:	f000 f95e 	bl	800c73c <SDMMC_GetCmdResp2>
 800c480:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c482:	69fb      	ldr	r3, [r7, #28]
}
 800c484:	4618      	mov	r0, r3
 800c486:	3720      	adds	r7, #32
 800c488:	46bd      	mov	sp, r7
 800c48a:	bd80      	pop	{r7, pc}

0800c48c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b088      	sub	sp, #32
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
 800c494:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c496:	2300      	movs	r3, #0
 800c498:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c49a:	2303      	movs	r3, #3
 800c49c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c49e:	2340      	movs	r3, #64	; 0x40
 800c4a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c4a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c4aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c4ac:	f107 0308 	add.w	r3, r7, #8
 800c4b0:	4619      	mov	r1, r3
 800c4b2:	6878      	ldr	r0, [r7, #4]
 800c4b4:	f7ff fd82 	bl	800bfbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c4b8:	683a      	ldr	r2, [r7, #0]
 800c4ba:	2103      	movs	r1, #3
 800c4bc:	6878      	ldr	r0, [r7, #4]
 800c4be:	f000 f9bd 	bl	800c83c <SDMMC_GetCmdResp6>
 800c4c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c4c4:	69fb      	ldr	r3, [r7, #28]
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	3720      	adds	r7, #32
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}

0800c4ce <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c4ce:	b580      	push	{r7, lr}
 800c4d0:	b088      	sub	sp, #32
 800c4d2:	af00      	add	r7, sp, #0
 800c4d4:	6078      	str	r0, [r7, #4]
 800c4d6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c4dc:	230d      	movs	r3, #13
 800c4de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c4e0:	2340      	movs	r3, #64	; 0x40
 800c4e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c4e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c4ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c4ee:	f107 0308 	add.w	r3, r7, #8
 800c4f2:	4619      	mov	r1, r3
 800c4f4:	6878      	ldr	r0, [r7, #4]
 800c4f6:	f7ff fd61 	bl	800bfbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c4fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4fe:	210d      	movs	r1, #13
 800c500:	6878      	ldr	r0, [r7, #4]
 800c502:	f000 f82f 	bl	800c564 <SDMMC_GetCmdResp1>
 800c506:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c508:	69fb      	ldr	r3, [r7, #28]
}
 800c50a:	4618      	mov	r0, r3
 800c50c:	3720      	adds	r7, #32
 800c50e:	46bd      	mov	sp, r7
 800c510:	bd80      	pop	{r7, pc}
	...

0800c514 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800c514:	b490      	push	{r4, r7}
 800c516:	b082      	sub	sp, #8
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c51c:	4b0f      	ldr	r3, [pc, #60]	; (800c55c <SDMMC_GetCmdError+0x48>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	4a0f      	ldr	r2, [pc, #60]	; (800c560 <SDMMC_GetCmdError+0x4c>)
 800c522:	fba2 2303 	umull	r2, r3, r2, r3
 800c526:	0a5b      	lsrs	r3, r3, #9
 800c528:	f241 3288 	movw	r2, #5000	; 0x1388
 800c52c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c530:	4623      	mov	r3, r4
 800c532:	1e5c      	subs	r4, r3, #1
 800c534:	2b00      	cmp	r3, #0
 800c536:	d102      	bne.n	800c53e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c538:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c53c:	e009      	b.n	800c552 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c546:	2b00      	cmp	r3, #0
 800c548:	d0f2      	beq.n	800c530 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	22c5      	movs	r2, #197	; 0xc5
 800c54e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800c550:	2300      	movs	r3, #0
}
 800c552:	4618      	mov	r0, r3
 800c554:	3708      	adds	r7, #8
 800c556:	46bd      	mov	sp, r7
 800c558:	bc90      	pop	{r4, r7}
 800c55a:	4770      	bx	lr
 800c55c:	20000018 	.word	0x20000018
 800c560:	10624dd3 	.word	0x10624dd3

0800c564 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c564:	b590      	push	{r4, r7, lr}
 800c566:	b087      	sub	sp, #28
 800c568:	af00      	add	r7, sp, #0
 800c56a:	60f8      	str	r0, [r7, #12]
 800c56c:	460b      	mov	r3, r1
 800c56e:	607a      	str	r2, [r7, #4]
 800c570:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c572:	4b6f      	ldr	r3, [pc, #444]	; (800c730 <SDMMC_GetCmdResp1+0x1cc>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	4a6f      	ldr	r2, [pc, #444]	; (800c734 <SDMMC_GetCmdResp1+0x1d0>)
 800c578:	fba2 2303 	umull	r2, r3, r2, r3
 800c57c:	0a5b      	lsrs	r3, r3, #9
 800c57e:	687a      	ldr	r2, [r7, #4]
 800c580:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c584:	4623      	mov	r3, r4
 800c586:	1e5c      	subs	r4, r3, #1
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d102      	bne.n	800c592 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c58c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c590:	e0c9      	b.n	800c726 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c596:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c598:	697b      	ldr	r3, [r7, #20]
 800c59a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d0f0      	beq.n	800c584 <SDMMC_GetCmdResp1+0x20>
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d1eb      	bne.n	800c584 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5b0:	f003 0304 	and.w	r3, r3, #4
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d004      	beq.n	800c5c2 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	2204      	movs	r2, #4
 800c5bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c5be:	2304      	movs	r3, #4
 800c5c0:	e0b1      	b.n	800c726 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5c6:	f003 0301 	and.w	r3, r3, #1
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d004      	beq.n	800c5d8 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	2201      	movs	r2, #1
 800c5d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c5d4:	2301      	movs	r3, #1
 800c5d6:	e0a6      	b.n	800c726 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	22c5      	movs	r2, #197	; 0xc5
 800c5dc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c5de:	68f8      	ldr	r0, [r7, #12]
 800c5e0:	f7ff fd16 	bl	800c010 <SDMMC_GetCommandResponse>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	461a      	mov	r2, r3
 800c5e8:	7afb      	ldrb	r3, [r7, #11]
 800c5ea:	4293      	cmp	r3, r2
 800c5ec:	d001      	beq.n	800c5f2 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c5ee:	2301      	movs	r3, #1
 800c5f0:	e099      	b.n	800c726 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c5f2:	2100      	movs	r1, #0
 800c5f4:	68f8      	ldr	r0, [r7, #12]
 800c5f6:	f7ff fd18 	bl	800c02a <SDMMC_GetResponse>
 800c5fa:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c5fc:	693a      	ldr	r2, [r7, #16]
 800c5fe:	4b4e      	ldr	r3, [pc, #312]	; (800c738 <SDMMC_GetCmdResp1+0x1d4>)
 800c600:	4013      	ands	r3, r2
 800c602:	2b00      	cmp	r3, #0
 800c604:	d101      	bne.n	800c60a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800c606:	2300      	movs	r3, #0
 800c608:	e08d      	b.n	800c726 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c60a:	693b      	ldr	r3, [r7, #16]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	da02      	bge.n	800c616 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c610:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c614:	e087      	b.n	800c726 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c616:	693b      	ldr	r3, [r7, #16]
 800c618:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d001      	beq.n	800c624 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c620:	2340      	movs	r3, #64	; 0x40
 800c622:	e080      	b.n	800c726 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c624:	693b      	ldr	r3, [r7, #16]
 800c626:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d001      	beq.n	800c632 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c62e:	2380      	movs	r3, #128	; 0x80
 800c630:	e079      	b.n	800c726 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c632:	693b      	ldr	r3, [r7, #16]
 800c634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d002      	beq.n	800c642 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c63c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c640:	e071      	b.n	800c726 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c642:	693b      	ldr	r3, [r7, #16]
 800c644:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d002      	beq.n	800c652 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c64c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c650:	e069      	b.n	800c726 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c652:	693b      	ldr	r3, [r7, #16]
 800c654:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d002      	beq.n	800c662 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c65c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c660:	e061      	b.n	800c726 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c662:	693b      	ldr	r3, [r7, #16]
 800c664:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d002      	beq.n	800c672 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c66c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c670:	e059      	b.n	800c726 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c672:	693b      	ldr	r3, [r7, #16]
 800c674:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d002      	beq.n	800c682 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c67c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c680:	e051      	b.n	800c726 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c682:	693b      	ldr	r3, [r7, #16]
 800c684:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d002      	beq.n	800c692 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c68c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c690:	e049      	b.n	800c726 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c692:	693b      	ldr	r3, [r7, #16]
 800c694:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d002      	beq.n	800c6a2 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c69c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c6a0:	e041      	b.n	800c726 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c6a2:	693b      	ldr	r3, [r7, #16]
 800c6a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d002      	beq.n	800c6b2 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800c6ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c6b0:	e039      	b.n	800c726 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c6b2:	693b      	ldr	r3, [r7, #16]
 800c6b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d002      	beq.n	800c6c2 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c6bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c6c0:	e031      	b.n	800c726 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c6c2:	693b      	ldr	r3, [r7, #16]
 800c6c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d002      	beq.n	800c6d2 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c6cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c6d0:	e029      	b.n	800c726 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c6d2:	693b      	ldr	r3, [r7, #16]
 800c6d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d002      	beq.n	800c6e2 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c6dc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c6e0:	e021      	b.n	800c726 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c6e2:	693b      	ldr	r3, [r7, #16]
 800c6e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d002      	beq.n	800c6f2 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c6ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c6f0:	e019      	b.n	800c726 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c6f2:	693b      	ldr	r3, [r7, #16]
 800c6f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d002      	beq.n	800c702 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c6fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c700:	e011      	b.n	800c726 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c702:	693b      	ldr	r3, [r7, #16]
 800c704:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d002      	beq.n	800c712 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c70c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c710:	e009      	b.n	800c726 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c712:	693b      	ldr	r3, [r7, #16]
 800c714:	f003 0308 	and.w	r3, r3, #8
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d002      	beq.n	800c722 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c71c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c720:	e001      	b.n	800c726 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c722:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c726:	4618      	mov	r0, r3
 800c728:	371c      	adds	r7, #28
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bd90      	pop	{r4, r7, pc}
 800c72e:	bf00      	nop
 800c730:	20000018 	.word	0x20000018
 800c734:	10624dd3 	.word	0x10624dd3
 800c738:	fdffe008 	.word	0xfdffe008

0800c73c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c73c:	b490      	push	{r4, r7}
 800c73e:	b084      	sub	sp, #16
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c744:	4b1e      	ldr	r3, [pc, #120]	; (800c7c0 <SDMMC_GetCmdResp2+0x84>)
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	4a1e      	ldr	r2, [pc, #120]	; (800c7c4 <SDMMC_GetCmdResp2+0x88>)
 800c74a:	fba2 2303 	umull	r2, r3, r2, r3
 800c74e:	0a5b      	lsrs	r3, r3, #9
 800c750:	f241 3288 	movw	r2, #5000	; 0x1388
 800c754:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c758:	4623      	mov	r3, r4
 800c75a:	1e5c      	subs	r4, r3, #1
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d102      	bne.n	800c766 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c760:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c764:	e026      	b.n	800c7b4 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c76a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c772:	2b00      	cmp	r3, #0
 800c774:	d0f0      	beq.n	800c758 <SDMMC_GetCmdResp2+0x1c>
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d1eb      	bne.n	800c758 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c784:	f003 0304 	and.w	r3, r3, #4
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d004      	beq.n	800c796 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2204      	movs	r2, #4
 800c790:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c792:	2304      	movs	r3, #4
 800c794:	e00e      	b.n	800c7b4 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c79a:	f003 0301 	and.w	r3, r3, #1
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d004      	beq.n	800c7ac <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2201      	movs	r2, #1
 800c7a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	e003      	b.n	800c7b4 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	22c5      	movs	r2, #197	; 0xc5
 800c7b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c7b2:	2300      	movs	r3, #0
}
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	3710      	adds	r7, #16
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bc90      	pop	{r4, r7}
 800c7bc:	4770      	bx	lr
 800c7be:	bf00      	nop
 800c7c0:	20000018 	.word	0x20000018
 800c7c4:	10624dd3 	.word	0x10624dd3

0800c7c8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c7c8:	b490      	push	{r4, r7}
 800c7ca:	b084      	sub	sp, #16
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c7d0:	4b18      	ldr	r3, [pc, #96]	; (800c834 <SDMMC_GetCmdResp3+0x6c>)
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	4a18      	ldr	r2, [pc, #96]	; (800c838 <SDMMC_GetCmdResp3+0x70>)
 800c7d6:	fba2 2303 	umull	r2, r3, r2, r3
 800c7da:	0a5b      	lsrs	r3, r3, #9
 800c7dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7e0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c7e4:	4623      	mov	r3, r4
 800c7e6:	1e5c      	subs	r4, r3, #1
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d102      	bne.n	800c7f2 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c7ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c7f0:	e01b      	b.n	800c82a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7f6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d0f0      	beq.n	800c7e4 <SDMMC_GetCmdResp3+0x1c>
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d1eb      	bne.n	800c7e4 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c810:	f003 0304 	and.w	r3, r3, #4
 800c814:	2b00      	cmp	r3, #0
 800c816:	d004      	beq.n	800c822 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2204      	movs	r2, #4
 800c81c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c81e:	2304      	movs	r3, #4
 800c820:	e003      	b.n	800c82a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	22c5      	movs	r2, #197	; 0xc5
 800c826:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c828:	2300      	movs	r3, #0
}
 800c82a:	4618      	mov	r0, r3
 800c82c:	3710      	adds	r7, #16
 800c82e:	46bd      	mov	sp, r7
 800c830:	bc90      	pop	{r4, r7}
 800c832:	4770      	bx	lr
 800c834:	20000018 	.word	0x20000018
 800c838:	10624dd3 	.word	0x10624dd3

0800c83c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c83c:	b590      	push	{r4, r7, lr}
 800c83e:	b087      	sub	sp, #28
 800c840:	af00      	add	r7, sp, #0
 800c842:	60f8      	str	r0, [r7, #12]
 800c844:	460b      	mov	r3, r1
 800c846:	607a      	str	r2, [r7, #4]
 800c848:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c84a:	4b34      	ldr	r3, [pc, #208]	; (800c91c <SDMMC_GetCmdResp6+0xe0>)
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	4a34      	ldr	r2, [pc, #208]	; (800c920 <SDMMC_GetCmdResp6+0xe4>)
 800c850:	fba2 2303 	umull	r2, r3, r2, r3
 800c854:	0a5b      	lsrs	r3, r3, #9
 800c856:	f241 3288 	movw	r2, #5000	; 0x1388
 800c85a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c85e:	4623      	mov	r3, r4
 800c860:	1e5c      	subs	r4, r3, #1
 800c862:	2b00      	cmp	r3, #0
 800c864:	d102      	bne.n	800c86c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c866:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c86a:	e052      	b.n	800c912 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c870:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c872:	697b      	ldr	r3, [r7, #20]
 800c874:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d0f0      	beq.n	800c85e <SDMMC_GetCmdResp6+0x22>
 800c87c:	697b      	ldr	r3, [r7, #20]
 800c87e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c882:	2b00      	cmp	r3, #0
 800c884:	d1eb      	bne.n	800c85e <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c88a:	f003 0304 	and.w	r3, r3, #4
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d004      	beq.n	800c89c <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	2204      	movs	r2, #4
 800c896:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c898:	2304      	movs	r3, #4
 800c89a:	e03a      	b.n	800c912 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8a0:	f003 0301 	and.w	r3, r3, #1
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d004      	beq.n	800c8b2 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	2201      	movs	r2, #1
 800c8ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c8ae:	2301      	movs	r3, #1
 800c8b0:	e02f      	b.n	800c912 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c8b2:	68f8      	ldr	r0, [r7, #12]
 800c8b4:	f7ff fbac 	bl	800c010 <SDMMC_GetCommandResponse>
 800c8b8:	4603      	mov	r3, r0
 800c8ba:	461a      	mov	r2, r3
 800c8bc:	7afb      	ldrb	r3, [r7, #11]
 800c8be:	4293      	cmp	r3, r2
 800c8c0:	d001      	beq.n	800c8c6 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	e025      	b.n	800c912 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	22c5      	movs	r2, #197	; 0xc5
 800c8ca:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c8cc:	2100      	movs	r1, #0
 800c8ce:	68f8      	ldr	r0, [r7, #12]
 800c8d0:	f7ff fbab 	bl	800c02a <SDMMC_GetResponse>
 800c8d4:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c8d6:	693b      	ldr	r3, [r7, #16]
 800c8d8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d106      	bne.n	800c8ee <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c8e0:	693b      	ldr	r3, [r7, #16]
 800c8e2:	0c1b      	lsrs	r3, r3, #16
 800c8e4:	b29a      	uxth	r2, r3
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	e011      	b.n	800c912 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c8ee:	693b      	ldr	r3, [r7, #16]
 800c8f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d002      	beq.n	800c8fe <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c8f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c8fc:	e009      	b.n	800c912 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c8fe:	693b      	ldr	r3, [r7, #16]
 800c900:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c904:	2b00      	cmp	r3, #0
 800c906:	d002      	beq.n	800c90e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c90c:	e001      	b.n	800c912 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c90e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c912:	4618      	mov	r0, r3
 800c914:	371c      	adds	r7, #28
 800c916:	46bd      	mov	sp, r7
 800c918:	bd90      	pop	{r4, r7, pc}
 800c91a:	bf00      	nop
 800c91c:	20000018 	.word	0x20000018
 800c920:	10624dd3 	.word	0x10624dd3

0800c924 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c924:	b490      	push	{r4, r7}
 800c926:	b084      	sub	sp, #16
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c92c:	4b21      	ldr	r3, [pc, #132]	; (800c9b4 <SDMMC_GetCmdResp7+0x90>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	4a21      	ldr	r2, [pc, #132]	; (800c9b8 <SDMMC_GetCmdResp7+0x94>)
 800c932:	fba2 2303 	umull	r2, r3, r2, r3
 800c936:	0a5b      	lsrs	r3, r3, #9
 800c938:	f241 3288 	movw	r2, #5000	; 0x1388
 800c93c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c940:	4623      	mov	r3, r4
 800c942:	1e5c      	subs	r4, r3, #1
 800c944:	2b00      	cmp	r3, #0
 800c946:	d102      	bne.n	800c94e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c948:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c94c:	e02c      	b.n	800c9a8 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c952:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d0f0      	beq.n	800c940 <SDMMC_GetCmdResp7+0x1c>
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c964:	2b00      	cmp	r3, #0
 800c966:	d1eb      	bne.n	800c940 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c96c:	f003 0304 	and.w	r3, r3, #4
 800c970:	2b00      	cmp	r3, #0
 800c972:	d004      	beq.n	800c97e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	2204      	movs	r2, #4
 800c978:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c97a:	2304      	movs	r3, #4
 800c97c:	e014      	b.n	800c9a8 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c982:	f003 0301 	and.w	r3, r3, #1
 800c986:	2b00      	cmp	r3, #0
 800c988:	d004      	beq.n	800c994 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	2201      	movs	r2, #1
 800c98e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c990:	2301      	movs	r3, #1
 800c992:	e009      	b.n	800c9a8 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d002      	beq.n	800c9a6 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	2240      	movs	r2, #64	; 0x40
 800c9a4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c9a6:	2300      	movs	r3, #0
  
}
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	3710      	adds	r7, #16
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bc90      	pop	{r4, r7}
 800c9b0:	4770      	bx	lr
 800c9b2:	bf00      	nop
 800c9b4:	20000018 	.word	0x20000018
 800c9b8:	10624dd3 	.word	0x10624dd3

0800c9bc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c9c0:	4904      	ldr	r1, [pc, #16]	; (800c9d4 <MX_FATFS_Init+0x18>)
 800c9c2:	4805      	ldr	r0, [pc, #20]	; (800c9d8 <MX_FATFS_Init+0x1c>)
 800c9c4:	f000 fa96 	bl	800cef4 <FATFS_LinkDriver>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	461a      	mov	r2, r3
 800c9cc:	4b03      	ldr	r3, [pc, #12]	; (800c9dc <MX_FATFS_Init+0x20>)
 800c9ce:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800c9d0:	bf00      	nop
 800c9d2:	bd80      	pop	{r7, pc}
 800c9d4:	2000ce24 	.word	0x2000ce24
 800c9d8:	0802c220 	.word	0x0802c220
 800c9dc:	2000c9bc 	.word	0x2000c9bc

0800c9e0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b082      	sub	sp, #8
 800c9e4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c9ea:	f000 f87b 	bl	800cae4 <BSP_SD_IsDetected>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	2b01      	cmp	r3, #1
 800c9f2:	d001      	beq.n	800c9f8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800c9f4:	2302      	movs	r3, #2
 800c9f6:	e012      	b.n	800ca1e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800c9f8:	480b      	ldr	r0, [pc, #44]	; (800ca28 <BSP_SD_Init+0x48>)
 800c9fa:	f7fc fae9 	bl	8008fd0 <HAL_SD_Init>
 800c9fe:	4603      	mov	r3, r0
 800ca00:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ca02:	79fb      	ldrb	r3, [r7, #7]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d109      	bne.n	800ca1c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800ca08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ca0c:	4806      	ldr	r0, [pc, #24]	; (800ca28 <BSP_SD_Init+0x48>)
 800ca0e:	f7fc ff2b 	bl	8009868 <HAL_SD_ConfigWideBusOperation>
 800ca12:	4603      	mov	r3, r0
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d001      	beq.n	800ca1c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800ca18:	2301      	movs	r3, #1
 800ca1a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800ca1c:	79fb      	ldrb	r3, [r7, #7]
}
 800ca1e:	4618      	mov	r0, r3
 800ca20:	3708      	adds	r7, #8
 800ca22:	46bd      	mov	sp, r7
 800ca24:	bd80      	pop	{r7, pc}
 800ca26:	bf00      	nop
 800ca28:	2000c474 	.word	0x2000c474

0800ca2c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b086      	sub	sp, #24
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	60f8      	str	r0, [r7, #12]
 800ca34:	60b9      	str	r1, [r7, #8]
 800ca36:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ca38:	2300      	movs	r3, #0
 800ca3a:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	68ba      	ldr	r2, [r7, #8]
 800ca40:	68f9      	ldr	r1, [r7, #12]
 800ca42:	4806      	ldr	r0, [pc, #24]	; (800ca5c <BSP_SD_ReadBlocks_DMA+0x30>)
 800ca44:	f7fc fb5c 	bl	8009100 <HAL_SD_ReadBlocks_DMA>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d001      	beq.n	800ca52 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ca4e:	2301      	movs	r3, #1
 800ca50:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800ca52:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca54:	4618      	mov	r0, r3
 800ca56:	3718      	adds	r7, #24
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd80      	pop	{r7, pc}
 800ca5c:	2000c474 	.word	0x2000c474

0800ca60 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b086      	sub	sp, #24
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	60f8      	str	r0, [r7, #12]
 800ca68:	60b9      	str	r1, [r7, #8]
 800ca6a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	68ba      	ldr	r2, [r7, #8]
 800ca74:	68f9      	ldr	r1, [r7, #12]
 800ca76:	4806      	ldr	r0, [pc, #24]	; (800ca90 <BSP_SD_WriteBlocks_DMA+0x30>)
 800ca78:	f7fc fc2e 	bl	80092d8 <HAL_SD_WriteBlocks_DMA>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d001      	beq.n	800ca86 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ca82:	2301      	movs	r3, #1
 800ca84:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800ca86:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca88:	4618      	mov	r0, r3
 800ca8a:	3718      	adds	r7, #24
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	bd80      	pop	{r7, pc}
 800ca90:	2000c474 	.word	0x2000c474

0800ca94 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ca98:	4805      	ldr	r0, [pc, #20]	; (800cab0 <BSP_SD_GetCardState+0x1c>)
 800ca9a:	f7fc ff61 	bl	8009960 <HAL_SD_GetCardState>
 800ca9e:	4603      	mov	r3, r0
 800caa0:	2b04      	cmp	r3, #4
 800caa2:	bf14      	ite	ne
 800caa4:	2301      	movne	r3, #1
 800caa6:	2300      	moveq	r3, #0
 800caa8:	b2db      	uxtb	r3, r3
}
 800caaa:	4618      	mov	r0, r3
 800caac:	bd80      	pop	{r7, pc}
 800caae:	bf00      	nop
 800cab0:	2000c474 	.word	0x2000c474

0800cab4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b082      	sub	sp, #8
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800cabc:	6879      	ldr	r1, [r7, #4]
 800cabe:	4803      	ldr	r0, [pc, #12]	; (800cacc <BSP_SD_GetCardInfo+0x18>)
 800cac0:	f7fc fea6 	bl	8009810 <HAL_SD_GetCardInfo>
}
 800cac4:	bf00      	nop
 800cac6:	3708      	adds	r7, #8
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}
 800cacc:	2000c474 	.word	0x2000c474

0800cad0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b082      	sub	sp, #8
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800cad8:	f000 f9b2 	bl	800ce40 <BSP_SD_ReadCpltCallback>
}
 800cadc:	bf00      	nop
 800cade:	3708      	adds	r7, #8
 800cae0:	46bd      	mov	sp, r7
 800cae2:	bd80      	pop	{r7, pc}

0800cae4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b082      	sub	sp, #8
 800cae8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800caea:	2301      	movs	r3, #1
 800caec:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800caee:	f000 f80b 	bl	800cb08 <BSP_PlatformIsDetected>
 800caf2:	4603      	mov	r3, r0
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d101      	bne.n	800cafc <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800caf8:	2300      	movs	r3, #0
 800cafa:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800cafc:	79fb      	ldrb	r3, [r7, #7]
 800cafe:	b2db      	uxtb	r3, r3
}
 800cb00:	4618      	mov	r0, r3
 800cb02:	3708      	adds	r7, #8
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd80      	pop	{r7, pc}

0800cb08 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b082      	sub	sp, #8
 800cb0c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800cb0e:	2301      	movs	r3, #1
 800cb10:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800cb12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800cb16:	4806      	ldr	r0, [pc, #24]	; (800cb30 <BSP_PlatformIsDetected+0x28>)
 800cb18:	f7f9 f90e 	bl	8005d38 <HAL_GPIO_ReadPin>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d001      	beq.n	800cb26 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800cb22:	2300      	movs	r3, #0
 800cb24:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800cb26:	79fb      	ldrb	r3, [r7, #7]
}  
 800cb28:	4618      	mov	r0, r3
 800cb2a:	3708      	adds	r7, #8
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	bd80      	pop	{r7, pc}
 800cb30:	40020800 	.word	0x40020800

0800cb34 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b084      	sub	sp, #16
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800cb3c:	f000 fa26 	bl	800cf8c <osKernelSysTick>
 800cb40:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800cb42:	e006      	b.n	800cb52 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cb44:	f7ff ffa6 	bl	800ca94 <BSP_SD_GetCardState>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d101      	bne.n	800cb52 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800cb4e:	2300      	movs	r3, #0
 800cb50:	e009      	b.n	800cb66 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800cb52:	f000 fa1b 	bl	800cf8c <osKernelSysTick>
 800cb56:	4602      	mov	r2, r0
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	1ad3      	subs	r3, r2, r3
 800cb5c:	687a      	ldr	r2, [r7, #4]
 800cb5e:	429a      	cmp	r2, r3
 800cb60:	d8f0      	bhi.n	800cb44 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800cb62:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cb66:	4618      	mov	r0, r3
 800cb68:	3710      	adds	r7, #16
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bd80      	pop	{r7, pc}
	...

0800cb70 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b082      	sub	sp, #8
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	4603      	mov	r3, r0
 800cb78:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800cb7a:	4b0b      	ldr	r3, [pc, #44]	; (800cba8 <SD_CheckStatus+0x38>)
 800cb7c:	2201      	movs	r2, #1
 800cb7e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cb80:	f7ff ff88 	bl	800ca94 <BSP_SD_GetCardState>
 800cb84:	4603      	mov	r3, r0
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d107      	bne.n	800cb9a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800cb8a:	4b07      	ldr	r3, [pc, #28]	; (800cba8 <SD_CheckStatus+0x38>)
 800cb8c:	781b      	ldrb	r3, [r3, #0]
 800cb8e:	b2db      	uxtb	r3, r3
 800cb90:	f023 0301 	bic.w	r3, r3, #1
 800cb94:	b2da      	uxtb	r2, r3
 800cb96:	4b04      	ldr	r3, [pc, #16]	; (800cba8 <SD_CheckStatus+0x38>)
 800cb98:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800cb9a:	4b03      	ldr	r3, [pc, #12]	; (800cba8 <SD_CheckStatus+0x38>)
 800cb9c:	781b      	ldrb	r3, [r3, #0]
 800cb9e:	b2db      	uxtb	r3, r3
}
 800cba0:	4618      	mov	r0, r3
 800cba2:	3708      	adds	r7, #8
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bd80      	pop	{r7, pc}
 800cba8:	20000021 	.word	0x20000021

0800cbac <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800cbac:	b590      	push	{r4, r7, lr}
 800cbae:	b087      	sub	sp, #28
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800cbb6:	4b20      	ldr	r3, [pc, #128]	; (800cc38 <SD_initialize+0x8c>)
 800cbb8:	2201      	movs	r2, #1
 800cbba:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800cbbc:	f000 f9da 	bl	800cf74 <osKernelRunning>
 800cbc0:	4603      	mov	r3, r0
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d030      	beq.n	800cc28 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800cbc6:	f7ff ff0b 	bl	800c9e0 <BSP_SD_Init>
 800cbca:	4603      	mov	r3, r0
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d107      	bne.n	800cbe0 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800cbd0:	79fb      	ldrb	r3, [r7, #7]
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f7ff ffcc 	bl	800cb70 <SD_CheckStatus>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	461a      	mov	r2, r3
 800cbdc:	4b16      	ldr	r3, [pc, #88]	; (800cc38 <SD_initialize+0x8c>)
 800cbde:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800cbe0:	4b15      	ldr	r3, [pc, #84]	; (800cc38 <SD_initialize+0x8c>)
 800cbe2:	781b      	ldrb	r3, [r3, #0]
 800cbe4:	b2db      	uxtb	r3, r3
 800cbe6:	2b01      	cmp	r3, #1
 800cbe8:	d01e      	beq.n	800cc28 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800cbea:	4b14      	ldr	r3, [pc, #80]	; (800cc3c <SD_initialize+0x90>)
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d10e      	bne.n	800cc10 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800cbf2:	4b13      	ldr	r3, [pc, #76]	; (800cc40 <SD_initialize+0x94>)
 800cbf4:	f107 0408 	add.w	r4, r7, #8
 800cbf8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cbfa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800cbfe:	f107 0308 	add.w	r3, r7, #8
 800cc02:	2100      	movs	r1, #0
 800cc04:	4618      	mov	r0, r3
 800cc06:	f000 fa31 	bl	800d06c <osMessageCreate>
 800cc0a:	4602      	mov	r2, r0
 800cc0c:	4b0b      	ldr	r3, [pc, #44]	; (800cc3c <SD_initialize+0x90>)
 800cc0e:	601a      	str	r2, [r3, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800cc10:	4b0a      	ldr	r3, [pc, #40]	; (800cc3c <SD_initialize+0x90>)
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d107      	bne.n	800cc28 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800cc18:	4b07      	ldr	r3, [pc, #28]	; (800cc38 <SD_initialize+0x8c>)
 800cc1a:	781b      	ldrb	r3, [r3, #0]
 800cc1c:	b2db      	uxtb	r3, r3
 800cc1e:	f043 0301 	orr.w	r3, r3, #1
 800cc22:	b2da      	uxtb	r2, r3
 800cc24:	4b04      	ldr	r3, [pc, #16]	; (800cc38 <SD_initialize+0x8c>)
 800cc26:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800cc28:	4b03      	ldr	r3, [pc, #12]	; (800cc38 <SD_initialize+0x8c>)
 800cc2a:	781b      	ldrb	r3, [r3, #0]
 800cc2c:	b2db      	uxtb	r3, r3
}
 800cc2e:	4618      	mov	r0, r3
 800cc30:	371c      	adds	r7, #28
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd90      	pop	{r4, r7, pc}
 800cc36:	bf00      	nop
 800cc38:	20000021 	.word	0x20000021
 800cc3c:	20000414 	.word	0x20000414
 800cc40:	0802b818 	.word	0x0802b818

0800cc44 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b082      	sub	sp, #8
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800cc4e:	79fb      	ldrb	r3, [r7, #7]
 800cc50:	4618      	mov	r0, r3
 800cc52:	f7ff ff8d 	bl	800cb70 <SD_CheckStatus>
 800cc56:	4603      	mov	r3, r0
}
 800cc58:	4618      	mov	r0, r3
 800cc5a:	3708      	adds	r7, #8
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	bd80      	pop	{r7, pc}

0800cc60 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b08a      	sub	sp, #40	; 0x28
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	60b9      	str	r1, [r7, #8]
 800cc68:	607a      	str	r2, [r7, #4]
 800cc6a:	603b      	str	r3, [r7, #0]
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cc70:	2301      	movs	r3, #1
 800cc72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800cc76:	f247 5030 	movw	r0, #30000	; 0x7530
 800cc7a:	f7ff ff5b 	bl	800cb34 <SD_CheckStatusWithTimeout>
 800cc7e:	4603      	mov	r3, r0
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	da02      	bge.n	800cc8a <SD_read+0x2a>
  {
    return res;
 800cc84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc88:	e032      	b.n	800ccf0 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800cc8a:	683a      	ldr	r2, [r7, #0]
 800cc8c:	6879      	ldr	r1, [r7, #4]
 800cc8e:	68b8      	ldr	r0, [r7, #8]
 800cc90:	f7ff fecc 	bl	800ca2c <BSP_SD_ReadBlocks_DMA>
 800cc94:	4603      	mov	r3, r0
 800cc96:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800cc9a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d124      	bne.n	800ccec <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800cca2:	4b15      	ldr	r3, [pc, #84]	; (800ccf8 <SD_read+0x98>)
 800cca4:	6819      	ldr	r1, [r3, #0]
 800cca6:	f107 0314 	add.w	r3, r7, #20
 800ccaa:	f247 5230 	movw	r2, #30000	; 0x7530
 800ccae:	4618      	mov	r0, r3
 800ccb0:	f000 fa46 	bl	800d140 <osMessageGet>

    if (event.status == osEventMessage)
 800ccb4:	697b      	ldr	r3, [r7, #20]
 800ccb6:	2b10      	cmp	r3, #16
 800ccb8:	d118      	bne.n	800ccec <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800ccba:	69bb      	ldr	r3, [r7, #24]
 800ccbc:	2b01      	cmp	r3, #1
 800ccbe:	d115      	bne.n	800ccec <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800ccc0:	f000 f964 	bl	800cf8c <osKernelSysTick>
 800ccc4:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800ccc6:	e008      	b.n	800ccda <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ccc8:	f7ff fee4 	bl	800ca94 <BSP_SD_GetCardState>
 800cccc:	4603      	mov	r3, r0
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d103      	bne.n	800ccda <SD_read+0x7a>
              {
                res = RES_OK;
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800ccd8:	e008      	b.n	800ccec <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800ccda:	f000 f957 	bl	800cf8c <osKernelSysTick>
 800ccde:	4602      	mov	r2, r0
 800cce0:	6a3b      	ldr	r3, [r7, #32]
 800cce2:	1ad3      	subs	r3, r2, r3
 800cce4:	f247 522f 	movw	r2, #29999	; 0x752f
 800cce8:	4293      	cmp	r3, r2
 800ccea:	d9ed      	bls.n	800ccc8 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800ccec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	3728      	adds	r7, #40	; 0x28
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}
 800ccf8:	20000414 	.word	0x20000414

0800ccfc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b08a      	sub	sp, #40	; 0x28
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	60b9      	str	r1, [r7, #8]
 800cd04:	607a      	str	r2, [r7, #4]
 800cd06:	603b      	str	r3, [r7, #0]
 800cd08:	4603      	mov	r3, r0
 800cd0a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cd0c:	2301      	movs	r3, #1
 800cd0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800cd12:	f247 5030 	movw	r0, #30000	; 0x7530
 800cd16:	f7ff ff0d 	bl	800cb34 <SD_CheckStatusWithTimeout>
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	da02      	bge.n	800cd26 <SD_write+0x2a>
  {
    return res;
 800cd20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd24:	e02e      	b.n	800cd84 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800cd26:	683a      	ldr	r2, [r7, #0]
 800cd28:	6879      	ldr	r1, [r7, #4]
 800cd2a:	68b8      	ldr	r0, [r7, #8]
 800cd2c:	f7ff fe98 	bl	800ca60 <BSP_SD_WriteBlocks_DMA>
 800cd30:	4603      	mov	r3, r0
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d124      	bne.n	800cd80 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800cd36:	4b15      	ldr	r3, [pc, #84]	; (800cd8c <SD_write+0x90>)
 800cd38:	6819      	ldr	r1, [r3, #0]
 800cd3a:	f107 0314 	add.w	r3, r7, #20
 800cd3e:	f247 5230 	movw	r2, #30000	; 0x7530
 800cd42:	4618      	mov	r0, r3
 800cd44:	f000 f9fc 	bl	800d140 <osMessageGet>

    if (event.status == osEventMessage)
 800cd48:	697b      	ldr	r3, [r7, #20]
 800cd4a:	2b10      	cmp	r3, #16
 800cd4c:	d118      	bne.n	800cd80 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800cd4e:	69bb      	ldr	r3, [r7, #24]
 800cd50:	2b02      	cmp	r3, #2
 800cd52:	d115      	bne.n	800cd80 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800cd54:	f000 f91a 	bl	800cf8c <osKernelSysTick>
 800cd58:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800cd5a:	e008      	b.n	800cd6e <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cd5c:	f7ff fe9a 	bl	800ca94 <BSP_SD_GetCardState>
 800cd60:	4603      	mov	r3, r0
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d103      	bne.n	800cd6e <SD_write+0x72>
          {
            res = RES_OK;
 800cd66:	2300      	movs	r3, #0
 800cd68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800cd6c:	e008      	b.n	800cd80 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800cd6e:	f000 f90d 	bl	800cf8c <osKernelSysTick>
 800cd72:	4602      	mov	r2, r0
 800cd74:	6a3b      	ldr	r3, [r7, #32]
 800cd76:	1ad3      	subs	r3, r2, r3
 800cd78:	f247 522f 	movw	r2, #29999	; 0x752f
 800cd7c:	4293      	cmp	r3, r2
 800cd7e:	d9ed      	bls.n	800cd5c <SD_write+0x60>
    }

  }
#endif

  return res;
 800cd80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800cd84:	4618      	mov	r0, r3
 800cd86:	3728      	adds	r7, #40	; 0x28
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	bd80      	pop	{r7, pc}
 800cd8c:	20000414 	.word	0x20000414

0800cd90 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b08c      	sub	sp, #48	; 0x30
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	4603      	mov	r3, r0
 800cd98:	603a      	str	r2, [r7, #0]
 800cd9a:	71fb      	strb	r3, [r7, #7]
 800cd9c:	460b      	mov	r3, r1
 800cd9e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800cda0:	2301      	movs	r3, #1
 800cda2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800cda6:	4b25      	ldr	r3, [pc, #148]	; (800ce3c <SD_ioctl+0xac>)
 800cda8:	781b      	ldrb	r3, [r3, #0]
 800cdaa:	b2db      	uxtb	r3, r3
 800cdac:	f003 0301 	and.w	r3, r3, #1
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d001      	beq.n	800cdb8 <SD_ioctl+0x28>
 800cdb4:	2303      	movs	r3, #3
 800cdb6:	e03c      	b.n	800ce32 <SD_ioctl+0xa2>

  switch (cmd)
 800cdb8:	79bb      	ldrb	r3, [r7, #6]
 800cdba:	2b03      	cmp	r3, #3
 800cdbc:	d834      	bhi.n	800ce28 <SD_ioctl+0x98>
 800cdbe:	a201      	add	r2, pc, #4	; (adr r2, 800cdc4 <SD_ioctl+0x34>)
 800cdc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdc4:	0800cdd5 	.word	0x0800cdd5
 800cdc8:	0800cddd 	.word	0x0800cddd
 800cdcc:	0800cdf5 	.word	0x0800cdf5
 800cdd0:	0800ce0f 	.word	0x0800ce0f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cdda:	e028      	b.n	800ce2e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800cddc:	f107 030c 	add.w	r3, r7, #12
 800cde0:	4618      	mov	r0, r3
 800cde2:	f7ff fe67 	bl	800cab4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800cde6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cdec:	2300      	movs	r3, #0
 800cdee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cdf2:	e01c      	b.n	800ce2e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cdf4:	f107 030c 	add.w	r3, r7, #12
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	f7ff fe5b 	bl	800cab4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800cdfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce00:	b29a      	uxth	r2, r3
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ce06:	2300      	movs	r3, #0
 800ce08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ce0c:	e00f      	b.n	800ce2e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ce0e:	f107 030c 	add.w	r3, r7, #12
 800ce12:	4618      	mov	r0, r3
 800ce14:	f7ff fe4e 	bl	800cab4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ce18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce1a:	0a5a      	lsrs	r2, r3, #9
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ce20:	2300      	movs	r3, #0
 800ce22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ce26:	e002      	b.n	800ce2e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800ce28:	2304      	movs	r3, #4
 800ce2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800ce2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ce32:	4618      	mov	r0, r3
 800ce34:	3730      	adds	r7, #48	; 0x30
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bd80      	pop	{r7, pc}
 800ce3a:	bf00      	nop
 800ce3c:	20000021 	.word	0x20000021

0800ce40 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800ce44:	4b04      	ldr	r3, [pc, #16]	; (800ce58 <BSP_SD_ReadCpltCallback+0x18>)
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	2200      	movs	r2, #0
 800ce4a:	2101      	movs	r1, #1
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	f000 f937 	bl	800d0c0 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800ce52:	bf00      	nop
 800ce54:	bd80      	pop	{r7, pc}
 800ce56:	bf00      	nop
 800ce58:	20000414 	.word	0x20000414

0800ce5c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ce5c:	b480      	push	{r7}
 800ce5e:	b087      	sub	sp, #28
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	60f8      	str	r0, [r7, #12]
 800ce64:	60b9      	str	r1, [r7, #8]
 800ce66:	4613      	mov	r3, r2
 800ce68:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ce6a:	2301      	movs	r3, #1
 800ce6c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ce6e:	2300      	movs	r3, #0
 800ce70:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ce72:	4b1f      	ldr	r3, [pc, #124]	; (800cef0 <FATFS_LinkDriverEx+0x94>)
 800ce74:	7a5b      	ldrb	r3, [r3, #9]
 800ce76:	b2db      	uxtb	r3, r3
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d131      	bne.n	800cee0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ce7c:	4b1c      	ldr	r3, [pc, #112]	; (800cef0 <FATFS_LinkDriverEx+0x94>)
 800ce7e:	7a5b      	ldrb	r3, [r3, #9]
 800ce80:	b2db      	uxtb	r3, r3
 800ce82:	461a      	mov	r2, r3
 800ce84:	4b1a      	ldr	r3, [pc, #104]	; (800cef0 <FATFS_LinkDriverEx+0x94>)
 800ce86:	2100      	movs	r1, #0
 800ce88:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ce8a:	4b19      	ldr	r3, [pc, #100]	; (800cef0 <FATFS_LinkDriverEx+0x94>)
 800ce8c:	7a5b      	ldrb	r3, [r3, #9]
 800ce8e:	b2db      	uxtb	r3, r3
 800ce90:	4a17      	ldr	r2, [pc, #92]	; (800cef0 <FATFS_LinkDriverEx+0x94>)
 800ce92:	009b      	lsls	r3, r3, #2
 800ce94:	4413      	add	r3, r2
 800ce96:	68fa      	ldr	r2, [r7, #12]
 800ce98:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ce9a:	4b15      	ldr	r3, [pc, #84]	; (800cef0 <FATFS_LinkDriverEx+0x94>)
 800ce9c:	7a5b      	ldrb	r3, [r3, #9]
 800ce9e:	b2db      	uxtb	r3, r3
 800cea0:	461a      	mov	r2, r3
 800cea2:	4b13      	ldr	r3, [pc, #76]	; (800cef0 <FATFS_LinkDriverEx+0x94>)
 800cea4:	4413      	add	r3, r2
 800cea6:	79fa      	ldrb	r2, [r7, #7]
 800cea8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ceaa:	4b11      	ldr	r3, [pc, #68]	; (800cef0 <FATFS_LinkDriverEx+0x94>)
 800ceac:	7a5b      	ldrb	r3, [r3, #9]
 800ceae:	b2db      	uxtb	r3, r3
 800ceb0:	1c5a      	adds	r2, r3, #1
 800ceb2:	b2d1      	uxtb	r1, r2
 800ceb4:	4a0e      	ldr	r2, [pc, #56]	; (800cef0 <FATFS_LinkDriverEx+0x94>)
 800ceb6:	7251      	strb	r1, [r2, #9]
 800ceb8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ceba:	7dbb      	ldrb	r3, [r7, #22]
 800cebc:	3330      	adds	r3, #48	; 0x30
 800cebe:	b2da      	uxtb	r2, r3
 800cec0:	68bb      	ldr	r3, [r7, #8]
 800cec2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cec4:	68bb      	ldr	r3, [r7, #8]
 800cec6:	3301      	adds	r3, #1
 800cec8:	223a      	movs	r2, #58	; 0x3a
 800ceca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	3302      	adds	r3, #2
 800ced0:	222f      	movs	r2, #47	; 0x2f
 800ced2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ced4:	68bb      	ldr	r3, [r7, #8]
 800ced6:	3303      	adds	r3, #3
 800ced8:	2200      	movs	r2, #0
 800ceda:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cedc:	2300      	movs	r3, #0
 800cede:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cee0:	7dfb      	ldrb	r3, [r7, #23]
}
 800cee2:	4618      	mov	r0, r3
 800cee4:	371c      	adds	r7, #28
 800cee6:	46bd      	mov	sp, r7
 800cee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceec:	4770      	bx	lr
 800ceee:	bf00      	nop
 800cef0:	20000418 	.word	0x20000418

0800cef4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b082      	sub	sp, #8
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
 800cefc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cefe:	2200      	movs	r2, #0
 800cf00:	6839      	ldr	r1, [r7, #0]
 800cf02:	6878      	ldr	r0, [r7, #4]
 800cf04:	f7ff ffaa 	bl	800ce5c <FATFS_LinkDriverEx>
 800cf08:	4603      	mov	r3, r0
}
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	3708      	adds	r7, #8
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	bd80      	pop	{r7, pc}

0800cf12 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800cf12:	b480      	push	{r7}
 800cf14:	b085      	sub	sp, #20
 800cf16:	af00      	add	r7, sp, #0
 800cf18:	4603      	mov	r3, r0
 800cf1a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800cf20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cf24:	2b84      	cmp	r3, #132	; 0x84
 800cf26:	d005      	beq.n	800cf34 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800cf28:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	4413      	add	r3, r2
 800cf30:	3303      	adds	r3, #3
 800cf32:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800cf34:	68fb      	ldr	r3, [r7, #12]
}
 800cf36:	4618      	mov	r0, r3
 800cf38:	3714      	adds	r7, #20
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf40:	4770      	bx	lr

0800cf42 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800cf42:	b480      	push	{r7}
 800cf44:	b083      	sub	sp, #12
 800cf46:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf48:	f3ef 8305 	mrs	r3, IPSR
 800cf4c:	607b      	str	r3, [r7, #4]
  return(result);
 800cf4e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	bf14      	ite	ne
 800cf54:	2301      	movne	r3, #1
 800cf56:	2300      	moveq	r3, #0
 800cf58:	b2db      	uxtb	r3, r3
}
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	370c      	adds	r7, #12
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf64:	4770      	bx	lr

0800cf66 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800cf66:	b580      	push	{r7, lr}
 800cf68:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800cf6a:	f001 faff 	bl	800e56c <vTaskStartScheduler>
  
  return osOK;
 800cf6e:	2300      	movs	r3, #0
}
 800cf70:	4618      	mov	r0, r3
 800cf72:	bd80      	pop	{r7, pc}

0800cf74 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800cf78:	f001 ff4a 	bl	800ee10 <xTaskGetSchedulerState>
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	2b01      	cmp	r3, #1
 800cf80:	d101      	bne.n	800cf86 <osKernelRunning+0x12>
    return 0;
 800cf82:	2300      	movs	r3, #0
 800cf84:	e000      	b.n	800cf88 <osKernelRunning+0x14>
  else
    return 1;
 800cf86:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	bd80      	pop	{r7, pc}

0800cf8c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800cf90:	f7ff ffd7 	bl	800cf42 <inHandlerMode>
 800cf94:	4603      	mov	r3, r0
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d003      	beq.n	800cfa2 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800cf9a:	f001 fc05 	bl	800e7a8 <xTaskGetTickCountFromISR>
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	e002      	b.n	800cfa8 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800cfa2:	f001 fbf1 	bl	800e788 <xTaskGetTickCount>
 800cfa6:	4603      	mov	r3, r0
  }
}
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	bd80      	pop	{r7, pc}

0800cfac <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800cfac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cfae:	b089      	sub	sp, #36	; 0x24
 800cfb0:	af04      	add	r7, sp, #16
 800cfb2:	6078      	str	r0, [r7, #4]
 800cfb4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	695b      	ldr	r3, [r3, #20]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d020      	beq.n	800d000 <osThreadCreate+0x54>
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	699b      	ldr	r3, [r3, #24]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d01c      	beq.n	800d000 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	685c      	ldr	r4, [r3, #4]
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681d      	ldr	r5, [r3, #0]
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	691e      	ldr	r6, [r3, #16]
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800cfd8:	4618      	mov	r0, r3
 800cfda:	f7ff ff9a 	bl	800cf12 <makeFreeRtosPriority>
 800cfde:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	695b      	ldr	r3, [r3, #20]
 800cfe4:	687a      	ldr	r2, [r7, #4]
 800cfe6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cfe8:	9202      	str	r2, [sp, #8]
 800cfea:	9301      	str	r3, [sp, #4]
 800cfec:	9100      	str	r1, [sp, #0]
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	4632      	mov	r2, r6
 800cff2:	4629      	mov	r1, r5
 800cff4:	4620      	mov	r0, r4
 800cff6:	f001 f8e0 	bl	800e1ba <xTaskCreateStatic>
 800cffa:	4603      	mov	r3, r0
 800cffc:	60fb      	str	r3, [r7, #12]
 800cffe:	e01c      	b.n	800d03a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	685c      	ldr	r4, [r3, #4]
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d00c:	b29e      	uxth	r6, r3
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d014:	4618      	mov	r0, r3
 800d016:	f7ff ff7c 	bl	800cf12 <makeFreeRtosPriority>
 800d01a:	4602      	mov	r2, r0
 800d01c:	f107 030c 	add.w	r3, r7, #12
 800d020:	9301      	str	r3, [sp, #4]
 800d022:	9200      	str	r2, [sp, #0]
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	4632      	mov	r2, r6
 800d028:	4629      	mov	r1, r5
 800d02a:	4620      	mov	r0, r4
 800d02c:	f001 f925 	bl	800e27a <xTaskCreate>
 800d030:	4603      	mov	r3, r0
 800d032:	2b01      	cmp	r3, #1
 800d034:	d001      	beq.n	800d03a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800d036:	2300      	movs	r3, #0
 800d038:	e000      	b.n	800d03c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800d03a:	68fb      	ldr	r3, [r7, #12]
}
 800d03c:	4618      	mov	r0, r3
 800d03e:	3714      	adds	r7, #20
 800d040:	46bd      	mov	sp, r7
 800d042:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d044 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b084      	sub	sp, #16
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d001      	beq.n	800d05a <osDelay+0x16>
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	e000      	b.n	800d05c <osDelay+0x18>
 800d05a:	2301      	movs	r3, #1
 800d05c:	4618      	mov	r0, r3
 800d05e:	f001 fa4f 	bl	800e500 <vTaskDelay>
  
  return osOK;
 800d062:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d064:	4618      	mov	r0, r3
 800d066:	3710      	adds	r7, #16
 800d068:	46bd      	mov	sp, r7
 800d06a:	bd80      	pop	{r7, pc}

0800d06c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800d06c:	b590      	push	{r4, r7, lr}
 800d06e:	b085      	sub	sp, #20
 800d070:	af02      	add	r7, sp, #8
 800d072:	6078      	str	r0, [r7, #4]
 800d074:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	689b      	ldr	r3, [r3, #8]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d012      	beq.n	800d0a4 <osMessageCreate+0x38>
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	68db      	ldr	r3, [r3, #12]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d00e      	beq.n	800d0a4 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	6818      	ldr	r0, [r3, #0]
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	6859      	ldr	r1, [r3, #4]
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	689a      	ldr	r2, [r3, #8]
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	68dc      	ldr	r4, [r3, #12]
 800d096:	2300      	movs	r3, #0
 800d098:	9300      	str	r3, [sp, #0]
 800d09a:	4623      	mov	r3, r4
 800d09c:	f000 f9e2 	bl	800d464 <xQueueGenericCreateStatic>
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	e008      	b.n	800d0b6 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	6818      	ldr	r0, [r3, #0]
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	685b      	ldr	r3, [r3, #4]
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	4619      	mov	r1, r3
 800d0b0:	f000 fa55 	bl	800d55e <xQueueGenericCreate>
 800d0b4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	370c      	adds	r7, #12
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	bd90      	pop	{r4, r7, pc}
	...

0800d0c0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b086      	sub	sp, #24
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	60f8      	str	r0, [r7, #12]
 800d0c8:	60b9      	str	r1, [r7, #8]
 800d0ca:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800d0d4:	697b      	ldr	r3, [r7, #20]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d101      	bne.n	800d0de <osMessagePut+0x1e>
    ticks = 1;
 800d0da:	2301      	movs	r3, #1
 800d0dc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800d0de:	f7ff ff30 	bl	800cf42 <inHandlerMode>
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d018      	beq.n	800d11a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800d0e8:	f107 0210 	add.w	r2, r7, #16
 800d0ec:	f107 0108 	add.w	r1, r7, #8
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	68f8      	ldr	r0, [r7, #12]
 800d0f4:	f000 fb96 	bl	800d824 <xQueueGenericSendFromISR>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	2b01      	cmp	r3, #1
 800d0fc:	d001      	beq.n	800d102 <osMessagePut+0x42>
      return osErrorOS;
 800d0fe:	23ff      	movs	r3, #255	; 0xff
 800d100:	e018      	b.n	800d134 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d102:	693b      	ldr	r3, [r7, #16]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d014      	beq.n	800d132 <osMessagePut+0x72>
 800d108:	4b0c      	ldr	r3, [pc, #48]	; (800d13c <osMessagePut+0x7c>)
 800d10a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d10e:	601a      	str	r2, [r3, #0]
 800d110:	f3bf 8f4f 	dsb	sy
 800d114:	f3bf 8f6f 	isb	sy
 800d118:	e00b      	b.n	800d132 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800d11a:	f107 0108 	add.w	r1, r7, #8
 800d11e:	2300      	movs	r3, #0
 800d120:	697a      	ldr	r2, [r7, #20]
 800d122:	68f8      	ldr	r0, [r7, #12]
 800d124:	f000 fa7c 	bl	800d620 <xQueueGenericSend>
 800d128:	4603      	mov	r3, r0
 800d12a:	2b01      	cmp	r3, #1
 800d12c:	d001      	beq.n	800d132 <osMessagePut+0x72>
      return osErrorOS;
 800d12e:	23ff      	movs	r3, #255	; 0xff
 800d130:	e000      	b.n	800d134 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800d132:	2300      	movs	r3, #0
}
 800d134:	4618      	mov	r0, r3
 800d136:	3718      	adds	r7, #24
 800d138:	46bd      	mov	sp, r7
 800d13a:	bd80      	pop	{r7, pc}
 800d13c:	e000ed04 	.word	0xe000ed04

0800d140 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800d140:	b590      	push	{r4, r7, lr}
 800d142:	b08b      	sub	sp, #44	; 0x2c
 800d144:	af00      	add	r7, sp, #0
 800d146:	60f8      	str	r0, [r7, #12]
 800d148:	60b9      	str	r1, [r7, #8]
 800d14a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800d14c:	68bb      	ldr	r3, [r7, #8]
 800d14e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800d150:	2300      	movs	r3, #0
 800d152:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800d154:	68bb      	ldr	r3, [r7, #8]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d10a      	bne.n	800d170 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800d15a:	2380      	movs	r3, #128	; 0x80
 800d15c:	617b      	str	r3, [r7, #20]
    return event;
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	461c      	mov	r4, r3
 800d162:	f107 0314 	add.w	r3, r7, #20
 800d166:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d16a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d16e:	e054      	b.n	800d21a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800d170:	2300      	movs	r3, #0
 800d172:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800d174:	2300      	movs	r3, #0
 800d176:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d17e:	d103      	bne.n	800d188 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800d180:	f04f 33ff 	mov.w	r3, #4294967295
 800d184:	627b      	str	r3, [r7, #36]	; 0x24
 800d186:	e009      	b.n	800d19c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d006      	beq.n	800d19c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800d192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d194:	2b00      	cmp	r3, #0
 800d196:	d101      	bne.n	800d19c <osMessageGet+0x5c>
      ticks = 1;
 800d198:	2301      	movs	r3, #1
 800d19a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800d19c:	f7ff fed1 	bl	800cf42 <inHandlerMode>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d01c      	beq.n	800d1e0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800d1a6:	f107 0220 	add.w	r2, r7, #32
 800d1aa:	f107 0314 	add.w	r3, r7, #20
 800d1ae:	3304      	adds	r3, #4
 800d1b0:	4619      	mov	r1, r3
 800d1b2:	68b8      	ldr	r0, [r7, #8]
 800d1b4:	f000 fe56 	bl	800de64 <xQueueReceiveFromISR>
 800d1b8:	4603      	mov	r3, r0
 800d1ba:	2b01      	cmp	r3, #1
 800d1bc:	d102      	bne.n	800d1c4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800d1be:	2310      	movs	r3, #16
 800d1c0:	617b      	str	r3, [r7, #20]
 800d1c2:	e001      	b.n	800d1c8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d1c8:	6a3b      	ldr	r3, [r7, #32]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d01d      	beq.n	800d20a <osMessageGet+0xca>
 800d1ce:	4b15      	ldr	r3, [pc, #84]	; (800d224 <osMessageGet+0xe4>)
 800d1d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1d4:	601a      	str	r2, [r3, #0]
 800d1d6:	f3bf 8f4f 	dsb	sy
 800d1da:	f3bf 8f6f 	isb	sy
 800d1de:	e014      	b.n	800d20a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800d1e0:	f107 0314 	add.w	r3, r7, #20
 800d1e4:	3304      	adds	r3, #4
 800d1e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1e8:	4619      	mov	r1, r3
 800d1ea:	68b8      	ldr	r0, [r7, #8]
 800d1ec:	f000 fc48 	bl	800da80 <xQueueReceive>
 800d1f0:	4603      	mov	r3, r0
 800d1f2:	2b01      	cmp	r3, #1
 800d1f4:	d102      	bne.n	800d1fc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800d1f6:	2310      	movs	r3, #16
 800d1f8:	617b      	str	r3, [r7, #20]
 800d1fa:	e006      	b.n	800d20a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800d1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d101      	bne.n	800d206 <osMessageGet+0xc6>
 800d202:	2300      	movs	r3, #0
 800d204:	e000      	b.n	800d208 <osMessageGet+0xc8>
 800d206:	2340      	movs	r3, #64	; 0x40
 800d208:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	461c      	mov	r4, r3
 800d20e:	f107 0314 	add.w	r3, r7, #20
 800d212:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d216:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800d21a:	68f8      	ldr	r0, [r7, #12]
 800d21c:	372c      	adds	r7, #44	; 0x2c
 800d21e:	46bd      	mov	sp, r7
 800d220:	bd90      	pop	{r4, r7, pc}
 800d222:	bf00      	nop
 800d224:	e000ed04 	.word	0xe000ed04

0800d228 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d228:	b480      	push	{r7}
 800d22a:	b083      	sub	sp, #12
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	f103 0208 	add.w	r2, r3, #8
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	f04f 32ff 	mov.w	r2, #4294967295
 800d240:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	f103 0208 	add.w	r2, r3, #8
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	f103 0208 	add.w	r2, r3, #8
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	2200      	movs	r2, #0
 800d25a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d25c:	bf00      	nop
 800d25e:	370c      	adds	r7, #12
 800d260:	46bd      	mov	sp, r7
 800d262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d266:	4770      	bx	lr

0800d268 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d268:	b480      	push	{r7}
 800d26a:	b083      	sub	sp, #12
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	2200      	movs	r2, #0
 800d274:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d276:	bf00      	nop
 800d278:	370c      	adds	r7, #12
 800d27a:	46bd      	mov	sp, r7
 800d27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d280:	4770      	bx	lr

0800d282 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d282:	b480      	push	{r7}
 800d284:	b085      	sub	sp, #20
 800d286:	af00      	add	r7, sp, #0
 800d288:	6078      	str	r0, [r7, #4]
 800d28a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	685b      	ldr	r3, [r3, #4]
 800d290:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	68fa      	ldr	r2, [r7, #12]
 800d296:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	689a      	ldr	r2, [r3, #8]
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	689b      	ldr	r3, [r3, #8]
 800d2a4:	683a      	ldr	r2, [r7, #0]
 800d2a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	683a      	ldr	r2, [r7, #0]
 800d2ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	687a      	ldr	r2, [r7, #4]
 800d2b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	1c5a      	adds	r2, r3, #1
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	601a      	str	r2, [r3, #0]
}
 800d2be:	bf00      	nop
 800d2c0:	3714      	adds	r7, #20
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c8:	4770      	bx	lr

0800d2ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d2ca:	b480      	push	{r7}
 800d2cc:	b085      	sub	sp, #20
 800d2ce:	af00      	add	r7, sp, #0
 800d2d0:	6078      	str	r0, [r7, #4]
 800d2d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d2d4:	683b      	ldr	r3, [r7, #0]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d2da:	68bb      	ldr	r3, [r7, #8]
 800d2dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2e0:	d103      	bne.n	800d2ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	691b      	ldr	r3, [r3, #16]
 800d2e6:	60fb      	str	r3, [r7, #12]
 800d2e8:	e00c      	b.n	800d304 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	3308      	adds	r3, #8
 800d2ee:	60fb      	str	r3, [r7, #12]
 800d2f0:	e002      	b.n	800d2f8 <vListInsert+0x2e>
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	685b      	ldr	r3, [r3, #4]
 800d2f6:	60fb      	str	r3, [r7, #12]
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	685b      	ldr	r3, [r3, #4]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	68ba      	ldr	r2, [r7, #8]
 800d300:	429a      	cmp	r2, r3
 800d302:	d2f6      	bcs.n	800d2f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	685a      	ldr	r2, [r3, #4]
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	685b      	ldr	r3, [r3, #4]
 800d310:	683a      	ldr	r2, [r7, #0]
 800d312:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d314:	683b      	ldr	r3, [r7, #0]
 800d316:	68fa      	ldr	r2, [r7, #12]
 800d318:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	683a      	ldr	r2, [r7, #0]
 800d31e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	687a      	ldr	r2, [r7, #4]
 800d324:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	1c5a      	adds	r2, r3, #1
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	601a      	str	r2, [r3, #0]
}
 800d330:	bf00      	nop
 800d332:	3714      	adds	r7, #20
 800d334:	46bd      	mov	sp, r7
 800d336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33a:	4770      	bx	lr

0800d33c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d33c:	b480      	push	{r7}
 800d33e:	b085      	sub	sp, #20
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	691b      	ldr	r3, [r3, #16]
 800d348:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	685b      	ldr	r3, [r3, #4]
 800d34e:	687a      	ldr	r2, [r7, #4]
 800d350:	6892      	ldr	r2, [r2, #8]
 800d352:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	689b      	ldr	r3, [r3, #8]
 800d358:	687a      	ldr	r2, [r7, #4]
 800d35a:	6852      	ldr	r2, [r2, #4]
 800d35c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	685b      	ldr	r3, [r3, #4]
 800d362:	687a      	ldr	r2, [r7, #4]
 800d364:	429a      	cmp	r2, r3
 800d366:	d103      	bne.n	800d370 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	689a      	ldr	r2, [r3, #8]
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	2200      	movs	r2, #0
 800d374:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	1e5a      	subs	r2, r3, #1
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	681b      	ldr	r3, [r3, #0]
}
 800d384:	4618      	mov	r0, r3
 800d386:	3714      	adds	r7, #20
 800d388:	46bd      	mov	sp, r7
 800d38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38e:	4770      	bx	lr

0800d390 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b084      	sub	sp, #16
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
 800d398:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d10b      	bne.n	800d3bc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d3a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3a8:	b672      	cpsid	i
 800d3aa:	f383 8811 	msr	BASEPRI, r3
 800d3ae:	f3bf 8f6f 	isb	sy
 800d3b2:	f3bf 8f4f 	dsb	sy
 800d3b6:	b662      	cpsie	i
 800d3b8:	60bb      	str	r3, [r7, #8]
 800d3ba:	e7fe      	b.n	800d3ba <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800d3bc:	f002 f86c 	bl	800f498 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	681a      	ldr	r2, [r3, #0]
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3c8:	68f9      	ldr	r1, [r7, #12]
 800d3ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d3cc:	fb01 f303 	mul.w	r3, r1, r3
 800d3d0:	441a      	add	r2, r3
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	2200      	movs	r2, #0
 800d3da:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	681a      	ldr	r2, [r3, #0]
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	681a      	ldr	r2, [r3, #0]
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3ec:	3b01      	subs	r3, #1
 800d3ee:	68f9      	ldr	r1, [r7, #12]
 800d3f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d3f2:	fb01 f303 	mul.w	r3, r1, r3
 800d3f6:	441a      	add	r2, r3
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	22ff      	movs	r2, #255	; 0xff
 800d400:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	22ff      	movs	r2, #255	; 0xff
 800d408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d40c:	683b      	ldr	r3, [r7, #0]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d114      	bne.n	800d43c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	691b      	ldr	r3, [r3, #16]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d01a      	beq.n	800d450 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	3310      	adds	r3, #16
 800d41e:	4618      	mov	r0, r3
 800d420:	f001 fb36 	bl	800ea90 <xTaskRemoveFromEventList>
 800d424:	4603      	mov	r3, r0
 800d426:	2b00      	cmp	r3, #0
 800d428:	d012      	beq.n	800d450 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d42a:	4b0d      	ldr	r3, [pc, #52]	; (800d460 <xQueueGenericReset+0xd0>)
 800d42c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d430:	601a      	str	r2, [r3, #0]
 800d432:	f3bf 8f4f 	dsb	sy
 800d436:	f3bf 8f6f 	isb	sy
 800d43a:	e009      	b.n	800d450 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	3310      	adds	r3, #16
 800d440:	4618      	mov	r0, r3
 800d442:	f7ff fef1 	bl	800d228 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	3324      	adds	r3, #36	; 0x24
 800d44a:	4618      	mov	r0, r3
 800d44c:	f7ff feec 	bl	800d228 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d450:	f002 f854 	bl	800f4fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d454:	2301      	movs	r3, #1
}
 800d456:	4618      	mov	r0, r3
 800d458:	3710      	adds	r7, #16
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd80      	pop	{r7, pc}
 800d45e:	bf00      	nop
 800d460:	e000ed04 	.word	0xe000ed04

0800d464 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d464:	b580      	push	{r7, lr}
 800d466:	b08e      	sub	sp, #56	; 0x38
 800d468:	af02      	add	r7, sp, #8
 800d46a:	60f8      	str	r0, [r7, #12]
 800d46c:	60b9      	str	r1, [r7, #8]
 800d46e:	607a      	str	r2, [r7, #4]
 800d470:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d10b      	bne.n	800d490 <xQueueGenericCreateStatic+0x2c>
 800d478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d47c:	b672      	cpsid	i
 800d47e:	f383 8811 	msr	BASEPRI, r3
 800d482:	f3bf 8f6f 	isb	sy
 800d486:	f3bf 8f4f 	dsb	sy
 800d48a:	b662      	cpsie	i
 800d48c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d48e:	e7fe      	b.n	800d48e <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d10b      	bne.n	800d4ae <xQueueGenericCreateStatic+0x4a>
 800d496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d49a:	b672      	cpsid	i
 800d49c:	f383 8811 	msr	BASEPRI, r3
 800d4a0:	f3bf 8f6f 	isb	sy
 800d4a4:	f3bf 8f4f 	dsb	sy
 800d4a8:	b662      	cpsie	i
 800d4aa:	627b      	str	r3, [r7, #36]	; 0x24
 800d4ac:	e7fe      	b.n	800d4ac <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d002      	beq.n	800d4ba <xQueueGenericCreateStatic+0x56>
 800d4b4:	68bb      	ldr	r3, [r7, #8]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d001      	beq.n	800d4be <xQueueGenericCreateStatic+0x5a>
 800d4ba:	2301      	movs	r3, #1
 800d4bc:	e000      	b.n	800d4c0 <xQueueGenericCreateStatic+0x5c>
 800d4be:	2300      	movs	r3, #0
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d10b      	bne.n	800d4dc <xQueueGenericCreateStatic+0x78>
 800d4c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4c8:	b672      	cpsid	i
 800d4ca:	f383 8811 	msr	BASEPRI, r3
 800d4ce:	f3bf 8f6f 	isb	sy
 800d4d2:	f3bf 8f4f 	dsb	sy
 800d4d6:	b662      	cpsie	i
 800d4d8:	623b      	str	r3, [r7, #32]
 800d4da:	e7fe      	b.n	800d4da <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d102      	bne.n	800d4e8 <xQueueGenericCreateStatic+0x84>
 800d4e2:	68bb      	ldr	r3, [r7, #8]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d101      	bne.n	800d4ec <xQueueGenericCreateStatic+0x88>
 800d4e8:	2301      	movs	r3, #1
 800d4ea:	e000      	b.n	800d4ee <xQueueGenericCreateStatic+0x8a>
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d10b      	bne.n	800d50a <xQueueGenericCreateStatic+0xa6>
 800d4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f6:	b672      	cpsid	i
 800d4f8:	f383 8811 	msr	BASEPRI, r3
 800d4fc:	f3bf 8f6f 	isb	sy
 800d500:	f3bf 8f4f 	dsb	sy
 800d504:	b662      	cpsie	i
 800d506:	61fb      	str	r3, [r7, #28]
 800d508:	e7fe      	b.n	800d508 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d50a:	2348      	movs	r3, #72	; 0x48
 800d50c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d50e:	697b      	ldr	r3, [r7, #20]
 800d510:	2b48      	cmp	r3, #72	; 0x48
 800d512:	d00b      	beq.n	800d52c <xQueueGenericCreateStatic+0xc8>
 800d514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d518:	b672      	cpsid	i
 800d51a:	f383 8811 	msr	BASEPRI, r3
 800d51e:	f3bf 8f6f 	isb	sy
 800d522:	f3bf 8f4f 	dsb	sy
 800d526:	b662      	cpsie	i
 800d528:	61bb      	str	r3, [r7, #24]
 800d52a:	e7fe      	b.n	800d52a <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d52c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d52e:	683b      	ldr	r3, [r7, #0]
 800d530:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d534:	2b00      	cmp	r3, #0
 800d536:	d00d      	beq.n	800d554 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d53a:	2201      	movs	r2, #1
 800d53c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d540:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d546:	9300      	str	r3, [sp, #0]
 800d548:	4613      	mov	r3, r2
 800d54a:	687a      	ldr	r2, [r7, #4]
 800d54c:	68b9      	ldr	r1, [r7, #8]
 800d54e:	68f8      	ldr	r0, [r7, #12]
 800d550:	f000 f846 	bl	800d5e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d556:	4618      	mov	r0, r3
 800d558:	3730      	adds	r7, #48	; 0x30
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bd80      	pop	{r7, pc}

0800d55e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d55e:	b580      	push	{r7, lr}
 800d560:	b08a      	sub	sp, #40	; 0x28
 800d562:	af02      	add	r7, sp, #8
 800d564:	60f8      	str	r0, [r7, #12]
 800d566:	60b9      	str	r1, [r7, #8]
 800d568:	4613      	mov	r3, r2
 800d56a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d10b      	bne.n	800d58a <xQueueGenericCreate+0x2c>
 800d572:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d576:	b672      	cpsid	i
 800d578:	f383 8811 	msr	BASEPRI, r3
 800d57c:	f3bf 8f6f 	isb	sy
 800d580:	f3bf 8f4f 	dsb	sy
 800d584:	b662      	cpsie	i
 800d586:	613b      	str	r3, [r7, #16]
 800d588:	e7fe      	b.n	800d588 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800d58a:	68bb      	ldr	r3, [r7, #8]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d102      	bne.n	800d596 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800d590:	2300      	movs	r3, #0
 800d592:	61fb      	str	r3, [r7, #28]
 800d594:	e004      	b.n	800d5a0 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	68ba      	ldr	r2, [r7, #8]
 800d59a:	fb02 f303 	mul.w	r3, r2, r3
 800d59e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d5a0:	69fb      	ldr	r3, [r7, #28]
 800d5a2:	3348      	adds	r3, #72	; 0x48
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	f002 f899 	bl	800f6dc <pvPortMalloc>
 800d5aa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d5ac:	69bb      	ldr	r3, [r7, #24]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d011      	beq.n	800d5d6 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d5b2:	69bb      	ldr	r3, [r7, #24]
 800d5b4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d5b6:	697b      	ldr	r3, [r7, #20]
 800d5b8:	3348      	adds	r3, #72	; 0x48
 800d5ba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d5bc:	69bb      	ldr	r3, [r7, #24]
 800d5be:	2200      	movs	r2, #0
 800d5c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d5c4:	79fa      	ldrb	r2, [r7, #7]
 800d5c6:	69bb      	ldr	r3, [r7, #24]
 800d5c8:	9300      	str	r3, [sp, #0]
 800d5ca:	4613      	mov	r3, r2
 800d5cc:	697a      	ldr	r2, [r7, #20]
 800d5ce:	68b9      	ldr	r1, [r7, #8]
 800d5d0:	68f8      	ldr	r0, [r7, #12]
 800d5d2:	f000 f805 	bl	800d5e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d5d6:	69bb      	ldr	r3, [r7, #24]
	}
 800d5d8:	4618      	mov	r0, r3
 800d5da:	3720      	adds	r7, #32
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}

0800d5e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b084      	sub	sp, #16
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	60f8      	str	r0, [r7, #12]
 800d5e8:	60b9      	str	r1, [r7, #8]
 800d5ea:	607a      	str	r2, [r7, #4]
 800d5ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d5ee:	68bb      	ldr	r3, [r7, #8]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d103      	bne.n	800d5fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d5f4:	69bb      	ldr	r3, [r7, #24]
 800d5f6:	69ba      	ldr	r2, [r7, #24]
 800d5f8:	601a      	str	r2, [r3, #0]
 800d5fa:	e002      	b.n	800d602 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d5fc:	69bb      	ldr	r3, [r7, #24]
 800d5fe:	687a      	ldr	r2, [r7, #4]
 800d600:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d602:	69bb      	ldr	r3, [r7, #24]
 800d604:	68fa      	ldr	r2, [r7, #12]
 800d606:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d608:	69bb      	ldr	r3, [r7, #24]
 800d60a:	68ba      	ldr	r2, [r7, #8]
 800d60c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d60e:	2101      	movs	r1, #1
 800d610:	69b8      	ldr	r0, [r7, #24]
 800d612:	f7ff febd 	bl	800d390 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d616:	bf00      	nop
 800d618:	3710      	adds	r7, #16
 800d61a:	46bd      	mov	sp, r7
 800d61c:	bd80      	pop	{r7, pc}
	...

0800d620 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b08e      	sub	sp, #56	; 0x38
 800d624:	af00      	add	r7, sp, #0
 800d626:	60f8      	str	r0, [r7, #12]
 800d628:	60b9      	str	r1, [r7, #8]
 800d62a:	607a      	str	r2, [r7, #4]
 800d62c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d62e:	2300      	movs	r3, #0
 800d630:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d10b      	bne.n	800d654 <xQueueGenericSend+0x34>
 800d63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d640:	b672      	cpsid	i
 800d642:	f383 8811 	msr	BASEPRI, r3
 800d646:	f3bf 8f6f 	isb	sy
 800d64a:	f3bf 8f4f 	dsb	sy
 800d64e:	b662      	cpsie	i
 800d650:	62bb      	str	r3, [r7, #40]	; 0x28
 800d652:	e7fe      	b.n	800d652 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d654:	68bb      	ldr	r3, [r7, #8]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d103      	bne.n	800d662 <xQueueGenericSend+0x42>
 800d65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d65c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d101      	bne.n	800d666 <xQueueGenericSend+0x46>
 800d662:	2301      	movs	r3, #1
 800d664:	e000      	b.n	800d668 <xQueueGenericSend+0x48>
 800d666:	2300      	movs	r3, #0
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d10b      	bne.n	800d684 <xQueueGenericSend+0x64>
 800d66c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d670:	b672      	cpsid	i
 800d672:	f383 8811 	msr	BASEPRI, r3
 800d676:	f3bf 8f6f 	isb	sy
 800d67a:	f3bf 8f4f 	dsb	sy
 800d67e:	b662      	cpsie	i
 800d680:	627b      	str	r3, [r7, #36]	; 0x24
 800d682:	e7fe      	b.n	800d682 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d684:	683b      	ldr	r3, [r7, #0]
 800d686:	2b02      	cmp	r3, #2
 800d688:	d103      	bne.n	800d692 <xQueueGenericSend+0x72>
 800d68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d68c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d68e:	2b01      	cmp	r3, #1
 800d690:	d101      	bne.n	800d696 <xQueueGenericSend+0x76>
 800d692:	2301      	movs	r3, #1
 800d694:	e000      	b.n	800d698 <xQueueGenericSend+0x78>
 800d696:	2300      	movs	r3, #0
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d10b      	bne.n	800d6b4 <xQueueGenericSend+0x94>
 800d69c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6a0:	b672      	cpsid	i
 800d6a2:	f383 8811 	msr	BASEPRI, r3
 800d6a6:	f3bf 8f6f 	isb	sy
 800d6aa:	f3bf 8f4f 	dsb	sy
 800d6ae:	b662      	cpsie	i
 800d6b0:	623b      	str	r3, [r7, #32]
 800d6b2:	e7fe      	b.n	800d6b2 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d6b4:	f001 fbac 	bl	800ee10 <xTaskGetSchedulerState>
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d102      	bne.n	800d6c4 <xQueueGenericSend+0xa4>
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d101      	bne.n	800d6c8 <xQueueGenericSend+0xa8>
 800d6c4:	2301      	movs	r3, #1
 800d6c6:	e000      	b.n	800d6ca <xQueueGenericSend+0xaa>
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d10b      	bne.n	800d6e6 <xQueueGenericSend+0xc6>
 800d6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6d2:	b672      	cpsid	i
 800d6d4:	f383 8811 	msr	BASEPRI, r3
 800d6d8:	f3bf 8f6f 	isb	sy
 800d6dc:	f3bf 8f4f 	dsb	sy
 800d6e0:	b662      	cpsie	i
 800d6e2:	61fb      	str	r3, [r7, #28]
 800d6e4:	e7fe      	b.n	800d6e4 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d6e6:	f001 fed7 	bl	800f498 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d6ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6f2:	429a      	cmp	r2, r3
 800d6f4:	d302      	bcc.n	800d6fc <xQueueGenericSend+0xdc>
 800d6f6:	683b      	ldr	r3, [r7, #0]
 800d6f8:	2b02      	cmp	r3, #2
 800d6fa:	d129      	bne.n	800d750 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d6fc:	683a      	ldr	r2, [r7, #0]
 800d6fe:	68b9      	ldr	r1, [r7, #8]
 800d700:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d702:	f000 fc4a 	bl	800df9a <prvCopyDataToQueue>
 800d706:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d70a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d010      	beq.n	800d732 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d712:	3324      	adds	r3, #36	; 0x24
 800d714:	4618      	mov	r0, r3
 800d716:	f001 f9bb 	bl	800ea90 <xTaskRemoveFromEventList>
 800d71a:	4603      	mov	r3, r0
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d013      	beq.n	800d748 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d720:	4b3f      	ldr	r3, [pc, #252]	; (800d820 <xQueueGenericSend+0x200>)
 800d722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d726:	601a      	str	r2, [r3, #0]
 800d728:	f3bf 8f4f 	dsb	sy
 800d72c:	f3bf 8f6f 	isb	sy
 800d730:	e00a      	b.n	800d748 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d734:	2b00      	cmp	r3, #0
 800d736:	d007      	beq.n	800d748 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d738:	4b39      	ldr	r3, [pc, #228]	; (800d820 <xQueueGenericSend+0x200>)
 800d73a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d73e:	601a      	str	r2, [r3, #0]
 800d740:	f3bf 8f4f 	dsb	sy
 800d744:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d748:	f001 fed8 	bl	800f4fc <vPortExitCritical>
				return pdPASS;
 800d74c:	2301      	movs	r3, #1
 800d74e:	e063      	b.n	800d818 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d103      	bne.n	800d75e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d756:	f001 fed1 	bl	800f4fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d75a:	2300      	movs	r3, #0
 800d75c:	e05c      	b.n	800d818 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d75e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d760:	2b00      	cmp	r3, #0
 800d762:	d106      	bne.n	800d772 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d764:	f107 0314 	add.w	r3, r7, #20
 800d768:	4618      	mov	r0, r3
 800d76a:	f001 f9f5 	bl	800eb58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d76e:	2301      	movs	r3, #1
 800d770:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d772:	f001 fec3 	bl	800f4fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d776:	f000 ff5b 	bl	800e630 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d77a:	f001 fe8d 	bl	800f498 <vPortEnterCritical>
 800d77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d780:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d784:	b25b      	sxtb	r3, r3
 800d786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d78a:	d103      	bne.n	800d794 <xQueueGenericSend+0x174>
 800d78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d78e:	2200      	movs	r2, #0
 800d790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d796:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d79a:	b25b      	sxtb	r3, r3
 800d79c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7a0:	d103      	bne.n	800d7aa <xQueueGenericSend+0x18a>
 800d7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d7aa:	f001 fea7 	bl	800f4fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d7ae:	1d3a      	adds	r2, r7, #4
 800d7b0:	f107 0314 	add.w	r3, r7, #20
 800d7b4:	4611      	mov	r1, r2
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	f001 f9e4 	bl	800eb84 <xTaskCheckForTimeOut>
 800d7bc:	4603      	mov	r3, r0
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d124      	bne.n	800d80c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d7c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d7c4:	f000 fce1 	bl	800e18a <prvIsQueueFull>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d018      	beq.n	800d800 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7d0:	3310      	adds	r3, #16
 800d7d2:	687a      	ldr	r2, [r7, #4]
 800d7d4:	4611      	mov	r1, r2
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	f001 f934 	bl	800ea44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d7dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d7de:	f000 fc6c 	bl	800e0ba <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d7e2:	f000 ff33 	bl	800e64c <xTaskResumeAll>
 800d7e6:	4603      	mov	r3, r0
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	f47f af7c 	bne.w	800d6e6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d7ee:	4b0c      	ldr	r3, [pc, #48]	; (800d820 <xQueueGenericSend+0x200>)
 800d7f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7f4:	601a      	str	r2, [r3, #0]
 800d7f6:	f3bf 8f4f 	dsb	sy
 800d7fa:	f3bf 8f6f 	isb	sy
 800d7fe:	e772      	b.n	800d6e6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d800:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d802:	f000 fc5a 	bl	800e0ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d806:	f000 ff21 	bl	800e64c <xTaskResumeAll>
 800d80a:	e76c      	b.n	800d6e6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d80c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d80e:	f000 fc54 	bl	800e0ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d812:	f000 ff1b 	bl	800e64c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d816:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d818:	4618      	mov	r0, r3
 800d81a:	3738      	adds	r7, #56	; 0x38
 800d81c:	46bd      	mov	sp, r7
 800d81e:	bd80      	pop	{r7, pc}
 800d820:	e000ed04 	.word	0xe000ed04

0800d824 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b08e      	sub	sp, #56	; 0x38
 800d828:	af00      	add	r7, sp, #0
 800d82a:	60f8      	str	r0, [r7, #12]
 800d82c:	60b9      	str	r1, [r7, #8]
 800d82e:	607a      	str	r2, [r7, #4]
 800d830:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d10b      	bne.n	800d854 <xQueueGenericSendFromISR+0x30>
 800d83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d840:	b672      	cpsid	i
 800d842:	f383 8811 	msr	BASEPRI, r3
 800d846:	f3bf 8f6f 	isb	sy
 800d84a:	f3bf 8f4f 	dsb	sy
 800d84e:	b662      	cpsie	i
 800d850:	627b      	str	r3, [r7, #36]	; 0x24
 800d852:	e7fe      	b.n	800d852 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d854:	68bb      	ldr	r3, [r7, #8]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d103      	bne.n	800d862 <xQueueGenericSendFromISR+0x3e>
 800d85a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d85c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d101      	bne.n	800d866 <xQueueGenericSendFromISR+0x42>
 800d862:	2301      	movs	r3, #1
 800d864:	e000      	b.n	800d868 <xQueueGenericSendFromISR+0x44>
 800d866:	2300      	movs	r3, #0
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d10b      	bne.n	800d884 <xQueueGenericSendFromISR+0x60>
 800d86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d870:	b672      	cpsid	i
 800d872:	f383 8811 	msr	BASEPRI, r3
 800d876:	f3bf 8f6f 	isb	sy
 800d87a:	f3bf 8f4f 	dsb	sy
 800d87e:	b662      	cpsie	i
 800d880:	623b      	str	r3, [r7, #32]
 800d882:	e7fe      	b.n	800d882 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	2b02      	cmp	r3, #2
 800d888:	d103      	bne.n	800d892 <xQueueGenericSendFromISR+0x6e>
 800d88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d88c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d88e:	2b01      	cmp	r3, #1
 800d890:	d101      	bne.n	800d896 <xQueueGenericSendFromISR+0x72>
 800d892:	2301      	movs	r3, #1
 800d894:	e000      	b.n	800d898 <xQueueGenericSendFromISR+0x74>
 800d896:	2300      	movs	r3, #0
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d10b      	bne.n	800d8b4 <xQueueGenericSendFromISR+0x90>
 800d89c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8a0:	b672      	cpsid	i
 800d8a2:	f383 8811 	msr	BASEPRI, r3
 800d8a6:	f3bf 8f6f 	isb	sy
 800d8aa:	f3bf 8f4f 	dsb	sy
 800d8ae:	b662      	cpsie	i
 800d8b0:	61fb      	str	r3, [r7, #28]
 800d8b2:	e7fe      	b.n	800d8b2 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d8b4:	f001 fed0 	bl	800f658 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d8b8:	f3ef 8211 	mrs	r2, BASEPRI
 800d8bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8c0:	b672      	cpsid	i
 800d8c2:	f383 8811 	msr	BASEPRI, r3
 800d8c6:	f3bf 8f6f 	isb	sy
 800d8ca:	f3bf 8f4f 	dsb	sy
 800d8ce:	b662      	cpsie	i
 800d8d0:	61ba      	str	r2, [r7, #24]
 800d8d2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d8d4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d8d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d8d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d8dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8e0:	429a      	cmp	r2, r3
 800d8e2:	d302      	bcc.n	800d8ea <xQueueGenericSendFromISR+0xc6>
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	2b02      	cmp	r3, #2
 800d8e8:	d12c      	bne.n	800d944 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d8f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d8f4:	683a      	ldr	r2, [r7, #0]
 800d8f6:	68b9      	ldr	r1, [r7, #8]
 800d8f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d8fa:	f000 fb4e 	bl	800df9a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d8fe:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800d902:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d906:	d112      	bne.n	800d92e <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d90a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d016      	beq.n	800d93e <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d912:	3324      	adds	r3, #36	; 0x24
 800d914:	4618      	mov	r0, r3
 800d916:	f001 f8bb 	bl	800ea90 <xTaskRemoveFromEventList>
 800d91a:	4603      	mov	r3, r0
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d00e      	beq.n	800d93e <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d00b      	beq.n	800d93e <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	2201      	movs	r2, #1
 800d92a:	601a      	str	r2, [r3, #0]
 800d92c:	e007      	b.n	800d93e <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d92e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d932:	3301      	adds	r3, #1
 800d934:	b2db      	uxtb	r3, r3
 800d936:	b25a      	sxtb	r2, r3
 800d938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d93a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d93e:	2301      	movs	r3, #1
 800d940:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800d942:	e001      	b.n	800d948 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d944:	2300      	movs	r3, #0
 800d946:	637b      	str	r3, [r7, #52]	; 0x34
 800d948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d94a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d94c:	693b      	ldr	r3, [r7, #16]
 800d94e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d954:	4618      	mov	r0, r3
 800d956:	3738      	adds	r7, #56	; 0x38
 800d958:	46bd      	mov	sp, r7
 800d95a:	bd80      	pop	{r7, pc}

0800d95c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b08e      	sub	sp, #56	; 0x38
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
 800d964:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d10b      	bne.n	800d988 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800d970:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d974:	b672      	cpsid	i
 800d976:	f383 8811 	msr	BASEPRI, r3
 800d97a:	f3bf 8f6f 	isb	sy
 800d97e:	f3bf 8f4f 	dsb	sy
 800d982:	b662      	cpsie	i
 800d984:	623b      	str	r3, [r7, #32]
 800d986:	e7fe      	b.n	800d986 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d98a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d00b      	beq.n	800d9a8 <xQueueGiveFromISR+0x4c>
 800d990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d994:	b672      	cpsid	i
 800d996:	f383 8811 	msr	BASEPRI, r3
 800d99a:	f3bf 8f6f 	isb	sy
 800d99e:	f3bf 8f4f 	dsb	sy
 800d9a2:	b662      	cpsie	i
 800d9a4:	61fb      	str	r3, [r7, #28]
 800d9a6:	e7fe      	b.n	800d9a6 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d9a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d103      	bne.n	800d9b8 <xQueueGiveFromISR+0x5c>
 800d9b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9b2:	689b      	ldr	r3, [r3, #8]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d101      	bne.n	800d9bc <xQueueGiveFromISR+0x60>
 800d9b8:	2301      	movs	r3, #1
 800d9ba:	e000      	b.n	800d9be <xQueueGiveFromISR+0x62>
 800d9bc:	2300      	movs	r3, #0
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d10b      	bne.n	800d9da <xQueueGiveFromISR+0x7e>
 800d9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9c6:	b672      	cpsid	i
 800d9c8:	f383 8811 	msr	BASEPRI, r3
 800d9cc:	f3bf 8f6f 	isb	sy
 800d9d0:	f3bf 8f4f 	dsb	sy
 800d9d4:	b662      	cpsie	i
 800d9d6:	61bb      	str	r3, [r7, #24]
 800d9d8:	e7fe      	b.n	800d9d8 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d9da:	f001 fe3d 	bl	800f658 <vPortValidateInterruptPriority>
	__asm volatile
 800d9de:	f3ef 8211 	mrs	r2, BASEPRI
 800d9e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9e6:	b672      	cpsid	i
 800d9e8:	f383 8811 	msr	BASEPRI, r3
 800d9ec:	f3bf 8f6f 	isb	sy
 800d9f0:	f3bf 8f4f 	dsb	sy
 800d9f4:	b662      	cpsie	i
 800d9f6:	617a      	str	r2, [r7, #20]
 800d9f8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d9fa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d9fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da02:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800da04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da0a:	429a      	cmp	r2, r3
 800da0c:	d22b      	bcs.n	800da66 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800da0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800da14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800da18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da1a:	1c5a      	adds	r2, r3, #1
 800da1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da1e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800da20:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800da24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da28:	d112      	bne.n	800da50 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800da2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d016      	beq.n	800da60 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800da32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da34:	3324      	adds	r3, #36	; 0x24
 800da36:	4618      	mov	r0, r3
 800da38:	f001 f82a 	bl	800ea90 <xTaskRemoveFromEventList>
 800da3c:	4603      	mov	r3, r0
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d00e      	beq.n	800da60 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800da42:	683b      	ldr	r3, [r7, #0]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d00b      	beq.n	800da60 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800da48:	683b      	ldr	r3, [r7, #0]
 800da4a:	2201      	movs	r2, #1
 800da4c:	601a      	str	r2, [r3, #0]
 800da4e:	e007      	b.n	800da60 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800da50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da54:	3301      	adds	r3, #1
 800da56:	b2db      	uxtb	r3, r3
 800da58:	b25a      	sxtb	r2, r3
 800da5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800da60:	2301      	movs	r3, #1
 800da62:	637b      	str	r3, [r7, #52]	; 0x34
 800da64:	e001      	b.n	800da6a <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800da66:	2300      	movs	r3, #0
 800da68:	637b      	str	r3, [r7, #52]	; 0x34
 800da6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da6c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800da74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800da76:	4618      	mov	r0, r3
 800da78:	3738      	adds	r7, #56	; 0x38
 800da7a:	46bd      	mov	sp, r7
 800da7c:	bd80      	pop	{r7, pc}
	...

0800da80 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800da80:	b580      	push	{r7, lr}
 800da82:	b08c      	sub	sp, #48	; 0x30
 800da84:	af00      	add	r7, sp, #0
 800da86:	60f8      	str	r0, [r7, #12]
 800da88:	60b9      	str	r1, [r7, #8]
 800da8a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800da8c:	2300      	movs	r3, #0
 800da8e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800da94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da96:	2b00      	cmp	r3, #0
 800da98:	d10b      	bne.n	800dab2 <xQueueReceive+0x32>
	__asm volatile
 800da9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da9e:	b672      	cpsid	i
 800daa0:	f383 8811 	msr	BASEPRI, r3
 800daa4:	f3bf 8f6f 	isb	sy
 800daa8:	f3bf 8f4f 	dsb	sy
 800daac:	b662      	cpsie	i
 800daae:	623b      	str	r3, [r7, #32]
 800dab0:	e7fe      	b.n	800dab0 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dab2:	68bb      	ldr	r3, [r7, #8]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d103      	bne.n	800dac0 <xQueueReceive+0x40>
 800dab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d101      	bne.n	800dac4 <xQueueReceive+0x44>
 800dac0:	2301      	movs	r3, #1
 800dac2:	e000      	b.n	800dac6 <xQueueReceive+0x46>
 800dac4:	2300      	movs	r3, #0
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d10b      	bne.n	800dae2 <xQueueReceive+0x62>
 800daca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dace:	b672      	cpsid	i
 800dad0:	f383 8811 	msr	BASEPRI, r3
 800dad4:	f3bf 8f6f 	isb	sy
 800dad8:	f3bf 8f4f 	dsb	sy
 800dadc:	b662      	cpsie	i
 800dade:	61fb      	str	r3, [r7, #28]
 800dae0:	e7fe      	b.n	800dae0 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dae2:	f001 f995 	bl	800ee10 <xTaskGetSchedulerState>
 800dae6:	4603      	mov	r3, r0
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d102      	bne.n	800daf2 <xQueueReceive+0x72>
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d101      	bne.n	800daf6 <xQueueReceive+0x76>
 800daf2:	2301      	movs	r3, #1
 800daf4:	e000      	b.n	800daf8 <xQueueReceive+0x78>
 800daf6:	2300      	movs	r3, #0
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d10b      	bne.n	800db14 <xQueueReceive+0x94>
 800dafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db00:	b672      	cpsid	i
 800db02:	f383 8811 	msr	BASEPRI, r3
 800db06:	f3bf 8f6f 	isb	sy
 800db0a:	f3bf 8f4f 	dsb	sy
 800db0e:	b662      	cpsie	i
 800db10:	61bb      	str	r3, [r7, #24]
 800db12:	e7fe      	b.n	800db12 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800db14:	f001 fcc0 	bl	800f498 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800db18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db1c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800db1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db20:	2b00      	cmp	r3, #0
 800db22:	d01f      	beq.n	800db64 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800db24:	68b9      	ldr	r1, [r7, #8]
 800db26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db28:	f000 faa1 	bl	800e06e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800db2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db2e:	1e5a      	subs	r2, r3, #1
 800db30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db32:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800db34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db36:	691b      	ldr	r3, [r3, #16]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d00f      	beq.n	800db5c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800db3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db3e:	3310      	adds	r3, #16
 800db40:	4618      	mov	r0, r3
 800db42:	f000 ffa5 	bl	800ea90 <xTaskRemoveFromEventList>
 800db46:	4603      	mov	r3, r0
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d007      	beq.n	800db5c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800db4c:	4b3c      	ldr	r3, [pc, #240]	; (800dc40 <xQueueReceive+0x1c0>)
 800db4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db52:	601a      	str	r2, [r3, #0]
 800db54:	f3bf 8f4f 	dsb	sy
 800db58:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800db5c:	f001 fcce 	bl	800f4fc <vPortExitCritical>
				return pdPASS;
 800db60:	2301      	movs	r3, #1
 800db62:	e069      	b.n	800dc38 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d103      	bne.n	800db72 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800db6a:	f001 fcc7 	bl	800f4fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800db6e:	2300      	movs	r3, #0
 800db70:	e062      	b.n	800dc38 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800db72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db74:	2b00      	cmp	r3, #0
 800db76:	d106      	bne.n	800db86 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800db78:	f107 0310 	add.w	r3, r7, #16
 800db7c:	4618      	mov	r0, r3
 800db7e:	f000 ffeb 	bl	800eb58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800db82:	2301      	movs	r3, #1
 800db84:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800db86:	f001 fcb9 	bl	800f4fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800db8a:	f000 fd51 	bl	800e630 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800db8e:	f001 fc83 	bl	800f498 <vPortEnterCritical>
 800db92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800db98:	b25b      	sxtb	r3, r3
 800db9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db9e:	d103      	bne.n	800dba8 <xQueueReceive+0x128>
 800dba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dba2:	2200      	movs	r2, #0
 800dba4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbaa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dbae:	b25b      	sxtb	r3, r3
 800dbb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbb4:	d103      	bne.n	800dbbe <xQueueReceive+0x13e>
 800dbb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbb8:	2200      	movs	r2, #0
 800dbba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dbbe:	f001 fc9d 	bl	800f4fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dbc2:	1d3a      	adds	r2, r7, #4
 800dbc4:	f107 0310 	add.w	r3, r7, #16
 800dbc8:	4611      	mov	r1, r2
 800dbca:	4618      	mov	r0, r3
 800dbcc:	f000 ffda 	bl	800eb84 <xTaskCheckForTimeOut>
 800dbd0:	4603      	mov	r3, r0
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d123      	bne.n	800dc1e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dbd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dbd8:	f000 fac1 	bl	800e15e <prvIsQueueEmpty>
 800dbdc:	4603      	mov	r3, r0
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d017      	beq.n	800dc12 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dbe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbe4:	3324      	adds	r3, #36	; 0x24
 800dbe6:	687a      	ldr	r2, [r7, #4]
 800dbe8:	4611      	mov	r1, r2
 800dbea:	4618      	mov	r0, r3
 800dbec:	f000 ff2a 	bl	800ea44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dbf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dbf2:	f000 fa62 	bl	800e0ba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dbf6:	f000 fd29 	bl	800e64c <xTaskResumeAll>
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d189      	bne.n	800db14 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800dc00:	4b0f      	ldr	r3, [pc, #60]	; (800dc40 <xQueueReceive+0x1c0>)
 800dc02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc06:	601a      	str	r2, [r3, #0]
 800dc08:	f3bf 8f4f 	dsb	sy
 800dc0c:	f3bf 8f6f 	isb	sy
 800dc10:	e780      	b.n	800db14 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800dc12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc14:	f000 fa51 	bl	800e0ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dc18:	f000 fd18 	bl	800e64c <xTaskResumeAll>
 800dc1c:	e77a      	b.n	800db14 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800dc1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc20:	f000 fa4b 	bl	800e0ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dc24:	f000 fd12 	bl	800e64c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dc28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc2a:	f000 fa98 	bl	800e15e <prvIsQueueEmpty>
 800dc2e:	4603      	mov	r3, r0
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	f43f af6f 	beq.w	800db14 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dc36:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dc38:	4618      	mov	r0, r3
 800dc3a:	3730      	adds	r7, #48	; 0x30
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	bd80      	pop	{r7, pc}
 800dc40:	e000ed04 	.word	0xe000ed04

0800dc44 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b08e      	sub	sp, #56	; 0x38
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
 800dc4c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800dc4e:	2300      	movs	r3, #0
 800dc50:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800dc56:	2300      	movs	r3, #0
 800dc58:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dc5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d10b      	bne.n	800dc78 <xQueueSemaphoreTake+0x34>
 800dc60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc64:	b672      	cpsid	i
 800dc66:	f383 8811 	msr	BASEPRI, r3
 800dc6a:	f3bf 8f6f 	isb	sy
 800dc6e:	f3bf 8f4f 	dsb	sy
 800dc72:	b662      	cpsie	i
 800dc74:	623b      	str	r3, [r7, #32]
 800dc76:	e7fe      	b.n	800dc76 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800dc78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d00b      	beq.n	800dc98 <xQueueSemaphoreTake+0x54>
 800dc80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc84:	b672      	cpsid	i
 800dc86:	f383 8811 	msr	BASEPRI, r3
 800dc8a:	f3bf 8f6f 	isb	sy
 800dc8e:	f3bf 8f4f 	dsb	sy
 800dc92:	b662      	cpsie	i
 800dc94:	61fb      	str	r3, [r7, #28]
 800dc96:	e7fe      	b.n	800dc96 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dc98:	f001 f8ba 	bl	800ee10 <xTaskGetSchedulerState>
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d102      	bne.n	800dca8 <xQueueSemaphoreTake+0x64>
 800dca2:	683b      	ldr	r3, [r7, #0]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d101      	bne.n	800dcac <xQueueSemaphoreTake+0x68>
 800dca8:	2301      	movs	r3, #1
 800dcaa:	e000      	b.n	800dcae <xQueueSemaphoreTake+0x6a>
 800dcac:	2300      	movs	r3, #0
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d10b      	bne.n	800dcca <xQueueSemaphoreTake+0x86>
 800dcb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcb6:	b672      	cpsid	i
 800dcb8:	f383 8811 	msr	BASEPRI, r3
 800dcbc:	f3bf 8f6f 	isb	sy
 800dcc0:	f3bf 8f4f 	dsb	sy
 800dcc4:	b662      	cpsie	i
 800dcc6:	61bb      	str	r3, [r7, #24]
 800dcc8:	e7fe      	b.n	800dcc8 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dcca:	f001 fbe5 	bl	800f498 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800dcce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcd2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800dcd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d024      	beq.n	800dd24 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800dcda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcdc:	1e5a      	subs	r2, r3, #1
 800dcde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dce0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d104      	bne.n	800dcf4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800dcea:	f001 fa53 	bl	800f194 <pvTaskIncrementMutexHeldCount>
 800dcee:	4602      	mov	r2, r0
 800dcf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcf2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dcf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcf6:	691b      	ldr	r3, [r3, #16]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d00f      	beq.n	800dd1c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dcfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcfe:	3310      	adds	r3, #16
 800dd00:	4618      	mov	r0, r3
 800dd02:	f000 fec5 	bl	800ea90 <xTaskRemoveFromEventList>
 800dd06:	4603      	mov	r3, r0
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d007      	beq.n	800dd1c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dd0c:	4b54      	ldr	r3, [pc, #336]	; (800de60 <xQueueSemaphoreTake+0x21c>)
 800dd0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd12:	601a      	str	r2, [r3, #0]
 800dd14:	f3bf 8f4f 	dsb	sy
 800dd18:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dd1c:	f001 fbee 	bl	800f4fc <vPortExitCritical>
				return pdPASS;
 800dd20:	2301      	movs	r3, #1
 800dd22:	e098      	b.n	800de56 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dd24:	683b      	ldr	r3, [r7, #0]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d112      	bne.n	800dd50 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800dd2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d00b      	beq.n	800dd48 <xQueueSemaphoreTake+0x104>
 800dd30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd34:	b672      	cpsid	i
 800dd36:	f383 8811 	msr	BASEPRI, r3
 800dd3a:	f3bf 8f6f 	isb	sy
 800dd3e:	f3bf 8f4f 	dsb	sy
 800dd42:	b662      	cpsie	i
 800dd44:	617b      	str	r3, [r7, #20]
 800dd46:	e7fe      	b.n	800dd46 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800dd48:	f001 fbd8 	bl	800f4fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	e082      	b.n	800de56 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dd50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d106      	bne.n	800dd64 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dd56:	f107 030c 	add.w	r3, r7, #12
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	f000 fefc 	bl	800eb58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dd60:	2301      	movs	r3, #1
 800dd62:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dd64:	f001 fbca 	bl	800f4fc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dd68:	f000 fc62 	bl	800e630 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dd6c:	f001 fb94 	bl	800f498 <vPortEnterCritical>
 800dd70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dd76:	b25b      	sxtb	r3, r3
 800dd78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd7c:	d103      	bne.n	800dd86 <xQueueSemaphoreTake+0x142>
 800dd7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd80:	2200      	movs	r2, #0
 800dd82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dd86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dd8c:	b25b      	sxtb	r3, r3
 800dd8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd92:	d103      	bne.n	800dd9c <xQueueSemaphoreTake+0x158>
 800dd94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd96:	2200      	movs	r2, #0
 800dd98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dd9c:	f001 fbae 	bl	800f4fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dda0:	463a      	mov	r2, r7
 800dda2:	f107 030c 	add.w	r3, r7, #12
 800dda6:	4611      	mov	r1, r2
 800dda8:	4618      	mov	r0, r3
 800ddaa:	f000 feeb 	bl	800eb84 <xTaskCheckForTimeOut>
 800ddae:	4603      	mov	r3, r0
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d132      	bne.n	800de1a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ddb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ddb6:	f000 f9d2 	bl	800e15e <prvIsQueueEmpty>
 800ddba:	4603      	mov	r3, r0
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d026      	beq.n	800de0e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ddc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d109      	bne.n	800dddc <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800ddc8:	f001 fb66 	bl	800f498 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ddcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddce:	689b      	ldr	r3, [r3, #8]
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	f001 f83b 	bl	800ee4c <xTaskPriorityInherit>
 800ddd6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ddd8:	f001 fb90 	bl	800f4fc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddde:	3324      	adds	r3, #36	; 0x24
 800dde0:	683a      	ldr	r2, [r7, #0]
 800dde2:	4611      	mov	r1, r2
 800dde4:	4618      	mov	r0, r3
 800dde6:	f000 fe2d 	bl	800ea44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ddea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ddec:	f000 f965 	bl	800e0ba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ddf0:	f000 fc2c 	bl	800e64c <xTaskResumeAll>
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	f47f af67 	bne.w	800dcca <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800ddfc:	4b18      	ldr	r3, [pc, #96]	; (800de60 <xQueueSemaphoreTake+0x21c>)
 800ddfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de02:	601a      	str	r2, [r3, #0]
 800de04:	f3bf 8f4f 	dsb	sy
 800de08:	f3bf 8f6f 	isb	sy
 800de0c:	e75d      	b.n	800dcca <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800de0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800de10:	f000 f953 	bl	800e0ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800de14:	f000 fc1a 	bl	800e64c <xTaskResumeAll>
 800de18:	e757      	b.n	800dcca <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800de1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800de1c:	f000 f94d 	bl	800e0ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800de20:	f000 fc14 	bl	800e64c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800de24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800de26:	f000 f99a 	bl	800e15e <prvIsQueueEmpty>
 800de2a:	4603      	mov	r3, r0
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	f43f af4c 	beq.w	800dcca <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800de32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de34:	2b00      	cmp	r3, #0
 800de36:	d00d      	beq.n	800de54 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800de38:	f001 fb2e 	bl	800f498 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800de3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800de3e:	f000 f894 	bl	800df6a <prvGetDisinheritPriorityAfterTimeout>
 800de42:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800de44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de46:	689b      	ldr	r3, [r3, #8]
 800de48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800de4a:	4618      	mov	r0, r3
 800de4c:	f001 f906 	bl	800f05c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800de50:	f001 fb54 	bl	800f4fc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800de54:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800de56:	4618      	mov	r0, r3
 800de58:	3738      	adds	r7, #56	; 0x38
 800de5a:	46bd      	mov	sp, r7
 800de5c:	bd80      	pop	{r7, pc}
 800de5e:	bf00      	nop
 800de60:	e000ed04 	.word	0xe000ed04

0800de64 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b08e      	sub	sp, #56	; 0x38
 800de68:	af00      	add	r7, sp, #0
 800de6a:	60f8      	str	r0, [r7, #12]
 800de6c:	60b9      	str	r1, [r7, #8]
 800de6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800de74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de76:	2b00      	cmp	r3, #0
 800de78:	d10b      	bne.n	800de92 <xQueueReceiveFromISR+0x2e>
 800de7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de7e:	b672      	cpsid	i
 800de80:	f383 8811 	msr	BASEPRI, r3
 800de84:	f3bf 8f6f 	isb	sy
 800de88:	f3bf 8f4f 	dsb	sy
 800de8c:	b662      	cpsie	i
 800de8e:	623b      	str	r3, [r7, #32]
 800de90:	e7fe      	b.n	800de90 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800de92:	68bb      	ldr	r3, [r7, #8]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d103      	bne.n	800dea0 <xQueueReceiveFromISR+0x3c>
 800de98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d101      	bne.n	800dea4 <xQueueReceiveFromISR+0x40>
 800dea0:	2301      	movs	r3, #1
 800dea2:	e000      	b.n	800dea6 <xQueueReceiveFromISR+0x42>
 800dea4:	2300      	movs	r3, #0
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d10b      	bne.n	800dec2 <xQueueReceiveFromISR+0x5e>
 800deaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deae:	b672      	cpsid	i
 800deb0:	f383 8811 	msr	BASEPRI, r3
 800deb4:	f3bf 8f6f 	isb	sy
 800deb8:	f3bf 8f4f 	dsb	sy
 800debc:	b662      	cpsie	i
 800debe:	61fb      	str	r3, [r7, #28]
 800dec0:	e7fe      	b.n	800dec0 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dec2:	f001 fbc9 	bl	800f658 <vPortValidateInterruptPriority>
	__asm volatile
 800dec6:	f3ef 8211 	mrs	r2, BASEPRI
 800deca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dece:	b672      	cpsid	i
 800ded0:	f383 8811 	msr	BASEPRI, r3
 800ded4:	f3bf 8f6f 	isb	sy
 800ded8:	f3bf 8f4f 	dsb	sy
 800dedc:	b662      	cpsie	i
 800dede:	61ba      	str	r2, [r7, #24]
 800dee0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800dee2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dee4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800deea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800deec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deee:	2b00      	cmp	r3, #0
 800def0:	d02f      	beq.n	800df52 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800def2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800def4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800def8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800defc:	68b9      	ldr	r1, [r7, #8]
 800defe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800df00:	f000 f8b5 	bl	800e06e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800df04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df06:	1e5a      	subs	r2, r3, #1
 800df08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df0a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800df0c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800df10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df14:	d112      	bne.n	800df3c <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800df16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df18:	691b      	ldr	r3, [r3, #16]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d016      	beq.n	800df4c <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800df1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df20:	3310      	adds	r3, #16
 800df22:	4618      	mov	r0, r3
 800df24:	f000 fdb4 	bl	800ea90 <xTaskRemoveFromEventList>
 800df28:	4603      	mov	r3, r0
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d00e      	beq.n	800df4c <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d00b      	beq.n	800df4c <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	2201      	movs	r2, #1
 800df38:	601a      	str	r2, [r3, #0]
 800df3a:	e007      	b.n	800df4c <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800df3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df40:	3301      	adds	r3, #1
 800df42:	b2db      	uxtb	r3, r3
 800df44:	b25a      	sxtb	r2, r3
 800df46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800df4c:	2301      	movs	r3, #1
 800df4e:	637b      	str	r3, [r7, #52]	; 0x34
 800df50:	e001      	b.n	800df56 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 800df52:	2300      	movs	r3, #0
 800df54:	637b      	str	r3, [r7, #52]	; 0x34
 800df56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df58:	613b      	str	r3, [r7, #16]
	__asm volatile
 800df5a:	693b      	ldr	r3, [r7, #16]
 800df5c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800df60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800df62:	4618      	mov	r0, r3
 800df64:	3738      	adds	r7, #56	; 0x38
 800df66:	46bd      	mov	sp, r7
 800df68:	bd80      	pop	{r7, pc}

0800df6a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800df6a:	b480      	push	{r7}
 800df6c:	b085      	sub	sp, #20
 800df6e:	af00      	add	r7, sp, #0
 800df70:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df76:	2b00      	cmp	r3, #0
 800df78:	d006      	beq.n	800df88 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	f1c3 0307 	rsb	r3, r3, #7
 800df84:	60fb      	str	r3, [r7, #12]
 800df86:	e001      	b.n	800df8c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800df88:	2300      	movs	r3, #0
 800df8a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800df8c:	68fb      	ldr	r3, [r7, #12]
	}
 800df8e:	4618      	mov	r0, r3
 800df90:	3714      	adds	r7, #20
 800df92:	46bd      	mov	sp, r7
 800df94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df98:	4770      	bx	lr

0800df9a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800df9a:	b580      	push	{r7, lr}
 800df9c:	b086      	sub	sp, #24
 800df9e:	af00      	add	r7, sp, #0
 800dfa0:	60f8      	str	r0, [r7, #12]
 800dfa2:	60b9      	str	r1, [r7, #8]
 800dfa4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfae:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d10d      	bne.n	800dfd4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d14d      	bne.n	800e05c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	689b      	ldr	r3, [r3, #8]
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	f000 ffc1 	bl	800ef4c <xTaskPriorityDisinherit>
 800dfca:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	2200      	movs	r2, #0
 800dfd0:	609a      	str	r2, [r3, #8]
 800dfd2:	e043      	b.n	800e05c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d119      	bne.n	800e00e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	6858      	ldr	r0, [r3, #4]
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfe2:	461a      	mov	r2, r3
 800dfe4:	68b9      	ldr	r1, [r7, #8]
 800dfe6:	f01c fc49 	bl	802a87c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	685a      	ldr	r2, [r3, #4]
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dff2:	441a      	add	r2, r3
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	685a      	ldr	r2, [r3, #4]
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	689b      	ldr	r3, [r3, #8]
 800e000:	429a      	cmp	r2, r3
 800e002:	d32b      	bcc.n	800e05c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	681a      	ldr	r2, [r3, #0]
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	605a      	str	r2, [r3, #4]
 800e00c:	e026      	b.n	800e05c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	68d8      	ldr	r0, [r3, #12]
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e016:	461a      	mov	r2, r3
 800e018:	68b9      	ldr	r1, [r7, #8]
 800e01a:	f01c fc2f 	bl	802a87c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	68da      	ldr	r2, [r3, #12]
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e026:	425b      	negs	r3, r3
 800e028:	441a      	add	r2, r3
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	68da      	ldr	r2, [r3, #12]
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	429a      	cmp	r2, r3
 800e038:	d207      	bcs.n	800e04a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	689a      	ldr	r2, [r3, #8]
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e042:	425b      	negs	r3, r3
 800e044:	441a      	add	r2, r3
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	2b02      	cmp	r3, #2
 800e04e:	d105      	bne.n	800e05c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e050:	693b      	ldr	r3, [r7, #16]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d002      	beq.n	800e05c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e056:	693b      	ldr	r3, [r7, #16]
 800e058:	3b01      	subs	r3, #1
 800e05a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e05c:	693b      	ldr	r3, [r7, #16]
 800e05e:	1c5a      	adds	r2, r3, #1
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e064:	697b      	ldr	r3, [r7, #20]
}
 800e066:	4618      	mov	r0, r3
 800e068:	3718      	adds	r7, #24
 800e06a:	46bd      	mov	sp, r7
 800e06c:	bd80      	pop	{r7, pc}

0800e06e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e06e:	b580      	push	{r7, lr}
 800e070:	b082      	sub	sp, #8
 800e072:	af00      	add	r7, sp, #0
 800e074:	6078      	str	r0, [r7, #4]
 800e076:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d018      	beq.n	800e0b2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	68da      	ldr	r2, [r3, #12]
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e088:	441a      	add	r2, r3
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	68da      	ldr	r2, [r3, #12]
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	689b      	ldr	r3, [r3, #8]
 800e096:	429a      	cmp	r2, r3
 800e098:	d303      	bcc.n	800e0a2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	681a      	ldr	r2, [r3, #0]
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	68d9      	ldr	r1, [r3, #12]
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0aa:	461a      	mov	r2, r3
 800e0ac:	6838      	ldr	r0, [r7, #0]
 800e0ae:	f01c fbe5 	bl	802a87c <memcpy>
	}
}
 800e0b2:	bf00      	nop
 800e0b4:	3708      	adds	r7, #8
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	bd80      	pop	{r7, pc}

0800e0ba <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e0ba:	b580      	push	{r7, lr}
 800e0bc:	b084      	sub	sp, #16
 800e0be:	af00      	add	r7, sp, #0
 800e0c0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e0c2:	f001 f9e9 	bl	800f498 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e0cc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e0ce:	e011      	b.n	800e0f4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d012      	beq.n	800e0fe <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	3324      	adds	r3, #36	; 0x24
 800e0dc:	4618      	mov	r0, r3
 800e0de:	f000 fcd7 	bl	800ea90 <xTaskRemoveFromEventList>
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d001      	beq.n	800e0ec <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e0e8:	f000 fdb0 	bl	800ec4c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e0ec:	7bfb      	ldrb	r3, [r7, #15]
 800e0ee:	3b01      	subs	r3, #1
 800e0f0:	b2db      	uxtb	r3, r3
 800e0f2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e0f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	dce9      	bgt.n	800e0d0 <prvUnlockQueue+0x16>
 800e0fc:	e000      	b.n	800e100 <prvUnlockQueue+0x46>
					break;
 800e0fe:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	22ff      	movs	r2, #255	; 0xff
 800e104:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e108:	f001 f9f8 	bl	800f4fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e10c:	f001 f9c4 	bl	800f498 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e116:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e118:	e011      	b.n	800e13e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	691b      	ldr	r3, [r3, #16]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d012      	beq.n	800e148 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	3310      	adds	r3, #16
 800e126:	4618      	mov	r0, r3
 800e128:	f000 fcb2 	bl	800ea90 <xTaskRemoveFromEventList>
 800e12c:	4603      	mov	r3, r0
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d001      	beq.n	800e136 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e132:	f000 fd8b 	bl	800ec4c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e136:	7bbb      	ldrb	r3, [r7, #14]
 800e138:	3b01      	subs	r3, #1
 800e13a:	b2db      	uxtb	r3, r3
 800e13c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e13e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e142:	2b00      	cmp	r3, #0
 800e144:	dce9      	bgt.n	800e11a <prvUnlockQueue+0x60>
 800e146:	e000      	b.n	800e14a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e148:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	22ff      	movs	r2, #255	; 0xff
 800e14e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e152:	f001 f9d3 	bl	800f4fc <vPortExitCritical>
}
 800e156:	bf00      	nop
 800e158:	3710      	adds	r7, #16
 800e15a:	46bd      	mov	sp, r7
 800e15c:	bd80      	pop	{r7, pc}

0800e15e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e15e:	b580      	push	{r7, lr}
 800e160:	b084      	sub	sp, #16
 800e162:	af00      	add	r7, sp, #0
 800e164:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e166:	f001 f997 	bl	800f498 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d102      	bne.n	800e178 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e172:	2301      	movs	r3, #1
 800e174:	60fb      	str	r3, [r7, #12]
 800e176:	e001      	b.n	800e17c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e178:	2300      	movs	r3, #0
 800e17a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e17c:	f001 f9be 	bl	800f4fc <vPortExitCritical>

	return xReturn;
 800e180:	68fb      	ldr	r3, [r7, #12]
}
 800e182:	4618      	mov	r0, r3
 800e184:	3710      	adds	r7, #16
 800e186:	46bd      	mov	sp, r7
 800e188:	bd80      	pop	{r7, pc}

0800e18a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e18a:	b580      	push	{r7, lr}
 800e18c:	b084      	sub	sp, #16
 800e18e:	af00      	add	r7, sp, #0
 800e190:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e192:	f001 f981 	bl	800f498 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e19e:	429a      	cmp	r2, r3
 800e1a0:	d102      	bne.n	800e1a8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e1a2:	2301      	movs	r3, #1
 800e1a4:	60fb      	str	r3, [r7, #12]
 800e1a6:	e001      	b.n	800e1ac <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e1ac:	f001 f9a6 	bl	800f4fc <vPortExitCritical>

	return xReturn;
 800e1b0:	68fb      	ldr	r3, [r7, #12]
}
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	3710      	adds	r7, #16
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	bd80      	pop	{r7, pc}

0800e1ba <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e1ba:	b580      	push	{r7, lr}
 800e1bc:	b08e      	sub	sp, #56	; 0x38
 800e1be:	af04      	add	r7, sp, #16
 800e1c0:	60f8      	str	r0, [r7, #12]
 800e1c2:	60b9      	str	r1, [r7, #8]
 800e1c4:	607a      	str	r2, [r7, #4]
 800e1c6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e1c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d10b      	bne.n	800e1e6 <xTaskCreateStatic+0x2c>
	__asm volatile
 800e1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1d2:	b672      	cpsid	i
 800e1d4:	f383 8811 	msr	BASEPRI, r3
 800e1d8:	f3bf 8f6f 	isb	sy
 800e1dc:	f3bf 8f4f 	dsb	sy
 800e1e0:	b662      	cpsie	i
 800e1e2:	623b      	str	r3, [r7, #32]
 800e1e4:	e7fe      	b.n	800e1e4 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800e1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d10b      	bne.n	800e204 <xTaskCreateStatic+0x4a>
 800e1ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1f0:	b672      	cpsid	i
 800e1f2:	f383 8811 	msr	BASEPRI, r3
 800e1f6:	f3bf 8f6f 	isb	sy
 800e1fa:	f3bf 8f4f 	dsb	sy
 800e1fe:	b662      	cpsie	i
 800e200:	61fb      	str	r3, [r7, #28]
 800e202:	e7fe      	b.n	800e202 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e204:	2358      	movs	r3, #88	; 0x58
 800e206:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e208:	693b      	ldr	r3, [r7, #16]
 800e20a:	2b58      	cmp	r3, #88	; 0x58
 800e20c:	d00b      	beq.n	800e226 <xTaskCreateStatic+0x6c>
 800e20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e212:	b672      	cpsid	i
 800e214:	f383 8811 	msr	BASEPRI, r3
 800e218:	f3bf 8f6f 	isb	sy
 800e21c:	f3bf 8f4f 	dsb	sy
 800e220:	b662      	cpsie	i
 800e222:	61bb      	str	r3, [r7, #24]
 800e224:	e7fe      	b.n	800e224 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e226:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d01e      	beq.n	800e26c <xTaskCreateStatic+0xb2>
 800e22e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e230:	2b00      	cmp	r3, #0
 800e232:	d01b      	beq.n	800e26c <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e236:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e23a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e23c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e240:	2202      	movs	r2, #2
 800e242:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e246:	2300      	movs	r3, #0
 800e248:	9303      	str	r3, [sp, #12]
 800e24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e24c:	9302      	str	r3, [sp, #8]
 800e24e:	f107 0314 	add.w	r3, r7, #20
 800e252:	9301      	str	r3, [sp, #4]
 800e254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e256:	9300      	str	r3, [sp, #0]
 800e258:	683b      	ldr	r3, [r7, #0]
 800e25a:	687a      	ldr	r2, [r7, #4]
 800e25c:	68b9      	ldr	r1, [r7, #8]
 800e25e:	68f8      	ldr	r0, [r7, #12]
 800e260:	f000 f850 	bl	800e304 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e264:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e266:	f000 f8e1 	bl	800e42c <prvAddNewTaskToReadyList>
 800e26a:	e001      	b.n	800e270 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800e26c:	2300      	movs	r3, #0
 800e26e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e270:	697b      	ldr	r3, [r7, #20]
	}
 800e272:	4618      	mov	r0, r3
 800e274:	3728      	adds	r7, #40	; 0x28
 800e276:	46bd      	mov	sp, r7
 800e278:	bd80      	pop	{r7, pc}

0800e27a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e27a:	b580      	push	{r7, lr}
 800e27c:	b08c      	sub	sp, #48	; 0x30
 800e27e:	af04      	add	r7, sp, #16
 800e280:	60f8      	str	r0, [r7, #12]
 800e282:	60b9      	str	r1, [r7, #8]
 800e284:	603b      	str	r3, [r7, #0]
 800e286:	4613      	mov	r3, r2
 800e288:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e28a:	88fb      	ldrh	r3, [r7, #6]
 800e28c:	009b      	lsls	r3, r3, #2
 800e28e:	4618      	mov	r0, r3
 800e290:	f001 fa24 	bl	800f6dc <pvPortMalloc>
 800e294:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e296:	697b      	ldr	r3, [r7, #20]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d00e      	beq.n	800e2ba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e29c:	2058      	movs	r0, #88	; 0x58
 800e29e:	f001 fa1d 	bl	800f6dc <pvPortMalloc>
 800e2a2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e2a4:	69fb      	ldr	r3, [r7, #28]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d003      	beq.n	800e2b2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e2aa:	69fb      	ldr	r3, [r7, #28]
 800e2ac:	697a      	ldr	r2, [r7, #20]
 800e2ae:	631a      	str	r2, [r3, #48]	; 0x30
 800e2b0:	e005      	b.n	800e2be <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e2b2:	6978      	ldr	r0, [r7, #20]
 800e2b4:	f001 fade 	bl	800f874 <vPortFree>
 800e2b8:	e001      	b.n	800e2be <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e2be:	69fb      	ldr	r3, [r7, #28]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d017      	beq.n	800e2f4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e2c4:	69fb      	ldr	r3, [r7, #28]
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e2cc:	88fa      	ldrh	r2, [r7, #6]
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	9303      	str	r3, [sp, #12]
 800e2d2:	69fb      	ldr	r3, [r7, #28]
 800e2d4:	9302      	str	r3, [sp, #8]
 800e2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2d8:	9301      	str	r3, [sp, #4]
 800e2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2dc:	9300      	str	r3, [sp, #0]
 800e2de:	683b      	ldr	r3, [r7, #0]
 800e2e0:	68b9      	ldr	r1, [r7, #8]
 800e2e2:	68f8      	ldr	r0, [r7, #12]
 800e2e4:	f000 f80e 	bl	800e304 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e2e8:	69f8      	ldr	r0, [r7, #28]
 800e2ea:	f000 f89f 	bl	800e42c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e2ee:	2301      	movs	r3, #1
 800e2f0:	61bb      	str	r3, [r7, #24]
 800e2f2:	e002      	b.n	800e2fa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e2f4:	f04f 33ff 	mov.w	r3, #4294967295
 800e2f8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e2fa:	69bb      	ldr	r3, [r7, #24]
	}
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	3720      	adds	r7, #32
 800e300:	46bd      	mov	sp, r7
 800e302:	bd80      	pop	{r7, pc}

0800e304 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b088      	sub	sp, #32
 800e308:	af00      	add	r7, sp, #0
 800e30a:	60f8      	str	r0, [r7, #12]
 800e30c:	60b9      	str	r1, [r7, #8]
 800e30e:	607a      	str	r2, [r7, #4]
 800e310:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e314:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	009b      	lsls	r3, r3, #2
 800e31a:	461a      	mov	r2, r3
 800e31c:	21a5      	movs	r1, #165	; 0xa5
 800e31e:	f01c fab8 	bl	802a892 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e324:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e326:	6879      	ldr	r1, [r7, #4]
 800e328:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800e32c:	440b      	add	r3, r1
 800e32e:	009b      	lsls	r3, r3, #2
 800e330:	4413      	add	r3, r2
 800e332:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e334:	69bb      	ldr	r3, [r7, #24]
 800e336:	f023 0307 	bic.w	r3, r3, #7
 800e33a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e33c:	69bb      	ldr	r3, [r7, #24]
 800e33e:	f003 0307 	and.w	r3, r3, #7
 800e342:	2b00      	cmp	r3, #0
 800e344:	d00b      	beq.n	800e35e <prvInitialiseNewTask+0x5a>
 800e346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e34a:	b672      	cpsid	i
 800e34c:	f383 8811 	msr	BASEPRI, r3
 800e350:	f3bf 8f6f 	isb	sy
 800e354:	f3bf 8f4f 	dsb	sy
 800e358:	b662      	cpsie	i
 800e35a:	617b      	str	r3, [r7, #20]
 800e35c:	e7fe      	b.n	800e35c <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e35e:	68bb      	ldr	r3, [r7, #8]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d01f      	beq.n	800e3a4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e364:	2300      	movs	r3, #0
 800e366:	61fb      	str	r3, [r7, #28]
 800e368:	e012      	b.n	800e390 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e36a:	68ba      	ldr	r2, [r7, #8]
 800e36c:	69fb      	ldr	r3, [r7, #28]
 800e36e:	4413      	add	r3, r2
 800e370:	7819      	ldrb	r1, [r3, #0]
 800e372:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e374:	69fb      	ldr	r3, [r7, #28]
 800e376:	4413      	add	r3, r2
 800e378:	3334      	adds	r3, #52	; 0x34
 800e37a:	460a      	mov	r2, r1
 800e37c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e37e:	68ba      	ldr	r2, [r7, #8]
 800e380:	69fb      	ldr	r3, [r7, #28]
 800e382:	4413      	add	r3, r2
 800e384:	781b      	ldrb	r3, [r3, #0]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d006      	beq.n	800e398 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e38a:	69fb      	ldr	r3, [r7, #28]
 800e38c:	3301      	adds	r3, #1
 800e38e:	61fb      	str	r3, [r7, #28]
 800e390:	69fb      	ldr	r3, [r7, #28]
 800e392:	2b0f      	cmp	r3, #15
 800e394:	d9e9      	bls.n	800e36a <prvInitialiseNewTask+0x66>
 800e396:	e000      	b.n	800e39a <prvInitialiseNewTask+0x96>
			{
				break;
 800e398:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e39c:	2200      	movs	r2, #0
 800e39e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e3a2:	e003      	b.n	800e3ac <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ae:	2b06      	cmp	r3, #6
 800e3b0:	d901      	bls.n	800e3b6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e3b2:	2306      	movs	r3, #6
 800e3b4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e3b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e3ba:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e3c0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800e3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3c4:	2200      	movs	r2, #0
 800e3c6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e3c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3ca:	3304      	adds	r3, #4
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	f7fe ff4b 	bl	800d268 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3d4:	3318      	adds	r3, #24
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f7fe ff46 	bl	800d268 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e3dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e3e0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3e4:	f1c3 0207 	rsb	r2, r3, #7
 800e3e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3ea:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e3f0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800e3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e3f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e400:	2200      	movs	r2, #0
 800e402:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e406:	683a      	ldr	r2, [r7, #0]
 800e408:	68f9      	ldr	r1, [r7, #12]
 800e40a:	69b8      	ldr	r0, [r7, #24]
 800e40c:	f000 ff3c 	bl	800f288 <pxPortInitialiseStack>
 800e410:	4602      	mov	r2, r0
 800e412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e414:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d002      	beq.n	800e422 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e41e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e420:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e422:	bf00      	nop
 800e424:	3720      	adds	r7, #32
 800e426:	46bd      	mov	sp, r7
 800e428:	bd80      	pop	{r7, pc}
	...

0800e42c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e42c:	b580      	push	{r7, lr}
 800e42e:	b082      	sub	sp, #8
 800e430:	af00      	add	r7, sp, #0
 800e432:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e434:	f001 f830 	bl	800f498 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e438:	4b2a      	ldr	r3, [pc, #168]	; (800e4e4 <prvAddNewTaskToReadyList+0xb8>)
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	3301      	adds	r3, #1
 800e43e:	4a29      	ldr	r2, [pc, #164]	; (800e4e4 <prvAddNewTaskToReadyList+0xb8>)
 800e440:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e442:	4b29      	ldr	r3, [pc, #164]	; (800e4e8 <prvAddNewTaskToReadyList+0xbc>)
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d109      	bne.n	800e45e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e44a:	4a27      	ldr	r2, [pc, #156]	; (800e4e8 <prvAddNewTaskToReadyList+0xbc>)
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e450:	4b24      	ldr	r3, [pc, #144]	; (800e4e4 <prvAddNewTaskToReadyList+0xb8>)
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	2b01      	cmp	r3, #1
 800e456:	d110      	bne.n	800e47a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e458:	f000 fc1e 	bl	800ec98 <prvInitialiseTaskLists>
 800e45c:	e00d      	b.n	800e47a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e45e:	4b23      	ldr	r3, [pc, #140]	; (800e4ec <prvAddNewTaskToReadyList+0xc0>)
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d109      	bne.n	800e47a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e466:	4b20      	ldr	r3, [pc, #128]	; (800e4e8 <prvAddNewTaskToReadyList+0xbc>)
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e470:	429a      	cmp	r2, r3
 800e472:	d802      	bhi.n	800e47a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e474:	4a1c      	ldr	r2, [pc, #112]	; (800e4e8 <prvAddNewTaskToReadyList+0xbc>)
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e47a:	4b1d      	ldr	r3, [pc, #116]	; (800e4f0 <prvAddNewTaskToReadyList+0xc4>)
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	3301      	adds	r3, #1
 800e480:	4a1b      	ldr	r2, [pc, #108]	; (800e4f0 <prvAddNewTaskToReadyList+0xc4>)
 800e482:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e488:	2201      	movs	r2, #1
 800e48a:	409a      	lsls	r2, r3
 800e48c:	4b19      	ldr	r3, [pc, #100]	; (800e4f4 <prvAddNewTaskToReadyList+0xc8>)
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	4313      	orrs	r3, r2
 800e492:	4a18      	ldr	r2, [pc, #96]	; (800e4f4 <prvAddNewTaskToReadyList+0xc8>)
 800e494:	6013      	str	r3, [r2, #0]
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e49a:	4613      	mov	r3, r2
 800e49c:	009b      	lsls	r3, r3, #2
 800e49e:	4413      	add	r3, r2
 800e4a0:	009b      	lsls	r3, r3, #2
 800e4a2:	4a15      	ldr	r2, [pc, #84]	; (800e4f8 <prvAddNewTaskToReadyList+0xcc>)
 800e4a4:	441a      	add	r2, r3
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	3304      	adds	r3, #4
 800e4aa:	4619      	mov	r1, r3
 800e4ac:	4610      	mov	r0, r2
 800e4ae:	f7fe fee8 	bl	800d282 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e4b2:	f001 f823 	bl	800f4fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e4b6:	4b0d      	ldr	r3, [pc, #52]	; (800e4ec <prvAddNewTaskToReadyList+0xc0>)
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d00e      	beq.n	800e4dc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e4be:	4b0a      	ldr	r3, [pc, #40]	; (800e4e8 <prvAddNewTaskToReadyList+0xbc>)
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4c8:	429a      	cmp	r2, r3
 800e4ca:	d207      	bcs.n	800e4dc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e4cc:	4b0b      	ldr	r3, [pc, #44]	; (800e4fc <prvAddNewTaskToReadyList+0xd0>)
 800e4ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4d2:	601a      	str	r2, [r3, #0]
 800e4d4:	f3bf 8f4f 	dsb	sy
 800e4d8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e4dc:	bf00      	nop
 800e4de:	3708      	adds	r7, #8
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	bd80      	pop	{r7, pc}
 800e4e4:	20000524 	.word	0x20000524
 800e4e8:	20000424 	.word	0x20000424
 800e4ec:	20000530 	.word	0x20000530
 800e4f0:	20000540 	.word	0x20000540
 800e4f4:	2000052c 	.word	0x2000052c
 800e4f8:	20000428 	.word	0x20000428
 800e4fc:	e000ed04 	.word	0xe000ed04

0800e500 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e500:	b580      	push	{r7, lr}
 800e502:	b084      	sub	sp, #16
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e508:	2300      	movs	r3, #0
 800e50a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d018      	beq.n	800e544 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e512:	4b14      	ldr	r3, [pc, #80]	; (800e564 <vTaskDelay+0x64>)
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d00b      	beq.n	800e532 <vTaskDelay+0x32>
 800e51a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e51e:	b672      	cpsid	i
 800e520:	f383 8811 	msr	BASEPRI, r3
 800e524:	f3bf 8f6f 	isb	sy
 800e528:	f3bf 8f4f 	dsb	sy
 800e52c:	b662      	cpsie	i
 800e52e:	60bb      	str	r3, [r7, #8]
 800e530:	e7fe      	b.n	800e530 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800e532:	f000 f87d 	bl	800e630 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e536:	2100      	movs	r1, #0
 800e538:	6878      	ldr	r0, [r7, #4]
 800e53a:	f000 fe3f 	bl	800f1bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e53e:	f000 f885 	bl	800e64c <xTaskResumeAll>
 800e542:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d107      	bne.n	800e55a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e54a:	4b07      	ldr	r3, [pc, #28]	; (800e568 <vTaskDelay+0x68>)
 800e54c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e550:	601a      	str	r2, [r3, #0]
 800e552:	f3bf 8f4f 	dsb	sy
 800e556:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e55a:	bf00      	nop
 800e55c:	3710      	adds	r7, #16
 800e55e:	46bd      	mov	sp, r7
 800e560:	bd80      	pop	{r7, pc}
 800e562:	bf00      	nop
 800e564:	2000054c 	.word	0x2000054c
 800e568:	e000ed04 	.word	0xe000ed04

0800e56c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b08a      	sub	sp, #40	; 0x28
 800e570:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e572:	2300      	movs	r3, #0
 800e574:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e576:	2300      	movs	r3, #0
 800e578:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e57a:	463a      	mov	r2, r7
 800e57c:	1d39      	adds	r1, r7, #4
 800e57e:	f107 0308 	add.w	r3, r7, #8
 800e582:	4618      	mov	r0, r3
 800e584:	f7f2 fac2 	bl	8000b0c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e588:	6839      	ldr	r1, [r7, #0]
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	68ba      	ldr	r2, [r7, #8]
 800e58e:	9202      	str	r2, [sp, #8]
 800e590:	9301      	str	r3, [sp, #4]
 800e592:	2300      	movs	r3, #0
 800e594:	9300      	str	r3, [sp, #0]
 800e596:	2300      	movs	r3, #0
 800e598:	460a      	mov	r2, r1
 800e59a:	491f      	ldr	r1, [pc, #124]	; (800e618 <vTaskStartScheduler+0xac>)
 800e59c:	481f      	ldr	r0, [pc, #124]	; (800e61c <vTaskStartScheduler+0xb0>)
 800e59e:	f7ff fe0c 	bl	800e1ba <xTaskCreateStatic>
 800e5a2:	4602      	mov	r2, r0
 800e5a4:	4b1e      	ldr	r3, [pc, #120]	; (800e620 <vTaskStartScheduler+0xb4>)
 800e5a6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e5a8:	4b1d      	ldr	r3, [pc, #116]	; (800e620 <vTaskStartScheduler+0xb4>)
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d002      	beq.n	800e5b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e5b0:	2301      	movs	r3, #1
 800e5b2:	617b      	str	r3, [r7, #20]
 800e5b4:	e001      	b.n	800e5ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e5ba:	697b      	ldr	r3, [r7, #20]
 800e5bc:	2b01      	cmp	r3, #1
 800e5be:	d117      	bne.n	800e5f0 <vTaskStartScheduler+0x84>
 800e5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5c4:	b672      	cpsid	i
 800e5c6:	f383 8811 	msr	BASEPRI, r3
 800e5ca:	f3bf 8f6f 	isb	sy
 800e5ce:	f3bf 8f4f 	dsb	sy
 800e5d2:	b662      	cpsie	i
 800e5d4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e5d6:	4b13      	ldr	r3, [pc, #76]	; (800e624 <vTaskStartScheduler+0xb8>)
 800e5d8:	f04f 32ff 	mov.w	r2, #4294967295
 800e5dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e5de:	4b12      	ldr	r3, [pc, #72]	; (800e628 <vTaskStartScheduler+0xbc>)
 800e5e0:	2201      	movs	r2, #1
 800e5e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e5e4:	4b11      	ldr	r3, [pc, #68]	; (800e62c <vTaskStartScheduler+0xc0>)
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e5ea:	f000 fed9 	bl	800f3a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e5ee:	e00f      	b.n	800e610 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e5f0:	697b      	ldr	r3, [r7, #20]
 800e5f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5f6:	d10b      	bne.n	800e610 <vTaskStartScheduler+0xa4>
 800e5f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5fc:	b672      	cpsid	i
 800e5fe:	f383 8811 	msr	BASEPRI, r3
 800e602:	f3bf 8f6f 	isb	sy
 800e606:	f3bf 8f4f 	dsb	sy
 800e60a:	b662      	cpsie	i
 800e60c:	60fb      	str	r3, [r7, #12]
 800e60e:	e7fe      	b.n	800e60e <vTaskStartScheduler+0xa2>
}
 800e610:	bf00      	nop
 800e612:	3718      	adds	r7, #24
 800e614:	46bd      	mov	sp, r7
 800e616:	bd80      	pop	{r7, pc}
 800e618:	0802b828 	.word	0x0802b828
 800e61c:	0800ec65 	.word	0x0800ec65
 800e620:	20000548 	.word	0x20000548
 800e624:	20000544 	.word	0x20000544
 800e628:	20000530 	.word	0x20000530
 800e62c:	20000528 	.word	0x20000528

0800e630 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e630:	b480      	push	{r7}
 800e632:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800e634:	4b04      	ldr	r3, [pc, #16]	; (800e648 <vTaskSuspendAll+0x18>)
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	3301      	adds	r3, #1
 800e63a:	4a03      	ldr	r2, [pc, #12]	; (800e648 <vTaskSuspendAll+0x18>)
 800e63c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800e63e:	bf00      	nop
 800e640:	46bd      	mov	sp, r7
 800e642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e646:	4770      	bx	lr
 800e648:	2000054c 	.word	0x2000054c

0800e64c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b084      	sub	sp, #16
 800e650:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e652:	2300      	movs	r3, #0
 800e654:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e656:	2300      	movs	r3, #0
 800e658:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e65a:	4b42      	ldr	r3, [pc, #264]	; (800e764 <xTaskResumeAll+0x118>)
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d10b      	bne.n	800e67a <xTaskResumeAll+0x2e>
 800e662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e666:	b672      	cpsid	i
 800e668:	f383 8811 	msr	BASEPRI, r3
 800e66c:	f3bf 8f6f 	isb	sy
 800e670:	f3bf 8f4f 	dsb	sy
 800e674:	b662      	cpsie	i
 800e676:	603b      	str	r3, [r7, #0]
 800e678:	e7fe      	b.n	800e678 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e67a:	f000 ff0d 	bl	800f498 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e67e:	4b39      	ldr	r3, [pc, #228]	; (800e764 <xTaskResumeAll+0x118>)
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	3b01      	subs	r3, #1
 800e684:	4a37      	ldr	r2, [pc, #220]	; (800e764 <xTaskResumeAll+0x118>)
 800e686:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e688:	4b36      	ldr	r3, [pc, #216]	; (800e764 <xTaskResumeAll+0x118>)
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d161      	bne.n	800e754 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e690:	4b35      	ldr	r3, [pc, #212]	; (800e768 <xTaskResumeAll+0x11c>)
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d05d      	beq.n	800e754 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e698:	e02e      	b.n	800e6f8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e69a:	4b34      	ldr	r3, [pc, #208]	; (800e76c <xTaskResumeAll+0x120>)
 800e69c:	68db      	ldr	r3, [r3, #12]
 800e69e:	68db      	ldr	r3, [r3, #12]
 800e6a0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	3318      	adds	r3, #24
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	f7fe fe48 	bl	800d33c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	3304      	adds	r3, #4
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	f7fe fe43 	bl	800d33c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6ba:	2201      	movs	r2, #1
 800e6bc:	409a      	lsls	r2, r3
 800e6be:	4b2c      	ldr	r3, [pc, #176]	; (800e770 <xTaskResumeAll+0x124>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	4313      	orrs	r3, r2
 800e6c4:	4a2a      	ldr	r2, [pc, #168]	; (800e770 <xTaskResumeAll+0x124>)
 800e6c6:	6013      	str	r3, [r2, #0]
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6cc:	4613      	mov	r3, r2
 800e6ce:	009b      	lsls	r3, r3, #2
 800e6d0:	4413      	add	r3, r2
 800e6d2:	009b      	lsls	r3, r3, #2
 800e6d4:	4a27      	ldr	r2, [pc, #156]	; (800e774 <xTaskResumeAll+0x128>)
 800e6d6:	441a      	add	r2, r3
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	3304      	adds	r3, #4
 800e6dc:	4619      	mov	r1, r3
 800e6de:	4610      	mov	r0, r2
 800e6e0:	f7fe fdcf 	bl	800d282 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6e8:	4b23      	ldr	r3, [pc, #140]	; (800e778 <xTaskResumeAll+0x12c>)
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6ee:	429a      	cmp	r2, r3
 800e6f0:	d302      	bcc.n	800e6f8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e6f2:	4b22      	ldr	r3, [pc, #136]	; (800e77c <xTaskResumeAll+0x130>)
 800e6f4:	2201      	movs	r2, #1
 800e6f6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e6f8:	4b1c      	ldr	r3, [pc, #112]	; (800e76c <xTaskResumeAll+0x120>)
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d1cc      	bne.n	800e69a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d001      	beq.n	800e70a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e706:	f000 fb63 	bl	800edd0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e70a:	4b1d      	ldr	r3, [pc, #116]	; (800e780 <xTaskResumeAll+0x134>)
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d010      	beq.n	800e738 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e716:	f000 f859 	bl	800e7cc <xTaskIncrementTick>
 800e71a:	4603      	mov	r3, r0
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d002      	beq.n	800e726 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e720:	4b16      	ldr	r3, [pc, #88]	; (800e77c <xTaskResumeAll+0x130>)
 800e722:	2201      	movs	r2, #1
 800e724:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	3b01      	subs	r3, #1
 800e72a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d1f1      	bne.n	800e716 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800e732:	4b13      	ldr	r3, [pc, #76]	; (800e780 <xTaskResumeAll+0x134>)
 800e734:	2200      	movs	r2, #0
 800e736:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e738:	4b10      	ldr	r3, [pc, #64]	; (800e77c <xTaskResumeAll+0x130>)
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d009      	beq.n	800e754 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e740:	2301      	movs	r3, #1
 800e742:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e744:	4b0f      	ldr	r3, [pc, #60]	; (800e784 <xTaskResumeAll+0x138>)
 800e746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e74a:	601a      	str	r2, [r3, #0]
 800e74c:	f3bf 8f4f 	dsb	sy
 800e750:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e754:	f000 fed2 	bl	800f4fc <vPortExitCritical>

	return xAlreadyYielded;
 800e758:	68bb      	ldr	r3, [r7, #8]
}
 800e75a:	4618      	mov	r0, r3
 800e75c:	3710      	adds	r7, #16
 800e75e:	46bd      	mov	sp, r7
 800e760:	bd80      	pop	{r7, pc}
 800e762:	bf00      	nop
 800e764:	2000054c 	.word	0x2000054c
 800e768:	20000524 	.word	0x20000524
 800e76c:	200004e4 	.word	0x200004e4
 800e770:	2000052c 	.word	0x2000052c
 800e774:	20000428 	.word	0x20000428
 800e778:	20000424 	.word	0x20000424
 800e77c:	20000538 	.word	0x20000538
 800e780:	20000534 	.word	0x20000534
 800e784:	e000ed04 	.word	0xe000ed04

0800e788 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e788:	b480      	push	{r7}
 800e78a:	b083      	sub	sp, #12
 800e78c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e78e:	4b05      	ldr	r3, [pc, #20]	; (800e7a4 <xTaskGetTickCount+0x1c>)
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e794:	687b      	ldr	r3, [r7, #4]
}
 800e796:	4618      	mov	r0, r3
 800e798:	370c      	adds	r7, #12
 800e79a:	46bd      	mov	sp, r7
 800e79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a0:	4770      	bx	lr
 800e7a2:	bf00      	nop
 800e7a4:	20000528 	.word	0x20000528

0800e7a8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b082      	sub	sp, #8
 800e7ac:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e7ae:	f000 ff53 	bl	800f658 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800e7b6:	4b04      	ldr	r3, [pc, #16]	; (800e7c8 <xTaskGetTickCountFromISR+0x20>)
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e7bc:	683b      	ldr	r3, [r7, #0]
}
 800e7be:	4618      	mov	r0, r3
 800e7c0:	3708      	adds	r7, #8
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	bd80      	pop	{r7, pc}
 800e7c6:	bf00      	nop
 800e7c8:	20000528 	.word	0x20000528

0800e7cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b086      	sub	sp, #24
 800e7d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e7d6:	4b4f      	ldr	r3, [pc, #316]	; (800e914 <xTaskIncrementTick+0x148>)
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	f040 8089 	bne.w	800e8f2 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e7e0:	4b4d      	ldr	r3, [pc, #308]	; (800e918 <xTaskIncrementTick+0x14c>)
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	3301      	adds	r3, #1
 800e7e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e7e8:	4a4b      	ldr	r2, [pc, #300]	; (800e918 <xTaskIncrementTick+0x14c>)
 800e7ea:	693b      	ldr	r3, [r7, #16]
 800e7ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e7ee:	693b      	ldr	r3, [r7, #16]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d121      	bne.n	800e838 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e7f4:	4b49      	ldr	r3, [pc, #292]	; (800e91c <xTaskIncrementTick+0x150>)
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d00b      	beq.n	800e816 <xTaskIncrementTick+0x4a>
 800e7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e802:	b672      	cpsid	i
 800e804:	f383 8811 	msr	BASEPRI, r3
 800e808:	f3bf 8f6f 	isb	sy
 800e80c:	f3bf 8f4f 	dsb	sy
 800e810:	b662      	cpsie	i
 800e812:	603b      	str	r3, [r7, #0]
 800e814:	e7fe      	b.n	800e814 <xTaskIncrementTick+0x48>
 800e816:	4b41      	ldr	r3, [pc, #260]	; (800e91c <xTaskIncrementTick+0x150>)
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	60fb      	str	r3, [r7, #12]
 800e81c:	4b40      	ldr	r3, [pc, #256]	; (800e920 <xTaskIncrementTick+0x154>)
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	4a3e      	ldr	r2, [pc, #248]	; (800e91c <xTaskIncrementTick+0x150>)
 800e822:	6013      	str	r3, [r2, #0]
 800e824:	4a3e      	ldr	r2, [pc, #248]	; (800e920 <xTaskIncrementTick+0x154>)
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	6013      	str	r3, [r2, #0]
 800e82a:	4b3e      	ldr	r3, [pc, #248]	; (800e924 <xTaskIncrementTick+0x158>)
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	3301      	adds	r3, #1
 800e830:	4a3c      	ldr	r2, [pc, #240]	; (800e924 <xTaskIncrementTick+0x158>)
 800e832:	6013      	str	r3, [r2, #0]
 800e834:	f000 facc 	bl	800edd0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e838:	4b3b      	ldr	r3, [pc, #236]	; (800e928 <xTaskIncrementTick+0x15c>)
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	693a      	ldr	r2, [r7, #16]
 800e83e:	429a      	cmp	r2, r3
 800e840:	d348      	bcc.n	800e8d4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e842:	4b36      	ldr	r3, [pc, #216]	; (800e91c <xTaskIncrementTick+0x150>)
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d104      	bne.n	800e856 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e84c:	4b36      	ldr	r3, [pc, #216]	; (800e928 <xTaskIncrementTick+0x15c>)
 800e84e:	f04f 32ff 	mov.w	r2, #4294967295
 800e852:	601a      	str	r2, [r3, #0]
					break;
 800e854:	e03e      	b.n	800e8d4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e856:	4b31      	ldr	r3, [pc, #196]	; (800e91c <xTaskIncrementTick+0x150>)
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	68db      	ldr	r3, [r3, #12]
 800e85c:	68db      	ldr	r3, [r3, #12]
 800e85e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e860:	68bb      	ldr	r3, [r7, #8]
 800e862:	685b      	ldr	r3, [r3, #4]
 800e864:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e866:	693a      	ldr	r2, [r7, #16]
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	429a      	cmp	r2, r3
 800e86c:	d203      	bcs.n	800e876 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e86e:	4a2e      	ldr	r2, [pc, #184]	; (800e928 <xTaskIncrementTick+0x15c>)
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e874:	e02e      	b.n	800e8d4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e876:	68bb      	ldr	r3, [r7, #8]
 800e878:	3304      	adds	r3, #4
 800e87a:	4618      	mov	r0, r3
 800e87c:	f7fe fd5e 	bl	800d33c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e880:	68bb      	ldr	r3, [r7, #8]
 800e882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e884:	2b00      	cmp	r3, #0
 800e886:	d004      	beq.n	800e892 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e888:	68bb      	ldr	r3, [r7, #8]
 800e88a:	3318      	adds	r3, #24
 800e88c:	4618      	mov	r0, r3
 800e88e:	f7fe fd55 	bl	800d33c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e892:	68bb      	ldr	r3, [r7, #8]
 800e894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e896:	2201      	movs	r2, #1
 800e898:	409a      	lsls	r2, r3
 800e89a:	4b24      	ldr	r3, [pc, #144]	; (800e92c <xTaskIncrementTick+0x160>)
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	4313      	orrs	r3, r2
 800e8a0:	4a22      	ldr	r2, [pc, #136]	; (800e92c <xTaskIncrementTick+0x160>)
 800e8a2:	6013      	str	r3, [r2, #0]
 800e8a4:	68bb      	ldr	r3, [r7, #8]
 800e8a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8a8:	4613      	mov	r3, r2
 800e8aa:	009b      	lsls	r3, r3, #2
 800e8ac:	4413      	add	r3, r2
 800e8ae:	009b      	lsls	r3, r3, #2
 800e8b0:	4a1f      	ldr	r2, [pc, #124]	; (800e930 <xTaskIncrementTick+0x164>)
 800e8b2:	441a      	add	r2, r3
 800e8b4:	68bb      	ldr	r3, [r7, #8]
 800e8b6:	3304      	adds	r3, #4
 800e8b8:	4619      	mov	r1, r3
 800e8ba:	4610      	mov	r0, r2
 800e8bc:	f7fe fce1 	bl	800d282 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e8c0:	68bb      	ldr	r3, [r7, #8]
 800e8c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8c4:	4b1b      	ldr	r3, [pc, #108]	; (800e934 <xTaskIncrementTick+0x168>)
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8ca:	429a      	cmp	r2, r3
 800e8cc:	d3b9      	bcc.n	800e842 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e8ce:	2301      	movs	r3, #1
 800e8d0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e8d2:	e7b6      	b.n	800e842 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e8d4:	4b17      	ldr	r3, [pc, #92]	; (800e934 <xTaskIncrementTick+0x168>)
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8da:	4915      	ldr	r1, [pc, #84]	; (800e930 <xTaskIncrementTick+0x164>)
 800e8dc:	4613      	mov	r3, r2
 800e8de:	009b      	lsls	r3, r3, #2
 800e8e0:	4413      	add	r3, r2
 800e8e2:	009b      	lsls	r3, r3, #2
 800e8e4:	440b      	add	r3, r1
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	2b01      	cmp	r3, #1
 800e8ea:	d907      	bls.n	800e8fc <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800e8ec:	2301      	movs	r3, #1
 800e8ee:	617b      	str	r3, [r7, #20]
 800e8f0:	e004      	b.n	800e8fc <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800e8f2:	4b11      	ldr	r3, [pc, #68]	; (800e938 <xTaskIncrementTick+0x16c>)
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	3301      	adds	r3, #1
 800e8f8:	4a0f      	ldr	r2, [pc, #60]	; (800e938 <xTaskIncrementTick+0x16c>)
 800e8fa:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800e8fc:	4b0f      	ldr	r3, [pc, #60]	; (800e93c <xTaskIncrementTick+0x170>)
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d001      	beq.n	800e908 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800e904:	2301      	movs	r3, #1
 800e906:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800e908:	697b      	ldr	r3, [r7, #20]
}
 800e90a:	4618      	mov	r0, r3
 800e90c:	3718      	adds	r7, #24
 800e90e:	46bd      	mov	sp, r7
 800e910:	bd80      	pop	{r7, pc}
 800e912:	bf00      	nop
 800e914:	2000054c 	.word	0x2000054c
 800e918:	20000528 	.word	0x20000528
 800e91c:	200004dc 	.word	0x200004dc
 800e920:	200004e0 	.word	0x200004e0
 800e924:	2000053c 	.word	0x2000053c
 800e928:	20000544 	.word	0x20000544
 800e92c:	2000052c 	.word	0x2000052c
 800e930:	20000428 	.word	0x20000428
 800e934:	20000424 	.word	0x20000424
 800e938:	20000534 	.word	0x20000534
 800e93c:	20000538 	.word	0x20000538

0800e940 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b088      	sub	sp, #32
 800e944:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e946:	4b3a      	ldr	r3, [pc, #232]	; (800ea30 <vTaskSwitchContext+0xf0>)
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d003      	beq.n	800e956 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e94e:	4b39      	ldr	r3, [pc, #228]	; (800ea34 <vTaskSwitchContext+0xf4>)
 800e950:	2201      	movs	r2, #1
 800e952:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e954:	e067      	b.n	800ea26 <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800e956:	4b37      	ldr	r3, [pc, #220]	; (800ea34 <vTaskSwitchContext+0xf4>)
 800e958:	2200      	movs	r2, #0
 800e95a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800e95c:	4b36      	ldr	r3, [pc, #216]	; (800ea38 <vTaskSwitchContext+0xf8>)
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e962:	61fb      	str	r3, [r7, #28]
 800e964:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800e968:	61bb      	str	r3, [r7, #24]
 800e96a:	69fb      	ldr	r3, [r7, #28]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	69ba      	ldr	r2, [r7, #24]
 800e970:	429a      	cmp	r2, r3
 800e972:	d111      	bne.n	800e998 <vTaskSwitchContext+0x58>
 800e974:	69fb      	ldr	r3, [r7, #28]
 800e976:	3304      	adds	r3, #4
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	69ba      	ldr	r2, [r7, #24]
 800e97c:	429a      	cmp	r2, r3
 800e97e:	d10b      	bne.n	800e998 <vTaskSwitchContext+0x58>
 800e980:	69fb      	ldr	r3, [r7, #28]
 800e982:	3308      	adds	r3, #8
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	69ba      	ldr	r2, [r7, #24]
 800e988:	429a      	cmp	r2, r3
 800e98a:	d105      	bne.n	800e998 <vTaskSwitchContext+0x58>
 800e98c:	69fb      	ldr	r3, [r7, #28]
 800e98e:	330c      	adds	r3, #12
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	69ba      	ldr	r2, [r7, #24]
 800e994:	429a      	cmp	r2, r3
 800e996:	d008      	beq.n	800e9aa <vTaskSwitchContext+0x6a>
 800e998:	4b27      	ldr	r3, [pc, #156]	; (800ea38 <vTaskSwitchContext+0xf8>)
 800e99a:	681a      	ldr	r2, [r3, #0]
 800e99c:	4b26      	ldr	r3, [pc, #152]	; (800ea38 <vTaskSwitchContext+0xf8>)
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	3334      	adds	r3, #52	; 0x34
 800e9a2:	4619      	mov	r1, r3
 800e9a4:	4610      	mov	r0, r2
 800e9a6:	f7f2 f89e 	bl	8000ae6 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e9aa:	4b24      	ldr	r3, [pc, #144]	; (800ea3c <vTaskSwitchContext+0xfc>)
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	fab3 f383 	clz	r3, r3
 800e9b6:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e9b8:	7afb      	ldrb	r3, [r7, #11]
 800e9ba:	f1c3 031f 	rsb	r3, r3, #31
 800e9be:	617b      	str	r3, [r7, #20]
 800e9c0:	491f      	ldr	r1, [pc, #124]	; (800ea40 <vTaskSwitchContext+0x100>)
 800e9c2:	697a      	ldr	r2, [r7, #20]
 800e9c4:	4613      	mov	r3, r2
 800e9c6:	009b      	lsls	r3, r3, #2
 800e9c8:	4413      	add	r3, r2
 800e9ca:	009b      	lsls	r3, r3, #2
 800e9cc:	440b      	add	r3, r1
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d10b      	bne.n	800e9ec <vTaskSwitchContext+0xac>
	__asm volatile
 800e9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9d8:	b672      	cpsid	i
 800e9da:	f383 8811 	msr	BASEPRI, r3
 800e9de:	f3bf 8f6f 	isb	sy
 800e9e2:	f3bf 8f4f 	dsb	sy
 800e9e6:	b662      	cpsie	i
 800e9e8:	607b      	str	r3, [r7, #4]
 800e9ea:	e7fe      	b.n	800e9ea <vTaskSwitchContext+0xaa>
 800e9ec:	697a      	ldr	r2, [r7, #20]
 800e9ee:	4613      	mov	r3, r2
 800e9f0:	009b      	lsls	r3, r3, #2
 800e9f2:	4413      	add	r3, r2
 800e9f4:	009b      	lsls	r3, r3, #2
 800e9f6:	4a12      	ldr	r2, [pc, #72]	; (800ea40 <vTaskSwitchContext+0x100>)
 800e9f8:	4413      	add	r3, r2
 800e9fa:	613b      	str	r3, [r7, #16]
 800e9fc:	693b      	ldr	r3, [r7, #16]
 800e9fe:	685b      	ldr	r3, [r3, #4]
 800ea00:	685a      	ldr	r2, [r3, #4]
 800ea02:	693b      	ldr	r3, [r7, #16]
 800ea04:	605a      	str	r2, [r3, #4]
 800ea06:	693b      	ldr	r3, [r7, #16]
 800ea08:	685a      	ldr	r2, [r3, #4]
 800ea0a:	693b      	ldr	r3, [r7, #16]
 800ea0c:	3308      	adds	r3, #8
 800ea0e:	429a      	cmp	r2, r3
 800ea10:	d104      	bne.n	800ea1c <vTaskSwitchContext+0xdc>
 800ea12:	693b      	ldr	r3, [r7, #16]
 800ea14:	685b      	ldr	r3, [r3, #4]
 800ea16:	685a      	ldr	r2, [r3, #4]
 800ea18:	693b      	ldr	r3, [r7, #16]
 800ea1a:	605a      	str	r2, [r3, #4]
 800ea1c:	693b      	ldr	r3, [r7, #16]
 800ea1e:	685b      	ldr	r3, [r3, #4]
 800ea20:	68db      	ldr	r3, [r3, #12]
 800ea22:	4a05      	ldr	r2, [pc, #20]	; (800ea38 <vTaskSwitchContext+0xf8>)
 800ea24:	6013      	str	r3, [r2, #0]
}
 800ea26:	bf00      	nop
 800ea28:	3720      	adds	r7, #32
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	bd80      	pop	{r7, pc}
 800ea2e:	bf00      	nop
 800ea30:	2000054c 	.word	0x2000054c
 800ea34:	20000538 	.word	0x20000538
 800ea38:	20000424 	.word	0x20000424
 800ea3c:	2000052c 	.word	0x2000052c
 800ea40:	20000428 	.word	0x20000428

0800ea44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b084      	sub	sp, #16
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
 800ea4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d10b      	bne.n	800ea6c <vTaskPlaceOnEventList+0x28>
 800ea54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea58:	b672      	cpsid	i
 800ea5a:	f383 8811 	msr	BASEPRI, r3
 800ea5e:	f3bf 8f6f 	isb	sy
 800ea62:	f3bf 8f4f 	dsb	sy
 800ea66:	b662      	cpsie	i
 800ea68:	60fb      	str	r3, [r7, #12]
 800ea6a:	e7fe      	b.n	800ea6a <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ea6c:	4b07      	ldr	r3, [pc, #28]	; (800ea8c <vTaskPlaceOnEventList+0x48>)
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	3318      	adds	r3, #24
 800ea72:	4619      	mov	r1, r3
 800ea74:	6878      	ldr	r0, [r7, #4]
 800ea76:	f7fe fc28 	bl	800d2ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ea7a:	2101      	movs	r1, #1
 800ea7c:	6838      	ldr	r0, [r7, #0]
 800ea7e:	f000 fb9d 	bl	800f1bc <prvAddCurrentTaskToDelayedList>
}
 800ea82:	bf00      	nop
 800ea84:	3710      	adds	r7, #16
 800ea86:	46bd      	mov	sp, r7
 800ea88:	bd80      	pop	{r7, pc}
 800ea8a:	bf00      	nop
 800ea8c:	20000424 	.word	0x20000424

0800ea90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b086      	sub	sp, #24
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	68db      	ldr	r3, [r3, #12]
 800ea9c:	68db      	ldr	r3, [r3, #12]
 800ea9e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800eaa0:	693b      	ldr	r3, [r7, #16]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d10b      	bne.n	800eabe <xTaskRemoveFromEventList+0x2e>
 800eaa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaaa:	b672      	cpsid	i
 800eaac:	f383 8811 	msr	BASEPRI, r3
 800eab0:	f3bf 8f6f 	isb	sy
 800eab4:	f3bf 8f4f 	dsb	sy
 800eab8:	b662      	cpsie	i
 800eaba:	60fb      	str	r3, [r7, #12]
 800eabc:	e7fe      	b.n	800eabc <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800eabe:	693b      	ldr	r3, [r7, #16]
 800eac0:	3318      	adds	r3, #24
 800eac2:	4618      	mov	r0, r3
 800eac4:	f7fe fc3a 	bl	800d33c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eac8:	4b1d      	ldr	r3, [pc, #116]	; (800eb40 <xTaskRemoveFromEventList+0xb0>)
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d11c      	bne.n	800eb0a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ead0:	693b      	ldr	r3, [r7, #16]
 800ead2:	3304      	adds	r3, #4
 800ead4:	4618      	mov	r0, r3
 800ead6:	f7fe fc31 	bl	800d33c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800eada:	693b      	ldr	r3, [r7, #16]
 800eadc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eade:	2201      	movs	r2, #1
 800eae0:	409a      	lsls	r2, r3
 800eae2:	4b18      	ldr	r3, [pc, #96]	; (800eb44 <xTaskRemoveFromEventList+0xb4>)
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	4313      	orrs	r3, r2
 800eae8:	4a16      	ldr	r2, [pc, #88]	; (800eb44 <xTaskRemoveFromEventList+0xb4>)
 800eaea:	6013      	str	r3, [r2, #0]
 800eaec:	693b      	ldr	r3, [r7, #16]
 800eaee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eaf0:	4613      	mov	r3, r2
 800eaf2:	009b      	lsls	r3, r3, #2
 800eaf4:	4413      	add	r3, r2
 800eaf6:	009b      	lsls	r3, r3, #2
 800eaf8:	4a13      	ldr	r2, [pc, #76]	; (800eb48 <xTaskRemoveFromEventList+0xb8>)
 800eafa:	441a      	add	r2, r3
 800eafc:	693b      	ldr	r3, [r7, #16]
 800eafe:	3304      	adds	r3, #4
 800eb00:	4619      	mov	r1, r3
 800eb02:	4610      	mov	r0, r2
 800eb04:	f7fe fbbd 	bl	800d282 <vListInsertEnd>
 800eb08:	e005      	b.n	800eb16 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800eb0a:	693b      	ldr	r3, [r7, #16]
 800eb0c:	3318      	adds	r3, #24
 800eb0e:	4619      	mov	r1, r3
 800eb10:	480e      	ldr	r0, [pc, #56]	; (800eb4c <xTaskRemoveFromEventList+0xbc>)
 800eb12:	f7fe fbb6 	bl	800d282 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800eb16:	693b      	ldr	r3, [r7, #16]
 800eb18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb1a:	4b0d      	ldr	r3, [pc, #52]	; (800eb50 <xTaskRemoveFromEventList+0xc0>)
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb20:	429a      	cmp	r2, r3
 800eb22:	d905      	bls.n	800eb30 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800eb24:	2301      	movs	r3, #1
 800eb26:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800eb28:	4b0a      	ldr	r3, [pc, #40]	; (800eb54 <xTaskRemoveFromEventList+0xc4>)
 800eb2a:	2201      	movs	r2, #1
 800eb2c:	601a      	str	r2, [r3, #0]
 800eb2e:	e001      	b.n	800eb34 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800eb30:	2300      	movs	r3, #0
 800eb32:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800eb34:	697b      	ldr	r3, [r7, #20]
}
 800eb36:	4618      	mov	r0, r3
 800eb38:	3718      	adds	r7, #24
 800eb3a:	46bd      	mov	sp, r7
 800eb3c:	bd80      	pop	{r7, pc}
 800eb3e:	bf00      	nop
 800eb40:	2000054c 	.word	0x2000054c
 800eb44:	2000052c 	.word	0x2000052c
 800eb48:	20000428 	.word	0x20000428
 800eb4c:	200004e4 	.word	0x200004e4
 800eb50:	20000424 	.word	0x20000424
 800eb54:	20000538 	.word	0x20000538

0800eb58 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800eb58:	b480      	push	{r7}
 800eb5a:	b083      	sub	sp, #12
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800eb60:	4b06      	ldr	r3, [pc, #24]	; (800eb7c <vTaskInternalSetTimeOutState+0x24>)
 800eb62:	681a      	ldr	r2, [r3, #0]
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800eb68:	4b05      	ldr	r3, [pc, #20]	; (800eb80 <vTaskInternalSetTimeOutState+0x28>)
 800eb6a:	681a      	ldr	r2, [r3, #0]
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	605a      	str	r2, [r3, #4]
}
 800eb70:	bf00      	nop
 800eb72:	370c      	adds	r7, #12
 800eb74:	46bd      	mov	sp, r7
 800eb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7a:	4770      	bx	lr
 800eb7c:	2000053c 	.word	0x2000053c
 800eb80:	20000528 	.word	0x20000528

0800eb84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b088      	sub	sp, #32
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
 800eb8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d10b      	bne.n	800ebac <xTaskCheckForTimeOut+0x28>
 800eb94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb98:	b672      	cpsid	i
 800eb9a:	f383 8811 	msr	BASEPRI, r3
 800eb9e:	f3bf 8f6f 	isb	sy
 800eba2:	f3bf 8f4f 	dsb	sy
 800eba6:	b662      	cpsie	i
 800eba8:	613b      	str	r3, [r7, #16]
 800ebaa:	e7fe      	b.n	800ebaa <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800ebac:	683b      	ldr	r3, [r7, #0]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d10b      	bne.n	800ebca <xTaskCheckForTimeOut+0x46>
 800ebb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebb6:	b672      	cpsid	i
 800ebb8:	f383 8811 	msr	BASEPRI, r3
 800ebbc:	f3bf 8f6f 	isb	sy
 800ebc0:	f3bf 8f4f 	dsb	sy
 800ebc4:	b662      	cpsie	i
 800ebc6:	60fb      	str	r3, [r7, #12]
 800ebc8:	e7fe      	b.n	800ebc8 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800ebca:	f000 fc65 	bl	800f498 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ebce:	4b1d      	ldr	r3, [pc, #116]	; (800ec44 <xTaskCheckForTimeOut+0xc0>)
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	685b      	ldr	r3, [r3, #4]
 800ebd8:	69ba      	ldr	r2, [r7, #24]
 800ebda:	1ad3      	subs	r3, r2, r3
 800ebdc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ebde:	683b      	ldr	r3, [r7, #0]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebe6:	d102      	bne.n	800ebee <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ebe8:	2300      	movs	r3, #0
 800ebea:	61fb      	str	r3, [r7, #28]
 800ebec:	e023      	b.n	800ec36 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	681a      	ldr	r2, [r3, #0]
 800ebf2:	4b15      	ldr	r3, [pc, #84]	; (800ec48 <xTaskCheckForTimeOut+0xc4>)
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	429a      	cmp	r2, r3
 800ebf8:	d007      	beq.n	800ec0a <xTaskCheckForTimeOut+0x86>
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	685b      	ldr	r3, [r3, #4]
 800ebfe:	69ba      	ldr	r2, [r7, #24]
 800ec00:	429a      	cmp	r2, r3
 800ec02:	d302      	bcc.n	800ec0a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ec04:	2301      	movs	r3, #1
 800ec06:	61fb      	str	r3, [r7, #28]
 800ec08:	e015      	b.n	800ec36 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ec0a:	683b      	ldr	r3, [r7, #0]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	697a      	ldr	r2, [r7, #20]
 800ec10:	429a      	cmp	r2, r3
 800ec12:	d20b      	bcs.n	800ec2c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ec14:	683b      	ldr	r3, [r7, #0]
 800ec16:	681a      	ldr	r2, [r3, #0]
 800ec18:	697b      	ldr	r3, [r7, #20]
 800ec1a:	1ad2      	subs	r2, r2, r3
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ec20:	6878      	ldr	r0, [r7, #4]
 800ec22:	f7ff ff99 	bl	800eb58 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ec26:	2300      	movs	r3, #0
 800ec28:	61fb      	str	r3, [r7, #28]
 800ec2a:	e004      	b.n	800ec36 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ec2c:	683b      	ldr	r3, [r7, #0]
 800ec2e:	2200      	movs	r2, #0
 800ec30:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ec32:	2301      	movs	r3, #1
 800ec34:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ec36:	f000 fc61 	bl	800f4fc <vPortExitCritical>

	return xReturn;
 800ec3a:	69fb      	ldr	r3, [r7, #28]
}
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	3720      	adds	r7, #32
 800ec40:	46bd      	mov	sp, r7
 800ec42:	bd80      	pop	{r7, pc}
 800ec44:	20000528 	.word	0x20000528
 800ec48:	2000053c 	.word	0x2000053c

0800ec4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ec4c:	b480      	push	{r7}
 800ec4e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ec50:	4b03      	ldr	r3, [pc, #12]	; (800ec60 <vTaskMissedYield+0x14>)
 800ec52:	2201      	movs	r2, #1
 800ec54:	601a      	str	r2, [r3, #0]
}
 800ec56:	bf00      	nop
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5e:	4770      	bx	lr
 800ec60:	20000538 	.word	0x20000538

0800ec64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b082      	sub	sp, #8
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ec6c:	f000 f854 	bl	800ed18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ec70:	4b07      	ldr	r3, [pc, #28]	; (800ec90 <prvIdleTask+0x2c>)
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	2b01      	cmp	r3, #1
 800ec76:	d907      	bls.n	800ec88 <prvIdleTask+0x24>
			{
				taskYIELD();
 800ec78:	4b06      	ldr	r3, [pc, #24]	; (800ec94 <prvIdleTask+0x30>)
 800ec7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec7e:	601a      	str	r2, [r3, #0]
 800ec80:	f3bf 8f4f 	dsb	sy
 800ec84:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800ec88:	f7f1 ff26 	bl	8000ad8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800ec8c:	e7ee      	b.n	800ec6c <prvIdleTask+0x8>
 800ec8e:	bf00      	nop
 800ec90:	20000428 	.word	0x20000428
 800ec94:	e000ed04 	.word	0xe000ed04

0800ec98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b082      	sub	sp, #8
 800ec9c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ec9e:	2300      	movs	r3, #0
 800eca0:	607b      	str	r3, [r7, #4]
 800eca2:	e00c      	b.n	800ecbe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800eca4:	687a      	ldr	r2, [r7, #4]
 800eca6:	4613      	mov	r3, r2
 800eca8:	009b      	lsls	r3, r3, #2
 800ecaa:	4413      	add	r3, r2
 800ecac:	009b      	lsls	r3, r3, #2
 800ecae:	4a12      	ldr	r2, [pc, #72]	; (800ecf8 <prvInitialiseTaskLists+0x60>)
 800ecb0:	4413      	add	r3, r2
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	f7fe fab8 	bl	800d228 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	3301      	adds	r3, #1
 800ecbc:	607b      	str	r3, [r7, #4]
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	2b06      	cmp	r3, #6
 800ecc2:	d9ef      	bls.n	800eca4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ecc4:	480d      	ldr	r0, [pc, #52]	; (800ecfc <prvInitialiseTaskLists+0x64>)
 800ecc6:	f7fe faaf 	bl	800d228 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ecca:	480d      	ldr	r0, [pc, #52]	; (800ed00 <prvInitialiseTaskLists+0x68>)
 800eccc:	f7fe faac 	bl	800d228 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ecd0:	480c      	ldr	r0, [pc, #48]	; (800ed04 <prvInitialiseTaskLists+0x6c>)
 800ecd2:	f7fe faa9 	bl	800d228 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ecd6:	480c      	ldr	r0, [pc, #48]	; (800ed08 <prvInitialiseTaskLists+0x70>)
 800ecd8:	f7fe faa6 	bl	800d228 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ecdc:	480b      	ldr	r0, [pc, #44]	; (800ed0c <prvInitialiseTaskLists+0x74>)
 800ecde:	f7fe faa3 	bl	800d228 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ece2:	4b0b      	ldr	r3, [pc, #44]	; (800ed10 <prvInitialiseTaskLists+0x78>)
 800ece4:	4a05      	ldr	r2, [pc, #20]	; (800ecfc <prvInitialiseTaskLists+0x64>)
 800ece6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ece8:	4b0a      	ldr	r3, [pc, #40]	; (800ed14 <prvInitialiseTaskLists+0x7c>)
 800ecea:	4a05      	ldr	r2, [pc, #20]	; (800ed00 <prvInitialiseTaskLists+0x68>)
 800ecec:	601a      	str	r2, [r3, #0]
}
 800ecee:	bf00      	nop
 800ecf0:	3708      	adds	r7, #8
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	bd80      	pop	{r7, pc}
 800ecf6:	bf00      	nop
 800ecf8:	20000428 	.word	0x20000428
 800ecfc:	200004b4 	.word	0x200004b4
 800ed00:	200004c8 	.word	0x200004c8
 800ed04:	200004e4 	.word	0x200004e4
 800ed08:	200004f8 	.word	0x200004f8
 800ed0c:	20000510 	.word	0x20000510
 800ed10:	200004dc 	.word	0x200004dc
 800ed14:	200004e0 	.word	0x200004e0

0800ed18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b082      	sub	sp, #8
 800ed1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ed1e:	e019      	b.n	800ed54 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ed20:	f000 fbba 	bl	800f498 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed24:	4b0f      	ldr	r3, [pc, #60]	; (800ed64 <prvCheckTasksWaitingTermination+0x4c>)
 800ed26:	68db      	ldr	r3, [r3, #12]
 800ed28:	68db      	ldr	r3, [r3, #12]
 800ed2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	3304      	adds	r3, #4
 800ed30:	4618      	mov	r0, r3
 800ed32:	f7fe fb03 	bl	800d33c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ed36:	4b0c      	ldr	r3, [pc, #48]	; (800ed68 <prvCheckTasksWaitingTermination+0x50>)
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	3b01      	subs	r3, #1
 800ed3c:	4a0a      	ldr	r2, [pc, #40]	; (800ed68 <prvCheckTasksWaitingTermination+0x50>)
 800ed3e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ed40:	4b0a      	ldr	r3, [pc, #40]	; (800ed6c <prvCheckTasksWaitingTermination+0x54>)
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	3b01      	subs	r3, #1
 800ed46:	4a09      	ldr	r2, [pc, #36]	; (800ed6c <prvCheckTasksWaitingTermination+0x54>)
 800ed48:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ed4a:	f000 fbd7 	bl	800f4fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ed4e:	6878      	ldr	r0, [r7, #4]
 800ed50:	f000 f80e 	bl	800ed70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ed54:	4b05      	ldr	r3, [pc, #20]	; (800ed6c <prvCheckTasksWaitingTermination+0x54>)
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d1e1      	bne.n	800ed20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ed5c:	bf00      	nop
 800ed5e:	3708      	adds	r7, #8
 800ed60:	46bd      	mov	sp, r7
 800ed62:	bd80      	pop	{r7, pc}
 800ed64:	200004f8 	.word	0x200004f8
 800ed68:	20000524 	.word	0x20000524
 800ed6c:	2000050c 	.word	0x2000050c

0800ed70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b084      	sub	sp, #16
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d108      	bne.n	800ed94 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed86:	4618      	mov	r0, r3
 800ed88:	f000 fd74 	bl	800f874 <vPortFree>
				vPortFree( pxTCB );
 800ed8c:	6878      	ldr	r0, [r7, #4]
 800ed8e:	f000 fd71 	bl	800f874 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ed92:	e019      	b.n	800edc8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800ed9a:	2b01      	cmp	r3, #1
 800ed9c:	d103      	bne.n	800eda6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ed9e:	6878      	ldr	r0, [r7, #4]
 800eda0:	f000 fd68 	bl	800f874 <vPortFree>
	}
 800eda4:	e010      	b.n	800edc8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800edac:	2b02      	cmp	r3, #2
 800edae:	d00b      	beq.n	800edc8 <prvDeleteTCB+0x58>
 800edb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edb4:	b672      	cpsid	i
 800edb6:	f383 8811 	msr	BASEPRI, r3
 800edba:	f3bf 8f6f 	isb	sy
 800edbe:	f3bf 8f4f 	dsb	sy
 800edc2:	b662      	cpsie	i
 800edc4:	60fb      	str	r3, [r7, #12]
 800edc6:	e7fe      	b.n	800edc6 <prvDeleteTCB+0x56>
	}
 800edc8:	bf00      	nop
 800edca:	3710      	adds	r7, #16
 800edcc:	46bd      	mov	sp, r7
 800edce:	bd80      	pop	{r7, pc}

0800edd0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800edd0:	b480      	push	{r7}
 800edd2:	b083      	sub	sp, #12
 800edd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800edd6:	4b0c      	ldr	r3, [pc, #48]	; (800ee08 <prvResetNextTaskUnblockTime+0x38>)
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d104      	bne.n	800edea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ede0:	4b0a      	ldr	r3, [pc, #40]	; (800ee0c <prvResetNextTaskUnblockTime+0x3c>)
 800ede2:	f04f 32ff 	mov.w	r2, #4294967295
 800ede6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ede8:	e008      	b.n	800edfc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800edea:	4b07      	ldr	r3, [pc, #28]	; (800ee08 <prvResetNextTaskUnblockTime+0x38>)
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	68db      	ldr	r3, [r3, #12]
 800edf0:	68db      	ldr	r3, [r3, #12]
 800edf2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	685b      	ldr	r3, [r3, #4]
 800edf8:	4a04      	ldr	r2, [pc, #16]	; (800ee0c <prvResetNextTaskUnblockTime+0x3c>)
 800edfa:	6013      	str	r3, [r2, #0]
}
 800edfc:	bf00      	nop
 800edfe:	370c      	adds	r7, #12
 800ee00:	46bd      	mov	sp, r7
 800ee02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee06:	4770      	bx	lr
 800ee08:	200004dc 	.word	0x200004dc
 800ee0c:	20000544 	.word	0x20000544

0800ee10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ee10:	b480      	push	{r7}
 800ee12:	b083      	sub	sp, #12
 800ee14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ee16:	4b0b      	ldr	r3, [pc, #44]	; (800ee44 <xTaskGetSchedulerState+0x34>)
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d102      	bne.n	800ee24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ee1e:	2301      	movs	r3, #1
 800ee20:	607b      	str	r3, [r7, #4]
 800ee22:	e008      	b.n	800ee36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ee24:	4b08      	ldr	r3, [pc, #32]	; (800ee48 <xTaskGetSchedulerState+0x38>)
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d102      	bne.n	800ee32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ee2c:	2302      	movs	r3, #2
 800ee2e:	607b      	str	r3, [r7, #4]
 800ee30:	e001      	b.n	800ee36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ee32:	2300      	movs	r3, #0
 800ee34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ee36:	687b      	ldr	r3, [r7, #4]
	}
 800ee38:	4618      	mov	r0, r3
 800ee3a:	370c      	adds	r7, #12
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee42:	4770      	bx	lr
 800ee44:	20000530 	.word	0x20000530
 800ee48:	2000054c 	.word	0x2000054c

0800ee4c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b084      	sub	sp, #16
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ee58:	2300      	movs	r3, #0
 800ee5a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d069      	beq.n	800ef36 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ee62:	68bb      	ldr	r3, [r7, #8]
 800ee64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee66:	4b36      	ldr	r3, [pc, #216]	; (800ef40 <xTaskPriorityInherit+0xf4>)
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee6c:	429a      	cmp	r2, r3
 800ee6e:	d259      	bcs.n	800ef24 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ee70:	68bb      	ldr	r3, [r7, #8]
 800ee72:	699b      	ldr	r3, [r3, #24]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	db06      	blt.n	800ee86 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee78:	4b31      	ldr	r3, [pc, #196]	; (800ef40 <xTaskPriorityInherit+0xf4>)
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee7e:	f1c3 0207 	rsb	r2, r3, #7
 800ee82:	68bb      	ldr	r3, [r7, #8]
 800ee84:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ee86:	68bb      	ldr	r3, [r7, #8]
 800ee88:	6959      	ldr	r1, [r3, #20]
 800ee8a:	68bb      	ldr	r3, [r7, #8]
 800ee8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee8e:	4613      	mov	r3, r2
 800ee90:	009b      	lsls	r3, r3, #2
 800ee92:	4413      	add	r3, r2
 800ee94:	009b      	lsls	r3, r3, #2
 800ee96:	4a2b      	ldr	r2, [pc, #172]	; (800ef44 <xTaskPriorityInherit+0xf8>)
 800ee98:	4413      	add	r3, r2
 800ee9a:	4299      	cmp	r1, r3
 800ee9c:	d13a      	bne.n	800ef14 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee9e:	68bb      	ldr	r3, [r7, #8]
 800eea0:	3304      	adds	r3, #4
 800eea2:	4618      	mov	r0, r3
 800eea4:	f7fe fa4a 	bl	800d33c <uxListRemove>
 800eea8:	4603      	mov	r3, r0
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d115      	bne.n	800eeda <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800eeae:	68bb      	ldr	r3, [r7, #8]
 800eeb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eeb2:	4924      	ldr	r1, [pc, #144]	; (800ef44 <xTaskPriorityInherit+0xf8>)
 800eeb4:	4613      	mov	r3, r2
 800eeb6:	009b      	lsls	r3, r3, #2
 800eeb8:	4413      	add	r3, r2
 800eeba:	009b      	lsls	r3, r3, #2
 800eebc:	440b      	add	r3, r1
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d10a      	bne.n	800eeda <xTaskPriorityInherit+0x8e>
 800eec4:	68bb      	ldr	r3, [r7, #8]
 800eec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eec8:	2201      	movs	r2, #1
 800eeca:	fa02 f303 	lsl.w	r3, r2, r3
 800eece:	43da      	mvns	r2, r3
 800eed0:	4b1d      	ldr	r3, [pc, #116]	; (800ef48 <xTaskPriorityInherit+0xfc>)
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	4013      	ands	r3, r2
 800eed6:	4a1c      	ldr	r2, [pc, #112]	; (800ef48 <xTaskPriorityInherit+0xfc>)
 800eed8:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eeda:	4b19      	ldr	r3, [pc, #100]	; (800ef40 <xTaskPriorityInherit+0xf4>)
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eee0:	68bb      	ldr	r3, [r7, #8]
 800eee2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800eee4:	68bb      	ldr	r3, [r7, #8]
 800eee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eee8:	2201      	movs	r2, #1
 800eeea:	409a      	lsls	r2, r3
 800eeec:	4b16      	ldr	r3, [pc, #88]	; (800ef48 <xTaskPriorityInherit+0xfc>)
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	4313      	orrs	r3, r2
 800eef2:	4a15      	ldr	r2, [pc, #84]	; (800ef48 <xTaskPriorityInherit+0xfc>)
 800eef4:	6013      	str	r3, [r2, #0]
 800eef6:	68bb      	ldr	r3, [r7, #8]
 800eef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eefa:	4613      	mov	r3, r2
 800eefc:	009b      	lsls	r3, r3, #2
 800eefe:	4413      	add	r3, r2
 800ef00:	009b      	lsls	r3, r3, #2
 800ef02:	4a10      	ldr	r2, [pc, #64]	; (800ef44 <xTaskPriorityInherit+0xf8>)
 800ef04:	441a      	add	r2, r3
 800ef06:	68bb      	ldr	r3, [r7, #8]
 800ef08:	3304      	adds	r3, #4
 800ef0a:	4619      	mov	r1, r3
 800ef0c:	4610      	mov	r0, r2
 800ef0e:	f7fe f9b8 	bl	800d282 <vListInsertEnd>
 800ef12:	e004      	b.n	800ef1e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ef14:	4b0a      	ldr	r3, [pc, #40]	; (800ef40 <xTaskPriorityInherit+0xf4>)
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef1a:	68bb      	ldr	r3, [r7, #8]
 800ef1c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ef1e:	2301      	movs	r3, #1
 800ef20:	60fb      	str	r3, [r7, #12]
 800ef22:	e008      	b.n	800ef36 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ef24:	68bb      	ldr	r3, [r7, #8]
 800ef26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ef28:	4b05      	ldr	r3, [pc, #20]	; (800ef40 <xTaskPriorityInherit+0xf4>)
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef2e:	429a      	cmp	r2, r3
 800ef30:	d201      	bcs.n	800ef36 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ef32:	2301      	movs	r3, #1
 800ef34:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ef36:	68fb      	ldr	r3, [r7, #12]
	}
 800ef38:	4618      	mov	r0, r3
 800ef3a:	3710      	adds	r7, #16
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	bd80      	pop	{r7, pc}
 800ef40:	20000424 	.word	0x20000424
 800ef44:	20000428 	.word	0x20000428
 800ef48:	2000052c 	.word	0x2000052c

0800ef4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b086      	sub	sp, #24
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ef58:	2300      	movs	r3, #0
 800ef5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d070      	beq.n	800f044 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ef62:	4b3b      	ldr	r3, [pc, #236]	; (800f050 <xTaskPriorityDisinherit+0x104>)
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	693a      	ldr	r2, [r7, #16]
 800ef68:	429a      	cmp	r2, r3
 800ef6a:	d00b      	beq.n	800ef84 <xTaskPriorityDisinherit+0x38>
 800ef6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef70:	b672      	cpsid	i
 800ef72:	f383 8811 	msr	BASEPRI, r3
 800ef76:	f3bf 8f6f 	isb	sy
 800ef7a:	f3bf 8f4f 	dsb	sy
 800ef7e:	b662      	cpsie	i
 800ef80:	60fb      	str	r3, [r7, #12]
 800ef82:	e7fe      	b.n	800ef82 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800ef84:	693b      	ldr	r3, [r7, #16]
 800ef86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d10b      	bne.n	800efa4 <xTaskPriorityDisinherit+0x58>
 800ef8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef90:	b672      	cpsid	i
 800ef92:	f383 8811 	msr	BASEPRI, r3
 800ef96:	f3bf 8f6f 	isb	sy
 800ef9a:	f3bf 8f4f 	dsb	sy
 800ef9e:	b662      	cpsie	i
 800efa0:	60bb      	str	r3, [r7, #8]
 800efa2:	e7fe      	b.n	800efa2 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800efa4:	693b      	ldr	r3, [r7, #16]
 800efa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800efa8:	1e5a      	subs	r2, r3, #1
 800efaa:	693b      	ldr	r3, [r7, #16]
 800efac:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800efae:	693b      	ldr	r3, [r7, #16]
 800efb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efb2:	693b      	ldr	r3, [r7, #16]
 800efb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800efb6:	429a      	cmp	r2, r3
 800efb8:	d044      	beq.n	800f044 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800efba:	693b      	ldr	r3, [r7, #16]
 800efbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d140      	bne.n	800f044 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800efc2:	693b      	ldr	r3, [r7, #16]
 800efc4:	3304      	adds	r3, #4
 800efc6:	4618      	mov	r0, r3
 800efc8:	f7fe f9b8 	bl	800d33c <uxListRemove>
 800efcc:	4603      	mov	r3, r0
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d115      	bne.n	800effe <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800efd2:	693b      	ldr	r3, [r7, #16]
 800efd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efd6:	491f      	ldr	r1, [pc, #124]	; (800f054 <xTaskPriorityDisinherit+0x108>)
 800efd8:	4613      	mov	r3, r2
 800efda:	009b      	lsls	r3, r3, #2
 800efdc:	4413      	add	r3, r2
 800efde:	009b      	lsls	r3, r3, #2
 800efe0:	440b      	add	r3, r1
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d10a      	bne.n	800effe <xTaskPriorityDisinherit+0xb2>
 800efe8:	693b      	ldr	r3, [r7, #16]
 800efea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efec:	2201      	movs	r2, #1
 800efee:	fa02 f303 	lsl.w	r3, r2, r3
 800eff2:	43da      	mvns	r2, r3
 800eff4:	4b18      	ldr	r3, [pc, #96]	; (800f058 <xTaskPriorityDisinherit+0x10c>)
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	4013      	ands	r3, r2
 800effa:	4a17      	ldr	r2, [pc, #92]	; (800f058 <xTaskPriorityDisinherit+0x10c>)
 800effc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800effe:	693b      	ldr	r3, [r7, #16]
 800f000:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f002:	693b      	ldr	r3, [r7, #16]
 800f004:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f006:	693b      	ldr	r3, [r7, #16]
 800f008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f00a:	f1c3 0207 	rsb	r2, r3, #7
 800f00e:	693b      	ldr	r3, [r7, #16]
 800f010:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f012:	693b      	ldr	r3, [r7, #16]
 800f014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f016:	2201      	movs	r2, #1
 800f018:	409a      	lsls	r2, r3
 800f01a:	4b0f      	ldr	r3, [pc, #60]	; (800f058 <xTaskPriorityDisinherit+0x10c>)
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	4313      	orrs	r3, r2
 800f020:	4a0d      	ldr	r2, [pc, #52]	; (800f058 <xTaskPriorityDisinherit+0x10c>)
 800f022:	6013      	str	r3, [r2, #0]
 800f024:	693b      	ldr	r3, [r7, #16]
 800f026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f028:	4613      	mov	r3, r2
 800f02a:	009b      	lsls	r3, r3, #2
 800f02c:	4413      	add	r3, r2
 800f02e:	009b      	lsls	r3, r3, #2
 800f030:	4a08      	ldr	r2, [pc, #32]	; (800f054 <xTaskPriorityDisinherit+0x108>)
 800f032:	441a      	add	r2, r3
 800f034:	693b      	ldr	r3, [r7, #16]
 800f036:	3304      	adds	r3, #4
 800f038:	4619      	mov	r1, r3
 800f03a:	4610      	mov	r0, r2
 800f03c:	f7fe f921 	bl	800d282 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f040:	2301      	movs	r3, #1
 800f042:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f044:	697b      	ldr	r3, [r7, #20]
	}
 800f046:	4618      	mov	r0, r3
 800f048:	3718      	adds	r7, #24
 800f04a:	46bd      	mov	sp, r7
 800f04c:	bd80      	pop	{r7, pc}
 800f04e:	bf00      	nop
 800f050:	20000424 	.word	0x20000424
 800f054:	20000428 	.word	0x20000428
 800f058:	2000052c 	.word	0x2000052c

0800f05c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b088      	sub	sp, #32
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
 800f064:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f06a:	2301      	movs	r3, #1
 800f06c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	2b00      	cmp	r3, #0
 800f072:	f000 8085 	beq.w	800f180 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f076:	69bb      	ldr	r3, [r7, #24]
 800f078:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d10b      	bne.n	800f096 <vTaskPriorityDisinheritAfterTimeout+0x3a>
 800f07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f082:	b672      	cpsid	i
 800f084:	f383 8811 	msr	BASEPRI, r3
 800f088:	f3bf 8f6f 	isb	sy
 800f08c:	f3bf 8f4f 	dsb	sy
 800f090:	b662      	cpsie	i
 800f092:	60fb      	str	r3, [r7, #12]
 800f094:	e7fe      	b.n	800f094 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f096:	69bb      	ldr	r3, [r7, #24]
 800f098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f09a:	683a      	ldr	r2, [r7, #0]
 800f09c:	429a      	cmp	r2, r3
 800f09e:	d902      	bls.n	800f0a6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f0a0:	683b      	ldr	r3, [r7, #0]
 800f0a2:	61fb      	str	r3, [r7, #28]
 800f0a4:	e002      	b.n	800f0ac <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f0a6:	69bb      	ldr	r3, [r7, #24]
 800f0a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0aa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f0ac:	69bb      	ldr	r3, [r7, #24]
 800f0ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0b0:	69fa      	ldr	r2, [r7, #28]
 800f0b2:	429a      	cmp	r2, r3
 800f0b4:	d064      	beq.n	800f180 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f0b6:	69bb      	ldr	r3, [r7, #24]
 800f0b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f0ba:	697a      	ldr	r2, [r7, #20]
 800f0bc:	429a      	cmp	r2, r3
 800f0be:	d15f      	bne.n	800f180 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f0c0:	4b31      	ldr	r3, [pc, #196]	; (800f188 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	69ba      	ldr	r2, [r7, #24]
 800f0c6:	429a      	cmp	r2, r3
 800f0c8:	d10b      	bne.n	800f0e2 <vTaskPriorityDisinheritAfterTimeout+0x86>
 800f0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0ce:	b672      	cpsid	i
 800f0d0:	f383 8811 	msr	BASEPRI, r3
 800f0d4:	f3bf 8f6f 	isb	sy
 800f0d8:	f3bf 8f4f 	dsb	sy
 800f0dc:	b662      	cpsie	i
 800f0de:	60bb      	str	r3, [r7, #8]
 800f0e0:	e7fe      	b.n	800f0e0 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f0e2:	69bb      	ldr	r3, [r7, #24]
 800f0e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0e6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f0e8:	69bb      	ldr	r3, [r7, #24]
 800f0ea:	69fa      	ldr	r2, [r7, #28]
 800f0ec:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f0ee:	69bb      	ldr	r3, [r7, #24]
 800f0f0:	699b      	ldr	r3, [r3, #24]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	db04      	blt.n	800f100 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f0f6:	69fb      	ldr	r3, [r7, #28]
 800f0f8:	f1c3 0207 	rsb	r2, r3, #7
 800f0fc:	69bb      	ldr	r3, [r7, #24]
 800f0fe:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f100:	69bb      	ldr	r3, [r7, #24]
 800f102:	6959      	ldr	r1, [r3, #20]
 800f104:	693a      	ldr	r2, [r7, #16]
 800f106:	4613      	mov	r3, r2
 800f108:	009b      	lsls	r3, r3, #2
 800f10a:	4413      	add	r3, r2
 800f10c:	009b      	lsls	r3, r3, #2
 800f10e:	4a1f      	ldr	r2, [pc, #124]	; (800f18c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800f110:	4413      	add	r3, r2
 800f112:	4299      	cmp	r1, r3
 800f114:	d134      	bne.n	800f180 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f116:	69bb      	ldr	r3, [r7, #24]
 800f118:	3304      	adds	r3, #4
 800f11a:	4618      	mov	r0, r3
 800f11c:	f7fe f90e 	bl	800d33c <uxListRemove>
 800f120:	4603      	mov	r3, r0
 800f122:	2b00      	cmp	r3, #0
 800f124:	d115      	bne.n	800f152 <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800f126:	69bb      	ldr	r3, [r7, #24]
 800f128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f12a:	4918      	ldr	r1, [pc, #96]	; (800f18c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800f12c:	4613      	mov	r3, r2
 800f12e:	009b      	lsls	r3, r3, #2
 800f130:	4413      	add	r3, r2
 800f132:	009b      	lsls	r3, r3, #2
 800f134:	440b      	add	r3, r1
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d10a      	bne.n	800f152 <vTaskPriorityDisinheritAfterTimeout+0xf6>
 800f13c:	69bb      	ldr	r3, [r7, #24]
 800f13e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f140:	2201      	movs	r2, #1
 800f142:	fa02 f303 	lsl.w	r3, r2, r3
 800f146:	43da      	mvns	r2, r3
 800f148:	4b11      	ldr	r3, [pc, #68]	; (800f190 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	4013      	ands	r3, r2
 800f14e:	4a10      	ldr	r2, [pc, #64]	; (800f190 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800f150:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f152:	69bb      	ldr	r3, [r7, #24]
 800f154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f156:	2201      	movs	r2, #1
 800f158:	409a      	lsls	r2, r3
 800f15a:	4b0d      	ldr	r3, [pc, #52]	; (800f190 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	4313      	orrs	r3, r2
 800f160:	4a0b      	ldr	r2, [pc, #44]	; (800f190 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800f162:	6013      	str	r3, [r2, #0]
 800f164:	69bb      	ldr	r3, [r7, #24]
 800f166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f168:	4613      	mov	r3, r2
 800f16a:	009b      	lsls	r3, r3, #2
 800f16c:	4413      	add	r3, r2
 800f16e:	009b      	lsls	r3, r3, #2
 800f170:	4a06      	ldr	r2, [pc, #24]	; (800f18c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800f172:	441a      	add	r2, r3
 800f174:	69bb      	ldr	r3, [r7, #24]
 800f176:	3304      	adds	r3, #4
 800f178:	4619      	mov	r1, r3
 800f17a:	4610      	mov	r0, r2
 800f17c:	f7fe f881 	bl	800d282 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f180:	bf00      	nop
 800f182:	3720      	adds	r7, #32
 800f184:	46bd      	mov	sp, r7
 800f186:	bd80      	pop	{r7, pc}
 800f188:	20000424 	.word	0x20000424
 800f18c:	20000428 	.word	0x20000428
 800f190:	2000052c 	.word	0x2000052c

0800f194 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f194:	b480      	push	{r7}
 800f196:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f198:	4b07      	ldr	r3, [pc, #28]	; (800f1b8 <pvTaskIncrementMutexHeldCount+0x24>)
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d004      	beq.n	800f1aa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f1a0:	4b05      	ldr	r3, [pc, #20]	; (800f1b8 <pvTaskIncrementMutexHeldCount+0x24>)
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f1a6:	3201      	adds	r2, #1
 800f1a8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800f1aa:	4b03      	ldr	r3, [pc, #12]	; (800f1b8 <pvTaskIncrementMutexHeldCount+0x24>)
 800f1ac:	681b      	ldr	r3, [r3, #0]
	}
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b6:	4770      	bx	lr
 800f1b8:	20000424 	.word	0x20000424

0800f1bc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	b084      	sub	sp, #16
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	6078      	str	r0, [r7, #4]
 800f1c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f1c6:	4b29      	ldr	r3, [pc, #164]	; (800f26c <prvAddCurrentTaskToDelayedList+0xb0>)
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f1cc:	4b28      	ldr	r3, [pc, #160]	; (800f270 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	3304      	adds	r3, #4
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	f7fe f8b2 	bl	800d33c <uxListRemove>
 800f1d8:	4603      	mov	r3, r0
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d10b      	bne.n	800f1f6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800f1de:	4b24      	ldr	r3, [pc, #144]	; (800f270 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1e4:	2201      	movs	r2, #1
 800f1e6:	fa02 f303 	lsl.w	r3, r2, r3
 800f1ea:	43da      	mvns	r2, r3
 800f1ec:	4b21      	ldr	r3, [pc, #132]	; (800f274 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	4013      	ands	r3, r2
 800f1f2:	4a20      	ldr	r2, [pc, #128]	; (800f274 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f1f4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1fc:	d10a      	bne.n	800f214 <prvAddCurrentTaskToDelayedList+0x58>
 800f1fe:	683b      	ldr	r3, [r7, #0]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d007      	beq.n	800f214 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f204:	4b1a      	ldr	r3, [pc, #104]	; (800f270 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	3304      	adds	r3, #4
 800f20a:	4619      	mov	r1, r3
 800f20c:	481a      	ldr	r0, [pc, #104]	; (800f278 <prvAddCurrentTaskToDelayedList+0xbc>)
 800f20e:	f7fe f838 	bl	800d282 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f212:	e026      	b.n	800f262 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f214:	68fa      	ldr	r2, [r7, #12]
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	4413      	add	r3, r2
 800f21a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f21c:	4b14      	ldr	r3, [pc, #80]	; (800f270 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	68ba      	ldr	r2, [r7, #8]
 800f222:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f224:	68ba      	ldr	r2, [r7, #8]
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	429a      	cmp	r2, r3
 800f22a:	d209      	bcs.n	800f240 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f22c:	4b13      	ldr	r3, [pc, #76]	; (800f27c <prvAddCurrentTaskToDelayedList+0xc0>)
 800f22e:	681a      	ldr	r2, [r3, #0]
 800f230:	4b0f      	ldr	r3, [pc, #60]	; (800f270 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	3304      	adds	r3, #4
 800f236:	4619      	mov	r1, r3
 800f238:	4610      	mov	r0, r2
 800f23a:	f7fe f846 	bl	800d2ca <vListInsert>
}
 800f23e:	e010      	b.n	800f262 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f240:	4b0f      	ldr	r3, [pc, #60]	; (800f280 <prvAddCurrentTaskToDelayedList+0xc4>)
 800f242:	681a      	ldr	r2, [r3, #0]
 800f244:	4b0a      	ldr	r3, [pc, #40]	; (800f270 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	3304      	adds	r3, #4
 800f24a:	4619      	mov	r1, r3
 800f24c:	4610      	mov	r0, r2
 800f24e:	f7fe f83c 	bl	800d2ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f252:	4b0c      	ldr	r3, [pc, #48]	; (800f284 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	68ba      	ldr	r2, [r7, #8]
 800f258:	429a      	cmp	r2, r3
 800f25a:	d202      	bcs.n	800f262 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800f25c:	4a09      	ldr	r2, [pc, #36]	; (800f284 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f25e:	68bb      	ldr	r3, [r7, #8]
 800f260:	6013      	str	r3, [r2, #0]
}
 800f262:	bf00      	nop
 800f264:	3710      	adds	r7, #16
 800f266:	46bd      	mov	sp, r7
 800f268:	bd80      	pop	{r7, pc}
 800f26a:	bf00      	nop
 800f26c:	20000528 	.word	0x20000528
 800f270:	20000424 	.word	0x20000424
 800f274:	2000052c 	.word	0x2000052c
 800f278:	20000510 	.word	0x20000510
 800f27c:	200004e0 	.word	0x200004e0
 800f280:	200004dc 	.word	0x200004dc
 800f284:	20000544 	.word	0x20000544

0800f288 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f288:	b480      	push	{r7}
 800f28a:	b085      	sub	sp, #20
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	60f8      	str	r0, [r7, #12]
 800f290:	60b9      	str	r1, [r7, #8]
 800f292:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	3b04      	subs	r3, #4
 800f298:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f2a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	3b04      	subs	r3, #4
 800f2a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f2a8:	68bb      	ldr	r3, [r7, #8]
 800f2aa:	f023 0201 	bic.w	r2, r3, #1
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	3b04      	subs	r3, #4
 800f2b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f2b8:	4a0c      	ldr	r2, [pc, #48]	; (800f2ec <pxPortInitialiseStack+0x64>)
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	3b14      	subs	r3, #20
 800f2c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f2c4:	687a      	ldr	r2, [r7, #4]
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	3b04      	subs	r3, #4
 800f2ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	f06f 0202 	mvn.w	r2, #2
 800f2d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	3b20      	subs	r3, #32
 800f2dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f2de:	68fb      	ldr	r3, [r7, #12]
}
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	3714      	adds	r7, #20
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ea:	4770      	bx	lr
 800f2ec:	0800f2f1 	.word	0x0800f2f1

0800f2f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f2f0:	b480      	push	{r7}
 800f2f2:	b085      	sub	sp, #20
 800f2f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f2fa:	4b13      	ldr	r3, [pc, #76]	; (800f348 <prvTaskExitError+0x58>)
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f302:	d00b      	beq.n	800f31c <prvTaskExitError+0x2c>
 800f304:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f308:	b672      	cpsid	i
 800f30a:	f383 8811 	msr	BASEPRI, r3
 800f30e:	f3bf 8f6f 	isb	sy
 800f312:	f3bf 8f4f 	dsb	sy
 800f316:	b662      	cpsie	i
 800f318:	60fb      	str	r3, [r7, #12]
 800f31a:	e7fe      	b.n	800f31a <prvTaskExitError+0x2a>
 800f31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f320:	b672      	cpsid	i
 800f322:	f383 8811 	msr	BASEPRI, r3
 800f326:	f3bf 8f6f 	isb	sy
 800f32a:	f3bf 8f4f 	dsb	sy
 800f32e:	b662      	cpsie	i
 800f330:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f332:	bf00      	nop
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d0fc      	beq.n	800f334 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f33a:	bf00      	nop
 800f33c:	3714      	adds	r7, #20
 800f33e:	46bd      	mov	sp, r7
 800f340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f344:	4770      	bx	lr
 800f346:	bf00      	nop
 800f348:	20000024 	.word	0x20000024
 800f34c:	00000000 	.word	0x00000000

0800f350 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f350:	4b07      	ldr	r3, [pc, #28]	; (800f370 <pxCurrentTCBConst2>)
 800f352:	6819      	ldr	r1, [r3, #0]
 800f354:	6808      	ldr	r0, [r1, #0]
 800f356:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f35a:	f380 8809 	msr	PSP, r0
 800f35e:	f3bf 8f6f 	isb	sy
 800f362:	f04f 0000 	mov.w	r0, #0
 800f366:	f380 8811 	msr	BASEPRI, r0
 800f36a:	4770      	bx	lr
 800f36c:	f3af 8000 	nop.w

0800f370 <pxCurrentTCBConst2>:
 800f370:	20000424 	.word	0x20000424
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f374:	bf00      	nop
 800f376:	bf00      	nop

0800f378 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f378:	4808      	ldr	r0, [pc, #32]	; (800f39c <prvPortStartFirstTask+0x24>)
 800f37a:	6800      	ldr	r0, [r0, #0]
 800f37c:	6800      	ldr	r0, [r0, #0]
 800f37e:	f380 8808 	msr	MSP, r0
 800f382:	f04f 0000 	mov.w	r0, #0
 800f386:	f380 8814 	msr	CONTROL, r0
 800f38a:	b662      	cpsie	i
 800f38c:	b661      	cpsie	f
 800f38e:	f3bf 8f4f 	dsb	sy
 800f392:	f3bf 8f6f 	isb	sy
 800f396:	df00      	svc	0
 800f398:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f39a:	bf00      	nop
 800f39c:	e000ed08 	.word	0xe000ed08

0800f3a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	b084      	sub	sp, #16
 800f3a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f3a6:	4b36      	ldr	r3, [pc, #216]	; (800f480 <xPortStartScheduler+0xe0>)
 800f3a8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	781b      	ldrb	r3, [r3, #0]
 800f3ae:	b2db      	uxtb	r3, r3
 800f3b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	22ff      	movs	r2, #255	; 0xff
 800f3b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	781b      	ldrb	r3, [r3, #0]
 800f3bc:	b2db      	uxtb	r3, r3
 800f3be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f3c0:	78fb      	ldrb	r3, [r7, #3]
 800f3c2:	b2db      	uxtb	r3, r3
 800f3c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f3c8:	b2da      	uxtb	r2, r3
 800f3ca:	4b2e      	ldr	r3, [pc, #184]	; (800f484 <xPortStartScheduler+0xe4>)
 800f3cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f3ce:	4b2e      	ldr	r3, [pc, #184]	; (800f488 <xPortStartScheduler+0xe8>)
 800f3d0:	2207      	movs	r2, #7
 800f3d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f3d4:	e009      	b.n	800f3ea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800f3d6:	4b2c      	ldr	r3, [pc, #176]	; (800f488 <xPortStartScheduler+0xe8>)
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	3b01      	subs	r3, #1
 800f3dc:	4a2a      	ldr	r2, [pc, #168]	; (800f488 <xPortStartScheduler+0xe8>)
 800f3de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f3e0:	78fb      	ldrb	r3, [r7, #3]
 800f3e2:	b2db      	uxtb	r3, r3
 800f3e4:	005b      	lsls	r3, r3, #1
 800f3e6:	b2db      	uxtb	r3, r3
 800f3e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f3ea:	78fb      	ldrb	r3, [r7, #3]
 800f3ec:	b2db      	uxtb	r3, r3
 800f3ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f3f2:	2b80      	cmp	r3, #128	; 0x80
 800f3f4:	d0ef      	beq.n	800f3d6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f3f6:	4b24      	ldr	r3, [pc, #144]	; (800f488 <xPortStartScheduler+0xe8>)
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	f1c3 0307 	rsb	r3, r3, #7
 800f3fe:	2b04      	cmp	r3, #4
 800f400:	d00b      	beq.n	800f41a <xPortStartScheduler+0x7a>
 800f402:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f406:	b672      	cpsid	i
 800f408:	f383 8811 	msr	BASEPRI, r3
 800f40c:	f3bf 8f6f 	isb	sy
 800f410:	f3bf 8f4f 	dsb	sy
 800f414:	b662      	cpsie	i
 800f416:	60bb      	str	r3, [r7, #8]
 800f418:	e7fe      	b.n	800f418 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f41a:	4b1b      	ldr	r3, [pc, #108]	; (800f488 <xPortStartScheduler+0xe8>)
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	021b      	lsls	r3, r3, #8
 800f420:	4a19      	ldr	r2, [pc, #100]	; (800f488 <xPortStartScheduler+0xe8>)
 800f422:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f424:	4b18      	ldr	r3, [pc, #96]	; (800f488 <xPortStartScheduler+0xe8>)
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f42c:	4a16      	ldr	r2, [pc, #88]	; (800f488 <xPortStartScheduler+0xe8>)
 800f42e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	b2da      	uxtb	r2, r3
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f438:	4b14      	ldr	r3, [pc, #80]	; (800f48c <xPortStartScheduler+0xec>)
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	4a13      	ldr	r2, [pc, #76]	; (800f48c <xPortStartScheduler+0xec>)
 800f43e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f442:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f444:	4b11      	ldr	r3, [pc, #68]	; (800f48c <xPortStartScheduler+0xec>)
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	4a10      	ldr	r2, [pc, #64]	; (800f48c <xPortStartScheduler+0xec>)
 800f44a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f44e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f450:	f000 f8d4 	bl	800f5fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f454:	4b0e      	ldr	r3, [pc, #56]	; (800f490 <xPortStartScheduler+0xf0>)
 800f456:	2200      	movs	r2, #0
 800f458:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f45a:	f000 f8f3 	bl	800f644 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f45e:	4b0d      	ldr	r3, [pc, #52]	; (800f494 <xPortStartScheduler+0xf4>)
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	4a0c      	ldr	r2, [pc, #48]	; (800f494 <xPortStartScheduler+0xf4>)
 800f464:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f468:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f46a:	f7ff ff85 	bl	800f378 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f46e:	f7ff fa67 	bl	800e940 <vTaskSwitchContext>
	prvTaskExitError();
 800f472:	f7ff ff3d 	bl	800f2f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f476:	2300      	movs	r3, #0
}
 800f478:	4618      	mov	r0, r3
 800f47a:	3710      	adds	r7, #16
 800f47c:	46bd      	mov	sp, r7
 800f47e:	bd80      	pop	{r7, pc}
 800f480:	e000e400 	.word	0xe000e400
 800f484:	20000550 	.word	0x20000550
 800f488:	20000554 	.word	0x20000554
 800f48c:	e000ed20 	.word	0xe000ed20
 800f490:	20000024 	.word	0x20000024
 800f494:	e000ef34 	.word	0xe000ef34

0800f498 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f498:	b480      	push	{r7}
 800f49a:	b083      	sub	sp, #12
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4a2:	b672      	cpsid	i
 800f4a4:	f383 8811 	msr	BASEPRI, r3
 800f4a8:	f3bf 8f6f 	isb	sy
 800f4ac:	f3bf 8f4f 	dsb	sy
 800f4b0:	b662      	cpsie	i
 800f4b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f4b4:	4b0f      	ldr	r3, [pc, #60]	; (800f4f4 <vPortEnterCritical+0x5c>)
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	3301      	adds	r3, #1
 800f4ba:	4a0e      	ldr	r2, [pc, #56]	; (800f4f4 <vPortEnterCritical+0x5c>)
 800f4bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f4be:	4b0d      	ldr	r3, [pc, #52]	; (800f4f4 <vPortEnterCritical+0x5c>)
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	2b01      	cmp	r3, #1
 800f4c4:	d110      	bne.n	800f4e8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f4c6:	4b0c      	ldr	r3, [pc, #48]	; (800f4f8 <vPortEnterCritical+0x60>)
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	b2db      	uxtb	r3, r3
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d00b      	beq.n	800f4e8 <vPortEnterCritical+0x50>
 800f4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4d4:	b672      	cpsid	i
 800f4d6:	f383 8811 	msr	BASEPRI, r3
 800f4da:	f3bf 8f6f 	isb	sy
 800f4de:	f3bf 8f4f 	dsb	sy
 800f4e2:	b662      	cpsie	i
 800f4e4:	603b      	str	r3, [r7, #0]
 800f4e6:	e7fe      	b.n	800f4e6 <vPortEnterCritical+0x4e>
	}
}
 800f4e8:	bf00      	nop
 800f4ea:	370c      	adds	r7, #12
 800f4ec:	46bd      	mov	sp, r7
 800f4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f2:	4770      	bx	lr
 800f4f4:	20000024 	.word	0x20000024
 800f4f8:	e000ed04 	.word	0xe000ed04

0800f4fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f4fc:	b480      	push	{r7}
 800f4fe:	b083      	sub	sp, #12
 800f500:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f502:	4b12      	ldr	r3, [pc, #72]	; (800f54c <vPortExitCritical+0x50>)
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d10b      	bne.n	800f522 <vPortExitCritical+0x26>
 800f50a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f50e:	b672      	cpsid	i
 800f510:	f383 8811 	msr	BASEPRI, r3
 800f514:	f3bf 8f6f 	isb	sy
 800f518:	f3bf 8f4f 	dsb	sy
 800f51c:	b662      	cpsie	i
 800f51e:	607b      	str	r3, [r7, #4]
 800f520:	e7fe      	b.n	800f520 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800f522:	4b0a      	ldr	r3, [pc, #40]	; (800f54c <vPortExitCritical+0x50>)
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	3b01      	subs	r3, #1
 800f528:	4a08      	ldr	r2, [pc, #32]	; (800f54c <vPortExitCritical+0x50>)
 800f52a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f52c:	4b07      	ldr	r3, [pc, #28]	; (800f54c <vPortExitCritical+0x50>)
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d104      	bne.n	800f53e <vPortExitCritical+0x42>
 800f534:	2300      	movs	r3, #0
 800f536:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f538:	683b      	ldr	r3, [r7, #0]
 800f53a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800f53e:	bf00      	nop
 800f540:	370c      	adds	r7, #12
 800f542:	46bd      	mov	sp, r7
 800f544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f548:	4770      	bx	lr
 800f54a:	bf00      	nop
 800f54c:	20000024 	.word	0x20000024

0800f550 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f550:	f3ef 8009 	mrs	r0, PSP
 800f554:	f3bf 8f6f 	isb	sy
 800f558:	4b15      	ldr	r3, [pc, #84]	; (800f5b0 <pxCurrentTCBConst>)
 800f55a:	681a      	ldr	r2, [r3, #0]
 800f55c:	f01e 0f10 	tst.w	lr, #16
 800f560:	bf08      	it	eq
 800f562:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f566:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f56a:	6010      	str	r0, [r2, #0]
 800f56c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f570:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f574:	b672      	cpsid	i
 800f576:	f380 8811 	msr	BASEPRI, r0
 800f57a:	f3bf 8f4f 	dsb	sy
 800f57e:	f3bf 8f6f 	isb	sy
 800f582:	b662      	cpsie	i
 800f584:	f7ff f9dc 	bl	800e940 <vTaskSwitchContext>
 800f588:	f04f 0000 	mov.w	r0, #0
 800f58c:	f380 8811 	msr	BASEPRI, r0
 800f590:	bc09      	pop	{r0, r3}
 800f592:	6819      	ldr	r1, [r3, #0]
 800f594:	6808      	ldr	r0, [r1, #0]
 800f596:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f59a:	f01e 0f10 	tst.w	lr, #16
 800f59e:	bf08      	it	eq
 800f5a0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f5a4:	f380 8809 	msr	PSP, r0
 800f5a8:	f3bf 8f6f 	isb	sy
 800f5ac:	4770      	bx	lr
 800f5ae:	bf00      	nop

0800f5b0 <pxCurrentTCBConst>:
 800f5b0:	20000424 	.word	0x20000424
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f5b4:	bf00      	nop
 800f5b6:	bf00      	nop

0800f5b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b082      	sub	sp, #8
 800f5bc:	af00      	add	r7, sp, #0
	__asm volatile
 800f5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5c2:	b672      	cpsid	i
 800f5c4:	f383 8811 	msr	BASEPRI, r3
 800f5c8:	f3bf 8f6f 	isb	sy
 800f5cc:	f3bf 8f4f 	dsb	sy
 800f5d0:	b662      	cpsie	i
 800f5d2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f5d4:	f7ff f8fa 	bl	800e7cc <xTaskIncrementTick>
 800f5d8:	4603      	mov	r3, r0
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d003      	beq.n	800f5e6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f5de:	4b06      	ldr	r3, [pc, #24]	; (800f5f8 <SysTick_Handler+0x40>)
 800f5e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f5e4:	601a      	str	r2, [r3, #0]
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f5ea:	683b      	ldr	r3, [r7, #0]
 800f5ec:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800f5f0:	bf00      	nop
 800f5f2:	3708      	adds	r7, #8
 800f5f4:	46bd      	mov	sp, r7
 800f5f6:	bd80      	pop	{r7, pc}
 800f5f8:	e000ed04 	.word	0xe000ed04

0800f5fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f5fc:	b480      	push	{r7}
 800f5fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f600:	4b0b      	ldr	r3, [pc, #44]	; (800f630 <vPortSetupTimerInterrupt+0x34>)
 800f602:	2200      	movs	r2, #0
 800f604:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f606:	4b0b      	ldr	r3, [pc, #44]	; (800f634 <vPortSetupTimerInterrupt+0x38>)
 800f608:	2200      	movs	r2, #0
 800f60a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f60c:	4b0a      	ldr	r3, [pc, #40]	; (800f638 <vPortSetupTimerInterrupt+0x3c>)
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	4a0a      	ldr	r2, [pc, #40]	; (800f63c <vPortSetupTimerInterrupt+0x40>)
 800f612:	fba2 2303 	umull	r2, r3, r2, r3
 800f616:	099b      	lsrs	r3, r3, #6
 800f618:	4a09      	ldr	r2, [pc, #36]	; (800f640 <vPortSetupTimerInterrupt+0x44>)
 800f61a:	3b01      	subs	r3, #1
 800f61c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f61e:	4b04      	ldr	r3, [pc, #16]	; (800f630 <vPortSetupTimerInterrupt+0x34>)
 800f620:	2207      	movs	r2, #7
 800f622:	601a      	str	r2, [r3, #0]
}
 800f624:	bf00      	nop
 800f626:	46bd      	mov	sp, r7
 800f628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62c:	4770      	bx	lr
 800f62e:	bf00      	nop
 800f630:	e000e010 	.word	0xe000e010
 800f634:	e000e018 	.word	0xe000e018
 800f638:	20000018 	.word	0x20000018
 800f63c:	10624dd3 	.word	0x10624dd3
 800f640:	e000e014 	.word	0xe000e014

0800f644 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f644:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f654 <vPortEnableVFP+0x10>
 800f648:	6801      	ldr	r1, [r0, #0]
 800f64a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f64e:	6001      	str	r1, [r0, #0]
 800f650:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f652:	bf00      	nop
 800f654:	e000ed88 	.word	0xe000ed88

0800f658 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f658:	b480      	push	{r7}
 800f65a:	b085      	sub	sp, #20
 800f65c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f65e:	f3ef 8305 	mrs	r3, IPSR
 800f662:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	2b0f      	cmp	r3, #15
 800f668:	d915      	bls.n	800f696 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f66a:	4a18      	ldr	r2, [pc, #96]	; (800f6cc <vPortValidateInterruptPriority+0x74>)
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	4413      	add	r3, r2
 800f670:	781b      	ldrb	r3, [r3, #0]
 800f672:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f674:	4b16      	ldr	r3, [pc, #88]	; (800f6d0 <vPortValidateInterruptPriority+0x78>)
 800f676:	781b      	ldrb	r3, [r3, #0]
 800f678:	7afa      	ldrb	r2, [r7, #11]
 800f67a:	429a      	cmp	r2, r3
 800f67c:	d20b      	bcs.n	800f696 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800f67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f682:	b672      	cpsid	i
 800f684:	f383 8811 	msr	BASEPRI, r3
 800f688:	f3bf 8f6f 	isb	sy
 800f68c:	f3bf 8f4f 	dsb	sy
 800f690:	b662      	cpsie	i
 800f692:	607b      	str	r3, [r7, #4]
 800f694:	e7fe      	b.n	800f694 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f696:	4b0f      	ldr	r3, [pc, #60]	; (800f6d4 <vPortValidateInterruptPriority+0x7c>)
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f69e:	4b0e      	ldr	r3, [pc, #56]	; (800f6d8 <vPortValidateInterruptPriority+0x80>)
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	429a      	cmp	r2, r3
 800f6a4:	d90b      	bls.n	800f6be <vPortValidateInterruptPriority+0x66>
 800f6a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6aa:	b672      	cpsid	i
 800f6ac:	f383 8811 	msr	BASEPRI, r3
 800f6b0:	f3bf 8f6f 	isb	sy
 800f6b4:	f3bf 8f4f 	dsb	sy
 800f6b8:	b662      	cpsie	i
 800f6ba:	603b      	str	r3, [r7, #0]
 800f6bc:	e7fe      	b.n	800f6bc <vPortValidateInterruptPriority+0x64>
	}
 800f6be:	bf00      	nop
 800f6c0:	3714      	adds	r7, #20
 800f6c2:	46bd      	mov	sp, r7
 800f6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c8:	4770      	bx	lr
 800f6ca:	bf00      	nop
 800f6cc:	e000e3f0 	.word	0xe000e3f0
 800f6d0:	20000550 	.word	0x20000550
 800f6d4:	e000ed0c 	.word	0xe000ed0c
 800f6d8:	20000554 	.word	0x20000554

0800f6dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f6dc:	b580      	push	{r7, lr}
 800f6de:	b08a      	sub	sp, #40	; 0x28
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f6e8:	f7fe ffa2 	bl	800e630 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f6ec:	4b5c      	ldr	r3, [pc, #368]	; (800f860 <pvPortMalloc+0x184>)
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d101      	bne.n	800f6f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f6f4:	f000 f91a 	bl	800f92c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f6f8:	4b5a      	ldr	r3, [pc, #360]	; (800f864 <pvPortMalloc+0x188>)
 800f6fa:	681a      	ldr	r2, [r3, #0]
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	4013      	ands	r3, r2
 800f700:	2b00      	cmp	r3, #0
 800f702:	f040 8090 	bne.w	800f826 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d01e      	beq.n	800f74a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800f70c:	2208      	movs	r2, #8
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	4413      	add	r3, r2
 800f712:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	f003 0307 	and.w	r3, r3, #7
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d015      	beq.n	800f74a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	f023 0307 	bic.w	r3, r3, #7
 800f724:	3308      	adds	r3, #8
 800f726:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	f003 0307 	and.w	r3, r3, #7
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d00b      	beq.n	800f74a <pvPortMalloc+0x6e>
 800f732:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f736:	b672      	cpsid	i
 800f738:	f383 8811 	msr	BASEPRI, r3
 800f73c:	f3bf 8f6f 	isb	sy
 800f740:	f3bf 8f4f 	dsb	sy
 800f744:	b662      	cpsie	i
 800f746:	617b      	str	r3, [r7, #20]
 800f748:	e7fe      	b.n	800f748 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d06a      	beq.n	800f826 <pvPortMalloc+0x14a>
 800f750:	4b45      	ldr	r3, [pc, #276]	; (800f868 <pvPortMalloc+0x18c>)
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	687a      	ldr	r2, [r7, #4]
 800f756:	429a      	cmp	r2, r3
 800f758:	d865      	bhi.n	800f826 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f75a:	4b44      	ldr	r3, [pc, #272]	; (800f86c <pvPortMalloc+0x190>)
 800f75c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f75e:	4b43      	ldr	r3, [pc, #268]	; (800f86c <pvPortMalloc+0x190>)
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f764:	e004      	b.n	800f770 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800f766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f768:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f772:	685b      	ldr	r3, [r3, #4]
 800f774:	687a      	ldr	r2, [r7, #4]
 800f776:	429a      	cmp	r2, r3
 800f778:	d903      	bls.n	800f782 <pvPortMalloc+0xa6>
 800f77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d1f1      	bne.n	800f766 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f782:	4b37      	ldr	r3, [pc, #220]	; (800f860 <pvPortMalloc+0x184>)
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f788:	429a      	cmp	r2, r3
 800f78a:	d04c      	beq.n	800f826 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f78c:	6a3b      	ldr	r3, [r7, #32]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	2208      	movs	r2, #8
 800f792:	4413      	add	r3, r2
 800f794:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f798:	681a      	ldr	r2, [r3, #0]
 800f79a:	6a3b      	ldr	r3, [r7, #32]
 800f79c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7a0:	685a      	ldr	r2, [r3, #4]
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	1ad2      	subs	r2, r2, r3
 800f7a6:	2308      	movs	r3, #8
 800f7a8:	005b      	lsls	r3, r3, #1
 800f7aa:	429a      	cmp	r2, r3
 800f7ac:	d920      	bls.n	800f7f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f7ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	4413      	add	r3, r2
 800f7b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f7b6:	69bb      	ldr	r3, [r7, #24]
 800f7b8:	f003 0307 	and.w	r3, r3, #7
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d00b      	beq.n	800f7d8 <pvPortMalloc+0xfc>
 800f7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7c4:	b672      	cpsid	i
 800f7c6:	f383 8811 	msr	BASEPRI, r3
 800f7ca:	f3bf 8f6f 	isb	sy
 800f7ce:	f3bf 8f4f 	dsb	sy
 800f7d2:	b662      	cpsie	i
 800f7d4:	613b      	str	r3, [r7, #16]
 800f7d6:	e7fe      	b.n	800f7d6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f7d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7da:	685a      	ldr	r2, [r3, #4]
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	1ad2      	subs	r2, r2, r3
 800f7e0:	69bb      	ldr	r3, [r7, #24]
 800f7e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7e6:	687a      	ldr	r2, [r7, #4]
 800f7e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f7ea:	69b8      	ldr	r0, [r7, #24]
 800f7ec:	f000 f900 	bl	800f9f0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f7f0:	4b1d      	ldr	r3, [pc, #116]	; (800f868 <pvPortMalloc+0x18c>)
 800f7f2:	681a      	ldr	r2, [r3, #0]
 800f7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7f6:	685b      	ldr	r3, [r3, #4]
 800f7f8:	1ad3      	subs	r3, r2, r3
 800f7fa:	4a1b      	ldr	r2, [pc, #108]	; (800f868 <pvPortMalloc+0x18c>)
 800f7fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f7fe:	4b1a      	ldr	r3, [pc, #104]	; (800f868 <pvPortMalloc+0x18c>)
 800f800:	681a      	ldr	r2, [r3, #0]
 800f802:	4b1b      	ldr	r3, [pc, #108]	; (800f870 <pvPortMalloc+0x194>)
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	429a      	cmp	r2, r3
 800f808:	d203      	bcs.n	800f812 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f80a:	4b17      	ldr	r3, [pc, #92]	; (800f868 <pvPortMalloc+0x18c>)
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	4a18      	ldr	r2, [pc, #96]	; (800f870 <pvPortMalloc+0x194>)
 800f810:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f814:	685a      	ldr	r2, [r3, #4]
 800f816:	4b13      	ldr	r3, [pc, #76]	; (800f864 <pvPortMalloc+0x188>)
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	431a      	orrs	r2, r3
 800f81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f81e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f822:	2200      	movs	r2, #0
 800f824:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f826:	f7fe ff11 	bl	800e64c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800f82a:	69fb      	ldr	r3, [r7, #28]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d101      	bne.n	800f834 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800f830:	f7f1 f964 	bl	8000afc <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f834:	69fb      	ldr	r3, [r7, #28]
 800f836:	f003 0307 	and.w	r3, r3, #7
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d00b      	beq.n	800f856 <pvPortMalloc+0x17a>
 800f83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f842:	b672      	cpsid	i
 800f844:	f383 8811 	msr	BASEPRI, r3
 800f848:	f3bf 8f6f 	isb	sy
 800f84c:	f3bf 8f4f 	dsb	sy
 800f850:	b662      	cpsie	i
 800f852:	60fb      	str	r3, [r7, #12]
 800f854:	e7fe      	b.n	800f854 <pvPortMalloc+0x178>
	return pvReturn;
 800f856:	69fb      	ldr	r3, [r7, #28]
}
 800f858:	4618      	mov	r0, r3
 800f85a:	3728      	adds	r7, #40	; 0x28
 800f85c:	46bd      	mov	sp, r7
 800f85e:	bd80      	pop	{r7, pc}
 800f860:	20008560 	.word	0x20008560
 800f864:	2000856c 	.word	0x2000856c
 800f868:	20008564 	.word	0x20008564
 800f86c:	20008558 	.word	0x20008558
 800f870:	20008568 	.word	0x20008568

0800f874 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f874:	b580      	push	{r7, lr}
 800f876:	b086      	sub	sp, #24
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d04a      	beq.n	800f91c <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f886:	2308      	movs	r3, #8
 800f888:	425b      	negs	r3, r3
 800f88a:	697a      	ldr	r2, [r7, #20]
 800f88c:	4413      	add	r3, r2
 800f88e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f890:	697b      	ldr	r3, [r7, #20]
 800f892:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f894:	693b      	ldr	r3, [r7, #16]
 800f896:	685a      	ldr	r2, [r3, #4]
 800f898:	4b22      	ldr	r3, [pc, #136]	; (800f924 <vPortFree+0xb0>)
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	4013      	ands	r3, r2
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d10b      	bne.n	800f8ba <vPortFree+0x46>
 800f8a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8a6:	b672      	cpsid	i
 800f8a8:	f383 8811 	msr	BASEPRI, r3
 800f8ac:	f3bf 8f6f 	isb	sy
 800f8b0:	f3bf 8f4f 	dsb	sy
 800f8b4:	b662      	cpsie	i
 800f8b6:	60fb      	str	r3, [r7, #12]
 800f8b8:	e7fe      	b.n	800f8b8 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f8ba:	693b      	ldr	r3, [r7, #16]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d00b      	beq.n	800f8da <vPortFree+0x66>
 800f8c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8c6:	b672      	cpsid	i
 800f8c8:	f383 8811 	msr	BASEPRI, r3
 800f8cc:	f3bf 8f6f 	isb	sy
 800f8d0:	f3bf 8f4f 	dsb	sy
 800f8d4:	b662      	cpsie	i
 800f8d6:	60bb      	str	r3, [r7, #8]
 800f8d8:	e7fe      	b.n	800f8d8 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f8da:	693b      	ldr	r3, [r7, #16]
 800f8dc:	685a      	ldr	r2, [r3, #4]
 800f8de:	4b11      	ldr	r3, [pc, #68]	; (800f924 <vPortFree+0xb0>)
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	4013      	ands	r3, r2
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d019      	beq.n	800f91c <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f8e8:	693b      	ldr	r3, [r7, #16]
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d115      	bne.n	800f91c <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f8f0:	693b      	ldr	r3, [r7, #16]
 800f8f2:	685a      	ldr	r2, [r3, #4]
 800f8f4:	4b0b      	ldr	r3, [pc, #44]	; (800f924 <vPortFree+0xb0>)
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	43db      	mvns	r3, r3
 800f8fa:	401a      	ands	r2, r3
 800f8fc:	693b      	ldr	r3, [r7, #16]
 800f8fe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f900:	f7fe fe96 	bl	800e630 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f904:	693b      	ldr	r3, [r7, #16]
 800f906:	685a      	ldr	r2, [r3, #4]
 800f908:	4b07      	ldr	r3, [pc, #28]	; (800f928 <vPortFree+0xb4>)
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	4413      	add	r3, r2
 800f90e:	4a06      	ldr	r2, [pc, #24]	; (800f928 <vPortFree+0xb4>)
 800f910:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f912:	6938      	ldr	r0, [r7, #16]
 800f914:	f000 f86c 	bl	800f9f0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800f918:	f7fe fe98 	bl	800e64c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f91c:	bf00      	nop
 800f91e:	3718      	adds	r7, #24
 800f920:	46bd      	mov	sp, r7
 800f922:	bd80      	pop	{r7, pc}
 800f924:	2000856c 	.word	0x2000856c
 800f928:	20008564 	.word	0x20008564

0800f92c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f92c:	b480      	push	{r7}
 800f92e:	b085      	sub	sp, #20
 800f930:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f932:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f936:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f938:	4b27      	ldr	r3, [pc, #156]	; (800f9d8 <prvHeapInit+0xac>)
 800f93a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	f003 0307 	and.w	r3, r3, #7
 800f942:	2b00      	cmp	r3, #0
 800f944:	d00c      	beq.n	800f960 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	3307      	adds	r3, #7
 800f94a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	f023 0307 	bic.w	r3, r3, #7
 800f952:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f954:	68ba      	ldr	r2, [r7, #8]
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	1ad3      	subs	r3, r2, r3
 800f95a:	4a1f      	ldr	r2, [pc, #124]	; (800f9d8 <prvHeapInit+0xac>)
 800f95c:	4413      	add	r3, r2
 800f95e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f964:	4a1d      	ldr	r2, [pc, #116]	; (800f9dc <prvHeapInit+0xb0>)
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f96a:	4b1c      	ldr	r3, [pc, #112]	; (800f9dc <prvHeapInit+0xb0>)
 800f96c:	2200      	movs	r2, #0
 800f96e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	68ba      	ldr	r2, [r7, #8]
 800f974:	4413      	add	r3, r2
 800f976:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f978:	2208      	movs	r2, #8
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	1a9b      	subs	r3, r3, r2
 800f97e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	f023 0307 	bic.w	r3, r3, #7
 800f986:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	4a15      	ldr	r2, [pc, #84]	; (800f9e0 <prvHeapInit+0xb4>)
 800f98c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f98e:	4b14      	ldr	r3, [pc, #80]	; (800f9e0 <prvHeapInit+0xb4>)
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	2200      	movs	r2, #0
 800f994:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f996:	4b12      	ldr	r3, [pc, #72]	; (800f9e0 <prvHeapInit+0xb4>)
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	2200      	movs	r2, #0
 800f99c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f9a2:	683b      	ldr	r3, [r7, #0]
 800f9a4:	68fa      	ldr	r2, [r7, #12]
 800f9a6:	1ad2      	subs	r2, r2, r3
 800f9a8:	683b      	ldr	r3, [r7, #0]
 800f9aa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f9ac:	4b0c      	ldr	r3, [pc, #48]	; (800f9e0 <prvHeapInit+0xb4>)
 800f9ae:	681a      	ldr	r2, [r3, #0]
 800f9b0:	683b      	ldr	r3, [r7, #0]
 800f9b2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f9b4:	683b      	ldr	r3, [r7, #0]
 800f9b6:	685b      	ldr	r3, [r3, #4]
 800f9b8:	4a0a      	ldr	r2, [pc, #40]	; (800f9e4 <prvHeapInit+0xb8>)
 800f9ba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f9bc:	683b      	ldr	r3, [r7, #0]
 800f9be:	685b      	ldr	r3, [r3, #4]
 800f9c0:	4a09      	ldr	r2, [pc, #36]	; (800f9e8 <prvHeapInit+0xbc>)
 800f9c2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f9c4:	4b09      	ldr	r3, [pc, #36]	; (800f9ec <prvHeapInit+0xc0>)
 800f9c6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f9ca:	601a      	str	r2, [r3, #0]
}
 800f9cc:	bf00      	nop
 800f9ce:	3714      	adds	r7, #20
 800f9d0:	46bd      	mov	sp, r7
 800f9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d6:	4770      	bx	lr
 800f9d8:	20000558 	.word	0x20000558
 800f9dc:	20008558 	.word	0x20008558
 800f9e0:	20008560 	.word	0x20008560
 800f9e4:	20008568 	.word	0x20008568
 800f9e8:	20008564 	.word	0x20008564
 800f9ec:	2000856c 	.word	0x2000856c

0800f9f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f9f0:	b480      	push	{r7}
 800f9f2:	b085      	sub	sp, #20
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f9f8:	4b28      	ldr	r3, [pc, #160]	; (800fa9c <prvInsertBlockIntoFreeList+0xac>)
 800f9fa:	60fb      	str	r3, [r7, #12]
 800f9fc:	e002      	b.n	800fa04 <prvInsertBlockIntoFreeList+0x14>
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	60fb      	str	r3, [r7, #12]
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	687a      	ldr	r2, [r7, #4]
 800fa0a:	429a      	cmp	r2, r3
 800fa0c:	d8f7      	bhi.n	800f9fe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	685b      	ldr	r3, [r3, #4]
 800fa16:	68ba      	ldr	r2, [r7, #8]
 800fa18:	4413      	add	r3, r2
 800fa1a:	687a      	ldr	r2, [r7, #4]
 800fa1c:	429a      	cmp	r2, r3
 800fa1e:	d108      	bne.n	800fa32 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	685a      	ldr	r2, [r3, #4]
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	685b      	ldr	r3, [r3, #4]
 800fa28:	441a      	add	r2, r3
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	685b      	ldr	r3, [r3, #4]
 800fa3a:	68ba      	ldr	r2, [r7, #8]
 800fa3c:	441a      	add	r2, r3
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	429a      	cmp	r2, r3
 800fa44:	d118      	bne.n	800fa78 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	681a      	ldr	r2, [r3, #0]
 800fa4a:	4b15      	ldr	r3, [pc, #84]	; (800faa0 <prvInsertBlockIntoFreeList+0xb0>)
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	429a      	cmp	r2, r3
 800fa50:	d00d      	beq.n	800fa6e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	685a      	ldr	r2, [r3, #4]
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	685b      	ldr	r3, [r3, #4]
 800fa5c:	441a      	add	r2, r3
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	681a      	ldr	r2, [r3, #0]
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	601a      	str	r2, [r3, #0]
 800fa6c:	e008      	b.n	800fa80 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fa6e:	4b0c      	ldr	r3, [pc, #48]	; (800faa0 <prvInsertBlockIntoFreeList+0xb0>)
 800fa70:	681a      	ldr	r2, [r3, #0]
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	601a      	str	r2, [r3, #0]
 800fa76:	e003      	b.n	800fa80 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	681a      	ldr	r2, [r3, #0]
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fa80:	68fa      	ldr	r2, [r7, #12]
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	429a      	cmp	r2, r3
 800fa86:	d002      	beq.n	800fa8e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	687a      	ldr	r2, [r7, #4]
 800fa8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fa8e:	bf00      	nop
 800fa90:	3714      	adds	r7, #20
 800fa92:	46bd      	mov	sp, r7
 800fa94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa98:	4770      	bx	lr
 800fa9a:	bf00      	nop
 800fa9c:	20008558 	.word	0x20008558
 800faa0:	20008560 	.word	0x20008560

0800faa4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800faa4:	b580      	push	{r7, lr}
 800faa6:	b08c      	sub	sp, #48	; 0x30
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	4a51      	ldr	r2, [pc, #324]	; (800fbf4 <I2Cx_MspInit+0x150>)
 800fab0:	4293      	cmp	r3, r2
 800fab2:	d14d      	bne.n	800fb50 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800fab4:	4b50      	ldr	r3, [pc, #320]	; (800fbf8 <I2Cx_MspInit+0x154>)
 800fab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fab8:	4a4f      	ldr	r2, [pc, #316]	; (800fbf8 <I2Cx_MspInit+0x154>)
 800faba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fabe:	6313      	str	r3, [r2, #48]	; 0x30
 800fac0:	4b4d      	ldr	r3, [pc, #308]	; (800fbf8 <I2Cx_MspInit+0x154>)
 800fac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fac8:	61bb      	str	r3, [r7, #24]
 800faca:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 800facc:	2380      	movs	r3, #128	; 0x80
 800face:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800fad0:	2312      	movs	r3, #18
 800fad2:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800fad4:	2300      	movs	r3, #0
 800fad6:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800fad8:	2302      	movs	r3, #2
 800fada:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800fadc:	2304      	movs	r3, #4
 800fade:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800fae0:	f107 031c 	add.w	r3, r7, #28
 800fae4:	4619      	mov	r1, r3
 800fae6:	4845      	ldr	r0, [pc, #276]	; (800fbfc <I2Cx_MspInit+0x158>)
 800fae8:	f7f5 ff7c 	bl	80059e4 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800faec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800faf0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800faf2:	f107 031c 	add.w	r3, r7, #28
 800faf6:	4619      	mov	r1, r3
 800faf8:	4840      	ldr	r0, [pc, #256]	; (800fbfc <I2Cx_MspInit+0x158>)
 800fafa:	f7f5 ff73 	bl	80059e4 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800fafe:	4b3e      	ldr	r3, [pc, #248]	; (800fbf8 <I2Cx_MspInit+0x154>)
 800fb00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb02:	4a3d      	ldr	r2, [pc, #244]	; (800fbf8 <I2Cx_MspInit+0x154>)
 800fb04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800fb08:	6413      	str	r3, [r2, #64]	; 0x40
 800fb0a:	4b3b      	ldr	r3, [pc, #236]	; (800fbf8 <I2Cx_MspInit+0x154>)
 800fb0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fb12:	617b      	str	r3, [r7, #20]
 800fb14:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800fb16:	4b38      	ldr	r3, [pc, #224]	; (800fbf8 <I2Cx_MspInit+0x154>)
 800fb18:	6a1b      	ldr	r3, [r3, #32]
 800fb1a:	4a37      	ldr	r2, [pc, #220]	; (800fbf8 <I2Cx_MspInit+0x154>)
 800fb1c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800fb20:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800fb22:	4b35      	ldr	r3, [pc, #212]	; (800fbf8 <I2Cx_MspInit+0x154>)
 800fb24:	6a1b      	ldr	r3, [r3, #32]
 800fb26:	4a34      	ldr	r2, [pc, #208]	; (800fbf8 <I2Cx_MspInit+0x154>)
 800fb28:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800fb2c:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800fb2e:	2200      	movs	r2, #0
 800fb30:	210f      	movs	r1, #15
 800fb32:	2048      	movs	r0, #72	; 0x48
 800fb34:	f7f5 f928 	bl	8004d88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 800fb38:	2048      	movs	r0, #72	; 0x48
 800fb3a:	f7f5 f941 	bl	8004dc0 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800fb3e:	2200      	movs	r2, #0
 800fb40:	210f      	movs	r1, #15
 800fb42:	2049      	movs	r0, #73	; 0x49
 800fb44:	f7f5 f920 	bl	8004d88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 800fb48:	2049      	movs	r0, #73	; 0x49
 800fb4a:	f7f5 f939 	bl	8004dc0 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800fb4e:	e04d      	b.n	800fbec <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800fb50:	4b29      	ldr	r3, [pc, #164]	; (800fbf8 <I2Cx_MspInit+0x154>)
 800fb52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb54:	4a28      	ldr	r2, [pc, #160]	; (800fbf8 <I2Cx_MspInit+0x154>)
 800fb56:	f043 0302 	orr.w	r3, r3, #2
 800fb5a:	6313      	str	r3, [r2, #48]	; 0x30
 800fb5c:	4b26      	ldr	r3, [pc, #152]	; (800fbf8 <I2Cx_MspInit+0x154>)
 800fb5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb60:	f003 0302 	and.w	r3, r3, #2
 800fb64:	613b      	str	r3, [r7, #16]
 800fb66:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 800fb68:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fb6c:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800fb6e:	2312      	movs	r3, #18
 800fb70:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800fb72:	2300      	movs	r3, #0
 800fb74:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800fb76:	2302      	movs	r3, #2
 800fb78:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800fb7a:	2304      	movs	r3, #4
 800fb7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800fb7e:	f107 031c 	add.w	r3, r7, #28
 800fb82:	4619      	mov	r1, r3
 800fb84:	481e      	ldr	r0, [pc, #120]	; (800fc00 <I2Cx_MspInit+0x15c>)
 800fb86:	f7f5 ff2d 	bl	80059e4 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800fb8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fb8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800fb90:	f107 031c 	add.w	r3, r7, #28
 800fb94:	4619      	mov	r1, r3
 800fb96:	481a      	ldr	r0, [pc, #104]	; (800fc00 <I2Cx_MspInit+0x15c>)
 800fb98:	f7f5 ff24 	bl	80059e4 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800fb9c:	4b16      	ldr	r3, [pc, #88]	; (800fbf8 <I2Cx_MspInit+0x154>)
 800fb9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fba0:	4a15      	ldr	r2, [pc, #84]	; (800fbf8 <I2Cx_MspInit+0x154>)
 800fba2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800fba6:	6413      	str	r3, [r2, #64]	; 0x40
 800fba8:	4b13      	ldr	r3, [pc, #76]	; (800fbf8 <I2Cx_MspInit+0x154>)
 800fbaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fbac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800fbb0:	60fb      	str	r3, [r7, #12]
 800fbb2:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 800fbb4:	4b10      	ldr	r3, [pc, #64]	; (800fbf8 <I2Cx_MspInit+0x154>)
 800fbb6:	6a1b      	ldr	r3, [r3, #32]
 800fbb8:	4a0f      	ldr	r2, [pc, #60]	; (800fbf8 <I2Cx_MspInit+0x154>)
 800fbba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800fbbe:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 800fbc0:	4b0d      	ldr	r3, [pc, #52]	; (800fbf8 <I2Cx_MspInit+0x154>)
 800fbc2:	6a1b      	ldr	r3, [r3, #32]
 800fbc4:	4a0c      	ldr	r2, [pc, #48]	; (800fbf8 <I2Cx_MspInit+0x154>)
 800fbc6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fbca:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800fbcc:	2200      	movs	r2, #0
 800fbce:	210f      	movs	r1, #15
 800fbd0:	201f      	movs	r0, #31
 800fbd2:	f7f5 f8d9 	bl	8004d88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800fbd6:	201f      	movs	r0, #31
 800fbd8:	f7f5 f8f2 	bl	8004dc0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800fbdc:	2200      	movs	r2, #0
 800fbde:	210f      	movs	r1, #15
 800fbe0:	2020      	movs	r0, #32
 800fbe2:	f7f5 f8d1 	bl	8004d88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800fbe6:	2020      	movs	r0, #32
 800fbe8:	f7f5 f8ea 	bl	8004dc0 <HAL_NVIC_EnableIRQ>
}
 800fbec:	bf00      	nop
 800fbee:	3730      	adds	r7, #48	; 0x30
 800fbf0:	46bd      	mov	sp, r7
 800fbf2:	bd80      	pop	{r7, pc}
 800fbf4:	20008570 	.word	0x20008570
 800fbf8:	40023800 	.word	0x40023800
 800fbfc:	40021c00 	.word	0x40021c00
 800fc00:	40020400 	.word	0x40020400

0800fc04 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800fc04:	b580      	push	{r7, lr}
 800fc06:	b082      	sub	sp, #8
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800fc0c:	6878      	ldr	r0, [r7, #4]
 800fc0e:	f7f6 fbc7 	bl	80063a0 <HAL_I2C_GetState>
 800fc12:	4603      	mov	r3, r0
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d125      	bne.n	800fc64 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	4a14      	ldr	r2, [pc, #80]	; (800fc6c <I2Cx_Init+0x68>)
 800fc1c:	4293      	cmp	r3, r2
 800fc1e:	d103      	bne.n	800fc28 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	4a13      	ldr	r2, [pc, #76]	; (800fc70 <I2Cx_Init+0x6c>)
 800fc24:	601a      	str	r2, [r3, #0]
 800fc26:	e002      	b.n	800fc2e <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	4a12      	ldr	r2, [pc, #72]	; (800fc74 <I2Cx_Init+0x70>)
 800fc2c:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	4a11      	ldr	r2, [pc, #68]	; (800fc78 <I2Cx_Init+0x74>)
 800fc32:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	2200      	movs	r2, #0
 800fc38:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	2201      	movs	r2, #1
 800fc3e:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	2200      	movs	r2, #0
 800fc44:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	2200      	movs	r2, #0
 800fc4a:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	2200      	movs	r2, #0
 800fc50:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	2200      	movs	r2, #0
 800fc56:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 800fc58:	6878      	ldr	r0, [r7, #4]
 800fc5a:	f7ff ff23 	bl	800faa4 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800fc5e:	6878      	ldr	r0, [r7, #4]
 800fc60:	f7f6 f89c 	bl	8005d9c <HAL_I2C_Init>
  }
}
 800fc64:	bf00      	nop
 800fc66:	3708      	adds	r7, #8
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	bd80      	pop	{r7, pc}
 800fc6c:	20008570 	.word	0x20008570
 800fc70:	40005c00 	.word	0x40005c00
 800fc74:	40005400 	.word	0x40005400
 800fc78:	40912732 	.word	0x40912732

0800fc7c <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b08a      	sub	sp, #40	; 0x28
 800fc80:	af04      	add	r7, sp, #16
 800fc82:	60f8      	str	r0, [r7, #12]
 800fc84:	4608      	mov	r0, r1
 800fc86:	4611      	mov	r1, r2
 800fc88:	461a      	mov	r2, r3
 800fc8a:	4603      	mov	r3, r0
 800fc8c:	72fb      	strb	r3, [r7, #11]
 800fc8e:	460b      	mov	r3, r1
 800fc90:	813b      	strh	r3, [r7, #8]
 800fc92:	4613      	mov	r3, r2
 800fc94:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800fc96:	2300      	movs	r3, #0
 800fc98:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800fc9a:	7afb      	ldrb	r3, [r7, #11]
 800fc9c:	b299      	uxth	r1, r3
 800fc9e:	88f8      	ldrh	r0, [r7, #6]
 800fca0:	893a      	ldrh	r2, [r7, #8]
 800fca2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fca6:	9302      	str	r3, [sp, #8]
 800fca8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fcaa:	9301      	str	r3, [sp, #4]
 800fcac:	6a3b      	ldr	r3, [r7, #32]
 800fcae:	9300      	str	r3, [sp, #0]
 800fcb0:	4603      	mov	r3, r0
 800fcb2:	68f8      	ldr	r0, [r7, #12]
 800fcb4:	f7f6 fa5a 	bl	800616c <HAL_I2C_Mem_Read>
 800fcb8:	4603      	mov	r3, r0
 800fcba:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800fcbc:	7dfb      	ldrb	r3, [r7, #23]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d004      	beq.n	800fccc <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800fcc2:	7afb      	ldrb	r3, [r7, #11]
 800fcc4:	4619      	mov	r1, r3
 800fcc6:	68f8      	ldr	r0, [r7, #12]
 800fcc8:	f000 f832 	bl	800fd30 <I2Cx_Error>
  }
  return status;    
 800fccc:	7dfb      	ldrb	r3, [r7, #23]
}
 800fcce:	4618      	mov	r0, r3
 800fcd0:	3718      	adds	r7, #24
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	bd80      	pop	{r7, pc}

0800fcd6 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800fcd6:	b580      	push	{r7, lr}
 800fcd8:	b08a      	sub	sp, #40	; 0x28
 800fcda:	af04      	add	r7, sp, #16
 800fcdc:	60f8      	str	r0, [r7, #12]
 800fcde:	4608      	mov	r0, r1
 800fce0:	4611      	mov	r1, r2
 800fce2:	461a      	mov	r2, r3
 800fce4:	4603      	mov	r3, r0
 800fce6:	72fb      	strb	r3, [r7, #11]
 800fce8:	460b      	mov	r3, r1
 800fcea:	813b      	strh	r3, [r7, #8]
 800fcec:	4613      	mov	r3, r2
 800fcee:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800fcf0:	2300      	movs	r3, #0
 800fcf2:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800fcf4:	7afb      	ldrb	r3, [r7, #11]
 800fcf6:	b299      	uxth	r1, r3
 800fcf8:	88f8      	ldrh	r0, [r7, #6]
 800fcfa:	893a      	ldrh	r2, [r7, #8]
 800fcfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fd00:	9302      	str	r3, [sp, #8]
 800fd02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fd04:	9301      	str	r3, [sp, #4]
 800fd06:	6a3b      	ldr	r3, [r7, #32]
 800fd08:	9300      	str	r3, [sp, #0]
 800fd0a:	4603      	mov	r3, r0
 800fd0c:	68f8      	ldr	r0, [r7, #12]
 800fd0e:	f7f6 f919 	bl	8005f44 <HAL_I2C_Mem_Write>
 800fd12:	4603      	mov	r3, r0
 800fd14:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800fd16:	7dfb      	ldrb	r3, [r7, #23]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d004      	beq.n	800fd26 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800fd1c:	7afb      	ldrb	r3, [r7, #11]
 800fd1e:	4619      	mov	r1, r3
 800fd20:	68f8      	ldr	r0, [r7, #12]
 800fd22:	f000 f805 	bl	800fd30 <I2Cx_Error>
  }
  return status;
 800fd26:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd28:	4618      	mov	r0, r3
 800fd2a:	3718      	adds	r7, #24
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	bd80      	pop	{r7, pc}

0800fd30 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b082      	sub	sp, #8
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	6078      	str	r0, [r7, #4]
 800fd38:	460b      	mov	r3, r1
 800fd3a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800fd3c:	6878      	ldr	r0, [r7, #4]
 800fd3e:	f7f6 f8bd 	bl	8005ebc <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800fd42:	6878      	ldr	r0, [r7, #4]
 800fd44:	f7ff ff5e 	bl	800fc04 <I2Cx_Init>
}
 800fd48:	bf00      	nop
 800fd4a:	3708      	adds	r7, #8
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	bd80      	pop	{r7, pc}

0800fd50 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 800fd54:	4802      	ldr	r0, [pc, #8]	; (800fd60 <TS_IO_Init+0x10>)
 800fd56:	f7ff ff55 	bl	800fc04 <I2Cx_Init>
}
 800fd5a:	bf00      	nop
 800fd5c:	bd80      	pop	{r7, pc}
 800fd5e:	bf00      	nop
 800fd60:	20008570 	.word	0x20008570

0800fd64 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800fd64:	b580      	push	{r7, lr}
 800fd66:	b084      	sub	sp, #16
 800fd68:	af02      	add	r7, sp, #8
 800fd6a:	4603      	mov	r3, r0
 800fd6c:	71fb      	strb	r3, [r7, #7]
 800fd6e:	460b      	mov	r3, r1
 800fd70:	71bb      	strb	r3, [r7, #6]
 800fd72:	4613      	mov	r3, r2
 800fd74:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800fd76:	79bb      	ldrb	r3, [r7, #6]
 800fd78:	b29a      	uxth	r2, r3
 800fd7a:	79f9      	ldrb	r1, [r7, #7]
 800fd7c:	2301      	movs	r3, #1
 800fd7e:	9301      	str	r3, [sp, #4]
 800fd80:	1d7b      	adds	r3, r7, #5
 800fd82:	9300      	str	r3, [sp, #0]
 800fd84:	2301      	movs	r3, #1
 800fd86:	4803      	ldr	r0, [pc, #12]	; (800fd94 <TS_IO_Write+0x30>)
 800fd88:	f7ff ffa5 	bl	800fcd6 <I2Cx_WriteMultiple>
}
 800fd8c:	bf00      	nop
 800fd8e:	3708      	adds	r7, #8
 800fd90:	46bd      	mov	sp, r7
 800fd92:	bd80      	pop	{r7, pc}
 800fd94:	20008570 	.word	0x20008570

0800fd98 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b086      	sub	sp, #24
 800fd9c:	af02      	add	r7, sp, #8
 800fd9e:	4603      	mov	r3, r0
 800fda0:	460a      	mov	r2, r1
 800fda2:	71fb      	strb	r3, [r7, #7]
 800fda4:	4613      	mov	r3, r2
 800fda6:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800fda8:	2300      	movs	r3, #0
 800fdaa:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800fdac:	79bb      	ldrb	r3, [r7, #6]
 800fdae:	b29a      	uxth	r2, r3
 800fdb0:	79f9      	ldrb	r1, [r7, #7]
 800fdb2:	2301      	movs	r3, #1
 800fdb4:	9301      	str	r3, [sp, #4]
 800fdb6:	f107 030f 	add.w	r3, r7, #15
 800fdba:	9300      	str	r3, [sp, #0]
 800fdbc:	2301      	movs	r3, #1
 800fdbe:	4804      	ldr	r0, [pc, #16]	; (800fdd0 <TS_IO_Read+0x38>)
 800fdc0:	f7ff ff5c 	bl	800fc7c <I2Cx_ReadMultiple>

  return read_value;
 800fdc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdc6:	4618      	mov	r0, r3
 800fdc8:	3710      	adds	r7, #16
 800fdca:	46bd      	mov	sp, r7
 800fdcc:	bd80      	pop	{r7, pc}
 800fdce:	bf00      	nop
 800fdd0:	20008570 	.word	0x20008570

0800fdd4 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	b082      	sub	sp, #8
 800fdd8:	af00      	add	r7, sp, #0
 800fdda:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800fddc:	6878      	ldr	r0, [r7, #4]
 800fdde:	f7f3 fecd 	bl	8003b7c <HAL_Delay>
}
 800fde2:	bf00      	nop
 800fde4:	3708      	adds	r7, #8
 800fde6:	46bd      	mov	sp, r7
 800fde8:	bd80      	pop	{r7, pc}
	...

0800fdec <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 800fdec:	b580      	push	{r7, lr}
 800fdee:	b084      	sub	sp, #16
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	4603      	mov	r3, r0
 800fdf4:	460a      	mov	r2, r1
 800fdf6:	80fb      	strh	r3, [r7, #6]
 800fdf8:	4613      	mov	r3, r2
 800fdfa:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 800fdfc:	2300      	movs	r3, #0
 800fdfe:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 800fe00:	4a14      	ldr	r2, [pc, #80]	; (800fe54 <BSP_TS_Init+0x68>)
 800fe02:	88fb      	ldrh	r3, [r7, #6]
 800fe04:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 800fe06:	4a14      	ldr	r2, [pc, #80]	; (800fe58 <BSP_TS_Init+0x6c>)
 800fe08:	88bb      	ldrh	r3, [r7, #4]
 800fe0a:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 800fe0c:	4b13      	ldr	r3, [pc, #76]	; (800fe5c <BSP_TS_Init+0x70>)
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	2070      	movs	r0, #112	; 0x70
 800fe12:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 800fe14:	4b11      	ldr	r3, [pc, #68]	; (800fe5c <BSP_TS_Init+0x70>)
 800fe16:	685b      	ldr	r3, [r3, #4]
 800fe18:	2070      	movs	r0, #112	; 0x70
 800fe1a:	4798      	blx	r3
 800fe1c:	4603      	mov	r3, r0
 800fe1e:	2b51      	cmp	r3, #81	; 0x51
 800fe20:	d111      	bne.n	800fe46 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 800fe22:	4b0f      	ldr	r3, [pc, #60]	; (800fe60 <BSP_TS_Init+0x74>)
 800fe24:	4a0d      	ldr	r2, [pc, #52]	; (800fe5c <BSP_TS_Init+0x70>)
 800fe26:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 800fe28:	4b0e      	ldr	r3, [pc, #56]	; (800fe64 <BSP_TS_Init+0x78>)
 800fe2a:	2270      	movs	r2, #112	; 0x70
 800fe2c:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 800fe2e:	4b0e      	ldr	r3, [pc, #56]	; (800fe68 <BSP_TS_Init+0x7c>)
 800fe30:	2208      	movs	r2, #8
 800fe32:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 800fe34:	4b0a      	ldr	r3, [pc, #40]	; (800fe60 <BSP_TS_Init+0x74>)
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	68db      	ldr	r3, [r3, #12]
 800fe3a:	4a0a      	ldr	r2, [pc, #40]	; (800fe64 <BSP_TS_Init+0x78>)
 800fe3c:	7812      	ldrb	r2, [r2, #0]
 800fe3e:	b292      	uxth	r2, r2
 800fe40:	4610      	mov	r0, r2
 800fe42:	4798      	blx	r3
 800fe44:	e001      	b.n	800fe4a <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 800fe46:	2303      	movs	r3, #3
 800fe48:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800fe4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	3710      	adds	r7, #16
 800fe50:	46bd      	mov	sp, r7
 800fe52:	bd80      	pop	{r7, pc}
 800fe54:	200085c0 	.word	0x200085c0
 800fe58:	200085c2 	.word	0x200085c2
 800fe5c:	2000005c 	.word	0x2000005c
 800fe60:	200085bc 	.word	0x200085bc
 800fe64:	200085c5 	.word	0x200085c5
 800fe68:	200085c4 	.word	0x200085c4

0800fe6c <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 800fe6c:	b590      	push	{r4, r7, lr}
 800fe6e:	b097      	sub	sp, #92	; 0x5c
 800fe70:	af02      	add	r7, sp, #8
 800fe72:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 800fe74:	2300      	movs	r3, #0
 800fe76:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 800fe7a:	2300      	movs	r3, #0
 800fe7c:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 800fe7e:	2300      	movs	r3, #0
 800fe80:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 800fe82:	2300      	movs	r3, #0
 800fe84:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 800fe86:	4b97      	ldr	r3, [pc, #604]	; (80100e4 <BSP_TS_GetState+0x278>)
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	691b      	ldr	r3, [r3, #16]
 800fe8c:	4a96      	ldr	r2, [pc, #600]	; (80100e8 <BSP_TS_GetState+0x27c>)
 800fe8e:	7812      	ldrb	r2, [r2, #0]
 800fe90:	b292      	uxth	r2, r2
 800fe92:	4610      	mov	r0, r2
 800fe94:	4798      	blx	r3
 800fe96:	4603      	mov	r3, r0
 800fe98:	461a      	mov	r2, r3
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	781b      	ldrb	r3, [r3, #0]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	f000 81a8 	beq.w	80101f8 <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 800fea8:	2300      	movs	r3, #0
 800feaa:	64bb      	str	r3, [r7, #72]	; 0x48
 800feac:	e197      	b.n	80101de <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 800feae:	4b8d      	ldr	r3, [pc, #564]	; (80100e4 <BSP_TS_GetState+0x278>)
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	695b      	ldr	r3, [r3, #20]
 800feb4:	4a8c      	ldr	r2, [pc, #560]	; (80100e8 <BSP_TS_GetState+0x27c>)
 800feb6:	7812      	ldrb	r2, [r2, #0]
 800feb8:	b290      	uxth	r0, r2
 800feba:	f107 0120 	add.w	r1, r7, #32
 800febe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fec0:	0052      	lsls	r2, r2, #1
 800fec2:	188c      	adds	r4, r1, r2
 800fec4:	f107 0114 	add.w	r1, r7, #20
 800fec8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800feca:	0052      	lsls	r2, r2, #1
 800fecc:	440a      	add	r2, r1
 800fece:	4621      	mov	r1, r4
 800fed0:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 800fed2:	4b86      	ldr	r3, [pc, #536]	; (80100ec <BSP_TS_GetState+0x280>)
 800fed4:	781b      	ldrb	r3, [r3, #0]
 800fed6:	2b01      	cmp	r3, #1
 800fed8:	d11b      	bne.n	800ff12 <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 800feda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fedc:	005b      	lsls	r3, r3, #1
 800fede:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fee2:	4413      	add	r3, r2
 800fee4:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 800fee8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800feea:	005b      	lsls	r3, r3, #1
 800feec:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800fef0:	440b      	add	r3, r1
 800fef2:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 800fef6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fef8:	005b      	lsls	r3, r3, #1
 800fefa:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fefe:	4413      	add	r3, r2
 800ff00:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 800ff04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff06:	005b      	lsls	r3, r3, #1
 800ff08:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800ff0c:	440b      	add	r3, r1
 800ff0e:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 800ff12:	4b76      	ldr	r3, [pc, #472]	; (80100ec <BSP_TS_GetState+0x280>)
 800ff14:	781b      	ldrb	r3, [r3, #0]
 800ff16:	f003 0302 	and.w	r3, r3, #2
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d010      	beq.n	800ff40 <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 800ff1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff20:	005b      	lsls	r3, r3, #1
 800ff22:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800ff26:	4413      	add	r3, r2
 800ff28:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 800ff2c:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800ff30:	b29a      	uxth	r2, r3
 800ff32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff34:	005b      	lsls	r3, r3, #1
 800ff36:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800ff3a:	440b      	add	r3, r1
 800ff3c:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 800ff40:	4b6a      	ldr	r3, [pc, #424]	; (80100ec <BSP_TS_GetState+0x280>)
 800ff42:	781b      	ldrb	r3, [r3, #0]
 800ff44:	f003 0304 	and.w	r3, r3, #4
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d010      	beq.n	800ff6e <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 800ff4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff4e:	005b      	lsls	r3, r3, #1
 800ff50:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800ff54:	4413      	add	r3, r2
 800ff56:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 800ff5a:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800ff5e:	b29a      	uxth	r2, r3
 800ff60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff62:	005b      	lsls	r3, r3, #1
 800ff64:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800ff68:	440b      	add	r3, r1
 800ff6a:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 800ff6e:	4b5f      	ldr	r3, [pc, #380]	; (80100ec <BSP_TS_GetState+0x280>)
 800ff70:	781b      	ldrb	r3, [r3, #0]
 800ff72:	f003 0308 	and.w	r3, r3, #8
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d01b      	beq.n	800ffb2 <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 800ff7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff7c:	005b      	lsls	r3, r3, #1
 800ff7e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800ff82:	4413      	add	r3, r2
 800ff84:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 800ff88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff8a:	005b      	lsls	r3, r3, #1
 800ff8c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800ff90:	440b      	add	r3, r1
 800ff92:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 800ff96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff98:	005b      	lsls	r3, r3, #1
 800ff9a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800ff9e:	4413      	add	r3, r2
 800ffa0:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 800ffa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ffa6:	005b      	lsls	r3, r3, #1
 800ffa8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800ffac:	440b      	add	r3, r1
 800ffae:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 800ffb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ffb4:	005b      	lsls	r3, r3, #1
 800ffb6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800ffba:	4413      	add	r3, r2
 800ffbc:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800ffc0:	4619      	mov	r1, r3
 800ffc2:	4a4b      	ldr	r2, [pc, #300]	; (80100f0 <BSP_TS_GetState+0x284>)
 800ffc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ffc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ffca:	4299      	cmp	r1, r3
 800ffcc:	d90e      	bls.n	800ffec <BSP_TS_GetState+0x180>
 800ffce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ffd0:	005b      	lsls	r3, r3, #1
 800ffd2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800ffd6:	4413      	add	r3, r2
 800ffd8:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 800ffdc:	4944      	ldr	r1, [pc, #272]	; (80100f0 <BSP_TS_GetState+0x284>)
 800ffde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ffe0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ffe4:	b29b      	uxth	r3, r3
 800ffe6:	1ad3      	subs	r3, r2, r3
 800ffe8:	b29b      	uxth	r3, r3
 800ffea:	e00d      	b.n	8010008 <BSP_TS_GetState+0x19c>
 800ffec:	4a40      	ldr	r2, [pc, #256]	; (80100f0 <BSP_TS_GetState+0x284>)
 800ffee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fff4:	b29a      	uxth	r2, r3
 800fff6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fff8:	005b      	lsls	r3, r3, #1
 800fffa:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800fffe:	440b      	add	r3, r1
 8010000:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8010004:	1ad3      	subs	r3, r2, r3
 8010006:	b29b      	uxth	r3, r3
 8010008:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 801000c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801000e:	005b      	lsls	r3, r3, #1
 8010010:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8010014:	4413      	add	r3, r2
 8010016:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 801001a:	4619      	mov	r1, r3
 801001c:	4a35      	ldr	r2, [pc, #212]	; (80100f4 <BSP_TS_GetState+0x288>)
 801001e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010024:	4299      	cmp	r1, r3
 8010026:	d90e      	bls.n	8010046 <BSP_TS_GetState+0x1da>
 8010028:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801002a:	005b      	lsls	r3, r3, #1
 801002c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8010030:	4413      	add	r3, r2
 8010032:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8010036:	492f      	ldr	r1, [pc, #188]	; (80100f4 <BSP_TS_GetState+0x288>)
 8010038:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801003a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801003e:	b29b      	uxth	r3, r3
 8010040:	1ad3      	subs	r3, r2, r3
 8010042:	b29b      	uxth	r3, r3
 8010044:	e00d      	b.n	8010062 <BSP_TS_GetState+0x1f6>
 8010046:	4a2b      	ldr	r2, [pc, #172]	; (80100f4 <BSP_TS_GetState+0x288>)
 8010048:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801004a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801004e:	b29a      	uxth	r2, r3
 8010050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010052:	005b      	lsls	r3, r3, #1
 8010054:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8010058:	440b      	add	r3, r1
 801005a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 801005e:	1ad3      	subs	r3, r2, r3
 8010060:	b29b      	uxth	r3, r3
 8010062:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 8010066:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801006a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801006e:	4413      	add	r3, r2
 8010070:	2b05      	cmp	r3, #5
 8010072:	dd17      	ble.n	80100a4 <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 8010074:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010076:	005b      	lsls	r3, r3, #1
 8010078:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801007c:	4413      	add	r3, r2
 801007e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8010082:	4619      	mov	r1, r3
 8010084:	4a1a      	ldr	r2, [pc, #104]	; (80100f0 <BSP_TS_GetState+0x284>)
 8010086:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010088:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 801008c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801008e:	005b      	lsls	r3, r3, #1
 8010090:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8010094:	4413      	add	r3, r2
 8010096:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 801009a:	4619      	mov	r1, r3
 801009c:	4a15      	ldr	r2, [pc, #84]	; (80100f4 <BSP_TS_GetState+0x288>)
 801009e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80100a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 80100a4:	4b10      	ldr	r3, [pc, #64]	; (80100e8 <BSP_TS_GetState+0x27c>)
 80100a6:	781b      	ldrb	r3, [r3, #0]
 80100a8:	2b70      	cmp	r3, #112	; 0x70
 80100aa:	d125      	bne.n	80100f8 <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 80100ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80100ae:	005b      	lsls	r3, r3, #1
 80100b0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80100b4:	4413      	add	r3, r2
 80100b6:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 80100ba:	687a      	ldr	r2, [r7, #4]
 80100bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80100be:	005b      	lsls	r3, r3, #1
 80100c0:	4413      	add	r3, r2
 80100c2:	460a      	mov	r2, r1
 80100c4:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 80100c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80100c8:	005b      	lsls	r3, r3, #1
 80100ca:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80100ce:	4413      	add	r3, r2
 80100d0:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 80100d4:	687a      	ldr	r2, [r7, #4]
 80100d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80100d8:	3304      	adds	r3, #4
 80100da:	005b      	lsls	r3, r3, #1
 80100dc:	4413      	add	r3, r2
 80100de:	460a      	mov	r2, r1
 80100e0:	809a      	strh	r2, [r3, #4]
 80100e2:	e02c      	b.n	801013e <BSP_TS_GetState+0x2d2>
 80100e4:	200085bc 	.word	0x200085bc
 80100e8:	200085c5 	.word	0x200085c5
 80100ec:	200085c4 	.word	0x200085c4
 80100f0:	200085c8 	.word	0x200085c8
 80100f4:	200085dc 	.word	0x200085dc
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 80100f8:	4b42      	ldr	r3, [pc, #264]	; (8010204 <BSP_TS_GetState+0x398>)
 80100fa:	881b      	ldrh	r3, [r3, #0]
 80100fc:	4619      	mov	r1, r3
 80100fe:	4a42      	ldr	r2, [pc, #264]	; (8010208 <BSP_TS_GetState+0x39c>)
 8010100:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010106:	fb03 f301 	mul.w	r3, r3, r1
 801010a:	0b1b      	lsrs	r3, r3, #12
 801010c:	b299      	uxth	r1, r3
 801010e:	687a      	ldr	r2, [r7, #4]
 8010110:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010112:	005b      	lsls	r3, r3, #1
 8010114:	4413      	add	r3, r2
 8010116:	460a      	mov	r2, r1
 8010118:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 801011a:	4b3c      	ldr	r3, [pc, #240]	; (801020c <BSP_TS_GetState+0x3a0>)
 801011c:	881b      	ldrh	r3, [r3, #0]
 801011e:	4619      	mov	r1, r3
 8010120:	4a3b      	ldr	r2, [pc, #236]	; (8010210 <BSP_TS_GetState+0x3a4>)
 8010122:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010128:	fb03 f301 	mul.w	r3, r3, r1
 801012c:	0b1b      	lsrs	r3, r3, #12
 801012e:	b299      	uxth	r1, r3
 8010130:	687a      	ldr	r2, [r7, #4]
 8010132:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010134:	3304      	adds	r3, #4
 8010136:	005b      	lsls	r3, r3, #1
 8010138:	4413      	add	r3, r2
 801013a:	460a      	mov	r2, r1
 801013c:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 801013e:	4b35      	ldr	r3, [pc, #212]	; (8010214 <BSP_TS_GetState+0x3a8>)
 8010140:	781b      	ldrb	r3, [r3, #0]
 8010142:	b298      	uxth	r0, r3
 8010144:	f107 010c 	add.w	r1, r7, #12
 8010148:	f107 0210 	add.w	r2, r7, #16
 801014c:	f107 0308 	add.w	r3, r7, #8
 8010150:	9300      	str	r3, [sp, #0]
 8010152:	460b      	mov	r3, r1
 8010154:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8010156:	f00a f9f7 	bl	801a548 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 801015a:	693b      	ldr	r3, [r7, #16]
 801015c:	b2d9      	uxtb	r1, r3
 801015e:	687a      	ldr	r2, [r7, #4]
 8010160:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010162:	4413      	add	r3, r2
 8010164:	3316      	adds	r3, #22
 8010166:	460a      	mov	r2, r1
 8010168:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	b2d9      	uxtb	r1, r3
 801016e:	687a      	ldr	r2, [r7, #4]
 8010170:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010172:	4413      	add	r3, r2
 8010174:	3320      	adds	r3, #32
 8010176:	460a      	mov	r2, r1
 8010178:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 801017a:	68bb      	ldr	r3, [r7, #8]
 801017c:	2b03      	cmp	r3, #3
 801017e:	d827      	bhi.n	80101d0 <BSP_TS_GetState+0x364>
 8010180:	a201      	add	r2, pc, #4	; (adr r2, 8010188 <BSP_TS_GetState+0x31c>)
 8010182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010186:	bf00      	nop
 8010188:	08010199 	.word	0x08010199
 801018c:	080101a7 	.word	0x080101a7
 8010190:	080101b5 	.word	0x080101b5
 8010194:	080101c3 	.word	0x080101c3
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8010198:	687a      	ldr	r2, [r7, #4]
 801019a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801019c:	4413      	add	r3, r2
 801019e:	331b      	adds	r3, #27
 80101a0:	2201      	movs	r2, #1
 80101a2:	701a      	strb	r2, [r3, #0]
          break;
 80101a4:	e018      	b.n	80101d8 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 80101a6:	687a      	ldr	r2, [r7, #4]
 80101a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80101aa:	4413      	add	r3, r2
 80101ac:	331b      	adds	r3, #27
 80101ae:	2202      	movs	r2, #2
 80101b0:	701a      	strb	r2, [r3, #0]
          break;
 80101b2:	e011      	b.n	80101d8 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 80101b4:	687a      	ldr	r2, [r7, #4]
 80101b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80101b8:	4413      	add	r3, r2
 80101ba:	331b      	adds	r3, #27
 80101bc:	2203      	movs	r2, #3
 80101be:	701a      	strb	r2, [r3, #0]
          break;
 80101c0:	e00a      	b.n	80101d8 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 80101c2:	687a      	ldr	r2, [r7, #4]
 80101c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80101c6:	4413      	add	r3, r2
 80101c8:	331b      	adds	r3, #27
 80101ca:	2200      	movs	r2, #0
 80101cc:	701a      	strb	r2, [r3, #0]
          break;
 80101ce:	e003      	b.n	80101d8 <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 80101d0:	2301      	movs	r3, #1
 80101d2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 80101d6:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 80101d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80101da:	3301      	adds	r3, #1
 80101dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	781b      	ldrb	r3, [r3, #0]
 80101e2:	461a      	mov	r2, r3
 80101e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80101e6:	4293      	cmp	r3, r2
 80101e8:	f4ff ae61 	bcc.w	800feae <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 80101ec:	6878      	ldr	r0, [r7, #4]
 80101ee:	f000 f813 	bl	8010218 <BSP_TS_Get_GestureId>
 80101f2:	4603      	mov	r3, r0
 80101f4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 80101f8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80101fc:	4618      	mov	r0, r3
 80101fe:	3754      	adds	r7, #84	; 0x54
 8010200:	46bd      	mov	sp, r7
 8010202:	bd90      	pop	{r4, r7, pc}
 8010204:	200085c0 	.word	0x200085c0
 8010208:	200085c8 	.word	0x200085c8
 801020c:	200085c2 	.word	0x200085c2
 8010210:	200085dc 	.word	0x200085dc
 8010214:	200085c5 	.word	0x200085c5

08010218 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8010218:	b580      	push	{r7, lr}
 801021a:	b084      	sub	sp, #16
 801021c:	af00      	add	r7, sp, #0
 801021e:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8010220:	2300      	movs	r3, #0
 8010222:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8010224:	2300      	movs	r3, #0
 8010226:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8010228:	4b1f      	ldr	r3, [pc, #124]	; (80102a8 <BSP_TS_Get_GestureId+0x90>)
 801022a:	781b      	ldrb	r3, [r3, #0]
 801022c:	b29b      	uxth	r3, r3
 801022e:	f107 0208 	add.w	r2, r7, #8
 8010232:	4611      	mov	r1, r2
 8010234:	4618      	mov	r0, r3
 8010236:	f00a f96e 	bl	801a516 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 801023a:	68bb      	ldr	r3, [r7, #8]
 801023c:	2b18      	cmp	r3, #24
 801023e:	d01b      	beq.n	8010278 <BSP_TS_Get_GestureId+0x60>
 8010240:	2b18      	cmp	r3, #24
 8010242:	d806      	bhi.n	8010252 <BSP_TS_Get_GestureId+0x3a>
 8010244:	2b10      	cmp	r3, #16
 8010246:	d00f      	beq.n	8010268 <BSP_TS_Get_GestureId+0x50>
 8010248:	2b14      	cmp	r3, #20
 801024a:	d011      	beq.n	8010270 <BSP_TS_Get_GestureId+0x58>
 801024c:	2b00      	cmp	r3, #0
 801024e:	d007      	beq.n	8010260 <BSP_TS_Get_GestureId+0x48>
 8010250:	e022      	b.n	8010298 <BSP_TS_Get_GestureId+0x80>
 8010252:	2b40      	cmp	r3, #64	; 0x40
 8010254:	d018      	beq.n	8010288 <BSP_TS_Get_GestureId+0x70>
 8010256:	2b49      	cmp	r3, #73	; 0x49
 8010258:	d01a      	beq.n	8010290 <BSP_TS_Get_GestureId+0x78>
 801025a:	2b1c      	cmp	r3, #28
 801025c:	d010      	beq.n	8010280 <BSP_TS_Get_GestureId+0x68>
 801025e:	e01b      	b.n	8010298 <BSP_TS_Get_GestureId+0x80>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	2200      	movs	r2, #0
 8010264:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8010266:	e01a      	b.n	801029e <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	2201      	movs	r2, #1
 801026c:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 801026e:	e016      	b.n	801029e <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	2202      	movs	r2, #2
 8010274:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8010276:	e012      	b.n	801029e <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	2203      	movs	r2, #3
 801027c:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 801027e:	e00e      	b.n	801029e <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	2204      	movs	r2, #4
 8010284:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8010286:	e00a      	b.n	801029e <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	2205      	movs	r2, #5
 801028c:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 801028e:	e006      	b.n	801029e <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	2206      	movs	r2, #6
 8010294:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8010296:	e002      	b.n	801029e <BSP_TS_Get_GestureId+0x86>
    default :
      ts_status = TS_ERROR;
 8010298:	2301      	movs	r3, #1
 801029a:	73fb      	strb	r3, [r7, #15]
      break;
 801029c:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 801029e:	7bfb      	ldrb	r3, [r7, #15]
}
 80102a0:	4618      	mov	r0, r3
 80102a2:	3710      	adds	r7, #16
 80102a4:	46bd      	mov	sp, r7
 80102a6:	bd80      	pop	{r7, pc}
 80102a8:	200085c5 	.word	0x200085c5

080102ac <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 80102ac:	b580      	push	{r7, lr}
 80102ae:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 80102b0:	f009 fb56 	bl	8019960 <touchgfx_init>
}
 80102b4:	bf00      	nop
 80102b6:	bd80      	pop	{r7, pc}

080102b8 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 80102b8:	b580      	push	{r7, lr}
 80102ba:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 80102bc:	f009 fb7a 	bl	80199b4 <touchgfx_taskEntry>
}
 80102c0:	bf00      	nop
 80102c2:	bd80      	pop	{r7, pc}

080102c4 <_ZN8touchgfx12FontProviderD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~FontProvider()
 80102c4:	b480      	push	{r7}
 80102c6:	b083      	sub	sp, #12
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	6078      	str	r0, [r7, #4]
    {
 80102cc:	4a04      	ldr	r2, [pc, #16]	; (80102e0 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	601a      	str	r2, [r3, #0]
    }
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	4618      	mov	r0, r3
 80102d6:	370c      	adds	r7, #12
 80102d8:	46bd      	mov	sp, r7
 80102da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102de:	4770      	bx	lr
 80102e0:	0802c250 	.word	0x0802c250

080102e4 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 80102e4:	b580      	push	{r7, lr}
 80102e6:	b082      	sub	sp, #8
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	6078      	str	r0, [r7, #4]
    }
 80102ec:	6878      	ldr	r0, [r7, #4]
 80102ee:	f7ff ffe9 	bl	80102c4 <_ZN8touchgfx12FontProviderD1Ev>
 80102f2:	2104      	movs	r1, #4
 80102f4:	6878      	ldr	r0, [r7, #4]
 80102f6:	f01a fa18 	bl	802a72a <_ZdlPvj>
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	4618      	mov	r0, r3
 80102fe:	3708      	adds	r7, #8
 8010300:	46bd      	mov	sp, r7
 8010302:	bd80      	pop	{r7, pc}

08010304 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8010304:	b580      	push	{r7, lr}
 8010306:	b082      	sub	sp, #8
 8010308:	af00      	add	r7, sp, #0
 801030a:	6078      	str	r0, [r7, #4]
 801030c:	460b      	mov	r3, r1
 801030e:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8010310:	887b      	ldrh	r3, [r7, #2]
 8010312:	2b07      	cmp	r3, #7
 8010314:	d83a      	bhi.n	801038c <_ZN23ApplicationFontProvider7getFontEt+0x88>
 8010316:	a201      	add	r2, pc, #4	; (adr r2, 801031c <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 8010318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801031c:	0801033d 	.word	0x0801033d
 8010320:	08010347 	.word	0x08010347
 8010324:	08010351 	.word	0x08010351
 8010328:	0801035b 	.word	0x0801035b
 801032c:	08010365 	.word	0x08010365
 8010330:	0801036f 	.word	0x0801036f
 8010334:	08010379 	.word	0x08010379
 8010338:	08010383 	.word	0x08010383
    {
    case Typography::DEFAULT:
        // Asap_Bold_18_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 801033c:	f006 fba4 	bl	8016a88 <_ZN17TypedTextDatabase8getFontsEv>
 8010340:	4603      	mov	r3, r0
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	e023      	b.n	801038e <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPMTEXT:
        // Asap_Bold_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8010346:	f006 fb9f 	bl	8016a88 <_ZN17TypedTextDatabase8getFontsEv>
 801034a:	4603      	mov	r3, r0
 801034c:	685b      	ldr	r3, [r3, #4]
 801034e:	e01e      	b.n	801038e <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::VALUES:
        // Asap_Bold_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8010350:	f006 fb9a 	bl	8016a88 <_ZN17TypedTextDatabase8getFontsEv>
 8010354:	4603      	mov	r3, r0
 8010356:	689b      	ldr	r3, [r3, #8]
 8010358:	e019      	b.n	801038e <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::LAMBDA:
        // Asap_Bold_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 801035a:	f006 fb95 	bl	8016a88 <_ZN17TypedTextDatabase8getFontsEv>
 801035e:	4603      	mov	r3, r0
 8010360:	689b      	ldr	r3, [r3, #8]
 8010362:	e014      	b.n	801038e <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::SMALL:
        // Asap_Bold_12_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 8010364:	f006 fb90 	bl	8016a88 <_ZN17TypedTextDatabase8getFontsEv>
 8010368:	4603      	mov	r3, r0
 801036a:	68db      	ldr	r3, [r3, #12]
 801036c:	e00f      	b.n	801038e <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::LARGE:
        // Asap_Bold_60_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 801036e:	f006 fb8b 	bl	8016a88 <_ZN17TypedTextDatabase8getFontsEv>
 8010372:	4603      	mov	r3, r0
 8010374:	691b      	ldr	r3, [r3, #16]
 8010376:	e00a      	b.n	801038e <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPM_LETTERS:
        // Asap_Bold_21_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 8010378:	f006 fb86 	bl	8016a88 <_ZN17TypedTextDatabase8getFontsEv>
 801037c:	4603      	mov	r3, r0
 801037e:	695b      	ldr	r3, [r3, #20]
 8010380:	e005      	b.n	801038e <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    case Typography::RPM_DESCRIPTOR:
        // Asap_Bold_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[6]);
 8010382:	f006 fb81 	bl	8016a88 <_ZN17TypedTextDatabase8getFontsEv>
 8010386:	4603      	mov	r3, r0
 8010388:	699b      	ldr	r3, [r3, #24]
 801038a:	e000      	b.n	801038e <_ZN23ApplicationFontProvider7getFontEt+0x8a>
    default:
        return 0;
 801038c:	2300      	movs	r3, #0
    }
}
 801038e:	4618      	mov	r0, r3
 8010390:	3708      	adds	r7, #8
 8010392:	46bd      	mov	sp, r7
 8010394:	bd80      	pop	{r7, pc}
 8010396:	bf00      	nop

08010398 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId RPM_LETTERS = 5;    // Asap_Bold_21_4bpp
    static const touchgfx::FontId RPM_DESCRIPTOR = 6; // Asap_Bold_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 7;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8010398:	b580      	push	{r7, lr}
 801039a:	b082      	sub	sp, #8
 801039c:	af00      	add	r7, sp, #0
 801039e:	6078      	str	r0, [r7, #4]
 80103a0:	4a05      	ldr	r2, [pc, #20]	; (80103b8 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	601a      	str	r2, [r3, #0]
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	4618      	mov	r0, r3
 80103aa:	f7ff ff8b 	bl	80102c4 <_ZN8touchgfx12FontProviderD1Ev>
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	4618      	mov	r0, r3
 80103b2:	3708      	adds	r7, #8
 80103b4:	46bd      	mov	sp, r7
 80103b6:	bd80      	pop	{r7, pc}
 80103b8:	0802c23c 	.word	0x0802c23c

080103bc <_ZN23ApplicationFontProviderD0Ev>:
 80103bc:	b580      	push	{r7, lr}
 80103be:	b082      	sub	sp, #8
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	6078      	str	r0, [r7, #4]
 80103c4:	6878      	ldr	r0, [r7, #4]
 80103c6:	f7ff ffe7 	bl	8010398 <_ZN23ApplicationFontProviderD1Ev>
 80103ca:	2104      	movs	r1, #4
 80103cc:	6878      	ldr	r0, [r7, #4]
 80103ce:	f01a f9ac 	bl	802a72a <_ZdlPvj>
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	4618      	mov	r0, r3
 80103d6:	3708      	adds	r7, #8
 80103d8:	46bd      	mov	sp, r7
 80103da:	bd80      	pop	{r7, pc}

080103dc <_ZN8touchgfx4FontD1Ev>:
 *        It provides utility functions such as obtaining string width and font height.
 */
class Font
{
public:
    virtual ~Font() { }
 80103dc:	b480      	push	{r7}
 80103de:	b083      	sub	sp, #12
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	6078      	str	r0, [r7, #4]
 80103e4:	4a04      	ldr	r2, [pc, #16]	; (80103f8 <_ZN8touchgfx4FontD1Ev+0x1c>)
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	601a      	str	r2, [r3, #0]
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	4618      	mov	r0, r3
 80103ee:	370c      	adds	r7, #12
 80103f0:	46bd      	mov	sp, r7
 80103f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f6:	4770      	bx	lr
 80103f8:	0802ee14 	.word	0x0802ee14

080103fc <_ZN8touchgfx4FontD0Ev>:
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b082      	sub	sp, #8
 8010400:	af00      	add	r7, sp, #0
 8010402:	6078      	str	r0, [r7, #4]
 8010404:	6878      	ldr	r0, [r7, #4]
 8010406:	f7ff ffe9 	bl	80103dc <_ZN8touchgfx4FontD1Ev>
 801040a:	2110      	movs	r1, #16
 801040c:	6878      	ldr	r0, [r7, #4]
 801040e:	f01a f98c 	bl	802a72a <_ZdlPvj>
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	4618      	mov	r0, r3
 8010416:	3708      	adds	r7, #8
 8010418:	46bd      	mov	sp, r7
 801041a:	bd80      	pop	{r7, pc}

0801041c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getGlyph
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 801041c:	b590      	push	{r4, r7, lr}
 801041e:	b087      	sub	sp, #28
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
 8010424:	460b      	mov	r3, r1
 8010426:	807b      	strh	r3, [r7, #2]
    {
        const uint8_t* dummyPixelDataPointer = 0;
 8010428:	2300      	movs	r3, #0
 801042a:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 801042c:	2300      	movs	r3, #0
 801042e:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	3308      	adds	r3, #8
 8010436:	681c      	ldr	r4, [r3, #0]
 8010438:	f107 030f 	add.w	r3, r7, #15
 801043c:	f107 0210 	add.w	r2, r7, #16
 8010440:	8879      	ldrh	r1, [r7, #2]
 8010442:	6878      	ldr	r0, [r7, #4]
 8010444:	47a0      	blx	r4
 8010446:	6178      	str	r0, [r7, #20]
        return glyph;
 8010448:	697b      	ldr	r3, [r7, #20]
    }
 801044a:	4618      	mov	r0, r3
 801044c:	371c      	adds	r7, #28
 801044e:	46bd      	mov	sp, r7
 8010450:	bd90      	pop	{r4, r7, pc}

08010452 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     *        character, use the glyph for the character returned by this function. If 0 (zero)
     *        is returned, there is no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8010452:	b480      	push	{r7}
 8010454:	b083      	sub	sp, #12
 8010456:	af00      	add	r7, sp, #0
 8010458:	6078      	str	r0, [r7, #4]
    {
        return falllbackCharacter;
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	895b      	ldrh	r3, [r3, #10]
    }
 801045e:	4618      	mov	r0, r3
 8010460:	370c      	adds	r7, #12
 8010462:	46bd      	mov	sp, r7
 8010464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010468:	4770      	bx	lr

0801046a <_ZNK8touchgfx4Font15getEllipsisCharEv>:
    *        Gets ellipsis character for the given font. This is the character which is used
    *        when truncating long lines.
    *
    * @return The ellipsis character for the typography.
    */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 801046a:	b480      	push	{r7}
 801046c:	b083      	sub	sp, #12
 801046e:	af00      	add	r7, sp, #0
 8010470:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	899b      	ldrh	r3, [r3, #12]
    }
 8010476:	4618      	mov	r0, r3
 8010478:	370c      	adds	r7, #12
 801047a:	46bd      	mov	sp, r7
 801047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010480:	4770      	bx	lr

08010482 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     *
     * @return The height in pixels of this font.
     */
    virtual uint16_t getFontHeight() const
 8010482:	b480      	push	{r7}
 8010484:	b083      	sub	sp, #12
 8010486:	af00      	add	r7, sp, #0
 8010488:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	889b      	ldrh	r3, [r3, #4]
    }
 801048e:	4618      	mov	r0, r3
 8010490:	370c      	adds	r7, #12
 8010492:	46bd      	mov	sp, r7
 8010494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010498:	4770      	bx	lr

0801049a <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *        into account that certain characters (eg 'g') have pixels below the baseline,
     *        thus making the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    virtual uint16_t getMinimumTextHeight() const
 801049a:	b480      	push	{r7}
 801049c:	b083      	sub	sp, #12
 801049e:	af00      	add	r7, sp, #0
 80104a0:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	889a      	ldrh	r2, [r3, #4]
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	799b      	ldrb	r3, [r3, #6]
 80104aa:	b29b      	uxth	r3, r3
 80104ac:	4413      	add	r3, r2
 80104ae:	b29b      	uxth	r3, r3
    }
 80104b0:	4618      	mov	r0, r3
 80104b2:	370c      	adds	r7, #12
 80104b4:	46bd      	mov	sp, r7
 80104b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ba:	4770      	bx	lr

080104bc <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     *        Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    virtual uint8_t getBitsPerPixel() const
 80104bc:	b480      	push	{r7}
 80104be:	b083      	sub	sp, #12
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	79db      	ldrb	r3, [r3, #7]
 80104c8:	f3c3 0306 	ubfx	r3, r3, #0, #7
 80104cc:	b2db      	uxtb	r3, r3
    }
 80104ce:	4618      	mov	r0, r3
 80104d0:	370c      	adds	r7, #12
 80104d2:	46bd      	mov	sp, r7
 80104d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d8:	4770      	bx	lr

080104da <_ZNK8touchgfx4Font15getDataFormatA4Ev>:
     *
     *        Are the glyphs saved using ST A4 format.
     *
     * @return True if the font is stored using A4 format, false otherwise.
     */
    virtual uint8_t getDataFormatA4() const
 80104da:	b480      	push	{r7}
 80104dc:	b083      	sub	sp, #12
 80104de:	af00      	add	r7, sp, #0
 80104e0:	6078      	str	r0, [r7, #4]
    {
        return a4;
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	79db      	ldrb	r3, [r3, #7]
 80104e6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80104ea:	b2db      	uxtb	r3, r3
    }
 80104ec:	4618      	mov	r0, r3
 80104ee:	370c      	adds	r7, #12
 80104f0:	46bd      	mov	sp, r7
 80104f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f6:	4770      	bx	lr

080104f8 <_ZN8touchgfx9ConstFontD1Ev>:
 * @note Pure virtual class. Create an application-
 *          specific implementation of getPixelData.
 *
 * @see Font
 */
class ConstFont : public Font
 80104f8:	b580      	push	{r7, lr}
 80104fa:	b082      	sub	sp, #8
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	6078      	str	r0, [r7, #4]
 8010500:	4a05      	ldr	r2, [pc, #20]	; (8010518 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	601a      	str	r2, [r3, #0]
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	4618      	mov	r0, r3
 801050a:	f7ff ff67 	bl	80103dc <_ZN8touchgfx4FontD1Ev>
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	4618      	mov	r0, r3
 8010512:	3708      	adds	r7, #8
 8010514:	46bd      	mov	sp, r7
 8010516:	bd80      	pop	{r7, pc}
 8010518:	0802eecc 	.word	0x0802eecc

0801051c <_ZN8touchgfx9ConstFontD0Ev>:
 801051c:	b580      	push	{r7, lr}
 801051e:	b082      	sub	sp, #8
 8010520:	af00      	add	r7, sp, #0
 8010522:	6078      	str	r0, [r7, #4]
 8010524:	6878      	ldr	r0, [r7, #4]
 8010526:	f7ff ffe7 	bl	80104f8 <_ZN8touchgfx9ConstFontD1Ev>
 801052a:	2118      	movs	r1, #24
 801052c:	6878      	ldr	r0, [r7, #4]
 801052e:	f01a f8fc 	bl	802a72a <_ZdlPvj>
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	4618      	mov	r0, r3
 8010536:	3708      	adds	r7, #8
 8010538:	46bd      	mov	sp, r7
 801053a:	bd80      	pop	{r7, pc}

0801053c <_ZN8touchgfx13GeneratedFontD1Ev>:
 *        An GeneratedFont has both glyph table and glyph data placed in a flash which
 *        supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 801053c:	b580      	push	{r7, lr}
 801053e:	b082      	sub	sp, #8
 8010540:	af00      	add	r7, sp, #0
 8010542:	6078      	str	r0, [r7, #4]
 8010544:	4a05      	ldr	r2, [pc, #20]	; (801055c <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	601a      	str	r2, [r3, #0]
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	4618      	mov	r0, r3
 801054e:	f7ff ffd3 	bl	80104f8 <_ZN8touchgfx9ConstFontD1Ev>
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	4618      	mov	r0, r3
 8010556:	3708      	adds	r7, #8
 8010558:	46bd      	mov	sp, r7
 801055a:	bd80      	pop	{r7, pc}
 801055c:	0802c294 	.word	0x0802c294

08010560 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8010560:	b580      	push	{r7, lr}
 8010562:	b082      	sub	sp, #8
 8010564:	af00      	add	r7, sp, #0
 8010566:	6078      	str	r0, [r7, #4]
 8010568:	6878      	ldr	r0, [r7, #4]
 801056a:	f7ff ffe7 	bl	801053c <_ZN8touchgfx13GeneratedFontD1Ev>
 801056e:	2124      	movs	r1, #36	; 0x24
 8010570:	6878      	ldr	r0, [r7, #4]
 8010572:	f01a f8da 	bl	802a72a <_ZdlPvj>
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	4618      	mov	r0, r3
 801057a:	3708      	adds	r7, #8
 801057c:	46bd      	mov	sp, r7
 801057e:	bd80      	pop	{r7, pc}

08010580 <_ZNK8touchgfx9TypedText7getFontEv>:
     *
     *        Gets the font associated with this TypedText.
     *
     * @return The font.
     */
    const Font* getFont() const
 8010580:	b580      	push	{r7, lr}
 8010582:	b082      	sub	sp, #8
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 8010588:	6878      	ldr	r0, [r7, #4]
 801058a:	f000 f82d 	bl	80105e8 <_ZNK8touchgfx9TypedText11assertValidEv>
        return fonts[typedTexts[typedTextId].fontIdx];
 801058e:	4b08      	ldr	r3, [pc, #32]	; (80105b0 <_ZNK8touchgfx9TypedText7getFontEv+0x30>)
 8010590:	681a      	ldr	r2, [r3, #0]
 8010592:	4b08      	ldr	r3, [pc, #32]	; (80105b4 <_ZNK8touchgfx9TypedText7getFontEv+0x34>)
 8010594:	6819      	ldr	r1, [r3, #0]
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	881b      	ldrh	r3, [r3, #0]
 801059a:	005b      	lsls	r3, r3, #1
 801059c:	440b      	add	r3, r1
 801059e:	781b      	ldrb	r3, [r3, #0]
 80105a0:	009b      	lsls	r3, r3, #2
 80105a2:	4413      	add	r3, r2
 80105a4:	681b      	ldr	r3, [r3, #0]
    }
 80105a6:	4618      	mov	r0, r3
 80105a8:	3708      	adds	r7, #8
 80105aa:	46bd      	mov	sp, r7
 80105ac:	bd80      	pop	{r7, pc}
 80105ae:	bf00      	nop
 80105b0:	2000c000 	.word	0x2000c000
 80105b4:	2000bff8 	.word	0x2000bff8

080105b8 <_ZNK8touchgfx9TypedText16getTextDirectionEv>:
     *
     *        Gets the text direction associated with this TypedText.
     *
     * @return The alignment.
     */
    TextDirection getTextDirection() const
 80105b8:	b580      	push	{r7, lr}
 80105ba:	b082      	sub	sp, #8
 80105bc:	af00      	add	r7, sp, #0
 80105be:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 80105c0:	6878      	ldr	r0, [r7, #4]
 80105c2:	f000 f811 	bl	80105e8 <_ZNK8touchgfx9TypedText11assertValidEv>
        return typedTexts[typedTextId].direction;
 80105c6:	4b07      	ldr	r3, [pc, #28]	; (80105e4 <_ZNK8touchgfx9TypedText16getTextDirectionEv+0x2c>)
 80105c8:	681a      	ldr	r2, [r3, #0]
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	881b      	ldrh	r3, [r3, #0]
 80105ce:	005b      	lsls	r3, r3, #1
 80105d0:	4413      	add	r3, r2
 80105d2:	785b      	ldrb	r3, [r3, #1]
 80105d4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80105d8:	b2db      	uxtb	r3, r3
    }
 80105da:	4618      	mov	r0, r3
 80105dc:	3708      	adds	r7, #8
 80105de:	46bd      	mov	sp, r7
 80105e0:	bd80      	pop	{r7, pc}
 80105e2:	bf00      	nop
 80105e4:	2000bff8 	.word	0x2000bff8

080105e8 <_ZNK8touchgfx9TypedText11assertValidEv>:
    {
        texts = t;
    }

private:
    void assertValid() const
 80105e8:	b580      	push	{r7, lr}
 80105ea:	b082      	sub	sp, #8
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	6078      	str	r0, [r7, #4]
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80105f0:	4b0c      	ldr	r3, [pc, #48]	; (8010624 <_ZNK8touchgfx9TypedText11assertValidEv+0x3c>)
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d105      	bne.n	8010604 <_ZNK8touchgfx9TypedText11assertValidEv+0x1c>
 80105f8:	4b0b      	ldr	r3, [pc, #44]	; (8010628 <_ZNK8touchgfx9TypedText11assertValidEv+0x40>)
 80105fa:	4a0c      	ldr	r2, [pc, #48]	; (801062c <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 80105fc:	21de      	movs	r1, #222	; 0xde
 80105fe:	480c      	ldr	r0, [pc, #48]	; (8010630 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 8010600:	f01a f8be 	bl	802a780 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	881a      	ldrh	r2, [r3, #0]
 8010608:	4b0a      	ldr	r3, [pc, #40]	; (8010634 <_ZNK8touchgfx9TypedText11assertValidEv+0x4c>)
 801060a:	881b      	ldrh	r3, [r3, #0]
 801060c:	429a      	cmp	r2, r3
 801060e:	d305      	bcc.n	801061c <_ZNK8touchgfx9TypedText11assertValidEv+0x34>
 8010610:	4b09      	ldr	r3, [pc, #36]	; (8010638 <_ZNK8touchgfx9TypedText11assertValidEv+0x50>)
 8010612:	4a06      	ldr	r2, [pc, #24]	; (801062c <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 8010614:	21df      	movs	r1, #223	; 0xdf
 8010616:	4806      	ldr	r0, [pc, #24]	; (8010630 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 8010618:	f01a f8b2 	bl	802a780 <__assert_func>
    }
 801061c:	bf00      	nop
 801061e:	3708      	adds	r7, #8
 8010620:	46bd      	mov	sp, r7
 8010622:	bd80      	pop	{r7, pc}
 8010624:	2000bff8 	.word	0x2000bff8
 8010628:	0802b830 	.word	0x0802b830
 801062c:	0802c25c 	.word	0x0802c25c
 8010630:	0802b874 	.word	0x0802b874
 8010634:	2000bffc 	.word	0x2000bffc
 8010638:	0802b8b8 	.word	0x0802b8b8

0801063c <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>:
    uint16_t kerningTablePos() const
 801063c:	b480      	push	{r7}
 801063e:	b083      	sub	sp, #12
 8010640:	af00      	add	r7, sp, #0
 8010642:	6078      	str	r0, [r7, #4]
        return (((uint16_t)(flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10)) << 8) | (uint16_t)_kerningTablePos;
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	7b5b      	ldrb	r3, [r3, #13]
 8010648:	021b      	lsls	r3, r3, #8
 801064a:	b21b      	sxth	r3, r3
 801064c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010650:	b21a      	sxth	r2, r3
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	7adb      	ldrb	r3, [r3, #11]
 8010656:	b21b      	sxth	r3, r3
 8010658:	4313      	orrs	r3, r2
 801065a:	b21b      	sxth	r3, r3
 801065c:	b29b      	uxth	r3, r3
    }
 801065e:	4618      	mov	r0, r3
 8010660:	370c      	adds	r7, #12
 8010662:	46bd      	mov	sp, r7
 8010664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010668:	4770      	bx	lr

0801066a <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     *
     *        Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 801066a:	b480      	push	{r7}
 801066c:	b083      	sub	sp, #12
 801066e:	af00      	add	r7, sp, #0
 8010670:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	6a1b      	ldr	r3, [r3, #32]
    }
 8010676:	4618      	mov	r0, r3
 8010678:	370c      	adds	r7, #12
 801067a:	46bd      	mov	sp, r7
 801067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010680:	4770      	bx	lr
	...

08010684 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t dataFormatA4, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 8010684:	b580      	push	{r7, lr}
 8010686:	b08c      	sub	sp, #48	; 0x30
 8010688:	af08      	add	r7, sp, #32
 801068a:	60f8      	str	r0, [r7, #12]
 801068c:	60b9      	str	r1, [r7, #8]
 801068e:	4611      	mov	r1, r2
 8010690:	461a      	mov	r2, r3
 8010692:	460b      	mov	r3, r1
 8010694:	80fb      	strh	r3, [r7, #6]
 8010696:	4613      	mov	r3, r2
 8010698:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, dataFormatA4, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 801069a:	68f8      	ldr	r0, [r7, #12]
 801069c:	88b9      	ldrh	r1, [r7, #4]
 801069e:	88fa      	ldrh	r2, [r7, #6]
 80106a0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80106a2:	9306      	str	r3, [sp, #24]
 80106a4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80106a6:	9305      	str	r3, [sp, #20]
 80106a8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80106ac:	9304      	str	r3, [sp, #16]
 80106ae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80106b2:	9303      	str	r3, [sp, #12]
 80106b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80106b8:	9302      	str	r3, [sp, #8]
 80106ba:	7f3b      	ldrb	r3, [r7, #28]
 80106bc:	9301      	str	r3, [sp, #4]
 80106be:	7e3b      	ldrb	r3, [r7, #24]
 80106c0:	9300      	str	r3, [sp, #0]
 80106c2:	460b      	mov	r3, r1
 80106c4:	68b9      	ldr	r1, [r7, #8]
 80106c6:	f00e fd15 	bl	801f0f4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 80106ca:	4a08      	ldr	r2, [pc, #32]	; (80106ec <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	601a      	str	r2, [r3, #0]
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80106d4:	619a      	str	r2, [r3, #24]
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80106da:	61da      	str	r2, [r3, #28]
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80106e0:	621a      	str	r2, [r3, #32]
{
}
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	4618      	mov	r0, r3
 80106e6:	3710      	adds	r7, #16
 80106e8:	46bd      	mov	sp, r7
 80106ea:	bd80      	pop	{r7, pc}
 80106ec:	0802c294 	.word	0x0802c294

080106f0 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 80106f0:	b480      	push	{r7}
 80106f2:	b085      	sub	sp, #20
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	6078      	str	r0, [r7, #4]
 80106f8:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	699b      	ldr	r3, [r3, #24]
 80106fe:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8010700:	683b      	ldr	r3, [r7, #0]
 8010702:	889b      	ldrh	r3, [r3, #4]
 8010704:	0adb      	lsrs	r3, r3, #11
 8010706:	b29b      	uxth	r3, r3
 8010708:	009b      	lsls	r3, r3, #2
 801070a:	68fa      	ldr	r2, [r7, #12]
 801070c:	4413      	add	r3, r2
 801070e:	681a      	ldr	r2, [r3, #0]
 8010710:	683b      	ldr	r3, [r7, #0]
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	4413      	add	r3, r2
}
 8010716:	4618      	mov	r0, r3
 8010718:	3714      	adds	r7, #20
 801071a:	46bd      	mov	sp, r7
 801071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010720:	4770      	bx	lr

08010722 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8010722:	b580      	push	{r7, lr}
 8010724:	b086      	sub	sp, #24
 8010726:	af00      	add	r7, sp, #0
 8010728:	60f8      	str	r0, [r7, #12]
 801072a:	460b      	mov	r3, r1
 801072c:	607a      	str	r2, [r7, #4]
 801072e:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	2b00      	cmp	r3, #0
 8010734:	d003      	beq.n	801073e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	7b1b      	ldrb	r3, [r3, #12]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d101      	bne.n	8010742 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 801073e:	2300      	movs	r3, #0
 8010740:	e023      	b.n	801078a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    }

    uint16_t kerningTablePos = glyph->kerningTablePos();
 8010742:	6878      	ldr	r0, [r7, #4]
 8010744:	f7ff ff7a 	bl	801063c <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>
 8010748:	4603      	mov	r3, r0
 801074a:	82bb      	strh	r3, [r7, #20]
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 801074c:	8abb      	ldrh	r3, [r7, #20]
 801074e:	82fb      	strh	r3, [r7, #22]
 8010750:	8afa      	ldrh	r2, [r7, #22]
 8010752:	8abb      	ldrh	r3, [r7, #20]
 8010754:	6879      	ldr	r1, [r7, #4]
 8010756:	7b09      	ldrb	r1, [r1, #12]
 8010758:	440b      	add	r3, r1
 801075a:	429a      	cmp	r2, r3
 801075c:	da14      	bge.n	8010788 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
    {
        if (prevChar == kerningData[i].unicodePrevChar)
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	69da      	ldr	r2, [r3, #28]
 8010762:	8afb      	ldrh	r3, [r7, #22]
 8010764:	009b      	lsls	r3, r3, #2
 8010766:	4413      	add	r3, r2
 8010768:	881b      	ldrh	r3, [r3, #0]
 801076a:	897a      	ldrh	r2, [r7, #10]
 801076c:	429a      	cmp	r2, r3
 801076e:	d107      	bne.n	8010780 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x5e>
        {
            return kerningData[i].distance;
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	69da      	ldr	r2, [r3, #28]
 8010774:	8afb      	ldrh	r3, [r7, #22]
 8010776:	009b      	lsls	r3, r3, #2
 8010778:	4413      	add	r3, r2
 801077a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801077e:	e004      	b.n	801078a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 8010780:	8afb      	ldrh	r3, [r7, #22]
 8010782:	3301      	adds	r3, #1
 8010784:	82fb      	strh	r3, [r7, #22]
 8010786:	e7e3      	b.n	8010750 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x2e>
        }
    }
    return 0;
 8010788:	2300      	movs	r3, #0
}
 801078a:	4618      	mov	r0, r3
 801078c:	3718      	adds	r7, #24
 801078e:	46bd      	mov	sp, r7
 8010790:	bd80      	pop	{r7, pc}
	...

08010794 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_10_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_10_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_10_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_10_4bpp(glyphs_Asap_Bold_10_4bpp, 4, 10, 0, 4, 1, 0, 1, unicodes_Asap_Bold_10_4bpp, kerning_Asap_Bold_10_4bpp, 63, 0, 0);
 8010794:	b580      	push	{r7, lr}
 8010796:	af00      	add	r7, sp, #0
 8010798:	4801      	ldr	r0, [pc, #4]	; (80107a0 <__tcf_0+0xc>)
 801079a:	f7ff fecf 	bl	801053c <_ZN8touchgfx13GeneratedFontD1Ev>
 801079e:	bd80      	pop	{r7, pc}
 80107a0:	200085f0 	.word	0x200085f0

080107a4 <_Z25getFont_Asap_Bold_10_4bppv>:
{
 80107a4:	b580      	push	{r7, lr}
 80107a6:	b08a      	sub	sp, #40	; 0x28
 80107a8:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_10_4bpp(glyphs_Asap_Bold_10_4bpp, 4, 10, 0, 4, 1, 0, 1, unicodes_Asap_Bold_10_4bpp, kerning_Asap_Bold_10_4bpp, 63, 0, 0);
 80107aa:	4b15      	ldr	r3, [pc, #84]	; (8010800 <_Z25getFont_Asap_Bold_10_4bppv+0x5c>)
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	f003 0301 	and.w	r3, r3, #1
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d11f      	bne.n	80107f6 <_Z25getFont_Asap_Bold_10_4bppv+0x52>
 80107b6:	2300      	movs	r3, #0
 80107b8:	9309      	str	r3, [sp, #36]	; 0x24
 80107ba:	2300      	movs	r3, #0
 80107bc:	9308      	str	r3, [sp, #32]
 80107be:	233f      	movs	r3, #63	; 0x3f
 80107c0:	9307      	str	r3, [sp, #28]
 80107c2:	4b10      	ldr	r3, [pc, #64]	; (8010804 <_Z25getFont_Asap_Bold_10_4bppv+0x60>)
 80107c4:	9306      	str	r3, [sp, #24]
 80107c6:	4b10      	ldr	r3, [pc, #64]	; (8010808 <_Z25getFont_Asap_Bold_10_4bppv+0x64>)
 80107c8:	9305      	str	r3, [sp, #20]
 80107ca:	2301      	movs	r3, #1
 80107cc:	9304      	str	r3, [sp, #16]
 80107ce:	2300      	movs	r3, #0
 80107d0:	9303      	str	r3, [sp, #12]
 80107d2:	2301      	movs	r3, #1
 80107d4:	9302      	str	r3, [sp, #8]
 80107d6:	2304      	movs	r3, #4
 80107d8:	9301      	str	r3, [sp, #4]
 80107da:	2300      	movs	r3, #0
 80107dc:	9300      	str	r3, [sp, #0]
 80107de:	230a      	movs	r3, #10
 80107e0:	2204      	movs	r2, #4
 80107e2:	490a      	ldr	r1, [pc, #40]	; (801080c <_Z25getFont_Asap_Bold_10_4bppv+0x68>)
 80107e4:	480a      	ldr	r0, [pc, #40]	; (8010810 <_Z25getFont_Asap_Bold_10_4bppv+0x6c>)
 80107e6:	f7ff ff4d 	bl	8010684 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 80107ea:	4b05      	ldr	r3, [pc, #20]	; (8010800 <_Z25getFont_Asap_Bold_10_4bppv+0x5c>)
 80107ec:	2201      	movs	r2, #1
 80107ee:	601a      	str	r2, [r3, #0]
 80107f0:	4808      	ldr	r0, [pc, #32]	; (8010814 <_Z25getFont_Asap_Bold_10_4bppv+0x70>)
 80107f2:	f019 ffe3 	bl	802a7bc <atexit>
    return Asap_Bold_10_4bpp;
 80107f6:	4b06      	ldr	r3, [pc, #24]	; (8010810 <_Z25getFont_Asap_Bold_10_4bppv+0x6c>)
}
 80107f8:	4618      	mov	r0, r3
 80107fa:	46bd      	mov	sp, r7
 80107fc:	bd80      	pop	{r7, pc}
 80107fe:	bf00      	nop
 8010800:	20008614 	.word	0x20008614
 8010804:	08034710 	.word	0x08034710
 8010808:	0802c2e0 	.word	0x0802c2e0
 801080c:	08034748 	.word	0x08034748
 8010810:	200085f0 	.word	0x200085f0
 8010814:	08010795 	.word	0x08010795

08010818 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_12_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_12_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_12_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_12_4bpp(glyphs_Asap_Bold_12_4bpp, 9, 12, 0, 4, 1, 0, 1, unicodes_Asap_Bold_12_4bpp, kerning_Asap_Bold_12_4bpp, 63, 0, 0);
 8010818:	b580      	push	{r7, lr}
 801081a:	af00      	add	r7, sp, #0
 801081c:	4801      	ldr	r0, [pc, #4]	; (8010824 <__tcf_0+0xc>)
 801081e:	f7ff fe8d 	bl	801053c <_ZN8touchgfx13GeneratedFontD1Ev>
 8010822:	bd80      	pop	{r7, pc}
 8010824:	20008618 	.word	0x20008618

08010828 <_Z25getFont_Asap_Bold_12_4bppv>:
{
 8010828:	b580      	push	{r7, lr}
 801082a:	b08a      	sub	sp, #40	; 0x28
 801082c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_12_4bpp(glyphs_Asap_Bold_12_4bpp, 9, 12, 0, 4, 1, 0, 1, unicodes_Asap_Bold_12_4bpp, kerning_Asap_Bold_12_4bpp, 63, 0, 0);
 801082e:	4b15      	ldr	r3, [pc, #84]	; (8010884 <_Z25getFont_Asap_Bold_12_4bppv+0x5c>)
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	f003 0301 	and.w	r3, r3, #1
 8010836:	2b00      	cmp	r3, #0
 8010838:	d11f      	bne.n	801087a <_Z25getFont_Asap_Bold_12_4bppv+0x52>
 801083a:	2300      	movs	r3, #0
 801083c:	9309      	str	r3, [sp, #36]	; 0x24
 801083e:	2300      	movs	r3, #0
 8010840:	9308      	str	r3, [sp, #32]
 8010842:	233f      	movs	r3, #63	; 0x3f
 8010844:	9307      	str	r3, [sp, #28]
 8010846:	4b10      	ldr	r3, [pc, #64]	; (8010888 <_Z25getFont_Asap_Bold_12_4bppv+0x60>)
 8010848:	9306      	str	r3, [sp, #24]
 801084a:	4b10      	ldr	r3, [pc, #64]	; (801088c <_Z25getFont_Asap_Bold_12_4bppv+0x64>)
 801084c:	9305      	str	r3, [sp, #20]
 801084e:	2301      	movs	r3, #1
 8010850:	9304      	str	r3, [sp, #16]
 8010852:	2300      	movs	r3, #0
 8010854:	9303      	str	r3, [sp, #12]
 8010856:	2301      	movs	r3, #1
 8010858:	9302      	str	r3, [sp, #8]
 801085a:	2304      	movs	r3, #4
 801085c:	9301      	str	r3, [sp, #4]
 801085e:	2300      	movs	r3, #0
 8010860:	9300      	str	r3, [sp, #0]
 8010862:	230c      	movs	r3, #12
 8010864:	2209      	movs	r2, #9
 8010866:	490a      	ldr	r1, [pc, #40]	; (8010890 <_Z25getFont_Asap_Bold_12_4bppv+0x68>)
 8010868:	480a      	ldr	r0, [pc, #40]	; (8010894 <_Z25getFont_Asap_Bold_12_4bppv+0x6c>)
 801086a:	f7ff ff0b 	bl	8010684 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 801086e:	4b05      	ldr	r3, [pc, #20]	; (8010884 <_Z25getFont_Asap_Bold_12_4bppv+0x5c>)
 8010870:	2201      	movs	r2, #1
 8010872:	601a      	str	r2, [r3, #0]
 8010874:	4808      	ldr	r0, [pc, #32]	; (8010898 <_Z25getFont_Asap_Bold_12_4bppv+0x70>)
 8010876:	f019 ffa1 	bl	802a7bc <atexit>
    return Asap_Bold_12_4bpp;
 801087a:	4b06      	ldr	r3, [pc, #24]	; (8010894 <_Z25getFont_Asap_Bold_12_4bppv+0x6c>)
}
 801087c:	4618      	mov	r0, r3
 801087e:	46bd      	mov	sp, r7
 8010880:	bd80      	pop	{r7, pc}
 8010882:	bf00      	nop
 8010884:	2000863c 	.word	0x2000863c
 8010888:	08034714 	.word	0x08034714
 801088c:	0802c2e4 	.word	0x0802c2e4
 8010890:	08034780 	.word	0x08034780
 8010894:	20008618 	.word	0x20008618
 8010898:	08010819 	.word	0x08010819

0801089c <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_18_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_18_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_18_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_18_4bpp(glyphs_Asap_Bold_18_4bpp, 58, 18, 4, 4, 1, 1, 1, unicodes_Asap_Bold_18_4bpp, kerning_Asap_Bold_18_4bpp, 0, 0, 0);
 801089c:	b580      	push	{r7, lr}
 801089e:	af00      	add	r7, sp, #0
 80108a0:	4801      	ldr	r0, [pc, #4]	; (80108a8 <__tcf_0+0xc>)
 80108a2:	f7ff fe4b 	bl	801053c <_ZN8touchgfx13GeneratedFontD1Ev>
 80108a6:	bd80      	pop	{r7, pc}
 80108a8:	20008640 	.word	0x20008640

080108ac <_Z25getFont_Asap_Bold_18_4bppv>:
{
 80108ac:	b580      	push	{r7, lr}
 80108ae:	b08a      	sub	sp, #40	; 0x28
 80108b0:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_18_4bpp(glyphs_Asap_Bold_18_4bpp, 58, 18, 4, 4, 1, 1, 1, unicodes_Asap_Bold_18_4bpp, kerning_Asap_Bold_18_4bpp, 0, 0, 0);
 80108b2:	4b15      	ldr	r3, [pc, #84]	; (8010908 <_Z25getFont_Asap_Bold_18_4bppv+0x5c>)
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	f003 0301 	and.w	r3, r3, #1
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d11f      	bne.n	80108fe <_Z25getFont_Asap_Bold_18_4bppv+0x52>
 80108be:	2300      	movs	r3, #0
 80108c0:	9309      	str	r3, [sp, #36]	; 0x24
 80108c2:	2300      	movs	r3, #0
 80108c4:	9308      	str	r3, [sp, #32]
 80108c6:	2300      	movs	r3, #0
 80108c8:	9307      	str	r3, [sp, #28]
 80108ca:	4b10      	ldr	r3, [pc, #64]	; (801090c <_Z25getFont_Asap_Bold_18_4bppv+0x60>)
 80108cc:	9306      	str	r3, [sp, #24]
 80108ce:	4b10      	ldr	r3, [pc, #64]	; (8010910 <_Z25getFont_Asap_Bold_18_4bppv+0x64>)
 80108d0:	9305      	str	r3, [sp, #20]
 80108d2:	2301      	movs	r3, #1
 80108d4:	9304      	str	r3, [sp, #16]
 80108d6:	2301      	movs	r3, #1
 80108d8:	9303      	str	r3, [sp, #12]
 80108da:	2301      	movs	r3, #1
 80108dc:	9302      	str	r3, [sp, #8]
 80108de:	2304      	movs	r3, #4
 80108e0:	9301      	str	r3, [sp, #4]
 80108e2:	2304      	movs	r3, #4
 80108e4:	9300      	str	r3, [sp, #0]
 80108e6:	2312      	movs	r3, #18
 80108e8:	223a      	movs	r2, #58	; 0x3a
 80108ea:	490a      	ldr	r1, [pc, #40]	; (8010914 <_Z25getFont_Asap_Bold_18_4bppv+0x68>)
 80108ec:	480a      	ldr	r0, [pc, #40]	; (8010918 <_Z25getFont_Asap_Bold_18_4bppv+0x6c>)
 80108ee:	f7ff fec9 	bl	8010684 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 80108f2:	4b05      	ldr	r3, [pc, #20]	; (8010908 <_Z25getFont_Asap_Bold_18_4bppv+0x5c>)
 80108f4:	2201      	movs	r2, #1
 80108f6:	601a      	str	r2, [r3, #0]
 80108f8:	4808      	ldr	r0, [pc, #32]	; (801091c <_Z25getFont_Asap_Bold_18_4bppv+0x70>)
 80108fa:	f019 ff5f 	bl	802a7bc <atexit>
    return Asap_Bold_18_4bpp;
 80108fe:	4b06      	ldr	r3, [pc, #24]	; (8010918 <_Z25getFont_Asap_Bold_18_4bppv+0x6c>)
}
 8010900:	4618      	mov	r0, r3
 8010902:	46bd      	mov	sp, r7
 8010904:	bd80      	pop	{r7, pc}
 8010906:	bf00      	nop
 8010908:	20008664 	.word	0x20008664
 801090c:	08034718 	.word	0x08034718
 8010910:	0802c2e8 	.word	0x0802c2e8
 8010914:	08034800 	.word	0x08034800
 8010918:	20008640 	.word	0x20008640
 801091c:	0801089d 	.word	0x0801089d

08010920 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_21_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_21_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_21_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_21_4bpp(glyphs_Asap_Bold_21_4bpp, 13, 21, 0, 4, 1, 0, 1, unicodes_Asap_Bold_21_4bpp, kerning_Asap_Bold_21_4bpp, 63, 0, 0);
 8010920:	b580      	push	{r7, lr}
 8010922:	af00      	add	r7, sp, #0
 8010924:	4801      	ldr	r0, [pc, #4]	; (801092c <__tcf_0+0xc>)
 8010926:	f7ff fe09 	bl	801053c <_ZN8touchgfx13GeneratedFontD1Ev>
 801092a:	bd80      	pop	{r7, pc}
 801092c:	20008668 	.word	0x20008668

08010930 <_Z25getFont_Asap_Bold_21_4bppv>:
{
 8010930:	b580      	push	{r7, lr}
 8010932:	b08a      	sub	sp, #40	; 0x28
 8010934:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_21_4bpp(glyphs_Asap_Bold_21_4bpp, 13, 21, 0, 4, 1, 0, 1, unicodes_Asap_Bold_21_4bpp, kerning_Asap_Bold_21_4bpp, 63, 0, 0);
 8010936:	4b15      	ldr	r3, [pc, #84]	; (801098c <_Z25getFont_Asap_Bold_21_4bppv+0x5c>)
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	f003 0301 	and.w	r3, r3, #1
 801093e:	2b00      	cmp	r3, #0
 8010940:	d11f      	bne.n	8010982 <_Z25getFont_Asap_Bold_21_4bppv+0x52>
 8010942:	2300      	movs	r3, #0
 8010944:	9309      	str	r3, [sp, #36]	; 0x24
 8010946:	2300      	movs	r3, #0
 8010948:	9308      	str	r3, [sp, #32]
 801094a:	233f      	movs	r3, #63	; 0x3f
 801094c:	9307      	str	r3, [sp, #28]
 801094e:	4b10      	ldr	r3, [pc, #64]	; (8010990 <_Z25getFont_Asap_Bold_21_4bppv+0x60>)
 8010950:	9306      	str	r3, [sp, #24]
 8010952:	4b10      	ldr	r3, [pc, #64]	; (8010994 <_Z25getFont_Asap_Bold_21_4bppv+0x64>)
 8010954:	9305      	str	r3, [sp, #20]
 8010956:	2301      	movs	r3, #1
 8010958:	9304      	str	r3, [sp, #16]
 801095a:	2300      	movs	r3, #0
 801095c:	9303      	str	r3, [sp, #12]
 801095e:	2301      	movs	r3, #1
 8010960:	9302      	str	r3, [sp, #8]
 8010962:	2304      	movs	r3, #4
 8010964:	9301      	str	r3, [sp, #4]
 8010966:	2300      	movs	r3, #0
 8010968:	9300      	str	r3, [sp, #0]
 801096a:	2315      	movs	r3, #21
 801096c:	220d      	movs	r2, #13
 801096e:	490a      	ldr	r1, [pc, #40]	; (8010998 <_Z25getFont_Asap_Bold_21_4bppv+0x68>)
 8010970:	480a      	ldr	r0, [pc, #40]	; (801099c <_Z25getFont_Asap_Bold_21_4bppv+0x6c>)
 8010972:	f7ff fe87 	bl	8010684 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8010976:	4b05      	ldr	r3, [pc, #20]	; (801098c <_Z25getFont_Asap_Bold_21_4bppv+0x5c>)
 8010978:	2201      	movs	r2, #1
 801097a:	601a      	str	r2, [r3, #0]
 801097c:	4808      	ldr	r0, [pc, #32]	; (80109a0 <_Z25getFont_Asap_Bold_21_4bppv+0x70>)
 801097e:	f019 ff1d 	bl	802a7bc <atexit>
    return Asap_Bold_21_4bpp;
 8010982:	4b06      	ldr	r3, [pc, #24]	; (801099c <_Z25getFont_Asap_Bold_21_4bppv+0x6c>)
}
 8010984:	4618      	mov	r0, r3
 8010986:	46bd      	mov	sp, r7
 8010988:	bd80      	pop	{r7, pc}
 801098a:	bf00      	nop
 801098c:	2000868c 	.word	0x2000868c
 8010990:	08034738 	.word	0x08034738
 8010994:	0802c2ec 	.word	0x0802c2ec
 8010998:	08034b2c 	.word	0x08034b2c
 801099c:	20008668 	.word	0x20008668
 80109a0:	08010921 	.word	0x08010921

080109a4 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_30_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_30_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_30_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_30_4bpp(glyphs_Asap_Bold_30_4bpp, 12, 30, 0, 4, 1, 0, 1, unicodes_Asap_Bold_30_4bpp, kerning_Asap_Bold_30_4bpp, 63, 0, 0);
 80109a4:	b580      	push	{r7, lr}
 80109a6:	af00      	add	r7, sp, #0
 80109a8:	4801      	ldr	r0, [pc, #4]	; (80109b0 <__tcf_0+0xc>)
 80109aa:	f7ff fdc7 	bl	801053c <_ZN8touchgfx13GeneratedFontD1Ev>
 80109ae:	bd80      	pop	{r7, pc}
 80109b0:	20008690 	.word	0x20008690

080109b4 <_Z25getFont_Asap_Bold_30_4bppv>:
{
 80109b4:	b580      	push	{r7, lr}
 80109b6:	b08a      	sub	sp, #40	; 0x28
 80109b8:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_30_4bpp(glyphs_Asap_Bold_30_4bpp, 12, 30, 0, 4, 1, 0, 1, unicodes_Asap_Bold_30_4bpp, kerning_Asap_Bold_30_4bpp, 63, 0, 0);
 80109ba:	4b15      	ldr	r3, [pc, #84]	; (8010a10 <_Z25getFont_Asap_Bold_30_4bppv+0x5c>)
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	f003 0301 	and.w	r3, r3, #1
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d11f      	bne.n	8010a06 <_Z25getFont_Asap_Bold_30_4bppv+0x52>
 80109c6:	2300      	movs	r3, #0
 80109c8:	9309      	str	r3, [sp, #36]	; 0x24
 80109ca:	2300      	movs	r3, #0
 80109cc:	9308      	str	r3, [sp, #32]
 80109ce:	233f      	movs	r3, #63	; 0x3f
 80109d0:	9307      	str	r3, [sp, #28]
 80109d2:	4b10      	ldr	r3, [pc, #64]	; (8010a14 <_Z25getFont_Asap_Bold_30_4bppv+0x60>)
 80109d4:	9306      	str	r3, [sp, #24]
 80109d6:	4b10      	ldr	r3, [pc, #64]	; (8010a18 <_Z25getFont_Asap_Bold_30_4bppv+0x64>)
 80109d8:	9305      	str	r3, [sp, #20]
 80109da:	2301      	movs	r3, #1
 80109dc:	9304      	str	r3, [sp, #16]
 80109de:	2300      	movs	r3, #0
 80109e0:	9303      	str	r3, [sp, #12]
 80109e2:	2301      	movs	r3, #1
 80109e4:	9302      	str	r3, [sp, #8]
 80109e6:	2304      	movs	r3, #4
 80109e8:	9301      	str	r3, [sp, #4]
 80109ea:	2300      	movs	r3, #0
 80109ec:	9300      	str	r3, [sp, #0]
 80109ee:	231e      	movs	r3, #30
 80109f0:	220c      	movs	r2, #12
 80109f2:	490a      	ldr	r1, [pc, #40]	; (8010a1c <_Z25getFont_Asap_Bold_30_4bppv+0x68>)
 80109f4:	480a      	ldr	r0, [pc, #40]	; (8010a20 <_Z25getFont_Asap_Bold_30_4bppv+0x6c>)
 80109f6:	f7ff fe45 	bl	8010684 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 80109fa:	4b05      	ldr	r3, [pc, #20]	; (8010a10 <_Z25getFont_Asap_Bold_30_4bppv+0x5c>)
 80109fc:	2201      	movs	r2, #1
 80109fe:	601a      	str	r2, [r3, #0]
 8010a00:	4808      	ldr	r0, [pc, #32]	; (8010a24 <_Z25getFont_Asap_Bold_30_4bppv+0x70>)
 8010a02:	f019 fedb 	bl	802a7bc <atexit>
    return Asap_Bold_30_4bpp;
 8010a06:	4b06      	ldr	r3, [pc, #24]	; (8010a20 <_Z25getFont_Asap_Bold_30_4bppv+0x6c>)
}
 8010a08:	4618      	mov	r0, r3
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	bd80      	pop	{r7, pc}
 8010a0e:	bf00      	nop
 8010a10:	200086b4 	.word	0x200086b4
 8010a14:	0803473c 	.word	0x0803473c
 8010a18:	0802c2f0 	.word	0x0802c2f0
 8010a1c:	08034be4 	.word	0x08034be4
 8010a20:	20008690 	.word	0x20008690
 8010a24:	080109a5 	.word	0x080109a5

08010a28 <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_40_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_40_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_40_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_40_4bpp(glyphs_Asap_Bold_40_4bpp, 13, 40, 0, 4, 1, 0, 1, unicodes_Asap_Bold_40_4bpp, kerning_Asap_Bold_40_4bpp, 63, 0, 0);
 8010a28:	b580      	push	{r7, lr}
 8010a2a:	af00      	add	r7, sp, #0
 8010a2c:	4801      	ldr	r0, [pc, #4]	; (8010a34 <__tcf_0+0xc>)
 8010a2e:	f7ff fd85 	bl	801053c <_ZN8touchgfx13GeneratedFontD1Ev>
 8010a32:	bd80      	pop	{r7, pc}
 8010a34:	200086b8 	.word	0x200086b8

08010a38 <_Z25getFont_Asap_Bold_40_4bppv>:
{
 8010a38:	b580      	push	{r7, lr}
 8010a3a:	b08a      	sub	sp, #40	; 0x28
 8010a3c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_40_4bpp(glyphs_Asap_Bold_40_4bpp, 13, 40, 0, 4, 1, 0, 1, unicodes_Asap_Bold_40_4bpp, kerning_Asap_Bold_40_4bpp, 63, 0, 0);
 8010a3e:	4b15      	ldr	r3, [pc, #84]	; (8010a94 <_Z25getFont_Asap_Bold_40_4bppv+0x5c>)
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	f003 0301 	and.w	r3, r3, #1
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d11f      	bne.n	8010a8a <_Z25getFont_Asap_Bold_40_4bppv+0x52>
 8010a4a:	2300      	movs	r3, #0
 8010a4c:	9309      	str	r3, [sp, #36]	; 0x24
 8010a4e:	2300      	movs	r3, #0
 8010a50:	9308      	str	r3, [sp, #32]
 8010a52:	233f      	movs	r3, #63	; 0x3f
 8010a54:	9307      	str	r3, [sp, #28]
 8010a56:	4b10      	ldr	r3, [pc, #64]	; (8010a98 <_Z25getFont_Asap_Bold_40_4bppv+0x60>)
 8010a58:	9306      	str	r3, [sp, #24]
 8010a5a:	4b10      	ldr	r3, [pc, #64]	; (8010a9c <_Z25getFont_Asap_Bold_40_4bppv+0x64>)
 8010a5c:	9305      	str	r3, [sp, #20]
 8010a5e:	2301      	movs	r3, #1
 8010a60:	9304      	str	r3, [sp, #16]
 8010a62:	2300      	movs	r3, #0
 8010a64:	9303      	str	r3, [sp, #12]
 8010a66:	2301      	movs	r3, #1
 8010a68:	9302      	str	r3, [sp, #8]
 8010a6a:	2304      	movs	r3, #4
 8010a6c:	9301      	str	r3, [sp, #4]
 8010a6e:	2300      	movs	r3, #0
 8010a70:	9300      	str	r3, [sp, #0]
 8010a72:	2328      	movs	r3, #40	; 0x28
 8010a74:	220d      	movs	r2, #13
 8010a76:	490a      	ldr	r1, [pc, #40]	; (8010aa0 <_Z25getFont_Asap_Bold_40_4bppv+0x68>)
 8010a78:	480a      	ldr	r0, [pc, #40]	; (8010aa4 <_Z25getFont_Asap_Bold_40_4bppv+0x6c>)
 8010a7a:	f7ff fe03 	bl	8010684 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8010a7e:	4b05      	ldr	r3, [pc, #20]	; (8010a94 <_Z25getFont_Asap_Bold_40_4bppv+0x5c>)
 8010a80:	2201      	movs	r2, #1
 8010a82:	601a      	str	r2, [r3, #0]
 8010a84:	4808      	ldr	r0, [pc, #32]	; (8010aa8 <_Z25getFont_Asap_Bold_40_4bppv+0x70>)
 8010a86:	f019 fe99 	bl	802a7bc <atexit>
    return Asap_Bold_40_4bpp;
 8010a8a:	4b06      	ldr	r3, [pc, #24]	; (8010aa4 <_Z25getFont_Asap_Bold_40_4bppv+0x6c>)
}
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	46bd      	mov	sp, r7
 8010a90:	bd80      	pop	{r7, pc}
 8010a92:	bf00      	nop
 8010a94:	200086dc 	.word	0x200086dc
 8010a98:	08034740 	.word	0x08034740
 8010a9c:	0802c2f4 	.word	0x0802c2f4
 8010aa0:	08034c8c 	.word	0x08034c8c
 8010aa4:	200086b8 	.word	0x200086b8
 8010aa8:	08010a29 	.word	0x08010a29

08010aac <__tcf_0>:
extern const touchgfx::KerningNode kerning_Asap_Bold_60_4bpp[];
touchgfx::GeneratedFont& getFont_Asap_Bold_60_4bpp();

touchgfx::GeneratedFont& getFont_Asap_Bold_60_4bpp()
{
    static touchgfx::GeneratedFont Asap_Bold_60_4bpp(glyphs_Asap_Bold_60_4bpp, 13, 60, 0, 4, 1, 0, 0, unicodes_Asap_Bold_60_4bpp, kerning_Asap_Bold_60_4bpp, 63, 0, 0);
 8010aac:	b580      	push	{r7, lr}
 8010aae:	af00      	add	r7, sp, #0
 8010ab0:	4801      	ldr	r0, [pc, #4]	; (8010ab8 <__tcf_0+0xc>)
 8010ab2:	f7ff fd43 	bl	801053c <_ZN8touchgfx13GeneratedFontD1Ev>
 8010ab6:	bd80      	pop	{r7, pc}
 8010ab8:	200086e0 	.word	0x200086e0

08010abc <_Z25getFont_Asap_Bold_60_4bppv>:
{
 8010abc:	b580      	push	{r7, lr}
 8010abe:	b08a      	sub	sp, #40	; 0x28
 8010ac0:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont Asap_Bold_60_4bpp(glyphs_Asap_Bold_60_4bpp, 13, 60, 0, 4, 1, 0, 0, unicodes_Asap_Bold_60_4bpp, kerning_Asap_Bold_60_4bpp, 63, 0, 0);
 8010ac2:	4b15      	ldr	r3, [pc, #84]	; (8010b18 <_Z25getFont_Asap_Bold_60_4bppv+0x5c>)
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	f003 0301 	and.w	r3, r3, #1
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d11f      	bne.n	8010b0e <_Z25getFont_Asap_Bold_60_4bppv+0x52>
 8010ace:	2300      	movs	r3, #0
 8010ad0:	9309      	str	r3, [sp, #36]	; 0x24
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	9308      	str	r3, [sp, #32]
 8010ad6:	233f      	movs	r3, #63	; 0x3f
 8010ad8:	9307      	str	r3, [sp, #28]
 8010ada:	4b10      	ldr	r3, [pc, #64]	; (8010b1c <_Z25getFont_Asap_Bold_60_4bppv+0x60>)
 8010adc:	9306      	str	r3, [sp, #24]
 8010ade:	4b10      	ldr	r3, [pc, #64]	; (8010b20 <_Z25getFont_Asap_Bold_60_4bppv+0x64>)
 8010ae0:	9305      	str	r3, [sp, #20]
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	9304      	str	r3, [sp, #16]
 8010ae6:	2300      	movs	r3, #0
 8010ae8:	9303      	str	r3, [sp, #12]
 8010aea:	2301      	movs	r3, #1
 8010aec:	9302      	str	r3, [sp, #8]
 8010aee:	2304      	movs	r3, #4
 8010af0:	9301      	str	r3, [sp, #4]
 8010af2:	2300      	movs	r3, #0
 8010af4:	9300      	str	r3, [sp, #0]
 8010af6:	233c      	movs	r3, #60	; 0x3c
 8010af8:	220d      	movs	r2, #13
 8010afa:	490a      	ldr	r1, [pc, #40]	; (8010b24 <_Z25getFont_Asap_Bold_60_4bppv+0x68>)
 8010afc:	480a      	ldr	r0, [pc, #40]	; (8010b28 <_Z25getFont_Asap_Bold_60_4bppv+0x6c>)
 8010afe:	f7ff fdc1 	bl	8010684 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8010b02:	4b05      	ldr	r3, [pc, #20]	; (8010b18 <_Z25getFont_Asap_Bold_60_4bppv+0x5c>)
 8010b04:	2201      	movs	r2, #1
 8010b06:	601a      	str	r2, [r3, #0]
 8010b08:	4808      	ldr	r0, [pc, #32]	; (8010b2c <_Z25getFont_Asap_Bold_60_4bppv+0x70>)
 8010b0a:	f019 fe57 	bl	802a7bc <atexit>
    return Asap_Bold_60_4bpp;
 8010b0e:	4b06      	ldr	r3, [pc, #24]	; (8010b28 <_Z25getFont_Asap_Bold_60_4bppv+0x6c>)
}
 8010b10:	4618      	mov	r0, r3
 8010b12:	46bd      	mov	sp, r7
 8010b14:	bd80      	pop	{r7, pc}
 8010b16:	bf00      	nop
 8010b18:	20008704 	.word	0x20008704
 8010b1c:	08034744 	.word	0x08034744
 8010b20:	0802c2f8 	.word	0x0802c2f8
 8010b24:	08034d44 	.word	0x08034d44
 8010b28:	200086e0 	.word	0x200086e0
 8010b2c:	08010aad 	.word	0x08010aad

08010b30 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8010b30:	b480      	push	{r7}
 8010b32:	b083      	sub	sp, #12
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	6078      	str	r0, [r7, #4]
 8010b38:	6039      	str	r1, [r7, #0]
 8010b3a:	683b      	ldr	r3, [r7, #0]
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	370c      	adds	r7, #12
 8010b40:	46bd      	mov	sp, r7
 8010b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b46:	4770      	bx	lr

08010b48 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     *        This handler is invoked when a mouse click or display touch event has been
     *        detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8010b48:	b480      	push	{r7}
 8010b4a:	b083      	sub	sp, #12
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	6078      	str	r0, [r7, #4]
 8010b50:	6039      	str	r1, [r7, #0]
    {
    }
 8010b52:	bf00      	nop
 8010b54:	370c      	adds	r7, #12
 8010b56:	46bd      	mov	sp, r7
 8010b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b5c:	4770      	bx	lr

08010b5e <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     *
     *        This handler is invoked when a drag event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8010b5e:	b480      	push	{r7}
 8010b60:	b083      	sub	sp, #12
 8010b62:	af00      	add	r7, sp, #0
 8010b64:	6078      	str	r0, [r7, #4]
 8010b66:	6039      	str	r1, [r7, #0]
    {
    }
 8010b68:	bf00      	nop
 8010b6a:	370c      	adds	r7, #12
 8010b6c:	46bd      	mov	sp, r7
 8010b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b72:	4770      	bx	lr

08010b74 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     *
     *        This handler is invoked when a gesture event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8010b74:	b480      	push	{r7}
 8010b76:	b083      	sub	sp, #12
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	6078      	str	r0, [r7, #4]
 8010b7c:	6039      	str	r1, [r7, #0]
    {
    }
 8010b7e:	bf00      	nop
 8010b80:	370c      	adds	r7, #12
 8010b82:	46bd      	mov	sp, r7
 8010b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b88:	4770      	bx	lr

08010b8a <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     *        This handler is invoked when a key (or button) event has been detected by the
     *        system.
     *
     * @param c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8010b8a:	b480      	push	{r7}
 8010b8c:	b083      	sub	sp, #12
 8010b8e:	af00      	add	r7, sp, #0
 8010b90:	6078      	str	r0, [r7, #4]
 8010b92:	460b      	mov	r3, r1
 8010b94:	70fb      	strb	r3, [r7, #3]
    {
    }
 8010b96:	bf00      	nop
 8010b98:	370c      	adds	r7, #12
 8010b9a:	46bd      	mov	sp, r7
 8010b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba0:	4770      	bx	lr

08010ba2 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * @brief This handler is invoked when a system tick event has been generated.
     *
     *        This handler is invoked when a system tick event has been generated. The system
     *        tick period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8010ba2:	b480      	push	{r7}
 8010ba4:	b083      	sub	sp, #12
 8010ba6:	af00      	add	r7, sp, #0
 8010ba8:	6078      	str	r0, [r7, #4]
    {
    }
 8010baa:	bf00      	nop
 8010bac:	370c      	adds	r7, #12
 8010bae:	46bd      	mov	sp, r7
 8010bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb4:	4770      	bx	lr

08010bb6 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:
     *
     * @brief This handler is invoked when a change screen event is pending.
     *
     *        This handler is invoked when a change screen event is pending.
     */
    virtual void handlePendingScreenTransition()
 8010bb6:	b480      	push	{r7}
 8010bb8:	b083      	sub	sp, #12
 8010bba:	af00      	add	r7, sp, #0
 8010bbc:	6078      	str	r0, [r7, #4]
    {
    }
 8010bbe:	bf00      	nop
 8010bc0:	370c      	adds	r7, #12
 8010bc2:	46bd      	mov	sp, r7
 8010bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc8:	4770      	bx	lr
	...

08010bcc <_ZN8touchgfx15UIEventListenerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~UIEventListener()
 8010bcc:	b480      	push	{r7}
 8010bce:	b083      	sub	sp, #12
 8010bd0:	af00      	add	r7, sp, #0
 8010bd2:	6078      	str	r0, [r7, #4]
    {
 8010bd4:	4a04      	ldr	r2, [pc, #16]	; (8010be8 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	601a      	str	r2, [r3, #0]
    }
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	4618      	mov	r0, r3
 8010bde:	370c      	adds	r7, #12
 8010be0:	46bd      	mov	sp, r7
 8010be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be6:	4770      	bx	lr
 8010be8:	0802c484 	.word	0x0802c484

08010bec <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8010bec:	b580      	push	{r7, lr}
 8010bee:	b082      	sub	sp, #8
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	6078      	str	r0, [r7, #4]
    }
 8010bf4:	6878      	ldr	r0, [r7, #4]
 8010bf6:	f7ff ffe9 	bl	8010bcc <_ZN8touchgfx15UIEventListenerD1Ev>
 8010bfa:	2104      	movs	r1, #4
 8010bfc:	6878      	ldr	r0, [r7, #4]
 8010bfe:	f019 fd94 	bl	802a72a <_ZdlPvj>
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	4618      	mov	r0, r3
 8010c06:	3708      	adds	r7, #8
 8010c08:	46bd      	mov	sp, r7
 8010c0a:	bd80      	pop	{r7, pc}

08010c0c <_ZN8touchgfx10TransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs the Transition.
     */
    Transition() :
 8010c0c:	b480      	push	{r7}
 8010c0e:	b083      	sub	sp, #12
 8010c10:	af00      	add	r7, sp, #0
 8010c12:	6078      	str	r0, [r7, #4]
        screenContainer(0), done(false)
 8010c14:	4a07      	ldr	r2, [pc, #28]	; (8010c34 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	601a      	str	r2, [r3, #0]
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	2200      	movs	r2, #0
 8010c1e:	605a      	str	r2, [r3, #4]
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	2200      	movs	r2, #0
 8010c24:	721a      	strb	r2, [r3, #8]
    {
    }
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	4618      	mov	r0, r3
 8010c2a:	370c      	adds	r7, #12
 8010c2c:	46bd      	mov	sp, r7
 8010c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c32:	4770      	bx	lr
 8010c34:	0802c464 	.word	0x0802c464

08010c38 <_ZN8touchgfx10TransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Transition()
 8010c38:	b480      	push	{r7}
 8010c3a:	b083      	sub	sp, #12
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6078      	str	r0, [r7, #4]
    {
 8010c40:	4a04      	ldr	r2, [pc, #16]	; (8010c54 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	601a      	str	r2, [r3, #0]
    }
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	4618      	mov	r0, r3
 8010c4a:	370c      	adds	r7, #12
 8010c4c:	46bd      	mov	sp, r7
 8010c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c52:	4770      	bx	lr
 8010c54:	0802c464 	.word	0x0802c464

08010c58 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	b082      	sub	sp, #8
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	6078      	str	r0, [r7, #4]
    }
 8010c60:	6878      	ldr	r0, [r7, #4]
 8010c62:	f7ff ffe9 	bl	8010c38 <_ZN8touchgfx10TransitionD1Ev>
 8010c66:	210c      	movs	r1, #12
 8010c68:	6878      	ldr	r0, [r7, #4]
 8010c6a:	f019 fd5e 	bl	802a72a <_ZdlPvj>
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	4618      	mov	r0, r3
 8010c72:	3708      	adds	r7, #8
 8010c74:	46bd      	mov	sp, r7
 8010c76:	bd80      	pop	{r7, pc}

08010c78 <_ZN8touchgfx10Transition15handleTickEventEv>:
     *
     * @brief Called for every tick when transitioning.
     *
     *        Called for every tick when transitioning. Base does nothing.
     */
    virtual void handleTickEvent() { }
 8010c78:	b480      	push	{r7}
 8010c7a:	b083      	sub	sp, #12
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	6078      	str	r0, [r7, #4]
 8010c80:	bf00      	nop
 8010c82:	370c      	adds	r7, #12
 8010c84:	46bd      	mov	sp, r7
 8010c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c8a:	4770      	bx	lr

08010c8c <_ZN8touchgfx10Transition8tearDownEv>:
     * @brief Tears down the Animation.
     *
     *        Tears down the Animation. Called before the d.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void tearDown() { }
 8010c8c:	b480      	push	{r7}
 8010c8e:	b083      	sub	sp, #12
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	6078      	str	r0, [r7, #4]
 8010c94:	bf00      	nop
 8010c96:	370c      	adds	r7, #12
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c9e:	4770      	bx	lr

08010ca0 <_ZN8touchgfx10Transition4initEv>:
     * @brief Initializes the transition.
     *
     *        Initializes the transition. Called after the c.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void init() { }
 8010ca0:	b480      	push	{r7}
 8010ca2:	b083      	sub	sp, #12
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	6078      	str	r0, [r7, #4]
 8010ca8:	bf00      	nop
 8010caa:	370c      	adds	r7, #12
 8010cac:	46bd      	mov	sp, r7
 8010cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb2:	4770      	bx	lr

08010cb4 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *        Sets the screen container. Is used by Screen to enable the transition to access
     *        the container.
     *
     * @param [in] cont The container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8010cb4:	b480      	push	{r7}
 8010cb6:	b083      	sub	sp, #12
 8010cb8:	af00      	add	r7, sp, #0
 8010cba:	6078      	str	r0, [r7, #4]
 8010cbc:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	683a      	ldr	r2, [r7, #0]
 8010cc2:	605a      	str	r2, [r3, #4]
    }
 8010cc4:	bf00      	nop
 8010cc6:	370c      	adds	r7, #12
 8010cc8:	46bd      	mov	sp, r7
 8010cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cce:	4770      	bx	lr

08010cd0 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *        provide a means to switch screen from places that does not have access to a
     *        pointer to the new screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8010cd0:	b480      	push	{r7}
 8010cd2:	b083      	sub	sp, #12
 8010cd4:	af00      	add	r7, sp, #0
 8010cd6:	6078      	str	r0, [r7, #4]
 8010cd8:	460b      	mov	r3, r1
 8010cda:	70fb      	strb	r3, [r7, #3]
    {
    }
 8010cdc:	bf00      	nop
 8010cde:	370c      	adds	r7, #12
 8010ce0:	46bd      	mov	sp, r7
 8010ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ce6:	4770      	bx	lr

08010ce8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
     *
     * @brief Destructor.
     *
     *        Empty virtual destructor.
     */
    virtual ~GenericCallback()
 8010ce8:	b480      	push	{r7}
 8010cea:	b083      	sub	sp, #12
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	6078      	str	r0, [r7, #4]
    {
 8010cf0:	4a04      	ldr	r2, [pc, #16]	; (8010d04 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	601a      	str	r2, [r3, #0]
    }
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	370c      	adds	r7, #12
 8010cfc:	46bd      	mov	sp, r7
 8010cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d02:	4770      	bx	lr
 8010d04:	0802c44c 	.word	0x0802c44c

08010d08 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8010d08:	b580      	push	{r7, lr}
 8010d0a:	b082      	sub	sp, #8
 8010d0c:	af00      	add	r7, sp, #0
 8010d0e:	6078      	str	r0, [r7, #4]
    }
 8010d10:	6878      	ldr	r0, [r7, #4]
 8010d12:	f7ff ffe9 	bl	8010ce8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8010d16:	2104      	movs	r1, #4
 8010d18:	6878      	ldr	r0, [r7, #4]
 8010d1a:	f019 fd06 	bl	802a72a <_ZdlPvj>
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	4618      	mov	r0, r3
 8010d22:	3708      	adds	r7, #8
 8010d24:	46bd      	mov	sp, r7
 8010d26:	bd80      	pop	{r7, pc}

08010d28 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param x      The x coordinate of this Drawable.
     * @param y      The y coordinate of this Drawable.
     * @param width  The width of this Drawable.
     * @param height The height of this Drawable.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8010d28:	b580      	push	{r7, lr}
 8010d2a:	b084      	sub	sp, #16
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	60f8      	str	r0, [r7, #12]
 8010d30:	4608      	mov	r0, r1
 8010d32:	4611      	mov	r1, r2
 8010d34:	461a      	mov	r2, r3
 8010d36:	4603      	mov	r3, r0
 8010d38:	817b      	strh	r3, [r7, #10]
 8010d3a:	460b      	mov	r3, r1
 8010d3c:	813b      	strh	r3, [r7, #8]
 8010d3e:	4613      	mov	r3, r2
 8010d40:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	3334      	adds	r3, #52	; 0x34
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8010d4e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8010d52:	68f8      	ldr	r0, [r7, #12]
 8010d54:	4798      	blx	r3
        setWidth(width);
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	3338      	adds	r3, #56	; 0x38
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010d62:	4611      	mov	r1, r2
 8010d64:	68f8      	ldr	r0, [r7, #12]
 8010d66:	4798      	blx	r3
        setHeight(height);
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	333c      	adds	r3, #60	; 0x3c
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8010d74:	4611      	mov	r1, r2
 8010d76:	68f8      	ldr	r0, [r7, #12]
 8010d78:	4798      	blx	r3
    }
 8010d7a:	bf00      	nop
 8010d7c:	3710      	adds	r7, #16
 8010d7e:	46bd      	mov	sp, r7
 8010d80:	bd80      	pop	{r7, pc}

08010d82 <_ZNK8touchgfx8Drawable4getXEv>:
     *
     *        Gets the x coordinate of this drawable.
     *
     * @return The x value, relative to the parent.
     */
    int16_t getX() const
 8010d82:	b480      	push	{r7}
 8010d84:	b083      	sub	sp, #12
 8010d86:	af00      	add	r7, sp, #0
 8010d88:	6078      	str	r0, [r7, #4]
    {
        return rect.x;
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    }
 8010d90:	4618      	mov	r0, r3
 8010d92:	370c      	adds	r7, #12
 8010d94:	46bd      	mov	sp, r7
 8010d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d9a:	4770      	bx	lr

08010d9c <_ZNK8touchgfx8Drawable4getYEv>:
     *
     *        Gets the y coordinate of this drawable.
     *
     * @return The y value, relative to the parent.
     */
    int16_t getY() const
 8010d9c:	b480      	push	{r7}
 8010d9e:	b083      	sub	sp, #12
 8010da0:	af00      	add	r7, sp, #0
 8010da2:	6078      	str	r0, [r7, #4]
    {
        return rect.y;
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    }
 8010daa:	4618      	mov	r0, r3
 8010dac:	370c      	adds	r7, #12
 8010dae:	46bd      	mov	sp, r7
 8010db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db4:	4770      	bx	lr
	...

08010db8 <_ZN8touchgfx3HAL11getInstanceEv>:
     *
     *        Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 8010db8:	b480      	push	{r7}
 8010dba:	af00      	add	r7, sp, #0
    {
        return instance;
 8010dbc:	4b03      	ldr	r3, [pc, #12]	; (8010dcc <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 8010dbe:	681b      	ldr	r3, [r3, #0]
    }
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	46bd      	mov	sp, r7
 8010dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc8:	4770      	bx	lr
 8010dca:	bf00      	nop
 8010dcc:	2000bf68 	.word	0x2000bf68

08010dd0 <_ZN8touchgfx3HAL3lcdEv>:
     *
     *        Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 8010dd0:	b480      	push	{r7}
 8010dd2:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8010dd4:	4b0b      	ldr	r3, [pc, #44]	; (8010e04 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d008      	beq.n	8010df2 <_ZN8touchgfx3HAL3lcdEv+0x22>
 8010de0:	4b08      	ldr	r3, [pc, #32]	; (8010e04 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d003      	beq.n	8010df2 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 8010dea:	4b06      	ldr	r3, [pc, #24]	; (8010e04 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010df0:	e002      	b.n	8010df8 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 8010df2:	4b04      	ldr	r3, [pc, #16]	; (8010e04 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	689b      	ldr	r3, [r3, #8]
        }
    }
 8010df8:	4618      	mov	r0, r3
 8010dfa:	46bd      	mov	sp, r7
 8010dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e00:	4770      	bx	lr
 8010e02:	bf00      	nop
 8010e04:	2000bf68 	.word	0x2000bf68

08010e08 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	b082      	sub	sp, #8
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	6078      	str	r0, [r7, #4]
 8010e10:	4a05      	ldr	r2, [pc, #20]	; (8010e28 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	601a      	str	r2, [r3, #0]
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	4618      	mov	r0, r3
 8010e1a:	f7ff fed7 	bl	8010bcc <_ZN8touchgfx15UIEventListenerD1Ev>
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	4618      	mov	r0, r3
 8010e22:	3708      	adds	r7, #8
 8010e24:	46bd      	mov	sp, r7
 8010e26:	bd80      	pop	{r7, pc}
 8010e28:	0802ed2c 	.word	0x0802ed2c

08010e2c <_ZN8touchgfx11ApplicationD0Ev>:
 8010e2c:	b580      	push	{r7, lr}
 8010e2e:	b082      	sub	sp, #8
 8010e30:	af00      	add	r7, sp, #0
 8010e32:	6078      	str	r0, [r7, #4]
 8010e34:	6878      	ldr	r0, [r7, #4]
 8010e36:	f7ff ffe7 	bl	8010e08 <_ZN8touchgfx11ApplicationD1Ev>
 8010e3a:	f44f 7198 	mov.w	r1, #304	; 0x130
 8010e3e:	6878      	ldr	r0, [r7, #4]
 8010e40:	f019 fc73 	bl	802a72a <_ZdlPvj>
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	4618      	mov	r0, r3
 8010e48:	3708      	adds	r7, #8
 8010e4a:	46bd      	mov	sp, r7
 8010e4c:	bd80      	pop	{r7, pc}
	...

08010e50 <_ZN8touchgfx14MVPApplicationC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    MVPApplication() :
 8010e50:	b580      	push	{r7, lr}
 8010e52:	b082      	sub	sp, #8
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	6078      	str	r0, [r7, #4]
        currentPresenter(0),
        pendingScreenTransitionCallback(0)
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	4618      	mov	r0, r3
 8010e5c:	f00d fc84 	bl	801e768 <_ZN8touchgfx11ApplicationC1Ev>
 8010e60:	4a09      	ldr	r2, [pc, #36]	; (8010e88 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	601a      	str	r2, [r3, #0]
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	2200      	movs	r2, #0
 8010e6a:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	2200      	movs	r2, #0
 8010e72:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    {
        instance = this;
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	4a04      	ldr	r2, [pc, #16]	; (8010e8c <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8010e7a:	6013      	str	r3, [r2, #0]
    }
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	4618      	mov	r0, r3
 8010e80:	3708      	adds	r7, #8
 8010e82:	46bd      	mov	sp, r7
 8010e84:	bd80      	pop	{r7, pc}
 8010e86:	bf00      	nop
 8010e88:	0802c410 	.word	0x0802c410
 8010e8c:	2000bff4 	.word	0x2000bff4

08010e90 <_ZN8touchgfx14MVPApplicationD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPApplication() { }
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b082      	sub	sp, #8
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	6078      	str	r0, [r7, #4]
 8010e98:	4a05      	ldr	r2, [pc, #20]	; (8010eb0 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	601a      	str	r2, [r3, #0]
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	f7ff ffb1 	bl	8010e08 <_ZN8touchgfx11ApplicationD1Ev>
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	3708      	adds	r7, #8
 8010eac:	46bd      	mov	sp, r7
 8010eae:	bd80      	pop	{r7, pc}
 8010eb0:	0802c410 	.word	0x0802c410

08010eb4 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8010eb4:	b580      	push	{r7, lr}
 8010eb6:	b082      	sub	sp, #8
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	6078      	str	r0, [r7, #4]
 8010ebc:	6878      	ldr	r0, [r7, #4]
 8010ebe:	f7ff ffe7 	bl	8010e90 <_ZN8touchgfx14MVPApplicationD1Ev>
 8010ec2:	f44f 719c 	mov.w	r1, #312	; 0x138
 8010ec6:	6878      	ldr	r0, [r7, #4]
 8010ec8:	f019 fc2f 	bl	802a72a <_ZdlPvj>
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	4618      	mov	r0, r3
 8010ed0:	3708      	adds	r7, #8
 8010ed2:	46bd      	mov	sp, r7
 8010ed4:	bd80      	pop	{r7, pc}

08010ed6 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
     *
     * @brief Handles the pending screen transition.
     *
     *        Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8010ed6:	b580      	push	{r7, lr}
 8010ed8:	b082      	sub	sp, #8
 8010eda:	af00      	add	r7, sp, #0
 8010edc:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8010ede:	6878      	ldr	r0, [r7, #4]
 8010ee0:	f000 f804 	bl	8010eec <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8010ee4:	bf00      	nop
 8010ee6:	3708      	adds	r7, #8
 8010ee8:	46bd      	mov	sp, r7
 8010eea:	bd80      	pop	{r7, pc}

08010eec <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:
     * @brief Evaluates the pending Callback instances.
     *
     *        Evaluates the pending Callback instances. If a callback is valid, it is executed
     *        and a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8010eec:	b580      	push	{r7, lr}
 8010eee:	b082      	sub	sp, #8
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d00f      	beq.n	8010f1e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	330c      	adds	r3, #12
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	4610      	mov	r0, r2
 8010f12:	4798      	blx	r3
 8010f14:	4603      	mov	r3, r0
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d001      	beq.n	8010f1e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8010f1a:	2301      	movs	r3, #1
 8010f1c:	e000      	b.n	8010f20 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8010f1e:	2300      	movs	r3, #0
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d00e      	beq.n	8010f42 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	3308      	adds	r3, #8
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	4610      	mov	r0, r2
 8010f38:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	2200      	movs	r2, #0
 8010f3e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        }
    }
 8010f42:	bf00      	nop
 8010f44:	3708      	adds	r7, #8
 8010f46:	46bd      	mov	sp, r7
 8010f48:	bd80      	pop	{r7, pc}

08010f4a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>:
 * @param [in] currentScreen    If non-null, the current screen.
 * @param [in] currentPresenter If non-null, the current presenter.
 * @param [in] currentTrans     If non-null, the current transaction.
 */
static inline void prepareTransition(Screen** currentScreen, Presenter** currentPresenter, Transition** currentTrans)
{
 8010f4a:	b580      	push	{r7, lr}
 8010f4c:	b084      	sub	sp, #16
 8010f4e:	af00      	add	r7, sp, #0
 8010f50:	60f8      	str	r0, [r7, #12]
 8010f52:	60b9      	str	r1, [r7, #8]
 8010f54:	607a      	str	r2, [r7, #4]
    Application::getInstance()->clearAllTimerWidgets();
 8010f56:	f00d fbe5 	bl	801e724 <_ZN8touchgfx11Application11getInstanceEv>
 8010f5a:	4603      	mov	r3, r0
 8010f5c:	4618      	mov	r0, r3
 8010f5e:	f00d fbe7 	bl	801e730 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>

    if (*currentTrans)
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d008      	beq.n	8010f7c <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x32>
    {
        (*currentTrans)->tearDown();
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	681a      	ldr	r2, [r3, #0]
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	330c      	adds	r3, #12
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	4610      	mov	r0, r2
 8010f7a:	4798      	blx	r3
    }
    if (*currentTrans)
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d007      	beq.n	8010f94 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x4a>
    {
        (*currentTrans)->~Transition();
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	681a      	ldr	r2, [r3, #0]
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	4610      	mov	r0, r2
 8010f92:	4798      	blx	r3
    }
    if (*currentScreen)
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d008      	beq.n	8010fae <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x64>
    {
        (*currentScreen)->tearDownScreen();
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	681a      	ldr	r2, [r3, #0]
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	3314      	adds	r3, #20
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	4610      	mov	r0, r2
 8010fac:	4798      	blx	r3
    }
    if (*currentPresenter)
 8010fae:	68bb      	ldr	r3, [r7, #8]
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d008      	beq.n	8010fc8 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x7e>
    {
        (*currentPresenter)->deactivate();
 8010fb6:	68bb      	ldr	r3, [r7, #8]
 8010fb8:	681a      	ldr	r2, [r3, #0]
 8010fba:	68bb      	ldr	r3, [r7, #8]
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	3304      	adds	r3, #4
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	4610      	mov	r0, r2
 8010fc6:	4798      	blx	r3
    }
    if (*currentScreen)
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d007      	beq.n	8010fe0 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x96>
    {
        (*currentScreen)->~Screen();
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	681a      	ldr	r2, [r3, #0]
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	4610      	mov	r0, r2
 8010fde:	4798      	blx	r3
    }
    if (*currentPresenter)
 8010fe0:	68bb      	ldr	r3, [r7, #8]
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d008      	beq.n	8010ffa <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0xb0>
    {
        (*currentPresenter)->~Presenter();
 8010fe8:	68bb      	ldr	r3, [r7, #8]
 8010fea:	681a      	ldr	r2, [r3, #0]
 8010fec:	68bb      	ldr	r3, [r7, #8]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	3308      	adds	r3, #8
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	4610      	mov	r0, r2
 8010ff8:	4798      	blx	r3
    }
}
 8010ffa:	bf00      	nop
 8010ffc:	3710      	adds	r7, #16
 8010ffe:	46bd      	mov	sp, r7
 8011000:	bd80      	pop	{r7, pc}

08011002 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>:
 * @param [in] newScreen     If non-null, the new screen.
 * @param [in] newPresenter  If non-null, the new presenter.
 * @param [in] newTransition If non-null, the new transition.
 */
static inline void finalizeTransition(Screen* newScreen, Presenter* newPresenter, Transition* newTransition)
{
 8011002:	b580      	push	{r7, lr}
 8011004:	b084      	sub	sp, #16
 8011006:	af00      	add	r7, sp, #0
 8011008:	60f8      	str	r0, [r7, #12]
 801100a:	60b9      	str	r1, [r7, #8]
 801100c:	607a      	str	r2, [r7, #4]
    newScreen->setupScreen();
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	330c      	adds	r3, #12
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	68f8      	ldr	r0, [r7, #12]
 8011018:	4798      	blx	r3
    newPresenter->activate();
 801101a:	68bb      	ldr	r3, [r7, #8]
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	68b8      	ldr	r0, [r7, #8]
 8011022:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8011024:	6879      	ldr	r1, [r7, #4]
 8011026:	68f8      	ldr	r0, [r7, #12]
 8011028:	f00e fc8c 	bl	801f944 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	3310      	adds	r3, #16
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	6878      	ldr	r0, [r7, #4]
 8011036:	4798      	blx	r3

    Application::getInstance()->draw();
 8011038:	f00d fb74 	bl	801e724 <_ZN8touchgfx11Application11getInstanceEv>
 801103c:	4602      	mov	r2, r0
 801103e:	6813      	ldr	r3, [r2, #0]
 8011040:	3328      	adds	r3, #40	; 0x28
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	4610      	mov	r0, r2
 8011046:	4798      	blx	r3
}
 8011048:	bf00      	nop
 801104a:	3710      	adds	r7, #16
 801104c:	46bd      	mov	sp, r7
 801104e:	bd80      	pop	{r7, pc}

08011050 <_ZN5Model4bindEP13ModelListener>:

    /**
     * Sets the modelListener to point to the currently active presenter. Called automatically
     * when switching screen.
     */
    void bind(ModelListener* listener)
 8011050:	b480      	push	{r7}
 8011052:	b083      	sub	sp, #12
 8011054:	af00      	add	r7, sp, #0
 8011056:	6078      	str	r0, [r7, #4]
 8011058:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	683a      	ldr	r2, [r7, #0]
 801105e:	601a      	str	r2, [r3, #0]
    }
 8011060:	bf00      	nop
 8011062:	370c      	adds	r7, #12
 8011064:	46bd      	mov	sp, r7
 8011066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801106a:	4770      	bx	lr

0801106c <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 801106c:	b580      	push	{r7, lr}
 801106e:	b082      	sub	sp, #8
 8011070:	af00      	add	r7, sp, #0
 8011072:	6078      	str	r0, [r7, #4]
 8011074:	4a08      	ldr	r2, [pc, #32]	; (8011098 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	601a      	str	r2, [r3, #0]
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8011080:	4618      	mov	r0, r3
 8011082:	f000 ff0d 	bl	8011ea0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	4618      	mov	r0, r3
 801108a:	f7ff ff01 	bl	8010e90 <_ZN8touchgfx14MVPApplicationD1Ev>
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	4618      	mov	r0, r3
 8011092:	3708      	adds	r7, #8
 8011094:	46bd      	mov	sp, r7
 8011096:	bd80      	pop	{r7, pc}
 8011098:	0802c3bc 	.word	0x0802c3bc

0801109c <_ZN23FrontendApplicationBaseD0Ev>:
 801109c:	b580      	push	{r7, lr}
 801109e:	b082      	sub	sp, #8
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	6078      	str	r0, [r7, #4]
 80110a4:	6878      	ldr	r0, [r7, #4]
 80110a6:	f7ff ffe1 	bl	801106c <_ZN23FrontendApplicationBaseD1Ev>
 80110aa:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80110ae:	6878      	ldr	r0, [r7, #4]
 80110b0:	f019 fb3b 	bl	802a72a <_ZdlPvj>
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	4618      	mov	r0, r3
 80110b8:	3708      	adds	r7, #8
 80110ba:	46bd      	mov	sp, r7
 80110bc:	bd80      	pop	{r7, pc}
	...

080110c0 <_ZN8touchgfx12NoTransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    NoTransition() : Transition() { }
 80110c0:	b580      	push	{r7, lr}
 80110c2:	b082      	sub	sp, #8
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	6078      	str	r0, [r7, #4]
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	4618      	mov	r0, r3
 80110cc:	f7ff fd9e 	bl	8010c0c <_ZN8touchgfx10TransitionC1Ev>
 80110d0:	4a03      	ldr	r2, [pc, #12]	; (80110e0 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	601a      	str	r2, [r3, #0]
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	4618      	mov	r0, r3
 80110da:	3708      	adds	r7, #8
 80110dc:	46bd      	mov	sp, r7
 80110de:	bd80      	pop	{r7, pc}
 80110e0:	0802c39c 	.word	0x0802c39c

080110e4 <_ZN8touchgfx12NoTransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~NoTransition() { }
 80110e4:	b580      	push	{r7, lr}
 80110e6:	b082      	sub	sp, #8
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	6078      	str	r0, [r7, #4]
 80110ec:	4a05      	ldr	r2, [pc, #20]	; (8011104 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	601a      	str	r2, [r3, #0]
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	4618      	mov	r0, r3
 80110f6:	f7ff fd9f 	bl	8010c38 <_ZN8touchgfx10TransitionD1Ev>
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	4618      	mov	r0, r3
 80110fe:	3708      	adds	r7, #8
 8011100:	46bd      	mov	sp, r7
 8011102:	bd80      	pop	{r7, pc}
 8011104:	0802c39c 	.word	0x0802c39c

08011108 <_ZN8touchgfx12NoTransitionD0Ev>:
 8011108:	b580      	push	{r7, lr}
 801110a:	b082      	sub	sp, #8
 801110c:	af00      	add	r7, sp, #0
 801110e:	6078      	str	r0, [r7, #4]
 8011110:	6878      	ldr	r0, [r7, #4]
 8011112:	f7ff ffe7 	bl	80110e4 <_ZN8touchgfx12NoTransitionD1Ev>
 8011116:	210c      	movs	r1, #12
 8011118:	6878      	ldr	r0, [r7, #4]
 801111a:	f019 fb06 	bl	802a72a <_ZdlPvj>
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	4618      	mov	r0, r3
 8011122:	3708      	adds	r7, #8
 8011124:	46bd      	mov	sp, r7
 8011126:	bd80      	pop	{r7, pc}

08011128 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
     *
     * @brief Indicates that the transition is done after the first tick.
     *
     *        Indicates that the transition is done after the first tick.
     */
    virtual void handleTickEvent()
 8011128:	b480      	push	{r7}
 801112a:	b083      	sub	sp, #12
 801112c:	af00      	add	r7, sp, #0
 801112e:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	2201      	movs	r2, #1
 8011134:	721a      	strb	r2, [r3, #8]
    }
 8011136:	bf00      	nop
 8011138:	370c      	adds	r7, #12
 801113a:	46bd      	mov	sp, r7
 801113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011140:	4770      	bx	lr

08011142 <_ZN13ModelListener4bindEP5Model>:

    /**
     * Sets the model pointer to point to the Model object. Called automatically
     * when switching screen.
     */
    void bind(Model* m)
 8011142:	b480      	push	{r7}
 8011144:	b083      	sub	sp, #12
 8011146:	af00      	add	r7, sp, #0
 8011148:	6078      	str	r0, [r7, #4]
 801114a:	6039      	str	r1, [r7, #0]
    {
        model = m;
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	683a      	ldr	r2, [r7, #0]
 8011150:	605a      	str	r2, [r3, #4]
    }
 8011152:	bf00      	nop
 8011154:	370c      	adds	r7, #12
 8011156:	46bd      	mov	sp, r7
 8011158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801115c:	4770      	bx	lr
	...

08011160 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/secondscreen_screen/SecondScreenView.hpp>
#include <gui/secondscreen_screen/SecondScreenPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8011160:	b580      	push	{r7, lr}
 8011162:	b084      	sub	sp, #16
 8011164:	af00      	add	r7, sp, #0
 8011166:	60f8      	str	r0, [r7, #12]
 8011168:	60b9      	str	r1, [r7, #8]
 801116a:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	4618      	mov	r0, r3
 8011170:	f7ff fe6e 	bl	8010e50 <_ZN8touchgfx14MVPApplicationC1Ev>
 8011174:	4a13      	ldr	r2, [pc, #76]	; (80111c4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	601a      	str	r2, [r3, #0]
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8011180:	4618      	mov	r0, r3
 8011182:	f000 f92b 	bl	80113dc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	687a      	ldr	r2, [r7, #4]
 801118a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	68ba      	ldr	r2, [r7, #8]
 8011192:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8011196:	f7ff fe0f 	bl	8010db8 <_ZN8touchgfx3HAL11getInstanceEv>
 801119a:	4602      	mov	r2, r0
 801119c:	6813      	ldr	r3, [r2, #0]
 801119e:	3308      	adds	r3, #8
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	2100      	movs	r1, #0
 80111a4:	4610      	mov	r0, r2
 80111a6:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 80111a8:	2000      	movs	r0, #0
 80111aa:	f005 fbf5 	bl	8016998 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 80111ae:	f7ff fe0f 	bl	8010dd0 <_ZN8touchgfx3HAL3lcdEv>
 80111b2:	4603      	mov	r3, r0
 80111b4:	4618      	mov	r0, r3
 80111b6:	f012 ffc6 	bl	8024146 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	4618      	mov	r0, r3
 80111be:	3710      	adds	r7, #16
 80111c0:	46bd      	mov	sp, r7
 80111c2:	bd80      	pop	{r7, pc}
 80111c4:	0802c3bc 	.word	0x0802c3bc

080111c8 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 80111c8:	b480      	push	{r7}
 80111ca:	b083      	sub	sp, #12
 80111cc:	af00      	add	r7, sp, #0
 80111ce:	6078      	str	r0, [r7, #4]
 80111d0:	6039      	str	r1, [r7, #0]
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	4618      	mov	r0, r3
 80111d6:	370c      	adds	r7, #12
 80111d8:	46bd      	mov	sp, r7
 80111da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111de:	4770      	bx	lr

080111e0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *       three arguments of any type.
 *
 * @tparam dest_type The type of the class in which the member function resides.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80111e0:	b580      	push	{r7, lr}
 80111e2:	b082      	sub	sp, #8
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	6078      	str	r0, [r7, #4]
 80111e8:	6039      	str	r1, [r7, #0]
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	683a      	ldr	r2, [r7, #0]
 80111ee:	4611      	mov	r1, r2
 80111f0:	4618      	mov	r0, r3
 80111f2:	f7ff ffe9 	bl	80111c8 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 80111f6:	683b      	ldr	r3, [r7, #0]
 80111f8:	685a      	ldr	r2, [r3, #4]
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	605a      	str	r2, [r3, #4]
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	683a      	ldr	r2, [r7, #0]
 8011202:	3308      	adds	r3, #8
 8011204:	3208      	adds	r2, #8
 8011206:	e892 0003 	ldmia.w	r2, {r0, r1}
 801120a:	e883 0003 	stmia.w	r3, {r0, r1}
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	4618      	mov	r0, r3
 8011212:	3708      	adds	r7, #8
 8011214:	46bd      	mov	sp, r7
 8011216:	bd80      	pop	{r7, pc}

08011218 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>:
 */

// Main

void FrontendApplicationBase::gotoMainScreenNoTransition()
{
 8011218:	b590      	push	{r4, r7, lr}
 801121a:	b089      	sub	sp, #36	; 0x24
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenNoTransitionImpl);
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	f503 749c 	add.w	r4, r3, #312	; 0x138
 8011226:	4b10      	ldr	r3, [pc, #64]	; (8011268 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv+0x50>)
 8011228:	61bb      	str	r3, [r7, #24]
 801122a:	2300      	movs	r3, #0
 801122c:	61fb      	str	r3, [r7, #28]
 801122e:	f107 0008 	add.w	r0, r7, #8
 8011232:	f107 0318 	add.w	r3, r7, #24
 8011236:	cb0c      	ldmia	r3, {r2, r3}
 8011238:	6879      	ldr	r1, [r7, #4]
 801123a:	f000 f8eb 	bl	8011414 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 801123e:	f107 0308 	add.w	r3, r7, #8
 8011242:	4619      	mov	r1, r3
 8011244:	4620      	mov	r0, r4
 8011246:	f7ff ffcb 	bl	80111e0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 801124a:	f107 0308 	add.w	r3, r7, #8
 801124e:	4618      	mov	r0, r3
 8011250:	f000 fe26 	bl	8011ea0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	f503 729c 	add.w	r2, r3, #312	; 0x138
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 8011260:	bf00      	nop
 8011262:	3724      	adds	r7, #36	; 0x24
 8011264:	46bd      	mov	sp, r7
 8011266:	bd90      	pop	{r4, r7, pc}
 8011268:	0801126d 	.word	0x0801126d

0801126c <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMainScreenNoTransitionImpl()
{
 801126c:	b580      	push	{r7, lr}
 801126e:	b084      	sub	sp, #16
 8011270:	af02      	add	r7, sp, #8
 8011272:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	f503 7198 	add.w	r1, r3, #304	; 0x130
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8011280:	461a      	mov	r2, r3
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8011288:	9300      	str	r3, [sp, #0]
 801128a:	4b04      	ldr	r3, [pc, #16]	; (801129c <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x30>)
 801128c:	4804      	ldr	r0, [pc, #16]	; (80112a0 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x34>)
 801128e:	f000 f8e1 	bl	8011454 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8011292:	bf00      	nop
 8011294:	3708      	adds	r7, #8
 8011296:	46bd      	mov	sp, r7
 8011298:	bd80      	pop	{r7, pc}
 801129a:	bf00      	nop
 801129c:	2000bfe8 	.word	0x2000bfe8
 80112a0:	2000bfe4 	.word	0x2000bfe4

080112a4 <_ZN23FrontendApplicationBase33gotoMainScreenSlideTransitionWestEv>:

void FrontendApplicationBase::gotoMainScreenSlideTransitionWest()
{
 80112a4:	b590      	push	{r4, r7, lr}
 80112a6:	b089      	sub	sp, #36	; 0x24
 80112a8:	af00      	add	r7, sp, #0
 80112aa:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenSlideTransitionWestImpl);
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	f503 749c 	add.w	r4, r3, #312	; 0x138
 80112b2:	4b10      	ldr	r3, [pc, #64]	; (80112f4 <_ZN23FrontendApplicationBase33gotoMainScreenSlideTransitionWestEv+0x50>)
 80112b4:	61bb      	str	r3, [r7, #24]
 80112b6:	2300      	movs	r3, #0
 80112b8:	61fb      	str	r3, [r7, #28]
 80112ba:	f107 0008 	add.w	r0, r7, #8
 80112be:	f107 0318 	add.w	r3, r7, #24
 80112c2:	cb0c      	ldmia	r3, {r2, r3}
 80112c4:	6879      	ldr	r1, [r7, #4]
 80112c6:	f000 f8a5 	bl	8011414 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 80112ca:	f107 0308 	add.w	r3, r7, #8
 80112ce:	4619      	mov	r1, r3
 80112d0:	4620      	mov	r0, r4
 80112d2:	f7ff ff85 	bl	80111e0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 80112d6:	f107 0308 	add.w	r3, r7, #8
 80112da:	4618      	mov	r0, r3
 80112dc:	f000 fde0 	bl	8011ea0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	f503 729c 	add.w	r2, r3, #312	; 0x138
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 80112ec:	bf00      	nop
 80112ee:	3724      	adds	r7, #36	; 0x24
 80112f0:	46bd      	mov	sp, r7
 80112f2:	bd90      	pop	{r4, r7, pc}
 80112f4:	080112f9 	.word	0x080112f9

080112f8 <_ZN23FrontendApplicationBase37gotoMainScreenSlideTransitionWestImplEv>:

void FrontendApplicationBase::gotoMainScreenSlideTransitionWestImpl()
{
 80112f8:	b580      	push	{r7, lr}
 80112fa:	b084      	sub	sp, #16
 80112fc:	af02      	add	r7, sp, #8
 80112fe:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::SlideTransition<WEST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	f503 7198 	add.w	r1, r3, #304	; 0x130
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 801130c:	461a      	mov	r2, r3
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8011314:	9300      	str	r3, [sp, #0]
 8011316:	4b04      	ldr	r3, [pc, #16]	; (8011328 <_ZN23FrontendApplicationBase37gotoMainScreenSlideTransitionWestImplEv+0x30>)
 8011318:	4804      	ldr	r0, [pc, #16]	; (801132c <_ZN23FrontendApplicationBase37gotoMainScreenSlideTransitionWestImplEv+0x34>)
 801131a:	f000 f957 	bl	80115cc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 801131e:	bf00      	nop
 8011320:	3708      	adds	r7, #8
 8011322:	46bd      	mov	sp, r7
 8011324:	bd80      	pop	{r7, pc}
 8011326:	bf00      	nop
 8011328:	2000bfe8 	.word	0x2000bfe8
 801132c:	2000bfe4 	.word	0x2000bfe4

08011330 <_ZN23FrontendApplicationBase41gotoSecondScreenScreenSlideTransitionEastEv>:

// SecondScreen

void FrontendApplicationBase::gotoSecondScreenScreenSlideTransitionEast()
{
 8011330:	b590      	push	{r4, r7, lr}
 8011332:	b089      	sub	sp, #36	; 0x24
 8011334:	af00      	add	r7, sp, #0
 8011336:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoSecondScreenScreenSlideTransitionEastImpl);
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	f503 749c 	add.w	r4, r3, #312	; 0x138
 801133e:	4b10      	ldr	r3, [pc, #64]	; (8011380 <_ZN23FrontendApplicationBase41gotoSecondScreenScreenSlideTransitionEastEv+0x50>)
 8011340:	61bb      	str	r3, [r7, #24]
 8011342:	2300      	movs	r3, #0
 8011344:	61fb      	str	r3, [r7, #28]
 8011346:	f107 0008 	add.w	r0, r7, #8
 801134a:	f107 0318 	add.w	r3, r7, #24
 801134e:	cb0c      	ldmia	r3, {r2, r3}
 8011350:	6879      	ldr	r1, [r7, #4]
 8011352:	f000 f85f 	bl	8011414 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8011356:	f107 0308 	add.w	r3, r7, #8
 801135a:	4619      	mov	r1, r3
 801135c:	4620      	mov	r0, r4
 801135e:	f7ff ff3f 	bl	80111e0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8011362:	f107 0308 	add.w	r3, r7, #8
 8011366:	4618      	mov	r0, r3
 8011368:	f000 fd9a 	bl	8011ea0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 8011378:	bf00      	nop
 801137a:	3724      	adds	r7, #36	; 0x24
 801137c:	46bd      	mov	sp, r7
 801137e:	bd90      	pop	{r4, r7, pc}
 8011380:	08011385 	.word	0x08011385

08011384 <_ZN23FrontendApplicationBase45gotoSecondScreenScreenSlideTransitionEastImplEv>:

void FrontendApplicationBase::gotoSecondScreenScreenSlideTransitionEastImpl()
{
 8011384:	b580      	push	{r7, lr}
 8011386:	b084      	sub	sp, #16
 8011388:	af02      	add	r7, sp, #8
 801138a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<SecondScreenView, SecondScreenPresenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	f503 7198 	add.w	r1, r3, #304	; 0x130
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8011398:	461a      	mov	r2, r3
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80113a0:	9300      	str	r3, [sp, #0]
 80113a2:	4b04      	ldr	r3, [pc, #16]	; (80113b4 <_ZN23FrontendApplicationBase45gotoSecondScreenScreenSlideTransitionEastImplEv+0x30>)
 80113a4:	4804      	ldr	r0, [pc, #16]	; (80113b8 <_ZN23FrontendApplicationBase45gotoSecondScreenScreenSlideTransitionEastImplEv+0x34>)
 80113a6:	f000 f9cd 	bl	8011744 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 80113aa:	bf00      	nop
 80113ac:	3708      	adds	r7, #8
 80113ae:	46bd      	mov	sp, r7
 80113b0:	bd80      	pop	{r7, pc}
 80113b2:	bf00      	nop
 80113b4:	2000bfe8 	.word	0x2000bfe8
 80113b8:	2000bfe4 	.word	0x2000bfe4

080113bc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 80113bc:	b480      	push	{r7}
 80113be:	b083      	sub	sp, #12
 80113c0:	af00      	add	r7, sp, #0
 80113c2:	6078      	str	r0, [r7, #4]
 80113c4:	4a04      	ldr	r2, [pc, #16]	; (80113d8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	601a      	str	r2, [r3, #0]
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	4618      	mov	r0, r3
 80113ce:	370c      	adds	r7, #12
 80113d0:	46bd      	mov	sp, r7
 80113d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d6:	4770      	bx	lr
 80113d8:	0802c44c 	.word	0x0802c44c

080113dc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Initializes an empty callback.
     */
    Callback() : pobject(0), pmemfun_0(0) { }
 80113dc:	b580      	push	{r7, lr}
 80113de:	b082      	sub	sp, #8
 80113e0:	af00      	add	r7, sp, #0
 80113e2:	6078      	str	r0, [r7, #4]
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	4618      	mov	r0, r3
 80113e8:	f7ff ffe8 	bl	80113bc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 80113ec:	4a08      	ldr	r2, [pc, #32]	; (8011410 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	601a      	str	r2, [r3, #0]
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	2200      	movs	r2, #0
 80113f6:	605a      	str	r2, [r3, #4]
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	2200      	movs	r2, #0
 80113fc:	609a      	str	r2, [r3, #8]
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	2200      	movs	r2, #0
 8011402:	60da      	str	r2, [r3, #12]
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	4618      	mov	r0, r3
 8011408:	3708      	adds	r7, #8
 801140a:	46bd      	mov	sp, r7
 801140c:	bd80      	pop	{r7, pc}
 801140e:	bf00      	nop
 8011410:	0802c3f8 	.word	0x0802c3f8

08011414 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function
     *                       takes zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 8011414:	b580      	push	{r7, lr}
 8011416:	b084      	sub	sp, #16
 8011418:	af00      	add	r7, sp, #0
 801141a:	60f8      	str	r0, [r7, #12]
 801141c:	60b9      	str	r1, [r7, #8]
 801141e:	4639      	mov	r1, r7
 8011420:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	4618      	mov	r0, r3
 8011428:	f7ff ffc8 	bl	80113bc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 801142c:	4a08      	ldr	r2, [pc, #32]	; (8011450 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	68ba      	ldr	r2, [r7, #8]
 8011436:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	3308      	adds	r3, #8
 801143c:	463a      	mov	r2, r7
 801143e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011442:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	4618      	mov	r0, r3
 801144a:	3710      	adds	r7, #16
 801144c:	46bd      	mov	sp, r7
 801144e:	bd80      	pop	{r7, pc}
 8011450:	0802c3f8 	.word	0x0802c3f8

08011454 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template< class ScreenType, class PresenterType, class TransType, class ModelType  >
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8011454:	b590      	push	{r4, r7, lr}
 8011456:	b089      	sub	sp, #36	; 0x24
 8011458:	af00      	add	r7, sp, #0
 801145a:	60f8      	str	r0, [r7, #12]
 801145c:	60b9      	str	r1, [r7, #8]
 801145e:	607a      	str	r2, [r7, #4]
 8011460:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	689a      	ldr	r2, [r3, #8]
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	689b      	ldr	r3, [r3, #8]
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	3320      	adds	r3, #32
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	4610      	mov	r0, r2
 8011472:	4798      	blx	r3
 8011474:	4602      	mov	r2, r0
 8011476:	f642 0343 	movw	r3, #10307	; 0x2843
 801147a:	429a      	cmp	r2, r3
 801147c:	d805      	bhi.n	801148a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 801147e:	4b4e      	ldr	r3, [pc, #312]	; (80115b8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 8011480:	4a4e      	ldr	r2, [pc, #312]	; (80115bc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8011482:	21c2      	movs	r1, #194	; 0xc2
 8011484:	484e      	ldr	r0, [pc, #312]	; (80115c0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 8011486:	f019 f97b 	bl	802a780 <__assert_func>
 801148a:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	685a      	ldr	r2, [r3, #4]
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	685b      	ldr	r3, [r3, #4]
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	3320      	adds	r3, #32
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	4610      	mov	r0, r2
 801149c:	4798      	blx	r3
 801149e:	4603      	mov	r3, r0
 80114a0:	2b0f      	cmp	r3, #15
 80114a2:	d805      	bhi.n	80114b0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 80114a4:	4b47      	ldr	r3, [pc, #284]	; (80115c4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 80114a6:	4a45      	ldr	r2, [pc, #276]	; (80115bc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 80114a8:	21c3      	movs	r1, #195	; 0xc3
 80114aa:	4845      	ldr	r0, [pc, #276]	; (80115c0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 80114ac:	f019 f968 	bl	802a780 <__assert_func>
 80114b0:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	68da      	ldr	r2, [r3, #12]
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	68db      	ldr	r3, [r3, #12]
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	3320      	adds	r3, #32
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	4610      	mov	r0, r2
 80114c2:	4798      	blx	r3
 80114c4:	4603      	mov	r3, r0
 80114c6:	2b0b      	cmp	r3, #11
 80114c8:	d805      	bhi.n	80114d6 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 80114ca:	4b3f      	ldr	r3, [pc, #252]	; (80115c8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 80114cc:	4a3b      	ldr	r2, [pc, #236]	; (80115bc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 80114ce:	21c4      	movs	r1, #196	; 0xc4
 80114d0:	483b      	ldr	r0, [pc, #236]	; (80115c0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 80114d2:	f019 f955 	bl	802a780 <__assert_func>
 80114d6:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);
 80114d8:	683a      	ldr	r2, [r7, #0]
 80114da:	68b9      	ldr	r1, [r7, #8]
 80114dc:	68f8      	ldr	r0, [r7, #12]
 80114de:	f7ff fd34 	bl	8010f4a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>

    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	68db      	ldr	r3, [r3, #12]
 80114e6:	2100      	movs	r1, #0
 80114e8:	4618      	mov	r0, r3
 80114ea:	f000 f9e7 	bl	80118bc <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 80114ee:	4603      	mov	r3, r0
 80114f0:	4619      	mov	r1, r3
 80114f2:	200c      	movs	r0, #12
 80114f4:	f7ff fb1c 	bl	8010b30 <_ZnwjPv>
 80114f8:	4604      	mov	r4, r0
 80114fa:	2c00      	cmp	r4, #0
 80114fc:	d004      	beq.n	8011508 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 80114fe:	4620      	mov	r0, r4
 8011500:	f7ff fdde 	bl	80110c0 <_ZN8touchgfx12NoTransitionC1Ev>
 8011504:	4623      	mov	r3, r4
 8011506:	e000      	b.n	801150a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
 8011508:	4623      	mov	r3, r4
 801150a:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	689b      	ldr	r3, [r3, #8]
 8011510:	2100      	movs	r1, #0
 8011512:	4618      	mov	r0, r3
 8011514:	f000 f9e5 	bl	80118e2 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 8011518:	4603      	mov	r3, r0
 801151a:	4619      	mov	r1, r3
 801151c:	f642 0044 	movw	r0, #10308	; 0x2844
 8011520:	f7ff fb06 	bl	8010b30 <_ZnwjPv>
 8011524:	4604      	mov	r4, r0
 8011526:	2c00      	cmp	r4, #0
 8011528:	d004      	beq.n	8011534 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 801152a:	4620      	mov	r0, r4
 801152c:	f005 fcc0 	bl	8016eb0 <_ZN8MainViewC1Ev>
 8011530:	4623      	mov	r3, r4
 8011532:	e000      	b.n	8011536 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
 8011534:	4623      	mov	r3, r4
 8011536:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	685b      	ldr	r3, [r3, #4]
 801153c:	2100      	movs	r1, #0
 801153e:	4618      	mov	r0, r3
 8011540:	f000 f9e2 	bl	8011908 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 8011544:	4603      	mov	r3, r0
 8011546:	4619      	mov	r1, r3
 8011548:	2010      	movs	r0, #16
 801154a:	f7ff faf1 	bl	8010b30 <_ZnwjPv>
 801154e:	4604      	mov	r4, r0
 8011550:	2c00      	cmp	r4, #0
 8011552:	d005      	beq.n	8011560 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 8011554:	69b9      	ldr	r1, [r7, #24]
 8011556:	4620      	mov	r0, r4
 8011558:	f005 fbec 	bl	8016d34 <_ZN13MainPresenterC1ER8MainView>
 801155c:	4623      	mov	r3, r4
 801155e:	e000      	b.n	8011562 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 8011560:	4623      	mov	r3, r4
 8011562:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 8011564:	683b      	ldr	r3, [r7, #0]
 8011566:	69fa      	ldr	r2, [r7, #28]
 8011568:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 801156a:	68bb      	ldr	r3, [r7, #8]
 801156c:	697a      	ldr	r2, [r7, #20]
 801156e:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	69ba      	ldr	r2, [r7, #24]
 8011574:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8011576:	697b      	ldr	r3, [r7, #20]
 8011578:	2b00      	cmp	r3, #0
 801157a:	d002      	beq.n	8011582 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 801157c:	697b      	ldr	r3, [r7, #20]
 801157e:	3304      	adds	r3, #4
 8011580:	e000      	b.n	8011584 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 8011582:	2300      	movs	r3, #0
 8011584:	4619      	mov	r1, r3
 8011586:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011588:	f7ff fd62 	bl	8011050 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 801158c:	697b      	ldr	r3, [r7, #20]
 801158e:	3304      	adds	r3, #4
 8011590:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011592:	4618      	mov	r0, r3
 8011594:	f7ff fdd5 	bl	8011142 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8011598:	69bb      	ldr	r3, [r7, #24]
 801159a:	6979      	ldr	r1, [r7, #20]
 801159c:	4618      	mov	r0, r3
 801159e:	f000 f9c6 	bl	801192e <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 80115a2:	69fa      	ldr	r2, [r7, #28]
 80115a4:	6979      	ldr	r1, [r7, #20]
 80115a6:	69b8      	ldr	r0, [r7, #24]
 80115a8:	f7ff fd2b 	bl	8011002 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>

    return newPresenter;
 80115ac:	697b      	ldr	r3, [r7, #20]
}
 80115ae:	4618      	mov	r0, r3
 80115b0:	3724      	adds	r7, #36	; 0x24
 80115b2:	46bd      	mov	sp, r7
 80115b4:	bd90      	pop	{r4, r7, pc}
 80115b6:	bf00      	nop
 80115b8:	0802b90c 	.word	0x0802b90c
 80115bc:	0802c4a4 	.word	0x0802c4a4
 80115c0:	0802b99c 	.word	0x0802b99c
 80115c4:	0802b9e0 	.word	0x0802b9e0
 80115c8:	0802ba84 	.word	0x0802ba84

080115cc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80115cc:	b590      	push	{r4, r7, lr}
 80115ce:	b089      	sub	sp, #36	; 0x24
 80115d0:	af00      	add	r7, sp, #0
 80115d2:	60f8      	str	r0, [r7, #12]
 80115d4:	60b9      	str	r1, [r7, #8]
 80115d6:	607a      	str	r2, [r7, #4]
 80115d8:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	689a      	ldr	r2, [r3, #8]
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	689b      	ldr	r3, [r3, #8]
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	3320      	adds	r3, #32
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	4610      	mov	r0, r2
 80115ea:	4798      	blx	r3
 80115ec:	4602      	mov	r2, r0
 80115ee:	f642 0343 	movw	r3, #10307	; 0x2843
 80115f2:	429a      	cmp	r2, r3
 80115f4:	d805      	bhi.n	8011602 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 80115f6:	4b4e      	ldr	r3, [pc, #312]	; (8011730 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 80115f8:	4a4e      	ldr	r2, [pc, #312]	; (8011734 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 80115fa:	21c2      	movs	r1, #194	; 0xc2
 80115fc:	484e      	ldr	r0, [pc, #312]	; (8011738 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 80115fe:	f019 f8bf 	bl	802a780 <__assert_func>
 8011602:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	685a      	ldr	r2, [r3, #4]
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	685b      	ldr	r3, [r3, #4]
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	3320      	adds	r3, #32
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	4610      	mov	r0, r2
 8011614:	4798      	blx	r3
 8011616:	4603      	mov	r3, r0
 8011618:	2b0f      	cmp	r3, #15
 801161a:	d805      	bhi.n	8011628 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 801161c:	4b47      	ldr	r3, [pc, #284]	; (801173c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 801161e:	4a45      	ldr	r2, [pc, #276]	; (8011734 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8011620:	21c3      	movs	r1, #195	; 0xc3
 8011622:	4845      	ldr	r0, [pc, #276]	; (8011738 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 8011624:	f019 f8ac 	bl	802a780 <__assert_func>
 8011628:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	68da      	ldr	r2, [r3, #12]
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	68db      	ldr	r3, [r3, #12]
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	3320      	adds	r3, #32
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	4610      	mov	r0, r2
 801163a:	4798      	blx	r3
 801163c:	4603      	mov	r3, r0
 801163e:	2b53      	cmp	r3, #83	; 0x53
 8011640:	d805      	bhi.n	801164e <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 8011642:	4b3f      	ldr	r3, [pc, #252]	; (8011740 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 8011644:	4a3b      	ldr	r2, [pc, #236]	; (8011734 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8011646:	21c4      	movs	r1, #196	; 0xc4
 8011648:	483b      	ldr	r0, [pc, #236]	; (8011738 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 801164a:	f019 f899 	bl	802a780 <__assert_func>
 801164e:	bf00      	nop
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 8011650:	683a      	ldr	r2, [r7, #0]
 8011652:	68b9      	ldr	r1, [r7, #8]
 8011654:	68f8      	ldr	r0, [r7, #12]
 8011656:	f7ff fc78 	bl	8010f4a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	68db      	ldr	r3, [r3, #12]
 801165e:	2100      	movs	r1, #0
 8011660:	4618      	mov	r0, r3
 8011662:	f000 f972 	bl	801194a <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE3EEEEERT_t>
 8011666:	4603      	mov	r3, r0
 8011668:	4619      	mov	r1, r3
 801166a:	2054      	movs	r0, #84	; 0x54
 801166c:	f7ff fa60 	bl	8010b30 <_ZnwjPv>
 8011670:	4604      	mov	r4, r0
 8011672:	2c00      	cmp	r4, #0
 8011674:	d005      	beq.n	8011682 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
 8011676:	2114      	movs	r1, #20
 8011678:	4620      	mov	r0, r4
 801167a:	f000 f99b 	bl	80119b4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh>
 801167e:	4623      	mov	r3, r4
 8011680:	e000      	b.n	8011684 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb8>
 8011682:	4623      	mov	r3, r4
 8011684:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	689b      	ldr	r3, [r3, #8]
 801168a:	2100      	movs	r1, #0
 801168c:	4618      	mov	r0, r3
 801168e:	f000 f928 	bl	80118e2 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 8011692:	4603      	mov	r3, r0
 8011694:	4619      	mov	r1, r3
 8011696:	f642 0044 	movw	r0, #10308	; 0x2844
 801169a:	f7ff fa49 	bl	8010b30 <_ZnwjPv>
 801169e:	4604      	mov	r4, r0
 80116a0:	2c00      	cmp	r4, #0
 80116a2:	d004      	beq.n	80116ae <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
 80116a4:	4620      	mov	r0, r4
 80116a6:	f005 fc03 	bl	8016eb0 <_ZN8MainViewC1Ev>
 80116aa:	4623      	mov	r3, r4
 80116ac:	e000      	b.n	80116b0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe4>
 80116ae:	4623      	mov	r3, r4
 80116b0:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	685b      	ldr	r3, [r3, #4]
 80116b6:	2100      	movs	r1, #0
 80116b8:	4618      	mov	r0, r3
 80116ba:	f000 f925 	bl	8011908 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 80116be:	4603      	mov	r3, r0
 80116c0:	4619      	mov	r1, r3
 80116c2:	2010      	movs	r0, #16
 80116c4:	f7ff fa34 	bl	8010b30 <_ZnwjPv>
 80116c8:	4604      	mov	r4, r0
 80116ca:	2c00      	cmp	r4, #0
 80116cc:	d005      	beq.n	80116da <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 80116ce:	69b9      	ldr	r1, [r7, #24]
 80116d0:	4620      	mov	r0, r4
 80116d2:	f005 fb2f 	bl	8016d34 <_ZN13MainPresenterC1ER8MainView>
 80116d6:	4623      	mov	r3, r4
 80116d8:	e000      	b.n	80116dc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x110>
 80116da:	4623      	mov	r3, r4
 80116dc:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 80116de:	683b      	ldr	r3, [r7, #0]
 80116e0:	69fa      	ldr	r2, [r7, #28]
 80116e2:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 80116e4:	68bb      	ldr	r3, [r7, #8]
 80116e6:	697a      	ldr	r2, [r7, #20]
 80116e8:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	69ba      	ldr	r2, [r7, #24]
 80116ee:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 80116f0:	697b      	ldr	r3, [r7, #20]
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d002      	beq.n	80116fc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 80116f6:	697b      	ldr	r3, [r7, #20]
 80116f8:	3304      	adds	r3, #4
 80116fa:	e000      	b.n	80116fe <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
 80116fc:	2300      	movs	r3, #0
 80116fe:	4619      	mov	r1, r3
 8011700:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011702:	f7ff fca5 	bl	8011050 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8011706:	697b      	ldr	r3, [r7, #20]
 8011708:	3304      	adds	r3, #4
 801170a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801170c:	4618      	mov	r0, r3
 801170e:	f7ff fd18 	bl	8011142 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8011712:	69bb      	ldr	r3, [r7, #24]
 8011714:	6979      	ldr	r1, [r7, #20]
 8011716:	4618      	mov	r0, r3
 8011718:	f000 f909 	bl	801192e <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 801171c:	69fa      	ldr	r2, [r7, #28]
 801171e:	6979      	ldr	r1, [r7, #20]
 8011720:	69b8      	ldr	r0, [r7, #24]
 8011722:	f7ff fc6e 	bl	8011002 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
    return newPresenter;
 8011726:	697b      	ldr	r3, [r7, #20]
}
 8011728:	4618      	mov	r0, r3
 801172a:	3724      	adds	r7, #36	; 0x24
 801172c:	46bd      	mov	sp, r7
 801172e:	bd90      	pop	{r4, r7, pc}
 8011730:	0802b90c 	.word	0x0802b90c
 8011734:	0802c5a4 	.word	0x0802c5a4
 8011738:	0802b99c 	.word	0x0802b99c
 801173c:	0802b9e0 	.word	0x0802b9e0
 8011740:	0802ba84 	.word	0x0802ba84

08011744 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8011744:	b590      	push	{r4, r7, lr}
 8011746:	b089      	sub	sp, #36	; 0x24
 8011748:	af00      	add	r7, sp, #0
 801174a:	60f8      	str	r0, [r7, #12]
 801174c:	60b9      	str	r1, [r7, #8]
 801174e:	607a      	str	r2, [r7, #4]
 8011750:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	689a      	ldr	r2, [r3, #8]
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	689b      	ldr	r3, [r3, #8]
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	3320      	adds	r3, #32
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	4610      	mov	r0, r2
 8011762:	4798      	blx	r3
 8011764:	4603      	mov	r3, r0
 8011766:	f5b3 6fa7 	cmp.w	r3, #1336	; 0x538
 801176a:	d205      	bcs.n	8011778 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 801176c:	4b4e      	ldr	r3, [pc, #312]	; (80118a8 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 801176e:	4a4f      	ldr	r2, [pc, #316]	; (80118ac <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8011770:	21c2      	movs	r1, #194	; 0xc2
 8011772:	484f      	ldr	r0, [pc, #316]	; (80118b0 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 8011774:	f019 f804 	bl	802a780 <__assert_func>
 8011778:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	685a      	ldr	r2, [r3, #4]
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	685b      	ldr	r3, [r3, #4]
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	3320      	adds	r3, #32
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	4610      	mov	r0, r2
 801178a:	4798      	blx	r3
 801178c:	4603      	mov	r3, r0
 801178e:	2b0f      	cmp	r3, #15
 8011790:	d805      	bhi.n	801179e <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 8011792:	4b48      	ldr	r3, [pc, #288]	; (80118b4 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 8011794:	4a45      	ldr	r2, [pc, #276]	; (80118ac <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8011796:	21c3      	movs	r1, #195	; 0xc3
 8011798:	4845      	ldr	r0, [pc, #276]	; (80118b0 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 801179a:	f018 fff1 	bl	802a780 <__assert_func>
 801179e:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	68da      	ldr	r2, [r3, #12]
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	68db      	ldr	r3, [r3, #12]
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	3320      	adds	r3, #32
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	4610      	mov	r0, r2
 80117b0:	4798      	blx	r3
 80117b2:	4603      	mov	r3, r0
 80117b4:	2b53      	cmp	r3, #83	; 0x53
 80117b6:	d805      	bhi.n	80117c4 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 80117b8:	4b3f      	ldr	r3, [pc, #252]	; (80118b8 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 80117ba:	4a3c      	ldr	r2, [pc, #240]	; (80118ac <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 80117bc:	21c4      	movs	r1, #196	; 0xc4
 80117be:	483c      	ldr	r0, [pc, #240]	; (80118b0 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 80117c0:	f018 ffde 	bl	802a780 <__assert_func>
 80117c4:	bf00      	nop
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 80117c6:	683a      	ldr	r2, [r7, #0]
 80117c8:	68b9      	ldr	r1, [r7, #8]
 80117ca:	68f8      	ldr	r0, [r7, #12]
 80117cc:	f7ff fbbd 	bl	8010f4a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	68db      	ldr	r3, [r3, #12]
 80117d4:	2100      	movs	r1, #0
 80117d6:	4618      	mov	r0, r3
 80117d8:	f000 f980 	bl	8011adc <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>
 80117dc:	4603      	mov	r3, r0
 80117de:	4619      	mov	r1, r3
 80117e0:	2054      	movs	r0, #84	; 0x54
 80117e2:	f7ff f9a5 	bl	8010b30 <_ZnwjPv>
 80117e6:	4604      	mov	r4, r0
 80117e8:	2c00      	cmp	r4, #0
 80117ea:	d005      	beq.n	80117f8 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 80117ec:	2114      	movs	r1, #20
 80117ee:	4620      	mov	r0, r4
 80117f0:	f000 f9aa 	bl	8011b48 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>
 80117f4:	4623      	mov	r3, r4
 80117f6:	e000      	b.n	80117fa <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
 80117f8:	4623      	mov	r3, r4
 80117fa:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	689b      	ldr	r3, [r3, #8]
 8011800:	2100      	movs	r1, #0
 8011802:	4618      	mov	r0, r3
 8011804:	f000 fa34 	bl	8011c70 <_ZN8touchgfx17AbstractPartition2atI16SecondScreenViewEERT_t>
 8011808:	4603      	mov	r3, r0
 801180a:	4619      	mov	r1, r3
 801180c:	f44f 60a7 	mov.w	r0, #1336	; 0x538
 8011810:	f7ff f98e 	bl	8010b30 <_ZnwjPv>
 8011814:	4604      	mov	r4, r0
 8011816:	2c00      	cmp	r4, #0
 8011818:	d004      	beq.n	8011824 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 801181a:	4620      	mov	r0, r4
 801181c:	f006 f89e 	bl	801795c <_ZN16SecondScreenViewC1Ev>
 8011820:	4623      	mov	r3, r4
 8011822:	e000      	b.n	8011826 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
 8011824:	4623      	mov	r3, r4
 8011826:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	685b      	ldr	r3, [r3, #4]
 801182c:	2100      	movs	r1, #0
 801182e:	4618      	mov	r0, r3
 8011830:	f000 fa31 	bl	8011c96 <_ZN8touchgfx17AbstractPartition2atI21SecondScreenPresenterEERT_t>
 8011834:	4603      	mov	r3, r0
 8011836:	4619      	mov	r1, r3
 8011838:	2010      	movs	r0, #16
 801183a:	f7ff f979 	bl	8010b30 <_ZnwjPv>
 801183e:	4604      	mov	r4, r0
 8011840:	2c00      	cmp	r4, #0
 8011842:	d005      	beq.n	8011850 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 8011844:	69b9      	ldr	r1, [r7, #24]
 8011846:	4620      	mov	r0, r4
 8011848:	f005 ffb4 	bl	80177b4 <_ZN21SecondScreenPresenterC1ER16SecondScreenView>
 801184c:	4623      	mov	r3, r4
 801184e:	e000      	b.n	8011852 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 8011850:	4623      	mov	r3, r4
 8011852:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 8011854:	683b      	ldr	r3, [r7, #0]
 8011856:	69fa      	ldr	r2, [r7, #28]
 8011858:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 801185a:	68bb      	ldr	r3, [r7, #8]
 801185c:	697a      	ldr	r2, [r7, #20]
 801185e:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	69ba      	ldr	r2, [r7, #24]
 8011864:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8011866:	697b      	ldr	r3, [r7, #20]
 8011868:	2b00      	cmp	r3, #0
 801186a:	d002      	beq.n	8011872 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 801186c:	697b      	ldr	r3, [r7, #20]
 801186e:	3304      	adds	r3, #4
 8011870:	e000      	b.n	8011874 <_ZN8touchgfx14makeTransitionI16SecondScreenView21SecondScreenPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 8011872:	2300      	movs	r3, #0
 8011874:	4619      	mov	r1, r3
 8011876:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011878:	f7ff fbea 	bl	8011050 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 801187c:	697b      	ldr	r3, [r7, #20]
 801187e:	3304      	adds	r3, #4
 8011880:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011882:	4618      	mov	r0, r3
 8011884:	f7ff fc5d 	bl	8011142 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8011888:	69bb      	ldr	r3, [r7, #24]
 801188a:	6979      	ldr	r1, [r7, #20]
 801188c:	4618      	mov	r0, r3
 801188e:	f000 fa15 	bl	8011cbc <_ZN8touchgfx4ViewI21SecondScreenPresenterE4bindERS1_>
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 8011892:	69fa      	ldr	r2, [r7, #28]
 8011894:	6979      	ldr	r1, [r7, #20]
 8011896:	69b8      	ldr	r0, [r7, #24]
 8011898:	f7ff fbb3 	bl	8011002 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
    return newPresenter;
 801189c:	697b      	ldr	r3, [r7, #20]
}
 801189e:	4618      	mov	r0, r3
 80118a0:	3724      	adds	r7, #36	; 0x24
 80118a2:	46bd      	mov	sp, r7
 80118a4:	bd90      	pop	{r4, r7, pc}
 80118a6:	bf00      	nop
 80118a8:	0802b90c 	.word	0x0802b90c
 80118ac:	0802c6c0 	.word	0x0802c6c0
 80118b0:	0802b99c 	.word	0x0802b99c
 80118b4:	0802b9e0 	.word	0x0802b9e0
 80118b8:	0802ba84 	.word	0x0802ba84

080118bc <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template< typename T >
    T& at(const uint16_t index)
 80118bc:	b580      	push	{r7, lr}
 80118be:	b082      	sub	sp, #8
 80118c0:	af00      	add	r7, sp, #0
 80118c2:	6078      	str	r0, [r7, #4]
 80118c4:	460b      	mov	r3, r1
 80118c6:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	3324      	adds	r3, #36	; 0x24
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	887a      	ldrh	r2, [r7, #2]
 80118d2:	4611      	mov	r1, r2
 80118d4:	6878      	ldr	r0, [r7, #4]
 80118d6:	4798      	blx	r3
 80118d8:	4603      	mov	r3, r0
    }
 80118da:	4618      	mov	r0, r3
 80118dc:	3708      	adds	r7, #8
 80118de:	46bd      	mov	sp, r7
 80118e0:	bd80      	pop	{r7, pc}

080118e2 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>:
    T& at(const uint16_t index)
 80118e2:	b580      	push	{r7, lr}
 80118e4:	b082      	sub	sp, #8
 80118e6:	af00      	add	r7, sp, #0
 80118e8:	6078      	str	r0, [r7, #4]
 80118ea:	460b      	mov	r3, r1
 80118ec:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	3324      	adds	r3, #36	; 0x24
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	887a      	ldrh	r2, [r7, #2]
 80118f8:	4611      	mov	r1, r2
 80118fa:	6878      	ldr	r0, [r7, #4]
 80118fc:	4798      	blx	r3
 80118fe:	4603      	mov	r3, r0
    }
 8011900:	4618      	mov	r0, r3
 8011902:	3708      	adds	r7, #8
 8011904:	46bd      	mov	sp, r7
 8011906:	bd80      	pop	{r7, pc}

08011908 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>:
    T& at(const uint16_t index)
 8011908:	b580      	push	{r7, lr}
 801190a:	b082      	sub	sp, #8
 801190c:	af00      	add	r7, sp, #0
 801190e:	6078      	str	r0, [r7, #4]
 8011910:	460b      	mov	r3, r1
 8011912:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	3324      	adds	r3, #36	; 0x24
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	887a      	ldrh	r2, [r7, #2]
 801191e:	4611      	mov	r1, r2
 8011920:	6878      	ldr	r0, [r7, #4]
 8011922:	4798      	blx	r3
 8011924:	4603      	mov	r3, r0
    }
 8011926:	4618      	mov	r0, r3
 8011928:	3708      	adds	r7, #8
 801192a:	46bd      	mov	sp, r7
 801192c:	bd80      	pop	{r7, pc}

0801192e <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>:
     *        Binds an instance of a specific Presenter type (subclass) to the View instance.
     *        This function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 801192e:	b480      	push	{r7}
 8011930:	b083      	sub	sp, #12
 8011932:	af00      	add	r7, sp, #0
 8011934:	6078      	str	r0, [r7, #4]
 8011936:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	683a      	ldr	r2, [r7, #0]
 801193c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801193e:	bf00      	nop
 8011940:	370c      	adds	r7, #12
 8011942:	46bd      	mov	sp, r7
 8011944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011948:	4770      	bx	lr

0801194a <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE3EEEEERT_t>:
    T& at(const uint16_t index)
 801194a:	b580      	push	{r7, lr}
 801194c:	b082      	sub	sp, #8
 801194e:	af00      	add	r7, sp, #0
 8011950:	6078      	str	r0, [r7, #4]
 8011952:	460b      	mov	r3, r1
 8011954:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	3324      	adds	r3, #36	; 0x24
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	887a      	ldrh	r2, [r7, #2]
 8011960:	4611      	mov	r1, r2
 8011962:	6878      	ldr	r0, [r7, #4]
 8011964:	4798      	blx	r3
 8011966:	4603      	mov	r3, r0
    }
 8011968:	4618      	mov	r0, r3
 801196a:	3708      	adds	r7, #8
 801196c:	46bd      	mov	sp, r7
 801196e:	bd80      	pop	{r7, pc}

08011970 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8011970:	b580      	push	{r7, lr}
 8011972:	b082      	sub	sp, #8
 8011974:	af00      	add	r7, sp, #0
 8011976:	6078      	str	r0, [r7, #4]
 8011978:	4a05      	ldr	r2, [pc, #20]	; (8011990 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev+0x20>)
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	601a      	str	r2, [r3, #0]
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	4618      	mov	r0, r3
 8011982:	f000 fa13 	bl	8011dac <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	4618      	mov	r0, r3
 801198a:	3708      	adds	r7, #8
 801198c:	46bd      	mov	sp, r7
 801198e:	bd80      	pop	{r7, pc}
 8011990:	0802c32c 	.word	0x0802c32c

08011994 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED0Ev>:
 8011994:	b580      	push	{r7, lr}
 8011996:	b082      	sub	sp, #8
 8011998:	af00      	add	r7, sp, #0
 801199a:	6078      	str	r0, [r7, #4]
 801199c:	6878      	ldr	r0, [r7, #4]
 801199e:	f7ff ffe7 	bl	8011970 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>
 80119a2:	2110      	movs	r1, #16
 80119a4:	6878      	ldr	r0, [r7, #4]
 80119a6:	f018 fec0 	bl	802a72a <_ZdlPvj>
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	4618      	mov	r0, r3
 80119ae:	3708      	adds	r7, #8
 80119b0:	46bd      	mov	sp, r7
 80119b2:	bd80      	pop	{r7, pc}

080119b4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh>:
     *
     *        Constructor.
     *
     * @param transitionSteps Number of steps in the transition animation.
     */
    SlideTransition(const uint8_t transitionSteps = 20)
 80119b4:	b590      	push	{r4, r7, lr}
 80119b6:	b087      	sub	sp, #28
 80119b8:	af02      	add	r7, sp, #8
 80119ba:	6078      	str	r0, [r7, #4]
 80119bc:	460b      	mov	r3, r1
 80119be:	70fb      	strb	r3, [r7, #3]
          snapshotPtr(&snapshot),
          handleTickCallback(this, &SlideTransition::tickMoveDrawable),
          direction(templateDirection),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0)
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	4618      	mov	r0, r3
 80119c4:	f7ff f922 	bl	8010c0c <_ZN8touchgfx10TransitionC1Ev>
 80119c8:	4a3f      	ldr	r2, [pc, #252]	; (8011ac8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x114>)
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	601a      	str	r2, [r3, #0]
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	330c      	adds	r3, #12
 80119d2:	4618      	mov	r0, r3
 80119d4:	f00b f918 	bl	801cc08 <_ZN8touchgfx14SnapshotWidgetC1Ev>
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	f103 020c 	add.w	r2, r3, #12
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	639a      	str	r2, [r3, #56]	; 0x38
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 80119e8:	4a38      	ldr	r2, [pc, #224]	; (8011acc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x118>)
 80119ea:	f107 0308 	add.w	r3, r7, #8
 80119ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80119f2:	e883 0003 	stmia.w	r3, {r0, r1}
 80119f6:	f107 0308 	add.w	r3, r7, #8
 80119fa:	cb0c      	ldmia	r3, {r2, r3}
 80119fc:	6879      	ldr	r1, [r7, #4]
 80119fe:	4620      	mov	r0, r4
 8011a00:	f000 f9b4 	bl	8011d6c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	2203      	movs	r2, #3
 8011a08:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	78fa      	ldrb	r2, [r7, #3]
 8011a10:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	2200      	movs	r2, #0
 8011a18:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	2200      	movs	r2, #0
 8011a20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    {
        if (HAL::USE_ANIMATION_STORAGE)
 8011a24:	4b2a      	ldr	r3, [pc, #168]	; (8011ad0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x11c>)
 8011a26:	781b      	ldrb	r3, [r3, #0]
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d047      	beq.n	8011abc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x108>
        {
            snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	f103 000c 	add.w	r0, r3, #12
 8011a32:	4b28      	ldr	r3, [pc, #160]	; (8011ad4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x120>)
 8011a34:	881b      	ldrh	r3, [r3, #0]
 8011a36:	b21a      	sxth	r2, r3
 8011a38:	4b27      	ldr	r3, [pc, #156]	; (8011ad8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x124>)
 8011a3a:	881b      	ldrh	r3, [r3, #0]
 8011a3c:	b21b      	sxth	r3, r3
 8011a3e:	9300      	str	r3, [sp, #0]
 8011a40:	4613      	mov	r3, r2
 8011a42:	2200      	movs	r2, #0
 8011a44:	2100      	movs	r1, #0
 8011a46:	f7ff f96f 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
            snapshot.makeSnapshot();
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	330c      	adds	r3, #12
 8011a4e:	4618      	mov	r0, r3
 8011a50:	f00b f857 	bl	801cb02 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>

            switch (direction)
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8011a5a:	2b03      	cmp	r3, #3
 8011a5c:	d82a      	bhi.n	8011ab4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x100>
 8011a5e:	a201      	add	r2, pc, #4	; (adr r2, 8011a64 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0xb0>)
 8011a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a64:	08011a95 	.word	0x08011a95
 8011a68:	08011aa3 	.word	0x08011aa3
 8011a6c:	08011a75 	.word	0x08011a75
 8011a70:	08011a87 	.word	0x08011a87
            {
            case EAST:
                targetValue = -HAL::DISPLAY_WIDTH;
 8011a74:	4b17      	ldr	r3, [pc, #92]	; (8011ad4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x120>)
 8011a76:	881b      	ldrh	r3, [r3, #0]
 8011a78:	425b      	negs	r3, r3
 8011a7a:	b29b      	uxth	r3, r3
 8011a7c:	b21a      	sxth	r2, r3
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 8011a84:	e01a      	b.n	8011abc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x108>
            case WEST:
                targetValue = HAL::DISPLAY_WIDTH;
 8011a86:	4b13      	ldr	r3, [pc, #76]	; (8011ad4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x120>)
 8011a88:	881b      	ldrh	r3, [r3, #0]
 8011a8a:	b21a      	sxth	r2, r3
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 8011a92:	e013      	b.n	8011abc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x108>
            case NORTH:
                targetValue = HAL::DISPLAY_HEIGHT;
 8011a94:	4b10      	ldr	r3, [pc, #64]	; (8011ad8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x124>)
 8011a96:	881b      	ldrh	r3, [r3, #0]
 8011a98:	b21a      	sxth	r2, r3
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 8011aa0:	e00c      	b.n	8011abc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x108>
            case SOUTH:
                targetValue = -HAL::DISPLAY_HEIGHT;
 8011aa2:	4b0d      	ldr	r3, [pc, #52]	; (8011ad8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x124>)
 8011aa4:	881b      	ldrh	r3, [r3, #0]
 8011aa6:	425b      	negs	r3, r3
 8011aa8:	b29b      	uxth	r3, r3
 8011aaa:	b21a      	sxth	r2, r3
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 8011ab2:	e003      	b.n	8011abc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x108>
            default:
                done = true;
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	2201      	movs	r2, #1
 8011ab8:	721a      	strb	r2, [r3, #8]
                // Nothing to do here
                break;
 8011aba:	bf00      	nop
            }
        }
    }
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	4618      	mov	r0, r3
 8011ac0:	3714      	adds	r7, #20
 8011ac2:	46bd      	mov	sp, r7
 8011ac4:	bd90      	pop	{r4, r7, pc}
 8011ac6:	bf00      	nop
 8011ac8:	0802c304 	.word	0x0802c304
 8011acc:	0802bb28 	.word	0x0802bb28
 8011ad0:	2000bf65 	.word	0x2000bf65
 8011ad4:	2000bf5a 	.word	0x2000bf5a
 8011ad8:	2000bf5c 	.word	0x2000bf5c

08011adc <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>:
    T& at(const uint16_t index)
 8011adc:	b580      	push	{r7, lr}
 8011ade:	b082      	sub	sp, #8
 8011ae0:	af00      	add	r7, sp, #0
 8011ae2:	6078      	str	r0, [r7, #4]
 8011ae4:	460b      	mov	r3, r1
 8011ae6:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	3324      	adds	r3, #36	; 0x24
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	887a      	ldrh	r2, [r7, #2]
 8011af2:	4611      	mov	r1, r2
 8011af4:	6878      	ldr	r0, [r7, #4]
 8011af6:	4798      	blx	r3
 8011af8:	4603      	mov	r3, r0
    }
 8011afa:	4618      	mov	r0, r3
 8011afc:	3708      	adds	r7, #8
 8011afe:	46bd      	mov	sp, r7
 8011b00:	bd80      	pop	{r7, pc}
	...

08011b04 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>:
 8011b04:	b580      	push	{r7, lr}
 8011b06:	b082      	sub	sp, #8
 8011b08:	af00      	add	r7, sp, #0
 8011b0a:	6078      	str	r0, [r7, #4]
 8011b0c:	4a05      	ldr	r2, [pc, #20]	; (8011b24 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev+0x20>)
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	601a      	str	r2, [r3, #0]
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	4618      	mov	r0, r3
 8011b16:	f000 f949 	bl	8011dac <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	3708      	adds	r7, #8
 8011b20:	46bd      	mov	sp, r7
 8011b22:	bd80      	pop	{r7, pc}
 8011b24:	0802c36c 	.word	0x0802c36c

08011b28 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED0Ev>:
 8011b28:	b580      	push	{r7, lr}
 8011b2a:	b082      	sub	sp, #8
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	6078      	str	r0, [r7, #4]
 8011b30:	6878      	ldr	r0, [r7, #4]
 8011b32:	f7ff ffe7 	bl	8011b04 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 8011b36:	2110      	movs	r1, #16
 8011b38:	6878      	ldr	r0, [r7, #4]
 8011b3a:	f018 fdf6 	bl	802a72a <_ZdlPvj>
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	4618      	mov	r0, r3
 8011b42:	3708      	adds	r7, #8
 8011b44:	46bd      	mov	sp, r7
 8011b46:	bd80      	pop	{r7, pc}

08011b48 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>:
    SlideTransition(const uint8_t transitionSteps = 20)
 8011b48:	b590      	push	{r4, r7, lr}
 8011b4a:	b087      	sub	sp, #28
 8011b4c:	af02      	add	r7, sp, #8
 8011b4e:	6078      	str	r0, [r7, #4]
 8011b50:	460b      	mov	r3, r1
 8011b52:	70fb      	strb	r3, [r7, #3]
          calculatedValue(0)
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	4618      	mov	r0, r3
 8011b58:	f7ff f858 	bl	8010c0c <_ZN8touchgfx10TransitionC1Ev>
 8011b5c:	4a3f      	ldr	r2, [pc, #252]	; (8011c5c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x114>)
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	601a      	str	r2, [r3, #0]
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	330c      	adds	r3, #12
 8011b66:	4618      	mov	r0, r3
 8011b68:	f00b f84e 	bl	801cc08 <_ZN8touchgfx14SnapshotWidgetC1Ev>
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	f103 020c 	add.w	r2, r3, #12
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	639a      	str	r2, [r3, #56]	; 0x38
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8011b7c:	4a38      	ldr	r2, [pc, #224]	; (8011c60 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x118>)
 8011b7e:	f107 0308 	add.w	r3, r7, #8
 8011b82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011b86:	e883 0003 	stmia.w	r3, {r0, r1}
 8011b8a:	f107 0308 	add.w	r3, r7, #8
 8011b8e:	cb0c      	ldmia	r3, {r2, r3}
 8011b90:	6879      	ldr	r1, [r7, #4]
 8011b92:	4620      	mov	r0, r4
 8011b94:	f000 f964 	bl	8011e60 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	2202      	movs	r2, #2
 8011b9c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	78fa      	ldrb	r2, [r7, #3]
 8011ba4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	2200      	movs	r2, #0
 8011bac:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	2200      	movs	r2, #0
 8011bb4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
        if (HAL::USE_ANIMATION_STORAGE)
 8011bb8:	4b2a      	ldr	r3, [pc, #168]	; (8011c64 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x11c>)
 8011bba:	781b      	ldrb	r3, [r3, #0]
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d047      	beq.n	8011c50 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	f103 000c 	add.w	r0, r3, #12
 8011bc6:	4b28      	ldr	r3, [pc, #160]	; (8011c68 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 8011bc8:	881b      	ldrh	r3, [r3, #0]
 8011bca:	b21a      	sxth	r2, r3
 8011bcc:	4b27      	ldr	r3, [pc, #156]	; (8011c6c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 8011bce:	881b      	ldrh	r3, [r3, #0]
 8011bd0:	b21b      	sxth	r3, r3
 8011bd2:	9300      	str	r3, [sp, #0]
 8011bd4:	4613      	mov	r3, r2
 8011bd6:	2200      	movs	r2, #0
 8011bd8:	2100      	movs	r1, #0
 8011bda:	f7ff f8a5 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
            snapshot.makeSnapshot();
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	330c      	adds	r3, #12
 8011be2:	4618      	mov	r0, r3
 8011be4:	f00a ff8d 	bl	801cb02 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>
            switch (direction)
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8011bee:	2b03      	cmp	r3, #3
 8011bf0:	d82a      	bhi.n	8011c48 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x100>
 8011bf2:	a201      	add	r2, pc, #4	; (adr r2, 8011bf8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xb0>)
 8011bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bf8:	08011c29 	.word	0x08011c29
 8011bfc:	08011c37 	.word	0x08011c37
 8011c00:	08011c09 	.word	0x08011c09
 8011c04:	08011c1b 	.word	0x08011c1b
                targetValue = -HAL::DISPLAY_WIDTH;
 8011c08:	4b17      	ldr	r3, [pc, #92]	; (8011c68 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 8011c0a:	881b      	ldrh	r3, [r3, #0]
 8011c0c:	425b      	negs	r3, r3
 8011c0e:	b29b      	uxth	r3, r3
 8011c10:	b21a      	sxth	r2, r3
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 8011c18:	e01a      	b.n	8011c50 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
                targetValue = HAL::DISPLAY_WIDTH;
 8011c1a:	4b13      	ldr	r3, [pc, #76]	; (8011c68 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 8011c1c:	881b      	ldrh	r3, [r3, #0]
 8011c1e:	b21a      	sxth	r2, r3
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 8011c26:	e013      	b.n	8011c50 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
                targetValue = HAL::DISPLAY_HEIGHT;
 8011c28:	4b10      	ldr	r3, [pc, #64]	; (8011c6c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 8011c2a:	881b      	ldrh	r3, [r3, #0]
 8011c2c:	b21a      	sxth	r2, r3
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 8011c34:	e00c      	b.n	8011c50 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
                targetValue = -HAL::DISPLAY_HEIGHT;
 8011c36:	4b0d      	ldr	r3, [pc, #52]	; (8011c6c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 8011c38:	881b      	ldrh	r3, [r3, #0]
 8011c3a:	425b      	negs	r3, r3
 8011c3c:	b29b      	uxth	r3, r3
 8011c3e:	b21a      	sxth	r2, r3
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 8011c46:	e003      	b.n	8011c50 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
                done = true;
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	2201      	movs	r2, #1
 8011c4c:	721a      	strb	r2, [r3, #8]
                break;
 8011c4e:	bf00      	nop
    }
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	4618      	mov	r0, r3
 8011c54:	3714      	adds	r7, #20
 8011c56:	46bd      	mov	sp, r7
 8011c58:	bd90      	pop	{r4, r7, pc}
 8011c5a:	bf00      	nop
 8011c5c:	0802c344 	.word	0x0802c344
 8011c60:	0802bb30 	.word	0x0802bb30
 8011c64:	2000bf65 	.word	0x2000bf65
 8011c68:	2000bf5a 	.word	0x2000bf5a
 8011c6c:	2000bf5c 	.word	0x2000bf5c

08011c70 <_ZN8touchgfx17AbstractPartition2atI16SecondScreenViewEERT_t>:
    T& at(const uint16_t index)
 8011c70:	b580      	push	{r7, lr}
 8011c72:	b082      	sub	sp, #8
 8011c74:	af00      	add	r7, sp, #0
 8011c76:	6078      	str	r0, [r7, #4]
 8011c78:	460b      	mov	r3, r1
 8011c7a:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	3324      	adds	r3, #36	; 0x24
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	887a      	ldrh	r2, [r7, #2]
 8011c86:	4611      	mov	r1, r2
 8011c88:	6878      	ldr	r0, [r7, #4]
 8011c8a:	4798      	blx	r3
 8011c8c:	4603      	mov	r3, r0
    }
 8011c8e:	4618      	mov	r0, r3
 8011c90:	3708      	adds	r7, #8
 8011c92:	46bd      	mov	sp, r7
 8011c94:	bd80      	pop	{r7, pc}

08011c96 <_ZN8touchgfx17AbstractPartition2atI21SecondScreenPresenterEERT_t>:
    T& at(const uint16_t index)
 8011c96:	b580      	push	{r7, lr}
 8011c98:	b082      	sub	sp, #8
 8011c9a:	af00      	add	r7, sp, #0
 8011c9c:	6078      	str	r0, [r7, #4]
 8011c9e:	460b      	mov	r3, r1
 8011ca0:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	3324      	adds	r3, #36	; 0x24
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	887a      	ldrh	r2, [r7, #2]
 8011cac:	4611      	mov	r1, r2
 8011cae:	6878      	ldr	r0, [r7, #4]
 8011cb0:	4798      	blx	r3
 8011cb2:	4603      	mov	r3, r0
    }
 8011cb4:	4618      	mov	r0, r3
 8011cb6:	3708      	adds	r7, #8
 8011cb8:	46bd      	mov	sp, r7
 8011cba:	bd80      	pop	{r7, pc}

08011cbc <_ZN8touchgfx4ViewI21SecondScreenPresenterE4bindERS1_>:
    void bind(T& presenter)
 8011cbc:	b480      	push	{r7}
 8011cbe:	b083      	sub	sp, #12
 8011cc0:	af00      	add	r7, sp, #0
 8011cc2:	6078      	str	r0, [r7, #4]
 8011cc4:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	683a      	ldr	r2, [r7, #0]
 8011cca:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8011ccc:	bf00      	nop
 8011cce:	370c      	adds	r7, #12
 8011cd0:	46bd      	mov	sp, r7
 8011cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cd6:	4770      	bx	lr

08011cd8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE>:
     *
     *        Moves the Drawable.
     *
     * @param [in] d The Drawable to move.
     */
    virtual void tickMoveDrawable(Drawable& d)
 8011cd8:	b580      	push	{r7, lr}
 8011cda:	b082      	sub	sp, #8
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	6078      	str	r0, [r7, #4]
 8011ce0:	6039      	str	r1, [r7, #0]
    {
        if (&d == snapshotPtr)
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ce6:	683a      	ldr	r2, [r7, #0]
 8011ce8:	429a      	cmp	r2, r3
 8011cea:	d02a      	beq.n	8011d42 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x6a>
        {
            return;
        }

        switch (direction)
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8011cf2:	2b03      	cmp	r3, #3
 8011cf4:	d820      	bhi.n	8011d38 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x60>
 8011cf6:	a201      	add	r2, pc, #4	; (adr r2, 8011cfc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x24>)
 8011cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cfc:	08011d23 	.word	0x08011d23
 8011d00:	08011d23 	.word	0x08011d23
 8011d04:	08011d0d 	.word	0x08011d0d
 8011d08:	08011d0d 	.word	0x08011d0d
        {
        case EAST:
        case WEST:
            d.moveRelative(calculatedValue, 0);
 8011d0c:	683b      	ldr	r3, [r7, #0]
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	3354      	adds	r3, #84	; 0x54
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	687a      	ldr	r2, [r7, #4]
 8011d16:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
 8011d1a:	2200      	movs	r2, #0
 8011d1c:	6838      	ldr	r0, [r7, #0]
 8011d1e:	4798      	blx	r3
            break;
 8011d20:	e010      	b.n	8011d44 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x6c>
        case NORTH:
        case SOUTH:
            d.moveRelative(0, calculatedValue);
 8011d22:	683b      	ldr	r3, [r7, #0]
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	3354      	adds	r3, #84	; 0x54
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	687a      	ldr	r2, [r7, #4]
 8011d2c:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 8011d30:	2100      	movs	r1, #0
 8011d32:	6838      	ldr	r0, [r7, #0]
 8011d34:	4798      	blx	r3
            break;
 8011d36:	e005      	b.n	8011d44 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x6c>
        default:
            // Special case, do not move. Class NoTransition can be used instead.
            done = true;
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	2201      	movs	r2, #1
 8011d3c:	721a      	strb	r2, [r3, #8]
            break;
 8011d3e:	bf00      	nop
 8011d40:	e000      	b.n	8011d44 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x6c>
            return;
 8011d42:	bf00      	nop
        }
    }
 8011d44:	3708      	adds	r7, #8
 8011d46:	46bd      	mov	sp, r7
 8011d48:	bd80      	pop	{r7, pc}
 8011d4a:	bf00      	nop

08011d4c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8011d4c:	b480      	push	{r7}
 8011d4e:	b083      	sub	sp, #12
 8011d50:	af00      	add	r7, sp, #0
 8011d52:	6078      	str	r0, [r7, #4]
 8011d54:	4a04      	ldr	r2, [pc, #16]	; (8011d68 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev+0x1c>)
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	601a      	str	r2, [r3, #0]
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	4618      	mov	r0, r3
 8011d5e:	370c      	adds	r7, #12
 8011d60:	46bd      	mov	sp, r7
 8011d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d66:	4770      	bx	lr
 8011d68:	0802c384 	.word	0x0802c384

08011d6c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8011d6c:	b580      	push	{r7, lr}
 8011d6e:	b084      	sub	sp, #16
 8011d70:	af00      	add	r7, sp, #0
 8011d72:	60f8      	str	r0, [r7, #12]
 8011d74:	60b9      	str	r1, [r7, #8]
 8011d76:	4639      	mov	r1, r7
 8011d78:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	4618      	mov	r0, r3
 8011d80:	f7ff ffe4 	bl	8011d4c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 8011d84:	4a08      	ldr	r2, [pc, #32]	; (8011da8 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	68ba      	ldr	r2, [r7, #8]
 8011d8e:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	3308      	adds	r3, #8
 8011d94:	463a      	mov	r2, r7
 8011d96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011d9a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	4618      	mov	r0, r3
 8011da2:	3710      	adds	r7, #16
 8011da4:	46bd      	mov	sp, r7
 8011da6:	bd80      	pop	{r7, pc}
 8011da8:	0802c32c 	.word	0x0802c32c

08011dac <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>:
    virtual ~GenericCallback()
 8011dac:	b480      	push	{r7}
 8011dae:	b083      	sub	sp, #12
 8011db0:	af00      	add	r7, sp, #0
 8011db2:	6078      	str	r0, [r7, #4]
    }
 8011db4:	4a04      	ldr	r2, [pc, #16]	; (8011dc8 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev+0x1c>)
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	601a      	str	r2, [r3, #0]
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	4618      	mov	r0, r3
 8011dbe:	370c      	adds	r7, #12
 8011dc0:	46bd      	mov	sp, r7
 8011dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dc6:	4770      	bx	lr
 8011dc8:	0802c384 	.word	0x0802c384

08011dcc <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED0Ev>:
    virtual ~GenericCallback()
 8011dcc:	b580      	push	{r7, lr}
 8011dce:	b082      	sub	sp, #8
 8011dd0:	af00      	add	r7, sp, #0
 8011dd2:	6078      	str	r0, [r7, #4]
    }
 8011dd4:	6878      	ldr	r0, [r7, #4]
 8011dd6:	f7ff ffe9 	bl	8011dac <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 8011dda:	2104      	movs	r1, #4
 8011ddc:	6878      	ldr	r0, [r7, #4]
 8011dde:	f018 fca4 	bl	802a72a <_ZdlPvj>
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	4618      	mov	r0, r3
 8011de6:	3708      	adds	r7, #8
 8011de8:	46bd      	mov	sp, r7
 8011dea:	bd80      	pop	{r7, pc}

08011dec <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE>:
    virtual void tickMoveDrawable(Drawable& d)
 8011dec:	b580      	push	{r7, lr}
 8011dee:	b082      	sub	sp, #8
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	6078      	str	r0, [r7, #4]
 8011df4:	6039      	str	r1, [r7, #0]
        if (&d == snapshotPtr)
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011dfa:	683a      	ldr	r2, [r7, #0]
 8011dfc:	429a      	cmp	r2, r3
 8011dfe:	d02a      	beq.n	8011e56 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6a>
        switch (direction)
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8011e06:	2b03      	cmp	r3, #3
 8011e08:	d820      	bhi.n	8011e4c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x60>
 8011e0a:	a201      	add	r2, pc, #4	; (adr r2, 8011e10 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x24>)
 8011e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e10:	08011e37 	.word	0x08011e37
 8011e14:	08011e37 	.word	0x08011e37
 8011e18:	08011e21 	.word	0x08011e21
 8011e1c:	08011e21 	.word	0x08011e21
            d.moveRelative(calculatedValue, 0);
 8011e20:	683b      	ldr	r3, [r7, #0]
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	3354      	adds	r3, #84	; 0x54
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	687a      	ldr	r2, [r7, #4]
 8011e2a:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
 8011e2e:	2200      	movs	r2, #0
 8011e30:	6838      	ldr	r0, [r7, #0]
 8011e32:	4798      	blx	r3
            break;
 8011e34:	e010      	b.n	8011e58 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
            d.moveRelative(0, calculatedValue);
 8011e36:	683b      	ldr	r3, [r7, #0]
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	3354      	adds	r3, #84	; 0x54
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	687a      	ldr	r2, [r7, #4]
 8011e40:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 8011e44:	2100      	movs	r1, #0
 8011e46:	6838      	ldr	r0, [r7, #0]
 8011e48:	4798      	blx	r3
            break;
 8011e4a:	e005      	b.n	8011e58 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
            done = true;
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	2201      	movs	r2, #1
 8011e50:	721a      	strb	r2, [r3, #8]
            break;
 8011e52:	bf00      	nop
 8011e54:	e000      	b.n	8011e58 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
            return;
 8011e56:	bf00      	nop
    }
 8011e58:	3708      	adds	r7, #8
 8011e5a:	46bd      	mov	sp, r7
 8011e5c:	bd80      	pop	{r7, pc}
 8011e5e:	bf00      	nop

08011e60 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8011e60:	b580      	push	{r7, lr}
 8011e62:	b084      	sub	sp, #16
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	60f8      	str	r0, [r7, #12]
 8011e68:	60b9      	str	r1, [r7, #8]
 8011e6a:	4639      	mov	r1, r7
 8011e6c:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	4618      	mov	r0, r3
 8011e74:	f7ff ff6a 	bl	8011d4c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 8011e78:	4a08      	ldr	r2, [pc, #32]	; (8011e9c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	68ba      	ldr	r2, [r7, #8]
 8011e82:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	3308      	adds	r3, #8
 8011e88:	463a      	mov	r2, r7
 8011e8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011e8e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	4618      	mov	r0, r3
 8011e96:	3710      	adds	r7, #16
 8011e98:	46bd      	mov	sp, r7
 8011e9a:	bd80      	pop	{r7, pc}
 8011e9c:	0802c36c 	.word	0x0802c36c

08011ea0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8011ea0:	b580      	push	{r7, lr}
 8011ea2:	b082      	sub	sp, #8
 8011ea4:	af00      	add	r7, sp, #0
 8011ea6:	6078      	str	r0, [r7, #4]
 8011ea8:	4a05      	ldr	r2, [pc, #20]	; (8011ec0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	601a      	str	r2, [r3, #0]
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	4618      	mov	r0, r3
 8011eb2:	f7fe ff19 	bl	8010ce8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	4618      	mov	r0, r3
 8011eba:	3708      	adds	r7, #8
 8011ebc:	46bd      	mov	sp, r7
 8011ebe:	bd80      	pop	{r7, pc}
 8011ec0:	0802c3f8 	.word	0x0802c3f8

08011ec4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8011ec4:	b580      	push	{r7, lr}
 8011ec6:	b082      	sub	sp, #8
 8011ec8:	af00      	add	r7, sp, #0
 8011eca:	6078      	str	r0, [r7, #4]
 8011ecc:	6878      	ldr	r0, [r7, #4]
 8011ece:	f7ff ffe7 	bl	8011ea0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8011ed2:	2110      	movs	r1, #16
 8011ed4:	6878      	ldr	r0, [r7, #4]
 8011ed6:	f018 fc28 	bl	802a72a <_ZdlPvj>
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	4618      	mov	r0, r3
 8011ede:	3708      	adds	r7, #8
 8011ee0:	46bd      	mov	sp, r7
 8011ee2:	bd80      	pop	{r7, pc}

08011ee4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED1Ev>:
    virtual ~SlideTransition()
 8011ee4:	b580      	push	{r7, lr}
 8011ee6:	b082      	sub	sp, #8
 8011ee8:	af00      	add	r7, sp, #0
 8011eea:	6078      	str	r0, [r7, #4]
    }
 8011eec:	4a0a      	ldr	r2, [pc, #40]	; (8011f18 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED1Ev+0x34>)
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	601a      	str	r2, [r3, #0]
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	333c      	adds	r3, #60	; 0x3c
 8011ef6:	4618      	mov	r0, r3
 8011ef8:	f7ff fd3a 	bl	8011970 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	330c      	adds	r3, #12
 8011f00:	4618      	mov	r0, r3
 8011f02:	f00a fdfd 	bl	801cb00 <_ZN8touchgfx14SnapshotWidgetD1Ev>
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	4618      	mov	r0, r3
 8011f0a:	f7fe fe95 	bl	8010c38 <_ZN8touchgfx10TransitionD1Ev>
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	4618      	mov	r0, r3
 8011f12:	3708      	adds	r7, #8
 8011f14:	46bd      	mov	sp, r7
 8011f16:	bd80      	pop	{r7, pc}
 8011f18:	0802c304 	.word	0x0802c304

08011f1c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED0Ev>:
    virtual ~SlideTransition()
 8011f1c:	b580      	push	{r7, lr}
 8011f1e:	b082      	sub	sp, #8
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	6078      	str	r0, [r7, #4]
    }
 8011f24:	6878      	ldr	r0, [r7, #4]
 8011f26:	f7ff ffdd 	bl	8011ee4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED1Ev>
 8011f2a:	2154      	movs	r1, #84	; 0x54
 8011f2c:	6878      	ldr	r0, [r7, #4]
 8011f2e:	f018 fbfc 	bl	802a72a <_ZdlPvj>
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	4618      	mov	r0, r3
 8011f36:	3708      	adds	r7, #8
 8011f38:	46bd      	mov	sp, r7
 8011f3a:	bd80      	pop	{r7, pc}

08011f3c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv>:
    virtual void handleTickEvent()
 8011f3c:	b580      	push	{r7, lr}
 8011f3e:	b082      	sub	sp, #8
 8011f40:	af00      	add	r7, sp, #0
 8011f42:	6078      	str	r0, [r7, #4]
        if (!HAL::USE_ANIMATION_STORAGE)
 8011f44:	4b59      	ldr	r3, [pc, #356]	; (80120ac <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x170>)
 8011f46:	781b      	ldrb	r3, [r3, #0]
 8011f48:	f083 0301 	eor.w	r3, r3, #1
 8011f4c:	b2db      	uxtb	r3, r3
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d003      	beq.n	8011f5a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x1e>
            done = true;
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	2201      	movs	r2, #1
 8011f56:	721a      	strb	r2, [r3, #8]
            return;
 8011f58:	e0a5      	b.n	80120a6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x16a>
        Transition::handleTickEvent();
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	4618      	mov	r0, r3
 8011f5e:	f7fe fe8b 	bl	8010c78 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8011f68:	3301      	adds	r3, #1
 8011f6a:	b2da      	uxtb	r2, r3
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        if (animationCounter <= animationSteps)
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8011f7e:	429a      	cmp	r2, r3
 8011f80:	d82f      	bhi.n	8011fe2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0xa6>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8011f88:	b298      	uxth	r0, r3
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	; 0x50
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8011f96:	b29b      	uxth	r3, r3
 8011f98:	2100      	movs	r1, #0
 8011f9a:	f00d fcea 	bl	801f972 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8011f9e:	4603      	mov	r3, r0
 8011fa0:	461a      	mov	r2, r3
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            if (calculatedValue % 2)
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8011fae:	b29b      	uxth	r3, r3
 8011fb0:	f003 0301 	and.w	r3, r3, #1
 8011fb4:	b29b      	uxth	r3, r3
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d01b      	beq.n	8011ff2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0xb6>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8011fc0:	b29b      	uxth	r3, r3
 8011fc2:	687a      	ldr	r2, [r7, #4]
 8011fc4:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 8011fc8:	2a00      	cmp	r2, #0
 8011fca:	dd01      	ble.n	8011fd0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x94>
 8011fcc:	2201      	movs	r2, #1
 8011fce:	e001      	b.n	8011fd4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x98>
 8011fd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011fd4:	4413      	add	r3, r2
 8011fd6:	b29b      	uxth	r3, r3
 8011fd8:	b21a      	sxth	r2, r3
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8011fe0:	e007      	b.n	8011ff2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0xb6>
            done = true;
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	2201      	movs	r2, #1
 8011fe6:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	2200      	movs	r2, #0
 8011fec:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            return;
 8011ff0:	e059      	b.n	80120a6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x16a>
        switch (direction)
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8011ff8:	2b03      	cmp	r3, #3
 8011ffa:	d845      	bhi.n	8012088 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x14c>
 8011ffc:	a201      	add	r2, pc, #4	; (adr r2, 8012004 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0xc8>)
 8011ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012002:	bf00      	nop
 8012004:	0801204f 	.word	0x0801204f
 8012008:	0801204f 	.word	0x0801204f
 801200c:	08012015 	.word	0x08012015
 8012010:	08012015 	.word	0x08012015
            calculatedValue -= snapshot.getX();
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	330c      	adds	r3, #12
 8012018:	4618      	mov	r0, r3
 801201a:	f7fe feb2 	bl	8010d82 <_ZNK8touchgfx8Drawable4getXEv>
 801201e:	4603      	mov	r3, r0
 8012020:	4619      	mov	r1, r3
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8012028:	b29a      	uxth	r2, r3
 801202a:	b28b      	uxth	r3, r1
 801202c:	1ad3      	subs	r3, r2, r3
 801202e:	b29b      	uxth	r3, r3
 8012030:	b21a      	sxth	r2, r3
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(calculatedValue, 0);
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	f103 000c 	add.w	r0, r3, #12
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8012044:	2200      	movs	r2, #0
 8012046:	4619      	mov	r1, r3
 8012048:	f00c ffca 	bl	801efe0 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 801204c:	e020      	b.n	8012090 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x154>
            calculatedValue -= snapshot.getY();
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	330c      	adds	r3, #12
 8012052:	4618      	mov	r0, r3
 8012054:	f7fe fea2 	bl	8010d9c <_ZNK8touchgfx8Drawable4getYEv>
 8012058:	4603      	mov	r3, r0
 801205a:	4619      	mov	r1, r3
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8012062:	b29a      	uxth	r2, r3
 8012064:	b28b      	uxth	r3, r1
 8012066:	1ad3      	subs	r3, r2, r3
 8012068:	b29b      	uxth	r3, r3
 801206a:	b21a      	sxth	r2, r3
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(0, calculatedValue);
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	f103 000c 	add.w	r0, r3, #12
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 801207e:	461a      	mov	r2, r3
 8012080:	2100      	movs	r1, #0
 8012082:	f00c ffad 	bl	801efe0 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 8012086:	e003      	b.n	8012090 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x154>
            done = true;
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	2201      	movs	r2, #1
 801208c:	721a      	strb	r2, [r3, #8]
            break;
 801208e:	bf00      	nop
        screenContainer->forEachChild(&handleTickCallback);
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	6858      	ldr	r0, [r3, #4]
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	685b      	ldr	r3, [r3, #4]
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	3378      	adds	r3, #120	; 0x78
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	687a      	ldr	r2, [r7, #4]
 80120a0:	323c      	adds	r2, #60	; 0x3c
 80120a2:	4611      	mov	r1, r2
 80120a4:	4798      	blx	r3
    }
 80120a6:	3708      	adds	r7, #8
 80120a8:	46bd      	mov	sp, r7
 80120aa:	bd80      	pop	{r7, pc}
 80120ac:	2000bf65 	.word	0x2000bf65

080120b0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv>:
    virtual void tearDown()
 80120b0:	b580      	push	{r7, lr}
 80120b2:	b082      	sub	sp, #8
 80120b4:	af00      	add	r7, sp, #0
 80120b6:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 80120b8:	4b0b      	ldr	r3, [pc, #44]	; (80120e8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x38>)
 80120ba:	781b      	ldrb	r3, [r3, #0]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d00e      	beq.n	80120de <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x2e>
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	685b      	ldr	r3, [r3, #4]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d00a      	beq.n	80120de <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x2e>
            screenContainer->remove(snapshot);
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	6858      	ldr	r0, [r3, #4]
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	685b      	ldr	r3, [r3, #4]
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	3364      	adds	r3, #100	; 0x64
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	687a      	ldr	r2, [r7, #4]
 80120d8:	320c      	adds	r2, #12
 80120da:	4611      	mov	r1, r2
 80120dc:	4798      	blx	r3
    }
 80120de:	bf00      	nop
 80120e0:	3708      	adds	r7, #8
 80120e2:	46bd      	mov	sp, r7
 80120e4:	bd80      	pop	{r7, pc}
 80120e6:	bf00      	nop
 80120e8:	2000bf65 	.word	0x2000bf65

080120ec <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv>:
    virtual void init()
 80120ec:	b580      	push	{r7, lr}
 80120ee:	b088      	sub	sp, #32
 80120f0:	af00      	add	r7, sp, #0
 80120f2:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE)
 80120f4:	4b1a      	ldr	r3, [pc, #104]	; (8012160 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x74>)
 80120f6:	781b      	ldrb	r3, [r3, #0]
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d02d      	beq.n	8012158 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x6c>
            Transition::init();
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	4618      	mov	r0, r3
 8012100:	f7fe fdce 	bl	8010ca0 <_ZN8touchgfx10Transition4initEv>
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 8012104:	4a17      	ldr	r2, [pc, #92]	; (8012164 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x78>)
 8012106:	f107 0318 	add.w	r3, r7, #24
 801210a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801210e:	e883 0003 	stmia.w	r3, {r0, r1}
 8012112:	f107 0008 	add.w	r0, r7, #8
 8012116:	f107 0318 	add.w	r3, r7, #24
 801211a:	cb0c      	ldmia	r3, {r2, r3}
 801211c:	6879      	ldr	r1, [r7, #4]
 801211e:	f7ff fe25 	bl	8011d6c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
            screenContainer->forEachChild(&initCallback);
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	685a      	ldr	r2, [r3, #4]
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	685b      	ldr	r3, [r3, #4]
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	3378      	adds	r3, #120	; 0x78
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	f107 0108 	add.w	r1, r7, #8
 8012134:	4610      	mov	r0, r2
 8012136:	4798      	blx	r3
            screenContainer->add(snapshot);
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	6858      	ldr	r0, [r3, #4]
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	685b      	ldr	r3, [r3, #4]
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	3360      	adds	r3, #96	; 0x60
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	687a      	ldr	r2, [r7, #4]
 8012148:	320c      	adds	r2, #12
 801214a:	4611      	mov	r1, r2
 801214c:	4798      	blx	r3
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 801214e:	f107 0308 	add.w	r3, r7, #8
 8012152:	4618      	mov	r0, r3
 8012154:	f7ff fc0c 	bl	8011970 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>
    }
 8012158:	bf00      	nop
 801215a:	3720      	adds	r7, #32
 801215c:	46bd      	mov	sp, r7
 801215e:	bd80      	pop	{r7, pc}
 8012160:	2000bf65 	.word	0x2000bf65
 8012164:	0802bb38 	.word	0x0802bb38

08012168 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 8012168:	b580      	push	{r7, lr}
 801216a:	b082      	sub	sp, #8
 801216c:	af00      	add	r7, sp, #0
 801216e:	6078      	str	r0, [r7, #4]
 8012170:	6039      	str	r1, [r7, #0]
        switch (direction)
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8012178:	2b03      	cmp	r3, #3
 801217a:	d83b      	bhi.n	80121f4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x8c>
 801217c:	a201      	add	r2, pc, #4	; (adr r2, 8012184 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x1c>)
 801217e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012182:	bf00      	nop
 8012184:	080121c5 	.word	0x080121c5
 8012188:	080121df 	.word	0x080121df
 801218c:	08012195 	.word	0x08012195
 8012190:	080121ab 	.word	0x080121ab
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 8012194:	683b      	ldr	r3, [r7, #0]
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	3354      	adds	r3, #84	; 0x54
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	4a18      	ldr	r2, [pc, #96]	; (8012200 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x98>)
 801219e:	8812      	ldrh	r2, [r2, #0]
 80121a0:	b211      	sxth	r1, r2
 80121a2:	2200      	movs	r2, #0
 80121a4:	6838      	ldr	r0, [r7, #0]
 80121a6:	4798      	blx	r3
            break;
 80121a8:	e025      	b.n	80121f6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(-HAL::DISPLAY_WIDTH, 0);
 80121aa:	683b      	ldr	r3, [r7, #0]
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	3354      	adds	r3, #84	; 0x54
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	4a13      	ldr	r2, [pc, #76]	; (8012200 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x98>)
 80121b4:	8812      	ldrh	r2, [r2, #0]
 80121b6:	4252      	negs	r2, r2
 80121b8:	b292      	uxth	r2, r2
 80121ba:	b211      	sxth	r1, r2
 80121bc:	2200      	movs	r2, #0
 80121be:	6838      	ldr	r0, [r7, #0]
 80121c0:	4798      	blx	r3
            break;
 80121c2:	e018      	b.n	80121f6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, -HAL::DISPLAY_HEIGHT);
 80121c4:	683b      	ldr	r3, [r7, #0]
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	3354      	adds	r3, #84	; 0x54
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	4a0d      	ldr	r2, [pc, #52]	; (8012204 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 80121ce:	8812      	ldrh	r2, [r2, #0]
 80121d0:	4252      	negs	r2, r2
 80121d2:	b292      	uxth	r2, r2
 80121d4:	b212      	sxth	r2, r2
 80121d6:	2100      	movs	r1, #0
 80121d8:	6838      	ldr	r0, [r7, #0]
 80121da:	4798      	blx	r3
            break;
 80121dc:	e00b      	b.n	80121f6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, HAL::DISPLAY_HEIGHT);
 80121de:	683b      	ldr	r3, [r7, #0]
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	3354      	adds	r3, #84	; 0x54
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	4a07      	ldr	r2, [pc, #28]	; (8012204 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 80121e8:	8812      	ldrh	r2, [r2, #0]
 80121ea:	b212      	sxth	r2, r2
 80121ec:	2100      	movs	r1, #0
 80121ee:	6838      	ldr	r0, [r7, #0]
 80121f0:	4798      	blx	r3
            break;
 80121f2:	e000      	b.n	80121f6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x8e>
            break;
 80121f4:	bf00      	nop
    }
 80121f6:	bf00      	nop
 80121f8:	3708      	adds	r7, #8
 80121fa:	46bd      	mov	sp, r7
 80121fc:	bd80      	pop	{r7, pc}
 80121fe:	bf00      	nop
 8012200:	2000bf5a 	.word	0x2000bf5a
 8012204:	2000bf5c 	.word	0x2000bf5c

08012208 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 8012208:	b580      	push	{r7, lr}
 801220a:	b082      	sub	sp, #8
 801220c:	af00      	add	r7, sp, #0
 801220e:	6078      	str	r0, [r7, #4]
 8012210:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	685b      	ldr	r3, [r3, #4]
 8012216:	687a      	ldr	r2, [r7, #4]
 8012218:	68d2      	ldr	r2, [r2, #12]
 801221a:	1052      	asrs	r2, r2, #1
 801221c:	1898      	adds	r0, r3, r2
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	68db      	ldr	r3, [r3, #12]
 8012222:	f003 0301 	and.w	r3, r3, #1
 8012226:	2b00      	cmp	r3, #0
 8012228:	d102      	bne.n	8012230 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7executeES5_+0x28>
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	689b      	ldr	r3, [r3, #8]
 801222e:	e00a      	b.n	8012246 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7executeES5_+0x3e>
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	685b      	ldr	r3, [r3, #4]
 8012234:	687a      	ldr	r2, [r7, #4]
 8012236:	68d2      	ldr	r2, [r2, #12]
 8012238:	1052      	asrs	r2, r2, #1
 801223a:	4413      	add	r3, r2
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	687a      	ldr	r2, [r7, #4]
 8012240:	6892      	ldr	r2, [r2, #8]
 8012242:	4413      	add	r3, r2
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	6839      	ldr	r1, [r7, #0]
 8012248:	4798      	blx	r3
    }
 801224a:	bf00      	nop
 801224c:	3708      	adds	r7, #8
 801224e:	46bd      	mov	sp, r7
 8012250:	bd80      	pop	{r7, pc}

08012252 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 8012252:	b480      	push	{r7}
 8012254:	b083      	sub	sp, #12
 8012256:	af00      	add	r7, sp, #0
 8012258:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	685b      	ldr	r3, [r3, #4]
 801225e:	2b00      	cmp	r3, #0
 8012260:	d010      	beq.n	8012284 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x32>
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	689b      	ldr	r3, [r3, #8]
 8012266:	2b00      	cmp	r3, #0
 8012268:	d107      	bne.n	801227a <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x28>
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	68db      	ldr	r3, [r3, #12]
 801226e:	f003 0301 	and.w	r3, r3, #1
 8012272:	2b00      	cmp	r3, #0
 8012274:	d101      	bne.n	801227a <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x28>
 8012276:	2301      	movs	r3, #1
 8012278:	e000      	b.n	801227c <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x2a>
 801227a:	2300      	movs	r3, #0
 801227c:	2b01      	cmp	r3, #1
 801227e:	d001      	beq.n	8012284 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x32>
 8012280:	2301      	movs	r3, #1
 8012282:	e000      	b.n	8012286 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x34>
 8012284:	2300      	movs	r3, #0
    }
 8012286:	4618      	mov	r0, r3
 8012288:	370c      	adds	r7, #12
 801228a:	46bd      	mov	sp, r7
 801228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012290:	4770      	bx	lr
	...

08012294 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>:
    virtual ~SlideTransition()
 8012294:	b580      	push	{r7, lr}
 8012296:	b082      	sub	sp, #8
 8012298:	af00      	add	r7, sp, #0
 801229a:	6078      	str	r0, [r7, #4]
    }
 801229c:	4a0a      	ldr	r2, [pc, #40]	; (80122c8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev+0x34>)
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	601a      	str	r2, [r3, #0]
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	333c      	adds	r3, #60	; 0x3c
 80122a6:	4618      	mov	r0, r3
 80122a8:	f7ff fc2c 	bl	8011b04 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	330c      	adds	r3, #12
 80122b0:	4618      	mov	r0, r3
 80122b2:	f00a fc25 	bl	801cb00 <_ZN8touchgfx14SnapshotWidgetD1Ev>
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	4618      	mov	r0, r3
 80122ba:	f7fe fcbd 	bl	8010c38 <_ZN8touchgfx10TransitionD1Ev>
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	4618      	mov	r0, r3
 80122c2:	3708      	adds	r7, #8
 80122c4:	46bd      	mov	sp, r7
 80122c6:	bd80      	pop	{r7, pc}
 80122c8:	0802c344 	.word	0x0802c344

080122cc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED0Ev>:
    virtual ~SlideTransition()
 80122cc:	b580      	push	{r7, lr}
 80122ce:	b082      	sub	sp, #8
 80122d0:	af00      	add	r7, sp, #0
 80122d2:	6078      	str	r0, [r7, #4]
    }
 80122d4:	6878      	ldr	r0, [r7, #4]
 80122d6:	f7ff ffdd 	bl	8012294 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>
 80122da:	2154      	movs	r1, #84	; 0x54
 80122dc:	6878      	ldr	r0, [r7, #4]
 80122de:	f018 fa24 	bl	802a72a <_ZdlPvj>
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	4618      	mov	r0, r3
 80122e6:	3708      	adds	r7, #8
 80122e8:	46bd      	mov	sp, r7
 80122ea:	bd80      	pop	{r7, pc}

080122ec <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 80122ec:	b580      	push	{r7, lr}
 80122ee:	b082      	sub	sp, #8
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	6078      	str	r0, [r7, #4]
        if (!HAL::USE_ANIMATION_STORAGE)
 80122f4:	4b59      	ldr	r3, [pc, #356]	; (801245c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x170>)
 80122f6:	781b      	ldrb	r3, [r3, #0]
 80122f8:	f083 0301 	eor.w	r3, r3, #1
 80122fc:	b2db      	uxtb	r3, r3
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d003      	beq.n	801230a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	2201      	movs	r2, #1
 8012306:	721a      	strb	r2, [r3, #8]
            return;
 8012308:	e0a5      	b.n	8012456 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x16a>
        Transition::handleTickEvent();
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	4618      	mov	r0, r3
 801230e:	f7fe fcb3 	bl	8010c78 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8012318:	3301      	adds	r3, #1
 801231a:	b2da      	uxtb	r2, r3
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        if (animationCounter <= animationSteps)
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 801232e:	429a      	cmp	r2, r3
 8012330:	d82f      	bhi.n	8012392 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xa6>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8012338:	b298      	uxth	r0, r3
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	; 0x50
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8012346:	b29b      	uxth	r3, r3
 8012348:	2100      	movs	r1, #0
 801234a:	f00d fb12 	bl	801f972 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 801234e:	4603      	mov	r3, r0
 8012350:	461a      	mov	r2, r3
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            if (calculatedValue % 2)
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 801235e:	b29b      	uxth	r3, r3
 8012360:	f003 0301 	and.w	r3, r3, #1
 8012364:	b29b      	uxth	r3, r3
 8012366:	2b00      	cmp	r3, #0
 8012368:	d01b      	beq.n	80123a2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8012370:	b29b      	uxth	r3, r3
 8012372:	687a      	ldr	r2, [r7, #4]
 8012374:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 8012378:	2a00      	cmp	r2, #0
 801237a:	dd01      	ble.n	8012380 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x94>
 801237c:	2201      	movs	r2, #1
 801237e:	e001      	b.n	8012384 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x98>
 8012380:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012384:	4413      	add	r3, r2
 8012386:	b29b      	uxth	r3, r3
 8012388:	b21a      	sxth	r2, r3
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8012390:	e007      	b.n	80123a2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
            done = true;
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	2201      	movs	r2, #1
 8012396:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	2200      	movs	r2, #0
 801239c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            return;
 80123a0:	e059      	b.n	8012456 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x16a>
        switch (direction)
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80123a8:	2b03      	cmp	r3, #3
 80123aa:	d845      	bhi.n	8012438 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x14c>
 80123ac:	a201      	add	r2, pc, #4	; (adr r2, 80123b4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xc8>)
 80123ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123b2:	bf00      	nop
 80123b4:	080123ff 	.word	0x080123ff
 80123b8:	080123ff 	.word	0x080123ff
 80123bc:	080123c5 	.word	0x080123c5
 80123c0:	080123c5 	.word	0x080123c5
            calculatedValue -= snapshot.getX();
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	330c      	adds	r3, #12
 80123c8:	4618      	mov	r0, r3
 80123ca:	f7fe fcda 	bl	8010d82 <_ZNK8touchgfx8Drawable4getXEv>
 80123ce:	4603      	mov	r3, r0
 80123d0:	4619      	mov	r1, r3
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 80123d8:	b29a      	uxth	r2, r3
 80123da:	b28b      	uxth	r3, r1
 80123dc:	1ad3      	subs	r3, r2, r3
 80123de:	b29b      	uxth	r3, r3
 80123e0:	b21a      	sxth	r2, r3
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(calculatedValue, 0);
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	f103 000c 	add.w	r0, r3, #12
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 80123f4:	2200      	movs	r2, #0
 80123f6:	4619      	mov	r1, r3
 80123f8:	f00c fdf2 	bl	801efe0 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 80123fc:	e020      	b.n	8012440 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x154>
            calculatedValue -= snapshot.getY();
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	330c      	adds	r3, #12
 8012402:	4618      	mov	r0, r3
 8012404:	f7fe fcca 	bl	8010d9c <_ZNK8touchgfx8Drawable4getYEv>
 8012408:	4603      	mov	r3, r0
 801240a:	4619      	mov	r1, r3
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8012412:	b29a      	uxth	r2, r3
 8012414:	b28b      	uxth	r3, r1
 8012416:	1ad3      	subs	r3, r2, r3
 8012418:	b29b      	uxth	r3, r3
 801241a:	b21a      	sxth	r2, r3
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(0, calculatedValue);
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	f103 000c 	add.w	r0, r3, #12
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 801242e:	461a      	mov	r2, r3
 8012430:	2100      	movs	r1, #0
 8012432:	f00c fdd5 	bl	801efe0 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 8012436:	e003      	b.n	8012440 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x154>
            done = true;
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	2201      	movs	r2, #1
 801243c:	721a      	strb	r2, [r3, #8]
            break;
 801243e:	bf00      	nop
        screenContainer->forEachChild(&handleTickCallback);
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	6858      	ldr	r0, [r3, #4]
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	685b      	ldr	r3, [r3, #4]
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	3378      	adds	r3, #120	; 0x78
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	687a      	ldr	r2, [r7, #4]
 8012450:	323c      	adds	r2, #60	; 0x3c
 8012452:	4611      	mov	r1, r2
 8012454:	4798      	blx	r3
    }
 8012456:	3708      	adds	r7, #8
 8012458:	46bd      	mov	sp, r7
 801245a:	bd80      	pop	{r7, pc}
 801245c:	2000bf65 	.word	0x2000bf65

08012460 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv>:
    virtual void tearDown()
 8012460:	b580      	push	{r7, lr}
 8012462:	b082      	sub	sp, #8
 8012464:	af00      	add	r7, sp, #0
 8012466:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 8012468:	4b0b      	ldr	r3, [pc, #44]	; (8012498 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x38>)
 801246a:	781b      	ldrb	r3, [r3, #0]
 801246c:	2b00      	cmp	r3, #0
 801246e:	d00e      	beq.n	801248e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	685b      	ldr	r3, [r3, #4]
 8012474:	2b00      	cmp	r3, #0
 8012476:	d00a      	beq.n	801248e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
            screenContainer->remove(snapshot);
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	6858      	ldr	r0, [r3, #4]
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	685b      	ldr	r3, [r3, #4]
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	3364      	adds	r3, #100	; 0x64
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	687a      	ldr	r2, [r7, #4]
 8012488:	320c      	adds	r2, #12
 801248a:	4611      	mov	r1, r2
 801248c:	4798      	blx	r3
    }
 801248e:	bf00      	nop
 8012490:	3708      	adds	r7, #8
 8012492:	46bd      	mov	sp, r7
 8012494:	bd80      	pop	{r7, pc}
 8012496:	bf00      	nop
 8012498:	2000bf65 	.word	0x2000bf65

0801249c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv>:
    virtual void init()
 801249c:	b580      	push	{r7, lr}
 801249e:	b088      	sub	sp, #32
 80124a0:	af00      	add	r7, sp, #0
 80124a2:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE)
 80124a4:	4b1a      	ldr	r3, [pc, #104]	; (8012510 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x74>)
 80124a6:	781b      	ldrb	r3, [r3, #0]
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d02d      	beq.n	8012508 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x6c>
            Transition::init();
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	4618      	mov	r0, r3
 80124b0:	f7fe fbf6 	bl	8010ca0 <_ZN8touchgfx10Transition4initEv>
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 80124b4:	4a17      	ldr	r2, [pc, #92]	; (8012514 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x78>)
 80124b6:	f107 0318 	add.w	r3, r7, #24
 80124ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80124be:	e883 0003 	stmia.w	r3, {r0, r1}
 80124c2:	f107 0008 	add.w	r0, r7, #8
 80124c6:	f107 0318 	add.w	r3, r7, #24
 80124ca:	cb0c      	ldmia	r3, {r2, r3}
 80124cc:	6879      	ldr	r1, [r7, #4]
 80124ce:	f7ff fcc7 	bl	8011e60 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
            screenContainer->forEachChild(&initCallback);
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	685a      	ldr	r2, [r3, #4]
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	685b      	ldr	r3, [r3, #4]
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	3378      	adds	r3, #120	; 0x78
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	f107 0108 	add.w	r1, r7, #8
 80124e4:	4610      	mov	r0, r2
 80124e6:	4798      	blx	r3
            screenContainer->add(snapshot);
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	6858      	ldr	r0, [r3, #4]
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	685b      	ldr	r3, [r3, #4]
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	3360      	adds	r3, #96	; 0x60
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	687a      	ldr	r2, [r7, #4]
 80124f8:	320c      	adds	r2, #12
 80124fa:	4611      	mov	r1, r2
 80124fc:	4798      	blx	r3
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 80124fe:	f107 0308 	add.w	r3, r7, #8
 8012502:	4618      	mov	r0, r3
 8012504:	f7ff fafe 	bl	8011b04 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
    }
 8012508:	bf00      	nop
 801250a:	3720      	adds	r7, #32
 801250c:	46bd      	mov	sp, r7
 801250e:	bd80      	pop	{r7, pc}
 8012510:	2000bf65 	.word	0x2000bf65
 8012514:	0802bb40 	.word	0x0802bb40

08012518 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 8012518:	b580      	push	{r7, lr}
 801251a:	b082      	sub	sp, #8
 801251c:	af00      	add	r7, sp, #0
 801251e:	6078      	str	r0, [r7, #4]
 8012520:	6039      	str	r1, [r7, #0]
        switch (direction)
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8012528:	2b03      	cmp	r3, #3
 801252a:	d83b      	bhi.n	80125a4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8c>
 801252c:	a201      	add	r2, pc, #4	; (adr r2, 8012534 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x1c>)
 801252e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012532:	bf00      	nop
 8012534:	08012575 	.word	0x08012575
 8012538:	0801258f 	.word	0x0801258f
 801253c:	08012545 	.word	0x08012545
 8012540:	0801255b 	.word	0x0801255b
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 8012544:	683b      	ldr	r3, [r7, #0]
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	3354      	adds	r3, #84	; 0x54
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	4a18      	ldr	r2, [pc, #96]	; (80125b0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 801254e:	8812      	ldrh	r2, [r2, #0]
 8012550:	b211      	sxth	r1, r2
 8012552:	2200      	movs	r2, #0
 8012554:	6838      	ldr	r0, [r7, #0]
 8012556:	4798      	blx	r3
            break;
 8012558:	e025      	b.n	80125a6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(-HAL::DISPLAY_WIDTH, 0);
 801255a:	683b      	ldr	r3, [r7, #0]
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	3354      	adds	r3, #84	; 0x54
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	4a13      	ldr	r2, [pc, #76]	; (80125b0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 8012564:	8812      	ldrh	r2, [r2, #0]
 8012566:	4252      	negs	r2, r2
 8012568:	b292      	uxth	r2, r2
 801256a:	b211      	sxth	r1, r2
 801256c:	2200      	movs	r2, #0
 801256e:	6838      	ldr	r0, [r7, #0]
 8012570:	4798      	blx	r3
            break;
 8012572:	e018      	b.n	80125a6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, -HAL::DISPLAY_HEIGHT);
 8012574:	683b      	ldr	r3, [r7, #0]
 8012576:	681b      	ldr	r3, [r3, #0]
 8012578:	3354      	adds	r3, #84	; 0x54
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	4a0d      	ldr	r2, [pc, #52]	; (80125b4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 801257e:	8812      	ldrh	r2, [r2, #0]
 8012580:	4252      	negs	r2, r2
 8012582:	b292      	uxth	r2, r2
 8012584:	b212      	sxth	r2, r2
 8012586:	2100      	movs	r1, #0
 8012588:	6838      	ldr	r0, [r7, #0]
 801258a:	4798      	blx	r3
            break;
 801258c:	e00b      	b.n	80125a6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, HAL::DISPLAY_HEIGHT);
 801258e:	683b      	ldr	r3, [r7, #0]
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	3354      	adds	r3, #84	; 0x54
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	4a07      	ldr	r2, [pc, #28]	; (80125b4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 8012598:	8812      	ldrh	r2, [r2, #0]
 801259a:	b212      	sxth	r2, r2
 801259c:	2100      	movs	r1, #0
 801259e:	6838      	ldr	r0, [r7, #0]
 80125a0:	4798      	blx	r3
            break;
 80125a2:	e000      	b.n	80125a6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            break;
 80125a4:	bf00      	nop
    }
 80125a6:	bf00      	nop
 80125a8:	3708      	adds	r7, #8
 80125aa:	46bd      	mov	sp, r7
 80125ac:	bd80      	pop	{r7, pc}
 80125ae:	bf00      	nop
 80125b0:	2000bf5a 	.word	0x2000bf5a
 80125b4:	2000bf5c 	.word	0x2000bf5c

080125b8 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 80125b8:	b580      	push	{r7, lr}
 80125ba:	b082      	sub	sp, #8
 80125bc:	af00      	add	r7, sp, #0
 80125be:	6078      	str	r0, [r7, #4]
 80125c0:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	685b      	ldr	r3, [r3, #4]
 80125c6:	687a      	ldr	r2, [r7, #4]
 80125c8:	68d2      	ldr	r2, [r2, #12]
 80125ca:	1052      	asrs	r2, r2, #1
 80125cc:	1898      	adds	r0, r3, r2
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	68db      	ldr	r3, [r3, #12]
 80125d2:	f003 0301 	and.w	r3, r3, #1
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d102      	bne.n	80125e0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x28>
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	689b      	ldr	r3, [r3, #8]
 80125de:	e00a      	b.n	80125f6 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x3e>
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	685b      	ldr	r3, [r3, #4]
 80125e4:	687a      	ldr	r2, [r7, #4]
 80125e6:	68d2      	ldr	r2, [r2, #12]
 80125e8:	1052      	asrs	r2, r2, #1
 80125ea:	4413      	add	r3, r2
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	687a      	ldr	r2, [r7, #4]
 80125f0:	6892      	ldr	r2, [r2, #8]
 80125f2:	4413      	add	r3, r2
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	6839      	ldr	r1, [r7, #0]
 80125f8:	4798      	blx	r3
    }
 80125fa:	bf00      	nop
 80125fc:	3708      	adds	r7, #8
 80125fe:	46bd      	mov	sp, r7
 8012600:	bd80      	pop	{r7, pc}

08012602 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 8012602:	b480      	push	{r7}
 8012604:	b083      	sub	sp, #12
 8012606:	af00      	add	r7, sp, #0
 8012608:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	685b      	ldr	r3, [r3, #4]
 801260e:	2b00      	cmp	r3, #0
 8012610:	d010      	beq.n	8012634 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	689b      	ldr	r3, [r3, #8]
 8012616:	2b00      	cmp	r3, #0
 8012618:	d107      	bne.n	801262a <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	68db      	ldr	r3, [r3, #12]
 801261e:	f003 0301 	and.w	r3, r3, #1
 8012622:	2b00      	cmp	r3, #0
 8012624:	d101      	bne.n	801262a <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 8012626:	2301      	movs	r3, #1
 8012628:	e000      	b.n	801262c <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x2a>
 801262a:	2300      	movs	r3, #0
 801262c:	2b01      	cmp	r3, #1
 801262e:	d001      	beq.n	8012634 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 8012630:	2301      	movs	r3, #1
 8012632:	e000      	b.n	8012636 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x34>
 8012634:	2300      	movs	r3, #0
    }
 8012636:	4618      	mov	r0, r3
 8012638:	370c      	adds	r7, #12
 801263a:	46bd      	mov	sp, r7
 801263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012640:	4770      	bx	lr

08012642 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * @brief Calls the member function.
     *
     *        Calls the member function. Do not call execute unless isValid() returns true (ie.
     *        a pointer to the object and the function has been set).
     */
    virtual void execute()
 8012642:	b580      	push	{r7, lr}
 8012644:	b082      	sub	sp, #8
 8012646:	af00      	add	r7, sp, #0
 8012648:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	685b      	ldr	r3, [r3, #4]
 801264e:	687a      	ldr	r2, [r7, #4]
 8012650:	68d2      	ldr	r2, [r2, #12]
 8012652:	1052      	asrs	r2, r2, #1
 8012654:	1899      	adds	r1, r3, r2
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	68db      	ldr	r3, [r3, #12]
 801265a:	f003 0301 	and.w	r3, r3, #1
 801265e:	2b00      	cmp	r3, #0
 8012660:	d102      	bne.n	8012668 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	689b      	ldr	r3, [r3, #8]
 8012666:	e00a      	b.n	801267e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	685b      	ldr	r3, [r3, #4]
 801266c:	687a      	ldr	r2, [r7, #4]
 801266e:	68d2      	ldr	r2, [r2, #12]
 8012670:	1052      	asrs	r2, r2, #1
 8012672:	4413      	add	r3, r2
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	687a      	ldr	r2, [r7, #4]
 8012678:	6892      	ldr	r2, [r2, #8]
 801267a:	4413      	add	r3, r2
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	4608      	mov	r0, r1
 8012680:	4798      	blx	r3
    }
 8012682:	bf00      	nop
 8012684:	3708      	adds	r7, #8
 8012686:	46bd      	mov	sp, r7
 8012688:	bd80      	pop	{r7, pc}

0801268a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     *        Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 801268a:	b480      	push	{r7}
 801268c:	b083      	sub	sp, #12
 801268e:	af00      	add	r7, sp, #0
 8012690:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	685b      	ldr	r3, [r3, #4]
 8012696:	2b00      	cmp	r3, #0
 8012698:	d010      	beq.n	80126bc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	689b      	ldr	r3, [r3, #8]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d107      	bne.n	80126b2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	68db      	ldr	r3, [r3, #12]
 80126a6:	f003 0301 	and.w	r3, r3, #1
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d101      	bne.n	80126b2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80126ae:	2301      	movs	r3, #1
 80126b0:	e000      	b.n	80126b4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 80126b2:	2300      	movs	r3, #0
 80126b4:	2b01      	cmp	r3, #1
 80126b6:	d001      	beq.n	80126bc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80126b8:	2301      	movs	r3, #1
 80126ba:	e000      	b.n	80126be <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 80126bc:	2300      	movs	r3, #0
    }
 80126be:	4618      	mov	r0, r3
 80126c0:	370c      	adds	r7, #12
 80126c2:	46bd      	mov	sp, r7
 80126c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c8:	4770      	bx	lr

080126ca <_ZN8touchgfx9colortypeC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Creates a black (0) color.
     */
    colortype() : color(0) {}
 80126ca:	b480      	push	{r7}
 80126cc:	b083      	sub	sp, #12
 80126ce:	af00      	add	r7, sp, #0
 80126d0:	6078      	str	r0, [r7, #4]
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	2200      	movs	r2, #0
 80126d6:	601a      	str	r2, [r3, #0]
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	4618      	mov	r0, r3
 80126dc:	370c      	adds	r7, #12
 80126de:	46bd      	mov	sp, r7
 80126e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e4:	4770      	bx	lr

080126e6 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param col The color.
     *
     * @see Color::getColorFrom24BitRGB()
     */
    colortype(uint32_t col)
 80126e6:	b480      	push	{r7}
 80126e8:	b083      	sub	sp, #12
 80126ea:	af00      	add	r7, sp, #0
 80126ec:	6078      	str	r0, [r7, #4]
 80126ee:	6039      	str	r1, [r7, #0]
    {
        color = col;
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	683a      	ldr	r2, [r7, #0]
 80126f4:	601a      	str	r2, [r3, #0]
    }
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	4618      	mov	r0, r3
 80126fa:	370c      	adds	r7, #12
 80126fc:	46bd      	mov	sp, r7
 80126fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012702:	4770      	bx	lr

08012704 <_ZN8touchgfx4RectC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Resulting in an empty Rect with coordinates 0,0.
     */
    Rect()
 8012704:	b480      	push	{r7}
 8012706:	b083      	sub	sp, #12
 8012708:	af00      	add	r7, sp, #0
 801270a:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	2200      	movs	r2, #0
 8012710:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	2200      	movs	r2, #0
 8012716:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	2200      	movs	r2, #0
 801271c:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	2200      	movs	r2, #0
 8012722:	80da      	strh	r2, [r3, #6]
    }
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	4618      	mov	r0, r3
 8012728:	370c      	adds	r7, #12
 801272a:	46bd      	mov	sp, r7
 801272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012730:	4770      	bx	lr

08012732 <_ZN8touchgfx4RectC1Essss>:
     * @param x      The x coordinate.
     * @param y      The y coordinate.
     * @param width  The width.
     * @param height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 8012732:	b480      	push	{r7}
 8012734:	b085      	sub	sp, #20
 8012736:	af00      	add	r7, sp, #0
 8012738:	60f8      	str	r0, [r7, #12]
 801273a:	4608      	mov	r0, r1
 801273c:	4611      	mov	r1, r2
 801273e:	461a      	mov	r2, r3
 8012740:	4603      	mov	r3, r0
 8012742:	817b      	strh	r3, [r7, #10]
 8012744:	460b      	mov	r3, r1
 8012746:	813b      	strh	r3, [r7, #8]
 8012748:	4613      	mov	r3, r2
 801274a:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	897a      	ldrh	r2, [r7, #10]
 8012750:	801a      	strh	r2, [r3, #0]
        this->y = y;
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	893a      	ldrh	r2, [r7, #8]
 8012756:	805a      	strh	r2, [r3, #2]
        this->width = width;
 8012758:	68fb      	ldr	r3, [r7, #12]
 801275a:	88fa      	ldrh	r2, [r7, #6]
 801275c:	809a      	strh	r2, [r3, #4]
        this->height = height;
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	8b3a      	ldrh	r2, [r7, #24]
 8012762:	80da      	strh	r2, [r3, #6]
    }
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	4618      	mov	r0, r3
 8012768:	3714      	adds	r7, #20
 801276a:	46bd      	mov	sp, r7
 801276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012770:	4770      	bx	lr

08012772 <_ZNK8touchgfx10ClickEvent7getTypeEv>:
     *
     *        Gets the click type of this event.
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
 8012772:	b480      	push	{r7}
 8012774:	b083      	sub	sp, #12
 8012776:	af00      	add	r7, sp, #0
 8012778:	6078      	str	r0, [r7, #4]
    {
        return _type;
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	791b      	ldrb	r3, [r3, #4]
    }
 801277e:	4618      	mov	r0, r3
 8012780:	370c      	adds	r7, #12
 8012782:	46bd      	mov	sp, r7
 8012784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012788:	4770      	bx	lr

0801278a <_ZN8touchgfx6BitmapC1Et>:
     *        Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     *        array.
     *
     * @param id The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID)
 801278a:	b480      	push	{r7}
 801278c:	b083      	sub	sp, #12
 801278e:	af00      	add	r7, sp, #0
 8012790:	6078      	str	r0, [r7, #4]
 8012792:	460b      	mov	r3, r1
 8012794:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	887a      	ldrh	r2, [r7, #2]
 801279a:	801a      	strh	r2, [r3, #0]
    {
    }
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	4618      	mov	r0, r3
 80127a0:	370c      	adds	r7, #12
 80127a2:	46bd      	mov	sp, r7
 80127a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127a8:	4770      	bx	lr
	...

080127ac <_ZN8touchgfx8DrawableC1Ev>:
    Drawable() : rect(0, 0, 0, 0),
 80127ac:	b580      	push	{r7, lr}
 80127ae:	b084      	sub	sp, #16
 80127b0:	af02      	add	r7, sp, #8
 80127b2:	6078      	str	r0, [r7, #4]
        visible(true)
 80127b4:	4a13      	ldr	r2, [pc, #76]	; (8012804 <_ZN8touchgfx8DrawableC1Ev+0x58>)
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	601a      	str	r2, [r3, #0]
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	1d18      	adds	r0, r3, #4
 80127be:	2300      	movs	r3, #0
 80127c0:	9300      	str	r3, [sp, #0]
 80127c2:	2300      	movs	r3, #0
 80127c4:	2200      	movs	r2, #0
 80127c6:	2100      	movs	r1, #0
 80127c8:	f7ff ffb3 	bl	8012732 <_ZN8touchgfx4RectC1Essss>
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	330c      	adds	r3, #12
 80127d0:	4618      	mov	r0, r3
 80127d2:	f7ff ff97 	bl	8012704 <_ZN8touchgfx4RectC1Ev>
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	2200      	movs	r2, #0
 80127da:	615a      	str	r2, [r3, #20]
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	2200      	movs	r2, #0
 80127e0:	619a      	str	r2, [r3, #24]
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	2200      	movs	r2, #0
 80127e6:	61da      	str	r2, [r3, #28]
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	2200      	movs	r2, #0
 80127ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	2201      	movs	r2, #1
 80127f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	4618      	mov	r0, r3
 80127fc:	3708      	adds	r7, #8
 80127fe:	46bd      	mov	sp, r7
 8012800:	bd80      	pop	{r7, pc}
 8012802:	bf00      	nop
 8012804:	0802ee64 	.word	0x0802ee64

08012808 <_ZN8touchgfx8DrawableD1Ev>:
    virtual ~Drawable() { }
 8012808:	b480      	push	{r7}
 801280a:	b083      	sub	sp, #12
 801280c:	af00      	add	r7, sp, #0
 801280e:	6078      	str	r0, [r7, #4]
 8012810:	4a04      	ldr	r2, [pc, #16]	; (8012824 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	601a      	str	r2, [r3, #0]
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	4618      	mov	r0, r3
 801281a:	370c      	adds	r7, #12
 801281c:	46bd      	mov	sp, r7
 801281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012822:	4770      	bx	lr
 8012824:	0802ee64 	.word	0x0802ee64

08012828 <_ZN8touchgfx8DrawableD0Ev>:
 8012828:	b580      	push	{r7, lr}
 801282a:	b082      	sub	sp, #8
 801282c:	af00      	add	r7, sp, #0
 801282e:	6078      	str	r0, [r7, #4]
 8012830:	6878      	ldr	r0, [r7, #4]
 8012832:	f7ff ffe9 	bl	8012808 <_ZN8touchgfx8DrawableD1Ev>
 8012836:	2128      	movs	r1, #40	; 0x28
 8012838:	6878      	ldr	r0, [r7, #4]
 801283a:	f017 ff76 	bl	802a72a <_ZdlPvj>
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	4618      	mov	r0, r3
 8012842:	3708      	adds	r7, #8
 8012844:	46bd      	mov	sp, r7
 8012846:	bd80      	pop	{r7, pc}

08012848 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     */
    virtual void setX(int16_t x)
 8012848:	b480      	push	{r7}
 801284a:	b083      	sub	sp, #12
 801284c:	af00      	add	r7, sp, #0
 801284e:	6078      	str	r0, [r7, #4]
 8012850:	460b      	mov	r3, r1
 8012852:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	887a      	ldrh	r2, [r7, #2]
 8012858:	809a      	strh	r2, [r3, #4]
    }
 801285a:	bf00      	nop
 801285c:	370c      	adds	r7, #12
 801285e:	46bd      	mov	sp, r7
 8012860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012864:	4770      	bx	lr

08012866 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setY(int16_t y)
 8012866:	b480      	push	{r7}
 8012868:	b083      	sub	sp, #12
 801286a:	af00      	add	r7, sp, #0
 801286c:	6078      	str	r0, [r7, #4]
 801286e:	460b      	mov	r3, r1
 8012870:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	887a      	ldrh	r2, [r7, #2]
 8012876:	80da      	strh	r2, [r3, #6]
    }
 8012878:	bf00      	nop
 801287a:	370c      	adds	r7, #12
 801287c:	46bd      	mov	sp, r7
 801287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012882:	4770      	bx	lr

08012884 <_ZN8touchgfx8Drawable5setXYEss>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setXY(int16_t x, int16_t y)
 8012884:	b580      	push	{r7, lr}
 8012886:	b082      	sub	sp, #8
 8012888:	af00      	add	r7, sp, #0
 801288a:	6078      	str	r0, [r7, #4]
 801288c:	460b      	mov	r3, r1
 801288e:	807b      	strh	r3, [r7, #2]
 8012890:	4613      	mov	r3, r2
 8012892:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	332c      	adds	r3, #44	; 0x2c
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80128a0:	4611      	mov	r1, r2
 80128a2:	6878      	ldr	r0, [r7, #4]
 80128a4:	4798      	blx	r3
        setY(y);
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	3330      	adds	r3, #48	; 0x30
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	f9b7 2000 	ldrsh.w	r2, [r7]
 80128b2:	4611      	mov	r1, r2
 80128b4:	6878      	ldr	r0, [r7, #4]
 80128b6:	4798      	blx	r3
    }
 80128b8:	bf00      	nop
 80128ba:	3708      	adds	r7, #8
 80128bc:	46bd      	mov	sp, r7
 80128be:	bd80      	pop	{r7, pc}

080128c0 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param width The new width.
     */
    virtual void setWidth(int16_t width)
 80128c0:	b480      	push	{r7}
 80128c2:	b083      	sub	sp, #12
 80128c4:	af00      	add	r7, sp, #0
 80128c6:	6078      	str	r0, [r7, #4]
 80128c8:	460b      	mov	r3, r1
 80128ca:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	887a      	ldrh	r2, [r7, #2]
 80128d0:	811a      	strh	r2, [r3, #8]
    }
 80128d2:	bf00      	nop
 80128d4:	370c      	adds	r7, #12
 80128d6:	46bd      	mov	sp, r7
 80128d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128dc:	4770      	bx	lr

080128de <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param height The new height.
     */
    virtual void setHeight(int16_t height)
 80128de:	b480      	push	{r7}
 80128e0:	b083      	sub	sp, #12
 80128e2:	af00      	add	r7, sp, #0
 80128e4:	6078      	str	r0, [r7, #4]
 80128e6:	460b      	mov	r3, r1
 80128e8:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	887a      	ldrh	r2, [r7, #2]
 80128ee:	815a      	strh	r2, [r3, #10]
    }
 80128f0:	bf00      	nop
 80128f2:	370c      	adds	r7, #12
 80128f4:	46bd      	mov	sp, r7
 80128f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128fa:	4770      	bx	lr

080128fc <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     *
     *        This function can be called on parent nodes to signal that the size of one or
     *        more of its children has changed. Currently only used in ScrollableContainer to
     *        redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged() { }
 80128fc:	b480      	push	{r7}
 80128fe:	b083      	sub	sp, #12
 8012900:	af00      	add	r7, sp, #0
 8012902:	6078      	str	r0, [r7, #4]
 8012904:	bf00      	nop
 8012906:	370c      	adds	r7, #12
 8012908:	46bd      	mov	sp, r7
 801290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801290e:	4770      	bx	lr

08012910 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *        Defines the event handler interface for ClickEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt) { }
 8012910:	b480      	push	{r7}
 8012912:	b083      	sub	sp, #12
 8012914:	af00      	add	r7, sp, #0
 8012916:	6078      	str	r0, [r7, #4]
 8012918:	6039      	str	r1, [r7, #0]
 801291a:	bf00      	nop
 801291c:	370c      	adds	r7, #12
 801291e:	46bd      	mov	sp, r7
 8012920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012924:	4770      	bx	lr

08012926 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *        Defines the event handler interface for GestureEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt) { }
 8012926:	b480      	push	{r7}
 8012928:	b083      	sub	sp, #12
 801292a:	af00      	add	r7, sp, #0
 801292c:	6078      	str	r0, [r7, #4]
 801292e:	6039      	str	r1, [r7, #0]
 8012930:	bf00      	nop
 8012932:	370c      	adds	r7, #12
 8012934:	46bd      	mov	sp, r7
 8012936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801293a:	4770      	bx	lr

0801293c <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *        Defines the event handler interface for DragEvents. The event is only received if
     *        the drawable is touchable.
     *
     * @param evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt) { }
 801293c:	b480      	push	{r7}
 801293e:	b083      	sub	sp, #12
 8012940:	af00      	add	r7, sp, #0
 8012942:	6078      	str	r0, [r7, #4]
 8012944:	6039      	str	r1, [r7, #0]
 8012946:	bf00      	nop
 8012948:	370c      	adds	r7, #12
 801294a:	46bd      	mov	sp, r7
 801294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012950:	4770      	bx	lr

08012952 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *        Called periodically by the framework if the Drawable instance has subscribed to
     *        timer ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent() { }
 8012952:	b480      	push	{r7}
 8012954:	b083      	sub	sp, #12
 8012956:	af00      	add	r7, sp, #0
 8012958:	6078      	str	r0, [r7, #4]
 801295a:	bf00      	nop
 801295c:	370c      	adds	r7, #12
 801295e:	46bd      	mov	sp, r7
 8012960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012964:	4770      	bx	lr

08012966 <_ZN8touchgfx8Drawable10setVisibleEb>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param vis true if this Drawable should be visible. By default, drawables are visible unless
     *            this function has been called with false as argument.
     */
    void setVisible(bool vis)
 8012966:	b480      	push	{r7}
 8012968:	b083      	sub	sp, #12
 801296a:	af00      	add	r7, sp, #0
 801296c:	6078      	str	r0, [r7, #4]
 801296e:	460b      	mov	r3, r1
 8012970:	70fb      	strb	r3, [r7, #3]
    {
        visible = vis;
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	78fa      	ldrb	r2, [r7, #3]
 8012976:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 801297a:	bf00      	nop
 801297c:	370c      	adds	r7, #12
 801297e:	46bd      	mov	sp, r7
 8012980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012984:	4770      	bx	lr

08012986 <_ZN8touchgfx8Drawable12setTouchableEb>:
     *
     *        Controls whether this Drawable receives touch events or not.
     *
     * @param touch If true  it will receive touch events, if false it will not.
     */
    void setTouchable(bool touch)
 8012986:	b480      	push	{r7}
 8012988:	b083      	sub	sp, #12
 801298a:	af00      	add	r7, sp, #0
 801298c:	6078      	str	r0, [r7, #4]
 801298e:	460b      	mov	r3, r1
 8012990:	70fb      	strb	r3, [r7, #3]
    {
        touchable = touch;
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	78fa      	ldrb	r2, [r7, #3]
 8012996:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 801299a:	bf00      	nop
 801299c:	370c      	adds	r7, #12
 801299e:	46bd      	mov	sp, r7
 80129a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129a4:	4770      	bx	lr

080129a6 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     * @return true if the Drawable is visible.
     * @return True if visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 80129a6:	b480      	push	{r7}
 80129a8:	b083      	sub	sp, #12
 80129aa:	af00      	add	r7, sp, #0
 80129ac:	6078      	str	r0, [r7, #4]
    {
        return visible;
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 80129b4:	4618      	mov	r0, r3
 80129b6:	370c      	adds	r7, #12
 80129b8:	46bd      	mov	sp, r7
 80129ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129be:	4770      	bx	lr

080129c0 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 80129c0:	b480      	push	{r7}
 80129c2:	b083      	sub	sp, #12
 80129c4:	af00      	add	r7, sp, #0
 80129c6:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 80129ce:	4618      	mov	r0, r3
 80129d0:	370c      	adds	r7, #12
 80129d2:	46bd      	mov	sp, r7
 80129d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129d8:	4770      	bx	lr

080129da <_ZN8touchgfx8Drawable6moveToEss>:
     * @note Will redraw the appropriate areas of the screen.
     *
     * @param x The absolute position to move to.
     * @param y The absolute position to move to.
     */
    virtual void moveTo(int16_t x, int16_t y)
 80129da:	b580      	push	{r7, lr}
 80129dc:	b082      	sub	sp, #8
 80129de:	af00      	add	r7, sp, #0
 80129e0:	6078      	str	r0, [r7, #4]
 80129e2:	460b      	mov	r3, r1
 80129e4:	807b      	strh	r3, [r7, #2]
 80129e6:	4613      	mov	r3, r2
 80129e8:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	3354      	adds	r3, #84	; 0x54
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	8879      	ldrh	r1, [r7, #2]
 80129f4:	687a      	ldr	r2, [r7, #4]
 80129f6:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80129fa:	b292      	uxth	r2, r2
 80129fc:	1a8a      	subs	r2, r1, r2
 80129fe:	b292      	uxth	r2, r2
 8012a00:	b210      	sxth	r0, r2
 8012a02:	8839      	ldrh	r1, [r7, #0]
 8012a04:	687a      	ldr	r2, [r7, #4]
 8012a06:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8012a0a:	b292      	uxth	r2, r2
 8012a0c:	1a8a      	subs	r2, r1, r2
 8012a0e:	b292      	uxth	r2, r2
 8012a10:	b212      	sxth	r2, r2
 8012a12:	4601      	mov	r1, r0
 8012a14:	6878      	ldr	r0, [r7, #4]
 8012a16:	4798      	blx	r3
    }
 8012a18:	bf00      	nop
 8012a1a:	3708      	adds	r7, #8
 8012a1c:	46bd      	mov	sp, r7
 8012a1e:	bd80      	pop	{r7, pc}

08012a20 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     *        Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8012a20:	b480      	push	{r7}
 8012a22:	b083      	sub	sp, #12
 8012a24:	af00      	add	r7, sp, #0
 8012a26:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012a2e:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012a36:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012a3e:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8012a40:	bf00      	nop
 8012a42:	370c      	adds	r7, #12
 8012a44:	46bd      	mov	sp, r7
 8012a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a4a:	4770      	bx	lr

08012a4c <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     *
     * @param invalidatedArea              Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8012a4c:	b580      	push	{r7, lr}
 8012a4e:	b084      	sub	sp, #16
 8012a50:	af00      	add	r7, sp, #0
 8012a52:	60f8      	str	r0, [r7, #12]
 8012a54:	60b9      	str	r1, [r7, #8]
 8012a56:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 8012a58:	68f8      	ldr	r0, [r7, #12]
 8012a5a:	f7ff ffe1 	bl	8012a20 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	681a      	ldr	r2, [r3, #0]
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	68fa      	ldr	r2, [r7, #12]
 8012a6a:	601a      	str	r2, [r3, #0]
    }
 8012a6c:	bf00      	nop
 8012a6e:	3710      	adds	r7, #16
 8012a70:	46bd      	mov	sp, r7
 8012a72:	bd80      	pop	{r7, pc}

08012a74 <_ZN8touchgfx9ContainerC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Container() : Drawable(),
 8012a74:	b580      	push	{r7, lr}
 8012a76:	b082      	sub	sp, #8
 8012a78:	af00      	add	r7, sp, #0
 8012a7a:	6078      	str	r0, [r7, #4]
        firstChild(0)
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	4618      	mov	r0, r3
 8012a80:	f7ff fe94 	bl	80127ac <_ZN8touchgfx8DrawableC1Ev>
 8012a84:	4a05      	ldr	r2, [pc, #20]	; (8012a9c <_ZN8touchgfx9ContainerC1Ev+0x28>)
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	601a      	str	r2, [r3, #0]
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	2200      	movs	r2, #0
 8012a8e:	629a      	str	r2, [r3, #40]	; 0x28
    {
    }
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	4618      	mov	r0, r3
 8012a94:	3708      	adds	r7, #8
 8012a96:	46bd      	mov	sp, r7
 8012a98:	bd80      	pop	{r7, pc}
 8012a9a:	bf00      	nop
 8012a9c:	0802da48 	.word	0x0802da48

08012aa0 <_ZN8touchgfx9ContainerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Container() { }
 8012aa0:	b580      	push	{r7, lr}
 8012aa2:	b082      	sub	sp, #8
 8012aa4:	af00      	add	r7, sp, #0
 8012aa6:	6078      	str	r0, [r7, #4]
 8012aa8:	4a05      	ldr	r2, [pc, #20]	; (8012ac0 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	601a      	str	r2, [r3, #0]
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	f7ff fea9 	bl	8012808 <_ZN8touchgfx8DrawableD1Ev>
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	4618      	mov	r0, r3
 8012aba:	3708      	adds	r7, #8
 8012abc:	46bd      	mov	sp, r7
 8012abe:	bd80      	pop	{r7, pc}
 8012ac0:	0802da48 	.word	0x0802da48

08012ac4 <_ZN8touchgfx9ContainerD0Ev>:
 8012ac4:	b580      	push	{r7, lr}
 8012ac6:	b082      	sub	sp, #8
 8012ac8:	af00      	add	r7, sp, #0
 8012aca:	6078      	str	r0, [r7, #4]
 8012acc:	6878      	ldr	r0, [r7, #4]
 8012ace:	f7ff ffe7 	bl	8012aa0 <_ZN8touchgfx9ContainerD1Ev>
 8012ad2:	212c      	movs	r1, #44	; 0x2c
 8012ad4:	6878      	ldr	r0, [r7, #4]
 8012ad6:	f017 fe28 	bl	802a72a <_ZdlPvj>
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	4618      	mov	r0, r3
 8012ade:	3708      	adds	r7, #8
 8012ae0:	46bd      	mov	sp, r7
 8012ae2:	bd80      	pop	{r7, pc}

08012ae4 <_ZN8touchgfx6ScreenD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Screen() { }
 8012ae4:	b580      	push	{r7, lr}
 8012ae6:	b082      	sub	sp, #8
 8012ae8:	af00      	add	r7, sp, #0
 8012aea:	6078      	str	r0, [r7, #4]
 8012aec:	4a06      	ldr	r2, [pc, #24]	; (8012b08 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	601a      	str	r2, [r3, #0]
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	3304      	adds	r3, #4
 8012af6:	4618      	mov	r0, r3
 8012af8:	f7ff ffd2 	bl	8012aa0 <_ZN8touchgfx9ContainerD1Ev>
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	4618      	mov	r0, r3
 8012b00:	3708      	adds	r7, #8
 8012b02:	46bd      	mov	sp, r7
 8012b04:	bd80      	pop	{r7, pc}
 8012b06:	bf00      	nop
 8012b08:	0802ef5c 	.word	0x0802ef5c

08012b0c <_ZN8touchgfx6ScreenD0Ev>:
 8012b0c:	b580      	push	{r7, lr}
 8012b0e:	b082      	sub	sp, #8
 8012b10:	af00      	add	r7, sp, #0
 8012b12:	6078      	str	r0, [r7, #4]
 8012b14:	6878      	ldr	r0, [r7, #4]
 8012b16:	f7ff ffe5 	bl	8012ae4 <_ZN8touchgfx6ScreenD1Ev>
 8012b1a:	213c      	movs	r1, #60	; 0x3c
 8012b1c:	6878      	ldr	r0, [r7, #4]
 8012b1e:	f017 fe04 	bl	802a72a <_ZdlPvj>
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	4618      	mov	r0, r3
 8012b26:	3708      	adds	r7, #8
 8012b28:	46bd      	mov	sp, r7
 8012b2a:	bd80      	pop	{r7, pc}

08012b2c <_ZN8touchgfx6Screen11setupScreenEv>:
     *        Base version does nothing, but place any screen specific initialization code in
     *        an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void setupScreen() { }
 8012b2c:	b480      	push	{r7}
 8012b2e:	b083      	sub	sp, #12
 8012b30:	af00      	add	r7, sp, #0
 8012b32:	6078      	str	r0, [r7, #4]
 8012b34:	bf00      	nop
 8012b36:	370c      	adds	r7, #12
 8012b38:	46bd      	mov	sp, r7
 8012b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b3e:	4770      	bx	lr

08012b40 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *        Base version does nothing, but override to do screen specific initialization code
     *        that has to be done after the transition to the screen.
     *
     * @see touchgfx::Application::handleTick()
     */
    virtual void afterTransition() { }
 8012b40:	b480      	push	{r7}
 8012b42:	b083      	sub	sp, #12
 8012b44:	af00      	add	r7, sp, #0
 8012b46:	6078      	str	r0, [r7, #4]
 8012b48:	bf00      	nop
 8012b4a:	370c      	adds	r7, #12
 8012b4c:	46bd      	mov	sp, r7
 8012b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b52:	4770      	bx	lr

08012b54 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *        displayed. Base version does nothing, but place any screen specific cleanup code
     *        in an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void tearDownScreen() { }
 8012b54:	b480      	push	{r7}
 8012b56:	b083      	sub	sp, #12
 8012b58:	af00      	add	r7, sp, #0
 8012b5a:	6078      	str	r0, [r7, #4]
 8012b5c:	bf00      	nop
 8012b5e:	370c      	adds	r7, #12
 8012b60:	46bd      	mov	sp, r7
 8012b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b66:	4770      	bx	lr

08012b68 <_ZN8touchgfx6Screen15handleTickEventEv>:
     *        Application::TICK_INTERVAL_MS.
     *
     *        Called by the Application on the current screen with a frequency of
     *        Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8012b68:	b480      	push	{r7}
 8012b6a:	b083      	sub	sp, #12
 8012b6c:	af00      	add	r7, sp, #0
 8012b6e:	6078      	str	r0, [r7, #4]
    {
    }
 8012b70:	bf00      	nop
 8012b72:	370c      	adds	r7, #12
 8012b74:	46bd      	mov	sp, r7
 8012b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b7a:	4770      	bx	lr

08012b7c <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *        Called by the Application on the reception of a "key", the meaning of which is
     *        platform/application specific. Default implementation does nothing.
     *
     * @param key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8012b7c:	b480      	push	{r7}
 8012b7e:	b083      	sub	sp, #12
 8012b80:	af00      	add	r7, sp, #0
 8012b82:	6078      	str	r0, [r7, #4]
 8012b84:	460b      	mov	r3, r1
 8012b86:	70fb      	strb	r3, [r7, #3]
    {
    }
 8012b88:	bf00      	nop
 8012b8a:	370c      	adds	r7, #12
 8012b8c:	46bd      	mov	sp, r7
 8012b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b92:	4770      	bx	lr

08012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     *
     * @param [in] d The Drawable to add.
     */
    void add(Drawable& d)
 8012b94:	b580      	push	{r7, lr}
 8012b96:	b082      	sub	sp, #8
 8012b98:	af00      	add	r7, sp, #0
 8012b9a:	6078      	str	r0, [r7, #4]
 8012b9c:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	3304      	adds	r3, #4
 8012ba2:	6839      	ldr	r1, [r7, #0]
 8012ba4:	4618      	mov	r0, r3
 8012ba6:	f008 fa3d 	bl	801b024 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8012baa:	bf00      	nop
 8012bac:	3708      	adds	r7, #8
 8012bae:	46bd      	mov	sp, r7
 8012bb0:	bd80      	pop	{r7, pc}
	...

08012bb4 <_ZN8touchgfx6WidgetC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Widget() : Drawable() { }
 8012bb4:	b580      	push	{r7, lr}
 8012bb6:	b082      	sub	sp, #8
 8012bb8:	af00      	add	r7, sp, #0
 8012bba:	6078      	str	r0, [r7, #4]
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	4618      	mov	r0, r3
 8012bc0:	f7ff fdf4 	bl	80127ac <_ZN8touchgfx8DrawableC1Ev>
 8012bc4:	4a03      	ldr	r2, [pc, #12]	; (8012bd4 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	601a      	str	r2, [r3, #0]
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	4618      	mov	r0, r3
 8012bce:	3708      	adds	r7, #8
 8012bd0:	46bd      	mov	sp, r7
 8012bd2:	bd80      	pop	{r7, pc}
 8012bd4:	0802cac4 	.word	0x0802cac4

08012bd8 <_ZN8touchgfx6WidgetD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Widget() { }
 8012bd8:	b580      	push	{r7, lr}
 8012bda:	b082      	sub	sp, #8
 8012bdc:	af00      	add	r7, sp, #0
 8012bde:	6078      	str	r0, [r7, #4]
 8012be0:	4a05      	ldr	r2, [pc, #20]	; (8012bf8 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	601a      	str	r2, [r3, #0]
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	4618      	mov	r0, r3
 8012bea:	f7ff fe0d 	bl	8012808 <_ZN8touchgfx8DrawableD1Ev>
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	4618      	mov	r0, r3
 8012bf2:	3708      	adds	r7, #8
 8012bf4:	46bd      	mov	sp, r7
 8012bf6:	bd80      	pop	{r7, pc}
 8012bf8:	0802cac4 	.word	0x0802cac4

08012bfc <_ZN8touchgfx6WidgetD0Ev>:
 8012bfc:	b580      	push	{r7, lr}
 8012bfe:	b082      	sub	sp, #8
 8012c00:	af00      	add	r7, sp, #0
 8012c02:	6078      	str	r0, [r7, #4]
 8012c04:	6878      	ldr	r0, [r7, #4]
 8012c06:	f7ff ffe7 	bl	8012bd8 <_ZN8touchgfx6WidgetD1Ev>
 8012c0a:	2128      	movs	r1, #40	; 0x28
 8012c0c:	6878      	ldr	r0, [r7, #4]
 8012c0e:	f017 fd8c 	bl	802a72a <_ZdlPvj>
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	4618      	mov	r0, r3
 8012c16:	3708      	adds	r7, #8
 8012c18:	46bd      	mov	sp, r7
 8012c1a:	bd80      	pop	{r7, pc}

08012c1c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param x          The point of intersection expressed in coordinates relative to the parent.
     * @param y          The y coordinate.
     * @param [out] last Result will be placed here.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 8012c1c:	b580      	push	{r7, lr}
 8012c1e:	b084      	sub	sp, #16
 8012c20:	af00      	add	r7, sp, #0
 8012c22:	60f8      	str	r0, [r7, #12]
 8012c24:	607b      	str	r3, [r7, #4]
 8012c26:	460b      	mov	r3, r1
 8012c28:	817b      	strh	r3, [r7, #10]
 8012c2a:	4613      	mov	r3, r2
 8012c2c:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	4618      	mov	r0, r3
 8012c32:	f7ff feb8 	bl	80129a6 <_ZNK8touchgfx8Drawable9isVisibleEv>
 8012c36:	4603      	mov	r3, r0
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d008      	beq.n	8012c4e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	4618      	mov	r0, r3
 8012c40:	f7ff febe 	bl	80129c0 <_ZNK8touchgfx8Drawable11isTouchableEv>
 8012c44:	4603      	mov	r3, r0
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d001      	beq.n	8012c4e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8012c4a:	2301      	movs	r3, #1
 8012c4c:	e000      	b.n	8012c50 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8012c4e:	2300      	movs	r3, #0
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d002      	beq.n	8012c5a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8012c54:	68fa      	ldr	r2, [r7, #12]
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	601a      	str	r2, [r3, #0]
        }
    }
 8012c5a:	bf00      	nop
 8012c5c:	3710      	adds	r7, #16
 8012c5e:	46bd      	mov	sp, r7
 8012c60:	bd80      	pop	{r7, pc}
	...

08012c64 <_ZN8touchgfx3BoxC1Ev>:
     *
     * @brief Constructor.
     *
     *        Constructs a new Box with a default alpha value of 255 (solid)
     */
    Box() : Widget(), alpha(255), color(0), reportAsSolid(false)
 8012c64:	b580      	push	{r7, lr}
 8012c66:	b082      	sub	sp, #8
 8012c68:	af00      	add	r7, sp, #0
 8012c6a:	6078      	str	r0, [r7, #4]
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	4618      	mov	r0, r3
 8012c70:	f7ff ffa0 	bl	8012bb4 <_ZN8touchgfx6WidgetC1Ev>
 8012c74:	4a0a      	ldr	r2, [pc, #40]	; (8012ca0 <_ZN8touchgfx3BoxC1Ev+0x3c>)
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	601a      	str	r2, [r3, #0]
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	22ff      	movs	r2, #255	; 0xff
 8012c7e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	3328      	adds	r3, #40	; 0x28
 8012c86:	2100      	movs	r1, #0
 8012c88:	4618      	mov	r0, r3
 8012c8a:	f7ff fd2c 	bl	80126e6 <_ZN8touchgfx9colortypeC1Em>
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	2200      	movs	r2, #0
 8012c92:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
    }
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	4618      	mov	r0, r3
 8012c9a:	3708      	adds	r7, #8
 8012c9c:	46bd      	mov	sp, r7
 8012c9e:	bd80      	pop	{r7, pc}
 8012ca0:	0802e85c 	.word	0x0802e85c

08012ca4 <_ZN8touchgfx3BoxD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Box() {}
 8012ca4:	b580      	push	{r7, lr}
 8012ca6:	b082      	sub	sp, #8
 8012ca8:	af00      	add	r7, sp, #0
 8012caa:	6078      	str	r0, [r7, #4]
 8012cac:	4a05      	ldr	r2, [pc, #20]	; (8012cc4 <_ZN8touchgfx3BoxD1Ev+0x20>)
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	601a      	str	r2, [r3, #0]
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	4618      	mov	r0, r3
 8012cb6:	f7ff ff8f 	bl	8012bd8 <_ZN8touchgfx6WidgetD1Ev>
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	4618      	mov	r0, r3
 8012cbe:	3708      	adds	r7, #8
 8012cc0:	46bd      	mov	sp, r7
 8012cc2:	bd80      	pop	{r7, pc}
 8012cc4:	0802e85c 	.word	0x0802e85c

08012cc8 <_ZN8touchgfx3BoxD0Ev>:
 8012cc8:	b580      	push	{r7, lr}
 8012cca:	b082      	sub	sp, #8
 8012ccc:	af00      	add	r7, sp, #0
 8012cce:	6078      	str	r0, [r7, #4]
 8012cd0:	6878      	ldr	r0, [r7, #4]
 8012cd2:	f7ff ffe7 	bl	8012ca4 <_ZN8touchgfx3BoxD1Ev>
 8012cd6:	2130      	movs	r1, #48	; 0x30
 8012cd8:	6878      	ldr	r0, [r7, #4]
 8012cda:	f017 fd26 	bl	802a72a <_ZdlPvj>
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	3708      	adds	r7, #8
 8012ce4:	46bd      	mov	sp, r7
 8012ce6:	bd80      	pop	{r7, pc}

08012ce8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     *        Sets the color of the rectangle.
     *
     * @param color The color of the box.
     */
    void setColor(colortype color)
 8012ce8:	b480      	push	{r7}
 8012cea:	b083      	sub	sp, #12
 8012cec:	af00      	add	r7, sp, #0
 8012cee:	6078      	str	r0, [r7, #4]
 8012cf0:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	683a      	ldr	r2, [r7, #0]
 8012cf6:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8012cf8:	bf00      	nop
 8012cfa:	370c      	adds	r7, #12
 8012cfc:	46bd      	mov	sp, r7
 8012cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d02:	4770      	bx	lr

08012d04 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID) : typedTextId(id)
 8012d04:	b480      	push	{r7}
 8012d06:	b083      	sub	sp, #12
 8012d08:	af00      	add	r7, sp, #0
 8012d0a:	6078      	str	r0, [r7, #4]
 8012d0c:	460b      	mov	r3, r1
 8012d0e:	807b      	strh	r3, [r7, #2]
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	887a      	ldrh	r2, [r7, #2]
 8012d14:	801a      	strh	r2, [r3, #0]
    }
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	4618      	mov	r0, r3
 8012d1a:	370c      	adds	r7, #12
 8012d1c:	46bd      	mov	sp, r7
 8012d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d22:	4770      	bx	lr

08012d24 <_ZNK8touchgfx9TypedText7getTextEv>:
    const Unicode::UnicodeChar* getText() const
 8012d24:	b580      	push	{r7, lr}
 8012d26:	b082      	sub	sp, #8
 8012d28:	af00      	add	r7, sp, #0
 8012d2a:	6078      	str	r0, [r7, #4]
        assertValid();
 8012d2c:	6878      	ldr	r0, [r7, #4]
 8012d2e:	f7fd fc5b 	bl	80105e8 <_ZNK8touchgfx9TypedText11assertValidEv>
        return texts->getText(typedTextId);
 8012d32:	4b06      	ldr	r3, [pc, #24]	; (8012d4c <_ZNK8touchgfx9TypedText7getTextEv+0x28>)
 8012d34:	681a      	ldr	r2, [r3, #0]
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	881b      	ldrh	r3, [r3, #0]
 8012d3a:	4619      	mov	r1, r3
 8012d3c:	4610      	mov	r0, r2
 8012d3e:	f003 fe81 	bl	8016a44 <_ZNK8touchgfx5Texts7getTextEt>
 8012d42:	4603      	mov	r3, r0
    }
 8012d44:	4618      	mov	r0, r3
 8012d46:	3708      	adds	r7, #8
 8012d48:	46bd      	mov	sp, r7
 8012d4a:	bd80      	pop	{r7, pc}
 8012d4c:	2000c004 	.word	0x2000c004

08012d50 <_ZN8touchgfx8TextAreaC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Create an empty TextArea. Default color is black.
     */
    TextArea()
 8012d50:	b580      	push	{r7, lr}
 8012d52:	b082      	sub	sp, #8
 8012d54:	af00      	add	r7, sp, #0
 8012d56:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	4618      	mov	r0, r3
 8012d5c:	f7ff ff2a 	bl	8012bb4 <_ZN8touchgfx6WidgetC1Ev>
 8012d60:	4a13      	ldr	r2, [pc, #76]	; (8012db0 <_ZN8touchgfx8TextAreaC1Ev+0x60>)
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	601a      	str	r2, [r3, #0]
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	3326      	adds	r3, #38	; 0x26
 8012d6a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012d6e:	4618      	mov	r0, r3
 8012d70:	f7ff ffc8 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	3328      	adds	r3, #40	; 0x28
 8012d78:	2100      	movs	r1, #0
 8012d7a:	4618      	mov	r0, r3
 8012d7c:	f7ff fcb3 	bl	80126e6 <_ZN8touchgfx9colortypeC1Em>
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	2200      	movs	r2, #0
 8012d84:	859a      	strh	r2, [r3, #44]	; 0x2c
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	22ff      	movs	r2, #255	; 0xff
 8012d8a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	2200      	movs	r2, #0
 8012d92:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	2200      	movs	r2, #0
 8012d9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	2200      	movs	r2, #0
 8012da2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    {
    }
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	4618      	mov	r0, r3
 8012daa:	3708      	adds	r7, #8
 8012dac:	46bd      	mov	sp, r7
 8012dae:	bd80      	pop	{r7, pc}
 8012db0:	0802e7e0 	.word	0x0802e7e0

08012db4 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
     *
     *        Gets solid rectangle.
     *
     * @return the largest solid rectangle for this widget. For a TextArea, this is an empty area.
     */
    virtual Rect getSolidRect() const
 8012db4:	b580      	push	{r7, lr}
 8012db6:	b084      	sub	sp, #16
 8012db8:	af02      	add	r7, sp, #8
 8012dba:	6078      	str	r0, [r7, #4]
 8012dbc:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, 0, 0);
 8012dbe:	2300      	movs	r3, #0
 8012dc0:	9300      	str	r3, [sp, #0]
 8012dc2:	2300      	movs	r3, #0
 8012dc4:	2200      	movs	r2, #0
 8012dc6:	2100      	movs	r1, #0
 8012dc8:	6878      	ldr	r0, [r7, #4]
 8012dca:	f7ff fcb2 	bl	8012732 <_ZN8touchgfx4RectC1Essss>
    }
 8012dce:	6878      	ldr	r0, [r7, #4]
 8012dd0:	3708      	adds	r7, #8
 8012dd2:	46bd      	mov	sp, r7
 8012dd4:	bd80      	pop	{r7, pc}

08012dd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>:
     *
     *        Sets the color of the text.
     *
     * @param color The color to use.
     */
    inline void setColor(colortype color)
 8012dd6:	b480      	push	{r7}
 8012dd8:	b083      	sub	sp, #12
 8012dda:	af00      	add	r7, sp, #0
 8012ddc:	6078      	str	r0, [r7, #4]
 8012dde:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	683a      	ldr	r2, [r7, #0]
 8012de4:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8012de6:	bf00      	nop
 8012de8:	370c      	adds	r7, #12
 8012dea:	46bd      	mov	sp, r7
 8012dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012df0:	4770      	bx	lr

08012df2 <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *        changes you have to set the baseline again. Note that setTypedText must be called
     *        prior to setting the baseline.
     *
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 8012df2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012df4:	b085      	sub	sp, #20
 8012df6:	af00      	add	r7, sp, #0
 8012df8:	6078      	str	r0, [r7, #4]
 8012dfa:	460b      	mov	r3, r1
 8012dfc:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 8012dfe:	687e      	ldr	r6, [r7, #4]
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	3330      	adds	r3, #48	; 0x30
 8012e06:	681c      	ldr	r4, [r3, #0]
 8012e08:	887d      	ldrh	r5, [r7, #2]
 8012e0a:	6878      	ldr	r0, [r7, #4]
 8012e0c:	f000 f845 	bl	8012e9a <_ZNK8touchgfx8TextArea12getTypedTextEv>
 8012e10:	4603      	mov	r3, r0
 8012e12:	81bb      	strh	r3, [r7, #12]
 8012e14:	f107 030c 	add.w	r3, r7, #12
 8012e18:	4618      	mov	r0, r3
 8012e1a:	f7fd fbb1 	bl	8010580 <_ZNK8touchgfx9TypedText7getFontEv>
 8012e1e:	4602      	mov	r2, r0
 8012e20:	6813      	ldr	r3, [r2, #0]
 8012e22:	332c      	adds	r3, #44	; 0x2c
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	4610      	mov	r0, r2
 8012e28:	4798      	blx	r3
 8012e2a:	4603      	mov	r3, r0
 8012e2c:	1aeb      	subs	r3, r5, r3
 8012e2e:	b29b      	uxth	r3, r3
 8012e30:	b21b      	sxth	r3, r3
 8012e32:	4619      	mov	r1, r3
 8012e34:	4630      	mov	r0, r6
 8012e36:	47a0      	blx	r4
    }
 8012e38:	bf00      	nop
 8012e3a:	3714      	adds	r7, #20
 8012e3c:	46bd      	mov	sp, r7
 8012e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012e40 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *        coordinate of the TextArea.
     *
     * @param x         The x coordinate of the TextArea.
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8012e40:	b580      	push	{r7, lr}
 8012e42:	b082      	sub	sp, #8
 8012e44:	af00      	add	r7, sp, #0
 8012e46:	6078      	str	r0, [r7, #4]
 8012e48:	460b      	mov	r3, r1
 8012e4a:	807b      	strh	r3, [r7, #2]
 8012e4c:	4613      	mov	r3, r2
 8012e4e:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8012e50:	687a      	ldr	r2, [r7, #4]
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	681b      	ldr	r3, [r3, #0]
 8012e56:	332c      	adds	r3, #44	; 0x2c
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8012e5e:	4610      	mov	r0, r2
 8012e60:	4798      	blx	r3
        setBaselineY(baselineY);
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	3360      	adds	r3, #96	; 0x60
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	f9b7 2000 	ldrsh.w	r2, [r7]
 8012e6e:	4611      	mov	r1, r2
 8012e70:	6878      	ldr	r0, [r7, #4]
 8012e72:	4798      	blx	r3
    }
 8012e74:	bf00      	nop
 8012e76:	3708      	adds	r7, #8
 8012e78:	46bd      	mov	sp, r7
 8012e7a:	bd80      	pop	{r7, pc}

08012e7c <_ZN8touchgfx8TextArea14setLinespacingEs>:
     *
     *        Sets the line spacing of the TextArea.
     *
     * @param space The line spacing of use in the TextArea.
     */
    inline void setLinespacing(int16_t space)
 8012e7c:	b480      	push	{r7}
 8012e7e:	b083      	sub	sp, #12
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	6078      	str	r0, [r7, #4]
 8012e84:	460b      	mov	r3, r1
 8012e86:	807b      	strh	r3, [r7, #2]
    {
        linespace = space;
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	887a      	ldrh	r2, [r7, #2]
 8012e8c:	859a      	strh	r2, [r3, #44]	; 0x2c
    }
 8012e8e:	bf00      	nop
 8012e90:	370c      	adds	r7, #12
 8012e92:	46bd      	mov	sp, r7
 8012e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e98:	4770      	bx	lr

08012e9a <_ZNK8touchgfx8TextArea12getTypedTextEv>:
     *
     *        Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    TypedText getTypedText() const
 8012e9a:	b480      	push	{r7}
 8012e9c:	b083      	sub	sp, #12
 8012e9e:	af00      	add	r7, sp, #0
 8012ea0:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    }
 8012ea6:	4618      	mov	r0, r3
 8012ea8:	370c      	adds	r7, #12
 8012eaa:	46bd      	mov	sp, r7
 8012eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eb0:	4770      	bx	lr
	...

08012eb4 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8012eb4:	b580      	push	{r7, lr}
 8012eb6:	b082      	sub	sp, #8
 8012eb8:	af00      	add	r7, sp, #0
 8012eba:	6078      	str	r0, [r7, #4]
 8012ebc:	4a05      	ldr	r2, [pc, #20]	; (8012ed4 <_ZN8touchgfx8TextAreaD1Ev+0x20>)
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	601a      	str	r2, [r3, #0]
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	f7ff fe87 	bl	8012bd8 <_ZN8touchgfx6WidgetD1Ev>
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	4618      	mov	r0, r3
 8012ece:	3708      	adds	r7, #8
 8012ed0:	46bd      	mov	sp, r7
 8012ed2:	bd80      	pop	{r7, pc}
 8012ed4:	0802e7e0 	.word	0x0802e7e0

08012ed8 <_ZN8touchgfx8TextAreaD0Ev>:
 8012ed8:	b580      	push	{r7, lr}
 8012eda:	b082      	sub	sp, #8
 8012edc:	af00      	add	r7, sp, #0
 8012ede:	6078      	str	r0, [r7, #4]
 8012ee0:	6878      	ldr	r0, [r7, #4]
 8012ee2:	f7ff ffe7 	bl	8012eb4 <_ZN8touchgfx8TextAreaD1Ev>
 8012ee6:	2134      	movs	r1, #52	; 0x34
 8012ee8:	6878      	ldr	r0, [r7, #4]
 8012eea:	f017 fc1e 	bl	802a72a <_ZdlPvj>
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	4618      	mov	r0, r3
 8012ef2:	3708      	adds	r7, #8
 8012ef4:	46bd      	mov	sp, r7
 8012ef6:	bd80      	pop	{r7, pc}

08012ef8 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithWildcardBase()
 8012ef8:	b580      	push	{r7, lr}
 8012efa:	b082      	sub	sp, #8
 8012efc:	af00      	add	r7, sp, #0
 8012efe:	6078      	str	r0, [r7, #4]
        : TextArea()
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	4618      	mov	r0, r3
 8012f04:	f7ff ff24 	bl	8012d50 <_ZN8touchgfx8TextAreaC1Ev>
 8012f08:	4a03      	ldr	r2, [pc, #12]	; (8012f18 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	601a      	str	r2, [r3, #0]
    {
    }
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	4618      	mov	r0, r3
 8012f12:	3708      	adds	r7, #8
 8012f14:	46bd      	mov	sp, r7
 8012f16:	bd80      	pop	{r7, pc}
 8012f18:	0802ca48 	.word	0x0802ca48

08012f1c <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 8012f1c:	b580      	push	{r7, lr}
 8012f1e:	b082      	sub	sp, #8
 8012f20:	af00      	add	r7, sp, #0
 8012f22:	6078      	str	r0, [r7, #4]
 8012f24:	4a05      	ldr	r2, [pc, #20]	; (8012f3c <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	601a      	str	r2, [r3, #0]
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	4618      	mov	r0, r3
 8012f2e:	f7ff ffc1 	bl	8012eb4 <_ZN8touchgfx8TextAreaD1Ev>
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	4618      	mov	r0, r3
 8012f36:	3708      	adds	r7, #8
 8012f38:	46bd      	mov	sp, r7
 8012f3a:	bd80      	pop	{r7, pc}
 8012f3c:	0802ca48 	.word	0x0802ca48

08012f40 <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 8012f40:	b580      	push	{r7, lr}
 8012f42:	b082      	sub	sp, #8
 8012f44:	af00      	add	r7, sp, #0
 8012f46:	6078      	str	r0, [r7, #4]
 8012f48:	6878      	ldr	r0, [r7, #4]
 8012f4a:	f7ff ffe7 	bl	8012f1c <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 8012f4e:	2134      	movs	r1, #52	; 0x34
 8012f50:	6878      	ldr	r0, [r7, #4]
 8012f52:	f017 fbea 	bl	802a72a <_ZdlPvj>
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	4618      	mov	r0, r3
 8012f5a:	3708      	adds	r7, #8
 8012f5c:	46bd      	mov	sp, r7
 8012f5e:	bd80      	pop	{r7, pc}

08012f60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithOneWildcard()
 8012f60:	b580      	push	{r7, lr}
 8012f62:	b082      	sub	sp, #8
 8012f64:	af00      	add	r7, sp, #0
 8012f66:	6078      	str	r0, [r7, #4]
        : TextAreaWithWildcardBase(), wildcard(0)
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	4618      	mov	r0, r3
 8012f6c:	f7ff ffc4 	bl	8012ef8 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 8012f70:	4a05      	ldr	r2, [pc, #20]	; (8012f88 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	601a      	str	r2, [r3, #0]
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	2200      	movs	r2, #0
 8012f7a:	635a      	str	r2, [r3, #52]	; 0x34
    {
    }
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	4618      	mov	r0, r3
 8012f80:	3708      	adds	r7, #8
 8012f82:	46bd      	mov	sp, r7
 8012f84:	bd80      	pop	{r7, pc}
 8012f86:	bf00      	nop
 8012f88:	0802e9ec 	.word	0x0802e9ec

08012f8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     *
     *        Sets the wildcard in the text.Must be a zero-terminated UnicodeChar array.
     *
     * @param value A pointer to the UnicodeChar to set the wildcard to.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 8012f8c:	b480      	push	{r7}
 8012f8e:	b083      	sub	sp, #12
 8012f90:	af00      	add	r7, sp, #0
 8012f92:	6078      	str	r0, [r7, #4]
 8012f94:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	683a      	ldr	r2, [r7, #0]
 8012f9a:	635a      	str	r2, [r3, #52]	; 0x34
    }
 8012f9c:	bf00      	nop
 8012f9e:	370c      	adds	r7, #12
 8012fa0:	46bd      	mov	sp, r7
 8012fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fa6:	4770      	bx	lr

08012fa8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *        Constructs a new Image with a default alpha value of 255 (solid) and a default
     *        Bitmap if none is specified.
     *
     * @param bmp The bitmap to display.
     */
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 8012fa8:	b580      	push	{r7, lr}
 8012faa:	b082      	sub	sp, #8
 8012fac:	af00      	add	r7, sp, #0
 8012fae:	6078      	str	r0, [r7, #4]
 8012fb0:	6039      	str	r1, [r7, #0]
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	4618      	mov	r0, r3
 8012fb6:	f7ff fdfd 	bl	8012bb4 <_ZN8touchgfx6WidgetC1Ev>
 8012fba:	4a0b      	ldr	r2, [pc, #44]	; (8012fe8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x40>)
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	601a      	str	r2, [r3, #0]
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	3326      	adds	r3, #38	; 0x26
 8012fc4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012fc8:	4618      	mov	r0, r3
 8012fca:	f7ff fbde 	bl	801278a <_ZN8touchgfx6BitmapC1Et>
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	22ff      	movs	r2, #255	; 0xff
 8012fd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        setBitmap(bmp);
 8012fd6:	6839      	ldr	r1, [r7, #0]
 8012fd8:	6878      	ldr	r0, [r7, #4]
 8012fda:	f00a faf5 	bl	801d5c8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	4618      	mov	r0, r3
 8012fe2:	3708      	adds	r7, #8
 8012fe4:	46bd      	mov	sp, r7
 8012fe6:	bd80      	pop	{r7, pc}
 8012fe8:	0802ead0 	.word	0x0802ead0

08012fec <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         *        Constructor from integer. No conversion is done - the integer is assumed to
         *        already be in Q5 format.
         *
         * @param i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i) : v(i) { }
 8012fec:	b480      	push	{r7}
 8012fee:	b083      	sub	sp, #12
 8012ff0:	af00      	add	r7, sp, #0
 8012ff2:	6078      	str	r0, [r7, #4]
 8012ff4:	6039      	str	r1, [r7, #0]
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	683a      	ldr	r2, [r7, #0]
 8012ffa:	601a      	str	r2, [r3, #0]
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	4618      	mov	r0, r3
 8013000:	370c      	adds	r7, #12
 8013002:	46bd      	mov	sp, r7
 8013004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013008:	4770      	bx	lr

0801300a <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
         *
         *        Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 801300a:	b480      	push	{r7}
 801300c:	b083      	sub	sp, #12
 801300e:	af00      	add	r7, sp, #0
 8013010:	6078      	str	r0, [r7, #4]
        {
            return v;
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	681b      	ldr	r3, [r3, #0]
        }
 8013016:	4618      	mov	r0, r3
 8013018:	370c      	adds	r7, #12
 801301a:	46bd      	mov	sp, r7
 801301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013020:	4770      	bx	lr

08013022 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>:
     *
     * @note The area containing the Line is not invalidated.
     *
     * @see updateLineWidth
     */
    void setLineWidth(CWRUtil::Q5 widthQ5)
 8013022:	b590      	push	{r4, r7, lr}
 8013024:	b083      	sub	sp, #12
 8013026:	af00      	add	r7, sp, #0
 8013028:	6078      	str	r0, [r7, #4]
 801302a:	6039      	str	r1, [r7, #0]
    {
        if (lineWidth == widthQ5)
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	3340      	adds	r3, #64	; 0x40
 8013030:	4618      	mov	r0, r3
 8013032:	f7ff ffea 	bl	801300a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8013036:	4604      	mov	r4, r0
 8013038:	463b      	mov	r3, r7
 801303a:	4618      	mov	r0, r3
 801303c:	f7ff ffe5 	bl	801300a <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8013040:	4603      	mov	r3, r0
 8013042:	429c      	cmp	r4, r3
 8013044:	bf0c      	ite	eq
 8013046:	2301      	moveq	r3, #1
 8013048:	2300      	movne	r3, #0
 801304a:	b2db      	uxtb	r3, r3
 801304c:	2b00      	cmp	r3, #0
 801304e:	d106      	bne.n	801305e <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3c>
        {
            return;
        }

        lineWidth = widthQ5;
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	683a      	ldr	r2, [r7, #0]
 8013054:	641a      	str	r2, [r3, #64]	; 0x40

        updateCachedShape();
 8013056:	6878      	ldr	r0, [r7, #4]
 8013058:	f009 fb4c 	bl	801c6f4 <_ZN8touchgfx4Line17updateCachedShapeEv>
 801305c:	e000      	b.n	8013060 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3e>
            return;
 801305e:	bf00      	nop
    }
 8013060:	370c      	adds	r7, #12
 8013062:	46bd      	mov	sp, r7
 8013064:	bd90      	pop	{r4, r7, pc}
	...

08013068 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>:
    AbstractPainterRGB888()
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
    }

    virtual ~AbstractPainterRGB888() {}
 8013068:	b580      	push	{r7, lr}
 801306a:	b082      	sub	sp, #8
 801306c:	af00      	add	r7, sp, #0
 801306e:	6078      	str	r0, [r7, #4]
 8013070:	4a05      	ldr	r2, [pc, #20]	; (8013088 <_ZN8touchgfx21AbstractPainterRGB888D1Ev+0x20>)
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	601a      	str	r2, [r3, #0]
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	4618      	mov	r0, r3
 801307a:	f009 f94f 	bl	801c31c <_ZN8touchgfx15AbstractPainterD1Ev>
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	4618      	mov	r0, r3
 8013082:	3708      	adds	r7, #8
 8013084:	46bd      	mov	sp, r7
 8013086:	bd80      	pop	{r7, pc}
 8013088:	0802e258 	.word	0x0802e258

0801308c <_ZN8touchgfx21AbstractPainterRGB888D0Ev>:
 801308c:	b580      	push	{r7, lr}
 801308e:	b082      	sub	sp, #8
 8013090:	af00      	add	r7, sp, #0
 8013092:	6078      	str	r0, [r7, #4]
 8013094:	6878      	ldr	r0, [r7, #4]
 8013096:	f7ff ffe7 	bl	8013068 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 801309a:	2114      	movs	r1, #20
 801309c:	6878      	ldr	r0, [r7, #4]
 801309e:	f017 fb44 	bl	802a72a <_ZdlPvj>
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	4618      	mov	r0, r3
 80130a6:	3708      	adds	r7, #8
 80130a8:	46bd      	mov	sp, r7
 80130aa:	bd80      	pop	{r7, pc}

080130ac <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 80130ac:	b580      	push	{r7, lr}
 80130ae:	b082      	sub	sp, #8
 80130b0:	af00      	add	r7, sp, #0
 80130b2:	6078      	str	r0, [r7, #4]
 80130b4:	4a05      	ldr	r2, [pc, #20]	; (80130cc <_ZN8touchgfx5ImageD1Ev+0x20>)
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	601a      	str	r2, [r3, #0]
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	4618      	mov	r0, r3
 80130be:	f7ff fd8b 	bl	8012bd8 <_ZN8touchgfx6WidgetD1Ev>
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	4618      	mov	r0, r3
 80130c6:	3708      	adds	r7, #8
 80130c8:	46bd      	mov	sp, r7
 80130ca:	bd80      	pop	{r7, pc}
 80130cc:	0802ead0 	.word	0x0802ead0

080130d0 <_ZN8touchgfx5ImageD0Ev>:
 80130d0:	b580      	push	{r7, lr}
 80130d2:	b082      	sub	sp, #8
 80130d4:	af00      	add	r7, sp, #0
 80130d6:	6078      	str	r0, [r7, #4]
 80130d8:	6878      	ldr	r0, [r7, #4]
 80130da:	f7ff ffe7 	bl	80130ac <_ZN8touchgfx5ImageD1Ev>
 80130de:	212c      	movs	r1, #44	; 0x2c
 80130e0:	6878      	ldr	r0, [r7, #4]
 80130e2:	f017 fb22 	bl	802a72a <_ZdlPvj>
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	4618      	mov	r0, r3
 80130ea:	3708      	adds	r7, #8
 80130ec:	46bd      	mov	sp, r7
 80130ee:	bd80      	pop	{r7, pc}

080130f0 <_ZN8touchgfx23AbstractButtonContainerC1Ev>:
    /**
     * @fn AbstractButtonContainer::AbstractButtonContainer()
     *
     * @brief Default constructor.
     */
    AbstractButtonContainer() : pressed(false), alpha(255), action(0)
 80130f0:	b580      	push	{r7, lr}
 80130f2:	b082      	sub	sp, #8
 80130f4:	af00      	add	r7, sp, #0
 80130f6:	6078      	str	r0, [r7, #4]
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	4618      	mov	r0, r3
 80130fc:	f7ff fcba 	bl	8012a74 <_ZN8touchgfx9ContainerC1Ev>
 8013100:	4a0b      	ldr	r2, [pc, #44]	; (8013130 <_ZN8touchgfx23AbstractButtonContainerC1Ev+0x40>)
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	601a      	str	r2, [r3, #0]
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	2200      	movs	r2, #0
 801310a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	22ff      	movs	r2, #255	; 0xff
 8013112:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	2200      	movs	r2, #0
 801311a:	631a      	str	r2, [r3, #48]	; 0x30
    {
        setTouchable(true);
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	2101      	movs	r1, #1
 8013120:	4618      	mov	r0, r3
 8013122:	f7ff fc30 	bl	8012986 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	4618      	mov	r0, r3
 801312a:	3708      	adds	r7, #8
 801312c:	46bd      	mov	sp, r7
 801312e:	bd80      	pop	{r7, pc}
 8013130:	0802c9b4 	.word	0x0802c9b4

08013134 <_ZN8touchgfx23AbstractButtonContainerD1Ev>:
    /**
     * @fn virtual AbstractButtonContainer::~AbstractButtonContainer()
     *
     * @brief Destructor.
     */
    virtual ~AbstractButtonContainer() {}
 8013134:	b580      	push	{r7, lr}
 8013136:	b082      	sub	sp, #8
 8013138:	af00      	add	r7, sp, #0
 801313a:	6078      	str	r0, [r7, #4]
 801313c:	4a05      	ldr	r2, [pc, #20]	; (8013154 <_ZN8touchgfx23AbstractButtonContainerD1Ev+0x20>)
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	601a      	str	r2, [r3, #0]
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	4618      	mov	r0, r3
 8013146:	f7ff fcab 	bl	8012aa0 <_ZN8touchgfx9ContainerD1Ev>
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	4618      	mov	r0, r3
 801314e:	3708      	adds	r7, #8
 8013150:	46bd      	mov	sp, r7
 8013152:	bd80      	pop	{r7, pc}
 8013154:	0802c9b4 	.word	0x0802c9b4

08013158 <_ZN8touchgfx23AbstractButtonContainerD0Ev>:
 8013158:	b580      	push	{r7, lr}
 801315a:	b082      	sub	sp, #8
 801315c:	af00      	add	r7, sp, #0
 801315e:	6078      	str	r0, [r7, #4]
 8013160:	6878      	ldr	r0, [r7, #4]
 8013162:	f7ff ffe7 	bl	8013134 <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 8013166:	2134      	movs	r1, #52	; 0x34
 8013168:	6878      	ldr	r0, [r7, #4]
 801316a:	f017 fade 	bl	802a72a <_ZdlPvj>
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	4618      	mov	r0, r3
 8013172:	3708      	adds	r7, #8
 8013174:	46bd      	mov	sp, r7
 8013176:	bd80      	pop	{r7, pc}

08013178 <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>:
     *
     * @brief Sets the pressed state.
     *
     * @param isPressed True if is pressed, false if not.
     */
    void setPressed(bool isPressed)
 8013178:	b580      	push	{r7, lr}
 801317a:	b082      	sub	sp, #8
 801317c:	af00      	add	r7, sp, #0
 801317e:	6078      	str	r0, [r7, #4]
 8013180:	460b      	mov	r3, r1
 8013182:	70fb      	strb	r3, [r7, #3]
    {
        pressed = isPressed;
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	78fa      	ldrb	r2, [r7, #3]
 8013188:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        handlePressedUpdated();
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	681b      	ldr	r3, [r3, #0]
 8013190:	3384      	adds	r3, #132	; 0x84
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	6878      	ldr	r0, [r7, #4]
 8013196:	4798      	blx	r3
    }
 8013198:	bf00      	nop
 801319a:	3708      	adds	r7, #8
 801319c:	46bd      	mov	sp, r7
 801319e:	bd80      	pop	{r7, pc}

080131a0 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>:
     *
     * @brief Gets the pressed state.
     *
     * @return True if it succeeds, false if it fails.
     */
    bool getPressed()
 80131a0:	b480      	push	{r7}
 80131a2:	b083      	sub	sp, #12
 80131a4:	af00      	add	r7, sp, #0
 80131a6:	6078      	str	r0, [r7, #4]
    {
        return pressed;
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    }
 80131ae:	4618      	mov	r0, r3
 80131b0:	370c      	adds	r7, #12
 80131b2:	46bd      	mov	sp, r7
 80131b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131b8:	4770      	bx	lr

080131ba <_ZN8touchgfx23AbstractButtonContainer8setAlphaEh>:
     *
     * @brief Sets an alpha value.
     *
     * @param newAlpha The new alpha.
     */
    void setAlpha(uint8_t newAlpha)
 80131ba:	b580      	push	{r7, lr}
 80131bc:	b082      	sub	sp, #8
 80131be:	af00      	add	r7, sp, #0
 80131c0:	6078      	str	r0, [r7, #4]
 80131c2:	460b      	mov	r3, r1
 80131c4:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	78fa      	ldrb	r2, [r7, #3]
 80131ca:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        handleAlphaUpdated();
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	3388      	adds	r3, #136	; 0x88
 80131d4:	681b      	ldr	r3, [r3, #0]
 80131d6:	6878      	ldr	r0, [r7, #4]
 80131d8:	4798      	blx	r3
    }
 80131da:	bf00      	nop
 80131dc:	3708      	adds	r7, #8
 80131de:	46bd      	mov	sp, r7
 80131e0:	bd80      	pop	{r7, pc}

080131e2 <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>:
     *
     * @brief Gets the alpha.
     *
     * @return The alpha value.
     */
    uint8_t getAlpha() const
 80131e2:	b480      	push	{r7}
 80131e4:	b083      	sub	sp, #12
 80131e6:	af00      	add	r7, sp, #0
 80131e8:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    }
 80131f0:	4618      	mov	r0, r3
 80131f2:	370c      	adds	r7, #12
 80131f4:	46bd      	mov	sp, r7
 80131f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131fa:	4770      	bx	lr

080131fc <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     *
     * @brief Sets an action callback.
     *
     * @param callback The callback.
     */
    void setAction(GenericCallback< const AbstractButtonContainer& >& callback)
 80131fc:	b480      	push	{r7}
 80131fe:	b083      	sub	sp, #12
 8013200:	af00      	add	r7, sp, #0
 8013202:	6078      	str	r0, [r7, #4]
 8013204:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	683a      	ldr	r2, [r7, #0]
 801320a:	631a      	str	r2, [r3, #48]	; 0x30
    }
 801320c:	bf00      	nop
 801320e:	370c      	adds	r7, #12
 8013210:	46bd      	mov	sp, r7
 8013212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013216:	4770      	bx	lr

08013218 <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>:
    /**
     * @fn virtual void AbstractButtonContainer::handlePressedUpdated()
     *
     * @brief Handles the pressed updated.
     */
    virtual void handlePressedUpdated() {}
 8013218:	b480      	push	{r7}
 801321a:	b083      	sub	sp, #12
 801321c:	af00      	add	r7, sp, #0
 801321e:	6078      	str	r0, [r7, #4]
 8013220:	bf00      	nop
 8013222:	370c      	adds	r7, #12
 8013224:	46bd      	mov	sp, r7
 8013226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801322a:	4770      	bx	lr

0801322c <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>:
    /**
     * @fn virtual void AbstractButtonContainer::handleAlphaUpdated()
     *
     * @brief Handles the alpha updated.
     */
    virtual void handleAlphaUpdated() {}
 801322c:	b480      	push	{r7}
 801322e:	b083      	sub	sp, #12
 8013230:	af00      	add	r7, sp, #0
 8013232:	6078      	str	r0, [r7, #4]
 8013234:	bf00      	nop
 8013236:	370c      	adds	r7, #12
 8013238:	46bd      	mov	sp, r7
 801323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801323e:	4770      	bx	lr

08013240 <_ZN8touchgfx18TouchButtonTriggerC1Ev>:
    /**
     * @fn TouchButtonTrigger::TouchButtonTrigger()
     *
     * @brief Default constructor.
     */
    TouchButtonTrigger() :
 8013240:	b580      	push	{r7, lr}
 8013242:	b082      	sub	sp, #8
 8013244:	af00      	add	r7, sp, #0
 8013246:	6078      	str	r0, [r7, #4]
        AbstractButtonContainer() { }
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	4618      	mov	r0, r3
 801324c:	f7ff ff50 	bl	80130f0 <_ZN8touchgfx23AbstractButtonContainerC1Ev>
 8013250:	4a03      	ldr	r2, [pc, #12]	; (8013260 <_ZN8touchgfx18TouchButtonTriggerC1Ev+0x20>)
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	601a      	str	r2, [r3, #0]
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	4618      	mov	r0, r3
 801325a:	3708      	adds	r7, #8
 801325c:	46bd      	mov	sp, r7
 801325e:	bd80      	pop	{r7, pc}
 8013260:	0802c908 	.word	0x0802c908

08013264 <_ZN8touchgfx18TouchButtonTriggerD1Ev>:
    /**
     * @fn virtual TouchButtonTrigger::~TouchButtonTrigger()
     *
     * @brief Destructor.
     */
    virtual ~TouchButtonTrigger() { }
 8013264:	b580      	push	{r7, lr}
 8013266:	b082      	sub	sp, #8
 8013268:	af00      	add	r7, sp, #0
 801326a:	6078      	str	r0, [r7, #4]
 801326c:	4a05      	ldr	r2, [pc, #20]	; (8013284 <_ZN8touchgfx18TouchButtonTriggerD1Ev+0x20>)
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	601a      	str	r2, [r3, #0]
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	4618      	mov	r0, r3
 8013276:	f7ff ff5d 	bl	8013134 <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	4618      	mov	r0, r3
 801327e:	3708      	adds	r7, #8
 8013280:	46bd      	mov	sp, r7
 8013282:	bd80      	pop	{r7, pc}
 8013284:	0802c908 	.word	0x0802c908

08013288 <_ZN8touchgfx18TouchButtonTriggerD0Ev>:
 8013288:	b580      	push	{r7, lr}
 801328a:	b082      	sub	sp, #8
 801328c:	af00      	add	r7, sp, #0
 801328e:	6078      	str	r0, [r7, #4]
 8013290:	6878      	ldr	r0, [r7, #4]
 8013292:	f7ff ffe7 	bl	8013264 <_ZN8touchgfx18TouchButtonTriggerD1Ev>
 8013296:	2134      	movs	r1, #52	; 0x34
 8013298:	6878      	ldr	r0, [r7, #4]
 801329a:	f017 fa46 	bl	802a72a <_ZdlPvj>
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	4618      	mov	r0, r3
 80132a2:	3708      	adds	r7, #8
 80132a4:	46bd      	mov	sp, r7
 80132a6:	bd80      	pop	{r7, pc}

080132a8 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *
     * @brief Handles the click event described by event.
     *
     * @param event The event.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80132a8:	b580      	push	{r7, lr}
 80132aa:	b084      	sub	sp, #16
 80132ac:	af00      	add	r7, sp, #0
 80132ae:	6078      	str	r0, [r7, #4]
 80132b0:	6039      	str	r1, [r7, #0]
    {
        bool wasPressed = getPressed();
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	4618      	mov	r0, r3
 80132b6:	f7ff ff73 	bl	80131a0 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 80132ba:	4603      	mov	r3, r0
 80132bc:	73fb      	strb	r3, [r7, #15]
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 80132be:	6838      	ldr	r0, [r7, #0]
 80132c0:	f7ff fa57 	bl	8012772 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 80132c4:	4603      	mov	r3, r0
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	bf0c      	ite	eq
 80132ca:	2301      	moveq	r3, #1
 80132cc:	2300      	movne	r3, #0
 80132ce:	73bb      	strb	r3, [r7, #14]
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 80132d0:	7bbb      	ldrb	r3, [r7, #14]
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d005      	beq.n	80132e2 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x3a>
 80132d6:	7bfb      	ldrb	r3, [r7, #15]
 80132d8:	f083 0301 	eor.w	r3, r3, #1
 80132dc:	b2db      	uxtb	r3, r3
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d108      	bne.n	80132f4 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x4c>
 80132e2:	7bbb      	ldrb	r3, [r7, #14]
 80132e4:	f083 0301 	eor.w	r3, r3, #1
 80132e8:	b2db      	uxtb	r3, r3
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d00f      	beq.n	801330e <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
 80132ee:	7bfb      	ldrb	r3, [r7, #15]
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d00c      	beq.n	801330e <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
        {
            setPressed(newPressedValue);
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	7bba      	ldrb	r2, [r7, #14]
 80132f8:	4611      	mov	r1, r2
 80132fa:	4618      	mov	r0, r3
 80132fc:	f7ff ff3c 	bl	8013178 <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>
            invalidate();
 8013300:	687a      	ldr	r2, [r7, #4]
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	681b      	ldr	r3, [r3, #0]
 8013306:	3314      	adds	r3, #20
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	4610      	mov	r0, r2
 801330c:	4798      	blx	r3
        }
        if (newPressedValue && action)
 801330e:	7bbb      	ldrb	r3, [r7, #14]
 8013310:	2b00      	cmp	r3, #0
 8013312:	d019      	beq.n	8013348 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0xa0>
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013318:	2b00      	cmp	r3, #0
 801331a:	d015      	beq.n	8013348 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0xa0>
        {
            if (action->isValid())
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013324:	681b      	ldr	r3, [r3, #0]
 8013326:	330c      	adds	r3, #12
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	4610      	mov	r0, r2
 801332c:	4798      	blx	r3
 801332e:	4603      	mov	r3, r0
 8013330:	2b00      	cmp	r3, #0
 8013332:	d009      	beq.n	8013348 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0xa0>
            {
                action->execute(*this);
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	3308      	adds	r3, #8
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	6879      	ldr	r1, [r7, #4]
 8013344:	4610      	mov	r0, r2
 8013346:	4798      	blx	r3
            }
        }
    }
 8013348:	bf00      	nop
 801334a:	3710      	adds	r7, #16
 801334c:	46bd      	mov	sp, r7
 801334e:	bd80      	pop	{r7, pc}

08013350 <_ZN8touchgfx13BoxWithBorderC1Ev>:
    /**
     * @fn BoxWithBorder::BoxWithBorder()
     *
     * @brief Default constructor.
     */
    BoxWithBorder() : Widget(), alpha(255), color(0), borderColor(0), borderSize(0)
 8013350:	b580      	push	{r7, lr}
 8013352:	b082      	sub	sp, #8
 8013354:	af00      	add	r7, sp, #0
 8013356:	6078      	str	r0, [r7, #4]
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	4618      	mov	r0, r3
 801335c:	f7ff fc2a 	bl	8012bb4 <_ZN8touchgfx6WidgetC1Ev>
 8013360:	4a0d      	ldr	r2, [pc, #52]	; (8013398 <_ZN8touchgfx13BoxWithBorderC1Ev+0x48>)
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	601a      	str	r2, [r3, #0]
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	22ff      	movs	r2, #255	; 0xff
 801336a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	3328      	adds	r3, #40	; 0x28
 8013372:	2100      	movs	r1, #0
 8013374:	4618      	mov	r0, r3
 8013376:	f7ff f9b6 	bl	80126e6 <_ZN8touchgfx9colortypeC1Em>
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	332c      	adds	r3, #44	; 0x2c
 801337e:	2100      	movs	r1, #0
 8013380:	4618      	mov	r0, r3
 8013382:	f7ff f9b0 	bl	80126e6 <_ZN8touchgfx9colortypeC1Em>
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	2200      	movs	r2, #0
 801338a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    {
    }
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	4618      	mov	r0, r3
 8013392:	3708      	adds	r7, #8
 8013394:	46bd      	mov	sp, r7
 8013396:	bd80      	pop	{r7, pc}
 8013398:	0802ea68 	.word	0x0802ea68

0801339c <_ZN8touchgfx13BoxWithBorderD1Ev>:
    /**
     * @fn virtual BoxWithBorder::~BoxWithBorder()
     *
     * @brief Destructor.
     */
    virtual ~BoxWithBorder() {}
 801339c:	b580      	push	{r7, lr}
 801339e:	b082      	sub	sp, #8
 80133a0:	af00      	add	r7, sp, #0
 80133a2:	6078      	str	r0, [r7, #4]
 80133a4:	4a05      	ldr	r2, [pc, #20]	; (80133bc <_ZN8touchgfx13BoxWithBorderD1Ev+0x20>)
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	601a      	str	r2, [r3, #0]
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	4618      	mov	r0, r3
 80133ae:	f7ff fc13 	bl	8012bd8 <_ZN8touchgfx6WidgetD1Ev>
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	4618      	mov	r0, r3
 80133b6:	3708      	adds	r7, #8
 80133b8:	46bd      	mov	sp, r7
 80133ba:	bd80      	pop	{r7, pc}
 80133bc:	0802ea68 	.word	0x0802ea68

080133c0 <_ZN8touchgfx13BoxWithBorderD0Ev>:
 80133c0:	b580      	push	{r7, lr}
 80133c2:	b082      	sub	sp, #8
 80133c4:	af00      	add	r7, sp, #0
 80133c6:	6078      	str	r0, [r7, #4]
 80133c8:	6878      	ldr	r0, [r7, #4]
 80133ca:	f7ff ffe7 	bl	801339c <_ZN8touchgfx13BoxWithBorderD1Ev>
 80133ce:	2134      	movs	r1, #52	; 0x34
 80133d0:	6878      	ldr	r0, [r7, #4]
 80133d2:	f017 f9aa 	bl	802a72a <_ZdlPvj>
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	4618      	mov	r0, r3
 80133da:	3708      	adds	r7, #8
 80133dc:	46bd      	mov	sp, r7
 80133de:	bd80      	pop	{r7, pc}

080133e0 <_ZN8touchgfx13BoxWithBorder8setColorENS_9colortypeE>:
     *
     * @brief Sets a color.
     *
     * @param color The color.
     */
    void setColor(colortype color)
 80133e0:	b480      	push	{r7}
 80133e2:	b083      	sub	sp, #12
 80133e4:	af00      	add	r7, sp, #0
 80133e6:	6078      	str	r0, [r7, #4]
 80133e8:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	683a      	ldr	r2, [r7, #0]
 80133ee:	629a      	str	r2, [r3, #40]	; 0x28
    }
 80133f0:	bf00      	nop
 80133f2:	370c      	adds	r7, #12
 80133f4:	46bd      	mov	sp, r7
 80133f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133fa:	4770      	bx	lr

080133fc <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>:
     *
     * @brief Sets border color.
     *
     * @param color The color.
     */
    void setBorderColor(colortype color)
 80133fc:	b480      	push	{r7}
 80133fe:	b083      	sub	sp, #12
 8013400:	af00      	add	r7, sp, #0
 8013402:	6078      	str	r0, [r7, #4]
 8013404:	6039      	str	r1, [r7, #0]
    {
        this->borderColor = color;
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	683a      	ldr	r2, [r7, #0]
 801340a:	62da      	str	r2, [r3, #44]	; 0x2c
    }
 801340c:	bf00      	nop
 801340e:	370c      	adds	r7, #12
 8013410:	46bd      	mov	sp, r7
 8013412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013416:	4770      	bx	lr

08013418 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEh>:
     *
     * @brief Sets border size.
     *
     * @param size The size.
     */
    void setBorderSize(uint8_t size)
 8013418:	b480      	push	{r7}
 801341a:	b083      	sub	sp, #12
 801341c:	af00      	add	r7, sp, #0
 801341e:	6078      	str	r0, [r7, #4]
 8013420:	460b      	mov	r3, r1
 8013422:	70fb      	strb	r3, [r7, #3]
    {
        borderSize = size;
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	78fa      	ldrb	r2, [r7, #3]
 8013428:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    }
 801342c:	bf00      	nop
 801342e:	370c      	adds	r7, #12
 8013430:	46bd      	mov	sp, r7
 8013432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013436:	4770      	bx	lr

08013438 <_ZN8touchgfx13BoxWithBorder8setAlphaEh>:
     *
     * @brief Sets an alpha.
     *
     * @param alpha The alpha.
     */
    void setAlpha(uint8_t alpha)
 8013438:	b480      	push	{r7}
 801343a:	b083      	sub	sp, #12
 801343c:	af00      	add	r7, sp, #0
 801343e:	6078      	str	r0, [r7, #4]
 8013440:	460b      	mov	r3, r1
 8013442:	70fb      	strb	r3, [r7, #3]
    {
        this->alpha = alpha;
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	78fa      	ldrb	r2, [r7, #3]
 8013448:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    }
 801344c:	bf00      	nop
 801344e:	370c      	adds	r7, #12
 8013450:	46bd      	mov	sp, r7
 8013452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013456:	4770      	bx	lr

08013458 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>:
class View : public Screen
 8013458:	b580      	push	{r7, lr}
 801345a:	b082      	sub	sp, #8
 801345c:	af00      	add	r7, sp, #0
 801345e:	6078      	str	r0, [r7, #4]
 8013460:	4a05      	ldr	r2, [pc, #20]	; (8013478 <_ZN8touchgfx4ViewI13MainPresenterED1Ev+0x20>)
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	601a      	str	r2, [r3, #0]
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	4618      	mov	r0, r3
 801346a:	f7ff fb3b 	bl	8012ae4 <_ZN8touchgfx6ScreenD1Ev>
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	4618      	mov	r0, r3
 8013472:	3708      	adds	r7, #8
 8013474:	46bd      	mov	sp, r7
 8013476:	bd80      	pop	{r7, pc}
 8013478:	0802c8d4 	.word	0x0802c8d4

0801347c <_ZN8touchgfx4ViewI13MainPresenterED0Ev>:
 801347c:	b580      	push	{r7, lr}
 801347e:	b082      	sub	sp, #8
 8013480:	af00      	add	r7, sp, #0
 8013482:	6078      	str	r0, [r7, #4]
 8013484:	6878      	ldr	r0, [r7, #4]
 8013486:	f7ff ffe7 	bl	8013458 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 801348a:	2140      	movs	r1, #64	; 0x40
 801348c:	6878      	ldr	r0, [r7, #4]
 801348e:	f017 f94c 	bl	802a72a <_ZdlPvj>
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	4618      	mov	r0, r3
 8013496:	3708      	adds	r7, #8
 8013498:	46bd      	mov	sp, r7
 801349a:	bd80      	pop	{r7, pc}

0801349c <_ZN12MainViewBaseD1Ev>:

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase() {}
 801349c:	b580      	push	{r7, lr}
 801349e:	b082      	sub	sp, #8
 80134a0:	af00      	add	r7, sp, #0
 80134a2:	6078      	str	r0, [r7, #4]
 80134a4:	4a8a      	ldr	r2, [pc, #552]	; (80136d0 <_ZN12MainViewBaseD1Ev+0x234>)
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	601a      	str	r2, [r3, #0]
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	f603 4314 	addw	r3, r3, #3092	; 0xc14
 80134b0:	4618      	mov	r0, r3
 80134b2:	f001 ff97 	bl	80153e4 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 80134bc:	4618      	mov	r0, r3
 80134be:	f001 fde5 	bl	801508c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEED1Ev>
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 80134c8:	4618      	mov	r0, r3
 80134ca:	f001 ffad 	bl	8015428 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 80134d4:	4618      	mov	r0, r3
 80134d6:	f7ff fced 	bl	8012eb4 <_ZN8touchgfx8TextAreaD1Ev>
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 80134e0:	4618      	mov	r0, r3
 80134e2:	f001 ffa1 	bl	8015428 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 80134ec:	4618      	mov	r0, r3
 80134ee:	f7ff fce1 	bl	8012eb4 <_ZN8touchgfx8TextAreaD1Ev>
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 80134f8:	4618      	mov	r0, r3
 80134fa:	f001 ff95 	bl	8015428 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 8013504:	4618      	mov	r0, r3
 8013506:	f001 ff8f 	bl	8015428 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	f603 1378 	addw	r3, r3, #2424	; 0x978
 8013510:	4618      	mov	r0, r3
 8013512:	f001 ff89 	bl	8015428 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	f603 1344 	addw	r3, r3, #2372	; 0x944
 801351c:	4618      	mov	r0, r3
 801351e:	f7ff fcc9 	bl	8012eb4 <_ZN8touchgfx8TextAreaD1Ev>
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 8013528:	4618      	mov	r0, r3
 801352a:	f001 ff7d 	bl	8015428 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8013534:	4618      	mov	r0, r3
 8013536:	f007 fa79 	bl	801aa2c <_ZN8touchgfx13ImageProgressD1Ev>
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	f203 73e4 	addw	r3, r3, #2020	; 0x7e4
 8013540:	4618      	mov	r0, r3
 8013542:	f001 ff71 	bl	8015428 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	f203 73cc 	addw	r3, r3, #1996	; 0x7cc
 801354c:	4618      	mov	r0, r3
 801354e:	f001 ffaf 	bl	80154b0 <_ZN8touchgfx13PainterRGB888D1Ev>
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8013558:	4618      	mov	r0, r3
 801355a:	f001 ff87 	bl	801546c <_ZN8touchgfx4LineD1Ev>
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	f503 63e8 	add.w	r3, r3, #1856	; 0x740
 8013564:	4618      	mov	r0, r3
 8013566:	f001 ffa3 	bl	80154b0 <_ZN8touchgfx13PainterRGB888D1Ev>
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 8013570:	4618      	mov	r0, r3
 8013572:	f001 ff7b 	bl	801546c <_ZN8touchgfx4LineD1Ev>
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 801357c:	4618      	mov	r0, r3
 801357e:	f007 f955 	bl	801a82c <_ZN8touchgfx11BoxProgressD1Ev>
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 8013588:	4618      	mov	r0, r3
 801358a:	f7ff fc93 	bl	8012eb4 <_ZN8touchgfx8TextAreaD1Ev>
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8013594:	4618      	mov	r0, r3
 8013596:	f001 ff47 	bl	8015428 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 80135a0:	4618      	mov	r0, r3
 80135a2:	f001 ff41 	bl	8015428 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	f203 5334 	addw	r3, r3, #1332	; 0x534
 80135ac:	4618      	mov	r0, r3
 80135ae:	f7ff fc81 	bl	8012eb4 <_ZN8touchgfx8TextAreaD1Ev>
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80135b8:	4618      	mov	r0, r3
 80135ba:	f7ff fc7b 	bl	8012eb4 <_ZN8touchgfx8TextAreaD1Ev>
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 80135c4:	4618      	mov	r0, r3
 80135c6:	f001 ff2f 	bl	8015428 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 80135d0:	4618      	mov	r0, r3
 80135d2:	f001 ff29 	bl	8015428 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 80135dc:	4618      	mov	r0, r3
 80135de:	f7ff fc69 	bl	8012eb4 <_ZN8touchgfx8TextAreaD1Ev>
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 80135e8:	4618      	mov	r0, r3
 80135ea:	f7ff fc63 	bl	8012eb4 <_ZN8touchgfx8TextAreaD1Ev>
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80135f4:	4618      	mov	r0, r3
 80135f6:	f001 ff5b 	bl	80154b0 <_ZN8touchgfx13PainterRGB888D1Ev>
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8013600:	4618      	mov	r0, r3
 8013602:	f001 ff33 	bl	801546c <_ZN8touchgfx4LineD1Ev>
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	f503 7359 	add.w	r3, r3, #868	; 0x364
 801360c:	4618      	mov	r0, r3
 801360e:	f001 ff0b 	bl	8015428 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8013618:	4618      	mov	r0, r3
 801361a:	f001 ff05 	bl	8015428 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8013624:	4618      	mov	r0, r3
 8013626:	f001 feff 	bl	8015428 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8013630:	4618      	mov	r0, r3
 8013632:	f001 fef9 	bl	8015428 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	f503 7321 	add.w	r3, r3, #644	; 0x284
 801363c:	4618      	mov	r0, r3
 801363e:	f001 fef3 	bl	8015428 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8013648:	4618      	mov	r0, r3
 801364a:	f001 feed 	bl	8015428 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8013654:	4618      	mov	r0, r3
 8013656:	f001 fee7 	bl	8015428 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8013660:	4618      	mov	r0, r3
 8013662:	f001 fee1 	bl	8015428 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 801366c:	4618      	mov	r0, r3
 801366e:	f7ff fd1d 	bl	80130ac <_ZN8touchgfx5ImageD1Ev>
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8013678:	4618      	mov	r0, r3
 801367a:	f001 fed5 	bl	8015428 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8013684:	4618      	mov	r0, r3
 8013686:	f001 fecf 	bl	8015428 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8013690:	4618      	mov	r0, r3
 8013692:	f7ff fc0f 	bl	8012eb4 <_ZN8touchgfx8TextAreaD1Ev>
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	33d8      	adds	r3, #216	; 0xd8
 801369a:	4618      	mov	r0, r3
 801369c:	f7ff fc0a 	bl	8012eb4 <_ZN8touchgfx8TextAreaD1Ev>
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	33a4      	adds	r3, #164	; 0xa4
 80136a4:	4618      	mov	r0, r3
 80136a6:	f7ff fc05 	bl	8012eb4 <_ZN8touchgfx8TextAreaD1Ev>
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	3370      	adds	r3, #112	; 0x70
 80136ae:	4618      	mov	r0, r3
 80136b0:	f7ff fc00 	bl	8012eb4 <_ZN8touchgfx8TextAreaD1Ev>
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	3340      	adds	r3, #64	; 0x40
 80136b8:	4618      	mov	r0, r3
 80136ba:	f7ff faf3 	bl	8012ca4 <_ZN8touchgfx3BoxD1Ev>
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	4618      	mov	r0, r3
 80136c2:	f7ff fec9 	bl	8013458 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	4618      	mov	r0, r3
 80136ca:	3708      	adds	r7, #8
 80136cc:	46bd      	mov	sp, r7
 80136ce:	bd80      	pop	{r7, pc}
 80136d0:	0802c7f4 	.word	0x0802c7f4

080136d4 <_ZN12MainViewBaseD0Ev>:
 80136d4:	b580      	push	{r7, lr}
 80136d6:	b082      	sub	sp, #8
 80136d8:	af00      	add	r7, sp, #0
 80136da:	6078      	str	r0, [r7, #4]
 80136dc:	6878      	ldr	r0, [r7, #4]
 80136de:	f7ff fedd 	bl	801349c <_ZN12MainViewBaseD1Ev>
 80136e2:	f642 0144 	movw	r1, #10308	; 0x2844
 80136e6:	6878      	ldr	r0, [r7, #4]
 80136e8:	f017 f81f 	bl	802a72a <_ZdlPvj>
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	4618      	mov	r0, r3
 80136f0:	3708      	adds	r7, #8
 80136f2:	46bd      	mov	sp, r7
 80136f4:	bd80      	pop	{r7, pc}

080136f6 <_ZN12MainViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 80136f6:	b580      	push	{r7, lr}
 80136f8:	b082      	sub	sp, #8
 80136fa:	af00      	add	r7, sp, #0
 80136fc:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80136fe:	f00b f811 	bl	801e724 <_ZN8touchgfx11Application11getInstanceEv>
 8013702:	4603      	mov	r3, r0
    }
 8013704:	4618      	mov	r0, r3
 8013706:	3708      	adds	r7, #8
 8013708:	46bd      	mov	sp, r7
 801370a:	bd80      	pop	{r7, pc}

0801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     * @param green Value of the green part (0-255).
     * @param blue  Value of the blue part (0-255).
     *
     * @return The color representation depending on LCD color format.
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 801370c:	b590      	push	{r4, r7, lr}
 801370e:	b083      	sub	sp, #12
 8013710:	af00      	add	r7, sp, #0
 8013712:	4603      	mov	r3, r0
 8013714:	71fb      	strb	r3, [r7, #7]
 8013716:	460b      	mov	r3, r1
 8013718:	71bb      	strb	r3, [r7, #6]
 801371a:	4613      	mov	r3, r2
 801371c:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 801371e:	f7fd fb4b 	bl	8010db8 <_ZN8touchgfx3HAL11getInstanceEv>
 8013722:	4603      	mov	r3, r0
 8013724:	2b00      	cmp	r3, #0
 8013726:	d105      	bne.n	8013734 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 8013728:	4b0a      	ldr	r3, [pc, #40]	; (8013754 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 801372a:	4a0b      	ldr	r2, [pc, #44]	; (8013758 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 801372c:	2138      	movs	r1, #56	; 0x38
 801372e:	480b      	ldr	r0, [pc, #44]	; (801375c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 8013730:	f017 f826 	bl	802a780 <__assert_func>
 8013734:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 8013736:	f7fd fb4b 	bl	8010dd0 <_ZN8touchgfx3HAL3lcdEv>
 801373a:	6803      	ldr	r3, [r0, #0]
 801373c:	332c      	adds	r3, #44	; 0x2c
 801373e:	681c      	ldr	r4, [r3, #0]
 8013740:	797b      	ldrb	r3, [r7, #5]
 8013742:	79ba      	ldrb	r2, [r7, #6]
 8013744:	79f9      	ldrb	r1, [r7, #7]
 8013746:	47a0      	blx	r4
 8013748:	4603      	mov	r3, r0
    }
 801374a:	4618      	mov	r0, r3
 801374c:	370c      	adds	r7, #12
 801374e:	46bd      	mov	sp, r7
 8013750:	bd90      	pop	{r4, r7, pc}
 8013752:	bf00      	nop
 8013754:	0802bc24 	.word	0x0802bc24
 8013758:	0802cb24 	.word	0x0802cb24
 801375c:	0802bc68 	.word	0x0802bc68

08013760 <_ZN12MainViewBaseC1Ev>:
#include <gui_generated/main_screen/MainViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include "BitmapDatabase.hpp"

MainViewBase::MainViewBase() :
 8013760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013764:	b0c2      	sub	sp, #264	; 0x108
 8013766:	af02      	add	r7, sp, #8
 8013768:	6078      	str	r0, [r7, #4]
    flexButtonCallback(this, &MainViewBase::flexButtonCallbackHandler)
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	4618      	mov	r0, r3
 801376e:	f001 fcb5 	bl	80150dc <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>
 8013772:	4ada      	ldr	r2, [pc, #872]	; (8013adc <_ZN12MainViewBaseC1Ev+0x37c>)
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	601a      	str	r2, [r3, #0]
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	3340      	adds	r3, #64	; 0x40
 801377c:	4618      	mov	r0, r3
 801377e:	f7ff fa71 	bl	8012c64 <_ZN8touchgfx3BoxC1Ev>
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	3370      	adds	r3, #112	; 0x70
 8013786:	4618      	mov	r0, r3
 8013788:	f7ff fae2 	bl	8012d50 <_ZN8touchgfx8TextAreaC1Ev>
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	33a4      	adds	r3, #164	; 0xa4
 8013790:	4618      	mov	r0, r3
 8013792:	f7ff fadd 	bl	8012d50 <_ZN8touchgfx8TextAreaC1Ev>
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	33d8      	adds	r3, #216	; 0xd8
 801379a:	4618      	mov	r0, r3
 801379c:	f7ff fad8 	bl	8012d50 <_ZN8touchgfx8TextAreaC1Ev>
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80137a6:	4618      	mov	r0, r3
 80137a8:	f7ff fad2 	bl	8012d50 <_ZN8touchgfx8TextAreaC1Ev>
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80137b2:	4618      	mov	r0, r3
 80137b4:	f7ff fbd4 	bl	8012f60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80137be:	4618      	mov	r0, r3
 80137c0:	f7ff fbce 	bl	8012f60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	f503 74d8 	add.w	r4, r3, #432	; 0x1b0
 80137ca:	f107 030c 	add.w	r3, r7, #12
 80137ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80137d2:	4618      	mov	r0, r3
 80137d4:	f7fe ffd9 	bl	801278a <_ZN8touchgfx6BitmapC1Et>
 80137d8:	f107 030c 	add.w	r3, r7, #12
 80137dc:	4619      	mov	r1, r3
 80137de:	4620      	mov	r0, r4
 80137e0:	f7ff fbe2 	bl	8012fa8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 80137ea:	4618      	mov	r0, r3
 80137ec:	f7ff fbb8 	bl	8012f60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80137f6:	4618      	mov	r0, r3
 80137f8:	f7ff fbb2 	bl	8012f60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8013802:	4618      	mov	r0, r3
 8013804:	f7ff fbac 	bl	8012f60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 801380e:	4618      	mov	r0, r3
 8013810:	f7ff fba6 	bl	8012f60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 801381a:	4618      	mov	r0, r3
 801381c:	f7ff fba0 	bl	8012f60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8013826:	4618      	mov	r0, r3
 8013828:	f7ff fb9a 	bl	8012f60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8013832:	4618      	mov	r0, r3
 8013834:	f7ff fb94 	bl	8012f60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	f503 7359 	add.w	r3, r3, #868	; 0x364
 801383e:	4618      	mov	r0, r3
 8013840:	f7ff fb8e 	bl	8012f60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 801384a:	4618      	mov	r0, r3
 801384c:	f008 ff32 	bl	801c6b4 <_ZN8touchgfx4LineC1Ev>
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	f503 6482 	add.w	r4, r3, #1040	; 0x410
 8013856:	f107 0310 	add.w	r3, r7, #16
 801385a:	2100      	movs	r1, #0
 801385c:	4618      	mov	r0, r3
 801385e:	f7fe ff42 	bl	80126e6 <_ZN8touchgfx9colortypeC1Em>
 8013862:	22ff      	movs	r2, #255	; 0xff
 8013864:	6939      	ldr	r1, [r7, #16]
 8013866:	4620      	mov	r0, r4
 8013868:	f008 fd16 	bl	801c298 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8013872:	4618      	mov	r0, r3
 8013874:	f7ff fa6c 	bl	8012d50 <_ZN8touchgfx8TextAreaC1Ev>
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 801387e:	4618      	mov	r0, r3
 8013880:	f7ff fa66 	bl	8012d50 <_ZN8touchgfx8TextAreaC1Ev>
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 801388a:	4618      	mov	r0, r3
 801388c:	f7ff fb68 	bl	8012f60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8013896:	4618      	mov	r0, r3
 8013898:	f7ff fb62 	bl	8012f60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80138a2:	4618      	mov	r0, r3
 80138a4:	f7ff fa54 	bl	8012d50 <_ZN8touchgfx8TextAreaC1Ev>
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	f203 5334 	addw	r3, r3, #1332	; 0x534
 80138ae:	4618      	mov	r0, r3
 80138b0:	f7ff fa4e 	bl	8012d50 <_ZN8touchgfx8TextAreaC1Ev>
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 80138ba:	4618      	mov	r0, r3
 80138bc:	f7ff fb50 	bl	8012f60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 80138c6:	4618      	mov	r0, r3
 80138c8:	f7ff fb4a 	bl	8012f60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 80138d2:	4618      	mov	r0, r3
 80138d4:	f7ff fa3c 	bl	8012d50 <_ZN8touchgfx8TextAreaC1Ev>
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 80138de:	4618      	mov	r0, r3
 80138e0:	f006 ffb8 	bl	801a854 <_ZN8touchgfx11BoxProgressC1Ev>
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 80138ea:	4618      	mov	r0, r3
 80138ec:	f008 fee2 	bl	801c6b4 <_ZN8touchgfx4LineC1Ev>
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	f503 64e8 	add.w	r4, r3, #1856	; 0x740
 80138f6:	f107 0314 	add.w	r3, r7, #20
 80138fa:	2100      	movs	r1, #0
 80138fc:	4618      	mov	r0, r3
 80138fe:	f7fe fef2 	bl	80126e6 <_ZN8touchgfx9colortypeC1Em>
 8013902:	22ff      	movs	r2, #255	; 0xff
 8013904:	6979      	ldr	r1, [r7, #20]
 8013906:	4620      	mov	r0, r4
 8013908:	f008 fcc6 	bl	801c298 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8013912:	4618      	mov	r0, r3
 8013914:	f008 fece 	bl	801c6b4 <_ZN8touchgfx4LineC1Ev>
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	f203 74cc 	addw	r4, r3, #1996	; 0x7cc
 801391e:	f107 0318 	add.w	r3, r7, #24
 8013922:	2100      	movs	r1, #0
 8013924:	4618      	mov	r0, r3
 8013926:	f7fe fede 	bl	80126e6 <_ZN8touchgfx9colortypeC1Em>
 801392a:	22ff      	movs	r2, #255	; 0xff
 801392c:	69b9      	ldr	r1, [r7, #24]
 801392e:	4620      	mov	r0, r4
 8013930:	f008 fcb2 	bl	801c298 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	f203 73e4 	addw	r3, r3, #2020	; 0x7e4
 801393a:	4618      	mov	r0, r3
 801393c:	f7ff fb10 	bl	8012f60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8013946:	4618      	mov	r0, r3
 8013948:	f007 f89a 	bl	801aa80 <_ZN8touchgfx13ImageProgressC1Ev>
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 8013952:	4618      	mov	r0, r3
 8013954:	f7ff fb04 	bl	8012f60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	f603 1344 	addw	r3, r3, #2372	; 0x944
 801395e:	4618      	mov	r0, r3
 8013960:	f7ff f9f6 	bl	8012d50 <_ZN8touchgfx8TextAreaC1Ev>
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	f603 1378 	addw	r3, r3, #2424	; 0x978
 801396a:	4618      	mov	r0, r3
 801396c:	f7ff faf8 	bl	8012f60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 8013976:	4618      	mov	r0, r3
 8013978:	f7ff faf2 	bl	8012f60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 8013982:	4618      	mov	r0, r3
 8013984:	f7ff faec 	bl	8012f60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 801398e:	4618      	mov	r0, r3
 8013990:	f7ff f9de 	bl	8012d50 <_ZN8touchgfx8TextAreaC1Ev>
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 801399a:	4618      	mov	r0, r3
 801399c:	f7ff fae0 	bl	8012f60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 80139a6:	4618      	mov	r0, r3
 80139a8:	f7ff f9d2 	bl	8012d50 <_ZN8touchgfx8TextAreaC1Ev>
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 80139b2:	4618      	mov	r0, r3
 80139b4:	f7ff fad4 	bl	8012f60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 80139be:	4618      	mov	r0, r3
 80139c0:	f001 fba2 	bl	8015108 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEC1Ev>
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	f603 4014 	addw	r0, r3, #3092	; 0xc14
 80139ca:	4b45      	ldr	r3, [pc, #276]	; (8013ae0 <_ZN12MainViewBaseC1Ev+0x380>)
 80139cc:	61fb      	str	r3, [r7, #28]
 80139ce:	2300      	movs	r3, #0
 80139d0:	623b      	str	r3, [r7, #32]
 80139d2:	f107 031c 	add.w	r3, r7, #28
 80139d6:	cb0c      	ldmia	r3, {r2, r3}
 80139d8:	6879      	ldr	r1, [r7, #4]
 80139da:	f001 fbdf 	bl	801519c <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 80139e4:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 80139e8:	4618      	mov	r0, r3
 80139ea:	f009 fe5b 	bl	801d6a4 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    backgroundBox.setPosition(0, 0, 488, 278);
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80139f4:	f44f 738b 	mov.w	r3, #278	; 0x116
 80139f8:	9300      	str	r3, [sp, #0]
 80139fa:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
 80139fe:	2200      	movs	r2, #0
 8013a00:	2100      	movs	r1, #0
 8013a02:	f7fd f991 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    backgroundBox.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8013a0c:	2200      	movs	r2, #0
 8013a0e:	2100      	movs	r1, #0
 8013a10:	2000      	movs	r0, #0
 8013a12:	f7ff fe7b 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013a16:	4603      	mov	r3, r0
 8013a18:	4619      	mov	r1, r3
 8013a1a:	4620      	mov	r0, r4
 8013a1c:	f7ff f964 	bl	8012ce8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    KpaDescriptor.setXY(224, 218);
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	3370      	adds	r3, #112	; 0x70
 8013a24:	22da      	movs	r2, #218	; 0xda
 8013a26:	21e0      	movs	r1, #224	; 0xe0
 8013a28:	4618      	mov	r0, r3
 8013a2a:	f7fe ff2b 	bl	8012884 <_ZN8touchgfx8Drawable5setXYEss>
    KpaDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8013a34:	2200      	movs	r2, #0
 8013a36:	21dc      	movs	r1, #220	; 0xdc
 8013a38:	20ff      	movs	r0, #255	; 0xff
 8013a3a:	f7ff fe67 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013a3e:	4603      	mov	r3, r0
 8013a40:	4619      	mov	r1, r3
 8013a42:	4620      	mov	r0, r4
 8013a44:	f7ff f9c7 	bl	8012dd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    KpaDescriptor.setLinespacing(0);
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	3370      	adds	r3, #112	; 0x70
 8013a4c:	2100      	movs	r1, #0
 8013a4e:	4618      	mov	r0, r3
 8013a50:	f7ff fa14 	bl	8012e7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    KpaDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID41));
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8013a5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013a5e:	211a      	movs	r1, #26
 8013a60:	4618      	mov	r0, r3
 8013a62:	f7ff f94f 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8013a66:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8013a68:	4620      	mov	r0, r4
 8013a6a:	f009 f9f3 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CltDecsriptor.setXY(338, 126);
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	33a4      	adds	r3, #164	; 0xa4
 8013a72:	227e      	movs	r2, #126	; 0x7e
 8013a74:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8013a78:	4618      	mov	r0, r3
 8013a7a:	f7fe ff03 	bl	8012884 <_ZN8touchgfx8Drawable5setXYEss>
    CltDecsriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8013a84:	2200      	movs	r2, #0
 8013a86:	21dc      	movs	r1, #220	; 0xdc
 8013a88:	20ff      	movs	r0, #255	; 0xff
 8013a8a:	f7ff fe3f 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013a8e:	4603      	mov	r3, r0
 8013a90:	4619      	mov	r1, r3
 8013a92:	4620      	mov	r0, r4
 8013a94:	f7ff f99f 	bl	8012dd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CltDecsriptor.setLinespacing(0);
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	33a4      	adds	r3, #164	; 0xa4
 8013a9c:	2100      	movs	r1, #0
 8013a9e:	4618      	mov	r0, r3
 8013aa0:	f7ff f9ec 	bl	8012e7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    CltDecsriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID40));
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8013aaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013aae:	2119      	movs	r1, #25
 8013ab0:	4618      	mov	r0, r3
 8013ab2:	f7ff f927 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8013ab6:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8013ab8:	4620      	mov	r0, r4
 8013aba:	f009 f9cb 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    LambdaDescriptor.setXY(216, 136);
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	33d8      	adds	r3, #216	; 0xd8
 8013ac2:	2288      	movs	r2, #136	; 0x88
 8013ac4:	21d8      	movs	r1, #216	; 0xd8
 8013ac6:	4618      	mov	r0, r3
 8013ac8:	f7fe fedc 	bl	8012884 <_ZN8touchgfx8Drawable5setXYEss>
    LambdaDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8013ad2:	2200      	movs	r2, #0
 8013ad4:	21dc      	movs	r1, #220	; 0xdc
 8013ad6:	20ff      	movs	r0, #255	; 0xff
 8013ad8:	e004      	b.n	8013ae4 <_ZN12MainViewBaseC1Ev+0x384>
 8013ada:	bf00      	nop
 8013adc:	0802c7f4 	.word	0x0802c7f4
 8013ae0:	08015061 	.word	0x08015061
 8013ae4:	f7ff fe12 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013ae8:	4603      	mov	r3, r0
 8013aea:	4619      	mov	r1, r3
 8013aec:	4620      	mov	r0, r4
 8013aee:	f7ff f972 	bl	8012dd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    LambdaDescriptor.setLinespacing(0);
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	33d8      	adds	r3, #216	; 0xd8
 8013af6:	2100      	movs	r1, #0
 8013af8:	4618      	mov	r0, r3
 8013afa:	f7ff f9bf 	bl	8012e7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    LambdaDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID33));
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8013b04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013b08:	2113      	movs	r1, #19
 8013b0a:	4618      	mov	r0, r3
 8013b0c:	f7ff f8fa 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8013b10:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8013b12:	4620      	mov	r0, r4
 8013b14:	f009 f99e 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TrgtDescriptor.setXY(116, 126);
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8013b1e:	227e      	movs	r2, #126	; 0x7e
 8013b20:	2174      	movs	r1, #116	; 0x74
 8013b22:	4618      	mov	r0, r3
 8013b24:	f7fe feae 	bl	8012884 <_ZN8touchgfx8Drawable5setXYEss>
    TrgtDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 8013b2e:	2200      	movs	r2, #0
 8013b30:	21dc      	movs	r1, #220	; 0xdc
 8013b32:	20ff      	movs	r0, #255	; 0xff
 8013b34:	f7ff fdea 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013b38:	4603      	mov	r3, r0
 8013b3a:	4619      	mov	r1, r3
 8013b3c:	4620      	mov	r0, r4
 8013b3e:	f7ff f94a 	bl	8012dd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TrgtDescriptor.setLinespacing(0);
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8013b48:	2100      	movs	r1, #0
 8013b4a:	4618      	mov	r0, r3
 8013b4c:	f7ff f996 	bl	8012e7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    TrgtDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID32));
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 8013b56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013b5a:	2112      	movs	r1, #18
 8013b5c:	4618      	mov	r0, r3
 8013b5e:	f7ff f8d1 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8013b62:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8013b64:	4620      	mov	r0, r4
 8013b66:	f009 f975 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    LambdaValue.setPosition(187, 77, 114, 62);
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	f503 70a0 	add.w	r0, r3, #320	; 0x140
 8013b70:	233e      	movs	r3, #62	; 0x3e
 8013b72:	9300      	str	r3, [sp, #0]
 8013b74:	2372      	movs	r3, #114	; 0x72
 8013b76:	224d      	movs	r2, #77	; 0x4d
 8013b78:	21bb      	movs	r1, #187	; 0xbb
 8013b7a:	f7fd f8d5 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    LambdaValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8013b84:	22ff      	movs	r2, #255	; 0xff
 8013b86:	21ff      	movs	r1, #255	; 0xff
 8013b88:	20ff      	movs	r0, #255	; 0xff
 8013b8a:	f7ff fdbf 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013b8e:	4603      	mov	r3, r0
 8013b90:	4619      	mov	r1, r3
 8013b92:	4620      	mov	r0, r4
 8013b94:	f7ff f91f 	bl	8012dd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    LambdaValue.setLinespacing(0);
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8013b9e:	2100      	movs	r1, #0
 8013ba0:	4618      	mov	r0, r3
 8013ba2:	f7ff f96b 	bl	8012e7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(LambdaValueBuffer, LAMBDAVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID10).getText());
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	f503 6437 	add.w	r4, r3, #2928	; 0xb70
 8013bac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8013bb0:	2103      	movs	r1, #3
 8013bb2:	4618      	mov	r0, r3
 8013bb4:	f7ff f8a6 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8013bb8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8013bbc:	4618      	mov	r0, r3
 8013bbe:	f7ff f8b1 	bl	8012d24 <_ZNK8touchgfx9TypedText7getTextEv>
 8013bc2:	4603      	mov	r3, r0
 8013bc4:	4ae1      	ldr	r2, [pc, #900]	; (8013f4c <_ZN12MainViewBaseC1Ev+0x7ec>)
 8013bc6:	2105      	movs	r1, #5
 8013bc8:	4620      	mov	r0, r4
 8013bca:	f00c fe41 	bl	8020850 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    LambdaValue.setWildcard(LambdaValueBuffer);
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	f503 6337 	add.w	r3, r3, #2928	; 0xb70
 8013bda:	4619      	mov	r1, r3
 8013bdc:	4610      	mov	r0, r2
 8013bde:	f7ff f9d5 	bl	8012f8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    LambdaValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID9));
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8013be8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8013bec:	2102      	movs	r1, #2
 8013bee:	4618      	mov	r0, r3
 8013bf0:	f7ff f888 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8013bf4:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8013bf6:	4620      	mov	r0, r4
 8013bf8:	f009 f92c 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TrgtValue.setPosition(102, 85, 71, 41);
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	f503 70bc 	add.w	r0, r3, #376	; 0x178
 8013c02:	2329      	movs	r3, #41	; 0x29
 8013c04:	9300      	str	r3, [sp, #0]
 8013c06:	2347      	movs	r3, #71	; 0x47
 8013c08:	2255      	movs	r2, #85	; 0x55
 8013c0a:	2166      	movs	r1, #102	; 0x66
 8013c0c:	f7fd f88c 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    TrgtValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	f503 74bc 	add.w	r4, r3, #376	; 0x178
 8013c16:	22ff      	movs	r2, #255	; 0xff
 8013c18:	21ff      	movs	r1, #255	; 0xff
 8013c1a:	20ff      	movs	r0, #255	; 0xff
 8013c1c:	f7ff fd76 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013c20:	4603      	mov	r3, r0
 8013c22:	4619      	mov	r1, r3
 8013c24:	4620      	mov	r0, r4
 8013c26:	f7ff f8d6 	bl	8012dd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TrgtValue.setLinespacing(0);
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8013c30:	2100      	movs	r1, #0
 8013c32:	4618      	mov	r0, r3
 8013c34:	f7ff f922 	bl	8012e7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(TrgtValueBuffer, TRGTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID8).getText());
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	f603 347a 	addw	r4, r3, #2938	; 0xb7a
 8013c3e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8013c42:	2101      	movs	r1, #1
 8013c44:	4618      	mov	r0, r3
 8013c46:	f7ff f85d 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8013c4a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8013c4e:	4618      	mov	r0, r3
 8013c50:	f7ff f868 	bl	8012d24 <_ZNK8touchgfx9TypedText7getTextEv>
 8013c54:	4603      	mov	r3, r0
 8013c56:	4abd      	ldr	r2, [pc, #756]	; (8013f4c <_ZN12MainViewBaseC1Ev+0x7ec>)
 8013c58:	2105      	movs	r1, #5
 8013c5a:	4620      	mov	r0, r4
 8013c5c:	f00c fdf8 	bl	8020850 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    TrgtValue.setWildcard(TrgtValueBuffer);
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	f503 72bc 	add.w	r2, r3, #376	; 0x178
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	f603 337a 	addw	r3, r3, #2938	; 0xb7a
 8013c6c:	4619      	mov	r1, r3
 8013c6e:	4610      	mov	r0, r2
 8013c70:	f7ff f98c 	bl	8012f8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    TrgtValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID7));
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	f503 74bc 	add.w	r4, r3, #376	; 0x178
 8013c7a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013c7e:	2100      	movs	r1, #0
 8013c80:	4618      	mov	r0, r3
 8013c82:	f7ff f83f 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8013c86:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8013c8a:	4620      	mov	r0, r4
 8013c8c:	f009 f8e2 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    backgroundImage.setXY(179, 63);
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8013c96:	223f      	movs	r2, #63	; 0x3f
 8013c98:	21b3      	movs	r1, #179	; 0xb3
 8013c9a:	4618      	mov	r0, r3
 8013c9c:	f7fe fdf2 	bl	8012884 <_ZN8touchgfx8Drawable5setXYEss>
    backgroundImage.setVisible(false);
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8013ca6:	2100      	movs	r1, #0
 8013ca8:	4618      	mov	r0, r3
 8013caa:	f7fe fe5c 	bl	8012966 <_ZN8touchgfx8Drawable10setVisibleEb>

    rpm1.setPosition(54, 63, 18, 14);
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	f503 70ee 	add.w	r0, r3, #476	; 0x1dc
 8013cb4:	230e      	movs	r3, #14
 8013cb6:	9300      	str	r3, [sp, #0]
 8013cb8:	2312      	movs	r3, #18
 8013cba:	223f      	movs	r2, #63	; 0x3f
 8013cbc:	2136      	movs	r1, #54	; 0x36
 8013cbe:	f7fd f833 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 8013cc8:	22ff      	movs	r2, #255	; 0xff
 8013cca:	21ff      	movs	r1, #255	; 0xff
 8013ccc:	20ff      	movs	r0, #255	; 0xff
 8013cce:	f7ff fd1d 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013cd2:	4603      	mov	r3, r0
 8013cd4:	4619      	mov	r1, r3
 8013cd6:	4620      	mov	r0, r4
 8013cd8:	f7ff f87d 	bl	8012dd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm1.setLinespacing(0);
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8013ce2:	2100      	movs	r1, #0
 8013ce4:	4618      	mov	r0, r3
 8013ce6:	f7ff f8c9 	bl	8012e7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm1Buffer, RPM1_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID60).getText());
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	f603 3484 	addw	r4, r3, #2948	; 0xb84
 8013cf0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013cf4:	2126      	movs	r1, #38	; 0x26
 8013cf6:	4618      	mov	r0, r3
 8013cf8:	f7ff f804 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8013cfc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013d00:	4618      	mov	r0, r3
 8013d02:	f7ff f80f 	bl	8012d24 <_ZNK8touchgfx9TypedText7getTextEv>
 8013d06:	4603      	mov	r3, r0
 8013d08:	4a90      	ldr	r2, [pc, #576]	; (8013f4c <_ZN12MainViewBaseC1Ev+0x7ec>)
 8013d0a:	2102      	movs	r1, #2
 8013d0c:	4620      	mov	r0, r4
 8013d0e:	f00c fd9f 	bl	8020850 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm1.setWildcard(rpm1Buffer);
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	f503 72ee 	add.w	r2, r3, #476	; 0x1dc
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	f603 3384 	addw	r3, r3, #2948	; 0xb84
 8013d1e:	4619      	mov	r1, r3
 8013d20:	4610      	mov	r0, r2
 8013d22:	f7ff f933 	bl	8012f8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID11));
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	f503 74ee 	add.w	r4, r3, #476	; 0x1dc
 8013d2c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013d30:	2104      	movs	r1, #4
 8013d32:	4618      	mov	r0, r3
 8013d34:	f7fe ffe6 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8013d38:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 8013d3c:	4620      	mov	r0, r4
 8013d3e:	f009 f889 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm2.setPosition(115, 63, 18, 14);
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	f503 7005 	add.w	r0, r3, #532	; 0x214
 8013d48:	230e      	movs	r3, #14
 8013d4a:	9300      	str	r3, [sp, #0]
 8013d4c:	2312      	movs	r3, #18
 8013d4e:	223f      	movs	r2, #63	; 0x3f
 8013d50:	2173      	movs	r1, #115	; 0x73
 8013d52:	f7fc ffe9 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm2.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	f503 7405 	add.w	r4, r3, #532	; 0x214
 8013d5c:	22ff      	movs	r2, #255	; 0xff
 8013d5e:	21ff      	movs	r1, #255	; 0xff
 8013d60:	20ff      	movs	r0, #255	; 0xff
 8013d62:	f7ff fcd3 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013d66:	4603      	mov	r3, r0
 8013d68:	4619      	mov	r1, r3
 8013d6a:	4620      	mov	r0, r4
 8013d6c:	f7ff f833 	bl	8012dd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm2.setLinespacing(0);
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8013d76:	2100      	movs	r1, #0
 8013d78:	4618      	mov	r0, r3
 8013d7a:	f7ff f87f 	bl	8012e7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm2Buffer, RPM2_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID61).getText());
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	f603 3488 	addw	r4, r3, #2952	; 0xb88
 8013d84:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013d88:	2127      	movs	r1, #39	; 0x27
 8013d8a:	4618      	mov	r0, r3
 8013d8c:	f7fe ffba 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8013d90:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013d94:	4618      	mov	r0, r3
 8013d96:	f7fe ffc5 	bl	8012d24 <_ZNK8touchgfx9TypedText7getTextEv>
 8013d9a:	4603      	mov	r3, r0
 8013d9c:	4a6b      	ldr	r2, [pc, #428]	; (8013f4c <_ZN12MainViewBaseC1Ev+0x7ec>)
 8013d9e:	2102      	movs	r1, #2
 8013da0:	4620      	mov	r0, r4
 8013da2:	f00c fd55 	bl	8020850 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm2.setWildcard(rpm2Buffer);
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	f503 7205 	add.w	r2, r3, #532	; 0x214
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	f603 3388 	addw	r3, r3, #2952	; 0xb88
 8013db2:	4619      	mov	r1, r3
 8013db4:	4610      	mov	r0, r2
 8013db6:	f7ff f8e9 	bl	8012f8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID12));
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	f503 7405 	add.w	r4, r3, #532	; 0x214
 8013dc0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013dc4:	2105      	movs	r1, #5
 8013dc6:	4618      	mov	r0, r3
 8013dc8:	f7fe ff9c 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8013dcc:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8013dd0:	4620      	mov	r0, r4
 8013dd2:	f009 f83f 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm3.setPosition(173, 62, 18, 14);
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	f503 7013 	add.w	r0, r3, #588	; 0x24c
 8013ddc:	230e      	movs	r3, #14
 8013dde:	9300      	str	r3, [sp, #0]
 8013de0:	2312      	movs	r3, #18
 8013de2:	223e      	movs	r2, #62	; 0x3e
 8013de4:	21ad      	movs	r1, #173	; 0xad
 8013de6:	f7fc ff9f 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm3.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	f503 7413 	add.w	r4, r3, #588	; 0x24c
 8013df0:	22ff      	movs	r2, #255	; 0xff
 8013df2:	21ff      	movs	r1, #255	; 0xff
 8013df4:	20ff      	movs	r0, #255	; 0xff
 8013df6:	f7ff fc89 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013dfa:	4603      	mov	r3, r0
 8013dfc:	4619      	mov	r1, r3
 8013dfe:	4620      	mov	r0, r4
 8013e00:	f7fe ffe9 	bl	8012dd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm3.setLinespacing(0);
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8013e0a:	2100      	movs	r1, #0
 8013e0c:	4618      	mov	r0, r3
 8013e0e:	f7ff f835 	bl	8012e7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm3Buffer, RPM3_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID62).getText());
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	f603 348c 	addw	r4, r3, #2956	; 0xb8c
 8013e18:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013e1c:	2128      	movs	r1, #40	; 0x28
 8013e1e:	4618      	mov	r0, r3
 8013e20:	f7fe ff70 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8013e24:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013e28:	4618      	mov	r0, r3
 8013e2a:	f7fe ff7b 	bl	8012d24 <_ZNK8touchgfx9TypedText7getTextEv>
 8013e2e:	4603      	mov	r3, r0
 8013e30:	4a46      	ldr	r2, [pc, #280]	; (8013f4c <_ZN12MainViewBaseC1Ev+0x7ec>)
 8013e32:	2102      	movs	r1, #2
 8013e34:	4620      	mov	r0, r4
 8013e36:	f00c fd0b 	bl	8020850 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm3.setWildcard(rpm3Buffer);
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	f503 7213 	add.w	r2, r3, #588	; 0x24c
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	f603 338c 	addw	r3, r3, #2956	; 0xb8c
 8013e46:	4619      	mov	r1, r3
 8013e48:	4610      	mov	r0, r2
 8013e4a:	f7ff f89f 	bl	8012f8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm3.setTypedText(touchgfx::TypedText(T_SINGLEUSEID13));
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	f503 7413 	add.w	r4, r3, #588	; 0x24c
 8013e54:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013e58:	2106      	movs	r1, #6
 8013e5a:	4618      	mov	r0, r3
 8013e5c:	f7fe ff52 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8013e60:	f8b7 1058 	ldrh.w	r1, [r7, #88]	; 0x58
 8013e64:	4620      	mov	r0, r4
 8013e66:	f008 fff5 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm4.setPosition(231, 62, 18, 14);
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	f503 7021 	add.w	r0, r3, #644	; 0x284
 8013e70:	230e      	movs	r3, #14
 8013e72:	9300      	str	r3, [sp, #0]
 8013e74:	2312      	movs	r3, #18
 8013e76:	223e      	movs	r2, #62	; 0x3e
 8013e78:	21e7      	movs	r1, #231	; 0xe7
 8013e7a:	f7fc ff55 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm4.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	f503 7421 	add.w	r4, r3, #644	; 0x284
 8013e84:	22ff      	movs	r2, #255	; 0xff
 8013e86:	21ff      	movs	r1, #255	; 0xff
 8013e88:	20ff      	movs	r0, #255	; 0xff
 8013e8a:	f7ff fc3f 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013e8e:	4603      	mov	r3, r0
 8013e90:	4619      	mov	r1, r3
 8013e92:	4620      	mov	r0, r4
 8013e94:	f7fe ff9f 	bl	8012dd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm4.setLinespacing(0);
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8013e9e:	2100      	movs	r1, #0
 8013ea0:	4618      	mov	r0, r3
 8013ea2:	f7fe ffeb 	bl	8012e7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm4Buffer, RPM4_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID63).getText());
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	f503 6439 	add.w	r4, r3, #2960	; 0xb90
 8013eac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013eb0:	2129      	movs	r1, #41	; 0x29
 8013eb2:	4618      	mov	r0, r3
 8013eb4:	f7fe ff26 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8013eb8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013ebc:	4618      	mov	r0, r3
 8013ebe:	f7fe ff31 	bl	8012d24 <_ZNK8touchgfx9TypedText7getTextEv>
 8013ec2:	4603      	mov	r3, r0
 8013ec4:	4a21      	ldr	r2, [pc, #132]	; (8013f4c <_ZN12MainViewBaseC1Ev+0x7ec>)
 8013ec6:	2102      	movs	r1, #2
 8013ec8:	4620      	mov	r0, r4
 8013eca:	f00c fcc1 	bl	8020850 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm4.setWildcard(rpm4Buffer);
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	f503 7221 	add.w	r2, r3, #644	; 0x284
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	f503 6339 	add.w	r3, r3, #2960	; 0xb90
 8013eda:	4619      	mov	r1, r3
 8013edc:	4610      	mov	r0, r2
 8013ede:	f7ff f855 	bl	8012f8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm4.setTypedText(touchgfx::TypedText(T_SINGLEUSEID14));
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	f503 7421 	add.w	r4, r3, #644	; 0x284
 8013ee8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8013eec:	2107      	movs	r1, #7
 8013eee:	4618      	mov	r0, r3
 8013ef0:	f7fe ff08 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8013ef4:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8013ef8:	4620      	mov	r0, r4
 8013efa:	f008 ffab 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm5.setPosition(292, 63, 18, 14);
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	f503 702f 	add.w	r0, r3, #700	; 0x2bc
 8013f04:	230e      	movs	r3, #14
 8013f06:	9300      	str	r3, [sp, #0]
 8013f08:	2312      	movs	r3, #18
 8013f0a:	223f      	movs	r2, #63	; 0x3f
 8013f0c:	f44f 7192 	mov.w	r1, #292	; 0x124
 8013f10:	f7fc ff0a 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm5.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	f503 742f 	add.w	r4, r3, #700	; 0x2bc
 8013f1a:	22ff      	movs	r2, #255	; 0xff
 8013f1c:	21ff      	movs	r1, #255	; 0xff
 8013f1e:	20ff      	movs	r0, #255	; 0xff
 8013f20:	f7ff fbf4 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013f24:	4603      	mov	r3, r0
 8013f26:	4619      	mov	r1, r3
 8013f28:	4620      	mov	r0, r4
 8013f2a:	f7fe ff54 	bl	8012dd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm5.setLinespacing(0);
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8013f34:	2100      	movs	r1, #0
 8013f36:	4618      	mov	r0, r3
 8013f38:	f7fe ffa0 	bl	8012e7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm5Buffer, RPM5_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID64).getText());
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	f603 3494 	addw	r4, r3, #2964	; 0xb94
 8013f42:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013f46:	212a      	movs	r1, #42	; 0x2a
 8013f48:	4618      	mov	r0, r3
 8013f4a:	e001      	b.n	8013f50 <_ZN12MainViewBaseC1Ev+0x7f0>
 8013f4c:	0802bca8 	.word	0x0802bca8
 8013f50:	f7fe fed8 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8013f54:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013f58:	4618      	mov	r0, r3
 8013f5a:	f7fe fee3 	bl	8012d24 <_ZNK8touchgfx9TypedText7getTextEv>
 8013f5e:	4603      	mov	r3, r0
 8013f60:	4ae2      	ldr	r2, [pc, #904]	; (80142ec <_ZN12MainViewBaseC1Ev+0xb8c>)
 8013f62:	2102      	movs	r1, #2
 8013f64:	4620      	mov	r0, r4
 8013f66:	f00c fc73 	bl	8020850 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm5.setWildcard(rpm5Buffer);
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	f503 722f 	add.w	r2, r3, #700	; 0x2bc
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	f603 3394 	addw	r3, r3, #2964	; 0xb94
 8013f76:	4619      	mov	r1, r3
 8013f78:	4610      	mov	r0, r2
 8013f7a:	f7ff f807 	bl	8012f8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm5.setTypedText(touchgfx::TypedText(T_SINGLEUSEID15));
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	f503 742f 	add.w	r4, r3, #700	; 0x2bc
 8013f84:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8013f88:	2108      	movs	r1, #8
 8013f8a:	4618      	mov	r0, r3
 8013f8c:	f7fe feba 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8013f90:	f8b7 1068 	ldrh.w	r1, [r7, #104]	; 0x68
 8013f94:	4620      	mov	r0, r4
 8013f96:	f008 ff5d 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm6.setPosition(349, 63, 18, 14);
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	f503 703d 	add.w	r0, r3, #756	; 0x2f4
 8013fa0:	230e      	movs	r3, #14
 8013fa2:	9300      	str	r3, [sp, #0]
 8013fa4:	2312      	movs	r3, #18
 8013fa6:	223f      	movs	r2, #63	; 0x3f
 8013fa8:	f240 115d 	movw	r1, #349	; 0x15d
 8013fac:	f7fc febc 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm6.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	f503 743d 	add.w	r4, r3, #756	; 0x2f4
 8013fb6:	22ff      	movs	r2, #255	; 0xff
 8013fb8:	21ff      	movs	r1, #255	; 0xff
 8013fba:	20ff      	movs	r0, #255	; 0xff
 8013fbc:	f7ff fba6 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8013fc0:	4603      	mov	r3, r0
 8013fc2:	4619      	mov	r1, r3
 8013fc4:	4620      	mov	r0, r4
 8013fc6:	f7fe ff06 	bl	8012dd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm6.setLinespacing(0);
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8013fd0:	2100      	movs	r1, #0
 8013fd2:	4618      	mov	r0, r3
 8013fd4:	f7fe ff52 	bl	8012e7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm6Buffer, RPM6_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID65).getText());
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	f603 3498 	addw	r4, r3, #2968	; 0xb98
 8013fde:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8013fe2:	212b      	movs	r1, #43	; 0x2b
 8013fe4:	4618      	mov	r0, r3
 8013fe6:	f7fe fe8d 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8013fea:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8013fee:	4618      	mov	r0, r3
 8013ff0:	f7fe fe98 	bl	8012d24 <_ZNK8touchgfx9TypedText7getTextEv>
 8013ff4:	4603      	mov	r3, r0
 8013ff6:	4abd      	ldr	r2, [pc, #756]	; (80142ec <_ZN12MainViewBaseC1Ev+0xb8c>)
 8013ff8:	2102      	movs	r1, #2
 8013ffa:	4620      	mov	r0, r4
 8013ffc:	f00c fc28 	bl	8020850 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm6.setWildcard(rpm6Buffer);
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	f503 723d 	add.w	r2, r3, #756	; 0x2f4
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	f603 3398 	addw	r3, r3, #2968	; 0xb98
 801400c:	4619      	mov	r1, r3
 801400e:	4610      	mov	r0, r2
 8014010:	f7fe ffbc 	bl	8012f8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm6.setTypedText(touchgfx::TypedText(T_SINGLEUSEID16));
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	f503 743d 	add.w	r4, r3, #756	; 0x2f4
 801401a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801401e:	2109      	movs	r1, #9
 8014020:	4618      	mov	r0, r3
 8014022:	f7fe fe6f 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8014026:	f8b7 1070 	ldrh.w	r1, [r7, #112]	; 0x70
 801402a:	4620      	mov	r0, r4
 801402c:	f008 ff12 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm7.setPosition(411, 62, 18, 15);
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	f503 704b 	add.w	r0, r3, #812	; 0x32c
 8014036:	230f      	movs	r3, #15
 8014038:	9300      	str	r3, [sp, #0]
 801403a:	2312      	movs	r3, #18
 801403c:	223e      	movs	r2, #62	; 0x3e
 801403e:	f240 119b 	movw	r1, #411	; 0x19b
 8014042:	f7fc fe71 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm7.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	f503 744b 	add.w	r4, r3, #812	; 0x32c
 801404c:	22ff      	movs	r2, #255	; 0xff
 801404e:	21ff      	movs	r1, #255	; 0xff
 8014050:	20ff      	movs	r0, #255	; 0xff
 8014052:	f7ff fb5b 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014056:	4603      	mov	r3, r0
 8014058:	4619      	mov	r1, r3
 801405a:	4620      	mov	r0, r4
 801405c:	f7fe febb 	bl	8012dd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm7.setLinespacing(0);
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8014066:	2100      	movs	r1, #0
 8014068:	4618      	mov	r0, r3
 801406a:	f7fe ff07 	bl	8012e7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm7Buffer, RPM7_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID66).getText());
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	f603 349c 	addw	r4, r3, #2972	; 0xb9c
 8014074:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8014078:	212c      	movs	r1, #44	; 0x2c
 801407a:	4618      	mov	r0, r3
 801407c:	f7fe fe42 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8014080:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8014084:	4618      	mov	r0, r3
 8014086:	f7fe fe4d 	bl	8012d24 <_ZNK8touchgfx9TypedText7getTextEv>
 801408a:	4603      	mov	r3, r0
 801408c:	4a97      	ldr	r2, [pc, #604]	; (80142ec <_ZN12MainViewBaseC1Ev+0xb8c>)
 801408e:	2102      	movs	r1, #2
 8014090:	4620      	mov	r0, r4
 8014092:	f00c fbdd 	bl	8020850 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm7.setWildcard(rpm7Buffer);
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	f503 724b 	add.w	r2, r3, #812	; 0x32c
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	f603 339c 	addw	r3, r3, #2972	; 0xb9c
 80140a2:	4619      	mov	r1, r3
 80140a4:	4610      	mov	r0, r2
 80140a6:	f7fe ff71 	bl	8012f8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm7.setTypedText(touchgfx::TypedText(T_SINGLEUSEID17));
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	f503 744b 	add.w	r4, r3, #812	; 0x32c
 80140b0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80140b4:	210a      	movs	r1, #10
 80140b6:	4618      	mov	r0, r3
 80140b8:	f7fe fe24 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 80140bc:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
 80140c0:	4620      	mov	r0, r4
 80140c2:	f008 fec7 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    rpm8.setPosition(462, 62, 18, 14);
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	f503 7059 	add.w	r0, r3, #868	; 0x364
 80140cc:	230e      	movs	r3, #14
 80140ce:	9300      	str	r3, [sp, #0]
 80140d0:	2312      	movs	r3, #18
 80140d2:	223e      	movs	r2, #62	; 0x3e
 80140d4:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 80140d8:	f7fc fe26 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpm8.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	f503 7459 	add.w	r4, r3, #868	; 0x364
 80140e2:	22ff      	movs	r2, #255	; 0xff
 80140e4:	21ff      	movs	r1, #255	; 0xff
 80140e6:	20ff      	movs	r0, #255	; 0xff
 80140e8:	f7ff fb10 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80140ec:	4603      	mov	r3, r0
 80140ee:	4619      	mov	r1, r3
 80140f0:	4620      	mov	r0, r4
 80140f2:	f7fe fe70 	bl	8012dd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    rpm8.setLinespacing(0);
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80140fc:	2100      	movs	r1, #0
 80140fe:	4618      	mov	r0, r3
 8014100:	f7fe febc 	bl	8012e7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(rpm8Buffer, RPM8_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID67).getText());
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	f503 643a 	add.w	r4, r3, #2976	; 0xba0
 801410a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801410e:	212d      	movs	r1, #45	; 0x2d
 8014110:	4618      	mov	r0, r3
 8014112:	f7fe fdf7 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8014116:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801411a:	4618      	mov	r0, r3
 801411c:	f7fe fe02 	bl	8012d24 <_ZNK8touchgfx9TypedText7getTextEv>
 8014120:	4603      	mov	r3, r0
 8014122:	4a72      	ldr	r2, [pc, #456]	; (80142ec <_ZN12MainViewBaseC1Ev+0xb8c>)
 8014124:	2102      	movs	r1, #2
 8014126:	4620      	mov	r0, r4
 8014128:	f00c fb92 	bl	8020850 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    rpm8.setWildcard(rpm8Buffer);
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	f503 7259 	add.w	r2, r3, #868	; 0x364
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 8014138:	4619      	mov	r1, r3
 801413a:	4610      	mov	r0, r2
 801413c:	f7fe ff26 	bl	8012f8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpm8.setTypedText(touchgfx::TypedText(T_SINGLEUSEID18));
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	f503 7459 	add.w	r4, r3, #868	; 0x364
 8014146:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801414a:	210b      	movs	r1, #11
 801414c:	4618      	mov	r0, r3
 801414e:	f7fe fdd9 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8014152:	f8b7 1080 	ldrh.w	r1, [r7, #128]	; 0x80
 8014156:	4620      	mov	r0, r4
 8014158:	f008 fe7c 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    line11.setPosition(-2, 58, 490, 5);
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	f503 7067 	add.w	r0, r3, #924	; 0x39c
 8014162:	2305      	movs	r3, #5
 8014164:	9300      	str	r3, [sp, #0]
 8014166:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
 801416a:	223a      	movs	r2, #58	; 0x3a
 801416c:	f06f 0101 	mvn.w	r1, #1
 8014170:	f7fc fdda 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    line11Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	f503 6482 	add.w	r4, r3, #1040	; 0x410
 801417a:	22ff      	movs	r2, #255	; 0xff
 801417c:	21ff      	movs	r1, #255	; 0xff
 801417e:	20ff      	movs	r0, #255	; 0xff
 8014180:	f7ff fac4 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014184:	4603      	mov	r3, r0
 8014186:	22ff      	movs	r2, #255	; 0xff
 8014188:	4619      	mov	r1, r3
 801418a:	4620      	mov	r0, r4
 801418c:	f008 f869 	bl	801c262 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line11.setPainter(line11Painter);
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	f503 7267 	add.w	r2, r3, #924	; 0x39c
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 801419c:	4619      	mov	r1, r3
 801419e:	4610      	mov	r0, r2
 80141a0:	f008 f8c8 	bl	801c334 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line11.setStart(0, 3);
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 80141aa:	2203      	movs	r2, #3
 80141ac:	2100      	movs	r1, #0
 80141ae:	4618      	mov	r0, r3
 80141b0:	f001 f814 	bl	80151dc <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line11.setEnd(490, 3);
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 80141ba:	2203      	movs	r2, #3
 80141bc:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 80141c0:	4618      	mov	r0, r3
 80141c2:	f001 f831 	bl	8015228 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line11.setLineWidth(2);
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 80141cc:	2102      	movs	r1, #2
 80141ce:	4618      	mov	r0, r3
 80141d0:	f001 f850 	bl	8015274 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line11.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 80141da:	2101      	movs	r1, #1
 80141dc:	4618      	mov	r0, r3
 80141de:	f008 fbc3 	bl	801c968 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    IATDescriptor.setXY(43, 126);
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 80141e8:	227e      	movs	r2, #126	; 0x7e
 80141ea:	212b      	movs	r1, #43	; 0x2b
 80141ec:	4618      	mov	r0, r3
 80141ee:	f7fe fb49 	bl	8012884 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	f503 6485 	add.w	r4, r3, #1064	; 0x428
 80141f8:	2200      	movs	r2, #0
 80141fa:	21dc      	movs	r1, #220	; 0xdc
 80141fc:	20ff      	movs	r0, #255	; 0xff
 80141fe:	f7ff fa85 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014202:	4603      	mov	r3, r0
 8014204:	4619      	mov	r1, r3
 8014206:	4620      	mov	r0, r4
 8014208:	f7fe fde5 	bl	8012dd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor.setLinespacing(0);
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8014212:	2100      	movs	r1, #0
 8014214:	4618      	mov	r0, r3
 8014216:	f7fe fe31 	bl	8012e7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID30));
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	f503 6485 	add.w	r4, r3, #1064	; 0x428
 8014220:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8014224:	2110      	movs	r1, #16
 8014226:	4618      	mov	r0, r3
 8014228:	f7fe fd6c 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 801422c:	f8b7 1084 	ldrh.w	r1, [r7, #132]	; 0x84
 8014230:	4620      	mov	r0, r4
 8014232:	f008 fe0f 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    EGTDescriptor.setXY(42, 193);
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 801423c:	22c1      	movs	r2, #193	; 0xc1
 801423e:	212a      	movs	r1, #42	; 0x2a
 8014240:	4618      	mov	r0, r3
 8014242:	f7fe fb1f 	bl	8012884 <_ZN8touchgfx8Drawable5setXYEss>
    EGTDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	f203 445c 	addw	r4, r3, #1116	; 0x45c
 801424c:	2200      	movs	r2, #0
 801424e:	21dc      	movs	r1, #220	; 0xdc
 8014250:	20ff      	movs	r0, #255	; 0xff
 8014252:	f7ff fa5b 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014256:	4603      	mov	r3, r0
 8014258:	4619      	mov	r1, r3
 801425a:	4620      	mov	r0, r4
 801425c:	f7fe fdbb 	bl	8012dd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    EGTDescriptor.setLinespacing(0);
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 8014266:	2100      	movs	r1, #0
 8014268:	4618      	mov	r0, r3
 801426a:	f7fe fe07 	bl	8012e7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    EGTDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID31));
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	f203 445c 	addw	r4, r3, #1116	; 0x45c
 8014274:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8014278:	2111      	movs	r1, #17
 801427a:	4618      	mov	r0, r3
 801427c:	f7fe fd42 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8014280:	f8b7 1088 	ldrh.w	r1, [r7, #136]	; 0x88
 8014284:	4620      	mov	r0, r4
 8014286:	f008 fde5 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATValue.setPosition(25, 85, 60, 42);
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	f503 6092 	add.w	r0, r3, #1168	; 0x490
 8014290:	232a      	movs	r3, #42	; 0x2a
 8014292:	9300      	str	r3, [sp, #0]
 8014294:	233c      	movs	r3, #60	; 0x3c
 8014296:	2255      	movs	r2, #85	; 0x55
 8014298:	2119      	movs	r1, #25
 801429a:	f7fc fd45 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    IATValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	f503 6492 	add.w	r4, r3, #1168	; 0x490
 80142a4:	22ff      	movs	r2, #255	; 0xff
 80142a6:	21ff      	movs	r1, #255	; 0xff
 80142a8:	20ff      	movs	r0, #255	; 0xff
 80142aa:	f7ff fa2f 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80142ae:	4603      	mov	r3, r0
 80142b0:	4619      	mov	r1, r3
 80142b2:	4620      	mov	r0, r4
 80142b4:	f7fe fd8f 	bl	8012dd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATValue.setLinespacing(0);
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 80142be:	2100      	movs	r1, #0
 80142c0:	4618      	mov	r0, r3
 80142c2:	f7fe fddb 	bl	8012e7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(IATValueBuffer, IATVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID23).getText());
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	f603 34a4 	addw	r4, r3, #2980	; 0xba4
 80142cc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80142d0:	210d      	movs	r1, #13
 80142d2:	4618      	mov	r0, r3
 80142d4:	f7fe fd16 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 80142d8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80142dc:	4618      	mov	r0, r3
 80142de:	f7fe fd21 	bl	8012d24 <_ZNK8touchgfx9TypedText7getTextEv>
 80142e2:	4603      	mov	r3, r0
 80142e4:	4a01      	ldr	r2, [pc, #4]	; (80142ec <_ZN12MainViewBaseC1Ev+0xb8c>)
 80142e6:	2105      	movs	r1, #5
 80142e8:	4620      	mov	r0, r4
 80142ea:	e001      	b.n	80142f0 <_ZN12MainViewBaseC1Ev+0xb90>
 80142ec:	0802bca8 	.word	0x0802bca8
 80142f0:	f00c faae 	bl	8020850 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    IATValue.setWildcard(IATValueBuffer);
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	f503 6292 	add.w	r2, r3, #1168	; 0x490
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	f603 33a4 	addw	r3, r3, #2980	; 0xba4
 8014300:	4619      	mov	r1, r3
 8014302:	4610      	mov	r0, r2
 8014304:	f7fe fe42 	bl	8012f8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    IATValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID22));
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	f503 6492 	add.w	r4, r3, #1168	; 0x490
 801430e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8014312:	210c      	movs	r1, #12
 8014314:	4618      	mov	r0, r3
 8014316:	f7fe fcf5 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 801431a:	f8b7 1090 	ldrh.w	r1, [r7, #144]	; 0x90
 801431e:	4620      	mov	r0, r4
 8014320:	f008 fd98 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    EGTValue.setPosition(25, 153, 67, 42);
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	f503 6099 	add.w	r0, r3, #1224	; 0x4c8
 801432a:	232a      	movs	r3, #42	; 0x2a
 801432c:	9300      	str	r3, [sp, #0]
 801432e:	2343      	movs	r3, #67	; 0x43
 8014330:	2299      	movs	r2, #153	; 0x99
 8014332:	2119      	movs	r1, #25
 8014334:	f7fc fcf8 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    EGTValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	f503 6499 	add.w	r4, r3, #1224	; 0x4c8
 801433e:	22ff      	movs	r2, #255	; 0xff
 8014340:	21ff      	movs	r1, #255	; 0xff
 8014342:	20ff      	movs	r0, #255	; 0xff
 8014344:	f7ff f9e2 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014348:	4603      	mov	r3, r0
 801434a:	4619      	mov	r1, r3
 801434c:	4620      	mov	r0, r4
 801434e:	f7fe fd42 	bl	8012dd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    EGTValue.setLinespacing(0);
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8014358:	2100      	movs	r1, #0
 801435a:	4618      	mov	r0, r3
 801435c:	f7fe fd8e 	bl	8012e7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(EGTValueBuffer, EGTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID25).getText());
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	f603 34ae 	addw	r4, r3, #2990	; 0xbae
 8014366:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801436a:	210f      	movs	r1, #15
 801436c:	4618      	mov	r0, r3
 801436e:	f7fe fcc9 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8014372:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8014376:	4618      	mov	r0, r3
 8014378:	f7fe fcd4 	bl	8012d24 <_ZNK8touchgfx9TypedText7getTextEv>
 801437c:	4603      	mov	r3, r0
 801437e:	4ae3      	ldr	r2, [pc, #908]	; (801470c <_ZN12MainViewBaseC1Ev+0xfac>)
 8014380:	2105      	movs	r1, #5
 8014382:	4620      	mov	r0, r4
 8014384:	f00c fa64 	bl	8020850 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    EGTValue.setWildcard(EGTValueBuffer);
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	f503 6299 	add.w	r2, r3, #1224	; 0x4c8
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	f603 33ae 	addw	r3, r3, #2990	; 0xbae
 8014394:	4619      	mov	r1, r3
 8014396:	4610      	mov	r0, r2
 8014398:	f7fe fdf8 	bl	8012f8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    EGTValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID24));
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	f503 6499 	add.w	r4, r3, #1224	; 0x4c8
 80143a2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80143a6:	210e      	movs	r1, #14
 80143a8:	4618      	mov	r0, r3
 80143aa:	f7fe fcab 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 80143ae:	f8b7 1098 	ldrh.w	r1, [r7, #152]	; 0x98
 80143b2:	4620      	mov	r0, r4
 80143b4:	f008 fd4e 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATDescriptor_1.setXY(330, 193);
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80143be:	22c1      	movs	r2, #193	; 0xc1
 80143c0:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80143c4:	4618      	mov	r0, r3
 80143c6:	f7fe fa5d 	bl	8012884 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	f503 64a0 	add.w	r4, r3, #1280	; 0x500
 80143d0:	2200      	movs	r2, #0
 80143d2:	21dc      	movs	r1, #220	; 0xdc
 80143d4:	20ff      	movs	r0, #255	; 0xff
 80143d6:	f7ff f999 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80143da:	4603      	mov	r3, r0
 80143dc:	4619      	mov	r1, r3
 80143de:	4620      	mov	r0, r4
 80143e0:	f7fe fcf9 	bl	8012dd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor_1.setLinespacing(0);
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80143ea:	2100      	movs	r1, #0
 80143ec:	4618      	mov	r0, r3
 80143ee:	f7fe fd45 	bl	8012e7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID34));
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	f503 64a0 	add.w	r4, r3, #1280	; 0x500
 80143f8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80143fc:	2114      	movs	r1, #20
 80143fe:	4618      	mov	r0, r3
 8014400:	f7fe fc80 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8014404:	f8b7 109c 	ldrh.w	r1, [r7, #156]	; 0x9c
 8014408:	4620      	mov	r0, r4
 801440a:	f008 fd23 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    ECTDescriptor_1.setXY(412, 193);
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8014414:	22c1      	movs	r2, #193	; 0xc1
 8014416:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 801441a:	4618      	mov	r0, r3
 801441c:	f7fe fa32 	bl	8012884 <_ZN8touchgfx8Drawable5setXYEss>
    ECTDescriptor_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	f203 5434 	addw	r4, r3, #1332	; 0x534
 8014426:	2200      	movs	r2, #0
 8014428:	21dc      	movs	r1, #220	; 0xdc
 801442a:	20ff      	movs	r0, #255	; 0xff
 801442c:	f7ff f96e 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014430:	4603      	mov	r3, r0
 8014432:	4619      	mov	r1, r3
 8014434:	4620      	mov	r0, r4
 8014436:	f7fe fcce 	bl	8012dd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    ECTDescriptor_1.setLinespacing(0);
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8014440:	2100      	movs	r1, #0
 8014442:	4618      	mov	r0, r3
 8014444:	f7fe fd1a 	bl	8012e7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    ECTDescriptor_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID35));
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	f203 5434 	addw	r4, r3, #1332	; 0x534
 801444e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8014452:	2115      	movs	r1, #21
 8014454:	4618      	mov	r0, r3
 8014456:	f7fe fc55 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 801445a:	f8b7 10a0 	ldrh.w	r1, [r7, #160]	; 0xa0
 801445e:	4620      	mov	r0, r4
 8014460:	f008 fcf8 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    OILTempValue.setPosition(316, 153, 75, 42);
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	f503 60ad 	add.w	r0, r3, #1384	; 0x568
 801446a:	232a      	movs	r3, #42	; 0x2a
 801446c:	9300      	str	r3, [sp, #0]
 801446e:	234b      	movs	r3, #75	; 0x4b
 8014470:	2299      	movs	r2, #153	; 0x99
 8014472:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8014476:	f7fc fc57 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    OILTempValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	f503 64ad 	add.w	r4, r3, #1384	; 0x568
 8014480:	22ff      	movs	r2, #255	; 0xff
 8014482:	21ff      	movs	r1, #255	; 0xff
 8014484:	20ff      	movs	r0, #255	; 0xff
 8014486:	f7ff f941 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801448a:	4603      	mov	r3, r0
 801448c:	4619      	mov	r1, r3
 801448e:	4620      	mov	r0, r4
 8014490:	f7fe fca1 	bl	8012dd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    OILTempValue.setLinespacing(0);
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 801449a:	2100      	movs	r1, #0
 801449c:	4618      	mov	r0, r3
 801449e:	f7fe fced 	bl	8012e7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(OILTempValueBuffer, OILTEMPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID37).getText());
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	f603 34b8 	addw	r4, r3, #3000	; 0xbb8
 80144a8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80144ac:	2117      	movs	r1, #23
 80144ae:	4618      	mov	r0, r3
 80144b0:	f7fe fc28 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 80144b4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80144b8:	4618      	mov	r0, r3
 80144ba:	f7fe fc33 	bl	8012d24 <_ZNK8touchgfx9TypedText7getTextEv>
 80144be:	4603      	mov	r3, r0
 80144c0:	4a92      	ldr	r2, [pc, #584]	; (801470c <_ZN12MainViewBaseC1Ev+0xfac>)
 80144c2:	2105      	movs	r1, #5
 80144c4:	4620      	mov	r0, r4
 80144c6:	f00c f9c3 	bl	8020850 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    OILTempValue.setWildcard(OILTempValueBuffer);
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	f503 62ad 	add.w	r2, r3, #1384	; 0x568
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 80144d6:	4619      	mov	r1, r3
 80144d8:	4610      	mov	r0, r2
 80144da:	f7fe fd57 	bl	8012f8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    OILTempValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID36));
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	f503 64ad 	add.w	r4, r3, #1384	; 0x568
 80144e4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80144e8:	2116      	movs	r1, #22
 80144ea:	4618      	mov	r0, r3
 80144ec:	f7fe fc0a 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 80144f0:	f8b7 10a8 	ldrh.w	r1, [r7, #168]	; 0xa8
 80144f4:	4620      	mov	r0, r4
 80144f6:	f008 fcad 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    OILPressureValue.setPosition(398, 153, 71, 40);
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	f503 60b4 	add.w	r0, r3, #1440	; 0x5a0
 8014500:	2328      	movs	r3, #40	; 0x28
 8014502:	9300      	str	r3, [sp, #0]
 8014504:	2347      	movs	r3, #71	; 0x47
 8014506:	2299      	movs	r2, #153	; 0x99
 8014508:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 801450c:	f7fc fc0c 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    OILPressureValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	f503 64b4 	add.w	r4, r3, #1440	; 0x5a0
 8014516:	22ff      	movs	r2, #255	; 0xff
 8014518:	21ff      	movs	r1, #255	; 0xff
 801451a:	20ff      	movs	r0, #255	; 0xff
 801451c:	f7ff f8f6 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014520:	4603      	mov	r3, r0
 8014522:	4619      	mov	r1, r3
 8014524:	4620      	mov	r0, r4
 8014526:	f7fe fc56 	bl	8012dd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    OILPressureValue.setLinespacing(0);
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8014530:	2100      	movs	r1, #0
 8014532:	4618      	mov	r0, r3
 8014534:	f7fe fca2 	bl	8012e7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(OILPressureValueBuffer, OILPRESSUREVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID57).getText());
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	f603 34c2 	addw	r4, r3, #3010	; 0xbc2
 801453e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8014542:	2125      	movs	r1, #37	; 0x25
 8014544:	4618      	mov	r0, r3
 8014546:	f7fe fbdd 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 801454a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801454e:	4618      	mov	r0, r3
 8014550:	f7fe fbe8 	bl	8012d24 <_ZNK8touchgfx9TypedText7getTextEv>
 8014554:	4603      	mov	r3, r0
 8014556:	4a6d      	ldr	r2, [pc, #436]	; (801470c <_ZN12MainViewBaseC1Ev+0xfac>)
 8014558:	2105      	movs	r1, #5
 801455a:	4620      	mov	r0, r4
 801455c:	f00c f978 	bl	8020850 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    OILPressureValue.setWildcard(OILPressureValueBuffer);
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	f503 62b4 	add.w	r2, r3, #1440	; 0x5a0
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	f603 33c2 	addw	r3, r3, #3010	; 0xbc2
 801456c:	4619      	mov	r1, r3
 801456e:	4610      	mov	r0, r2
 8014570:	f7fe fd0c 	bl	8012f8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    OILPressureValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID38));
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	f503 64b4 	add.w	r4, r3, #1440	; 0x5a0
 801457a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801457e:	2118      	movs	r1, #24
 8014580:	4618      	mov	r0, r3
 8014582:	f7fe fbbf 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8014586:	f8b7 10b0 	ldrh.w	r1, [r7, #176]	; 0xb0
 801458a:	4620      	mov	r0, r4
 801458c:	f008 fc62 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IATDescriptor_1_1.setXY(407, 240);
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 8014596:	22f0      	movs	r2, #240	; 0xf0
 8014598:	f240 1197 	movw	r1, #407	; 0x197
 801459c:	4618      	mov	r0, r3
 801459e:	f7fe f971 	bl	8012884 <_ZN8touchgfx8Drawable5setXYEss>
    IATDescriptor_1_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	f503 64bb 	add.w	r4, r3, #1496	; 0x5d8
 80145a8:	2200      	movs	r2, #0
 80145aa:	21dc      	movs	r1, #220	; 0xdc
 80145ac:	20ff      	movs	r0, #255	; 0xff
 80145ae:	f7ff f8ad 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80145b2:	4603      	mov	r3, r0
 80145b4:	4619      	mov	r1, r3
 80145b6:	4620      	mov	r0, r4
 80145b8:	f7fe fc0d 	bl	8012dd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IATDescriptor_1_1.setLinespacing(0);
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 80145c2:	2100      	movs	r1, #0
 80145c4:	4618      	mov	r0, r3
 80145c6:	f7fe fc59 	bl	8012e7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    IATDescriptor_1_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID42));
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	f503 64bb 	add.w	r4, r3, #1496	; 0x5d8
 80145d0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80145d4:	211b      	movs	r1, #27
 80145d6:	4618      	mov	r0, r3
 80145d8:	f7fe fb94 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 80145dc:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 80145e0:	4620      	mov	r0, r4
 80145e2:	f008 fc37 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TPSProgress.setXY(367, 226);
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 80145ec:	22e2      	movs	r2, #226	; 0xe2
 80145ee:	f240 116f 	movw	r1, #367	; 0x16f
 80145f2:	4618      	mov	r0, r3
 80145f4:	f7fe f946 	bl	8012884 <_ZN8touchgfx8Drawable5setXYEss>
    TPSProgress.setProgressIndicatorPosition(2, 2, 100, 10);
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	f203 600c 	addw	r0, r3, #1548	; 0x60c
 80145fe:	230a      	movs	r3, #10
 8014600:	9300      	str	r3, [sp, #0]
 8014602:	2364      	movs	r3, #100	; 0x64
 8014604:	2202      	movs	r2, #2
 8014606:	2102      	movs	r1, #2
 8014608:	f006 f95a 	bl	801a8c0 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>
    TPSProgress.setRange(0, 100);
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	f203 600c 	addw	r0, r3, #1548	; 0x60c
 8014612:	2300      	movs	r3, #0
 8014614:	9300      	str	r3, [sp, #0]
 8014616:	2300      	movs	r3, #0
 8014618:	2264      	movs	r2, #100	; 0x64
 801461a:	2100      	movs	r1, #0
 801461c:	f006 fbce 	bl	801adbc <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    TPSProgress.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8014626:	2100      	movs	r1, #0
 8014628:	4618      	mov	r0, r3
 801462a:	f006 f9a9 	bl	801a980 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    TPSProgress.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_SMALL_PROGRESS_INDICATOR_BG_SQUARE_0_DEGREES_ID));
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	f203 640c 	addw	r4, r3, #1548	; 0x60c
 8014634:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8014638:	2100      	movs	r1, #0
 801463a:	4618      	mov	r0, r3
 801463c:	f7fe f8a5 	bl	801278a <_ZN8touchgfx6BitmapC1Et>
 8014640:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8014644:	4619      	mov	r1, r3
 8014646:	4620      	mov	r0, r4
 8014648:	f006 fbad 	bl	801ada6 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    TPSProgress.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	f203 640c 	addw	r4, r3, #1548	; 0x60c
 8014652:	2200      	movs	r2, #0
 8014654:	21dc      	movs	r1, #220	; 0xdc
 8014656:	20ff      	movs	r0, #255	; 0xff
 8014658:	f7ff f858 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801465c:	4603      	mov	r3, r0
 801465e:	4619      	mov	r1, r3
 8014660:	4620      	mov	r0, r4
 8014662:	f006 f8d7 	bl	801a814 <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>
    TPSProgress.setValue(60);
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 801466c:	213c      	movs	r1, #60	; 0x3c
 801466e:	4618      	mov	r0, r3
 8014670:	f006 f93e 	bl	801a8f0 <_ZN8touchgfx11BoxProgress8setValueEi>

    line10.setPosition(14, 258, 180, 10);
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	f203 60cc 	addw	r0, r3, #1740	; 0x6cc
 801467a:	230a      	movs	r3, #10
 801467c:	9300      	str	r3, [sp, #0]
 801467e:	23b4      	movs	r3, #180	; 0xb4
 8014680:	f44f 7281 	mov.w	r2, #258	; 0x102
 8014684:	210e      	movs	r1, #14
 8014686:	f7fc fb4f 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    line10Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	f503 64e8 	add.w	r4, r3, #1856	; 0x740
 8014690:	22ff      	movs	r2, #255	; 0xff
 8014692:	21ff      	movs	r1, #255	; 0xff
 8014694:	20ff      	movs	r0, #255	; 0xff
 8014696:	f7ff f839 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801469a:	4603      	mov	r3, r0
 801469c:	22ff      	movs	r2, #255	; 0xff
 801469e:	4619      	mov	r1, r3
 80146a0:	4620      	mov	r0, r4
 80146a2:	f007 fdde 	bl	801c262 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line10.setPainter(line10Painter);
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	f203 62cc 	addw	r2, r3, #1740	; 0x6cc
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	f503 63e8 	add.w	r3, r3, #1856	; 0x740
 80146b2:	4619      	mov	r1, r3
 80146b4:	4610      	mov	r0, r2
 80146b6:	f007 fe3d 	bl	801c334 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line10.setStart(0, 5);
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 80146c0:	2205      	movs	r2, #5
 80146c2:	2100      	movs	r1, #0
 80146c4:	4618      	mov	r0, r3
 80146c6:	f000 fd89 	bl	80151dc <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line10.setEnd(180, 5);
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 80146d0:	2205      	movs	r2, #5
 80146d2:	21b4      	movs	r1, #180	; 0xb4
 80146d4:	4618      	mov	r0, r3
 80146d6:	f000 fda7 	bl	8015228 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line10.setLineWidth(2);
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 80146e0:	2102      	movs	r1, #2
 80146e2:	4618      	mov	r0, r3
 80146e4:	f000 fdc6 	bl	8015274 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line10.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 80146ee:	2100      	movs	r1, #0
 80146f0:	4618      	mov	r0, r3
 80146f2:	f008 f939 	bl	801c968 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    line10_1.setPosition(287, 258, 180, 10);
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	f503 60eb 	add.w	r0, r3, #1880	; 0x758
 80146fc:	230a      	movs	r3, #10
 80146fe:	9300      	str	r3, [sp, #0]
 8014700:	23b4      	movs	r3, #180	; 0xb4
 8014702:	f44f 7281 	mov.w	r2, #258	; 0x102
 8014706:	f240 111f 	movw	r1, #287	; 0x11f
 801470a:	e001      	b.n	8014710 <_ZN12MainViewBaseC1Ev+0xfb0>
 801470c:	0802bca8 	.word	0x0802bca8
 8014710:	f7fc fb0a 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    line10_1Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	f203 74cc 	addw	r4, r3, #1996	; 0x7cc
 801471a:	22ff      	movs	r2, #255	; 0xff
 801471c:	21ff      	movs	r1, #255	; 0xff
 801471e:	20ff      	movs	r0, #255	; 0xff
 8014720:	f7fe fff4 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014724:	4603      	mov	r3, r0
 8014726:	22ff      	movs	r2, #255	; 0xff
 8014728:	4619      	mov	r1, r3
 801472a:	4620      	mov	r0, r4
 801472c:	f007 fd99 	bl	801c262 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    line10_1.setPainter(line10_1Painter);
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	f503 62eb 	add.w	r2, r3, #1880	; 0x758
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	f203 73cc 	addw	r3, r3, #1996	; 0x7cc
 801473c:	4619      	mov	r1, r3
 801473e:	4610      	mov	r0, r2
 8014740:	f007 fdf8 	bl	801c334 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    line10_1.setStart(0, 5);
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 801474a:	2205      	movs	r2, #5
 801474c:	2100      	movs	r1, #0
 801474e:	4618      	mov	r0, r3
 8014750:	f000 fd44 	bl	80151dc <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line10_1.setEnd(180, 5);
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 801475a:	2205      	movs	r2, #5
 801475c:	21b4      	movs	r1, #180	; 0xb4
 801475e:	4618      	mov	r0, r3
 8014760:	f000 fd62 	bl	8015228 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line10_1.setLineWidth(2);
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 801476a:	2102      	movs	r1, #2
 801476c:	4618      	mov	r0, r3
 801476e:	f000 fd81 	bl	8015274 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line10_1.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8014778:	2100      	movs	r1, #0
 801477a:	4618      	mov	r0, r3
 801477c:	f008 f8f4 	bl	801c968 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    BatteryVoltage.setPosition(210, 247, 60, 21);
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	f203 70e4 	addw	r0, r3, #2020	; 0x7e4
 8014786:	2315      	movs	r3, #21
 8014788:	9300      	str	r3, [sp, #0]
 801478a:	233c      	movs	r3, #60	; 0x3c
 801478c:	22f7      	movs	r2, #247	; 0xf7
 801478e:	21d2      	movs	r1, #210	; 0xd2
 8014790:	f7fc faca 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    BatteryVoltage.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	f203 74e4 	addw	r4, r3, #2020	; 0x7e4
 801479a:	22ff      	movs	r2, #255	; 0xff
 801479c:	21ff      	movs	r1, #255	; 0xff
 801479e:	20ff      	movs	r0, #255	; 0xff
 80147a0:	f7fe ffb4 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80147a4:	4603      	mov	r3, r0
 80147a6:	4619      	mov	r1, r3
 80147a8:	4620      	mov	r0, r4
 80147aa:	f7fe fb14 	bl	8012dd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    BatteryVoltage.setLinespacing(0);
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	f203 73e4 	addw	r3, r3, #2020	; 0x7e4
 80147b4:	2100      	movs	r1, #0
 80147b6:	4618      	mov	r0, r3
 80147b8:	f7fe fb60 	bl	8012e7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(BatteryVoltageBuffer, BATTERYVOLTAGE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID45).getText());
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	f603 34cc 	addw	r4, r3, #3020	; 0xbcc
 80147c2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80147c6:	211d      	movs	r1, #29
 80147c8:	4618      	mov	r0, r3
 80147ca:	f7fe fa9b 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 80147ce:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80147d2:	4618      	mov	r0, r3
 80147d4:	f7fe faa6 	bl	8012d24 <_ZNK8touchgfx9TypedText7getTextEv>
 80147d8:	4603      	mov	r3, r0
 80147da:	4ae2      	ldr	r2, [pc, #904]	; (8014b64 <_ZN12MainViewBaseC1Ev+0x1404>)
 80147dc:	2105      	movs	r1, #5
 80147de:	4620      	mov	r0, r4
 80147e0:	f00c f836 	bl	8020850 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    BatteryVoltage.setWildcard(BatteryVoltageBuffer);
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	f203 72e4 	addw	r2, r3, #2020	; 0x7e4
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	f603 33cc 	addw	r3, r3, #3020	; 0xbcc
 80147f0:	4619      	mov	r1, r3
 80147f2:	4610      	mov	r0, r2
 80147f4:	f7fe fbca 	bl	8012f8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    BatteryVoltage.setTypedText(touchgfx::TypedText(T_SINGLEUSEID44));
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	f203 74e4 	addw	r4, r3, #2020	; 0x7e4
 80147fe:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8014802:	211c      	movs	r1, #28
 8014804:	4618      	mov	r0, r3
 8014806:	f7fe fa7d 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 801480a:	f8b7 10c0 	ldrh.w	r1, [r7, #192]	; 0xc0
 801480e:	4620      	mov	r0, r4
 8014810:	f008 fb20 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    RPMProgressBar.setXY(1, 1);
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 801481a:	2201      	movs	r2, #1
 801481c:	2101      	movs	r1, #1
 801481e:	4618      	mov	r0, r3
 8014820:	f7fe f830 	bl	8012884 <_ZN8touchgfx8Drawable5setXYEss>
    RPMProgressBar.setProgressIndicatorPosition(2, 2, 478, 55);
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	f603 001c 	addw	r0, r3, #2076	; 0x81c
 801482a:	2337      	movs	r3, #55	; 0x37
 801482c:	9300      	str	r3, [sp, #0]
 801482e:	f44f 73ef 	mov.w	r3, #478	; 0x1de
 8014832:	2202      	movs	r2, #2
 8014834:	2102      	movs	r1, #2
 8014836:	f006 f993 	bl	801ab60 <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>
    RPMProgressBar.setRange(0, 8000);
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	f603 001c 	addw	r0, r3, #2076	; 0x81c
 8014840:	2300      	movs	r3, #0
 8014842:	9300      	str	r3, [sp, #0]
 8014844:	2300      	movs	r3, #0
 8014846:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801484a:	2100      	movs	r1, #0
 801484c:	f006 fab6 	bl	801adbc <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    RPMProgressBar.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8014856:	2100      	movs	r1, #0
 8014858:	4618      	mov	r0, r3
 801485a:	f006 f891 	bl	801a980 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    RPMProgressBar.setBitmap(BITMAP_BLUE_PROGRESSINDICATORS_FILL_TILING_RED_YELLOW_FADEYELLOWRED_SMALL_TRANSPARENT_ID);
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8014864:	2101      	movs	r1, #1
 8014866:	4618      	mov	r0, r3
 8014868:	f006 f8d5 	bl	801aa16 <_ZN8touchgfx13ImageProgress9setBitmapEt>
    RPMProgressBar.setValue(7200);
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8014872:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8014876:	4618      	mov	r0, r3
 8014878:	f006 f98a 	bl	801ab90 <_ZN8touchgfx13ImageProgress8setValueEi>
    RPMProgressBar.setAnchorAtZero(true);
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8014882:	2101      	movs	r1, #1
 8014884:	4618      	mov	r0, r3
 8014886:	f006 f8af 	bl	801a9e8 <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>

    RPMValue.setPosition(25, 4, 55, 22);
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	f603 100c 	addw	r0, r3, #2316	; 0x90c
 8014890:	2316      	movs	r3, #22
 8014892:	9300      	str	r3, [sp, #0]
 8014894:	2337      	movs	r3, #55	; 0x37
 8014896:	2204      	movs	r2, #4
 8014898:	2119      	movs	r1, #25
 801489a:	f7fc fa45 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    RPMValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	f603 140c 	addw	r4, r3, #2316	; 0x90c
 80148a4:	22ff      	movs	r2, #255	; 0xff
 80148a6:	21ff      	movs	r1, #255	; 0xff
 80148a8:	20ff      	movs	r0, #255	; 0xff
 80148aa:	f7fe ff2f 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80148ae:	4603      	mov	r3, r0
 80148b0:	4619      	mov	r1, r3
 80148b2:	4620      	mov	r0, r4
 80148b4:	f7fe fa8f 	bl	8012dd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    RPMValue.setLinespacing(0);
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 80148be:	2100      	movs	r1, #0
 80148c0:	4618      	mov	r0, r3
 80148c2:	f7fe fadb 	bl	8012e7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(RPMValueBuffer, RPMVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID47).getText());
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	f603 34d6 	addw	r4, r3, #3030	; 0xbd6
 80148cc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80148d0:	211f      	movs	r1, #31
 80148d2:	4618      	mov	r0, r3
 80148d4:	f7fe fa16 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 80148d8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80148dc:	4618      	mov	r0, r3
 80148de:	f7fe fa21 	bl	8012d24 <_ZNK8touchgfx9TypedText7getTextEv>
 80148e2:	4603      	mov	r3, r0
 80148e4:	4a9f      	ldr	r2, [pc, #636]	; (8014b64 <_ZN12MainViewBaseC1Ev+0x1404>)
 80148e6:	2105      	movs	r1, #5
 80148e8:	4620      	mov	r0, r4
 80148ea:	f00b ffb1 	bl	8020850 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    RPMValue.setWildcard(RPMValueBuffer);
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	f603 120c 	addw	r2, r3, #2316	; 0x90c
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	f603 33d6 	addw	r3, r3, #3030	; 0xbd6
 80148fa:	4619      	mov	r1, r3
 80148fc:	4610      	mov	r0, r2
 80148fe:	f7fe fb45 	bl	8012f8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    RPMValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID46));
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	f603 140c 	addw	r4, r3, #2316	; 0x90c
 8014908:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801490c:	211e      	movs	r1, #30
 801490e:	4618      	mov	r0, r3
 8014910:	f7fe f9f8 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8014914:	f8b7 10c8 	ldrh.w	r1, [r7, #200]	; 0xc8
 8014918:	4620      	mov	r0, r4
 801491a:	f008 fa9b 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CltValue_1_1.setXY(82, 15);
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	f603 1344 	addw	r3, r3, #2372	; 0x944
 8014924:	220f      	movs	r2, #15
 8014926:	2152      	movs	r1, #82	; 0x52
 8014928:	4618      	mov	r0, r3
 801492a:	f7fd ffab 	bl	8012884 <_ZN8touchgfx8Drawable5setXYEss>
    CltValue_1_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	f603 1444 	addw	r4, r3, #2372	; 0x944
 8014934:	22ff      	movs	r2, #255	; 0xff
 8014936:	21ff      	movs	r1, #255	; 0xff
 8014938:	20ff      	movs	r0, #255	; 0xff
 801493a:	f7fe fee7 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801493e:	4603      	mov	r3, r0
 8014940:	4619      	mov	r1, r3
 8014942:	4620      	mov	r0, r4
 8014944:	f7fe fa47 	bl	8012dd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CltValue_1_1.setLinespacing(0);
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	f603 1344 	addw	r3, r3, #2372	; 0x944
 801494e:	2100      	movs	r1, #0
 8014950:	4618      	mov	r0, r3
 8014952:	f7fe fa93 	bl	8012e7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    CltValue_1_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID50));
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	f603 1444 	addw	r4, r3, #2372	; 0x944
 801495c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8014960:	2120      	movs	r1, #32
 8014962:	4618      	mov	r0, r3
 8014964:	f7fe f9ce 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8014968:	f8b7 10cc 	ldrh.w	r1, [r7, #204]	; 0xcc
 801496c:	4620      	mov	r0, r4
 801496e:	f008 fa71 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CLTValue.setPosition(316, 85, 72, 42);
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	f603 1078 	addw	r0, r3, #2424	; 0x978
 8014978:	232a      	movs	r3, #42	; 0x2a
 801497a:	9300      	str	r3, [sp, #0]
 801497c:	2348      	movs	r3, #72	; 0x48
 801497e:	2255      	movs	r2, #85	; 0x55
 8014980:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8014984:	f7fc f9d0 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    CLTValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	f603 1478 	addw	r4, r3, #2424	; 0x978
 801498e:	22ff      	movs	r2, #255	; 0xff
 8014990:	21ff      	movs	r1, #255	; 0xff
 8014992:	20ff      	movs	r0, #255	; 0xff
 8014994:	f7fe feba 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014998:	4603      	mov	r3, r0
 801499a:	4619      	mov	r1, r3
 801499c:	4620      	mov	r0, r4
 801499e:	f7fe fa1a 	bl	8012dd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CLTValue.setLinespacing(0);
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	f603 1378 	addw	r3, r3, #2424	; 0x978
 80149a8:	2100      	movs	r1, #0
 80149aa:	4618      	mov	r0, r3
 80149ac:	f7fe fa66 	bl	8012e7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(CLTValueBuffer, CLTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID54).getText());
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	f503 643e 	add.w	r4, r3, #3040	; 0xbe0
 80149b6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80149ba:	2122      	movs	r1, #34	; 0x22
 80149bc:	4618      	mov	r0, r3
 80149be:	f7fe f9a1 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 80149c2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80149c6:	4618      	mov	r0, r3
 80149c8:	f7fe f9ac 	bl	8012d24 <_ZNK8touchgfx9TypedText7getTextEv>
 80149cc:	4603      	mov	r3, r0
 80149ce:	4a65      	ldr	r2, [pc, #404]	; (8014b64 <_ZN12MainViewBaseC1Ev+0x1404>)
 80149d0:	2105      	movs	r1, #5
 80149d2:	4620      	mov	r0, r4
 80149d4:	f00b ff3c 	bl	8020850 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    CLTValue.setWildcard(CLTValueBuffer);
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	f603 1278 	addw	r2, r3, #2424	; 0x978
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	f503 633e 	add.w	r3, r3, #3040	; 0xbe0
 80149e4:	4619      	mov	r1, r3
 80149e6:	4610      	mov	r0, r2
 80149e8:	f7fe fad0 	bl	8012f8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    CLTValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID53));
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	f603 1478 	addw	r4, r3, #2424	; 0x978
 80149f2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80149f6:	2121      	movs	r1, #33	; 0x21
 80149f8:	4618      	mov	r0, r3
 80149fa:	f7fe f983 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 80149fe:	f8b7 10d4 	ldrh.w	r1, [r7, #212]	; 0xd4
 8014a02:	4620      	mov	r0, r4
 8014a04:	f008 fa26 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    MAPValue.setPosition(195, 158, 96, 60);
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	f503 601b 	add.w	r0, r3, #2480	; 0x9b0
 8014a0e:	233c      	movs	r3, #60	; 0x3c
 8014a10:	9300      	str	r3, [sp, #0]
 8014a12:	2360      	movs	r3, #96	; 0x60
 8014a14:	229e      	movs	r2, #158	; 0x9e
 8014a16:	21c3      	movs	r1, #195	; 0xc3
 8014a18:	f7fc f986 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    MAPValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	f503 641b 	add.w	r4, r3, #2480	; 0x9b0
 8014a22:	22ff      	movs	r2, #255	; 0xff
 8014a24:	21ff      	movs	r1, #255	; 0xff
 8014a26:	20ff      	movs	r0, #255	; 0xff
 8014a28:	f7fe fe70 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014a2c:	4603      	mov	r3, r0
 8014a2e:	4619      	mov	r1, r3
 8014a30:	4620      	mov	r0, r4
 8014a32:	f7fe f9d0 	bl	8012dd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    MAPValue.setLinespacing(0);
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 8014a3c:	2100      	movs	r1, #0
 8014a3e:	4618      	mov	r0, r3
 8014a40:	f7fe fa1c 	bl	8012e7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(MAPValueBuffer, MAPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID56).getText());
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	f603 34ea 	addw	r4, r3, #3050	; 0xbea
 8014a4a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8014a4e:	2124      	movs	r1, #36	; 0x24
 8014a50:	4618      	mov	r0, r3
 8014a52:	f7fe f957 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8014a56:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8014a5a:	4618      	mov	r0, r3
 8014a5c:	f7fe f962 	bl	8012d24 <_ZNK8touchgfx9TypedText7getTextEv>
 8014a60:	4603      	mov	r3, r0
 8014a62:	4a40      	ldr	r2, [pc, #256]	; (8014b64 <_ZN12MainViewBaseC1Ev+0x1404>)
 8014a64:	2105      	movs	r1, #5
 8014a66:	4620      	mov	r0, r4
 8014a68:	f00b fef2 	bl	8020850 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    MAPValue.setWildcard(MAPValueBuffer);
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	f503 621b 	add.w	r2, r3, #2480	; 0x9b0
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	f603 33ea 	addw	r3, r3, #3050	; 0xbea
 8014a78:	4619      	mov	r1, r3
 8014a7a:	4610      	mov	r0, r2
 8014a7c:	f7fe fa86 	bl	8012f8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    MAPValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID55));
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	f503 641b 	add.w	r4, r3, #2480	; 0x9b0
 8014a86:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8014a8a:	2123      	movs	r1, #35	; 0x23
 8014a8c:	4618      	mov	r0, r3
 8014a8e:	f7fe f939 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8014a92:	f8b7 10dc 	ldrh.w	r1, [r7, #220]	; 0xdc
 8014a96:	4620      	mov	r0, r4
 8014a98:	f008 f9dc 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    EGTValue2.setPosition(100, 153, 78, 42);
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	f603 10e8 	addw	r0, r3, #2536	; 0x9e8
 8014aa2:	232a      	movs	r3, #42	; 0x2a
 8014aa4:	9300      	str	r3, [sp, #0]
 8014aa6:	234e      	movs	r3, #78	; 0x4e
 8014aa8:	2299      	movs	r2, #153	; 0x99
 8014aaa:	2164      	movs	r1, #100	; 0x64
 8014aac:	f7fc f93c 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    EGTValue2.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	f603 14e8 	addw	r4, r3, #2536	; 0x9e8
 8014ab6:	22ff      	movs	r2, #255	; 0xff
 8014ab8:	21ff      	movs	r1, #255	; 0xff
 8014aba:	20ff      	movs	r0, #255	; 0xff
 8014abc:	f7fe fe26 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014ac0:	4603      	mov	r3, r0
 8014ac2:	4619      	mov	r1, r3
 8014ac4:	4620      	mov	r0, r4
 8014ac6:	f7fe f986 	bl	8012dd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    EGTValue2.setLinespacing(0);
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 8014ad0:	2100      	movs	r1, #0
 8014ad2:	4618      	mov	r0, r3
 8014ad4:	f7fe f9d2 	bl	8012e7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(EGTValue2Buffer, EGTVALUE2_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID69).getText());
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	f603 34f4 	addw	r4, r3, #3060	; 0xbf4
 8014ade:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8014ae2:	212f      	movs	r1, #47	; 0x2f
 8014ae4:	4618      	mov	r0, r3
 8014ae6:	f7fe f90d 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8014aea:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8014aee:	4618      	mov	r0, r3
 8014af0:	f7fe f918 	bl	8012d24 <_ZNK8touchgfx9TypedText7getTextEv>
 8014af4:	4603      	mov	r3, r0
 8014af6:	4a1b      	ldr	r2, [pc, #108]	; (8014b64 <_ZN12MainViewBaseC1Ev+0x1404>)
 8014af8:	2105      	movs	r1, #5
 8014afa:	4620      	mov	r0, r4
 8014afc:	f00b fea8 	bl	8020850 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    EGTValue2.setWildcard(EGTValue2Buffer);
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	f603 12e8 	addw	r2, r3, #2536	; 0x9e8
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	f603 33f4 	addw	r3, r3, #3060	; 0xbf4
 8014b0c:	4619      	mov	r1, r3
 8014b0e:	4610      	mov	r0, r2
 8014b10:	f7fe fa3c 	bl	8012f8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    EGTValue2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID68));
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	f603 14e8 	addw	r4, r3, #2536	; 0x9e8
 8014b1a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8014b1e:	212e      	movs	r1, #46	; 0x2e
 8014b20:	4618      	mov	r0, r3
 8014b22:	f7fe f8ef 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8014b26:	f8b7 10e4 	ldrh.w	r1, [r7, #228]	; 0xe4
 8014b2a:	4620      	mov	r0, r4
 8014b2c:	f008 f992 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    EGT2Descriptor.setXY(114, 193);
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8014b36:	22c1      	movs	r2, #193	; 0xc1
 8014b38:	2172      	movs	r1, #114	; 0x72
 8014b3a:	4618      	mov	r0, r3
 8014b3c:	f7fd fea2 	bl	8012884 <_ZN8touchgfx8Drawable5setXYEss>
    EGT2Descriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	f503 6422 	add.w	r4, r3, #2592	; 0xa20
 8014b46:	2200      	movs	r2, #0
 8014b48:	21dc      	movs	r1, #220	; 0xdc
 8014b4a:	20ff      	movs	r0, #255	; 0xff
 8014b4c:	f7fe fdde 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014b50:	4603      	mov	r3, r0
 8014b52:	4619      	mov	r1, r3
 8014b54:	4620      	mov	r0, r4
 8014b56:	f7fe f93e 	bl	8012dd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    EGT2Descriptor.setLinespacing(0);
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8014b60:	2100      	movs	r1, #0
 8014b62:	e001      	b.n	8014b68 <_ZN12MainViewBaseC1Ev+0x1408>
 8014b64:	0802bca8 	.word	0x0802bca8
 8014b68:	4618      	mov	r0, r3
 8014b6a:	f7fe f987 	bl	8012e7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    EGT2Descriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID70));
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	f503 6422 	add.w	r4, r3, #2592	; 0xa20
 8014b74:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8014b78:	2130      	movs	r1, #48	; 0x30
 8014b7a:	4618      	mov	r0, r3
 8014b7c:	f7fe f8c2 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8014b80:	f8b7 10e8 	ldrh.w	r1, [r7, #232]	; 0xe8
 8014b84:	4620      	mov	r0, r4
 8014b86:	f008 f965 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    FuelPValue.setPosition(399, 85, 68, 42);
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	f603 2054 	addw	r0, r3, #2644	; 0xa54
 8014b90:	232a      	movs	r3, #42	; 0x2a
 8014b92:	9300      	str	r3, [sp, #0]
 8014b94:	2344      	movs	r3, #68	; 0x44
 8014b96:	2255      	movs	r2, #85	; 0x55
 8014b98:	f240 118f 	movw	r1, #399	; 0x18f
 8014b9c:	f7fc f8c4 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    FuelPValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	f603 2454 	addw	r4, r3, #2644	; 0xa54
 8014ba6:	22ff      	movs	r2, #255	; 0xff
 8014ba8:	21ff      	movs	r1, #255	; 0xff
 8014baa:	20ff      	movs	r0, #255	; 0xff
 8014bac:	f7fe fdae 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014bb0:	4603      	mov	r3, r0
 8014bb2:	4619      	mov	r1, r3
 8014bb4:	4620      	mov	r0, r4
 8014bb6:	f7fe f90e 	bl	8012dd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    FuelPValue.setLinespacing(0);
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 8014bc0:	2100      	movs	r1, #0
 8014bc2:	4618      	mov	r0, r3
 8014bc4:	f7fe f95a 	bl	8012e7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(FuelPValueBuffer, FUELPVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID72).getText());
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	f603 34fe 	addw	r4, r3, #3070	; 0xbfe
 8014bce:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8014bd2:	2132      	movs	r1, #50	; 0x32
 8014bd4:	4618      	mov	r0, r3
 8014bd6:	f7fe f895 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8014bda:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8014bde:	4618      	mov	r0, r3
 8014be0:	f7fe f8a0 	bl	8012d24 <_ZNK8touchgfx9TypedText7getTextEv>
 8014be4:	4603      	mov	r3, r0
 8014be6:	4ad7      	ldr	r2, [pc, #860]	; (8014f44 <_ZN12MainViewBaseC1Ev+0x17e4>)
 8014be8:	2105      	movs	r1, #5
 8014bea:	4620      	mov	r0, r4
 8014bec:	f00b fe30 	bl	8020850 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    FuelPValue.setWildcard(FuelPValueBuffer);
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	f603 2254 	addw	r2, r3, #2644	; 0xa54
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	f603 33fe 	addw	r3, r3, #3070	; 0xbfe
 8014bfc:	4619      	mov	r1, r3
 8014bfe:	4610      	mov	r0, r2
 8014c00:	f7fe f9c4 	bl	8012f8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    FuelPValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID71));
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	f603 2454 	addw	r4, r3, #2644	; 0xa54
 8014c0a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8014c0e:	2131      	movs	r1, #49	; 0x31
 8014c10:	4618      	mov	r0, r3
 8014c12:	f7fe f877 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8014c16:	f8b7 10f0 	ldrh.w	r1, [r7, #240]	; 0xf0
 8014c1a:	4620      	mov	r0, r4
 8014c1c:	f008 f91a 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    FuelPDescriptor.setXY(407, 126);
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8014c26:	227e      	movs	r2, #126	; 0x7e
 8014c28:	f240 1197 	movw	r1, #407	; 0x197
 8014c2c:	4618      	mov	r0, r3
 8014c2e:	f7fd fe29 	bl	8012884 <_ZN8touchgfx8Drawable5setXYEss>
    FuelPDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	f603 248c 	addw	r4, r3, #2700	; 0xa8c
 8014c38:	2200      	movs	r2, #0
 8014c3a:	21dc      	movs	r1, #220	; 0xdc
 8014c3c:	20ff      	movs	r0, #255	; 0xff
 8014c3e:	f7fe fd65 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014c42:	4603      	mov	r3, r0
 8014c44:	4619      	mov	r1, r3
 8014c46:	4620      	mov	r0, r4
 8014c48:	f7fe f8c5 	bl	8012dd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    FuelPDescriptor.setLinespacing(0);
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8014c52:	2100      	movs	r1, #0
 8014c54:	4618      	mov	r0, r3
 8014c56:	f7fe f911 	bl	8012e7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    FuelPDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID73));
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	f603 248c 	addw	r4, r3, #2700	; 0xa8c
 8014c60:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8014c64:	2133      	movs	r1, #51	; 0x33
 8014c66:	4618      	mov	r0, r3
 8014c68:	f7fe f84c 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8014c6c:	f8b7 10f4 	ldrh.w	r1, [r7, #244]	; 0xf4
 8014c70:	4620      	mov	r0, r4
 8014c72:	f008 f8ef 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    TpsNumberValue.setPosition(408, 226, 19, 17);
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	f503 602c 	add.w	r0, r3, #2752	; 0xac0
 8014c7c:	2311      	movs	r3, #17
 8014c7e:	9300      	str	r3, [sp, #0]
 8014c80:	2313      	movs	r3, #19
 8014c82:	22e2      	movs	r2, #226	; 0xe2
 8014c84:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8014c88:	f7fc f84e 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    TpsNumberValue.setColor(touchgfx::Color::getColorFrom24BitRGB(13, 13, 13));
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	f503 642c 	add.w	r4, r3, #2752	; 0xac0
 8014c92:	220d      	movs	r2, #13
 8014c94:	210d      	movs	r1, #13
 8014c96:	200d      	movs	r0, #13
 8014c98:	f7fe fd38 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014c9c:	4603      	mov	r3, r0
 8014c9e:	4619      	mov	r1, r3
 8014ca0:	4620      	mov	r0, r4
 8014ca2:	f7fe f898 	bl	8012dd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    TpsNumberValue.setLinespacing(0);
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 8014cac:	2100      	movs	r1, #0
 8014cae:	4618      	mov	r0, r3
 8014cb0:	f7fe f8e4 	bl	8012e7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(TpsNumberValueBuffer, TPSNUMBERVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID75).getText());
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	f603 4408 	addw	r4, r3, #3080	; 0xc08
 8014cba:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8014cbe:	2135      	movs	r1, #53	; 0x35
 8014cc0:	4618      	mov	r0, r3
 8014cc2:	f7fe f81f 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8014cc6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8014cca:	4618      	mov	r0, r3
 8014ccc:	f7fe f82a 	bl	8012d24 <_ZNK8touchgfx9TypedText7getTextEv>
 8014cd0:	4603      	mov	r3, r0
 8014cd2:	4a9c      	ldr	r2, [pc, #624]	; (8014f44 <_ZN12MainViewBaseC1Ev+0x17e4>)
 8014cd4:	2105      	movs	r1, #5
 8014cd6:	4620      	mov	r0, r4
 8014cd8:	f00b fdba 	bl	8020850 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    TpsNumberValue.setWildcard(TpsNumberValueBuffer);
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	f503 622c 	add.w	r2, r3, #2752	; 0xac0
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	f603 4308 	addw	r3, r3, #3080	; 0xc08
 8014ce8:	4619      	mov	r1, r3
 8014cea:	4610      	mov	r0, r2
 8014cec:	f7fe f94e 	bl	8012f8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    TpsNumberValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID74));
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	f503 642c 	add.w	r4, r3, #2752	; 0xac0
 8014cf6:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8014cfa:	2134      	movs	r1, #52	; 0x34
 8014cfc:	4618      	mov	r0, r3
 8014cfe:	f7fe f801 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8014d02:	f8b7 10fc 	ldrh.w	r1, [r7, #252]	; 0xfc
 8014d06:	4620      	mov	r0, r4
 8014d08:	f008 f8a4 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    BtnGoToSecondScreen.setBoxWithBorderPosition(0, 0, 122, 272);
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	f603 20f8 	addw	r0, r3, #2808	; 0xaf8
 8014d12:	f44f 7388 	mov.w	r3, #272	; 0x110
 8014d16:	9300      	str	r3, [sp, #0]
 8014d18:	237a      	movs	r3, #122	; 0x7a
 8014d1a:	2200      	movs	r2, #0
 8014d1c:	2100      	movs	r1, #0
 8014d1e:	f000 fac1 	bl	80152a4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE24setBoxWithBorderPositionEssss>
    BtnGoToSecondScreen.setBorderSize(5);
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 8014d28:	2105      	movs	r1, #5
 8014d2a:	4618      	mov	r0, r3
 8014d2c:	f000 fada 	bl	80152e4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE13setBorderSizeEh>
    BtnGoToSecondScreen.setBoxWithBorderColors(touchgfx::Color::getColorFrom24BitRGB(0, 102, 153), touchgfx::Color::getColorFrom24BitRGB(0, 153, 204), touchgfx::Color::getColorFrom24BitRGB(0, 51, 102), touchgfx::Color::getColorFrom24BitRGB(51, 102, 153));
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	f603 24f8 	addw	r4, r3, #2808	; 0xaf8
 8014d36:	2299      	movs	r2, #153	; 0x99
 8014d38:	2166      	movs	r1, #102	; 0x66
 8014d3a:	2000      	movs	r0, #0
 8014d3c:	f7fe fce6 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014d40:	4605      	mov	r5, r0
 8014d42:	22cc      	movs	r2, #204	; 0xcc
 8014d44:	2199      	movs	r1, #153	; 0x99
 8014d46:	2000      	movs	r0, #0
 8014d48:	f7fe fce0 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014d4c:	4606      	mov	r6, r0
 8014d4e:	2266      	movs	r2, #102	; 0x66
 8014d50:	2133      	movs	r1, #51	; 0x33
 8014d52:	2000      	movs	r0, #0
 8014d54:	f7fe fcda 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014d58:	4680      	mov	r8, r0
 8014d5a:	2299      	movs	r2, #153	; 0x99
 8014d5c:	2166      	movs	r1, #102	; 0x66
 8014d5e:	2033      	movs	r0, #51	; 0x33
 8014d60:	f7fe fcd4 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014d64:	4603      	mov	r3, r0
 8014d66:	9300      	str	r3, [sp, #0]
 8014d68:	4643      	mov	r3, r8
 8014d6a:	4632      	mov	r2, r6
 8014d6c:	4629      	mov	r1, r5
 8014d6e:	4620      	mov	r0, r4
 8014d70:	f000 fac9 	bl	8015306 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    BtnGoToSecondScreen.setPosition(358, 0, 122, 272);
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	f603 20f8 	addw	r0, r3, #2808	; 0xaf8
 8014d7a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8014d7e:	9300      	str	r3, [sp, #0]
 8014d80:	237a      	movs	r3, #122	; 0x7a
 8014d82:	2200      	movs	r2, #0
 8014d84:	f44f 71b3 	mov.w	r1, #358	; 0x166
 8014d88:	f7fb ffce 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    BtnGoToSecondScreen.setAlpha(0);
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 8014d92:	2100      	movs	r1, #0
 8014d94:	4618      	mov	r0, r3
 8014d96:	f7fe fa10 	bl	80131ba <_ZN8touchgfx23AbstractButtonContainer8setAlphaEh>
    BtnGoToSecondScreen.setAction(flexButtonCallback);
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	f603 22f8 	addw	r2, r3, #2808	; 0xaf8
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	f603 4314 	addw	r3, r3, #3092	; 0xc14
 8014da6:	4619      	mov	r1, r3
 8014da8:	4610      	mov	r0, r2
 8014daa:	f7fe fa27 	bl	80131fc <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(backgroundBox);
 8014dae:	687a      	ldr	r2, [r7, #4]
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	3340      	adds	r3, #64	; 0x40
 8014db4:	4619      	mov	r1, r3
 8014db6:	4610      	mov	r0, r2
 8014db8:	f7fd feec 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(KpaDescriptor);
 8014dbc:	687a      	ldr	r2, [r7, #4]
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	3370      	adds	r3, #112	; 0x70
 8014dc2:	4619      	mov	r1, r3
 8014dc4:	4610      	mov	r0, r2
 8014dc6:	f7fd fee5 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CltDecsriptor);
 8014dca:	687a      	ldr	r2, [r7, #4]
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	33a4      	adds	r3, #164	; 0xa4
 8014dd0:	4619      	mov	r1, r3
 8014dd2:	4610      	mov	r0, r2
 8014dd4:	f7fd fede 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(LambdaDescriptor);
 8014dd8:	687a      	ldr	r2, [r7, #4]
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	33d8      	adds	r3, #216	; 0xd8
 8014dde:	4619      	mov	r1, r3
 8014de0:	4610      	mov	r0, r2
 8014de2:	f7fd fed7 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TrgtDescriptor);
 8014de6:	687a      	ldr	r2, [r7, #4]
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8014dee:	4619      	mov	r1, r3
 8014df0:	4610      	mov	r0, r2
 8014df2:	f7fd fecf 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(LambdaValue);
 8014df6:	687a      	ldr	r2, [r7, #4]
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8014dfe:	4619      	mov	r1, r3
 8014e00:	4610      	mov	r0, r2
 8014e02:	f7fd fec7 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TrgtValue);
 8014e06:	687a      	ldr	r2, [r7, #4]
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8014e0e:	4619      	mov	r1, r3
 8014e10:	4610      	mov	r0, r2
 8014e12:	f7fd febf 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(backgroundImage);
 8014e16:	687a      	ldr	r2, [r7, #4]
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8014e1e:	4619      	mov	r1, r3
 8014e20:	4610      	mov	r0, r2
 8014e22:	f7fd feb7 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm1);
 8014e26:	687a      	ldr	r2, [r7, #4]
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8014e2e:	4619      	mov	r1, r3
 8014e30:	4610      	mov	r0, r2
 8014e32:	f7fd feaf 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm2);
 8014e36:	687a      	ldr	r2, [r7, #4]
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8014e3e:	4619      	mov	r1, r3
 8014e40:	4610      	mov	r0, r2
 8014e42:	f7fd fea7 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm3);
 8014e46:	687a      	ldr	r2, [r7, #4]
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8014e4e:	4619      	mov	r1, r3
 8014e50:	4610      	mov	r0, r2
 8014e52:	f7fd fe9f 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm4);
 8014e56:	687a      	ldr	r2, [r7, #4]
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8014e5e:	4619      	mov	r1, r3
 8014e60:	4610      	mov	r0, r2
 8014e62:	f7fd fe97 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm5);
 8014e66:	687a      	ldr	r2, [r7, #4]
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8014e6e:	4619      	mov	r1, r3
 8014e70:	4610      	mov	r0, r2
 8014e72:	f7fd fe8f 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm6);
 8014e76:	687a      	ldr	r2, [r7, #4]
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8014e7e:	4619      	mov	r1, r3
 8014e80:	4610      	mov	r0, r2
 8014e82:	f7fd fe87 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm7);
 8014e86:	687a      	ldr	r2, [r7, #4]
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8014e8e:	4619      	mov	r1, r3
 8014e90:	4610      	mov	r0, r2
 8014e92:	f7fd fe7f 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpm8);
 8014e96:	687a      	ldr	r2, [r7, #4]
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8014e9e:	4619      	mov	r1, r3
 8014ea0:	4610      	mov	r0, r2
 8014ea2:	f7fd fe77 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line11);
 8014ea6:	687a      	ldr	r2, [r7, #4]
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8014eae:	4619      	mov	r1, r3
 8014eb0:	4610      	mov	r0, r2
 8014eb2:	f7fd fe6f 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor);
 8014eb6:	687a      	ldr	r2, [r7, #4]
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8014ebe:	4619      	mov	r1, r3
 8014ec0:	4610      	mov	r0, r2
 8014ec2:	f7fd fe67 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(EGTDescriptor);
 8014ec6:	687a      	ldr	r2, [r7, #4]
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 8014ece:	4619      	mov	r1, r3
 8014ed0:	4610      	mov	r0, r2
 8014ed2:	f7fd fe5f 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATValue);
 8014ed6:	687a      	ldr	r2, [r7, #4]
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8014ede:	4619      	mov	r1, r3
 8014ee0:	4610      	mov	r0, r2
 8014ee2:	f7fd fe57 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(EGTValue);
 8014ee6:	687a      	ldr	r2, [r7, #4]
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 8014eee:	4619      	mov	r1, r3
 8014ef0:	4610      	mov	r0, r2
 8014ef2:	f7fd fe4f 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor_1);
 8014ef6:	687a      	ldr	r2, [r7, #4]
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8014efe:	4619      	mov	r1, r3
 8014f00:	4610      	mov	r0, r2
 8014f02:	f7fd fe47 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ECTDescriptor_1);
 8014f06:	687a      	ldr	r2, [r7, #4]
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8014f0e:	4619      	mov	r1, r3
 8014f10:	4610      	mov	r0, r2
 8014f12:	f7fd fe3f 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(OILTempValue);
 8014f16:	687a      	ldr	r2, [r7, #4]
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8014f1e:	4619      	mov	r1, r3
 8014f20:	4610      	mov	r0, r2
 8014f22:	f7fd fe37 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(OILPressureValue);
 8014f26:	687a      	ldr	r2, [r7, #4]
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8014f2e:	4619      	mov	r1, r3
 8014f30:	4610      	mov	r0, r2
 8014f32:	f7fd fe2f 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IATDescriptor_1_1);
 8014f36:	687a      	ldr	r2, [r7, #4]
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	f503 63bb 	add.w	r3, r3, #1496	; 0x5d8
 8014f3e:	4619      	mov	r1, r3
 8014f40:	e002      	b.n	8014f48 <_ZN12MainViewBaseC1Ev+0x17e8>
 8014f42:	bf00      	nop
 8014f44:	0802bca8 	.word	0x0802bca8
 8014f48:	4610      	mov	r0, r2
 8014f4a:	f7fd fe23 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TPSProgress);
 8014f4e:	687a      	ldr	r2, [r7, #4]
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	f203 630c 	addw	r3, r3, #1548	; 0x60c
 8014f56:	4619      	mov	r1, r3
 8014f58:	4610      	mov	r0, r2
 8014f5a:	f7fd fe1b 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line10);
 8014f5e:	687a      	ldr	r2, [r7, #4]
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 8014f66:	4619      	mov	r1, r3
 8014f68:	4610      	mov	r0, r2
 8014f6a:	f7fd fe13 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line10_1);
 8014f6e:	687a      	ldr	r2, [r7, #4]
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8014f76:	4619      	mov	r1, r3
 8014f78:	4610      	mov	r0, r2
 8014f7a:	f7fd fe0b 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(BatteryVoltage);
 8014f7e:	687a      	ldr	r2, [r7, #4]
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	f203 73e4 	addw	r3, r3, #2020	; 0x7e4
 8014f86:	4619      	mov	r1, r3
 8014f88:	4610      	mov	r0, r2
 8014f8a:	f7fd fe03 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RPMProgressBar);
 8014f8e:	687a      	ldr	r2, [r7, #4]
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8014f96:	4619      	mov	r1, r3
 8014f98:	4610      	mov	r0, r2
 8014f9a:	f7fd fdfb 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(RPMValue);
 8014f9e:	687a      	ldr	r2, [r7, #4]
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 8014fa6:	4619      	mov	r1, r3
 8014fa8:	4610      	mov	r0, r2
 8014faa:	f7fd fdf3 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CltValue_1_1);
 8014fae:	687a      	ldr	r2, [r7, #4]
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	f603 1344 	addw	r3, r3, #2372	; 0x944
 8014fb6:	4619      	mov	r1, r3
 8014fb8:	4610      	mov	r0, r2
 8014fba:	f7fd fdeb 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CLTValue);
 8014fbe:	687a      	ldr	r2, [r7, #4]
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	f603 1378 	addw	r3, r3, #2424	; 0x978
 8014fc6:	4619      	mov	r1, r3
 8014fc8:	4610      	mov	r0, r2
 8014fca:	f7fd fde3 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(MAPValue);
 8014fce:	687a      	ldr	r2, [r7, #4]
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 8014fd6:	4619      	mov	r1, r3
 8014fd8:	4610      	mov	r0, r2
 8014fda:	f7fd fddb 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(EGTValue2);
 8014fde:	687a      	ldr	r2, [r7, #4]
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 8014fe6:	4619      	mov	r1, r3
 8014fe8:	4610      	mov	r0, r2
 8014fea:	f7fd fdd3 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(EGT2Descriptor);
 8014fee:	687a      	ldr	r2, [r7, #4]
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8014ff6:	4619      	mov	r1, r3
 8014ff8:	4610      	mov	r0, r2
 8014ffa:	f7fd fdcb 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(FuelPValue);
 8014ffe:	687a      	ldr	r2, [r7, #4]
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 8015006:	4619      	mov	r1, r3
 8015008:	4610      	mov	r0, r2
 801500a:	f7fd fdc3 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(FuelPDescriptor);
 801500e:	687a      	ldr	r2, [r7, #4]
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8015016:	4619      	mov	r1, r3
 8015018:	4610      	mov	r0, r2
 801501a:	f7fd fdbb 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(TpsNumberValue);
 801501e:	687a      	ldr	r2, [r7, #4]
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 8015026:	4619      	mov	r1, r3
 8015028:	4610      	mov	r0, r2
 801502a:	f7fd fdb3 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(BtnGoToSecondScreen);
 801502e:	687a      	ldr	r2, [r7, #4]
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 8015036:	4619      	mov	r1, r3
 8015038:	4610      	mov	r0, r2
 801503a:	f7fd fdab 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	4618      	mov	r0, r3
 8015042:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8015046:	46bd      	mov	sp, r7
 8015048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801504c <_ZN12MainViewBase11setupScreenEv>:

void MainViewBase::setupScreen()
{
 801504c:	b480      	push	{r7}
 801504e:	b083      	sub	sp, #12
 8015050:	af00      	add	r7, sp, #0
 8015052:	6078      	str	r0, [r7, #4]

}
 8015054:	bf00      	nop
 8015056:	370c      	adds	r7, #12
 8015058:	46bd      	mov	sp, r7
 801505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801505e:	4770      	bx	lr

08015060 <_ZN12MainViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void MainViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
 8015060:	b580      	push	{r7, lr}
 8015062:	b082      	sub	sp, #8
 8015064:	af00      	add	r7, sp, #0
 8015066:	6078      	str	r0, [r7, #4]
 8015068:	6039      	str	r1, [r7, #0]
    if (&src == &BtnGoToSecondScreen)
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 8015070:	683a      	ldr	r2, [r7, #0]
 8015072:	429a      	cmp	r2, r3
 8015074:	d106      	bne.n	8015084 <_ZN12MainViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x24>
    {
        //Interaction1
        //When BtnGoToSecondScreen clicked change screen to SecondScreen
        //Go to SecondScreen with screen transition towards East
        application().gotoSecondScreenScreenSlideTransitionEast();
 8015076:	6878      	ldr	r0, [r7, #4]
 8015078:	f7fe fb3d 	bl	80136f6 <_ZN12MainViewBase11applicationEv>
 801507c:	4603      	mov	r3, r0
 801507e:	4618      	mov	r0, r3
 8015080:	f7fc f956 	bl	8011330 <_ZN23FrontendApplicationBase41gotoSecondScreenScreenSlideTransitionEastEv>
    }
}
 8015084:	bf00      	nop
 8015086:	3708      	adds	r7, #8
 8015088:	46bd      	mov	sp, r7
 801508a:	bd80      	pop	{r7, pc}

0801508c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEED1Ev>:
    /**
     * @fn virtual BoxWithBorderButtonStyle::~BoxWithBorderButtonStyle()
     *
     * @brief Destructor.
     */
    virtual ~BoxWithBorderButtonStyle() { }
 801508c:	b580      	push	{r7, lr}
 801508e:	b082      	sub	sp, #8
 8015090:	af00      	add	r7, sp, #0
 8015092:	6078      	str	r0, [r7, #4]
 8015094:	4a08      	ldr	r2, [pc, #32]	; (80150b8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEED1Ev+0x2c>)
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	601a      	str	r2, [r3, #0]
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	3334      	adds	r3, #52	; 0x34
 801509e:	4618      	mov	r0, r3
 80150a0:	f7fe f97c 	bl	801339c <_ZN8touchgfx13BoxWithBorderD1Ev>
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	4618      	mov	r0, r3
 80150a8:	f7fe f8dc 	bl	8013264 <_ZN8touchgfx18TouchButtonTriggerD1Ev>
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	4618      	mov	r0, r3
 80150b0:	3708      	adds	r7, #8
 80150b2:	46bd      	mov	sp, r7
 80150b4:	bd80      	pop	{r7, pc}
 80150b6:	bf00      	nop
 80150b8:	0802c840 	.word	0x0802c840

080150bc <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEED0Ev>:
 80150bc:	b580      	push	{r7, lr}
 80150be:	b082      	sub	sp, #8
 80150c0:	af00      	add	r7, sp, #0
 80150c2:	6078      	str	r0, [r7, #4]
 80150c4:	6878      	ldr	r0, [r7, #4]
 80150c6:	f7ff ffe1 	bl	801508c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEED1Ev>
 80150ca:	2178      	movs	r1, #120	; 0x78
 80150cc:	6878      	ldr	r0, [r7, #4]
 80150ce:	f015 fb2c 	bl	802a72a <_ZdlPvj>
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	4618      	mov	r0, r3
 80150d6:	3708      	adds	r7, #8
 80150d8:	46bd      	mov	sp, r7
 80150da:	bd80      	pop	{r7, pc}

080150dc <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>:
    View() : presenter(0)
 80150dc:	b580      	push	{r7, lr}
 80150de:	b082      	sub	sp, #8
 80150e0:	af00      	add	r7, sp, #0
 80150e2:	6078      	str	r0, [r7, #4]
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	4618      	mov	r0, r3
 80150e8:	f00a fab2 	bl	801f650 <_ZN8touchgfx6ScreenC1Ev>
 80150ec:	4a05      	ldr	r2, [pc, #20]	; (8015104 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev+0x28>)
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	601a      	str	r2, [r3, #0]
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	2200      	movs	r2, #0
 80150f6:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	4618      	mov	r0, r3
 80150fc:	3708      	adds	r7, #8
 80150fe:	46bd      	mov	sp, r7
 8015100:	bd80      	pop	{r7, pc}
 8015102:	bf00      	nop
 8015104:	0802c8d4 	.word	0x0802c8d4

08015108 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEC1Ev>:
    BoxWithBorderButtonStyle() : T(), up(), down()
 8015108:	b580      	push	{r7, lr}
 801510a:	b082      	sub	sp, #8
 801510c:	af00      	add	r7, sp, #0
 801510e:	6078      	str	r0, [r7, #4]
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	4618      	mov	r0, r3
 8015114:	f7fe f894 	bl	8013240 <_ZN8touchgfx18TouchButtonTriggerC1Ev>
 8015118:	4a17      	ldr	r2, [pc, #92]	; (8015178 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEEC1Ev+0x70>)
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	601a      	str	r2, [r3, #0]
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	3334      	adds	r3, #52	; 0x34
 8015122:	4618      	mov	r0, r3
 8015124:	f7fe f914 	bl	8013350 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	3368      	adds	r3, #104	; 0x68
 801512c:	4618      	mov	r0, r3
 801512e:	f7fd facc 	bl	80126ca <_ZN8touchgfx9colortypeC1Ev>
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	336c      	adds	r3, #108	; 0x6c
 8015136:	4618      	mov	r0, r3
 8015138:	f7fd fac7 	bl	80126ca <_ZN8touchgfx9colortypeC1Ev>
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	3370      	adds	r3, #112	; 0x70
 8015140:	4618      	mov	r0, r3
 8015142:	f7fd fac2 	bl	80126ca <_ZN8touchgfx9colortypeC1Ev>
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	3374      	adds	r3, #116	; 0x74
 801514a:	4618      	mov	r0, r3
 801514c:	f7fd fabd 	bl	80126ca <_ZN8touchgfx9colortypeC1Ev>
        borderBox.setXY(0, 0);
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	3334      	adds	r3, #52	; 0x34
 8015154:	2200      	movs	r2, #0
 8015156:	2100      	movs	r1, #0
 8015158:	4618      	mov	r0, r3
 801515a:	f7fd fb93 	bl	8012884 <_ZN8touchgfx8Drawable5setXYEss>
        T::add(borderBox);
 801515e:	687a      	ldr	r2, [r7, #4]
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	3334      	adds	r3, #52	; 0x34
 8015164:	4619      	mov	r1, r3
 8015166:	4610      	mov	r0, r2
 8015168:	f005 ff5c 	bl	801b024 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	4618      	mov	r0, r3
 8015170:	3708      	adds	r7, #8
 8015172:	46bd      	mov	sp, r7
 8015174:	bd80      	pop	{r7, pc}
 8015176:	bf00      	nop
 8015178:	0802c840 	.word	0x0802c840

0801517c <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev>:
class GenericCallback<T1, void, void>
 801517c:	b480      	push	{r7}
 801517e:	b083      	sub	sp, #12
 8015180:	af00      	add	r7, sp, #0
 8015182:	6078      	str	r0, [r7, #4]
 8015184:	4a04      	ldr	r2, [pc, #16]	; (8015198 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev+0x1c>)
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	601a      	str	r2, [r3, #0]
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	4618      	mov	r0, r3
 801518e:	370c      	adds	r7, #12
 8015190:	46bd      	mov	sp, r7
 8015192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015196:	4770      	bx	lr
 8015198:	0802c99c 	.word	0x0802c99c

0801519c <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 801519c:	b580      	push	{r7, lr}
 801519e:	b084      	sub	sp, #16
 80151a0:	af00      	add	r7, sp, #0
 80151a2:	60f8      	str	r0, [r7, #12]
 80151a4:	60b9      	str	r1, [r7, #8]
 80151a6:	4639      	mov	r1, r7
 80151a8:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 80151ac:	68fb      	ldr	r3, [r7, #12]
 80151ae:	4618      	mov	r0, r3
 80151b0:	f7ff ffe4 	bl	801517c <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev>
 80151b4:	4a08      	ldr	r2, [pc, #32]	; (80151d8 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 80151b6:	68fb      	ldr	r3, [r7, #12]
 80151b8:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 80151ba:	68fb      	ldr	r3, [r7, #12]
 80151bc:	68ba      	ldr	r2, [r7, #8]
 80151be:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 80151c0:	68fb      	ldr	r3, [r7, #12]
 80151c2:	3308      	adds	r3, #8
 80151c4:	463a      	mov	r2, r7
 80151c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80151ca:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80151ce:	68fb      	ldr	r3, [r7, #12]
 80151d0:	4618      	mov	r0, r3
 80151d2:	3710      	adds	r7, #16
 80151d4:	46bd      	mov	sp, r7
 80151d6:	bd80      	pop	{r7, pc}
 80151d8:	0802c828 	.word	0x0802c828

080151dc <_ZN8touchgfx4Line8setStartIiEEvT_S2_>:
    void setStart(T x, T y)
 80151dc:	b590      	push	{r4, r7, lr}
 80151de:	b089      	sub	sp, #36	; 0x24
 80151e0:	af00      	add	r7, sp, #0
 80151e2:	60f8      	str	r0, [r7, #12]
 80151e4:	60b9      	str	r1, [r7, #8]
 80151e6:	607a      	str	r2, [r7, #4]
 80151e8:	68bb      	ldr	r3, [r7, #8]
 80151ea:	61bb      	str	r3, [r7, #24]
#ifndef  __ICCARM__
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 80151ec:	69bb      	ldr	r3, [r7, #24]
 80151ee:	015a      	lsls	r2, r3, #5
 80151f0:	f107 0314 	add.w	r3, r7, #20
 80151f4:	4611      	mov	r1, r2
 80151f6:	4618      	mov	r0, r3
 80151f8:	f7fd fef8 	bl	8012fec <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80151fc:	697b      	ldr	r3, [r7, #20]
 80151fe:	461c      	mov	r4, r3
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	61fb      	str	r3, [r7, #28]
 8015204:	69fb      	ldr	r3, [r7, #28]
 8015206:	015a      	lsls	r2, r3, #5
 8015208:	f107 0310 	add.w	r3, r7, #16
 801520c:	4611      	mov	r1, r2
 801520e:	4618      	mov	r0, r3
 8015210:	f7fd feec 	bl	8012fec <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8015214:	693b      	ldr	r3, [r7, #16]
        setStart(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8015216:	461a      	mov	r2, r3
 8015218:	4621      	mov	r1, r4
 801521a:	68f8      	ldr	r0, [r7, #12]
 801521c:	f007 fb8e 	bl	801c93c <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>
    }
 8015220:	bf00      	nop
 8015222:	3724      	adds	r7, #36	; 0x24
 8015224:	46bd      	mov	sp, r7
 8015226:	bd90      	pop	{r4, r7, pc}

08015228 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>:
    void setEnd(T x, T y)
 8015228:	b590      	push	{r4, r7, lr}
 801522a:	b089      	sub	sp, #36	; 0x24
 801522c:	af00      	add	r7, sp, #0
 801522e:	60f8      	str	r0, [r7, #12]
 8015230:	60b9      	str	r1, [r7, #8]
 8015232:	607a      	str	r2, [r7, #4]
 8015234:	68bb      	ldr	r3, [r7, #8]
 8015236:	61bb      	str	r3, [r7, #24]
 8015238:	69bb      	ldr	r3, [r7, #24]
 801523a:	015a      	lsls	r2, r3, #5
 801523c:	f107 0314 	add.w	r3, r7, #20
 8015240:	4611      	mov	r1, r2
 8015242:	4618      	mov	r0, r3
 8015244:	f7fd fed2 	bl	8012fec <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8015248:	697b      	ldr	r3, [r7, #20]
 801524a:	461c      	mov	r4, r3
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	61fb      	str	r3, [r7, #28]
 8015250:	69fb      	ldr	r3, [r7, #28]
 8015252:	015a      	lsls	r2, r3, #5
 8015254:	f107 0310 	add.w	r3, r7, #16
 8015258:	4611      	mov	r1, r2
 801525a:	4618      	mov	r0, r3
 801525c:	f7fd fec6 	bl	8012fec <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8015260:	693b      	ldr	r3, [r7, #16]
        setEnd(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8015262:	461a      	mov	r2, r3
 8015264:	4621      	mov	r1, r4
 8015266:	68f8      	ldr	r0, [r7, #12]
 8015268:	f007 fb73 	bl	801c952 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>
    }
 801526c:	bf00      	nop
 801526e:	3724      	adds	r7, #36	; 0x24
 8015270:	46bd      	mov	sp, r7
 8015272:	bd90      	pop	{r4, r7, pc}

08015274 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>:
    void setLineWidth(T width)
 8015274:	b580      	push	{r7, lr}
 8015276:	b084      	sub	sp, #16
 8015278:	af00      	add	r7, sp, #0
 801527a:	6078      	str	r0, [r7, #4]
 801527c:	6039      	str	r1, [r7, #0]
 801527e:	683b      	ldr	r3, [r7, #0]
 8015280:	60fb      	str	r3, [r7, #12]
 8015282:	68fb      	ldr	r3, [r7, #12]
 8015284:	015a      	lsls	r2, r3, #5
 8015286:	f107 0308 	add.w	r3, r7, #8
 801528a:	4611      	mov	r1, r2
 801528c:	4618      	mov	r0, r3
 801528e:	f7fd fead 	bl	8012fec <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8015292:	68bb      	ldr	r3, [r7, #8]
        setLineWidth(CWRUtil::toQ5<T>(width));
 8015294:	4619      	mov	r1, r3
 8015296:	6878      	ldr	r0, [r7, #4]
 8015298:	f7fd fec3 	bl	8013022 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>
    }
 801529c:	bf00      	nop
 801529e:	3710      	adds	r7, #16
 80152a0:	46bd      	mov	sp, r7
 80152a2:	bd80      	pop	{r7, pc}

080152a4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE24setBoxWithBorderPositionEssss>:
     * @param x      The x coordinate of this BoxWithBorderButtonStyle.
     * @param y      The y coordinate of this BoxWithBorderButtonStyle.
     * @param width  The width of this BoxWithBorderButtonStyle.
     * @param height The height of this BoxWithBorderButtonStyle.
     */
    void setBoxWithBorderPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 80152a4:	b590      	push	{r4, r7, lr}
 80152a6:	b087      	sub	sp, #28
 80152a8:	af02      	add	r7, sp, #8
 80152aa:	60f8      	str	r0, [r7, #12]
 80152ac:	4608      	mov	r0, r1
 80152ae:	4611      	mov	r1, r2
 80152b0:	461a      	mov	r2, r3
 80152b2:	4603      	mov	r3, r0
 80152b4:	817b      	strh	r3, [r7, #10]
 80152b6:	460b      	mov	r3, r1
 80152b8:	813b      	strh	r3, [r7, #8]
 80152ba:	4613      	mov	r3, r2
 80152bc:	80fb      	strh	r3, [r7, #6]
    {
        borderBox.setPosition(x, y, width, height);
 80152be:	68fb      	ldr	r3, [r7, #12]
 80152c0:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80152c4:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 80152c8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80152cc:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80152d0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80152d4:	9300      	str	r3, [sp, #0]
 80152d6:	4623      	mov	r3, r4
 80152d8:	f7fb fd26 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 80152dc:	bf00      	nop
 80152de:	3714      	adds	r7, #20
 80152e0:	46bd      	mov	sp, r7
 80152e2:	bd90      	pop	{r4, r7, pc}

080152e4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE13setBorderSizeEh>:
     *
     * @brief Sets border size.
     *
     * @param size The size.
     */
    void setBorderSize(uint8_t size)
 80152e4:	b580      	push	{r7, lr}
 80152e6:	b082      	sub	sp, #8
 80152e8:	af00      	add	r7, sp, #0
 80152ea:	6078      	str	r0, [r7, #4]
 80152ec:	460b      	mov	r3, r1
 80152ee:	70fb      	strb	r3, [r7, #3]
    {
        borderBox.setBorderSize(size);
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	3334      	adds	r3, #52	; 0x34
 80152f4:	78fa      	ldrb	r2, [r7, #3]
 80152f6:	4611      	mov	r1, r2
 80152f8:	4618      	mov	r0, r3
 80152fa:	f7fe f88d 	bl	8013418 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEh>
    }
 80152fe:	bf00      	nop
 8015300:	3708      	adds	r7, #8
 8015302:	46bd      	mov	sp, r7
 8015304:	bd80      	pop	{r7, pc}

08015306 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>:
    void setBoxWithBorderColors(const colortype colorReleased, const colortype colorPressed, const colortype borderColorReleased, const colortype borderColorPressed)
 8015306:	b580      	push	{r7, lr}
 8015308:	b084      	sub	sp, #16
 801530a:	af00      	add	r7, sp, #0
 801530c:	60f8      	str	r0, [r7, #12]
 801530e:	60b9      	str	r1, [r7, #8]
 8015310:	607a      	str	r2, [r7, #4]
 8015312:	603b      	str	r3, [r7, #0]
        up = colorReleased;
 8015314:	68fb      	ldr	r3, [r7, #12]
 8015316:	68ba      	ldr	r2, [r7, #8]
 8015318:	669a      	str	r2, [r3, #104]	; 0x68
        down = colorPressed;
 801531a:	68fb      	ldr	r3, [r7, #12]
 801531c:	687a      	ldr	r2, [r7, #4]
 801531e:	66da      	str	r2, [r3, #108]	; 0x6c
        borderUp = borderColorReleased;
 8015320:	68fb      	ldr	r3, [r7, #12]
 8015322:	683a      	ldr	r2, [r7, #0]
 8015324:	671a      	str	r2, [r3, #112]	; 0x70
        borderDown = borderColorPressed;
 8015326:	68fb      	ldr	r3, [r7, #12]
 8015328:	69ba      	ldr	r2, [r7, #24]
 801532a:	675a      	str	r2, [r3, #116]	; 0x74
        handlePressedUpdated();
 801532c:	68fb      	ldr	r3, [r7, #12]
 801532e:	681b      	ldr	r3, [r3, #0]
 8015330:	3384      	adds	r3, #132	; 0x84
 8015332:	681b      	ldr	r3, [r3, #0]
 8015334:	68f8      	ldr	r0, [r7, #12]
 8015336:	4798      	blx	r3
    }
 8015338:	bf00      	nop
 801533a:	3710      	adds	r7, #16
 801533c:	46bd      	mov	sp, r7
 801533e:	bd80      	pop	{r7, pc}

08015340 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>:
    virtual ~GenericCallback()
 8015340:	b480      	push	{r7}
 8015342:	b083      	sub	sp, #12
 8015344:	af00      	add	r7, sp, #0
 8015346:	6078      	str	r0, [r7, #4]
    }
 8015348:	4a04      	ldr	r2, [pc, #16]	; (801535c <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev+0x1c>)
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	601a      	str	r2, [r3, #0]
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	4618      	mov	r0, r3
 8015352:	370c      	adds	r7, #12
 8015354:	46bd      	mov	sp, r7
 8015356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801535a:	4770      	bx	lr
 801535c:	0802c99c 	.word	0x0802c99c

08015360 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED0Ev>:
    virtual ~GenericCallback()
 8015360:	b580      	push	{r7, lr}
 8015362:	b082      	sub	sp, #8
 8015364:	af00      	add	r7, sp, #0
 8015366:	6078      	str	r0, [r7, #4]
    }
 8015368:	6878      	ldr	r0, [r7, #4]
 801536a:	f7ff ffe9 	bl	8015340 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>
 801536e:	2104      	movs	r1, #4
 8015370:	6878      	ldr	r0, [r7, #4]
 8015372:	f015 f9da 	bl	802a72a <_ZdlPvj>
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	4618      	mov	r0, r3
 801537a:	3708      	adds	r7, #8
 801537c:	46bd      	mov	sp, r7
 801537e:	bd80      	pop	{r7, pc}

08015380 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv>:
    /**
     * @fn virtual void BoxWithBorderButtonStyle::handlePressedUpdated()
     *
     * @brief Handles the pressed updated.
     */
    virtual void handlePressedUpdated()
 8015380:	b590      	push	{r4, r7, lr}
 8015382:	b083      	sub	sp, #12
 8015384:	af00      	add	r7, sp, #0
 8015386:	6078      	str	r0, [r7, #4]
    {
        borderBox.setColor(T::getPressed() ? down : up);
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	f103 0434 	add.w	r4, r3, #52	; 0x34
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	4618      	mov	r0, r3
 8015392:	f7fd ff05 	bl	80131a0 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8015396:	4603      	mov	r3, r0
 8015398:	2b00      	cmp	r3, #0
 801539a:	d002      	beq.n	80153a2 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv+0x22>
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	336c      	adds	r3, #108	; 0x6c
 80153a0:	e001      	b.n	80153a6 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv+0x26>
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	3368      	adds	r3, #104	; 0x68
 80153a6:	6819      	ldr	r1, [r3, #0]
 80153a8:	4620      	mov	r0, r4
 80153aa:	f7fe f819 	bl	80133e0 <_ZN8touchgfx13BoxWithBorder8setColorENS_9colortypeE>
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	f103 0434 	add.w	r4, r3, #52	; 0x34
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	4618      	mov	r0, r3
 80153b8:	f7fd fef2 	bl	80131a0 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 80153bc:	4603      	mov	r3, r0
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d002      	beq.n	80153c8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv+0x48>
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	3374      	adds	r3, #116	; 0x74
 80153c6:	e001      	b.n	80153cc <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv+0x4c>
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	3370      	adds	r3, #112	; 0x70
 80153cc:	6819      	ldr	r1, [r3, #0]
 80153ce:	4620      	mov	r0, r4
 80153d0:	f7fe f814 	bl	80133fc <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
        T::handlePressedUpdated();
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	4618      	mov	r0, r3
 80153d8:	f7fd ff1e 	bl	8013218 <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>
    }
 80153dc:	bf00      	nop
 80153de:	370c      	adds	r7, #12
 80153e0:	46bd      	mov	sp, r7
 80153e2:	bd90      	pop	{r4, r7, pc}

080153e4 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80153e4:	b580      	push	{r7, lr}
 80153e6:	b082      	sub	sp, #8
 80153e8:	af00      	add	r7, sp, #0
 80153ea:	6078      	str	r0, [r7, #4]
 80153ec:	4a05      	ldr	r2, [pc, #20]	; (8015404 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvED1Ev+0x20>)
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	601a      	str	r2, [r3, #0]
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	4618      	mov	r0, r3
 80153f6:	f7ff ffa3 	bl	8015340 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	4618      	mov	r0, r3
 80153fe:	3708      	adds	r7, #8
 8015400:	46bd      	mov	sp, r7
 8015402:	bd80      	pop	{r7, pc}
 8015404:	0802c828 	.word	0x0802c828

08015408 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
 8015408:	b580      	push	{r7, lr}
 801540a:	b082      	sub	sp, #8
 801540c:	af00      	add	r7, sp, #0
 801540e:	6078      	str	r0, [r7, #4]
 8015410:	6878      	ldr	r0, [r7, #4]
 8015412:	f7ff ffe7 	bl	80153e4 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 8015416:	2110      	movs	r1, #16
 8015418:	6878      	ldr	r0, [r7, #4]
 801541a:	f015 f986 	bl	802a72a <_ZdlPvj>
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	4618      	mov	r0, r3
 8015422:	3708      	adds	r7, #8
 8015424:	46bd      	mov	sp, r7
 8015426:	bd80      	pop	{r7, pc}

08015428 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8015428:	b580      	push	{r7, lr}
 801542a:	b082      	sub	sp, #8
 801542c:	af00      	add	r7, sp, #0
 801542e:	6078      	str	r0, [r7, #4]
 8015430:	4a05      	ldr	r2, [pc, #20]	; (8015448 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	601a      	str	r2, [r3, #0]
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	4618      	mov	r0, r3
 801543a:	f7fd fd6f 	bl	8012f1c <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	4618      	mov	r0, r3
 8015442:	3708      	adds	r7, #8
 8015444:	46bd      	mov	sp, r7
 8015446:	bd80      	pop	{r7, pc}
 8015448:	0802e9ec 	.word	0x0802e9ec

0801544c <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 801544c:	b580      	push	{r7, lr}
 801544e:	b082      	sub	sp, #8
 8015450:	af00      	add	r7, sp, #0
 8015452:	6078      	str	r0, [r7, #4]
 8015454:	6878      	ldr	r0, [r7, #4]
 8015456:	f7ff ffe7 	bl	8015428 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801545a:	2138      	movs	r1, #56	; 0x38
 801545c:	6878      	ldr	r0, [r7, #4]
 801545e:	f015 f964 	bl	802a72a <_ZdlPvj>
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	4618      	mov	r0, r3
 8015466:	3708      	adds	r7, #8
 8015468:	46bd      	mov	sp, r7
 801546a:	bd80      	pop	{r7, pc}

0801546c <_ZN8touchgfx4LineD1Ev>:
class Line : public CanvasWidget
 801546c:	b580      	push	{r7, lr}
 801546e:	b082      	sub	sp, #8
 8015470:	af00      	add	r7, sp, #0
 8015472:	6078      	str	r0, [r7, #4]
 8015474:	4a05      	ldr	r2, [pc, #20]	; (801548c <_ZN8touchgfx4LineD1Ev+0x20>)
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	601a      	str	r2, [r3, #0]
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	4618      	mov	r0, r3
 801547e:	f007 f837 	bl	801c4f0 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	4618      	mov	r0, r3
 8015486:	3708      	adds	r7, #8
 8015488:	46bd      	mov	sp, r7
 801548a:	bd80      	pop	{r7, pc}
 801548c:	0802e618 	.word	0x0802e618

08015490 <_ZN8touchgfx4LineD0Ev>:
 8015490:	b580      	push	{r7, lr}
 8015492:	b082      	sub	sp, #8
 8015494:	af00      	add	r7, sp, #0
 8015496:	6078      	str	r0, [r7, #4]
 8015498:	6878      	ldr	r0, [r7, #4]
 801549a:	f7ff ffe7 	bl	801546c <_ZN8touchgfx4LineD1Ev>
 801549e:	2174      	movs	r1, #116	; 0x74
 80154a0:	6878      	ldr	r0, [r7, #4]
 80154a2:	f015 f942 	bl	802a72a <_ZdlPvj>
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	4618      	mov	r0, r3
 80154aa:	3708      	adds	r7, #8
 80154ac:	46bd      	mov	sp, r7
 80154ae:	bd80      	pop	{r7, pc}

080154b0 <_ZN8touchgfx13PainterRGB888D1Ev>:
 *        The PainterRGB888 class allows a shape to be filled with a given color and alpha
 *        value. This allows transparent, anti-aliased elements to be drawn.
 *
 * @see AbstractPainter
 */
class PainterRGB888 : public AbstractPainterRGB888
 80154b0:	b580      	push	{r7, lr}
 80154b2:	b082      	sub	sp, #8
 80154b4:	af00      	add	r7, sp, #0
 80154b6:	6078      	str	r0, [r7, #4]
 80154b8:	4a05      	ldr	r2, [pc, #20]	; (80154d0 <_ZN8touchgfx13PainterRGB888D1Ev+0x20>)
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	601a      	str	r2, [r3, #0]
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	4618      	mov	r0, r3
 80154c2:	f7fd fdd1 	bl	8013068 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	4618      	mov	r0, r3
 80154ca:	3708      	adds	r7, #8
 80154cc:	46bd      	mov	sp, r7
 80154ce:	bd80      	pop	{r7, pc}
 80154d0:	0802e31c 	.word	0x0802e31c

080154d4 <_ZN8touchgfx13PainterRGB888D0Ev>:
 80154d4:	b580      	push	{r7, lr}
 80154d6:	b082      	sub	sp, #8
 80154d8:	af00      	add	r7, sp, #0
 80154da:	6078      	str	r0, [r7, #4]
 80154dc:	6878      	ldr	r0, [r7, #4]
 80154de:	f7ff ffe7 	bl	80154b0 <_ZN8touchgfx13PainterRGB888D1Ev>
 80154e2:	2118      	movs	r1, #24
 80154e4:	6878      	ldr	r0, [r7, #4]
 80154e6:	f015 f920 	bl	802a72a <_ZdlPvj>
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	4618      	mov	r0, r3
 80154ee:	3708      	adds	r7, #8
 80154f0:	46bd      	mov	sp, r7
 80154f2:	bd80      	pop	{r7, pc}

080154f4 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80154f4:	b580      	push	{r7, lr}
 80154f6:	b082      	sub	sp, #8
 80154f8:	af00      	add	r7, sp, #0
 80154fa:	6078      	str	r0, [r7, #4]
 80154fc:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	685b      	ldr	r3, [r3, #4]
 8015502:	687a      	ldr	r2, [r7, #4]
 8015504:	68d2      	ldr	r2, [r2, #12]
 8015506:	1052      	asrs	r2, r2, #1
 8015508:	1898      	adds	r0, r3, r2
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	68db      	ldr	r3, [r3, #12]
 801550e:	f003 0301 	and.w	r3, r3, #1
 8015512:	2b00      	cmp	r3, #0
 8015514:	d102      	bne.n	801551c <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x28>
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	689b      	ldr	r3, [r3, #8]
 801551a:	e00a      	b.n	8015532 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x3e>
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	685b      	ldr	r3, [r3, #4]
 8015520:	687a      	ldr	r2, [r7, #4]
 8015522:	68d2      	ldr	r2, [r2, #12]
 8015524:	1052      	asrs	r2, r2, #1
 8015526:	4413      	add	r3, r2
 8015528:	681b      	ldr	r3, [r3, #0]
 801552a:	687a      	ldr	r2, [r7, #4]
 801552c:	6892      	ldr	r2, [r2, #8]
 801552e:	4413      	add	r3, r2
 8015530:	681b      	ldr	r3, [r3, #0]
 8015532:	6839      	ldr	r1, [r7, #0]
 8015534:	4798      	blx	r3
    }
 8015536:	bf00      	nop
 8015538:	3708      	adds	r7, #8
 801553a:	46bd      	mov	sp, r7
 801553c:	bd80      	pop	{r7, pc}

0801553e <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
    virtual bool isValid() const
 801553e:	b480      	push	{r7}
 8015540:	b083      	sub	sp, #12
 8015542:	af00      	add	r7, sp, #0
 8015544:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	685b      	ldr	r3, [r3, #4]
 801554a:	2b00      	cmp	r3, #0
 801554c:	d010      	beq.n	8015570 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	689b      	ldr	r3, [r3, #8]
 8015552:	2b00      	cmp	r3, #0
 8015554:	d107      	bne.n	8015566 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	68db      	ldr	r3, [r3, #12]
 801555a:	f003 0301 	and.w	r3, r3, #1
 801555e:	2b00      	cmp	r3, #0
 8015560:	d101      	bne.n	8015566 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 8015562:	2301      	movs	r3, #1
 8015564:	e000      	b.n	8015568 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x2a>
 8015566:	2300      	movs	r3, #0
 8015568:	2b01      	cmp	r3, #1
 801556a:	d001      	beq.n	8015570 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 801556c:	2301      	movs	r3, #1
 801556e:	e000      	b.n	8015572 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x34>
 8015570:	2300      	movs	r3, #0
    }
 8015572:	4618      	mov	r0, r3
 8015574:	370c      	adds	r7, #12
 8015576:	46bd      	mov	sp, r7
 8015578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801557c:	4770      	bx	lr

0801557e <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE18handleAlphaUpdatedEv>:
    /**
     * @fn virtual void BoxWithBorderButtonStyle::handleAlphaUpdated()
     *
     * @brief Handles the alpha updated.
     */
    virtual void handleAlphaUpdated()
 801557e:	b590      	push	{r4, r7, lr}
 8015580:	b083      	sub	sp, #12
 8015582:	af00      	add	r7, sp, #0
 8015584:	6078      	str	r0, [r7, #4]
    {
        borderBox.setAlpha(T::getAlpha());
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	f103 0434 	add.w	r4, r3, #52	; 0x34
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	4618      	mov	r0, r3
 8015590:	f7fd fe27 	bl	80131e2 <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 8015594:	4603      	mov	r3, r0
 8015596:	4619      	mov	r1, r3
 8015598:	4620      	mov	r0, r4
 801559a:	f7fd ff4d 	bl	8013438 <_ZN8touchgfx13BoxWithBorder8setAlphaEh>
        T::handleAlphaUpdated();
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	4618      	mov	r0, r3
 80155a2:	f7fd fe43 	bl	801322c <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>
    }
 80155a6:	bf00      	nop
 80155a8:	370c      	adds	r7, #12
 80155aa:	46bd      	mov	sp, r7
 80155ac:	bd90      	pop	{r4, r7, pc}
	...

080155b0 <_ZN8touchgfx18ClickButtonTriggerC1Ev>:
    /**
     * @fn ClickButtonTrigger::ClickButtonTrigger()
     *
     * @brief Default constructor.
     */
    ClickButtonTrigger() :
 80155b0:	b580      	push	{r7, lr}
 80155b2:	b082      	sub	sp, #8
 80155b4:	af00      	add	r7, sp, #0
 80155b6:	6078      	str	r0, [r7, #4]
        AbstractButtonContainer() { }
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	4618      	mov	r0, r3
 80155bc:	f7fd fd98 	bl	80130f0 <_ZN8touchgfx23AbstractButtonContainerC1Ev>
 80155c0:	4a03      	ldr	r2, [pc, #12]	; (80155d0 <_ZN8touchgfx18ClickButtonTriggerC1Ev+0x20>)
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	601a      	str	r2, [r3, #0]
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	4618      	mov	r0, r3
 80155ca:	3708      	adds	r7, #8
 80155cc:	46bd      	mov	sp, r7
 80155ce:	bd80      	pop	{r7, pc}
 80155d0:	0802ccd8 	.word	0x0802ccd8

080155d4 <_ZN8touchgfx18ClickButtonTriggerD1Ev>:
    /**
     * @fn virtual ClickButtonTrigger::~ClickButtonTrigger()
     *
     * @brief Destructor.
     */
    virtual ~ClickButtonTrigger() { }
 80155d4:	b580      	push	{r7, lr}
 80155d6:	b082      	sub	sp, #8
 80155d8:	af00      	add	r7, sp, #0
 80155da:	6078      	str	r0, [r7, #4]
 80155dc:	4a05      	ldr	r2, [pc, #20]	; (80155f4 <_ZN8touchgfx18ClickButtonTriggerD1Ev+0x20>)
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	601a      	str	r2, [r3, #0]
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	4618      	mov	r0, r3
 80155e6:	f7fd fda5 	bl	8013134 <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	4618      	mov	r0, r3
 80155ee:	3708      	adds	r7, #8
 80155f0:	46bd      	mov	sp, r7
 80155f2:	bd80      	pop	{r7, pc}
 80155f4:	0802ccd8 	.word	0x0802ccd8

080155f8 <_ZN8touchgfx18ClickButtonTriggerD0Ev>:
 80155f8:	b580      	push	{r7, lr}
 80155fa:	b082      	sub	sp, #8
 80155fc:	af00      	add	r7, sp, #0
 80155fe:	6078      	str	r0, [r7, #4]
 8015600:	6878      	ldr	r0, [r7, #4]
 8015602:	f7ff ffe7 	bl	80155d4 <_ZN8touchgfx18ClickButtonTriggerD1Ev>
 8015606:	2134      	movs	r1, #52	; 0x34
 8015608:	6878      	ldr	r0, [r7, #4]
 801560a:	f015 f88e 	bl	802a72a <_ZdlPvj>
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	4618      	mov	r0, r3
 8015612:	3708      	adds	r7, #8
 8015614:	46bd      	mov	sp, r7
 8015616:	bd80      	pop	{r7, pc}

08015618 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *        callback is called when receiving a REALEASED event in
     *        PRESSED state.
     *
     * @param event The event.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8015618:	b580      	push	{r7, lr}
 801561a:	b084      	sub	sp, #16
 801561c:	af00      	add	r7, sp, #0
 801561e:	6078      	str	r0, [r7, #4]
 8015620:	6039      	str	r1, [r7, #0]
    {
        bool wasPressed = getPressed();
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	4618      	mov	r0, r3
 8015626:	f7fd fdbb 	bl	80131a0 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 801562a:	4603      	mov	r3, r0
 801562c:	73fb      	strb	r3, [r7, #15]
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 801562e:	6838      	ldr	r0, [r7, #0]
 8015630:	f7fd f89f 	bl	8012772 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 8015634:	4603      	mov	r3, r0
 8015636:	2b00      	cmp	r3, #0
 8015638:	bf0c      	ite	eq
 801563a:	2301      	moveq	r3, #1
 801563c:	2300      	movne	r3, #0
 801563e:	73bb      	strb	r3, [r7, #14]
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 8015640:	7bbb      	ldrb	r3, [r7, #14]
 8015642:	2b00      	cmp	r3, #0
 8015644:	d005      	beq.n	8015652 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x3a>
 8015646:	7bfb      	ldrb	r3, [r7, #15]
 8015648:	f083 0301 	eor.w	r3, r3, #1
 801564c:	b2db      	uxtb	r3, r3
 801564e:	2b00      	cmp	r3, #0
 8015650:	d108      	bne.n	8015664 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x4c>
 8015652:	7bbb      	ldrb	r3, [r7, #14]
 8015654:	f083 0301 	eor.w	r3, r3, #1
 8015658:	b2db      	uxtb	r3, r3
 801565a:	2b00      	cmp	r3, #0
 801565c:	d00f      	beq.n	801567e <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
 801565e:	7bfb      	ldrb	r3, [r7, #15]
 8015660:	2b00      	cmp	r3, #0
 8015662:	d00c      	beq.n	801567e <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
        {
            setPressed(newPressedValue);
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	7bba      	ldrb	r2, [r7, #14]
 8015668:	4611      	mov	r1, r2
 801566a:	4618      	mov	r0, r3
 801566c:	f7fd fd84 	bl	8013178 <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>
            invalidate();
 8015670:	687a      	ldr	r2, [r7, #4]
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	681b      	ldr	r3, [r3, #0]
 8015676:	3314      	adds	r3, #20
 8015678:	681b      	ldr	r3, [r3, #0]
 801567a:	4610      	mov	r0, r2
 801567c:	4798      	blx	r3
        }
        if (wasPressed && (event.getType() == ClickEvent::RELEASED) && action)
 801567e:	7bfb      	ldrb	r3, [r7, #15]
 8015680:	2b00      	cmp	r3, #0
 8015682:	d00b      	beq.n	801569c <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x84>
 8015684:	6838      	ldr	r0, [r7, #0]
 8015686:	f7fd f874 	bl	8012772 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 801568a:	4603      	mov	r3, r0
 801568c:	2b01      	cmp	r3, #1
 801568e:	d105      	bne.n	801569c <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x84>
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015694:	2b00      	cmp	r3, #0
 8015696:	d001      	beq.n	801569c <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x84>
 8015698:	2301      	movs	r3, #1
 801569a:	e000      	b.n	801569e <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x86>
 801569c:	2300      	movs	r3, #0
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d015      	beq.n	80156ce <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xb6>
        {
            if (action->isValid())
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80156aa:	681b      	ldr	r3, [r3, #0]
 80156ac:	330c      	adds	r3, #12
 80156ae:	681b      	ldr	r3, [r3, #0]
 80156b0:	4610      	mov	r0, r2
 80156b2:	4798      	blx	r3
 80156b4:	4603      	mov	r3, r0
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	d009      	beq.n	80156ce <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xb6>
            {
                action->execute(*this);
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80156c2:	681b      	ldr	r3, [r3, #0]
 80156c4:	3308      	adds	r3, #8
 80156c6:	681b      	ldr	r3, [r3, #0]
 80156c8:	6879      	ldr	r1, [r7, #4]
 80156ca:	4610      	mov	r0, r2
 80156cc:	4798      	blx	r3
            }
        }
    }
 80156ce:	bf00      	nop
 80156d0:	3710      	adds	r7, #16
 80156d2:	46bd      	mov	sp, r7
 80156d4:	bd80      	pop	{r7, pc}
	...

080156d8 <_ZN8touchgfx14AbstractButtonC1Ev>:
     * @brief Constructor.
     *
     *        Constructs an AbstractButton instance in released state without an associated
     *        action.
     */
    AbstractButton() : Widget(), action(), pressed(false)
 80156d8:	b580      	push	{r7, lr}
 80156da:	b082      	sub	sp, #8
 80156dc:	af00      	add	r7, sp, #0
 80156de:	6078      	str	r0, [r7, #4]
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	4618      	mov	r0, r3
 80156e4:	f7fd fa66 	bl	8012bb4 <_ZN8touchgfx6WidgetC1Ev>
 80156e8:	4a09      	ldr	r2, [pc, #36]	; (8015710 <_ZN8touchgfx14AbstractButtonC1Ev+0x38>)
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	601a      	str	r2, [r3, #0]
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	2200      	movs	r2, #0
 80156f2:	629a      	str	r2, [r3, #40]	; 0x28
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	2200      	movs	r2, #0
 80156f8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
        setTouchable(true);
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	2101      	movs	r1, #1
 8015700:	4618      	mov	r0, r3
 8015702:	f7fd f940 	bl	8012986 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	4618      	mov	r0, r3
 801570a:	3708      	adds	r7, #8
 801570c:	46bd      	mov	sp, r7
 801570e:	bd80      	pop	{r7, pc}
 8015710:	0802e704 	.word	0x0802e704

08015714 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param callback The callback to be executed. The callback will be given a reference to
     *                 the AbstractButton.
     *
     * @see GenericCallback
     */
    void setAction(GenericCallback< const AbstractButton& >& callback)
 8015714:	b480      	push	{r7}
 8015716:	b083      	sub	sp, #12
 8015718:	af00      	add	r7, sp, #0
 801571a:	6078      	str	r0, [r7, #4]
 801571c:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	683a      	ldr	r2, [r7, #0]
 8015722:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8015724:	bf00      	nop
 8015726:	370c      	adds	r7, #12
 8015728:	46bd      	mov	sp, r7
 801572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801572e:	4770      	bx	lr

08015730 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 8015730:	b580      	push	{r7, lr}
 8015732:	b082      	sub	sp, #8
 8015734:	af00      	add	r7, sp, #0
 8015736:	6078      	str	r0, [r7, #4]
 8015738:	4a05      	ldr	r2, [pc, #20]	; (8015750 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	601a      	str	r2, [r3, #0]
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	4618      	mov	r0, r3
 8015742:	f7fd fa49 	bl	8012bd8 <_ZN8touchgfx6WidgetD1Ev>
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	4618      	mov	r0, r3
 801574a:	3708      	adds	r7, #8
 801574c:	46bd      	mov	sp, r7
 801574e:	bd80      	pop	{r7, pc}
 8015750:	0802e704 	.word	0x0802e704

08015754 <_ZN8touchgfx14AbstractButtonD0Ev>:
 8015754:	b580      	push	{r7, lr}
 8015756:	b082      	sub	sp, #8
 8015758:	af00      	add	r7, sp, #0
 801575a:	6078      	str	r0, [r7, #4]
 801575c:	6878      	ldr	r0, [r7, #4]
 801575e:	f7ff ffe7 	bl	8015730 <_ZN8touchgfx14AbstractButtonD1Ev>
 8015762:	2130      	movs	r1, #48	; 0x30
 8015764:	6878      	ldr	r0, [r7, #4]
 8015766:	f014 ffe0 	bl	802a72a <_ZdlPvj>
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	4618      	mov	r0, r3
 801576e:	3708      	adds	r7, #8
 8015770:	46bd      	mov	sp, r7
 8015772:	bd80      	pop	{r7, pc}

08015774 <_ZN8touchgfx6ButtonC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Button() : AbstractButton(), up(), down(), alpha(255) { }
 8015774:	b580      	push	{r7, lr}
 8015776:	b082      	sub	sp, #8
 8015778:	af00      	add	r7, sp, #0
 801577a:	6078      	str	r0, [r7, #4]
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	4618      	mov	r0, r3
 8015780:	f7ff ffaa 	bl	80156d8 <_ZN8touchgfx14AbstractButtonC1Ev>
 8015784:	4a0c      	ldr	r2, [pc, #48]	; (80157b8 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	601a      	str	r2, [r3, #0]
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	332e      	adds	r3, #46	; 0x2e
 801578e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015792:	4618      	mov	r0, r3
 8015794:	f7fc fff9 	bl	801278a <_ZN8touchgfx6BitmapC1Et>
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	3330      	adds	r3, #48	; 0x30
 801579c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80157a0:	4618      	mov	r0, r3
 80157a2:	f7fc fff2 	bl	801278a <_ZN8touchgfx6BitmapC1Et>
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	22ff      	movs	r2, #255	; 0xff
 80157aa:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	4618      	mov	r0, r3
 80157b2:	3708      	adds	r7, #8
 80157b4:	46bd      	mov	sp, r7
 80157b6:	bd80      	pop	{r7, pc}
 80157b8:	0802e948 	.word	0x0802e948

080157bc <_ZN8touchgfx6ButtonD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Button() { }
 80157bc:	b580      	push	{r7, lr}
 80157be:	b082      	sub	sp, #8
 80157c0:	af00      	add	r7, sp, #0
 80157c2:	6078      	str	r0, [r7, #4]
 80157c4:	4a05      	ldr	r2, [pc, #20]	; (80157dc <_ZN8touchgfx6ButtonD1Ev+0x20>)
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	601a      	str	r2, [r3, #0]
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	4618      	mov	r0, r3
 80157ce:	f7ff ffaf 	bl	8015730 <_ZN8touchgfx14AbstractButtonD1Ev>
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	4618      	mov	r0, r3
 80157d6:	3708      	adds	r7, #8
 80157d8:	46bd      	mov	sp, r7
 80157da:	bd80      	pop	{r7, pc}
 80157dc:	0802e948 	.word	0x0802e948

080157e0 <_ZN8touchgfx6ButtonD0Ev>:
 80157e0:	b580      	push	{r7, lr}
 80157e2:	b082      	sub	sp, #8
 80157e4:	af00      	add	r7, sp, #0
 80157e6:	6078      	str	r0, [r7, #4]
 80157e8:	6878      	ldr	r0, [r7, #4]
 80157ea:	f7ff ffe7 	bl	80157bc <_ZN8touchgfx6ButtonD1Ev>
 80157ee:	2134      	movs	r1, #52	; 0x34
 80157f0:	6878      	ldr	r0, [r7, #4]
 80157f2:	f014 ff9a 	bl	802a72a <_ZdlPvj>
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	4618      	mov	r0, r3
 80157fa:	3708      	adds	r7, #8
 80157fc:	46bd      	mov	sp, r7
 80157fe:	bd80      	pop	{r7, pc}

08015800 <_ZN8touchgfx4ViewI21SecondScreenPresenterED1Ev>:
class View : public Screen
 8015800:	b580      	push	{r7, lr}
 8015802:	b082      	sub	sp, #8
 8015804:	af00      	add	r7, sp, #0
 8015806:	6078      	str	r0, [r7, #4]
 8015808:	4a05      	ldr	r2, [pc, #20]	; (8015820 <_ZN8touchgfx4ViewI21SecondScreenPresenterED1Ev+0x20>)
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	601a      	str	r2, [r3, #0]
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	4618      	mov	r0, r3
 8015812:	f7fd f967 	bl	8012ae4 <_ZN8touchgfx6ScreenD1Ev>
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	4618      	mov	r0, r3
 801581a:	3708      	adds	r7, #8
 801581c:	46bd      	mov	sp, r7
 801581e:	bd80      	pop	{r7, pc}
 8015820:	0802cc8c 	.word	0x0802cc8c

08015824 <_ZN8touchgfx4ViewI21SecondScreenPresenterED0Ev>:
 8015824:	b580      	push	{r7, lr}
 8015826:	b082      	sub	sp, #8
 8015828:	af00      	add	r7, sp, #0
 801582a:	6078      	str	r0, [r7, #4]
 801582c:	6878      	ldr	r0, [r7, #4]
 801582e:	f7ff ffe7 	bl	8015800 <_ZN8touchgfx4ViewI21SecondScreenPresenterED1Ev>
 8015832:	2140      	movs	r1, #64	; 0x40
 8015834:	6878      	ldr	r0, [r7, #4]
 8015836:	f014 ff78 	bl	802a72a <_ZdlPvj>
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	4618      	mov	r0, r3
 801583e:	3708      	adds	r7, #8
 8015840:	46bd      	mov	sp, r7
 8015842:	bd80      	pop	{r7, pc}

08015844 <_ZN20SecondScreenViewBaseD1Ev>:

class SecondScreenViewBase : public touchgfx::View<SecondScreenPresenter>
{
public:
    SecondScreenViewBase();
    virtual ~SecondScreenViewBase() {}
 8015844:	b580      	push	{r7, lr}
 8015846:	b082      	sub	sp, #8
 8015848:	af00      	add	r7, sp, #0
 801584a:	6078      	str	r0, [r7, #4]
 801584c:	4a3d      	ldr	r2, [pc, #244]	; (8015944 <_ZN20SecondScreenViewBaseD1Ev+0x100>)
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	601a      	str	r2, [r3, #0]
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
 8015858:	4618      	mov	r0, r3
 801585a:	f000 ff89 	bl	8016770 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 8015864:	4618      	mov	r0, r3
 8015866:	f000 ffa5 	bl	80167b4 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	f503 7377 	add.w	r3, r3, #988	; 0x3dc
 8015870:	4618      	mov	r0, r3
 8015872:	f7ff fdd9 	bl	8015428 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 801587c:	4618      	mov	r0, r3
 801587e:	f7ff fdd3 	bl	8015428 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8015888:	4618      	mov	r0, r3
 801588a:	f7fd fb13 	bl	8012eb4 <_ZN8touchgfx8TextAreaD1Ev>
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8015894:	4618      	mov	r0, r3
 8015896:	f7ff fdc7 	bl	8015428 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	f503 7341 	add.w	r3, r3, #772	; 0x304
 80158a0:	4618      	mov	r0, r3
 80158a2:	f7fd fb07 	bl	8012eb4 <_ZN8touchgfx8TextAreaD1Ev>
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	f503 7333 	add.w	r3, r3, #716	; 0x2cc
 80158ac:	4618      	mov	r0, r3
 80158ae:	f7ff fdbb 	bl	8015428 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	f503 7326 	add.w	r3, r3, #664	; 0x298
 80158b8:	4618      	mov	r0, r3
 80158ba:	f7fd fafb 	bl	8012eb4 <_ZN8touchgfx8TextAreaD1Ev>
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80158c4:	4618      	mov	r0, r3
 80158c6:	f7ff fdaf 	bl	8015428 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 80158d0:	4618      	mov	r0, r3
 80158d2:	f7fd faef 	bl	8012eb4 <_ZN8touchgfx8TextAreaD1Ev>
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80158dc:	4618      	mov	r0, r3
 80158de:	f7ff fda3 	bl	8015428 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 80158e8:	4618      	mov	r0, r3
 80158ea:	f7ff ff67 	bl	80157bc <_ZN8touchgfx6ButtonD1Ev>
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80158f4:	4618      	mov	r0, r3
 80158f6:	f7ff ff61 	bl	80157bc <_ZN8touchgfx6ButtonD1Ev>
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8015900:	4618      	mov	r0, r3
 8015902:	f7ff fd91 	bl	8015428 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	f503 7390 	add.w	r3, r3, #288	; 0x120
 801590c:	4618      	mov	r0, r3
 801590e:	f7fd fad1 	bl	8012eb4 <_ZN8touchgfx8TextAreaD1Ev>
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	33e8      	adds	r3, #232	; 0xe8
 8015916:	4618      	mov	r0, r3
 8015918:	f7ff fd86 	bl	8015428 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	3370      	adds	r3, #112	; 0x70
 8015920:	4618      	mov	r0, r3
 8015922:	f000 fdbd 	bl	80164a0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	3340      	adds	r3, #64	; 0x40
 801592a:	4618      	mov	r0, r3
 801592c:	f7fd f9ba 	bl	8012ca4 <_ZN8touchgfx3BoxD1Ev>
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	4618      	mov	r0, r3
 8015934:	f7ff ff64 	bl	8015800 <_ZN8touchgfx4ViewI21SecondScreenPresenterED1Ev>
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	4618      	mov	r0, r3
 801593c:	3708      	adds	r7, #8
 801593e:	46bd      	mov	sp, r7
 8015940:	bd80      	pop	{r7, pc}
 8015942:	bf00      	nop
 8015944:	0802cb88 	.word	0x0802cb88

08015948 <_ZN20SecondScreenViewBaseD0Ev>:
 8015948:	b580      	push	{r7, lr}
 801594a:	b082      	sub	sp, #8
 801594c:	af00      	add	r7, sp, #0
 801594e:	6078      	str	r0, [r7, #4]
 8015950:	6878      	ldr	r0, [r7, #4]
 8015952:	f7ff ff77 	bl	8015844 <_ZN20SecondScreenViewBaseD1Ev>
 8015956:	f44f 61a7 	mov.w	r1, #1336	; 0x538
 801595a:	6878      	ldr	r0, [r7, #4]
 801595c:	f014 fee5 	bl	802a72a <_ZdlPvj>
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	4618      	mov	r0, r3
 8015964:	3708      	adds	r7, #8
 8015966:	46bd      	mov	sp, r7
 8015968:	bd80      	pop	{r7, pc}

0801596a <_ZN20SecondScreenViewBase9nextErrorEv>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void nextError()
 801596a:	b480      	push	{r7}
 801596c:	b083      	sub	sp, #12
 801596e:	af00      	add	r7, sp, #0
 8015970:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in SecondScreen
    }
 8015972:	bf00      	nop
 8015974:	370c      	adds	r7, #12
 8015976:	46bd      	mov	sp, r7
 8015978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801597c:	4770      	bx	lr

0801597e <_ZN20SecondScreenViewBase11clearErrorsEv>:

    virtual void clearErrors()
 801597e:	b480      	push	{r7}
 8015980:	b083      	sub	sp, #12
 8015982:	af00      	add	r7, sp, #0
 8015984:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in SecondScreen
    }
 8015986:	bf00      	nop
 8015988:	370c      	adds	r7, #12
 801598a:	46bd      	mov	sp, r7
 801598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015990:	4770      	bx	lr

08015992 <_ZN20SecondScreenViewBase16moveToMainScreenEv>:

    virtual void moveToMainScreen()
 8015992:	b480      	push	{r7}
 8015994:	b083      	sub	sp, #12
 8015996:	af00      	add	r7, sp, #0
 8015998:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in SecondScreen
    }
 801599a:	bf00      	nop
 801599c:	370c      	adds	r7, #12
 801599e:	46bd      	mov	sp, r7
 80159a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159a4:	4770      	bx	lr

080159a6 <_ZN20SecondScreenViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 80159a6:	b580      	push	{r7, lr}
 80159a8:	b082      	sub	sp, #8
 80159aa:	af00      	add	r7, sp, #0
 80159ac:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80159ae:	f008 feb9 	bl	801e724 <_ZN8touchgfx11Application11getInstanceEv>
 80159b2:	4603      	mov	r3, r0
    }
 80159b4:	4618      	mov	r0, r3
 80159b6:	3708      	adds	r7, #8
 80159b8:	46bd      	mov	sp, r7
 80159ba:	bd80      	pop	{r7, pc}

080159bc <_ZN20SecondScreenViewBaseC1Ev>:
#include <gui_generated/secondscreen_screen/SecondScreenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include "BitmapDatabase.hpp"

SecondScreenViewBase::SecondScreenViewBase() :
 80159bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159c0:	b0a2      	sub	sp, #136	; 0x88
 80159c2:	af02      	add	r7, sp, #8
 80159c4:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &SecondScreenViewBase::buttonCallbackHandler),
    flexButtonCallback(this, &SecondScreenViewBase::flexButtonCallbackHandler)
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	4618      	mov	r0, r3
 80159ca:	f000 fd91 	bl	80164f0 <_ZN8touchgfx4ViewI21SecondScreenPresenterEC1Ev>
 80159ce:	4ada      	ldr	r2, [pc, #872]	; (8015d38 <_ZN20SecondScreenViewBaseC1Ev+0x37c>)
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	601a      	str	r2, [r3, #0]
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	3340      	adds	r3, #64	; 0x40
 80159d8:	4618      	mov	r0, r3
 80159da:	f7fd f943 	bl	8012c64 <_ZN8touchgfx3BoxC1Ev>
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	3370      	adds	r3, #112	; 0x70
 80159e2:	4618      	mov	r0, r3
 80159e4:	f000 fd9a 	bl	801651c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	33e8      	adds	r3, #232	; 0xe8
 80159ec:	4618      	mov	r0, r3
 80159ee:	f7fd fab7 	bl	8012f60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80159f8:	4618      	mov	r0, r3
 80159fa:	f7fd f9a9 	bl	8012d50 <_ZN8touchgfx8TextAreaC1Ev>
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8015a04:	4618      	mov	r0, r3
 8015a06:	f7fd faab 	bl	8012f60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8015a10:	4618      	mov	r0, r3
 8015a12:	f7ff feaf 	bl	8015774 <_ZN8touchgfx6ButtonC1Ev>
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8015a1c:	4618      	mov	r0, r3
 8015a1e:	f7ff fea9 	bl	8015774 <_ZN8touchgfx6ButtonC1Ev>
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8015a28:	4618      	mov	r0, r3
 8015a2a:	f7fd fa99 	bl	8012f60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 8015a34:	4618      	mov	r0, r3
 8015a36:	f7fd f98b 	bl	8012d50 <_ZN8touchgfx8TextAreaC1Ev>
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8015a40:	4618      	mov	r0, r3
 8015a42:	f7fd fa8d 	bl	8012f60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8015a4c:	4618      	mov	r0, r3
 8015a4e:	f7fd f97f 	bl	8012d50 <_ZN8touchgfx8TextAreaC1Ev>
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	f503 7333 	add.w	r3, r3, #716	; 0x2cc
 8015a58:	4618      	mov	r0, r3
 8015a5a:	f7fd fa81 	bl	8012f60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	f503 7341 	add.w	r3, r3, #772	; 0x304
 8015a64:	4618      	mov	r0, r3
 8015a66:	f7fd f973 	bl	8012d50 <_ZN8touchgfx8TextAreaC1Ev>
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8015a70:	4618      	mov	r0, r3
 8015a72:	f7fd fa75 	bl	8012f60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8015a7c:	4618      	mov	r0, r3
 8015a7e:	f7fd f967 	bl	8012d50 <_ZN8touchgfx8TextAreaC1Ev>
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8015a88:	4618      	mov	r0, r3
 8015a8a:	f7fd fa69 	bl	8012f60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	f503 7377 	add.w	r3, r3, #988	; 0x3dc
 8015a94:	4618      	mov	r0, r3
 8015a96:	f7fd fa63 	bl	8012f60 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	f503 60a3 	add.w	r0, r3, #1304	; 0x518
 8015aa0:	4ba6      	ldr	r3, [pc, #664]	; (8015d3c <_ZN20SecondScreenViewBaseC1Ev+0x380>)
 8015aa2:	60fb      	str	r3, [r7, #12]
 8015aa4:	2300      	movs	r3, #0
 8015aa6:	613b      	str	r3, [r7, #16]
 8015aa8:	f107 030c 	add.w	r3, r7, #12
 8015aac:	cb0c      	ldmia	r3, {r2, r3}
 8015aae:	6879      	ldr	r1, [r7, #4]
 8015ab0:	f000 fd7e 	bl	80165b0 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	f503 60a5 	add.w	r0, r3, #1320	; 0x528
 8015aba:	4ba1      	ldr	r3, [pc, #644]	; (8015d40 <_ZN20SecondScreenViewBaseC1Ev+0x384>)
 8015abc:	617b      	str	r3, [r7, #20]
 8015abe:	2300      	movs	r3, #0
 8015ac0:	61bb      	str	r3, [r7, #24]
 8015ac2:	f107 0314 	add.w	r3, r7, #20
 8015ac6:	cb0c      	ldmia	r3, {r2, r3}
 8015ac8:	6879      	ldr	r1, [r7, #4]
 8015aca:	f000 fd91 	bl	80165f0 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>
{

    backgroundBox.setPosition(0, 0, 480, 272);
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8015ad4:	f44f 7388 	mov.w	r3, #272	; 0x110
 8015ad8:	9300      	str	r3, [sp, #0]
 8015ada:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8015ade:	2200      	movs	r2, #0
 8015ae0:	2100      	movs	r1, #0
 8015ae2:	f7fb f921 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    backgroundBox.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8015aec:	2200      	movs	r2, #0
 8015aee:	2100      	movs	r1, #0
 8015af0:	2000      	movs	r0, #0
 8015af2:	f7fd fe0b 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015af6:	4603      	mov	r3, r0
 8015af8:	4619      	mov	r1, r3
 8015afa:	4620      	mov	r0, r4
 8015afc:	f7fd f8f4 	bl	8012ce8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    ButtonGoToMainScreen.setBoxWithBorderPosition(0, 0, 133, 272);
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8015b06:	f44f 7388 	mov.w	r3, #272	; 0x110
 8015b0a:	9300      	str	r3, [sp, #0]
 8015b0c:	2385      	movs	r3, #133	; 0x85
 8015b0e:	2200      	movs	r2, #0
 8015b10:	2100      	movs	r1, #0
 8015b12:	f000 fd8d 	bl	8016630 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>
    ButtonGoToMainScreen.setBorderSize(5);
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	3370      	adds	r3, #112	; 0x70
 8015b1a:	2105      	movs	r1, #5
 8015b1c:	4618      	mov	r0, r3
 8015b1e:	f000 fda7 	bl	8016670 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>
    ButtonGoToMainScreen.setBoxWithBorderColors(touchgfx::Color::getColorFrom24BitRGB(0, 102, 153), touchgfx::Color::getColorFrom24BitRGB(0, 153, 204), touchgfx::Color::getColorFrom24BitRGB(0, 51, 102), touchgfx::Color::getColorFrom24BitRGB(51, 102, 153));
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8015b28:	2299      	movs	r2, #153	; 0x99
 8015b2a:	2166      	movs	r1, #102	; 0x66
 8015b2c:	2000      	movs	r0, #0
 8015b2e:	f7fd fded 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015b32:	4605      	mov	r5, r0
 8015b34:	22cc      	movs	r2, #204	; 0xcc
 8015b36:	2199      	movs	r1, #153	; 0x99
 8015b38:	2000      	movs	r0, #0
 8015b3a:	f7fd fde7 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015b3e:	4606      	mov	r6, r0
 8015b40:	2266      	movs	r2, #102	; 0x66
 8015b42:	2133      	movs	r1, #51	; 0x33
 8015b44:	2000      	movs	r0, #0
 8015b46:	f7fd fde1 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015b4a:	4680      	mov	r8, r0
 8015b4c:	2299      	movs	r2, #153	; 0x99
 8015b4e:	2166      	movs	r1, #102	; 0x66
 8015b50:	2033      	movs	r0, #51	; 0x33
 8015b52:	f7fd fddb 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015b56:	4603      	mov	r3, r0
 8015b58:	9300      	str	r3, [sp, #0]
 8015b5a:	4643      	mov	r3, r8
 8015b5c:	4632      	mov	r2, r6
 8015b5e:	4629      	mov	r1, r5
 8015b60:	4620      	mov	r0, r4
 8015b62:	f000 fd96 	bl	8016692 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    ButtonGoToMainScreen.setPosition(0, 0, 133, 272);
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8015b6c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8015b70:	9300      	str	r3, [sp, #0]
 8015b72:	2385      	movs	r3, #133	; 0x85
 8015b74:	2200      	movs	r2, #0
 8015b76:	2100      	movs	r1, #0
 8015b78:	f7fb f8d6 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    ButtonGoToMainScreen.setAlpha(0);
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	3370      	adds	r3, #112	; 0x70
 8015b80:	2100      	movs	r1, #0
 8015b82:	4618      	mov	r0, r3
 8015b84:	f7fd fb19 	bl	80131ba <_ZN8touchgfx23AbstractButtonContainer8setAlphaEh>
    ButtonGoToMainScreen.setAction(flexButtonCallback);
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
 8015b94:	4619      	mov	r1, r3
 8015b96:	4610      	mov	r0, r2
 8015b98:	f7fd fb30 	bl	80131fc <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>

    IngAngValue.setPosition(12, 11, 71, 42);
 8015b9c:	687b      	ldr	r3, [r7, #4]
 8015b9e:	f103 00e8 	add.w	r0, r3, #232	; 0xe8
 8015ba2:	232a      	movs	r3, #42	; 0x2a
 8015ba4:	9300      	str	r3, [sp, #0]
 8015ba6:	2347      	movs	r3, #71	; 0x47
 8015ba8:	220b      	movs	r2, #11
 8015baa:	210c      	movs	r1, #12
 8015bac:	f7fb f8bc 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    IngAngValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	f103 04e8 	add.w	r4, r3, #232	; 0xe8
 8015bb6:	22ff      	movs	r2, #255	; 0xff
 8015bb8:	21ff      	movs	r1, #255	; 0xff
 8015bba:	20ff      	movs	r0, #255	; 0xff
 8015bbc:	f7fd fda6 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015bc0:	4603      	mov	r3, r0
 8015bc2:	4619      	mov	r1, r3
 8015bc4:	4620      	mov	r0, r4
 8015bc6:	f7fd f906 	bl	8012dd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IngAngValue.setLinespacing(0);
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	33e8      	adds	r3, #232	; 0xe8
 8015bce:	2100      	movs	r1, #0
 8015bd0:	4618      	mov	r0, r3
 8015bd2:	f7fd f953 	bl	8012e7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(IngAngValueBuffer, INGANGVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID77).getText());
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	f203 4414 	addw	r4, r3, #1044	; 0x414
 8015bdc:	f107 031c 	add.w	r3, r7, #28
 8015be0:	2137      	movs	r1, #55	; 0x37
 8015be2:	4618      	mov	r0, r3
 8015be4:	f7fd f88e 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8015be8:	f107 031c 	add.w	r3, r7, #28
 8015bec:	4618      	mov	r0, r3
 8015bee:	f7fd f899 	bl	8012d24 <_ZNK8touchgfx9TypedText7getTextEv>
 8015bf2:	4603      	mov	r3, r0
 8015bf4:	4a53      	ldr	r2, [pc, #332]	; (8015d44 <_ZN20SecondScreenViewBaseC1Ev+0x388>)
 8015bf6:	2105      	movs	r1, #5
 8015bf8:	4620      	mov	r0, r4
 8015bfa:	f00a fe29 	bl	8020850 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    IngAngValue.setWildcard(IngAngValueBuffer);
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8015c0a:	4619      	mov	r1, r3
 8015c0c:	4610      	mov	r0, r2
 8015c0e:	f7fd f9bd 	bl	8012f8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    IngAngValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID76));
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	f103 04e8 	add.w	r4, r3, #232	; 0xe8
 8015c18:	f107 0320 	add.w	r3, r7, #32
 8015c1c:	2136      	movs	r1, #54	; 0x36
 8015c1e:	4618      	mov	r0, r3
 8015c20:	f7fd f870 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8015c24:	8c39      	ldrh	r1, [r7, #32]
 8015c26:	4620      	mov	r0, r4
 8015c28:	f007 f914 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    IgnAngDescriptor.setXY(12, 53);
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8015c32:	2235      	movs	r2, #53	; 0x35
 8015c34:	210c      	movs	r1, #12
 8015c36:	4618      	mov	r0, r3
 8015c38:	f7fc fe24 	bl	8012884 <_ZN8touchgfx8Drawable5setXYEss>
    IgnAngDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	f503 7490 	add.w	r4, r3, #288	; 0x120
 8015c42:	2200      	movs	r2, #0
 8015c44:	21dc      	movs	r1, #220	; 0xdc
 8015c46:	20ff      	movs	r0, #255	; 0xff
 8015c48:	f7fd fd60 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015c4c:	4603      	mov	r3, r0
 8015c4e:	4619      	mov	r1, r3
 8015c50:	4620      	mov	r0, r4
 8015c52:	f7fd f8c0 	bl	8012dd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    IgnAngDescriptor.setLinespacing(0);
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8015c5c:	2100      	movs	r1, #0
 8015c5e:	4618      	mov	r0, r3
 8015c60:	f7fd f90c 	bl	8012e7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    IgnAngDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID78));
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	f503 7490 	add.w	r4, r3, #288	; 0x120
 8015c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015c6e:	2138      	movs	r1, #56	; 0x38
 8015c70:	4618      	mov	r0, r3
 8015c72:	f7fd f847 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8015c76:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8015c78:	4620      	mov	r0, r4
 8015c7a:	f007 f8eb 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    ErrorMessage.setXY(193, 205);
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8015c84:	22cd      	movs	r2, #205	; 0xcd
 8015c86:	21c1      	movs	r1, #193	; 0xc1
 8015c88:	4618      	mov	r0, r3
 8015c8a:	f7fc fdfb 	bl	8012884 <_ZN8touchgfx8Drawable5setXYEss>
    ErrorMessage.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 8015c94:	2200      	movs	r2, #0
 8015c96:	21dc      	movs	r1, #220	; 0xdc
 8015c98:	20ff      	movs	r0, #255	; 0xff
 8015c9a:	f7fd fd37 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015c9e:	4603      	mov	r3, r0
 8015ca0:	4619      	mov	r1, r3
 8015ca2:	4620      	mov	r0, r4
 8015ca4:	f7fd f897 	bl	8012dd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    ErrorMessage.setLinespacing(0);
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8015cae:	2100      	movs	r1, #0
 8015cb0:	4618      	mov	r0, r3
 8015cb2:	f7fd f8e3 	bl	8012e7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(ErrorMessageBuffer, ERRORMESSAGE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID80).getText());
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	f203 441e 	addw	r4, r3, #1054	; 0x41e
 8015cbc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015cc0:	213a      	movs	r1, #58	; 0x3a
 8015cc2:	4618      	mov	r0, r3
 8015cc4:	f7fd f81e 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8015cc8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015ccc:	4618      	mov	r0, r3
 8015cce:	f7fd f829 	bl	8012d24 <_ZNK8touchgfx9TypedText7getTextEv>
 8015cd2:	4603      	mov	r3, r0
 8015cd4:	4a1b      	ldr	r2, [pc, #108]	; (8015d44 <_ZN20SecondScreenViewBaseC1Ev+0x388>)
 8015cd6:	2123      	movs	r1, #35	; 0x23
 8015cd8:	4620      	mov	r0, r4
 8015cda:	f00a fdb9 	bl	8020850 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    ErrorMessage.setWildcard(ErrorMessageBuffer);
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	f503 72aa 	add.w	r2, r3, #340	; 0x154
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8015cea:	4619      	mov	r1, r3
 8015cec:	4610      	mov	r0, r2
 8015cee:	f7fd f94d 	bl	8012f8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    ErrorMessage.resizeToCurrentText();
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8015cf8:	4618      	mov	r0, r3
 8015cfa:	f007 f881 	bl	801ce00 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    ErrorMessage.setTypedText(touchgfx::TypedText(T_SINGLEUSEID79));
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 8015d04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015d08:	2139      	movs	r1, #57	; 0x39
 8015d0a:	4618      	mov	r0, r3
 8015d0c:	f7fc fffa 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8015d10:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8015d12:	4620      	mov	r0, r4
 8015d14:	f007 f89e 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    nextErrorButton.setXY(256, 226);
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8015d1e:	22e2      	movs	r2, #226	; 0xe2
 8015d20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8015d24:	4618      	mov	r0, r3
 8015d26:	f7fc fdad 	bl	8012884 <_ZN8touchgfx8Drawable5setXYEss>
    nextErrorButton.setVisible(false);
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8015d30:	2100      	movs	r1, #0
 8015d32:	4618      	mov	r0, r3
 8015d34:	e008      	b.n	8015d48 <_ZN20SecondScreenViewBaseC1Ev+0x38c>
 8015d36:	bf00      	nop
 8015d38:	0802cb88 	.word	0x0802cb88
 8015d3c:	08016425 	.word	0x08016425
 8015d40:	08016469 	.word	0x08016469
 8015d44:	0802be0c 	.word	0x0802be0c
 8015d48:	f7fc fe0d 	bl	8012966 <_ZN8touchgfx8Drawable10setVisibleEb>
    nextErrorButton.setBitmaps(touchgfx::Bitmap(BITMAP_ICONFINDER_NEXT_6290417_ID), touchgfx::Bitmap(BITMAP_ICONFINDER_NEXT_6290417_ID));
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	f503 74c6 	add.w	r4, r3, #396	; 0x18c
 8015d52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015d56:	2104      	movs	r1, #4
 8015d58:	4618      	mov	r0, r3
 8015d5a:	f7fc fd16 	bl	801278a <_ZN8touchgfx6BitmapC1Et>
 8015d5e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8015d62:	2104      	movs	r1, #4
 8015d64:	4618      	mov	r0, r3
 8015d66:	f7fc fd10 	bl	801278a <_ZN8touchgfx6BitmapC1Et>
 8015d6a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8015d6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015d72:	4619      	mov	r1, r3
 8015d74:	4620      	mov	r0, r4
 8015d76:	f007 fa7b 	bl	801d270 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    nextErrorButton.setAction(buttonCallback);
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	f503 72c6 	add.w	r2, r3, #396	; 0x18c
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 8015d86:	4619      	mov	r1, r3
 8015d88:	4610      	mov	r0, r2
 8015d8a:	f7ff fcc3 	bl	8015714 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    clearErrorsBtn.setXY(193, 226);
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8015d94:	22e2      	movs	r2, #226	; 0xe2
 8015d96:	21c1      	movs	r1, #193	; 0xc1
 8015d98:	4618      	mov	r0, r3
 8015d9a:	f7fc fd73 	bl	8012884 <_ZN8touchgfx8Drawable5setXYEss>
    clearErrorsBtn.setVisible(false);
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8015da4:	2100      	movs	r1, #0
 8015da6:	4618      	mov	r0, r3
 8015da8:	f7fc fddd 	bl	8012966 <_ZN8touchgfx8Drawable10setVisibleEb>
    clearErrorsBtn.setBitmaps(touchgfx::Bitmap(BITMAP_ICONFINDER_7_SOUND_OFF_3279057_ID), touchgfx::Bitmap(BITMAP_ICONFINDER_7_SOUND_OFF_3279057_ID));
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	f503 74e0 	add.w	r4, r3, #448	; 0x1c0
 8015db2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015db6:	2103      	movs	r1, #3
 8015db8:	4618      	mov	r0, r3
 8015dba:	f7fc fce6 	bl	801278a <_ZN8touchgfx6BitmapC1Et>
 8015dbe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015dc2:	2103      	movs	r1, #3
 8015dc4:	4618      	mov	r0, r3
 8015dc6:	f7fc fce0 	bl	801278a <_ZN8touchgfx6BitmapC1Et>
 8015dca:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8015dce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015dd2:	4619      	mov	r1, r3
 8015dd4:	4620      	mov	r0, r4
 8015dd6:	f007 fa4b 	bl	801d270 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    clearErrorsBtn.setAction(buttonCallback);
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	f503 72e0 	add.w	r2, r3, #448	; 0x1c0
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 8015de6:	4619      	mov	r1, r3
 8015de8:	4610      	mov	r0, r2
 8015dea:	f7ff fc93 	bl	8015714 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    VeValue.setPosition(102, 11, 71, 42);
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	f503 70fa 	add.w	r0, r3, #500	; 0x1f4
 8015df4:	232a      	movs	r3, #42	; 0x2a
 8015df6:	9300      	str	r3, [sp, #0]
 8015df8:	2347      	movs	r3, #71	; 0x47
 8015dfa:	220b      	movs	r2, #11
 8015dfc:	2166      	movs	r1, #102	; 0x66
 8015dfe:	f7fa ff93 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    VeValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	f503 74fa 	add.w	r4, r3, #500	; 0x1f4
 8015e08:	22ff      	movs	r2, #255	; 0xff
 8015e0a:	21ff      	movs	r1, #255	; 0xff
 8015e0c:	20ff      	movs	r0, #255	; 0xff
 8015e0e:	f7fd fc7d 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015e12:	4603      	mov	r3, r0
 8015e14:	4619      	mov	r1, r3
 8015e16:	4620      	mov	r0, r4
 8015e18:	f7fc ffdd 	bl	8012dd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    VeValue.setLinespacing(0);
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8015e22:	2100      	movs	r1, #0
 8015e24:	4618      	mov	r0, r3
 8015e26:	f7fd f829 	bl	8012e7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(VeValueBuffer, VEVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID82).getText());
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	f203 4464 	addw	r4, r3, #1124	; 0x464
 8015e30:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015e34:	2147      	movs	r1, #71	; 0x47
 8015e36:	4618      	mov	r0, r3
 8015e38:	f7fc ff64 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8015e3c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015e40:	4618      	mov	r0, r3
 8015e42:	f7fc ff6f 	bl	8012d24 <_ZNK8touchgfx9TypedText7getTextEv>
 8015e46:	4603      	mov	r3, r0
 8015e48:	4ae4      	ldr	r2, [pc, #912]	; (80161dc <_ZN20SecondScreenViewBaseC1Ev+0x820>)
 8015e4a:	2105      	movs	r1, #5
 8015e4c:	4620      	mov	r0, r4
 8015e4e:	f00a fcff 	bl	8020850 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    VeValue.setWildcard(VeValueBuffer);
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	f203 4364 	addw	r3, r3, #1124	; 0x464
 8015e5e:	4619      	mov	r1, r3
 8015e60:	4610      	mov	r0, r2
 8015e62:	f7fd f893 	bl	8012f8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    VeValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID81));
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	f503 74fa 	add.w	r4, r3, #500	; 0x1f4
 8015e6c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015e70:	2146      	movs	r1, #70	; 0x46
 8015e72:	4618      	mov	r0, r3
 8015e74:	f7fc ff46 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8015e78:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8015e7c:	4620      	mov	r0, r4
 8015e7e:	f006 ffe9 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    VeDescriptor.setXY(127, 53);
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 8015e88:	2235      	movs	r2, #53	; 0x35
 8015e8a:	217f      	movs	r1, #127	; 0x7f
 8015e8c:	4618      	mov	r0, r3
 8015e8e:	f7fc fcf9 	bl	8012884 <_ZN8touchgfx8Drawable5setXYEss>
    VeDescriptor.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	f503 740b 	add.w	r4, r3, #556	; 0x22c
 8015e98:	2200      	movs	r2, #0
 8015e9a:	21dc      	movs	r1, #220	; 0xdc
 8015e9c:	20ff      	movs	r0, #255	; 0xff
 8015e9e:	f7fd fc35 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015ea2:	4603      	mov	r3, r0
 8015ea4:	4619      	mov	r1, r3
 8015ea6:	4620      	mov	r0, r4
 8015ea8:	f7fc ff95 	bl	8012dd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    VeDescriptor.setLinespacing(0);
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 8015eb2:	2100      	movs	r1, #0
 8015eb4:	4618      	mov	r0, r3
 8015eb6:	f7fc ffe1 	bl	8012e7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    VeDescriptor.setTypedText(touchgfx::TypedText(T_SINGLEUSEID83));
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	f503 740b 	add.w	r4, r3, #556	; 0x22c
 8015ec0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015ec4:	2148      	movs	r1, #72	; 0x48
 8015ec6:	4618      	mov	r0, r3
 8015ec8:	f7fc ff1c 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8015ecc:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 8015ed0:	4620      	mov	r0, r4
 8015ed2:	f006 ffbf 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    BoostDcValue.setPosition(195, 11, 71, 42);
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	f503 7018 	add.w	r0, r3, #608	; 0x260
 8015edc:	232a      	movs	r3, #42	; 0x2a
 8015ede:	9300      	str	r3, [sp, #0]
 8015ee0:	2347      	movs	r3, #71	; 0x47
 8015ee2:	220b      	movs	r2, #11
 8015ee4:	21c3      	movs	r1, #195	; 0xc3
 8015ee6:	f7fa ff1f 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    BoostDcValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	f503 7418 	add.w	r4, r3, #608	; 0x260
 8015ef0:	22ff      	movs	r2, #255	; 0xff
 8015ef2:	21ff      	movs	r1, #255	; 0xff
 8015ef4:	20ff      	movs	r0, #255	; 0xff
 8015ef6:	f7fd fc09 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015efa:	4603      	mov	r3, r0
 8015efc:	4619      	mov	r1, r3
 8015efe:	4620      	mov	r0, r4
 8015f00:	f7fc ff69 	bl	8012dd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    BoostDcValue.setLinespacing(0);
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8015f0a:	2100      	movs	r1, #0
 8015f0c:	4618      	mov	r0, r3
 8015f0e:	f7fc ffb5 	bl	8012e7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(BoostDcValueBuffer, BOOSTDCVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID85).getText());
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	f203 446e 	addw	r4, r3, #1134	; 0x46e
 8015f18:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8015f1c:	214a      	movs	r1, #74	; 0x4a
 8015f1e:	4618      	mov	r0, r3
 8015f20:	f7fc fef0 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8015f24:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8015f28:	4618      	mov	r0, r3
 8015f2a:	f7fc fefb 	bl	8012d24 <_ZNK8touchgfx9TypedText7getTextEv>
 8015f2e:	4603      	mov	r3, r0
 8015f30:	4aaa      	ldr	r2, [pc, #680]	; (80161dc <_ZN20SecondScreenViewBaseC1Ev+0x820>)
 8015f32:	2105      	movs	r1, #5
 8015f34:	4620      	mov	r0, r4
 8015f36:	f00a fc8b 	bl	8020850 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    BoostDcValue.setWildcard(BoostDcValueBuffer);
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	f203 436e 	addw	r3, r3, #1134	; 0x46e
 8015f46:	4619      	mov	r1, r3
 8015f48:	4610      	mov	r0, r2
 8015f4a:	f7fd f81f 	bl	8012f8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    BoostDcValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID84));
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	f503 7418 	add.w	r4, r3, #608	; 0x260
 8015f54:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015f58:	2149      	movs	r1, #73	; 0x49
 8015f5a:	4618      	mov	r0, r3
 8015f5c:	f7fc fed2 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8015f60:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8015f64:	4620      	mov	r0, r4
 8015f66:	f006 ff75 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    BoostDcDescriptior.setXY(194, 53);
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8015f70:	2235      	movs	r2, #53	; 0x35
 8015f72:	21c2      	movs	r1, #194	; 0xc2
 8015f74:	4618      	mov	r0, r3
 8015f76:	f7fc fc85 	bl	8012884 <_ZN8touchgfx8Drawable5setXYEss>
    BoostDcDescriptior.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	f503 7426 	add.w	r4, r3, #664	; 0x298
 8015f80:	2200      	movs	r2, #0
 8015f82:	21dc      	movs	r1, #220	; 0xdc
 8015f84:	20ff      	movs	r0, #255	; 0xff
 8015f86:	f7fd fbc1 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015f8a:	4603      	mov	r3, r0
 8015f8c:	4619      	mov	r1, r3
 8015f8e:	4620      	mov	r0, r4
 8015f90:	f7fc ff21 	bl	8012dd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    BoostDcDescriptior.setLinespacing(0);
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8015f9a:	2100      	movs	r1, #0
 8015f9c:	4618      	mov	r0, r3
 8015f9e:	f7fc ff6d 	bl	8012e7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    BoostDcDescriptior.setTypedText(touchgfx::TypedText(T_SINGLEUSEID86));
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	f503 7426 	add.w	r4, r3, #664	; 0x298
 8015fa8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8015fac:	214b      	movs	r1, #75	; 0x4b
 8015fae:	4618      	mov	r0, r3
 8015fb0:	f7fc fea8 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8015fb4:	f8b7 1054 	ldrh.w	r1, [r7, #84]	; 0x54
 8015fb8:	4620      	mov	r0, r4
 8015fba:	f006 ff4b 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    BoostTrgtValue.setPosition(294, 11, 71, 42);
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	f503 7033 	add.w	r0, r3, #716	; 0x2cc
 8015fc4:	232a      	movs	r3, #42	; 0x2a
 8015fc6:	9300      	str	r3, [sp, #0]
 8015fc8:	2347      	movs	r3, #71	; 0x47
 8015fca:	220b      	movs	r2, #11
 8015fcc:	f44f 7193 	mov.w	r1, #294	; 0x126
 8015fd0:	f7fa feaa 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    BoostTrgtValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	f503 7433 	add.w	r4, r3, #716	; 0x2cc
 8015fda:	22ff      	movs	r2, #255	; 0xff
 8015fdc:	21ff      	movs	r1, #255	; 0xff
 8015fde:	20ff      	movs	r0, #255	; 0xff
 8015fe0:	f7fd fb94 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015fe4:	4603      	mov	r3, r0
 8015fe6:	4619      	mov	r1, r3
 8015fe8:	4620      	mov	r0, r4
 8015fea:	f7fc fef4 	bl	8012dd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    BoostTrgtValue.setLinespacing(0);
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	f503 7333 	add.w	r3, r3, #716	; 0x2cc
 8015ff4:	2100      	movs	r1, #0
 8015ff6:	4618      	mov	r0, r3
 8015ff8:	f7fc ff40 	bl	8012e7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(BoostTrgtValueBuffer, BOOSTTRGTVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID88).getText());
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	f503 648f 	add.w	r4, r3, #1144	; 0x478
 8016002:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8016006:	214d      	movs	r1, #77	; 0x4d
 8016008:	4618      	mov	r0, r3
 801600a:	f7fc fe7b 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 801600e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8016012:	4618      	mov	r0, r3
 8016014:	f7fc fe86 	bl	8012d24 <_ZNK8touchgfx9TypedText7getTextEv>
 8016018:	4603      	mov	r3, r0
 801601a:	4a70      	ldr	r2, [pc, #448]	; (80161dc <_ZN20SecondScreenViewBaseC1Ev+0x820>)
 801601c:	2105      	movs	r1, #5
 801601e:	4620      	mov	r0, r4
 8016020:	f00a fc16 	bl	8020850 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    BoostTrgtValue.setWildcard(BoostTrgtValueBuffer);
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	f503 7233 	add.w	r2, r3, #716	; 0x2cc
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	f503 638f 	add.w	r3, r3, #1144	; 0x478
 8016030:	4619      	mov	r1, r3
 8016032:	4610      	mov	r0, r2
 8016034:	f7fc ffaa 	bl	8012f8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    BoostTrgtValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID87));
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	f503 7433 	add.w	r4, r3, #716	; 0x2cc
 801603e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8016042:	214c      	movs	r1, #76	; 0x4c
 8016044:	4618      	mov	r0, r3
 8016046:	f7fc fe5d 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 801604a:	f8b7 105c 	ldrh.w	r1, [r7, #92]	; 0x5c
 801604e:	4620      	mov	r0, r4
 8016050:	f006 ff00 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    BoostTrgtDescriptior.setXY(288, 53);
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	f503 7341 	add.w	r3, r3, #772	; 0x304
 801605a:	2235      	movs	r2, #53	; 0x35
 801605c:	f44f 7190 	mov.w	r1, #288	; 0x120
 8016060:	4618      	mov	r0, r3
 8016062:	f7fc fc0f 	bl	8012884 <_ZN8touchgfx8Drawable5setXYEss>
    BoostTrgtDescriptior.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	f503 7441 	add.w	r4, r3, #772	; 0x304
 801606c:	2200      	movs	r2, #0
 801606e:	21dc      	movs	r1, #220	; 0xdc
 8016070:	20ff      	movs	r0, #255	; 0xff
 8016072:	f7fd fb4b 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8016076:	4603      	mov	r3, r0
 8016078:	4619      	mov	r1, r3
 801607a:	4620      	mov	r0, r4
 801607c:	f7fc feab 	bl	8012dd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    BoostTrgtDescriptior.setLinespacing(0);
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	f503 7341 	add.w	r3, r3, #772	; 0x304
 8016086:	2100      	movs	r1, #0
 8016088:	4618      	mov	r0, r3
 801608a:	f7fc fef7 	bl	8012e7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    BoostTrgtDescriptior.setTypedText(touchgfx::TypedText(T_SINGLEUSEID89));
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	f503 7441 	add.w	r4, r3, #772	; 0x304
 8016094:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8016098:	214e      	movs	r1, #78	; 0x4e
 801609a:	4618      	mov	r0, r3
 801609c:	f7fc fe32 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 80160a0:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 80160a4:	4620      	mov	r0, r4
 80160a6:	f006 fed5 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    InjctorDcValue.setPosition(391, 11, 71, 42);
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	f503 704e 	add.w	r0, r3, #824	; 0x338
 80160b0:	232a      	movs	r3, #42	; 0x2a
 80160b2:	9300      	str	r3, [sp, #0]
 80160b4:	2347      	movs	r3, #71	; 0x47
 80160b6:	220b      	movs	r2, #11
 80160b8:	f240 1187 	movw	r1, #391	; 0x187
 80160bc:	f7fa fe34 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    InjctorDcValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	f503 744e 	add.w	r4, r3, #824	; 0x338
 80160c6:	22ff      	movs	r2, #255	; 0xff
 80160c8:	21ff      	movs	r1, #255	; 0xff
 80160ca:	20ff      	movs	r0, #255	; 0xff
 80160cc:	f7fd fb1e 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80160d0:	4603      	mov	r3, r0
 80160d2:	4619      	mov	r1, r3
 80160d4:	4620      	mov	r0, r4
 80160d6:	f7fc fe7e 	bl	8012dd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    InjctorDcValue.setLinespacing(0);
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80160e0:	2100      	movs	r1, #0
 80160e2:	4618      	mov	r0, r3
 80160e4:	f7fc feca 	bl	8012e7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(InjctorDcValueBuffer, INJCTORDCVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID91).getText());
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	f203 4482 	addw	r4, r3, #1154	; 0x482
 80160ee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80160f2:	2150      	movs	r1, #80	; 0x50
 80160f4:	4618      	mov	r0, r3
 80160f6:	f7fc fe05 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 80160fa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80160fe:	4618      	mov	r0, r3
 8016100:	f7fc fe10 	bl	8012d24 <_ZNK8touchgfx9TypedText7getTextEv>
 8016104:	4603      	mov	r3, r0
 8016106:	4a35      	ldr	r2, [pc, #212]	; (80161dc <_ZN20SecondScreenViewBaseC1Ev+0x820>)
 8016108:	2105      	movs	r1, #5
 801610a:	4620      	mov	r0, r4
 801610c:	f00a fba0 	bl	8020850 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    InjctorDcValue.setWildcard(InjctorDcValueBuffer);
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	f503 724e 	add.w	r2, r3, #824	; 0x338
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	f203 4382 	addw	r3, r3, #1154	; 0x482
 801611c:	4619      	mov	r1, r3
 801611e:	4610      	mov	r0, r2
 8016120:	f7fc ff34 	bl	8012f8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    InjctorDcValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID90));
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	f503 744e 	add.w	r4, r3, #824	; 0x338
 801612a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801612e:	214f      	movs	r1, #79	; 0x4f
 8016130:	4618      	mov	r0, r3
 8016132:	f7fc fde7 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8016136:	f8b7 1068 	ldrh.w	r1, [r7, #104]	; 0x68
 801613a:	4620      	mov	r0, r4
 801613c:	f006 fe8a 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    InjectorDcDescriptior.setXY(382, 53);
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8016146:	2235      	movs	r2, #53	; 0x35
 8016148:	f44f 71bf 	mov.w	r1, #382	; 0x17e
 801614c:	4618      	mov	r0, r3
 801614e:	f7fc fb99 	bl	8012884 <_ZN8touchgfx8Drawable5setXYEss>
    InjectorDcDescriptior.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	f503 745c 	add.w	r4, r3, #880	; 0x370
 8016158:	2200      	movs	r2, #0
 801615a:	21dc      	movs	r1, #220	; 0xdc
 801615c:	20ff      	movs	r0, #255	; 0xff
 801615e:	f7fd fad5 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8016162:	4603      	mov	r3, r0
 8016164:	4619      	mov	r1, r3
 8016166:	4620      	mov	r0, r4
 8016168:	f7fc fe35 	bl	8012dd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    InjectorDcDescriptior.setLinespacing(0);
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8016172:	2100      	movs	r1, #0
 8016174:	4618      	mov	r0, r3
 8016176:	f7fc fe81 	bl	8012e7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    InjectorDcDescriptior.setTypedText(touchgfx::TypedText(T_SINGLEUSEID92));
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	f503 745c 	add.w	r4, r3, #880	; 0x370
 8016180:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8016184:	2151      	movs	r1, #81	; 0x51
 8016186:	4618      	mov	r0, r3
 8016188:	f7fc fdbc 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 801618c:	f8b7 106c 	ldrh.w	r1, [r7, #108]	; 0x6c
 8016190:	4620      	mov	r0, r4
 8016192:	f006 fe5f 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    CheckEngCodeValue.setXY(12, 237);
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 801619c:	22ed      	movs	r2, #237	; 0xed
 801619e:	210c      	movs	r1, #12
 80161a0:	4618      	mov	r0, r3
 80161a2:	f7fc fb6f 	bl	8012884 <_ZN8touchgfx8Drawable5setXYEss>
    CheckEngCodeValue.setVisible(false);
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 80161ac:	2100      	movs	r1, #0
 80161ae:	4618      	mov	r0, r3
 80161b0:	f7fc fbd9 	bl	8012966 <_ZN8touchgfx8Drawable10setVisibleEb>
    CheckEngCodeValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	f503 7469 	add.w	r4, r3, #932	; 0x3a4
 80161ba:	2200      	movs	r2, #0
 80161bc:	21dc      	movs	r1, #220	; 0xdc
 80161be:	20ff      	movs	r0, #255	; 0xff
 80161c0:	f7fd faa4 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80161c4:	4603      	mov	r3, r0
 80161c6:	4619      	mov	r1, r3
 80161c8:	4620      	mov	r0, r4
 80161ca:	f7fc fe04 	bl	8012dd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    CheckEngCodeValue.setLinespacing(0);
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 80161d4:	2100      	movs	r1, #0
 80161d6:	4618      	mov	r0, r3
 80161d8:	e002      	b.n	80161e0 <_ZN20SecondScreenViewBaseC1Ev+0x824>
 80161da:	bf00      	nop
 80161dc:	0802be0c 	.word	0x0802be0c
 80161e0:	f7fc fe4c 	bl	8012e7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(CheckEngCodeValueBuffer, CHECKENGCODEVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID94).getText());
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	f203 448c 	addw	r4, r3, #1164	; 0x48c
 80161ea:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80161ee:	2157      	movs	r1, #87	; 0x57
 80161f0:	4618      	mov	r0, r3
 80161f2:	f7fc fd87 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 80161f6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80161fa:	4618      	mov	r0, r3
 80161fc:	f7fc fd92 	bl	8012d24 <_ZNK8touchgfx9TypedText7getTextEv>
 8016200:	4603      	mov	r3, r0
 8016202:	4a82      	ldr	r2, [pc, #520]	; (801640c <_ZN20SecondScreenViewBaseC1Ev+0xa50>)
 8016204:	2123      	movs	r1, #35	; 0x23
 8016206:	4620      	mov	r0, r4
 8016208:	f00a fb22 	bl	8020850 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    CheckEngCodeValue.setWildcard(CheckEngCodeValueBuffer);
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8016218:	4619      	mov	r1, r3
 801621a:	4610      	mov	r0, r2
 801621c:	f7fc feb6 	bl	8012f8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    CheckEngCodeValue.resizeToCurrentText();
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8016226:	4618      	mov	r0, r3
 8016228:	f006 fdea 	bl	801ce00 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    CheckEngCodeValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID93));
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	f503 7469 	add.w	r4, r3, #932	; 0x3a4
 8016232:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8016236:	2156      	movs	r1, #86	; 0x56
 8016238:	4618      	mov	r0, r3
 801623a:	f7fc fd63 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 801623e:	f8b7 1074 	ldrh.w	r1, [r7, #116]	; 0x74
 8016242:	4620      	mov	r0, r4
 8016244:	f006 fe06 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    EngProtCodeValue.setXY(314, 232);
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	f503 7377 	add.w	r3, r3, #988	; 0x3dc
 801624e:	22e8      	movs	r2, #232	; 0xe8
 8016250:	f44f 719d 	mov.w	r1, #314	; 0x13a
 8016254:	4618      	mov	r0, r3
 8016256:	f7fc fb15 	bl	8012884 <_ZN8touchgfx8Drawable5setXYEss>
    EngProtCodeValue.setVisible(false);
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	f503 7377 	add.w	r3, r3, #988	; 0x3dc
 8016260:	2100      	movs	r1, #0
 8016262:	4618      	mov	r0, r3
 8016264:	f7fc fb7f 	bl	8012966 <_ZN8touchgfx8Drawable10setVisibleEb>
    EngProtCodeValue.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 220, 0));
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	f503 7477 	add.w	r4, r3, #988	; 0x3dc
 801626e:	2200      	movs	r2, #0
 8016270:	21dc      	movs	r1, #220	; 0xdc
 8016272:	20ff      	movs	r0, #255	; 0xff
 8016274:	f7fd fa4a 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8016278:	4603      	mov	r3, r0
 801627a:	4619      	mov	r1, r3
 801627c:	4620      	mov	r0, r4
 801627e:	f7fc fdaa 	bl	8012dd6 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    EngProtCodeValue.setLinespacing(0);
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	f503 7377 	add.w	r3, r3, #988	; 0x3dc
 8016288:	2100      	movs	r1, #0
 801628a:	4618      	mov	r0, r3
 801628c:	f7fc fdf6 	bl	8012e7c <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(EngProtCodeValueBuffer, ENGPROTCODEVALUE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID96).getText());
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	f203 44d2 	addw	r4, r3, #1234	; 0x4d2
 8016296:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801629a:	2159      	movs	r1, #89	; 0x59
 801629c:	4618      	mov	r0, r3
 801629e:	f7fc fd31 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 80162a2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80162a6:	4618      	mov	r0, r3
 80162a8:	f7fc fd3c 	bl	8012d24 <_ZNK8touchgfx9TypedText7getTextEv>
 80162ac:	4603      	mov	r3, r0
 80162ae:	4a57      	ldr	r2, [pc, #348]	; (801640c <_ZN20SecondScreenViewBaseC1Ev+0xa50>)
 80162b0:	2123      	movs	r1, #35	; 0x23
 80162b2:	4620      	mov	r0, r4
 80162b4:	f00a facc 	bl	8020850 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    EngProtCodeValue.setWildcard(EngProtCodeValueBuffer);
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	f503 7277 	add.w	r2, r3, #988	; 0x3dc
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	f203 43d2 	addw	r3, r3, #1234	; 0x4d2
 80162c4:	4619      	mov	r1, r3
 80162c6:	4610      	mov	r0, r2
 80162c8:	f7fc fe60 	bl	8012f8c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    EngProtCodeValue.resizeToCurrentText();
 80162cc:	687b      	ldr	r3, [r7, #4]
 80162ce:	f503 7377 	add.w	r3, r3, #988	; 0x3dc
 80162d2:	4618      	mov	r0, r3
 80162d4:	f006 fd94 	bl	801ce00 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    EngProtCodeValue.setTypedText(touchgfx::TypedText(T_SINGLEUSEID95));
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	f503 7477 	add.w	r4, r3, #988	; 0x3dc
 80162de:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80162e2:	2158      	movs	r1, #88	; 0x58
 80162e4:	4618      	mov	r0, r3
 80162e6:	f7fc fd0d 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 80162ea:	f8b7 107c 	ldrh.w	r1, [r7, #124]	; 0x7c
 80162ee:	4620      	mov	r0, r4
 80162f0:	f006 fdb0 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    add(backgroundBox);
 80162f4:	687a      	ldr	r2, [r7, #4]
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	3340      	adds	r3, #64	; 0x40
 80162fa:	4619      	mov	r1, r3
 80162fc:	4610      	mov	r0, r2
 80162fe:	f7fc fc49 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ButtonGoToMainScreen);
 8016302:	687a      	ldr	r2, [r7, #4]
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	3370      	adds	r3, #112	; 0x70
 8016308:	4619      	mov	r1, r3
 801630a:	4610      	mov	r0, r2
 801630c:	f7fc fc42 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IngAngValue);
 8016310:	687a      	ldr	r2, [r7, #4]
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	33e8      	adds	r3, #232	; 0xe8
 8016316:	4619      	mov	r1, r3
 8016318:	4610      	mov	r0, r2
 801631a:	f7fc fc3b 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(IgnAngDescriptor);
 801631e:	687a      	ldr	r2, [r7, #4]
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8016326:	4619      	mov	r1, r3
 8016328:	4610      	mov	r0, r2
 801632a:	f7fc fc33 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(ErrorMessage);
 801632e:	687a      	ldr	r2, [r7, #4]
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8016336:	4619      	mov	r1, r3
 8016338:	4610      	mov	r0, r2
 801633a:	f7fc fc2b 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(nextErrorButton);
 801633e:	687a      	ldr	r2, [r7, #4]
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8016346:	4619      	mov	r1, r3
 8016348:	4610      	mov	r0, r2
 801634a:	f7fc fc23 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(clearErrorsBtn);
 801634e:	687a      	ldr	r2, [r7, #4]
 8016350:	687b      	ldr	r3, [r7, #4]
 8016352:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8016356:	4619      	mov	r1, r3
 8016358:	4610      	mov	r0, r2
 801635a:	f7fc fc1b 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(VeValue);
 801635e:	687a      	ldr	r2, [r7, #4]
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8016366:	4619      	mov	r1, r3
 8016368:	4610      	mov	r0, r2
 801636a:	f7fc fc13 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(VeDescriptor);
 801636e:	687a      	ldr	r2, [r7, #4]
 8016370:	687b      	ldr	r3, [r7, #4]
 8016372:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 8016376:	4619      	mov	r1, r3
 8016378:	4610      	mov	r0, r2
 801637a:	f7fc fc0b 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(BoostDcValue);
 801637e:	687a      	ldr	r2, [r7, #4]
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8016386:	4619      	mov	r1, r3
 8016388:	4610      	mov	r0, r2
 801638a:	f7fc fc03 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(BoostDcDescriptior);
 801638e:	687a      	ldr	r2, [r7, #4]
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8016396:	4619      	mov	r1, r3
 8016398:	4610      	mov	r0, r2
 801639a:	f7fc fbfb 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(BoostTrgtValue);
 801639e:	687a      	ldr	r2, [r7, #4]
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	f503 7333 	add.w	r3, r3, #716	; 0x2cc
 80163a6:	4619      	mov	r1, r3
 80163a8:	4610      	mov	r0, r2
 80163aa:	f7fc fbf3 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(BoostTrgtDescriptior);
 80163ae:	687a      	ldr	r2, [r7, #4]
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	f503 7341 	add.w	r3, r3, #772	; 0x304
 80163b6:	4619      	mov	r1, r3
 80163b8:	4610      	mov	r0, r2
 80163ba:	f7fc fbeb 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(InjctorDcValue);
 80163be:	687a      	ldr	r2, [r7, #4]
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80163c6:	4619      	mov	r1, r3
 80163c8:	4610      	mov	r0, r2
 80163ca:	f7fc fbe3 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(InjectorDcDescriptior);
 80163ce:	687a      	ldr	r2, [r7, #4]
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	f503 735c 	add.w	r3, r3, #880	; 0x370
 80163d6:	4619      	mov	r1, r3
 80163d8:	4610      	mov	r0, r2
 80163da:	f7fc fbdb 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(CheckEngCodeValue);
 80163de:	687a      	ldr	r2, [r7, #4]
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 80163e6:	4619      	mov	r1, r3
 80163e8:	4610      	mov	r0, r2
 80163ea:	f7fc fbd3 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(EngProtCodeValue);
 80163ee:	687a      	ldr	r2, [r7, #4]
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	f503 7377 	add.w	r3, r3, #988	; 0x3dc
 80163f6:	4619      	mov	r1, r3
 80163f8:	4610      	mov	r0, r2
 80163fa:	f7fc fbcb 	bl	8012b94 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	4618      	mov	r0, r3
 8016402:	3780      	adds	r7, #128	; 0x80
 8016404:	46bd      	mov	sp, r7
 8016406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801640a:	bf00      	nop
 801640c:	0802be0c 	.word	0x0802be0c

08016410 <_ZN20SecondScreenViewBase11setupScreenEv>:

void SecondScreenViewBase::setupScreen()
{
 8016410:	b480      	push	{r7}
 8016412:	b083      	sub	sp, #12
 8016414:	af00      	add	r7, sp, #0
 8016416:	6078      	str	r0, [r7, #4]

}
 8016418:	bf00      	nop
 801641a:	370c      	adds	r7, #12
 801641c:	46bd      	mov	sp, r7
 801641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016422:	4770      	bx	lr

08016424 <_ZN20SecondScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void SecondScreenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8016424:	b580      	push	{r7, lr}
 8016426:	b082      	sub	sp, #8
 8016428:	af00      	add	r7, sp, #0
 801642a:	6078      	str	r0, [r7, #4]
 801642c:	6039      	str	r1, [r7, #0]
    if (&src == &nextErrorButton)
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8016434:	683a      	ldr	r2, [r7, #0]
 8016436:	429a      	cmp	r2, r3
 8016438:	d106      	bne.n	8016448 <_ZN20SecondScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x24>
    {
        //DisplayNextErrorInteraction
        //When nextErrorButton clicked call virtual function
        //Call nextError
        nextError();
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	681b      	ldr	r3, [r3, #0]
 801643e:	332c      	adds	r3, #44	; 0x2c
 8016440:	681b      	ldr	r3, [r3, #0]
 8016442:	6878      	ldr	r0, [r7, #4]
 8016444:	4798      	blx	r3
        //ClearErrorsInteraction
        //When clearErrorsBtn clicked call virtual function
        //Call clearErrors
        clearErrors();
    }
}
 8016446:	e00b      	b.n	8016460 <_ZN20SecondScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3c>
    else if (&src == &clearErrorsBtn)
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 801644e:	683a      	ldr	r2, [r7, #0]
 8016450:	429a      	cmp	r2, r3
 8016452:	d105      	bne.n	8016460 <_ZN20SecondScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3c>
        clearErrors();
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	681b      	ldr	r3, [r3, #0]
 8016458:	3330      	adds	r3, #48	; 0x30
 801645a:	681b      	ldr	r3, [r3, #0]
 801645c:	6878      	ldr	r0, [r7, #4]
 801645e:	4798      	blx	r3
}
 8016460:	bf00      	nop
 8016462:	3708      	adds	r7, #8
 8016464:	46bd      	mov	sp, r7
 8016466:	bd80      	pop	{r7, pc}

08016468 <_ZN20SecondScreenViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void SecondScreenViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
 8016468:	b580      	push	{r7, lr}
 801646a:	b082      	sub	sp, #8
 801646c:	af00      	add	r7, sp, #0
 801646e:	6078      	str	r0, [r7, #4]
 8016470:	6039      	str	r1, [r7, #0]
    if (&src == &ButtonGoToMainScreen)
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	3370      	adds	r3, #112	; 0x70
 8016476:	683a      	ldr	r2, [r7, #0]
 8016478:	429a      	cmp	r2, r3
 801647a:	d10c      	bne.n	8016496 <_ZN20SecondScreenViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x2e>
    {
        //MoveToMainScreenBtnInteraction
        //When ButtonGoToMainScreen clicked call virtual function
        //Call moveToMainScreen
        moveToMainScreen();
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	681b      	ldr	r3, [r3, #0]
 8016480:	3334      	adds	r3, #52	; 0x34
 8016482:	681b      	ldr	r3, [r3, #0]
 8016484:	6878      	ldr	r0, [r7, #4]
 8016486:	4798      	blx	r3

        //MoveToMainScreenInteraction
        //When MoveToMainScreenBtnInteraction completed change screen to Main
        //Go to Main with screen transition towards West
        application().gotoMainScreenSlideTransitionWest();
 8016488:	6878      	ldr	r0, [r7, #4]
 801648a:	f7ff fa8c 	bl	80159a6 <_ZN20SecondScreenViewBase11applicationEv>
 801648e:	4603      	mov	r3, r0
 8016490:	4618      	mov	r0, r3
 8016492:	f7fa ff07 	bl	80112a4 <_ZN23FrontendApplicationBase33gotoMainScreenSlideTransitionWestEv>
    }
}
 8016496:	bf00      	nop
 8016498:	3708      	adds	r7, #8
 801649a:	46bd      	mov	sp, r7
 801649c:	bd80      	pop	{r7, pc}
	...

080164a0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>:
    virtual ~BoxWithBorderButtonStyle() { }
 80164a0:	b580      	push	{r7, lr}
 80164a2:	b082      	sub	sp, #8
 80164a4:	af00      	add	r7, sp, #0
 80164a6:	6078      	str	r0, [r7, #4]
 80164a8:	4a08      	ldr	r2, [pc, #32]	; (80164cc <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev+0x2c>)
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	601a      	str	r2, [r3, #0]
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	3334      	adds	r3, #52	; 0x34
 80164b2:	4618      	mov	r0, r3
 80164b4:	f7fc ff72 	bl	801339c <_ZN8touchgfx13BoxWithBorderD1Ev>
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	4618      	mov	r0, r3
 80164bc:	f7ff f88a 	bl	80155d4 <_ZN8touchgfx18ClickButtonTriggerD1Ev>
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	4618      	mov	r0, r3
 80164c4:	3708      	adds	r7, #8
 80164c6:	46bd      	mov	sp, r7
 80164c8:	bd80      	pop	{r7, pc}
 80164ca:	bf00      	nop
 80164cc:	0802cbf8 	.word	0x0802cbf8

080164d0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED0Ev>:
 80164d0:	b580      	push	{r7, lr}
 80164d2:	b082      	sub	sp, #8
 80164d4:	af00      	add	r7, sp, #0
 80164d6:	6078      	str	r0, [r7, #4]
 80164d8:	6878      	ldr	r0, [r7, #4]
 80164da:	f7ff ffe1 	bl	80164a0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>
 80164de:	2178      	movs	r1, #120	; 0x78
 80164e0:	6878      	ldr	r0, [r7, #4]
 80164e2:	f014 f922 	bl	802a72a <_ZdlPvj>
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	4618      	mov	r0, r3
 80164ea:	3708      	adds	r7, #8
 80164ec:	46bd      	mov	sp, r7
 80164ee:	bd80      	pop	{r7, pc}

080164f0 <_ZN8touchgfx4ViewI21SecondScreenPresenterEC1Ev>:
    View() : presenter(0)
 80164f0:	b580      	push	{r7, lr}
 80164f2:	b082      	sub	sp, #8
 80164f4:	af00      	add	r7, sp, #0
 80164f6:	6078      	str	r0, [r7, #4]
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	4618      	mov	r0, r3
 80164fc:	f009 f8a8 	bl	801f650 <_ZN8touchgfx6ScreenC1Ev>
 8016500:	4a05      	ldr	r2, [pc, #20]	; (8016518 <_ZN8touchgfx4ViewI21SecondScreenPresenterEC1Ev+0x28>)
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	601a      	str	r2, [r3, #0]
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	2200      	movs	r2, #0
 801650a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	4618      	mov	r0, r3
 8016510:	3708      	adds	r7, #8
 8016512:	46bd      	mov	sp, r7
 8016514:	bd80      	pop	{r7, pc}
 8016516:	bf00      	nop
 8016518:	0802cc8c 	.word	0x0802cc8c

0801651c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>:
    BoxWithBorderButtonStyle() : T(), up(), down()
 801651c:	b580      	push	{r7, lr}
 801651e:	b082      	sub	sp, #8
 8016520:	af00      	add	r7, sp, #0
 8016522:	6078      	str	r0, [r7, #4]
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	4618      	mov	r0, r3
 8016528:	f7ff f842 	bl	80155b0 <_ZN8touchgfx18ClickButtonTriggerC1Ev>
 801652c:	4a17      	ldr	r2, [pc, #92]	; (801658c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev+0x70>)
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	601a      	str	r2, [r3, #0]
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	3334      	adds	r3, #52	; 0x34
 8016536:	4618      	mov	r0, r3
 8016538:	f7fc ff0a 	bl	8013350 <_ZN8touchgfx13BoxWithBorderC1Ev>
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	3368      	adds	r3, #104	; 0x68
 8016540:	4618      	mov	r0, r3
 8016542:	f7fc f8c2 	bl	80126ca <_ZN8touchgfx9colortypeC1Ev>
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	336c      	adds	r3, #108	; 0x6c
 801654a:	4618      	mov	r0, r3
 801654c:	f7fc f8bd 	bl	80126ca <_ZN8touchgfx9colortypeC1Ev>
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	3370      	adds	r3, #112	; 0x70
 8016554:	4618      	mov	r0, r3
 8016556:	f7fc f8b8 	bl	80126ca <_ZN8touchgfx9colortypeC1Ev>
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	3374      	adds	r3, #116	; 0x74
 801655e:	4618      	mov	r0, r3
 8016560:	f7fc f8b3 	bl	80126ca <_ZN8touchgfx9colortypeC1Ev>
        borderBox.setXY(0, 0);
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	3334      	adds	r3, #52	; 0x34
 8016568:	2200      	movs	r2, #0
 801656a:	2100      	movs	r1, #0
 801656c:	4618      	mov	r0, r3
 801656e:	f7fc f989 	bl	8012884 <_ZN8touchgfx8Drawable5setXYEss>
        T::add(borderBox);
 8016572:	687a      	ldr	r2, [r7, #4]
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	3334      	adds	r3, #52	; 0x34
 8016578:	4619      	mov	r1, r3
 801657a:	4610      	mov	r0, r2
 801657c:	f004 fd52 	bl	801b024 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	4618      	mov	r0, r3
 8016584:	3708      	adds	r7, #8
 8016586:	46bd      	mov	sp, r7
 8016588:	bd80      	pop	{r7, pc}
 801658a:	bf00      	nop
 801658c:	0802cbf8 	.word	0x0802cbf8

08016590 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8016590:	b480      	push	{r7}
 8016592:	b083      	sub	sp, #12
 8016594:	af00      	add	r7, sp, #0
 8016596:	6078      	str	r0, [r7, #4]
 8016598:	4a04      	ldr	r2, [pc, #16]	; (80165ac <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	601a      	str	r2, [r3, #0]
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	4618      	mov	r0, r3
 80165a2:	370c      	adds	r7, #12
 80165a4:	46bd      	mov	sp, r7
 80165a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165aa:	4770      	bx	lr
 80165ac:	0802ccc0 	.word	0x0802ccc0

080165b0 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 80165b0:	b580      	push	{r7, lr}
 80165b2:	b084      	sub	sp, #16
 80165b4:	af00      	add	r7, sp, #0
 80165b6:	60f8      	str	r0, [r7, #12]
 80165b8:	60b9      	str	r1, [r7, #8]
 80165ba:	4639      	mov	r1, r7
 80165bc:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 80165c0:	68fb      	ldr	r3, [r7, #12]
 80165c2:	4618      	mov	r0, r3
 80165c4:	f7ff ffe4 	bl	8016590 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 80165c8:	4a08      	ldr	r2, [pc, #32]	; (80165ec <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 80165ca:	68fb      	ldr	r3, [r7, #12]
 80165cc:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 80165ce:	68fb      	ldr	r3, [r7, #12]
 80165d0:	68ba      	ldr	r2, [r7, #8]
 80165d2:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 80165d4:	68fb      	ldr	r3, [r7, #12]
 80165d6:	3308      	adds	r3, #8
 80165d8:	463a      	mov	r2, r7
 80165da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80165de:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80165e2:	68fb      	ldr	r3, [r7, #12]
 80165e4:	4618      	mov	r0, r3
 80165e6:	3710      	adds	r7, #16
 80165e8:	46bd      	mov	sp, r7
 80165ea:	bd80      	pop	{r7, pc}
 80165ec:	0802cbe0 	.word	0x0802cbe0

080165f0 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 80165f0:	b580      	push	{r7, lr}
 80165f2:	b084      	sub	sp, #16
 80165f4:	af00      	add	r7, sp, #0
 80165f6:	60f8      	str	r0, [r7, #12]
 80165f8:	60b9      	str	r1, [r7, #8]
 80165fa:	4639      	mov	r1, r7
 80165fc:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8016600:	68fb      	ldr	r3, [r7, #12]
 8016602:	4618      	mov	r0, r3
 8016604:	f7fe fdba 	bl	801517c <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev>
 8016608:	4a08      	ldr	r2, [pc, #32]	; (801662c <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 801660a:	68fb      	ldr	r3, [r7, #12]
 801660c:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 801660e:	68fb      	ldr	r3, [r7, #12]
 8016610:	68ba      	ldr	r2, [r7, #8]
 8016612:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8016614:	68fb      	ldr	r3, [r7, #12]
 8016616:	3308      	adds	r3, #8
 8016618:	463a      	mov	r2, r7
 801661a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801661e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8016622:	68fb      	ldr	r3, [r7, #12]
 8016624:	4618      	mov	r0, r3
 8016626:	3710      	adds	r7, #16
 8016628:	46bd      	mov	sp, r7
 801662a:	bd80      	pop	{r7, pc}
 801662c:	0802cbc8 	.word	0x0802cbc8

08016630 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>:
    void setBoxWithBorderPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8016630:	b590      	push	{r4, r7, lr}
 8016632:	b087      	sub	sp, #28
 8016634:	af02      	add	r7, sp, #8
 8016636:	60f8      	str	r0, [r7, #12]
 8016638:	4608      	mov	r0, r1
 801663a:	4611      	mov	r1, r2
 801663c:	461a      	mov	r2, r3
 801663e:	4603      	mov	r3, r0
 8016640:	817b      	strh	r3, [r7, #10]
 8016642:	460b      	mov	r3, r1
 8016644:	813b      	strh	r3, [r7, #8]
 8016646:	4613      	mov	r3, r2
 8016648:	80fb      	strh	r3, [r7, #6]
        borderBox.setPosition(x, y, width, height);
 801664a:	68fb      	ldr	r3, [r7, #12]
 801664c:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8016650:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8016654:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8016658:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 801665c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016660:	9300      	str	r3, [sp, #0]
 8016662:	4623      	mov	r3, r4
 8016664:	f7fa fb60 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 8016668:	bf00      	nop
 801666a:	3714      	adds	r7, #20
 801666c:	46bd      	mov	sp, r7
 801666e:	bd90      	pop	{r4, r7, pc}

08016670 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>:
    void setBorderSize(uint8_t size)
 8016670:	b580      	push	{r7, lr}
 8016672:	b082      	sub	sp, #8
 8016674:	af00      	add	r7, sp, #0
 8016676:	6078      	str	r0, [r7, #4]
 8016678:	460b      	mov	r3, r1
 801667a:	70fb      	strb	r3, [r7, #3]
        borderBox.setBorderSize(size);
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	3334      	adds	r3, #52	; 0x34
 8016680:	78fa      	ldrb	r2, [r7, #3]
 8016682:	4611      	mov	r1, r2
 8016684:	4618      	mov	r0, r3
 8016686:	f7fc fec7 	bl	8013418 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEh>
    }
 801668a:	bf00      	nop
 801668c:	3708      	adds	r7, #8
 801668e:	46bd      	mov	sp, r7
 8016690:	bd80      	pop	{r7, pc}

08016692 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>:
    void setBoxWithBorderColors(const colortype colorReleased, const colortype colorPressed, const colortype borderColorReleased, const colortype borderColorPressed)
 8016692:	b580      	push	{r7, lr}
 8016694:	b084      	sub	sp, #16
 8016696:	af00      	add	r7, sp, #0
 8016698:	60f8      	str	r0, [r7, #12]
 801669a:	60b9      	str	r1, [r7, #8]
 801669c:	607a      	str	r2, [r7, #4]
 801669e:	603b      	str	r3, [r7, #0]
        up = colorReleased;
 80166a0:	68fb      	ldr	r3, [r7, #12]
 80166a2:	68ba      	ldr	r2, [r7, #8]
 80166a4:	669a      	str	r2, [r3, #104]	; 0x68
        down = colorPressed;
 80166a6:	68fb      	ldr	r3, [r7, #12]
 80166a8:	687a      	ldr	r2, [r7, #4]
 80166aa:	66da      	str	r2, [r3, #108]	; 0x6c
        borderUp = borderColorReleased;
 80166ac:	68fb      	ldr	r3, [r7, #12]
 80166ae:	683a      	ldr	r2, [r7, #0]
 80166b0:	671a      	str	r2, [r3, #112]	; 0x70
        borderDown = borderColorPressed;
 80166b2:	68fb      	ldr	r3, [r7, #12]
 80166b4:	69ba      	ldr	r2, [r7, #24]
 80166b6:	675a      	str	r2, [r3, #116]	; 0x74
        handlePressedUpdated();
 80166b8:	68fb      	ldr	r3, [r7, #12]
 80166ba:	681b      	ldr	r3, [r3, #0]
 80166bc:	3384      	adds	r3, #132	; 0x84
 80166be:	681b      	ldr	r3, [r3, #0]
 80166c0:	68f8      	ldr	r0, [r7, #12]
 80166c2:	4798      	blx	r3
    }
 80166c4:	bf00      	nop
 80166c6:	3710      	adds	r7, #16
 80166c8:	46bd      	mov	sp, r7
 80166ca:	bd80      	pop	{r7, pc}

080166cc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 80166cc:	b480      	push	{r7}
 80166ce:	b083      	sub	sp, #12
 80166d0:	af00      	add	r7, sp, #0
 80166d2:	6078      	str	r0, [r7, #4]
    }
 80166d4:	4a04      	ldr	r2, [pc, #16]	; (80166e8 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 80166d6:	687b      	ldr	r3, [r7, #4]
 80166d8:	601a      	str	r2, [r3, #0]
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	4618      	mov	r0, r3
 80166de:	370c      	adds	r7, #12
 80166e0:	46bd      	mov	sp, r7
 80166e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166e6:	4770      	bx	lr
 80166e8:	0802ccc0 	.word	0x0802ccc0

080166ec <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 80166ec:	b580      	push	{r7, lr}
 80166ee:	b082      	sub	sp, #8
 80166f0:	af00      	add	r7, sp, #0
 80166f2:	6078      	str	r0, [r7, #4]
    }
 80166f4:	6878      	ldr	r0, [r7, #4]
 80166f6:	f7ff ffe9 	bl	80166cc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 80166fa:	2104      	movs	r1, #4
 80166fc:	6878      	ldr	r0, [r7, #4]
 80166fe:	f014 f814 	bl	802a72a <_ZdlPvj>
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	4618      	mov	r0, r3
 8016706:	3708      	adds	r7, #8
 8016708:	46bd      	mov	sp, r7
 801670a:	bd80      	pop	{r7, pc}

0801670c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>:
    virtual void handlePressedUpdated()
 801670c:	b590      	push	{r4, r7, lr}
 801670e:	b083      	sub	sp, #12
 8016710:	af00      	add	r7, sp, #0
 8016712:	6078      	str	r0, [r7, #4]
        borderBox.setColor(T::getPressed() ? down : up);
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	f103 0434 	add.w	r4, r3, #52	; 0x34
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	4618      	mov	r0, r3
 801671e:	f7fc fd3f 	bl	80131a0 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8016722:	4603      	mov	r3, r0
 8016724:	2b00      	cmp	r3, #0
 8016726:	d002      	beq.n	801672e <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x22>
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	336c      	adds	r3, #108	; 0x6c
 801672c:	e001      	b.n	8016732 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x26>
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	3368      	adds	r3, #104	; 0x68
 8016732:	6819      	ldr	r1, [r3, #0]
 8016734:	4620      	mov	r0, r4
 8016736:	f7fc fe53 	bl	80133e0 <_ZN8touchgfx13BoxWithBorder8setColorENS_9colortypeE>
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	4618      	mov	r0, r3
 8016744:	f7fc fd2c 	bl	80131a0 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 8016748:	4603      	mov	r3, r0
 801674a:	2b00      	cmp	r3, #0
 801674c:	d002      	beq.n	8016754 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x48>
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	3374      	adds	r3, #116	; 0x74
 8016752:	e001      	b.n	8016758 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x4c>
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	3370      	adds	r3, #112	; 0x70
 8016758:	6819      	ldr	r1, [r3, #0]
 801675a:	4620      	mov	r0, r4
 801675c:	f7fc fe4e 	bl	80133fc <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
        T::handlePressedUpdated();
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	4618      	mov	r0, r3
 8016764:	f7fc fd58 	bl	8013218 <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>
    }
 8016768:	bf00      	nop
 801676a:	370c      	adds	r7, #12
 801676c:	46bd      	mov	sp, r7
 801676e:	bd90      	pop	{r4, r7, pc}

08016770 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8016770:	b580      	push	{r7, lr}
 8016772:	b082      	sub	sp, #8
 8016774:	af00      	add	r7, sp, #0
 8016776:	6078      	str	r0, [r7, #4]
 8016778:	4a05      	ldr	r2, [pc, #20]	; (8016790 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvED1Ev+0x20>)
 801677a:	687b      	ldr	r3, [r7, #4]
 801677c:	601a      	str	r2, [r3, #0]
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	4618      	mov	r0, r3
 8016782:	f7fe fddd 	bl	8015340 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	4618      	mov	r0, r3
 801678a:	3708      	adds	r7, #8
 801678c:	46bd      	mov	sp, r7
 801678e:	bd80      	pop	{r7, pc}
 8016790:	0802cbc8 	.word	0x0802cbc8

08016794 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
 8016794:	b580      	push	{r7, lr}
 8016796:	b082      	sub	sp, #8
 8016798:	af00      	add	r7, sp, #0
 801679a:	6078      	str	r0, [r7, #4]
 801679c:	6878      	ldr	r0, [r7, #4]
 801679e:	f7ff ffe7 	bl	8016770 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 80167a2:	2110      	movs	r1, #16
 80167a4:	6878      	ldr	r0, [r7, #4]
 80167a6:	f013 ffc0 	bl	802a72a <_ZdlPvj>
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	4618      	mov	r0, r3
 80167ae:	3708      	adds	r7, #8
 80167b0:	46bd      	mov	sp, r7
 80167b2:	bd80      	pop	{r7, pc}

080167b4 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>:
 80167b4:	b580      	push	{r7, lr}
 80167b6:	b082      	sub	sp, #8
 80167b8:	af00      	add	r7, sp, #0
 80167ba:	6078      	str	r0, [r7, #4]
 80167bc:	4a05      	ldr	r2, [pc, #20]	; (80167d4 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	601a      	str	r2, [r3, #0]
 80167c2:	687b      	ldr	r3, [r7, #4]
 80167c4:	4618      	mov	r0, r3
 80167c6:	f7ff ff81 	bl	80166cc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	4618      	mov	r0, r3
 80167ce:	3708      	adds	r7, #8
 80167d0:	46bd      	mov	sp, r7
 80167d2:	bd80      	pop	{r7, pc}
 80167d4:	0802cbe0 	.word	0x0802cbe0

080167d8 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 80167d8:	b580      	push	{r7, lr}
 80167da:	b082      	sub	sp, #8
 80167dc:	af00      	add	r7, sp, #0
 80167de:	6078      	str	r0, [r7, #4]
 80167e0:	6878      	ldr	r0, [r7, #4]
 80167e2:	f7ff ffe7 	bl	80167b4 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 80167e6:	2110      	movs	r1, #16
 80167e8:	6878      	ldr	r0, [r7, #4]
 80167ea:	f013 ff9e 	bl	802a72a <_ZdlPvj>
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	4618      	mov	r0, r3
 80167f2:	3708      	adds	r7, #8
 80167f4:	46bd      	mov	sp, r7
 80167f6:	bd80      	pop	{r7, pc}

080167f8 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80167f8:	b580      	push	{r7, lr}
 80167fa:	b082      	sub	sp, #8
 80167fc:	af00      	add	r7, sp, #0
 80167fe:	6078      	str	r0, [r7, #4]
 8016800:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	685b      	ldr	r3, [r3, #4]
 8016806:	687a      	ldr	r2, [r7, #4]
 8016808:	68d2      	ldr	r2, [r2, #12]
 801680a:	1052      	asrs	r2, r2, #1
 801680c:	1898      	adds	r0, r3, r2
 801680e:	687b      	ldr	r3, [r7, #4]
 8016810:	68db      	ldr	r3, [r3, #12]
 8016812:	f003 0301 	and.w	r3, r3, #1
 8016816:	2b00      	cmp	r3, #0
 8016818:	d102      	bne.n	8016820 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x28>
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	689b      	ldr	r3, [r3, #8]
 801681e:	e00a      	b.n	8016836 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x3e>
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	685b      	ldr	r3, [r3, #4]
 8016824:	687a      	ldr	r2, [r7, #4]
 8016826:	68d2      	ldr	r2, [r2, #12]
 8016828:	1052      	asrs	r2, r2, #1
 801682a:	4413      	add	r3, r2
 801682c:	681b      	ldr	r3, [r3, #0]
 801682e:	687a      	ldr	r2, [r7, #4]
 8016830:	6892      	ldr	r2, [r2, #8]
 8016832:	4413      	add	r3, r2
 8016834:	681b      	ldr	r3, [r3, #0]
 8016836:	6839      	ldr	r1, [r7, #0]
 8016838:	4798      	blx	r3
    }
 801683a:	bf00      	nop
 801683c:	3708      	adds	r7, #8
 801683e:	46bd      	mov	sp, r7
 8016840:	bd80      	pop	{r7, pc}

08016842 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
    virtual bool isValid() const
 8016842:	b480      	push	{r7}
 8016844:	b083      	sub	sp, #12
 8016846:	af00      	add	r7, sp, #0
 8016848:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	685b      	ldr	r3, [r3, #4]
 801684e:	2b00      	cmp	r3, #0
 8016850:	d010      	beq.n	8016874 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	689b      	ldr	r3, [r3, #8]
 8016856:	2b00      	cmp	r3, #0
 8016858:	d107      	bne.n	801686a <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	68db      	ldr	r3, [r3, #12]
 801685e:	f003 0301 	and.w	r3, r3, #1
 8016862:	2b00      	cmp	r3, #0
 8016864:	d101      	bne.n	801686a <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 8016866:	2301      	movs	r3, #1
 8016868:	e000      	b.n	801686c <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x2a>
 801686a:	2300      	movs	r3, #0
 801686c:	2b01      	cmp	r3, #1
 801686e:	d001      	beq.n	8016874 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 8016870:	2301      	movs	r3, #1
 8016872:	e000      	b.n	8016876 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x34>
 8016874:	2300      	movs	r3, #0
    }
 8016876:	4618      	mov	r0, r3
 8016878:	370c      	adds	r7, #12
 801687a:	46bd      	mov	sp, r7
 801687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016880:	4770      	bx	lr

08016882 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8016882:	b580      	push	{r7, lr}
 8016884:	b082      	sub	sp, #8
 8016886:	af00      	add	r7, sp, #0
 8016888:	6078      	str	r0, [r7, #4]
 801688a:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	685b      	ldr	r3, [r3, #4]
 8016890:	687a      	ldr	r2, [r7, #4]
 8016892:	68d2      	ldr	r2, [r2, #12]
 8016894:	1052      	asrs	r2, r2, #1
 8016896:	1898      	adds	r0, r3, r2
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	68db      	ldr	r3, [r3, #12]
 801689c:	f003 0301 	and.w	r3, r3, #1
 80168a0:	2b00      	cmp	r3, #0
 80168a2:	d102      	bne.n	80168aa <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	689b      	ldr	r3, [r3, #8]
 80168a8:	e00a      	b.n	80168c0 <_ZN8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	685b      	ldr	r3, [r3, #4]
 80168ae:	687a      	ldr	r2, [r7, #4]
 80168b0:	68d2      	ldr	r2, [r2, #12]
 80168b2:	1052      	asrs	r2, r2, #1
 80168b4:	4413      	add	r3, r2
 80168b6:	681b      	ldr	r3, [r3, #0]
 80168b8:	687a      	ldr	r2, [r7, #4]
 80168ba:	6892      	ldr	r2, [r2, #8]
 80168bc:	4413      	add	r3, r2
 80168be:	681b      	ldr	r3, [r3, #0]
 80168c0:	6839      	ldr	r1, [r7, #0]
 80168c2:	4798      	blx	r3
    }
 80168c4:	bf00      	nop
 80168c6:	3708      	adds	r7, #8
 80168c8:	46bd      	mov	sp, r7
 80168ca:	bd80      	pop	{r7, pc}

080168cc <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 80168cc:	b480      	push	{r7}
 80168ce:	b083      	sub	sp, #12
 80168d0:	af00      	add	r7, sp, #0
 80168d2:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	685b      	ldr	r3, [r3, #4]
 80168d8:	2b00      	cmp	r3, #0
 80168da:	d010      	beq.n	80168fe <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	689b      	ldr	r3, [r3, #8]
 80168e0:	2b00      	cmp	r3, #0
 80168e2:	d107      	bne.n	80168f4 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	68db      	ldr	r3, [r3, #12]
 80168e8:	f003 0301 	and.w	r3, r3, #1
 80168ec:	2b00      	cmp	r3, #0
 80168ee:	d101      	bne.n	80168f4 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 80168f0:	2301      	movs	r3, #1
 80168f2:	e000      	b.n	80168f6 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 80168f4:	2300      	movs	r3, #0
 80168f6:	2b01      	cmp	r3, #1
 80168f8:	d001      	beq.n	80168fe <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80168fa:	2301      	movs	r3, #1
 80168fc:	e000      	b.n	8016900 <_ZNK8touchgfx8CallbackI20SecondScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 80168fe:	2300      	movs	r3, #0
    }
 8016900:	4618      	mov	r0, r3
 8016902:	370c      	adds	r7, #12
 8016904:	46bd      	mov	sp, r7
 8016906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801690a:	4770      	bx	lr

0801690c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>:
    virtual void handleAlphaUpdated()
 801690c:	b590      	push	{r4, r7, lr}
 801690e:	b083      	sub	sp, #12
 8016910:	af00      	add	r7, sp, #0
 8016912:	6078      	str	r0, [r7, #4]
        borderBox.setAlpha(T::getAlpha());
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	f103 0434 	add.w	r4, r3, #52	; 0x34
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	4618      	mov	r0, r3
 801691e:	f7fc fc60 	bl	80131e2 <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 8016922:	4603      	mov	r3, r0
 8016924:	4619      	mov	r1, r3
 8016926:	4620      	mov	r0, r4
 8016928:	f7fc fd86 	bl	8013438 <_ZN8touchgfx13BoxWithBorder8setAlphaEh>
        T::handleAlphaUpdated();
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	4618      	mov	r0, r3
 8016930:	f7fc fc7c 	bl	801322c <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>
    }
 8016934:	bf00      	nop
 8016936:	370c      	adds	r7, #12
 8016938:	46bd      	mov	sp, r7
 801693a:	bd90      	pop	{r4, r7, pc}

0801693c <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 801693c:	b480      	push	{r7}
 801693e:	af00      	add	r7, sp, #0
    return bitmap_database;
 8016940:	4b02      	ldr	r3, [pc, #8]	; (801694c <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8016942:	4618      	mov	r0, r3
 8016944:	46bd      	mov	sp, r7
 8016946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801694a:	4770      	bx	lr
 801694c:	0802cd64 	.word	0x0802cd64

08016950 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8016950:	b480      	push	{r7}
 8016952:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8016954:	2305      	movs	r3, #5
}
 8016956:	4618      	mov	r0, r3
 8016958:	46bd      	mov	sp, r7
 801695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801695e:	4770      	bx	lr

08016960 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8016960:	b480      	push	{r7}
 8016962:	b085      	sub	sp, #20
 8016964:	af00      	add	r7, sp, #0
 8016966:	60f8      	str	r0, [r7, #12]
 8016968:	60b9      	str	r1, [r7, #8]
 801696a:	4613      	mov	r3, r2
 801696c:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 801696e:	4a07      	ldr	r2, [pc, #28]	; (801698c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8016970:	68fb      	ldr	r3, [r7, #12]
 8016972:	6013      	str	r3, [r2, #0]
        fonts = f;
 8016974:	4a06      	ldr	r2, [pc, #24]	; (8016990 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8016976:	68bb      	ldr	r3, [r7, #8]
 8016978:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 801697a:	4a06      	ldr	r2, [pc, #24]	; (8016994 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 801697c:	88fb      	ldrh	r3, [r7, #6]
 801697e:	8013      	strh	r3, [r2, #0]
    }
 8016980:	bf00      	nop
 8016982:	3714      	adds	r7, #20
 8016984:	46bd      	mov	sp, r7
 8016986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801698a:	4770      	bx	lr
 801698c:	2000bff8 	.word	0x2000bff8
 8016990:	2000c000 	.word	0x2000c000
 8016994:	2000bffc 	.word	0x2000bffc

08016998 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8016998:	b590      	push	{r4, r7, lr}
 801699a:	b085      	sub	sp, #20
 801699c:	af00      	add	r7, sp, #0
 801699e:	4603      	mov	r3, r0
 80169a0:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 80169a2:	2300      	movs	r3, #0
 80169a4:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 80169a6:	88fb      	ldrh	r3, [r7, #6]
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	d127      	bne.n	80169fc <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 80169ac:	88fb      	ldrh	r3, [r7, #6]
 80169ae:	4a1e      	ldr	r2, [pc, #120]	; (8016a28 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80169b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d016      	beq.n	80169e6 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 80169b8:	88fb      	ldrh	r3, [r7, #6]
 80169ba:	4a1b      	ldr	r2, [pc, #108]	; (8016a28 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 80169bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80169c0:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80169c2:	68bb      	ldr	r3, [r7, #8]
 80169c4:	681b      	ldr	r3, [r3, #0]
 80169c6:	68ba      	ldr	r2, [r7, #8]
 80169c8:	4413      	add	r3, r2
 80169ca:	4a18      	ldr	r2, [pc, #96]	; (8016a2c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80169cc:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80169ce:	68bb      	ldr	r3, [r7, #8]
 80169d0:	685b      	ldr	r3, [r3, #4]
 80169d2:	68ba      	ldr	r2, [r7, #8]
 80169d4:	4413      	add	r3, r2
 80169d6:	4a16      	ldr	r2, [pc, #88]	; (8016a30 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80169d8:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80169da:	68bb      	ldr	r3, [r7, #8]
 80169dc:	689b      	ldr	r3, [r3, #8]
 80169de:	68ba      	ldr	r2, [r7, #8]
 80169e0:	4413      	add	r3, r2
 80169e2:	60fb      	str	r3, [r7, #12]
 80169e4:	e00a      	b.n	80169fc <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 80169e6:	4b11      	ldr	r3, [pc, #68]	; (8016a2c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80169e8:	4a12      	ldr	r2, [pc, #72]	; (8016a34 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 80169ea:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80169ec:	4a12      	ldr	r2, [pc, #72]	; (8016a38 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 80169ee:	4b10      	ldr	r3, [pc, #64]	; (8016a30 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80169f0:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80169f2:	88fb      	ldrh	r3, [r7, #6]
 80169f4:	4a11      	ldr	r2, [pc, #68]	; (8016a3c <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 80169f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80169fa:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 80169fc:	68fb      	ldr	r3, [r7, #12]
 80169fe:	2b00      	cmp	r3, #0
 8016a00:	d00d      	beq.n	8016a1e <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8016a02:	4a0f      	ldr	r2, [pc, #60]	; (8016a40 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8016a04:	88fb      	ldrh	r3, [r7, #6]
 8016a06:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8016a08:	f000 f83e 	bl	8016a88 <_ZN17TypedTextDatabase8getFontsEv>
 8016a0c:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8016a0e:	f000 f833 	bl	8016a78 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8016a12:	4603      	mov	r3, r0
 8016a14:	461a      	mov	r2, r3
 8016a16:	4621      	mov	r1, r4
 8016a18:	68f8      	ldr	r0, [r7, #12]
 8016a1a:	f7ff ffa1 	bl	8016960 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8016a1e:	bf00      	nop
 8016a20:	3714      	adds	r7, #20
 8016a22:	46bd      	mov	sp, r7
 8016a24:	bd90      	pop	{r4, r7, pc}
 8016a26:	bf00      	nop
 8016a28:	20008718 	.word	0x20008718
 8016a2c:	20008720 	.word	0x20008720
 8016a30:	20008724 	.word	0x20008724
 8016a34:	0806a45c 	.word	0x0806a45c
 8016a38:	0806a2f4 	.word	0x0806a2f4
 8016a3c:	0806a920 	.word	0x0806a920
 8016a40:	2000871c 	.word	0x2000871c

08016a44 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8016a44:	b480      	push	{r7}
 8016a46:	b083      	sub	sp, #12
 8016a48:	af00      	add	r7, sp, #0
 8016a4a:	6078      	str	r0, [r7, #4]
 8016a4c:	460b      	mov	r3, r1
 8016a4e:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8016a50:	4b07      	ldr	r3, [pc, #28]	; (8016a70 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8016a52:	681a      	ldr	r2, [r3, #0]
 8016a54:	4b07      	ldr	r3, [pc, #28]	; (8016a74 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8016a56:	6819      	ldr	r1, [r3, #0]
 8016a58:	887b      	ldrh	r3, [r7, #2]
 8016a5a:	009b      	lsls	r3, r3, #2
 8016a5c:	440b      	add	r3, r1
 8016a5e:	681b      	ldr	r3, [r3, #0]
 8016a60:	005b      	lsls	r3, r3, #1
 8016a62:	4413      	add	r3, r2
}
 8016a64:	4618      	mov	r0, r3
 8016a66:	370c      	adds	r7, #12
 8016a68:	46bd      	mov	sp, r7
 8016a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a6e:	4770      	bx	lr
 8016a70:	20008720 	.word	0x20008720
 8016a74:	20008724 	.word	0x20008724

08016a78 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8016a78:	b480      	push	{r7}
 8016a7a:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8016a7c:	235a      	movs	r3, #90	; 0x5a
}
 8016a7e:	4618      	mov	r0, r3
 8016a80:	46bd      	mov	sp, r7
 8016a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a86:	4770      	bx	lr

08016a88 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8016a88:	b480      	push	{r7}
 8016a8a:	af00      	add	r7, sp, #0
    return _fonts;
 8016a8c:	4b02      	ldr	r3, [pc, #8]	; (8016a98 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8016a8e:	4618      	mov	r0, r3
 8016a90:	46bd      	mov	sp, r7
 8016a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a96:	4770      	bx	lr
 8016a98:	20008728 	.word	0x20008728

08016a9c <_Z41__static_initialization_and_destruction_0ii>:
    case 6:
        _fonts[6] = &(getFont_Asap_Bold_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 8016a9c:	b580      	push	{r7, lr}
 8016a9e:	b082      	sub	sp, #8
 8016aa0:	af00      	add	r7, sp, #0
 8016aa2:	6078      	str	r0, [r7, #4]
 8016aa4:	6039      	str	r1, [r7, #0]
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	2b01      	cmp	r3, #1
 8016aaa:	d127      	bne.n	8016afc <_Z41__static_initialization_and_destruction_0ii+0x60>
 8016aac:	683b      	ldr	r3, [r7, #0]
 8016aae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016ab2:	4293      	cmp	r3, r2
 8016ab4:	d122      	bne.n	8016afc <_Z41__static_initialization_and_destruction_0ii+0x60>
    &(getFont_Asap_Bold_18_4bpp()),
 8016ab6:	f7f9 fef9 	bl	80108ac <_Z25getFont_Asap_Bold_18_4bppv>
 8016aba:	4602      	mov	r2, r0
};
 8016abc:	4b11      	ldr	r3, [pc, #68]	; (8016b04 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8016abe:	601a      	str	r2, [r3, #0]
    &(getFont_Asap_Bold_40_4bpp()),
 8016ac0:	f7f9 ffba 	bl	8010a38 <_Z25getFont_Asap_Bold_40_4bppv>
 8016ac4:	4602      	mov	r2, r0
};
 8016ac6:	4b0f      	ldr	r3, [pc, #60]	; (8016b04 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8016ac8:	605a      	str	r2, [r3, #4]
    &(getFont_Asap_Bold_30_4bpp()),
 8016aca:	f7f9 ff73 	bl	80109b4 <_Z25getFont_Asap_Bold_30_4bppv>
 8016ace:	4602      	mov	r2, r0
};
 8016ad0:	4b0c      	ldr	r3, [pc, #48]	; (8016b04 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8016ad2:	609a      	str	r2, [r3, #8]
    &(getFont_Asap_Bold_12_4bpp()),
 8016ad4:	f7f9 fea8 	bl	8010828 <_Z25getFont_Asap_Bold_12_4bppv>
 8016ad8:	4602      	mov	r2, r0
};
 8016ada:	4b0a      	ldr	r3, [pc, #40]	; (8016b04 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8016adc:	60da      	str	r2, [r3, #12]
    &(getFont_Asap_Bold_60_4bpp()),
 8016ade:	f7f9 ffed 	bl	8010abc <_Z25getFont_Asap_Bold_60_4bppv>
 8016ae2:	4602      	mov	r2, r0
};
 8016ae4:	4b07      	ldr	r3, [pc, #28]	; (8016b04 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8016ae6:	611a      	str	r2, [r3, #16]
    &(getFont_Asap_Bold_21_4bpp()),
 8016ae8:	f7f9 ff22 	bl	8010930 <_Z25getFont_Asap_Bold_21_4bppv>
 8016aec:	4602      	mov	r2, r0
};
 8016aee:	4b05      	ldr	r3, [pc, #20]	; (8016b04 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8016af0:	615a      	str	r2, [r3, #20]
    &(getFont_Asap_Bold_10_4bpp())
 8016af2:	f7f9 fe57 	bl	80107a4 <_Z25getFont_Asap_Bold_10_4bppv>
 8016af6:	4602      	mov	r2, r0
};
 8016af8:	4b02      	ldr	r3, [pc, #8]	; (8016b04 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8016afa:	619a      	str	r2, [r3, #24]
}  // namespace TypedTextDatabase
 8016afc:	bf00      	nop
 8016afe:	3708      	adds	r7, #8
 8016b00:	46bd      	mov	sp, r7
 8016b02:	bd80      	pop	{r7, pc}
 8016b04:	20008728 	.word	0x20008728

08016b08 <_GLOBAL__sub_I__fonts>:
 8016b08:	b580      	push	{r7, lr}
 8016b0a:	af00      	add	r7, sp, #0
 8016b0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016b10:	2001      	movs	r0, #1
 8016b12:	f7ff ffc3 	bl	8016a9c <_Z41__static_initialization_and_destruction_0ii>
 8016b16:	bd80      	pop	{r7, pc}

08016b18 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8016b18:	b580      	push	{r7, lr}
 8016b1a:	b082      	sub	sp, #8
 8016b1c:	af00      	add	r7, sp, #0
 8016b1e:	6078      	str	r0, [r7, #4]
 8016b20:	4a05      	ldr	r2, [pc, #20]	; (8016b38 <_ZN19FrontendApplicationD1Ev+0x20>)
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	601a      	str	r2, [r3, #0]
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	4618      	mov	r0, r3
 8016b2a:	f7fa fa9f 	bl	801106c <_ZN23FrontendApplicationBaseD1Ev>
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	4618      	mov	r0, r3
 8016b32:	3708      	adds	r7, #8
 8016b34:	46bd      	mov	sp, r7
 8016b36:	bd80      	pop	{r7, pc}
 8016b38:	0802cdd0 	.word	0x0802cdd0

08016b3c <_ZN19FrontendApplicationD0Ev>:
 8016b3c:	b580      	push	{r7, lr}
 8016b3e:	b082      	sub	sp, #8
 8016b40:	af00      	add	r7, sp, #0
 8016b42:	6078      	str	r0, [r7, #4]
 8016b44:	6878      	ldr	r0, [r7, #4]
 8016b46:	f7ff ffe7 	bl	8016b18 <_ZN19FrontendApplicationD1Ev>
 8016b4a:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8016b4e:	6878      	ldr	r0, [r7, #4]
 8016b50:	f013 fdeb 	bl	802a72a <_ZdlPvj>
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	4618      	mov	r0, r3
 8016b58:	3708      	adds	r7, #8
 8016b5a:	46bd      	mov	sp, r7
 8016b5c:	bd80      	pop	{r7, pc}

08016b5e <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8016b5e:	b580      	push	{r7, lr}
 8016b60:	b082      	sub	sp, #8
 8016b62:	af00      	add	r7, sp, #0
 8016b64:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8016b6c:	4618      	mov	r0, r3
 8016b6e:	f000 fd7d 	bl	801766c <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	4618      	mov	r0, r3
 8016b76:	f007 fcef 	bl	801e558 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8016b7a:	bf00      	nop
 8016b7c:	3708      	adds	r7, #8
 8016b7e:	46bd      	mov	sp, r7
 8016b80:	bd80      	pop	{r7, pc}
	...

08016b84 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8016b84:	b580      	push	{r7, lr}
 8016b86:	b084      	sub	sp, #16
 8016b88:	af00      	add	r7, sp, #0
 8016b8a:	60f8      	str	r0, [r7, #12]
 8016b8c:	60b9      	str	r1, [r7, #8]
 8016b8e:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8016b90:	68fb      	ldr	r3, [r7, #12]
 8016b92:	687a      	ldr	r2, [r7, #4]
 8016b94:	68b9      	ldr	r1, [r7, #8]
 8016b96:	4618      	mov	r0, r3
 8016b98:	f7fa fae2 	bl	8011160 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8016b9c:	4a03      	ldr	r2, [pc, #12]	; (8016bac <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8016b9e:	68fb      	ldr	r3, [r7, #12]
 8016ba0:	601a      	str	r2, [r3, #0]
{
}
 8016ba2:	68fb      	ldr	r3, [r7, #12]
 8016ba4:	4618      	mov	r0, r3
 8016ba6:	3710      	adds	r7, #16
 8016ba8:	46bd      	mov	sp, r7
 8016baa:	bd80      	pop	{r7, pc}
 8016bac:	0802cdd0 	.word	0x0802cdd0

08016bb0 <_ZN8touchgfx9Presenter8activateEv>:
     * @brief Place initialization code for the Presenter here.
     *
     *        The activate function is called automatically when a screen transition causes
     *        this Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8016bb0:	b480      	push	{r7}
 8016bb2:	b083      	sub	sp, #12
 8016bb4:	af00      	add	r7, sp, #0
 8016bb6:	6078      	str	r0, [r7, #4]
    {
    }
 8016bb8:	bf00      	nop
 8016bba:	370c      	adds	r7, #12
 8016bbc:	46bd      	mov	sp, r7
 8016bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bc2:	4770      	bx	lr

08016bc4 <_ZN8touchgfx9Presenter10deactivateEv>:
     * @brief Place cleanup code for the Presenter here.
     *
     *        The deactivate function is called automatically when a screen transition causes
     *        this Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8016bc4:	b480      	push	{r7}
 8016bc6:	b083      	sub	sp, #12
 8016bc8:	af00      	add	r7, sp, #0
 8016bca:	6078      	str	r0, [r7, #4]
    {
    }
 8016bcc:	bf00      	nop
 8016bce:	370c      	adds	r7, #12
 8016bd0:	46bd      	mov	sp, r7
 8016bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bd6:	4770      	bx	lr

08016bd8 <_ZN8touchgfx9PresenterD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Presenter()
 8016bd8:	b480      	push	{r7}
 8016bda:	b083      	sub	sp, #12
 8016bdc:	af00      	add	r7, sp, #0
 8016bde:	6078      	str	r0, [r7, #4]
    {
 8016be0:	4a04      	ldr	r2, [pc, #16]	; (8016bf4 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	601a      	str	r2, [r3, #0]
    }
 8016be6:	687b      	ldr	r3, [r7, #4]
 8016be8:	4618      	mov	r0, r3
 8016bea:	370c      	adds	r7, #12
 8016bec:	46bd      	mov	sp, r7
 8016bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bf2:	4770      	bx	lr
 8016bf4:	0802ce5c 	.word	0x0802ce5c

08016bf8 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8016bf8:	b580      	push	{r7, lr}
 8016bfa:	b082      	sub	sp, #8
 8016bfc:	af00      	add	r7, sp, #0
 8016bfe:	6078      	str	r0, [r7, #4]
    }
 8016c00:	6878      	ldr	r0, [r7, #4]
 8016c02:	f7ff ffe9 	bl	8016bd8 <_ZN8touchgfx9PresenterD1Ev>
 8016c06:	2104      	movs	r1, #4
 8016c08:	6878      	ldr	r0, [r7, #4]
 8016c0a:	f013 fd8e 	bl	802a72a <_ZdlPvj>
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	4618      	mov	r0, r3
 8016c12:	3708      	adds	r7, #8
 8016c14:	46bd      	mov	sp, r7
 8016c16:	bd80      	pop	{r7, pc}

08016c18 <_ZN8touchgfx9PresenterC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Presenter()
 8016c18:	b480      	push	{r7}
 8016c1a:	b083      	sub	sp, #12
 8016c1c:	af00      	add	r7, sp, #0
 8016c1e:	6078      	str	r0, [r7, #4]
    {
 8016c20:	4a04      	ldr	r2, [pc, #16]	; (8016c34 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	601a      	str	r2, [r3, #0]
    }
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	4618      	mov	r0, r3
 8016c2a:	370c      	adds	r7, #12
 8016c2c:	46bd      	mov	sp, r7
 8016c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c32:	4770      	bx	lr
 8016c34:	0802ce5c 	.word	0x0802ce5c

08016c38 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8016c38:	b480      	push	{r7}
 8016c3a:	b083      	sub	sp, #12
 8016c3c:	af00      	add	r7, sp, #0
 8016c3e:	6078      	str	r0, [r7, #4]
 8016c40:	4a06      	ldr	r2, [pc, #24]	; (8016c5c <_ZN13ModelListenerC1Ev+0x24>)
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	601a      	str	r2, [r3, #0]
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	2200      	movs	r2, #0
 8016c4a:	605a      	str	r2, [r3, #4]
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	4618      	mov	r0, r3
 8016c50:	370c      	adds	r7, #12
 8016c52:	46bd      	mov	sp, r7
 8016c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c58:	4770      	bx	lr
 8016c5a:	bf00      	nop
 8016c5c:	0802ce44 	.word	0x0802ce44

08016c60 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8016c60:	b480      	push	{r7}
 8016c62:	b083      	sub	sp, #12
 8016c64:	af00      	add	r7, sp, #0
 8016c66:	6078      	str	r0, [r7, #4]
 8016c68:	4a04      	ldr	r2, [pc, #16]	; (8016c7c <_ZN13ModelListenerD1Ev+0x1c>)
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	601a      	str	r2, [r3, #0]
 8016c6e:	687b      	ldr	r3, [r7, #4]
 8016c70:	4618      	mov	r0, r3
 8016c72:	370c      	adds	r7, #12
 8016c74:	46bd      	mov	sp, r7
 8016c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c7a:	4770      	bx	lr
 8016c7c:	0802ce44 	.word	0x0802ce44

08016c80 <_ZN13ModelListenerD0Ev>:
 8016c80:	b580      	push	{r7, lr}
 8016c82:	b082      	sub	sp, #8
 8016c84:	af00      	add	r7, sp, #0
 8016c86:	6078      	str	r0, [r7, #4]
 8016c88:	6878      	ldr	r0, [r7, #4]
 8016c8a:	f7ff ffe9 	bl	8016c60 <_ZN13ModelListenerD1Ev>
 8016c8e:	2108      	movs	r1, #8
 8016c90:	6878      	ldr	r0, [r7, #4]
 8016c92:	f013 fd4a 	bl	802a72a <_ZdlPvj>
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	4618      	mov	r0, r3
 8016c9a:	3708      	adds	r7, #8
 8016c9c:	46bd      	mov	sp, r7
 8016c9e:	bd80      	pop	{r7, pc}

08016ca0 <_ZN13ModelListener11setNewValueEPh>:

    virtual void setNewValue(uint8_t* newValue){}
 8016ca0:	b480      	push	{r7}
 8016ca2:	b083      	sub	sp, #12
 8016ca4:	af00      	add	r7, sp, #0
 8016ca6:	6078      	str	r0, [r7, #4]
 8016ca8:	6039      	str	r1, [r7, #0]
 8016caa:	bf00      	nop
 8016cac:	370c      	adds	r7, #12
 8016cae:	46bd      	mov	sp, r7
 8016cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cb4:	4770      	bx	lr

08016cb6 <_ZN13ModelListener21updateDisplaySettingsEPh>:
    virtual void updateDisplaySettings(uint8_t* settings){}
 8016cb6:	b480      	push	{r7}
 8016cb8:	b083      	sub	sp, #12
 8016cba:	af00      	add	r7, sp, #0
 8016cbc:	6078      	str	r0, [r7, #4]
 8016cbe:	6039      	str	r1, [r7, #0]
 8016cc0:	bf00      	nop
 8016cc2:	370c      	adds	r7, #12
 8016cc4:	46bd      	mov	sp, r7
 8016cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cca:	4770      	bx	lr

08016ccc <_ZN13MainPresenterD1Ev>:
	 * The deactivate function is called automatically when this screen is "switched out"
	 * (ie. made inactive). Teardown functionality can be placed here.
	 */
	virtual void deactivate();

	virtual ~MainPresenter() {
 8016ccc:	b580      	push	{r7, lr}
 8016cce:	b082      	sub	sp, #8
 8016cd0:	af00      	add	r7, sp, #0
 8016cd2:	6078      	str	r0, [r7, #4]
 8016cd4:	4a09      	ldr	r2, [pc, #36]	; (8016cfc <_ZN13MainPresenterD1Ev+0x30>)
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	601a      	str	r2, [r3, #0]
 8016cda:	4a09      	ldr	r2, [pc, #36]	; (8016d00 <_ZN13MainPresenterD1Ev+0x34>)
 8016cdc:	687b      	ldr	r3, [r7, #4]
 8016cde:	605a      	str	r2, [r3, #4]
 8016ce0:	687b      	ldr	r3, [r7, #4]
 8016ce2:	3304      	adds	r3, #4
 8016ce4:	4618      	mov	r0, r3
 8016ce6:	f7ff ffbb 	bl	8016c60 <_ZN13ModelListenerD1Ev>
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	4618      	mov	r0, r3
 8016cee:	f7ff ff73 	bl	8016bd8 <_ZN8touchgfx9PresenterD1Ev>
	}
 8016cf2:	687b      	ldr	r3, [r7, #4]
 8016cf4:	4618      	mov	r0, r3
 8016cf6:	3708      	adds	r7, #8
 8016cf8:	46bd      	mov	sp, r7
 8016cfa:	bd80      	pop	{r7, pc}
 8016cfc:	0802ce0c 	.word	0x0802ce0c
 8016d00:	0802ce2c 	.word	0x0802ce2c

08016d04 <_ZThn4_N13MainPresenterD1Ev>:
	virtual ~MainPresenter() {
 8016d04:	f1a0 0004 	sub.w	r0, r0, #4
 8016d08:	e7e0      	b.n	8016ccc <_ZN13MainPresenterD1Ev>
 8016d0a:	bf00      	nop

08016d0c <_ZN13MainPresenterD0Ev>:
 8016d0c:	b580      	push	{r7, lr}
 8016d0e:	b082      	sub	sp, #8
 8016d10:	af00      	add	r7, sp, #0
 8016d12:	6078      	str	r0, [r7, #4]
	}
 8016d14:	6878      	ldr	r0, [r7, #4]
 8016d16:	f7ff ffd9 	bl	8016ccc <_ZN13MainPresenterD1Ev>
 8016d1a:	2110      	movs	r1, #16
 8016d1c:	6878      	ldr	r0, [r7, #4]
 8016d1e:	f013 fd04 	bl	802a72a <_ZdlPvj>
 8016d22:	687b      	ldr	r3, [r7, #4]
 8016d24:	4618      	mov	r0, r3
 8016d26:	3708      	adds	r7, #8
 8016d28:	46bd      	mov	sp, r7
 8016d2a:	bd80      	pop	{r7, pc}

08016d2c <_ZThn4_N13MainPresenterD0Ev>:
	virtual ~MainPresenter() {
 8016d2c:	f1a0 0004 	sub.w	r0, r0, #4
 8016d30:	e7ec      	b.n	8016d0c <_ZN13MainPresenterD0Ev>
	...

08016d34 <_ZN13MainPresenterC1ER8MainView>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

MainPresenter::MainPresenter(MainView& v)
 8016d34:	b580      	push	{r7, lr}
 8016d36:	b082      	sub	sp, #8
 8016d38:	af00      	add	r7, sp, #0
 8016d3a:	6078      	str	r0, [r7, #4]
 8016d3c:	6039      	str	r1, [r7, #0]
    : view(v)
 8016d3e:	687b      	ldr	r3, [r7, #4]
 8016d40:	4618      	mov	r0, r3
 8016d42:	f7ff ff69 	bl	8016c18 <_ZN8touchgfx9PresenterC1Ev>
 8016d46:	687b      	ldr	r3, [r7, #4]
 8016d48:	3304      	adds	r3, #4
 8016d4a:	4618      	mov	r0, r3
 8016d4c:	f7ff ff74 	bl	8016c38 <_ZN13ModelListenerC1Ev>
 8016d50:	4a06      	ldr	r2, [pc, #24]	; (8016d6c <_ZN13MainPresenterC1ER8MainView+0x38>)
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	601a      	str	r2, [r3, #0]
 8016d56:	4a06      	ldr	r2, [pc, #24]	; (8016d70 <_ZN13MainPresenterC1ER8MainView+0x3c>)
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	605a      	str	r2, [r3, #4]
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	683a      	ldr	r2, [r7, #0]
 8016d60:	60da      	str	r2, [r3, #12]
{
}
 8016d62:	687b      	ldr	r3, [r7, #4]
 8016d64:	4618      	mov	r0, r3
 8016d66:	3708      	adds	r7, #8
 8016d68:	46bd      	mov	sp, r7
 8016d6a:	bd80      	pop	{r7, pc}
 8016d6c:	0802ce0c 	.word	0x0802ce0c
 8016d70:	0802ce2c 	.word	0x0802ce2c

08016d74 <_ZN13MainPresenter8activateEv>:

void MainPresenter::activate()
{
 8016d74:	b580      	push	{r7, lr}
 8016d76:	b082      	sub	sp, #8
 8016d78:	af00      	add	r7, sp, #0
 8016d7a:	6078      	str	r0, [r7, #4]
	 model -> saveCurrentScreenIndex(1);
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	689b      	ldr	r3, [r3, #8]
 8016d80:	2101      	movs	r1, #1
 8016d82:	4618      	mov	r0, r3
 8016d84:	f000 fcb4 	bl	80176f0 <_ZN5Model22saveCurrentScreenIndexEi>
}
 8016d88:	bf00      	nop
 8016d8a:	3708      	adds	r7, #8
 8016d8c:	46bd      	mov	sp, r7
 8016d8e:	bd80      	pop	{r7, pc}

08016d90 <_ZN13MainPresenter10deactivateEv>:

void MainPresenter::deactivate()
{
 8016d90:	b480      	push	{r7}
 8016d92:	b083      	sub	sp, #12
 8016d94:	af00      	add	r7, sp, #0
 8016d96:	6078      	str	r0, [r7, #4]
}
 8016d98:	bf00      	nop
 8016d9a:	370c      	adds	r7, #12
 8016d9c:	46bd      	mov	sp, r7
 8016d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016da2:	4770      	bx	lr

08016da4 <_ZN13MainPresenter11setNewValueEPh>:

void MainPresenter::setNewValue(uint8_t* newValue)
{
 8016da4:	b580      	push	{r7, lr}
 8016da6:	b082      	sub	sp, #8
 8016da8:	af00      	add	r7, sp, #0
 8016daa:	6078      	str	r0, [r7, #4]
 8016dac:	6039      	str	r1, [r7, #0]
	view.updateVal(newValue);
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	68db      	ldr	r3, [r3, #12]
 8016db2:	6839      	ldr	r1, [r7, #0]
 8016db4:	4618      	mov	r0, r3
 8016db6:	f000 fa05 	bl	80171c4 <_ZN8MainView9updateValEPh>
}
 8016dba:	bf00      	nop
 8016dbc:	3708      	adds	r7, #8
 8016dbe:	46bd      	mov	sp, r7
 8016dc0:	bd80      	pop	{r7, pc}

08016dc2 <_ZThn4_N13MainPresenter11setNewValueEPh>:
	;

	void setNewValue(uint8_t *newValue);
 8016dc2:	f1a0 0004 	sub.w	r0, r0, #4
 8016dc6:	f7ff bfed 	b.w	8016da4 <_ZN13MainPresenter11setNewValueEPh>

08016dca <_ZN13MainPresenter21updateDisplaySettingsEPh>:

void MainPresenter::updateDisplaySettings(uint8_t* settings)
{
 8016dca:	b580      	push	{r7, lr}
 8016dcc:	b082      	sub	sp, #8
 8016dce:	af00      	add	r7, sp, #0
 8016dd0:	6078      	str	r0, [r7, #4]
 8016dd2:	6039      	str	r1, [r7, #0]
	view.updateSettings(settings);
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	68db      	ldr	r3, [r3, #12]
 8016dd8:	6839      	ldr	r1, [r7, #0]
 8016dda:	4618      	mov	r0, r3
 8016ddc:	f000 f916 	bl	801700c <_ZN8MainView14updateSettingsEPh>
}
 8016de0:	bf00      	nop
 8016de2:	3708      	adds	r7, #8
 8016de4:	46bd      	mov	sp, r7
 8016de6:	bd80      	pop	{r7, pc}

08016de8 <_ZThn4_N13MainPresenter21updateDisplaySettingsEPh>:
	void updateDisplaySettings(uint8_t *settings);
 8016de8:	f1a0 0004 	sub.w	r0, r0, #4
 8016dec:	f7ff bfed 	b.w	8016dca <_ZN13MainPresenter21updateDisplaySettingsEPh>

08016df0 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>:
     *          touchgfx::Unicode::snprintfFloats(dst, dstSize, tmpfmt, values);
     *          \endcode
     *
     * @see snprintf, snprintfFloats
     */
    static UnicodeChar* snprintfFloat(UnicodeChar* dst, uint16_t dstSize, const char* format, const float value)
 8016df0:	b580      	push	{r7, lr}
 8016df2:	b084      	sub	sp, #16
 8016df4:	af00      	add	r7, sp, #0
 8016df6:	60f8      	str	r0, [r7, #12]
 8016df8:	460b      	mov	r3, r1
 8016dfa:	607a      	str	r2, [r7, #4]
 8016dfc:	ed87 0a00 	vstr	s0, [r7]
 8016e00:	817b      	strh	r3, [r7, #10]
    {
        return snprintfFloats(dst, dstSize, format, &value);
 8016e02:	463b      	mov	r3, r7
 8016e04:	8979      	ldrh	r1, [r7, #10]
 8016e06:	687a      	ldr	r2, [r7, #4]
 8016e08:	68f8      	ldr	r0, [r7, #12]
 8016e0a:	f009 fe7b 	bl	8020b04 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
 8016e0e:	4603      	mov	r3, r0
    }
 8016e10:	4618      	mov	r0, r3
 8016e12:	3710      	adds	r7, #16
 8016e14:	46bd      	mov	sp, r7
 8016e16:	bd80      	pop	{r7, pc}

08016e18 <_ZNK8touchgfx8Drawable8getWidthEv>:
    int16_t getWidth() const
 8016e18:	b480      	push	{r7}
 8016e1a:	b083      	sub	sp, #12
 8016e1c:	af00      	add	r7, sp, #0
 8016e1e:	6078      	str	r0, [r7, #4]
        return rect.width;
 8016e20:	687b      	ldr	r3, [r7, #4]
 8016e22:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 8016e26:	4618      	mov	r0, r3
 8016e28:	370c      	adds	r7, #12
 8016e2a:	46bd      	mov	sp, r7
 8016e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e30:	4770      	bx	lr

08016e32 <_ZNK8touchgfx8Drawable9getHeightEv>:
    int16_t getHeight() const
 8016e32:	b480      	push	{r7}
 8016e34:	b083      	sub	sp, #12
 8016e36:	af00      	add	r7, sp, #0
 8016e38:	6078      	str	r0, [r7, #4]
        return rect.height;
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 8016e40:	4618      	mov	r0, r3
 8016e42:	370c      	adds	r7, #12
 8016e44:	46bd      	mov	sp, r7
 8016e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e4a:	4770      	bx	lr

08016e4c <_ZN13MainPresenter26getManualErrorChangeScreenEv>:

	bool getManualErrorChangeScreen() {
 8016e4c:	b580      	push	{r7, lr}
 8016e4e:	b082      	sub	sp, #8
 8016e50:	af00      	add	r7, sp, #0
 8016e52:	6078      	str	r0, [r7, #4]
		return model->getManualErrorChangeScreen();
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	689b      	ldr	r3, [r3, #8]
 8016e58:	4618      	mov	r0, r3
 8016e5a:	f000 fc69 	bl	8017730 <_ZN5Model26getManualErrorChangeScreenEv>
 8016e5e:	4603      	mov	r3, r0
	}
 8016e60:	4618      	mov	r0, r3
 8016e62:	3708      	adds	r7, #8
 8016e64:	46bd      	mov	sp, r7
 8016e66:	bd80      	pop	{r7, pc}

08016e68 <_ZN8MainViewD1Ev>:

class MainView : public MainViewBase
{
public:
    MainView();
    virtual ~MainView() {}
 8016e68:	b580      	push	{r7, lr}
 8016e6a:	b082      	sub	sp, #8
 8016e6c:	af00      	add	r7, sp, #0
 8016e6e:	6078      	str	r0, [r7, #4]
 8016e70:	4a05      	ldr	r2, [pc, #20]	; (8016e88 <_ZN8MainViewD1Ev+0x20>)
 8016e72:	687b      	ldr	r3, [r7, #4]
 8016e74:	601a      	str	r2, [r3, #0]
 8016e76:	687b      	ldr	r3, [r7, #4]
 8016e78:	4618      	mov	r0, r3
 8016e7a:	f7fc fb0f 	bl	801349c <_ZN12MainViewBaseD1Ev>
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	4618      	mov	r0, r3
 8016e82:	3708      	adds	r7, #8
 8016e84:	46bd      	mov	sp, r7
 8016e86:	bd80      	pop	{r7, pc}
 8016e88:	0802ce74 	.word	0x0802ce74

08016e8c <_ZN8MainViewD0Ev>:
 8016e8c:	b580      	push	{r7, lr}
 8016e8e:	b082      	sub	sp, #8
 8016e90:	af00      	add	r7, sp, #0
 8016e92:	6078      	str	r0, [r7, #4]
 8016e94:	6878      	ldr	r0, [r7, #4]
 8016e96:	f7ff ffe7 	bl	8016e68 <_ZN8MainViewD1Ev>
 8016e9a:	f642 0144 	movw	r1, #10308	; 0x2844
 8016e9e:	6878      	ldr	r0, [r7, #4]
 8016ea0:	f013 fc43 	bl	802a72a <_ZdlPvj>
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	4618      	mov	r0, r3
 8016ea8:	3708      	adds	r7, #8
 8016eaa:	46bd      	mov	sp, r7
 8016eac:	bd80      	pop	{r7, pc}
	...

08016eb0 <_ZN8MainViewC1Ev>:
static int prev_egt = 0;
static int prev_egt_2 = 0;
static int prev_tps = 0;
static float prev_batt_v = 0;

MainView::MainView() {
 8016eb0:	b590      	push	{r4, r7, lr}
 8016eb2:	b083      	sub	sp, #12
 8016eb4:	af00      	add	r7, sp, #0
 8016eb6:	6078      	str	r0, [r7, #4]
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	4618      	mov	r0, r3
 8016ebc:	f7fc fc50 	bl	8013760 <_ZN12MainViewBaseC1Ev>
 8016ec0:	4a15      	ldr	r2, [pc, #84]	; (8016f18 <_ZN8MainViewC1Ev+0x68>)
 8016ec2:	687b      	ldr	r3, [r7, #4]
 8016ec4:	601a      	str	r2, [r3, #0]
	// Support of larger displays for this example
	// is handled by showing a black box in the
	// unused part of the display.
	if (HAL::DISPLAY_WIDTH > backgroundImage.getWidth()
 8016ec6:	4b15      	ldr	r3, [pc, #84]	; (8016f1c <_ZN8MainViewC1Ev+0x6c>)
 8016ec8:	881b      	ldrh	r3, [r3, #0]
 8016eca:	461c      	mov	r4, r3
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8016ed2:	4618      	mov	r0, r3
 8016ed4:	f7ff ffa0 	bl	8016e18 <_ZNK8touchgfx8Drawable8getWidthEv>
 8016ed8:	4603      	mov	r3, r0
			|| HAL::DISPLAY_HEIGHT > backgroundImage.getHeight()) {
 8016eda:	429c      	cmp	r4, r3
 8016edc:	dc0b      	bgt.n	8016ef6 <_ZN8MainViewC1Ev+0x46>
 8016ede:	4b10      	ldr	r3, [pc, #64]	; (8016f20 <_ZN8MainViewC1Ev+0x70>)
 8016ee0:	881b      	ldrh	r3, [r3, #0]
 8016ee2:	461c      	mov	r4, r3
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8016eea:	4618      	mov	r0, r3
 8016eec:	f7ff ffa1 	bl	8016e32 <_ZNK8touchgfx8Drawable9getHeightEv>
 8016ef0:	4603      	mov	r3, r0
 8016ef2:	429c      	cmp	r4, r3
 8016ef4:	dd01      	ble.n	8016efa <_ZN8MainViewC1Ev+0x4a>
 8016ef6:	2301      	movs	r3, #1
 8016ef8:	e000      	b.n	8016efc <_ZN8MainViewC1Ev+0x4c>
 8016efa:	2300      	movs	r3, #0
	if (HAL::DISPLAY_WIDTH > backgroundImage.getWidth()
 8016efc:	2b00      	cmp	r3, #0
 8016efe:	d005      	beq.n	8016f0c <_ZN8MainViewC1Ev+0x5c>
		backgroundBox.setVisible(true);
 8016f00:	687b      	ldr	r3, [r7, #4]
 8016f02:	3340      	adds	r3, #64	; 0x40
 8016f04:	2101      	movs	r1, #1
 8016f06:	4618      	mov	r0, r3
 8016f08:	f7fb fd2d 	bl	8012966 <_ZN8touchgfx8Drawable10setVisibleEb>
	}
}
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	4618      	mov	r0, r3
 8016f10:	370c      	adds	r7, #12
 8016f12:	46bd      	mov	sp, r7
 8016f14:	bd90      	pop	{r4, r7, pc}
 8016f16:	bf00      	nop
 8016f18:	0802ce74 	.word	0x0802ce74
 8016f1c:	2000bf5a 	.word	0x2000bf5a
 8016f20:	2000bf5c 	.word	0x2000bf5c

08016f24 <_ZN8MainView11setupScreenEv>:

void MainView::setupScreen() {
 8016f24:	b480      	push	{r7}
 8016f26:	b083      	sub	sp, #12
 8016f28:	af00      	add	r7, sp, #0
 8016f2a:	6078      	str	r0, [r7, #4]
}
 8016f2c:	bf00      	nop
 8016f2e:	370c      	adds	r7, #12
 8016f30:	46bd      	mov	sp, r7
 8016f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f36:	4770      	bx	lr

08016f38 <_ZN8MainView14tearDownScreenEv>:

void MainView::tearDownScreen() {
 8016f38:	b480      	push	{r7}
 8016f3a:	b083      	sub	sp, #12
 8016f3c:	af00      	add	r7, sp, #0
 8016f3e:	6078      	str	r0, [r7, #4]
}
 8016f40:	bf00      	nop
 8016f42:	370c      	adds	r7, #12
 8016f44:	46bd      	mov	sp, r7
 8016f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f4a:	4770      	bx	lr

08016f4c <_ZL11getRedColorv>:

static colortype getRedColor() {
 8016f4c:	b580      	push	{r7, lr}
 8016f4e:	b082      	sub	sp, #8
 8016f50:	af00      	add	r7, sp, #0
	colortype black_color = touchgfx::Color::getColorFrom24BitRGB(255, 0, 0);
 8016f52:	2200      	movs	r2, #0
 8016f54:	2100      	movs	r1, #0
 8016f56:	20ff      	movs	r0, #255	; 0xff
 8016f58:	f7fc fbd8 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8016f5c:	4603      	mov	r3, r0
 8016f5e:	607b      	str	r3, [r7, #4]
	return black_color;
 8016f60:	687b      	ldr	r3, [r7, #4]
}
 8016f62:	4618      	mov	r0, r3
 8016f64:	3708      	adds	r7, #8
 8016f66:	46bd      	mov	sp, r7
 8016f68:	bd80      	pop	{r7, pc}

08016f6a <_ZL13getBlackColorv>:

static colortype getBlackColor() {
 8016f6a:	b580      	push	{r7, lr}
 8016f6c:	b082      	sub	sp, #8
 8016f6e:	af00      	add	r7, sp, #0
	colortype black_color = touchgfx::Color::getColorFrom24BitRGB(0, 0, 0);
 8016f70:	2200      	movs	r2, #0
 8016f72:	2100      	movs	r1, #0
 8016f74:	2000      	movs	r0, #0
 8016f76:	f7fc fbc9 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8016f7a:	4603      	mov	r3, r0
 8016f7c:	607b      	str	r3, [r7, #4]
	return black_color;
 8016f7e:	687b      	ldr	r3, [r7, #4]
}
 8016f80:	4618      	mov	r0, r3
 8016f82:	3708      	adds	r7, #8
 8016f84:	46bd      	mov	sp, r7
 8016f86:	bd80      	pop	{r7, pc}

08016f88 <_ZL20getColorFromRevLimitv>:

static colortype getColorFromRevLimit() {
 8016f88:	b580      	push	{r7, lr}
 8016f8a:	b084      	sub	sp, #16
 8016f8c:	af00      	add	r7, sp, #0

	color_index++;
 8016f8e:	4b1e      	ldr	r3, [pc, #120]	; (8017008 <_ZL20getColorFromRevLimitv+0x80>)
 8016f90:	681b      	ldr	r3, [r3, #0]
 8016f92:	3301      	adds	r3, #1
 8016f94:	4a1c      	ldr	r2, [pc, #112]	; (8017008 <_ZL20getColorFromRevLimitv+0x80>)
 8016f96:	6013      	str	r3, [r2, #0]
	if (color_index >= 3) {
 8016f98:	4b1b      	ldr	r3, [pc, #108]	; (8017008 <_ZL20getColorFromRevLimitv+0x80>)
 8016f9a:	681b      	ldr	r3, [r3, #0]
 8016f9c:	2b02      	cmp	r3, #2
 8016f9e:	dd02      	ble.n	8016fa6 <_ZL20getColorFromRevLimitv+0x1e>
		color_index = 0;
 8016fa0:	4b19      	ldr	r3, [pc, #100]	; (8017008 <_ZL20getColorFromRevLimitv+0x80>)
 8016fa2:	2200      	movs	r2, #0
 8016fa4:	601a      	str	r2, [r3, #0]
	}

	colortype red_color = touchgfx::Color::getColorFrom24BitRGB(255, 0, 0);
 8016fa6:	2200      	movs	r2, #0
 8016fa8:	2100      	movs	r1, #0
 8016faa:	20ff      	movs	r0, #255	; 0xff
 8016fac:	f7fc fbae 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8016fb0:	4603      	mov	r3, r0
 8016fb2:	60fb      	str	r3, [r7, #12]
	colortype black_color = touchgfx::Color::getColorFrom24BitRGB(0, 0, 0);
 8016fb4:	2200      	movs	r2, #0
 8016fb6:	2100      	movs	r1, #0
 8016fb8:	2000      	movs	r0, #0
 8016fba:	f7fc fba7 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8016fbe:	4603      	mov	r3, r0
 8016fc0:	60bb      	str	r3, [r7, #8]
	colortype white_color = touchgfx::Color::getColorFrom24BitRGB(255, 255,
			255);
 8016fc2:	22ff      	movs	r2, #255	; 0xff
 8016fc4:	21ff      	movs	r1, #255	; 0xff
 8016fc6:	20ff      	movs	r0, #255	; 0xff
 8016fc8:	f7fc fba0 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8016fcc:	4603      	mov	r3, r0
 8016fce:	607b      	str	r3, [r7, #4]

	colortype color_to_set;
 8016fd0:	463b      	mov	r3, r7
 8016fd2:	4618      	mov	r0, r3
 8016fd4:	f7fb fb79 	bl	80126ca <_ZN8touchgfx9colortypeC1Ev>

	if (color_index == 0) {
 8016fd8:	4b0b      	ldr	r3, [pc, #44]	; (8017008 <_ZL20getColorFromRevLimitv+0x80>)
 8016fda:	681b      	ldr	r3, [r3, #0]
 8016fdc:	2b00      	cmp	r3, #0
 8016fde:	d101      	bne.n	8016fe4 <_ZL20getColorFromRevLimitv+0x5c>
		color_to_set = red_color;
 8016fe0:	68fb      	ldr	r3, [r7, #12]
 8016fe2:	603b      	str	r3, [r7, #0]
	}
	if (color_index == 1) {
 8016fe4:	4b08      	ldr	r3, [pc, #32]	; (8017008 <_ZL20getColorFromRevLimitv+0x80>)
 8016fe6:	681b      	ldr	r3, [r3, #0]
 8016fe8:	2b01      	cmp	r3, #1
 8016fea:	d101      	bne.n	8016ff0 <_ZL20getColorFromRevLimitv+0x68>
		color_to_set = black_color;
 8016fec:	68bb      	ldr	r3, [r7, #8]
 8016fee:	603b      	str	r3, [r7, #0]
	}
	if (color_index == 2) {
 8016ff0:	4b05      	ldr	r3, [pc, #20]	; (8017008 <_ZL20getColorFromRevLimitv+0x80>)
 8016ff2:	681b      	ldr	r3, [r3, #0]
 8016ff4:	2b02      	cmp	r3, #2
 8016ff6:	d101      	bne.n	8016ffc <_ZL20getColorFromRevLimitv+0x74>
		color_to_set = white_color;
 8016ff8:	687b      	ldr	r3, [r7, #4]
 8016ffa:	603b      	str	r3, [r7, #0]
	}

	return color_to_set;
 8016ffc:	683b      	ldr	r3, [r7, #0]
}
 8016ffe:	4618      	mov	r0, r3
 8017000:	3710      	adds	r7, #16
 8017002:	46bd      	mov	sp, r7
 8017004:	bd80      	pop	{r7, pc}
 8017006:	bf00      	nop
 8017008:	20008744 	.word	0x20008744

0801700c <_ZN8MainView14updateSettingsEPh>:

void MainView::updateSettings(uint8_t *settings) {
 801700c:	b580      	push	{r7, lr}
 801700e:	b086      	sub	sp, #24
 8017010:	af02      	add	r7, sp, #8
 8017012:	6078      	str	r0, [r7, #4]
 8017014:	6039      	str	r1, [r7, #0]
	settings_message *new_settings = (settings_message*) settings;
 8017016:	683b      	ldr	r3, [r7, #0]
 8017018:	60fb      	str	r3, [r7, #12]

	rev_limit = (int) new_settings->rpm_limit;
 801701a:	68fb      	ldr	r3, [r7, #12]
 801701c:	681b      	ldr	r3, [r3, #0]
 801701e:	4a66      	ldr	r2, [pc, #408]	; (80171b8 <_ZN8MainView14updateSettingsEPh+0x1ac>)
 8017020:	6013      	str	r3, [r2, #0]

	RPMProgressBar.setRange(0, (int) (new_settings->rpm8 * 1000.0f), 0, 0);
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	f603 001c 	addw	r0, r3, #2076	; 0x81c
 8017028:	68fb      	ldr	r3, [r7, #12]
 801702a:	6a1b      	ldr	r3, [r3, #32]
 801702c:	ee07 3a90 	vmov	s15, r3
 8017030:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017034:	ed9f 7a61 	vldr	s14, [pc, #388]	; 80171bc <_ZN8MainView14updateSettingsEPh+0x1b0>
 8017038:	ee67 7a87 	vmul.f32	s15, s15, s14
 801703c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017040:	ee17 3a90 	vmov	r3, s15
 8017044:	b21a      	sxth	r2, r3
 8017046:	2300      	movs	r3, #0
 8017048:	9300      	str	r3, [sp, #0]
 801704a:	2300      	movs	r3, #0
 801704c:	2100      	movs	r1, #0
 801704e:	f003 feb5 	bl	801adbc <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
	RPMProgressBar.invalidate();
 8017052:	687b      	ldr	r3, [r7, #4]
 8017054:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8017058:	4618      	mov	r0, r3
 801705a:	f007 ff91 	bl	801ef80 <_ZNK8touchgfx8Drawable10invalidateEv>

	Unicode::snprintf(rpm1Buffer, RPM1_SIZE, "%d", new_settings->rpm1);
 801705e:	687b      	ldr	r3, [r7, #4]
 8017060:	f603 3084 	addw	r0, r3, #2948	; 0xb84
 8017064:	68fb      	ldr	r3, [r7, #12]
 8017066:	685b      	ldr	r3, [r3, #4]
 8017068:	4a55      	ldr	r2, [pc, #340]	; (80171c0 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 801706a:	2102      	movs	r1, #2
 801706c:	f009 fbf0 	bl	8020850 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm1.resizeToCurrentText();
 8017070:	687b      	ldr	r3, [r7, #4]
 8017072:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8017076:	4618      	mov	r0, r3
 8017078:	f005 fec2 	bl	801ce00 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm1.invalidate();
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8017082:	4618      	mov	r0, r3
 8017084:	f007 ff7c 	bl	801ef80 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm2Buffer, RPM2_SIZE, "%d", new_settings->rpm2);
 8017088:	687b      	ldr	r3, [r7, #4]
 801708a:	f603 3088 	addw	r0, r3, #2952	; 0xb88
 801708e:	68fb      	ldr	r3, [r7, #12]
 8017090:	689b      	ldr	r3, [r3, #8]
 8017092:	4a4b      	ldr	r2, [pc, #300]	; (80171c0 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8017094:	2102      	movs	r1, #2
 8017096:	f009 fbdb 	bl	8020850 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm2.resizeToCurrentText();
 801709a:	687b      	ldr	r3, [r7, #4]
 801709c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80170a0:	4618      	mov	r0, r3
 80170a2:	f005 fead 	bl	801ce00 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm2.invalidate();
 80170a6:	687b      	ldr	r3, [r7, #4]
 80170a8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80170ac:	4618      	mov	r0, r3
 80170ae:	f007 ff67 	bl	801ef80 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm3Buffer, RPM3_SIZE, "%d", new_settings->rpm3);
 80170b2:	687b      	ldr	r3, [r7, #4]
 80170b4:	f603 308c 	addw	r0, r3, #2956	; 0xb8c
 80170b8:	68fb      	ldr	r3, [r7, #12]
 80170ba:	68db      	ldr	r3, [r3, #12]
 80170bc:	4a40      	ldr	r2, [pc, #256]	; (80171c0 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 80170be:	2102      	movs	r1, #2
 80170c0:	f009 fbc6 	bl	8020850 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm3.resizeToCurrentText();
 80170c4:	687b      	ldr	r3, [r7, #4]
 80170c6:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80170ca:	4618      	mov	r0, r3
 80170cc:	f005 fe98 	bl	801ce00 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm3.invalidate();
 80170d0:	687b      	ldr	r3, [r7, #4]
 80170d2:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80170d6:	4618      	mov	r0, r3
 80170d8:	f007 ff52 	bl	801ef80 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm4Buffer, RPM4_SIZE, "%d", new_settings->rpm4);
 80170dc:	687b      	ldr	r3, [r7, #4]
 80170de:	f503 6039 	add.w	r0, r3, #2960	; 0xb90
 80170e2:	68fb      	ldr	r3, [r7, #12]
 80170e4:	691b      	ldr	r3, [r3, #16]
 80170e6:	4a36      	ldr	r2, [pc, #216]	; (80171c0 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 80170e8:	2102      	movs	r1, #2
 80170ea:	f009 fbb1 	bl	8020850 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm4.resizeToCurrentText();
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80170f4:	4618      	mov	r0, r3
 80170f6:	f005 fe83 	bl	801ce00 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm4.invalidate();
 80170fa:	687b      	ldr	r3, [r7, #4]
 80170fc:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8017100:	4618      	mov	r0, r3
 8017102:	f007 ff3d 	bl	801ef80 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm5Buffer, RPM5_SIZE, "%d", new_settings->rpm5);
 8017106:	687b      	ldr	r3, [r7, #4]
 8017108:	f603 3094 	addw	r0, r3, #2964	; 0xb94
 801710c:	68fb      	ldr	r3, [r7, #12]
 801710e:	695b      	ldr	r3, [r3, #20]
 8017110:	4a2b      	ldr	r2, [pc, #172]	; (80171c0 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8017112:	2102      	movs	r1, #2
 8017114:	f009 fb9c 	bl	8020850 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm5.resizeToCurrentText();
 8017118:	687b      	ldr	r3, [r7, #4]
 801711a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 801711e:	4618      	mov	r0, r3
 8017120:	f005 fe6e 	bl	801ce00 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm5.invalidate();
 8017124:	687b      	ldr	r3, [r7, #4]
 8017126:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 801712a:	4618      	mov	r0, r3
 801712c:	f007 ff28 	bl	801ef80 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm6Buffer, RPM6_SIZE, "%d", new_settings->rpm6);
 8017130:	687b      	ldr	r3, [r7, #4]
 8017132:	f603 3098 	addw	r0, r3, #2968	; 0xb98
 8017136:	68fb      	ldr	r3, [r7, #12]
 8017138:	699b      	ldr	r3, [r3, #24]
 801713a:	4a21      	ldr	r2, [pc, #132]	; (80171c0 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 801713c:	2102      	movs	r1, #2
 801713e:	f009 fb87 	bl	8020850 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm6.resizeToCurrentText();
 8017142:	687b      	ldr	r3, [r7, #4]
 8017144:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8017148:	4618      	mov	r0, r3
 801714a:	f005 fe59 	bl	801ce00 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm6.invalidate();
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8017154:	4618      	mov	r0, r3
 8017156:	f007 ff13 	bl	801ef80 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm7Buffer, RPM7_SIZE, "%d", new_settings->rpm7);
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	f603 309c 	addw	r0, r3, #2972	; 0xb9c
 8017160:	68fb      	ldr	r3, [r7, #12]
 8017162:	69db      	ldr	r3, [r3, #28]
 8017164:	4a16      	ldr	r2, [pc, #88]	; (80171c0 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8017166:	2102      	movs	r1, #2
 8017168:	f009 fb72 	bl	8020850 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm7.resizeToCurrentText();
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8017172:	4618      	mov	r0, r3
 8017174:	f005 fe44 	bl	801ce00 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm7.invalidate();
 8017178:	687b      	ldr	r3, [r7, #4]
 801717a:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 801717e:	4618      	mov	r0, r3
 8017180:	f007 fefe 	bl	801ef80 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(rpm8Buffer, RPM8_SIZE, "%d", new_settings->rpm8);
 8017184:	687b      	ldr	r3, [r7, #4]
 8017186:	f503 603a 	add.w	r0, r3, #2976	; 0xba0
 801718a:	68fb      	ldr	r3, [r7, #12]
 801718c:	6a1b      	ldr	r3, [r3, #32]
 801718e:	4a0c      	ldr	r2, [pc, #48]	; (80171c0 <_ZN8MainView14updateSettingsEPh+0x1b4>)
 8017190:	2102      	movs	r1, #2
 8017192:	f009 fb5d 	bl	8020850 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	rpm8.resizeToCurrentText();
 8017196:	687b      	ldr	r3, [r7, #4]
 8017198:	f503 7359 	add.w	r3, r3, #868	; 0x364
 801719c:	4618      	mov	r0, r3
 801719e:	f005 fe2f 	bl	801ce00 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	rpm8.invalidate();
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	f503 7359 	add.w	r3, r3, #868	; 0x364
 80171a8:	4618      	mov	r0, r3
 80171aa:	f007 fee9 	bl	801ef80 <_ZNK8touchgfx8Drawable10invalidateEv>

}
 80171ae:	bf00      	nop
 80171b0:	3710      	adds	r7, #16
 80171b2:	46bd      	mov	sp, r7
 80171b4:	bd80      	pop	{r7, pc}
 80171b6:	bf00      	nop
 80171b8:	20000038 	.word	0x20000038
 80171bc:	447a0000 	.word	0x447a0000
 80171c0:	0802bf70 	.word	0x0802bf70

080171c4 <_ZN8MainView9updateValEPh>:

void MainView::updateVal(uint8_t *newValue) {
 80171c4:	b590      	push	{r4, r7, lr}
 80171c6:	b085      	sub	sp, #20
 80171c8:	af00      	add	r7, sp, #0
 80171ca:	6078      	str	r0, [r7, #4]
 80171cc:	6039      	str	r1, [r7, #0]
	static bool background_is_black = false;
	display_values *values = (display_values*) newValue;
 80171ce:	683b      	ldr	r3, [r7, #0]
 80171d0:	60fb      	str	r3, [r7, #12]

	bool on_rev_limiter = values->rpm >= rev_limit;
 80171d2:	68fb      	ldr	r3, [r7, #12]
 80171d4:	681a      	ldr	r2, [r3, #0]
 80171d6:	4b22      	ldr	r3, [pc, #136]	; (8017260 <_ZN8MainView9updateValEPh+0x9c>)
 80171d8:	681b      	ldr	r3, [r3, #0]
 80171da:	429a      	cmp	r2, r3
 80171dc:	bfac      	ite	ge
 80171de:	2301      	movge	r3, #1
 80171e0:	2300      	movlt	r3, #0
 80171e2:	72fb      	strb	r3, [r7, #11]
	bool has_error = ((int) values->emu_errors) > 0 || ((int) values->emu_protection) > 0
 80171e4:	68fb      	ldr	r3, [r7, #12]
 80171e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			|| ((int) values->check_eng_code) > 0 || ((int) values->eng_protection_code) > 0;
 80171e8:	2b00      	cmp	r3, #0
 80171ea:	dc0b      	bgt.n	8017204 <_ZN8MainView9updateValEPh+0x40>
	bool has_error = ((int) values->emu_errors) > 0 || ((int) values->emu_protection) > 0
 80171ec:	68fb      	ldr	r3, [r7, #12]
 80171ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80171f0:	2b00      	cmp	r3, #0
 80171f2:	dc07      	bgt.n	8017204 <_ZN8MainView9updateValEPh+0x40>
			|| ((int) values->check_eng_code) > 0 || ((int) values->eng_protection_code) > 0;
 80171f4:	68fb      	ldr	r3, [r7, #12]
 80171f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	dc03      	bgt.n	8017204 <_ZN8MainView9updateValEPh+0x40>
 80171fc:	68fb      	ldr	r3, [r7, #12]
 80171fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017200:	2b00      	cmp	r3, #0
 8017202:	dd01      	ble.n	8017208 <_ZN8MainView9updateValEPh+0x44>
 8017204:	2301      	movs	r3, #1
 8017206:	e000      	b.n	801720a <_ZN8MainView9updateValEPh+0x46>
 8017208:	2300      	movs	r3, #0
	bool has_error = ((int) values->emu_errors) > 0 || ((int) values->emu_protection) > 0
 801720a:	72bb      	strb	r3, [r7, #10]
	if (has_error) {
 801720c:	7abb      	ldrb	r3, [r7, #10]
 801720e:	2b00      	cmp	r3, #0
 8017210:	d00f      	beq.n	8017232 <_ZN8MainView9updateValEPh+0x6e>
		backgroundBox.setColor(getRedColor());
 8017212:	687b      	ldr	r3, [r7, #4]
 8017214:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8017218:	f7ff fe98 	bl	8016f4c <_ZL11getRedColorv>
 801721c:	4603      	mov	r3, r0
 801721e:	4619      	mov	r1, r3
 8017220:	4620      	mov	r0, r4
 8017222:	f7fb fd61 	bl	8012ce8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		backgroundBox.invalidate();
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	3340      	adds	r3, #64	; 0x40
 801722a:	4618      	mov	r0, r3
 801722c:	f007 fea8 	bl	801ef80 <_ZNK8touchgfx8Drawable10invalidateEv>
 8017230:	e033      	b.n	801729a <_ZN8MainView9updateValEPh+0xd6>
	} else if (on_rev_limiter) {
 8017232:	7afb      	ldrb	r3, [r7, #11]
 8017234:	2b00      	cmp	r3, #0
 8017236:	d017      	beq.n	8017268 <_ZN8MainView9updateValEPh+0xa4>
		background_is_black = false;
 8017238:	4b0a      	ldr	r3, [pc, #40]	; (8017264 <_ZN8MainView9updateValEPh+0xa0>)
 801723a:	2200      	movs	r2, #0
 801723c:	701a      	strb	r2, [r3, #0]
		backgroundBox.setColor(getColorFromRevLimit());
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8017244:	f7ff fea0 	bl	8016f88 <_ZL20getColorFromRevLimitv>
 8017248:	4603      	mov	r3, r0
 801724a:	4619      	mov	r1, r3
 801724c:	4620      	mov	r0, r4
 801724e:	f7fb fd4b 	bl	8012ce8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		backgroundBox.invalidate();
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	3340      	adds	r3, #64	; 0x40
 8017256:	4618      	mov	r0, r3
 8017258:	f007 fe92 	bl	801ef80 <_ZNK8touchgfx8Drawable10invalidateEv>
 801725c:	e01d      	b.n	801729a <_ZN8MainView9updateValEPh+0xd6>
 801725e:	bf00      	nop
 8017260:	20000038 	.word	0x20000038
 8017264:	20008768 	.word	0x20008768
	} else if (!background_is_black) {
 8017268:	4bac      	ldr	r3, [pc, #688]	; (801751c <_ZN8MainView9updateValEPh+0x358>)
 801726a:	781b      	ldrb	r3, [r3, #0]
 801726c:	f083 0301 	eor.w	r3, r3, #1
 8017270:	b2db      	uxtb	r3, r3
 8017272:	2b00      	cmp	r3, #0
 8017274:	d011      	beq.n	801729a <_ZN8MainView9updateValEPh+0xd6>
		backgroundBox.setColor(getBlackColor());
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	f103 0440 	add.w	r4, r3, #64	; 0x40
 801727c:	f7ff fe75 	bl	8016f6a <_ZL13getBlackColorv>
 8017280:	4603      	mov	r3, r0
 8017282:	4619      	mov	r1, r3
 8017284:	4620      	mov	r0, r4
 8017286:	f7fb fd2f 	bl	8012ce8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		backgroundBox.invalidate();
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	3340      	adds	r3, #64	; 0x40
 801728e:	4618      	mov	r0, r3
 8017290:	f007 fe76 	bl	801ef80 <_ZNK8touchgfx8Drawable10invalidateEv>
		background_is_black = true;
 8017294:	4ba1      	ldr	r3, [pc, #644]	; (801751c <_ZN8MainView9updateValEPh+0x358>)
 8017296:	2201      	movs	r2, #1
 8017298:	701a      	strb	r2, [r3, #0]
	}

	if (values->rpm != prev_rpm) {
 801729a:	68fb      	ldr	r3, [r7, #12]
 801729c:	681a      	ldr	r2, [r3, #0]
 801729e:	4ba0      	ldr	r3, [pc, #640]	; (8017520 <_ZN8MainView9updateValEPh+0x35c>)
 80172a0:	681b      	ldr	r3, [r3, #0]
 80172a2:	429a      	cmp	r2, r3
 80172a4:	d021      	beq.n	80172ea <_ZN8MainView9updateValEPh+0x126>
		prev_rpm = values->rpm;
 80172a6:	68fb      	ldr	r3, [r7, #12]
 80172a8:	681b      	ldr	r3, [r3, #0]
 80172aa:	4a9d      	ldr	r2, [pc, #628]	; (8017520 <_ZN8MainView9updateValEPh+0x35c>)
 80172ac:	6013      	str	r3, [r2, #0]
		RPMProgressBar.setValue(values->rpm);
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	f603 021c 	addw	r2, r3, #2076	; 0x81c
 80172b4:	68fb      	ldr	r3, [r7, #12]
 80172b6:	681b      	ldr	r3, [r3, #0]
 80172b8:	4619      	mov	r1, r3
 80172ba:	4610      	mov	r0, r2
 80172bc:	f003 fc68 	bl	801ab90 <_ZN8touchgfx13ImageProgress8setValueEi>
		RPMProgressBar.invalidate();
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 80172c6:	4618      	mov	r0, r3
 80172c8:	f007 fe5a 	bl	801ef80 <_ZNK8touchgfx8Drawable10invalidateEv>

		Unicode::snprintf(RPMValueBuffer, RPMVALUE_SIZE, "%d", values->rpm);
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	f603 30d6 	addw	r0, r3, #3030	; 0xbd6
 80172d2:	68fb      	ldr	r3, [r7, #12]
 80172d4:	681b      	ldr	r3, [r3, #0]
 80172d6:	4a93      	ldr	r2, [pc, #588]	; (8017524 <_ZN8MainView9updateValEPh+0x360>)
 80172d8:	2105      	movs	r1, #5
 80172da:	f009 fab9 	bl	8020850 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		RPMValue.invalidate();
 80172de:	687b      	ldr	r3, [r7, #4]
 80172e0:	f603 130c 	addw	r3, r3, #2316	; 0x90c
 80172e4:	4618      	mov	r0, r3
 80172e6:	f007 fe4b 	bl	801ef80 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->map != prev_map) {
 80172ea:	68fb      	ldr	r3, [r7, #12]
 80172ec:	689a      	ldr	r2, [r3, #8]
 80172ee:	4b8e      	ldr	r3, [pc, #568]	; (8017528 <_ZN8MainView9updateValEPh+0x364>)
 80172f0:	681b      	ldr	r3, [r3, #0]
 80172f2:	429a      	cmp	r2, r3
 80172f4:	d012      	beq.n	801731c <_ZN8MainView9updateValEPh+0x158>
		prev_map = values->map;
 80172f6:	68fb      	ldr	r3, [r7, #12]
 80172f8:	689b      	ldr	r3, [r3, #8]
 80172fa:	4a8b      	ldr	r2, [pc, #556]	; (8017528 <_ZN8MainView9updateValEPh+0x364>)
 80172fc:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(MAPValueBuffer, MAPVALUE_SIZE, "%d", values->map);
 80172fe:	687b      	ldr	r3, [r7, #4]
 8017300:	f603 30ea 	addw	r0, r3, #3050	; 0xbea
 8017304:	68fb      	ldr	r3, [r7, #12]
 8017306:	689b      	ldr	r3, [r3, #8]
 8017308:	4a86      	ldr	r2, [pc, #536]	; (8017524 <_ZN8MainView9updateValEPh+0x360>)
 801730a:	2105      	movs	r1, #5
 801730c:	f009 faa0 	bl	8020850 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		MAPValue.invalidate();
 8017310:	687b      	ldr	r3, [r7, #4]
 8017312:	f503 631b 	add.w	r3, r3, #2480	; 0x9b0
 8017316:	4618      	mov	r0, r3
 8017318:	f007 fe32 	bl	801ef80 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->clt != prev_clt) {
 801731c:	68fb      	ldr	r3, [r7, #12]
 801731e:	685a      	ldr	r2, [r3, #4]
 8017320:	4b82      	ldr	r3, [pc, #520]	; (801752c <_ZN8MainView9updateValEPh+0x368>)
 8017322:	681b      	ldr	r3, [r3, #0]
 8017324:	429a      	cmp	r2, r3
 8017326:	d012      	beq.n	801734e <_ZN8MainView9updateValEPh+0x18a>
		prev_clt = values->clt;
 8017328:	68fb      	ldr	r3, [r7, #12]
 801732a:	685b      	ldr	r3, [r3, #4]
 801732c:	4a7f      	ldr	r2, [pc, #508]	; (801752c <_ZN8MainView9updateValEPh+0x368>)
 801732e:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(CLTValueBuffer, CLTVALUE_SIZE, "%d", values->clt);
 8017330:	687b      	ldr	r3, [r7, #4]
 8017332:	f503 603e 	add.w	r0, r3, #3040	; 0xbe0
 8017336:	68fb      	ldr	r3, [r7, #12]
 8017338:	685b      	ldr	r3, [r3, #4]
 801733a:	4a7a      	ldr	r2, [pc, #488]	; (8017524 <_ZN8MainView9updateValEPh+0x360>)
 801733c:	2105      	movs	r1, #5
 801733e:	f009 fa87 	bl	8020850 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		CLTValue.invalidate();
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	f603 1378 	addw	r3, r3, #2424	; 0x978
 8017348:	4618      	mov	r0, r3
 801734a:	f007 fe19 	bl	801ef80 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->lambda != prev_lambda) {
 801734e:	68fb      	ldr	r3, [r7, #12]
 8017350:	ed93 7a03 	vldr	s14, [r3, #12]
 8017354:	4b76      	ldr	r3, [pc, #472]	; (8017530 <_ZN8MainView9updateValEPh+0x36c>)
 8017356:	edd3 7a00 	vldr	s15, [r3]
 801735a:	eeb4 7a67 	vcmp.f32	s14, s15
 801735e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017362:	d015      	beq.n	8017390 <_ZN8MainView9updateValEPh+0x1cc>
		prev_lambda = values->lambda;
 8017364:	68fb      	ldr	r3, [r7, #12]
 8017366:	68db      	ldr	r3, [r3, #12]
 8017368:	4a71      	ldr	r2, [pc, #452]	; (8017530 <_ZN8MainView9updateValEPh+0x36c>)
 801736a:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(LambdaValueBuffer, LAMBDAVALUE_SIZE, "%.2f",
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	f503 6037 	add.w	r0, r3, #2928	; 0xb70
 8017372:	68fb      	ldr	r3, [r7, #12]
 8017374:	edd3 7a03 	vldr	s15, [r3, #12]
 8017378:	eeb0 0a67 	vmov.f32	s0, s15
 801737c:	4a6d      	ldr	r2, [pc, #436]	; (8017534 <_ZN8MainView9updateValEPh+0x370>)
 801737e:	2105      	movs	r1, #5
 8017380:	f7ff fd36 	bl	8016df0 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
				values->lambda);
		LambdaValue.invalidate();
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 801738a:	4618      	mov	r0, r3
 801738c:	f007 fdf8 	bl	801ef80 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->lambda_trgt != prev_lambda_targ) {
 8017390:	68fb      	ldr	r3, [r7, #12]
 8017392:	ed93 7a04 	vldr	s14, [r3, #16]
 8017396:	4b68      	ldr	r3, [pc, #416]	; (8017538 <_ZN8MainView9updateValEPh+0x374>)
 8017398:	edd3 7a00 	vldr	s15, [r3]
 801739c:	eeb4 7a67 	vcmp.f32	s14, s15
 80173a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173a4:	d015      	beq.n	80173d2 <_ZN8MainView9updateValEPh+0x20e>
		prev_lambda_targ = values->lambda_trgt;
 80173a6:	68fb      	ldr	r3, [r7, #12]
 80173a8:	691b      	ldr	r3, [r3, #16]
 80173aa:	4a63      	ldr	r2, [pc, #396]	; (8017538 <_ZN8MainView9updateValEPh+0x374>)
 80173ac:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(TrgtValueBuffer, TRGTVALUE_SIZE, "%.2f",
 80173ae:	687b      	ldr	r3, [r7, #4]
 80173b0:	f603 307a 	addw	r0, r3, #2938	; 0xb7a
 80173b4:	68fb      	ldr	r3, [r7, #12]
 80173b6:	edd3 7a04 	vldr	s15, [r3, #16]
 80173ba:	eeb0 0a67 	vmov.f32	s0, s15
 80173be:	4a5d      	ldr	r2, [pc, #372]	; (8017534 <_ZN8MainView9updateValEPh+0x370>)
 80173c0:	2105      	movs	r1, #5
 80173c2:	f7ff fd15 	bl	8016df0 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
				values->lambda_trgt);
		TrgtValue.invalidate();
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80173cc:	4618      	mov	r0, r3
 80173ce:	f007 fdd7 	bl	801ef80 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->oil_press != prev_oil_press) {
 80173d2:	68fb      	ldr	r3, [r7, #12]
 80173d4:	ed93 7a06 	vldr	s14, [r3, #24]
 80173d8:	4b58      	ldr	r3, [pc, #352]	; (801753c <_ZN8MainView9updateValEPh+0x378>)
 80173da:	edd3 7a00 	vldr	s15, [r3]
 80173de:	eeb4 7a67 	vcmp.f32	s14, s15
 80173e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173e6:	d015      	beq.n	8017414 <_ZN8MainView9updateValEPh+0x250>
		prev_oil_press = values->oil_press;
 80173e8:	68fb      	ldr	r3, [r7, #12]
 80173ea:	699b      	ldr	r3, [r3, #24]
 80173ec:	4a53      	ldr	r2, [pc, #332]	; (801753c <_ZN8MainView9updateValEPh+0x378>)
 80173ee:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(OILPressureValueBuffer, OILPRESSUREVALUE_SIZE,
 80173f0:	687b      	ldr	r3, [r7, #4]
 80173f2:	f603 30c2 	addw	r0, r3, #3010	; 0xbc2
 80173f6:	68fb      	ldr	r3, [r7, #12]
 80173f8:	edd3 7a06 	vldr	s15, [r3, #24]
 80173fc:	eeb0 0a67 	vmov.f32	s0, s15
 8017400:	4a4f      	ldr	r2, [pc, #316]	; (8017540 <_ZN8MainView9updateValEPh+0x37c>)
 8017402:	2105      	movs	r1, #5
 8017404:	f7ff fcf4 	bl	8016df0 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
				"%.1f", values->oil_press);
		OILPressureValue.invalidate();
 8017408:	687b      	ldr	r3, [r7, #4]
 801740a:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 801740e:	4618      	mov	r0, r3
 8017410:	f007 fdb6 	bl	801ef80 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->fuel_press != prev_fuel_press) {
 8017414:	68fb      	ldr	r3, [r7, #12]
 8017416:	69da      	ldr	r2, [r3, #28]
 8017418:	4b4a      	ldr	r3, [pc, #296]	; (8017544 <_ZN8MainView9updateValEPh+0x380>)
 801741a:	681b      	ldr	r3, [r3, #0]
 801741c:	429a      	cmp	r2, r3
 801741e:	d012      	beq.n	8017446 <_ZN8MainView9updateValEPh+0x282>
		prev_fuel_press = values->fuel_press;
 8017420:	68fb      	ldr	r3, [r7, #12]
 8017422:	69db      	ldr	r3, [r3, #28]
 8017424:	4a47      	ldr	r2, [pc, #284]	; (8017544 <_ZN8MainView9updateValEPh+0x380>)
 8017426:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(FuelPValueBuffer, FUELPVALUE_SIZE, "%d",
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	f603 30fe 	addw	r0, r3, #3070	; 0xbfe
 801742e:	68fb      	ldr	r3, [r7, #12]
 8017430:	69db      	ldr	r3, [r3, #28]
 8017432:	4a3c      	ldr	r2, [pc, #240]	; (8017524 <_ZN8MainView9updateValEPh+0x360>)
 8017434:	2105      	movs	r1, #5
 8017436:	f009 fa0b 	bl	8020850 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
				values->fuel_press);
		FuelPValue.invalidate();
 801743a:	687b      	ldr	r3, [r7, #4]
 801743c:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 8017440:	4618      	mov	r0, r3
 8017442:	f007 fd9d 	bl	801ef80 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->oil_tmp != prev_oil_tmp) {
 8017446:	68fb      	ldr	r3, [r7, #12]
 8017448:	695a      	ldr	r2, [r3, #20]
 801744a:	4b3f      	ldr	r3, [pc, #252]	; (8017548 <_ZN8MainView9updateValEPh+0x384>)
 801744c:	681b      	ldr	r3, [r3, #0]
 801744e:	429a      	cmp	r2, r3
 8017450:	d012      	beq.n	8017478 <_ZN8MainView9updateValEPh+0x2b4>
		prev_oil_tmp = values->oil_tmp;
 8017452:	68fb      	ldr	r3, [r7, #12]
 8017454:	695b      	ldr	r3, [r3, #20]
 8017456:	4a3c      	ldr	r2, [pc, #240]	; (8017548 <_ZN8MainView9updateValEPh+0x384>)
 8017458:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(OILTempValueBuffer, OILTEMPVALUE_SIZE, "%d",
 801745a:	687b      	ldr	r3, [r7, #4]
 801745c:	f603 30b8 	addw	r0, r3, #3000	; 0xbb8
 8017460:	68fb      	ldr	r3, [r7, #12]
 8017462:	695b      	ldr	r3, [r3, #20]
 8017464:	4a2f      	ldr	r2, [pc, #188]	; (8017524 <_ZN8MainView9updateValEPh+0x360>)
 8017466:	2105      	movs	r1, #5
 8017468:	f009 f9f2 	bl	8020850 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
				values->oil_tmp);
		OILTempValue.invalidate();
 801746c:	687b      	ldr	r3, [r7, #4]
 801746e:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8017472:	4618      	mov	r0, r3
 8017474:	f007 fd84 	bl	801ef80 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->iat != prev_iat) {
 8017478:	68fb      	ldr	r3, [r7, #12]
 801747a:	6a1a      	ldr	r2, [r3, #32]
 801747c:	4b33      	ldr	r3, [pc, #204]	; (801754c <_ZN8MainView9updateValEPh+0x388>)
 801747e:	681b      	ldr	r3, [r3, #0]
 8017480:	429a      	cmp	r2, r3
 8017482:	d012      	beq.n	80174aa <_ZN8MainView9updateValEPh+0x2e6>
		prev_iat = values->iat;
 8017484:	68fb      	ldr	r3, [r7, #12]
 8017486:	6a1b      	ldr	r3, [r3, #32]
 8017488:	4a30      	ldr	r2, [pc, #192]	; (801754c <_ZN8MainView9updateValEPh+0x388>)
 801748a:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(IATValueBuffer, IATVALUE_SIZE, "%d", values->iat);
 801748c:	687b      	ldr	r3, [r7, #4]
 801748e:	f603 30a4 	addw	r0, r3, #2980	; 0xba4
 8017492:	68fb      	ldr	r3, [r7, #12]
 8017494:	6a1b      	ldr	r3, [r3, #32]
 8017496:	4a23      	ldr	r2, [pc, #140]	; (8017524 <_ZN8MainView9updateValEPh+0x360>)
 8017498:	2105      	movs	r1, #5
 801749a:	f009 f9d9 	bl	8020850 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		IATValue.invalidate();
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 80174a4:	4618      	mov	r0, r3
 80174a6:	f007 fd6b 	bl	801ef80 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->egt != prev_egt) {
 80174aa:	68fb      	ldr	r3, [r7, #12]
 80174ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80174ae:	4b28      	ldr	r3, [pc, #160]	; (8017550 <_ZN8MainView9updateValEPh+0x38c>)
 80174b0:	681b      	ldr	r3, [r3, #0]
 80174b2:	429a      	cmp	r2, r3
 80174b4:	d012      	beq.n	80174dc <_ZN8MainView9updateValEPh+0x318>
		prev_egt = values->egt;
 80174b6:	68fb      	ldr	r3, [r7, #12]
 80174b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80174ba:	4a25      	ldr	r2, [pc, #148]	; (8017550 <_ZN8MainView9updateValEPh+0x38c>)
 80174bc:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(EGTValueBuffer, EGTVALUE_SIZE, "%d", values->egt);
 80174be:	687b      	ldr	r3, [r7, #4]
 80174c0:	f603 30ae 	addw	r0, r3, #2990	; 0xbae
 80174c4:	68fb      	ldr	r3, [r7, #12]
 80174c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80174c8:	4a16      	ldr	r2, [pc, #88]	; (8017524 <_ZN8MainView9updateValEPh+0x360>)
 80174ca:	2105      	movs	r1, #5
 80174cc:	f009 f9c0 	bl	8020850 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		EGTValue.invalidate();
 80174d0:	687b      	ldr	r3, [r7, #4]
 80174d2:	f503 6399 	add.w	r3, r3, #1224	; 0x4c8
 80174d6:	4618      	mov	r0, r3
 80174d8:	f007 fd52 	bl	801ef80 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->egt_2 != prev_egt_2) {
 80174dc:	68fb      	ldr	r3, [r7, #12]
 80174de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80174e0:	4b1c      	ldr	r3, [pc, #112]	; (8017554 <_ZN8MainView9updateValEPh+0x390>)
 80174e2:	681b      	ldr	r3, [r3, #0]
 80174e4:	429a      	cmp	r2, r3
 80174e6:	d012      	beq.n	801750e <_ZN8MainView9updateValEPh+0x34a>
		prev_egt_2 = values->egt_2;
 80174e8:	68fb      	ldr	r3, [r7, #12]
 80174ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80174ec:	4a19      	ldr	r2, [pc, #100]	; (8017554 <_ZN8MainView9updateValEPh+0x390>)
 80174ee:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(EGTValue2Buffer, EGTVALUE2_SIZE, "%d", values->egt_2);
 80174f0:	687b      	ldr	r3, [r7, #4]
 80174f2:	f603 30f4 	addw	r0, r3, #3060	; 0xbf4
 80174f6:	68fb      	ldr	r3, [r7, #12]
 80174f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80174fa:	4a0a      	ldr	r2, [pc, #40]	; (8017524 <_ZN8MainView9updateValEPh+0x360>)
 80174fc:	2105      	movs	r1, #5
 80174fe:	f009 f9a7 	bl	8020850 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		EGTValue2.invalidate();
 8017502:	687b      	ldr	r3, [r7, #4]
 8017504:	f603 13e8 	addw	r3, r3, #2536	; 0x9e8
 8017508:	4618      	mov	r0, r3
 801750a:	f007 fd39 	bl	801ef80 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->tps != prev_tps) {
 801750e:	68fb      	ldr	r3, [r7, #12]
 8017510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017512:	4b11      	ldr	r3, [pc, #68]	; (8017558 <_ZN8MainView9updateValEPh+0x394>)
 8017514:	681b      	ldr	r3, [r3, #0]
 8017516:	429a      	cmp	r2, r3
 8017518:	d042      	beq.n	80175a0 <_ZN8MainView9updateValEPh+0x3dc>
 801751a:	e01f      	b.n	801755c <_ZN8MainView9updateValEPh+0x398>
 801751c:	20008768 	.word	0x20008768
 8017520:	2000003c 	.word	0x2000003c
 8017524:	0802bf70 	.word	0x0802bf70
 8017528:	20000040 	.word	0x20000040
 801752c:	20000044 	.word	0x20000044
 8017530:	20000048 	.word	0x20000048
 8017534:	0802bf74 	.word	0x0802bf74
 8017538:	2000004c 	.word	0x2000004c
 801753c:	2000874c 	.word	0x2000874c
 8017540:	0802bf7c 	.word	0x0802bf7c
 8017544:	20008750 	.word	0x20008750
 8017548:	20008748 	.word	0x20008748
 801754c:	20008754 	.word	0x20008754
 8017550:	20008758 	.word	0x20008758
 8017554:	2000875c 	.word	0x2000875c
 8017558:	20008760 	.word	0x20008760
		prev_tps = values->tps;
 801755c:	68fb      	ldr	r3, [r7, #12]
 801755e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017560:	4a2e      	ldr	r2, [pc, #184]	; (801761c <_ZN8MainView9updateValEPh+0x458>)
 8017562:	6013      	str	r3, [r2, #0]
		TPSProgress.setValue(values->tps);
 8017564:	687b      	ldr	r3, [r7, #4]
 8017566:	f203 620c 	addw	r2, r3, #1548	; 0x60c
 801756a:	68fb      	ldr	r3, [r7, #12]
 801756c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801756e:	4619      	mov	r1, r3
 8017570:	4610      	mov	r0, r2
 8017572:	f003 f9bd 	bl	801a8f0 <_ZN8touchgfx11BoxProgress8setValueEi>
		RPMProgressBar.invalidate();
 8017576:	687b      	ldr	r3, [r7, #4]
 8017578:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 801757c:	4618      	mov	r0, r3
 801757e:	f007 fcff 	bl	801ef80 <_ZNK8touchgfx8Drawable10invalidateEv>
		Unicode::snprintf(TpsNumberValueBuffer, TPSNUMBERVALUE_SIZE, "%d",
 8017582:	687b      	ldr	r3, [r7, #4]
 8017584:	f603 4008 	addw	r0, r3, #3080	; 0xc08
 8017588:	68fb      	ldr	r3, [r7, #12]
 801758a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801758c:	4a24      	ldr	r2, [pc, #144]	; (8017620 <_ZN8MainView9updateValEPh+0x45c>)
 801758e:	2105      	movs	r1, #5
 8017590:	f009 f95e 	bl	8020850 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
				values->tps);
		TpsNumberValue.invalidate();
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 801759a:	4618      	mov	r0, r3
 801759c:	f007 fcf0 	bl	801ef80 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->batt_v != prev_batt_v) {
 80175a0:	68fb      	ldr	r3, [r7, #12]
 80175a2:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80175a6:	4b1f      	ldr	r3, [pc, #124]	; (8017624 <_ZN8MainView9updateValEPh+0x460>)
 80175a8:	edd3 7a00 	vldr	s15, [r3]
 80175ac:	eeb4 7a67 	vcmp.f32	s14, s15
 80175b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175b4:	d015      	beq.n	80175e2 <_ZN8MainView9updateValEPh+0x41e>
		prev_batt_v = values->batt_v;
 80175b6:	68fb      	ldr	r3, [r7, #12]
 80175b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80175ba:	4a1a      	ldr	r2, [pc, #104]	; (8017624 <_ZN8MainView9updateValEPh+0x460>)
 80175bc:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(BatteryVoltageBuffer, BATTERYVOLTAGE_SIZE,
 80175be:	687b      	ldr	r3, [r7, #4]
 80175c0:	f603 30cc 	addw	r0, r3, #3020	; 0xbcc
 80175c4:	68fb      	ldr	r3, [r7, #12]
 80175c6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80175ca:	eeb0 0a67 	vmov.f32	s0, s15
 80175ce:	4a16      	ldr	r2, [pc, #88]	; (8017628 <_ZN8MainView9updateValEPh+0x464>)
 80175d0:	2105      	movs	r1, #5
 80175d2:	f7ff fc0d 	bl	8016df0 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
				"%.2f", values->batt_v);
		BatteryVoltage.invalidate();
 80175d6:	687b      	ldr	r3, [r7, #4]
 80175d8:	f203 73e4 	addw	r3, r3, #2020	; 0x7e4
 80175dc:	4618      	mov	r0, r3
 80175de:	f007 fccf 	bl	801ef80 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (has_error && !presenter->getManualErrorChangeScreen()) {
 80175e2:	7abb      	ldrb	r3, [r7, #10]
 80175e4:	2b00      	cmp	r3, #0
 80175e6:	d00c      	beq.n	8017602 <_ZN8MainView9updateValEPh+0x43e>
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80175ec:	4618      	mov	r0, r3
 80175ee:	f7ff fc2d 	bl	8016e4c <_ZN13MainPresenter26getManualErrorChangeScreenEv>
 80175f2:	4603      	mov	r3, r0
 80175f4:	f083 0301 	eor.w	r3, r3, #1
 80175f8:	b2db      	uxtb	r3, r3
 80175fa:	2b00      	cmp	r3, #0
 80175fc:	d001      	beq.n	8017602 <_ZN8MainView9updateValEPh+0x43e>
 80175fe:	2301      	movs	r3, #1
 8017600:	e000      	b.n	8017604 <_ZN8MainView9updateValEPh+0x440>
 8017602:	2300      	movs	r3, #0
 8017604:	2b00      	cmp	r3, #0
 8017606:	d005      	beq.n	8017614 <_ZN8MainView9updateValEPh+0x450>
		static_cast<FrontendApplication*>(Application::getInstance())->gotoSecondScreenScreenSlideTransitionEast();
 8017608:	f007 f88c 	bl	801e724 <_ZN8touchgfx11Application11getInstanceEv>
 801760c:	4603      	mov	r3, r0
 801760e:	4618      	mov	r0, r3
 8017610:	f7f9 fe8e 	bl	8011330 <_ZN23FrontendApplicationBase41gotoSecondScreenScreenSlideTransitionEastEv>
	}
}
 8017614:	bf00      	nop
 8017616:	3714      	adds	r7, #20
 8017618:	46bd      	mov	sp, r7
 801761a:	bd90      	pop	{r4, r7, pc}
 801761c:	20008760 	.word	0x20008760
 8017620:	0802bf70 	.word	0x0802bf70
 8017624:	20008764 	.word	0x20008764
 8017628:	0802bf74 	.word	0x0802bf74

0801762c <_ZN5ModelC1Ev>:
{
	xQueueHandle messageQ;
	xQueueHandle settingsMessageQ;
}

Model::Model() : modelListener(0)
 801762c:	b580      	push	{r7, lr}
 801762e:	b082      	sub	sp, #8
 8017630:	af00      	add	r7, sp, #0
 8017632:	6078      	str	r0, [r7, #4]
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	2200      	movs	r2, #0
 8017638:	601a      	str	r2, [r3, #0]
{
	messageQ = xQueueGenericCreate(1, sizeof(display_values), 0);
 801763a:	2200      	movs	r2, #0
 801763c:	2158      	movs	r1, #88	; 0x58
 801763e:	2001      	movs	r0, #1
 8017640:	f7f5 ff8d 	bl	800d55e <xQueueGenericCreate>
 8017644:	4602      	mov	r2, r0
 8017646:	4b07      	ldr	r3, [pc, #28]	; (8017664 <_ZN5ModelC1Ev+0x38>)
 8017648:	601a      	str	r2, [r3, #0]
	settingsMessageQ = xQueueGenericCreate(1, sizeof(settings_message), 0);
 801764a:	2200      	movs	r2, #0
 801764c:	2128      	movs	r1, #40	; 0x28
 801764e:	2001      	movs	r0, #1
 8017650:	f7f5 ff85 	bl	800d55e <xQueueGenericCreate>
 8017654:	4602      	mov	r2, r0
 8017656:	4b04      	ldr	r3, [pc, #16]	; (8017668 <_ZN5ModelC1Ev+0x3c>)
 8017658:	601a      	str	r2, [r3, #0]
}
 801765a:	687b      	ldr	r3, [r7, #4]
 801765c:	4618      	mov	r0, r3
 801765e:	3708      	adds	r7, #8
 8017660:	46bd      	mov	sp, r7
 8017662:	bd80      	pop	{r7, pc}
 8017664:	200087f4 	.word	0x200087f4
 8017668:	200087f8 	.word	0x200087f8

0801766c <_ZN5Model4tickEv>:

void Model::tick()
{
 801766c:	b580      	push	{r7, lr}
 801766e:	b082      	sub	sp, #8
 8017670:	af00      	add	r7, sp, #0
 8017672:	6078      	str	r0, [r7, #4]
	if(xQueueReceive(messageQ, &values , 0) == pdTRUE)
 8017674:	4b1a      	ldr	r3, [pc, #104]	; (80176e0 <_ZN5Model4tickEv+0x74>)
 8017676:	681b      	ldr	r3, [r3, #0]
 8017678:	2200      	movs	r2, #0
 801767a:	491a      	ldr	r1, [pc, #104]	; (80176e4 <_ZN5Model4tickEv+0x78>)
 801767c:	4618      	mov	r0, r3
 801767e:	f7f6 f9ff 	bl	800da80 <xQueueReceive>
 8017682:	4603      	mov	r3, r0
 8017684:	2b01      	cmp	r3, #1
 8017686:	bf0c      	ite	eq
 8017688:	2301      	moveq	r3, #1
 801768a:	2300      	movne	r3, #0
 801768c:	b2db      	uxtb	r3, r3
 801768e:	2b00      	cmp	r3, #0
 8017690:	d009      	beq.n	80176a6 <_ZN5Model4tickEv+0x3a>
	{
		modelListener->setNewValue(values);
 8017692:	687b      	ldr	r3, [r7, #4]
 8017694:	681a      	ldr	r2, [r3, #0]
 8017696:	687b      	ldr	r3, [r7, #4]
 8017698:	681b      	ldr	r3, [r3, #0]
 801769a:	681b      	ldr	r3, [r3, #0]
 801769c:	3308      	adds	r3, #8
 801769e:	681b      	ldr	r3, [r3, #0]
 80176a0:	4910      	ldr	r1, [pc, #64]	; (80176e4 <_ZN5Model4tickEv+0x78>)
 80176a2:	4610      	mov	r0, r2
 80176a4:	4798      	blx	r3
	}

	if(xQueueReceive(settingsMessageQ, &settings_value , 0) == pdTRUE)
 80176a6:	4b10      	ldr	r3, [pc, #64]	; (80176e8 <_ZN5Model4tickEv+0x7c>)
 80176a8:	681b      	ldr	r3, [r3, #0]
 80176aa:	2200      	movs	r2, #0
 80176ac:	490f      	ldr	r1, [pc, #60]	; (80176ec <_ZN5Model4tickEv+0x80>)
 80176ae:	4618      	mov	r0, r3
 80176b0:	f7f6 f9e6 	bl	800da80 <xQueueReceive>
 80176b4:	4603      	mov	r3, r0
 80176b6:	2b01      	cmp	r3, #1
 80176b8:	bf0c      	ite	eq
 80176ba:	2301      	moveq	r3, #1
 80176bc:	2300      	movne	r3, #0
 80176be:	b2db      	uxtb	r3, r3
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	d009      	beq.n	80176d8 <_ZN5Model4tickEv+0x6c>
	{
		modelListener->updateDisplaySettings(settings_value);
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	681a      	ldr	r2, [r3, #0]
 80176c8:	687b      	ldr	r3, [r7, #4]
 80176ca:	681b      	ldr	r3, [r3, #0]
 80176cc:	681b      	ldr	r3, [r3, #0]
 80176ce:	330c      	adds	r3, #12
 80176d0:	681b      	ldr	r3, [r3, #0]
 80176d2:	4906      	ldr	r1, [pc, #24]	; (80176ec <_ZN5Model4tickEv+0x80>)
 80176d4:	4610      	mov	r0, r2
 80176d6:	4798      	blx	r3
	}
}
 80176d8:	bf00      	nop
 80176da:	3708      	adds	r7, #8
 80176dc:	46bd      	mov	sp, r7
 80176de:	bd80      	pop	{r7, pc}
 80176e0:	200087f4 	.word	0x200087f4
 80176e4:	2000876c 	.word	0x2000876c
 80176e8:	200087f8 	.word	0x200087f8
 80176ec:	200087c4 	.word	0x200087c4

080176f0 <_ZN5Model22saveCurrentScreenIndexEi>:

void Model::saveCurrentScreenIndex(int cScreen)
{
 80176f0:	b480      	push	{r7}
 80176f2:	b083      	sub	sp, #12
 80176f4:	af00      	add	r7, sp, #0
 80176f6:	6078      	str	r0, [r7, #4]
 80176f8:	6039      	str	r1, [r7, #0]
	currentScreenIndex = cScreen;
 80176fa:	4a04      	ldr	r2, [pc, #16]	; (801770c <_ZN5Model22saveCurrentScreenIndexEi+0x1c>)
 80176fc:	683b      	ldr	r3, [r7, #0]
 80176fe:	6013      	str	r3, [r2, #0]
}
 8017700:	bf00      	nop
 8017702:	370c      	adds	r7, #12
 8017704:	46bd      	mov	sp, r7
 8017706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801770a:	4770      	bx	lr
 801770c:	200087ec 	.word	0x200087ec

08017710 <_ZN5Model26setManualErrorChangeScreenEv>:
int Model::getCurrentScreenIndex()
{
	return currentScreenIndex;
}

void Model::setManualErrorChangeScreen() {
 8017710:	b480      	push	{r7}
 8017712:	b083      	sub	sp, #12
 8017714:	af00      	add	r7, sp, #0
 8017716:	6078      	str	r0, [r7, #4]
	manualErrorScreenChange = true;
 8017718:	4b04      	ldr	r3, [pc, #16]	; (801772c <_ZN5Model26setManualErrorChangeScreenEv+0x1c>)
 801771a:	2201      	movs	r2, #1
 801771c:	701a      	strb	r2, [r3, #0]
}
 801771e:	bf00      	nop
 8017720:	370c      	adds	r7, #12
 8017722:	46bd      	mov	sp, r7
 8017724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017728:	4770      	bx	lr
 801772a:	bf00      	nop
 801772c:	200087f0 	.word	0x200087f0

08017730 <_ZN5Model26getManualErrorChangeScreenEv>:

bool Model::getManualErrorChangeScreen() {
 8017730:	b480      	push	{r7}
 8017732:	b083      	sub	sp, #12
 8017734:	af00      	add	r7, sp, #0
 8017736:	6078      	str	r0, [r7, #4]
	return manualErrorScreenChange;
 8017738:	4b03      	ldr	r3, [pc, #12]	; (8017748 <_ZN5Model26getManualErrorChangeScreenEv+0x18>)
 801773a:	781b      	ldrb	r3, [r3, #0]
}
 801773c:	4618      	mov	r0, r3
 801773e:	370c      	adds	r7, #12
 8017740:	46bd      	mov	sp, r7
 8017742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017746:	4770      	bx	lr
 8017748:	200087f0 	.word	0x200087f0

0801774c <_ZN21SecondScreenPresenterD1Ev>:
	 * The deactivate function is called automatically when this screen is "switched out"
	 * (ie. made inactive). Teardown functionality can be placed here.
	 */
	virtual void deactivate();

	virtual ~SecondScreenPresenter() {
 801774c:	b580      	push	{r7, lr}
 801774e:	b082      	sub	sp, #8
 8017750:	af00      	add	r7, sp, #0
 8017752:	6078      	str	r0, [r7, #4]
 8017754:	4a09      	ldr	r2, [pc, #36]	; (801777c <_ZN21SecondScreenPresenterD1Ev+0x30>)
 8017756:	687b      	ldr	r3, [r7, #4]
 8017758:	601a      	str	r2, [r3, #0]
 801775a:	4a09      	ldr	r2, [pc, #36]	; (8017780 <_ZN21SecondScreenPresenterD1Ev+0x34>)
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	605a      	str	r2, [r3, #4]
 8017760:	687b      	ldr	r3, [r7, #4]
 8017762:	3304      	adds	r3, #4
 8017764:	4618      	mov	r0, r3
 8017766:	f7ff fa7b 	bl	8016c60 <_ZN13ModelListenerD1Ev>
 801776a:	687b      	ldr	r3, [r7, #4]
 801776c:	4618      	mov	r0, r3
 801776e:	f7ff fa33 	bl	8016bd8 <_ZN8touchgfx9PresenterD1Ev>
	}
 8017772:	687b      	ldr	r3, [r7, #4]
 8017774:	4618      	mov	r0, r3
 8017776:	3708      	adds	r7, #8
 8017778:	46bd      	mov	sp, r7
 801777a:	bd80      	pop	{r7, pc}
 801777c:	0802cea8 	.word	0x0802cea8
 8017780:	0802cec8 	.word	0x0802cec8

08017784 <_ZThn4_N21SecondScreenPresenterD1Ev>:
	virtual ~SecondScreenPresenter() {
 8017784:	f1a0 0004 	sub.w	r0, r0, #4
 8017788:	e7e0      	b.n	801774c <_ZN21SecondScreenPresenterD1Ev>
 801778a:	bf00      	nop

0801778c <_ZN21SecondScreenPresenterD0Ev>:
 801778c:	b580      	push	{r7, lr}
 801778e:	b082      	sub	sp, #8
 8017790:	af00      	add	r7, sp, #0
 8017792:	6078      	str	r0, [r7, #4]
	}
 8017794:	6878      	ldr	r0, [r7, #4]
 8017796:	f7ff ffd9 	bl	801774c <_ZN21SecondScreenPresenterD1Ev>
 801779a:	2110      	movs	r1, #16
 801779c:	6878      	ldr	r0, [r7, #4]
 801779e:	f012 ffc4 	bl	802a72a <_ZdlPvj>
 80177a2:	687b      	ldr	r3, [r7, #4]
 80177a4:	4618      	mov	r0, r3
 80177a6:	3708      	adds	r7, #8
 80177a8:	46bd      	mov	sp, r7
 80177aa:	bd80      	pop	{r7, pc}

080177ac <_ZThn4_N21SecondScreenPresenterD0Ev>:
	virtual ~SecondScreenPresenter() {
 80177ac:	f1a0 0004 	sub.w	r0, r0, #4
 80177b0:	e7ec      	b.n	801778c <_ZN21SecondScreenPresenterD0Ev>
	...

080177b4 <_ZN21SecondScreenPresenterC1ER16SecondScreenView>:
#include <gui/secondscreen_screen/SecondScreenView.hpp>
#include <gui/secondscreen_screen/SecondScreenPresenter.hpp>

SecondScreenPresenter::SecondScreenPresenter(SecondScreenView& v)
 80177b4:	b580      	push	{r7, lr}
 80177b6:	b082      	sub	sp, #8
 80177b8:	af00      	add	r7, sp, #0
 80177ba:	6078      	str	r0, [r7, #4]
 80177bc:	6039      	str	r1, [r7, #0]
    : view(v)
 80177be:	687b      	ldr	r3, [r7, #4]
 80177c0:	4618      	mov	r0, r3
 80177c2:	f7ff fa29 	bl	8016c18 <_ZN8touchgfx9PresenterC1Ev>
 80177c6:	687b      	ldr	r3, [r7, #4]
 80177c8:	3304      	adds	r3, #4
 80177ca:	4618      	mov	r0, r3
 80177cc:	f7ff fa34 	bl	8016c38 <_ZN13ModelListenerC1Ev>
 80177d0:	4a06      	ldr	r2, [pc, #24]	; (80177ec <_ZN21SecondScreenPresenterC1ER16SecondScreenView+0x38>)
 80177d2:	687b      	ldr	r3, [r7, #4]
 80177d4:	601a      	str	r2, [r3, #0]
 80177d6:	4a06      	ldr	r2, [pc, #24]	; (80177f0 <_ZN21SecondScreenPresenterC1ER16SecondScreenView+0x3c>)
 80177d8:	687b      	ldr	r3, [r7, #4]
 80177da:	605a      	str	r2, [r3, #4]
 80177dc:	687b      	ldr	r3, [r7, #4]
 80177de:	683a      	ldr	r2, [r7, #0]
 80177e0:	60da      	str	r2, [r3, #12]
{

}
 80177e2:	687b      	ldr	r3, [r7, #4]
 80177e4:	4618      	mov	r0, r3
 80177e6:	3708      	adds	r7, #8
 80177e8:	46bd      	mov	sp, r7
 80177ea:	bd80      	pop	{r7, pc}
 80177ec:	0802cea8 	.word	0x0802cea8
 80177f0:	0802cec8 	.word	0x0802cec8

080177f4 <_ZN21SecondScreenPresenter8activateEv>:

void SecondScreenPresenter::activate()
{
 80177f4:	b580      	push	{r7, lr}
 80177f6:	b082      	sub	sp, #8
 80177f8:	af00      	add	r7, sp, #0
 80177fa:	6078      	str	r0, [r7, #4]
	model -> saveCurrentScreenIndex(2);
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	689b      	ldr	r3, [r3, #8]
 8017800:	2102      	movs	r1, #2
 8017802:	4618      	mov	r0, r3
 8017804:	f7ff ff74 	bl	80176f0 <_ZN5Model22saveCurrentScreenIndexEi>
}
 8017808:	bf00      	nop
 801780a:	3708      	adds	r7, #8
 801780c:	46bd      	mov	sp, r7
 801780e:	bd80      	pop	{r7, pc}

08017810 <_ZN21SecondScreenPresenter10deactivateEv>:

void SecondScreenPresenter::deactivate()
{
 8017810:	b480      	push	{r7}
 8017812:	b083      	sub	sp, #12
 8017814:	af00      	add	r7, sp, #0
 8017816:	6078      	str	r0, [r7, #4]

}
 8017818:	bf00      	nop
 801781a:	370c      	adds	r7, #12
 801781c:	46bd      	mov	sp, r7
 801781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017822:	4770      	bx	lr

08017824 <_ZN21SecondScreenPresenter11setNewValueEPh>:

void SecondScreenPresenter::setNewValue(uint8_t* newValue)
{
 8017824:	b580      	push	{r7, lr}
 8017826:	b082      	sub	sp, #8
 8017828:	af00      	add	r7, sp, #0
 801782a:	6078      	str	r0, [r7, #4]
 801782c:	6039      	str	r1, [r7, #0]
	view.updateVal(newValue);
 801782e:	687b      	ldr	r3, [r7, #4]
 8017830:	68db      	ldr	r3, [r3, #12]
 8017832:	6839      	ldr	r1, [r7, #0]
 8017834:	4618      	mov	r0, r3
 8017836:	f000 f94d 	bl	8017ad4 <_ZN16SecondScreenView9updateValEPh>
}
 801783a:	bf00      	nop
 801783c:	3708      	adds	r7, #8
 801783e:	46bd      	mov	sp, r7
 8017840:	bd80      	pop	{r7, pc}

08017842 <_ZThn4_N21SecondScreenPresenter11setNewValueEPh>:
	;

	void setNewValue(uint8_t *newValue);
 8017842:	f1a0 0004 	sub.w	r0, r0, #4
 8017846:	f7ff bfed 	b.w	8017824 <_ZN21SecondScreenPresenter11setNewValueEPh>

0801784a <_ZN21SecondScreenPresenter21updateDisplaySettingsEPh>:

void SecondScreenPresenter::updateDisplaySettings(uint8_t* settings)
{
 801784a:	b580      	push	{r7, lr}
 801784c:	b082      	sub	sp, #8
 801784e:	af00      	add	r7, sp, #0
 8017850:	6078      	str	r0, [r7, #4]
 8017852:	6039      	str	r1, [r7, #0]
	view.updateSettings(settings);
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	68db      	ldr	r3, [r3, #12]
 8017858:	6839      	ldr	r1, [r7, #0]
 801785a:	4618      	mov	r0, r3
 801785c:	f000 f918 	bl	8017a90 <_ZN16SecondScreenView14updateSettingsEPh>
}
 8017860:	bf00      	nop
 8017862:	3708      	adds	r7, #8
 8017864:	46bd      	mov	sp, r7
 8017866:	bd80      	pop	{r7, pc}

08017868 <_ZThn4_N21SecondScreenPresenter21updateDisplaySettingsEPh>:

	void updateDisplaySettings(uint8_t *settings);
 8017868:	f1a0 0004 	sub.w	r0, r0, #4
 801786c:	f7ff bfed 	b.w	801784a <_ZN21SecondScreenPresenter21updateDisplaySettingsEPh>

08017870 <_ZN21SecondScreenPresenter26setManualErrorChangeScreenEv>:

	void setManualErrorChangeScreen() {
 8017870:	b580      	push	{r7, lr}
 8017872:	b082      	sub	sp, #8
 8017874:	af00      	add	r7, sp, #0
 8017876:	6078      	str	r0, [r7, #4]
		model->setManualErrorChangeScreen();
 8017878:	687b      	ldr	r3, [r7, #4]
 801787a:	689b      	ldr	r3, [r3, #8]
 801787c:	4618      	mov	r0, r3
 801787e:	f7ff ff47 	bl	8017710 <_ZN5Model26setManualErrorChangeScreenEv>
	}
 8017882:	bf00      	nop
 8017884:	3708      	adds	r7, #8
 8017886:	46bd      	mov	sp, r7
 8017888:	bd80      	pop	{r7, pc}

0801788a <_ZNK8touchgfx9TypedText10hasValidIdEv>:
    bool hasValidId() const
 801788a:	b480      	push	{r7}
 801788c:	b083      	sub	sp, #12
 801788e:	af00      	add	r7, sp, #0
 8017890:	6078      	str	r0, [r7, #4]
        return typedTextId != TYPED_TEXT_INVALID;
 8017892:	687b      	ldr	r3, [r7, #4]
 8017894:	881b      	ldrh	r3, [r3, #0]
 8017896:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801789a:	4293      	cmp	r3, r2
 801789c:	bf14      	ite	ne
 801789e:	2301      	movne	r3, #1
 80178a0:	2300      	moveq	r3, #0
 80178a2:	b2db      	uxtb	r3, r3
    }
 80178a4:	4618      	mov	r0, r3
 80178a6:	370c      	adds	r7, #12
 80178a8:	46bd      	mov	sp, r7
 80178aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178ae:	4770      	bx	lr

080178b0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
     *         Gets the width in pixels of the current associated text in the current selected
     *         language. In case of multi-lined text the width of the widest line is returned.
     *
     * @return The width in pixels of the current text.
     */
    virtual uint16_t getTextWidth() const
 80178b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80178b2:	b085      	sub	sp, #20
 80178b4:	af02      	add	r7, sp, #8
 80178b6:	6078      	str	r0, [r7, #4]
    {
        return typedText.hasValidId() ? typedText.getFont()->getStringWidth(typedText.getTextDirection(), typedText.getText(), wildcard, 0) : 0;
 80178b8:	687b      	ldr	r3, [r7, #4]
 80178ba:	3326      	adds	r3, #38	; 0x26
 80178bc:	4618      	mov	r0, r3
 80178be:	f7ff ffe4 	bl	801788a <_ZNK8touchgfx9TypedText10hasValidIdEv>
 80178c2:	4603      	mov	r3, r0
 80178c4:	2b00      	cmp	r3, #0
 80178c6:	d020      	beq.n	801790a <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x5a>
 80178c8:	687b      	ldr	r3, [r7, #4]
 80178ca:	3326      	adds	r3, #38	; 0x26
 80178cc:	4618      	mov	r0, r3
 80178ce:	f7f8 fe57 	bl	8010580 <_ZNK8touchgfx9TypedText7getFontEv>
 80178d2:	4605      	mov	r5, r0
 80178d4:	682b      	ldr	r3, [r5, #0]
 80178d6:	331c      	adds	r3, #28
 80178d8:	681c      	ldr	r4, [r3, #0]
 80178da:	687b      	ldr	r3, [r7, #4]
 80178dc:	3326      	adds	r3, #38	; 0x26
 80178de:	4618      	mov	r0, r3
 80178e0:	f7f8 fe6a 	bl	80105b8 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 80178e4:	4603      	mov	r3, r0
 80178e6:	461e      	mov	r6, r3
 80178e8:	687b      	ldr	r3, [r7, #4]
 80178ea:	3326      	adds	r3, #38	; 0x26
 80178ec:	4618      	mov	r0, r3
 80178ee:	f7fb fa19 	bl	8012d24 <_ZNK8touchgfx9TypedText7getTextEv>
 80178f2:	4601      	mov	r1, r0
 80178f4:	687b      	ldr	r3, [r7, #4]
 80178f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80178f8:	2300      	movs	r3, #0
 80178fa:	9300      	str	r3, [sp, #0]
 80178fc:	4613      	mov	r3, r2
 80178fe:	460a      	mov	r2, r1
 8017900:	4631      	mov	r1, r6
 8017902:	4628      	mov	r0, r5
 8017904:	47a0      	blx	r4
 8017906:	4603      	mov	r3, r0
 8017908:	e000      	b.n	801790c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x5c>
 801790a:	2300      	movs	r3, #0
    }
 801790c:	4618      	mov	r0, r3
 801790e:	370c      	adds	r7, #12
 8017910:	46bd      	mov	sp, r7
 8017912:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017914 <_ZN16SecondScreenViewD1Ev>:
#include <gui/secondscreen_screen/SecondScreenPresenter.hpp>

class SecondScreenView: public SecondScreenViewBase {
public:
	SecondScreenView();
	virtual ~SecondScreenView() {
 8017914:	b580      	push	{r7, lr}
 8017916:	b082      	sub	sp, #8
 8017918:	af00      	add	r7, sp, #0
 801791a:	6078      	str	r0, [r7, #4]
 801791c:	4a05      	ldr	r2, [pc, #20]	; (8017934 <_ZN16SecondScreenViewD1Ev+0x20>)
 801791e:	687b      	ldr	r3, [r7, #4]
 8017920:	601a      	str	r2, [r3, #0]
 8017922:	687b      	ldr	r3, [r7, #4]
 8017924:	4618      	mov	r0, r3
 8017926:	f7fd ff8d 	bl	8015844 <_ZN20SecondScreenViewBaseD1Ev>
	}
 801792a:	687b      	ldr	r3, [r7, #4]
 801792c:	4618      	mov	r0, r3
 801792e:	3708      	adds	r7, #8
 8017930:	46bd      	mov	sp, r7
 8017932:	bd80      	pop	{r7, pc}
 8017934:	0802cee0 	.word	0x0802cee0

08017938 <_ZN16SecondScreenViewD0Ev>:
	virtual ~SecondScreenView() {
 8017938:	b580      	push	{r7, lr}
 801793a:	b082      	sub	sp, #8
 801793c:	af00      	add	r7, sp, #0
 801793e:	6078      	str	r0, [r7, #4]
	}
 8017940:	6878      	ldr	r0, [r7, #4]
 8017942:	f7ff ffe7 	bl	8017914 <_ZN16SecondScreenViewD1Ev>
 8017946:	f44f 61a7 	mov.w	r1, #1336	; 0x538
 801794a:	6878      	ldr	r0, [r7, #4]
 801794c:	f012 feed 	bl	802a72a <_ZdlPvj>
 8017950:	687b      	ldr	r3, [r7, #4]
 8017952:	4618      	mov	r0, r3
 8017954:	3708      	adds	r7, #8
 8017956:	46bd      	mov	sp, r7
 8017958:	bd80      	pop	{r7, pc}
	...

0801795c <_ZN16SecondScreenViewC1Ev>:
static TEXTS *error;
static unsigned cutrrentErrorIndex = 0;
static int check_eng_code = 0;
static int eng_prot_code = 0;

SecondScreenView::SecondScreenView() {
 801795c:	b580      	push	{r7, lr}
 801795e:	b082      	sub	sp, #8
 8017960:	af00      	add	r7, sp, #0
 8017962:	6078      	str	r0, [r7, #4]
 8017964:	687b      	ldr	r3, [r7, #4]
 8017966:	4618      	mov	r0, r3
 8017968:	f7fe f828 	bl	80159bc <_ZN20SecondScreenViewBaseC1Ev>
 801796c:	4a03      	ldr	r2, [pc, #12]	; (801797c <_ZN16SecondScreenViewC1Ev+0x20>)
 801796e:	687b      	ldr	r3, [r7, #4]
 8017970:	601a      	str	r2, [r3, #0]

}
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	4618      	mov	r0, r3
 8017976:	3708      	adds	r7, #8
 8017978:	46bd      	mov	sp, r7
 801797a:	bd80      	pop	{r7, pc}
 801797c:	0802cee0 	.word	0x0802cee0

08017980 <_ZL13getBlackColorv>:

static colortype getBlackColor() {
 8017980:	b580      	push	{r7, lr}
 8017982:	b082      	sub	sp, #8
 8017984:	af00      	add	r7, sp, #0
	colortype black_color = touchgfx::Color::getColorFrom24BitRGB(0, 0, 0);
 8017986:	2200      	movs	r2, #0
 8017988:	2100      	movs	r1, #0
 801798a:	2000      	movs	r0, #0
 801798c:	f7fb febe 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8017990:	4603      	mov	r3, r0
 8017992:	607b      	str	r3, [r7, #4]
	return black_color;
 8017994:	687b      	ldr	r3, [r7, #4]
}
 8017996:	4618      	mov	r0, r3
 8017998:	3708      	adds	r7, #8
 801799a:	46bd      	mov	sp, r7
 801799c:	bd80      	pop	{r7, pc}

0801799e <_ZL11getRedColorv>:

static colortype getRedColor() {
 801799e:	b580      	push	{r7, lr}
 80179a0:	b082      	sub	sp, #8
 80179a2:	af00      	add	r7, sp, #0
	colortype red_color = touchgfx::Color::getColorFrom24BitRGB(255, 0, 0);
 80179a4:	2200      	movs	r2, #0
 80179a6:	2100      	movs	r1, #0
 80179a8:	20ff      	movs	r0, #255	; 0xff
 80179aa:	f7fb feaf 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80179ae:	4603      	mov	r3, r0
 80179b0:	607b      	str	r3, [r7, #4]
	return red_color;
 80179b2:	687b      	ldr	r3, [r7, #4]
}
 80179b4:	4618      	mov	r0, r3
 80179b6:	3708      	adds	r7, #8
 80179b8:	46bd      	mov	sp, r7
 80179ba:	bd80      	pop	{r7, pc}

080179bc <_ZL17getColorForErrorsv>:

static colortype getColorForErrors() {
 80179bc:	b580      	push	{r7, lr}
 80179be:	b084      	sub	sp, #16
 80179c0:	af00      	add	r7, sp, #0

	color_index++;
 80179c2:	4b24      	ldr	r3, [pc, #144]	; (8017a54 <_ZL17getColorForErrorsv+0x98>)
 80179c4:	681b      	ldr	r3, [r3, #0]
 80179c6:	3301      	adds	r3, #1
 80179c8:	4a22      	ldr	r2, [pc, #136]	; (8017a54 <_ZL17getColorForErrorsv+0x98>)
 80179ca:	6013      	str	r3, [r2, #0]
	if (color_index >= 3) {
 80179cc:	4b21      	ldr	r3, [pc, #132]	; (8017a54 <_ZL17getColorForErrorsv+0x98>)
 80179ce:	681b      	ldr	r3, [r3, #0]
 80179d0:	2b02      	cmp	r3, #2
 80179d2:	dd0f      	ble.n	80179f4 <_ZL17getColorForErrorsv+0x38>
		color_index = 0;
 80179d4:	4b1f      	ldr	r3, [pc, #124]	; (8017a54 <_ZL17getColorForErrorsv+0x98>)
 80179d6:	2200      	movs	r2, #0
 80179d8:	601a      	str	r2, [r3, #0]
		error_screen_blinks++;
 80179da:	4b1f      	ldr	r3, [pc, #124]	; (8017a58 <_ZL17getColorForErrorsv+0x9c>)
 80179dc:	681b      	ldr	r3, [r3, #0]
 80179de:	3301      	adds	r3, #1
 80179e0:	4a1d      	ldr	r2, [pc, #116]	; (8017a58 <_ZL17getColorForErrorsv+0x9c>)
 80179e2:	6013      	str	r3, [r2, #0]
		if (error_screen_blinks > 1000000) {
 80179e4:	4b1c      	ldr	r3, [pc, #112]	; (8017a58 <_ZL17getColorForErrorsv+0x9c>)
 80179e6:	681b      	ldr	r3, [r3, #0]
 80179e8:	4a1c      	ldr	r2, [pc, #112]	; (8017a5c <_ZL17getColorForErrorsv+0xa0>)
 80179ea:	4293      	cmp	r3, r2
 80179ec:	dd02      	ble.n	80179f4 <_ZL17getColorForErrorsv+0x38>
			error_screen_blinks = 0;
 80179ee:	4b1a      	ldr	r3, [pc, #104]	; (8017a58 <_ZL17getColorForErrorsv+0x9c>)
 80179f0:	2200      	movs	r2, #0
 80179f2:	601a      	str	r2, [r3, #0]
		}
	}

	colortype red_color = touchgfx::Color::getColorFrom24BitRGB(255, 0, 0);
 80179f4:	2200      	movs	r2, #0
 80179f6:	2100      	movs	r1, #0
 80179f8:	20ff      	movs	r0, #255	; 0xff
 80179fa:	f7fb fe87 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80179fe:	4603      	mov	r3, r0
 8017a00:	60fb      	str	r3, [r7, #12]
	colortype black_color = touchgfx::Color::getColorFrom24BitRGB(0, 0, 0);
 8017a02:	2200      	movs	r2, #0
 8017a04:	2100      	movs	r1, #0
 8017a06:	2000      	movs	r0, #0
 8017a08:	f7fb fe80 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8017a0c:	4603      	mov	r3, r0
 8017a0e:	60bb      	str	r3, [r7, #8]
	colortype white_color = touchgfx::Color::getColorFrom24BitRGB(255, 255,
			255);
 8017a10:	22ff      	movs	r2, #255	; 0xff
 8017a12:	21ff      	movs	r1, #255	; 0xff
 8017a14:	20ff      	movs	r0, #255	; 0xff
 8017a16:	f7fb fe79 	bl	801370c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8017a1a:	4603      	mov	r3, r0
 8017a1c:	607b      	str	r3, [r7, #4]

	colortype color_to_set;
 8017a1e:	463b      	mov	r3, r7
 8017a20:	4618      	mov	r0, r3
 8017a22:	f7fa fe52 	bl	80126ca <_ZN8touchgfx9colortypeC1Ev>

	if (color_index == 0) {
 8017a26:	4b0b      	ldr	r3, [pc, #44]	; (8017a54 <_ZL17getColorForErrorsv+0x98>)
 8017a28:	681b      	ldr	r3, [r3, #0]
 8017a2a:	2b00      	cmp	r3, #0
 8017a2c:	d101      	bne.n	8017a32 <_ZL17getColorForErrorsv+0x76>
		color_to_set = red_color;
 8017a2e:	68fb      	ldr	r3, [r7, #12]
 8017a30:	603b      	str	r3, [r7, #0]
	}
	if (color_index == 1) {
 8017a32:	4b08      	ldr	r3, [pc, #32]	; (8017a54 <_ZL17getColorForErrorsv+0x98>)
 8017a34:	681b      	ldr	r3, [r3, #0]
 8017a36:	2b01      	cmp	r3, #1
 8017a38:	d101      	bne.n	8017a3e <_ZL17getColorForErrorsv+0x82>
		color_to_set = black_color;
 8017a3a:	68bb      	ldr	r3, [r7, #8]
 8017a3c:	603b      	str	r3, [r7, #0]
	}
	if (color_index == 2) {
 8017a3e:	4b05      	ldr	r3, [pc, #20]	; (8017a54 <_ZL17getColorForErrorsv+0x98>)
 8017a40:	681b      	ldr	r3, [r3, #0]
 8017a42:	2b02      	cmp	r3, #2
 8017a44:	d101      	bne.n	8017a4a <_ZL17getColorForErrorsv+0x8e>
		color_to_set = white_color;
 8017a46:	687b      	ldr	r3, [r7, #4]
 8017a48:	603b      	str	r3, [r7, #0]
	}

	return color_to_set;
 8017a4a:	683b      	ldr	r3, [r7, #0]
}
 8017a4c:	4618      	mov	r0, r3
 8017a4e:	3710      	adds	r7, #16
 8017a50:	46bd      	mov	sp, r7
 8017a52:	bd80      	pop	{r7, pc}
 8017a54:	2000880c 	.word	0x2000880c
 8017a58:	20008810 	.word	0x20008810
 8017a5c:	000f4240 	.word	0x000f4240

08017a60 <_ZN16SecondScreenView11setupScreenEv>:

void SecondScreenView::setupScreen() {
 8017a60:	b580      	push	{r7, lr}
 8017a62:	b082      	sub	sp, #8
 8017a64:	af00      	add	r7, sp, #0
 8017a66:	6078      	str	r0, [r7, #4]
	SecondScreenViewBase::setupScreen();
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	4618      	mov	r0, r3
 8017a6c:	f7fe fcd0 	bl	8016410 <_ZN20SecondScreenViewBase11setupScreenEv>
}
 8017a70:	bf00      	nop
 8017a72:	3708      	adds	r7, #8
 8017a74:	46bd      	mov	sp, r7
 8017a76:	bd80      	pop	{r7, pc}

08017a78 <_ZN16SecondScreenView14tearDownScreenEv>:

void SecondScreenView::tearDownScreen() {
 8017a78:	b580      	push	{r7, lr}
 8017a7a:	b082      	sub	sp, #8
 8017a7c:	af00      	add	r7, sp, #0
 8017a7e:	6078      	str	r0, [r7, #4]
	SecondScreenViewBase::tearDownScreen();
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	4618      	mov	r0, r3
 8017a84:	f7fb f866 	bl	8012b54 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8017a88:	bf00      	nop
 8017a8a:	3708      	adds	r7, #8
 8017a8c:	46bd      	mov	sp, r7
 8017a8e:	bd80      	pop	{r7, pc}

08017a90 <_ZN16SecondScreenView14updateSettingsEPh>:

void SecondScreenView::updateSettings(uint8_t *settings) {
 8017a90:	b480      	push	{r7}
 8017a92:	b083      	sub	sp, #12
 8017a94:	af00      	add	r7, sp, #0
 8017a96:	6078      	str	r0, [r7, #4]
 8017a98:	6039      	str	r1, [r7, #0]
}
 8017a9a:	bf00      	nop
 8017a9c:	370c      	adds	r7, #12
 8017a9e:	46bd      	mov	sp, r7
 8017aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017aa4:	4770      	bx	lr

08017aa6 <_ZL11isKthBitSetii>:

static bool isKthBitSet(int n, int k) {
 8017aa6:	b480      	push	{r7}
 8017aa8:	b083      	sub	sp, #12
 8017aaa:	af00      	add	r7, sp, #0
 8017aac:	6078      	str	r0, [r7, #4]
 8017aae:	6039      	str	r1, [r7, #0]
	if (n & (1 << (k - 1))) {
 8017ab0:	683b      	ldr	r3, [r7, #0]
 8017ab2:	3b01      	subs	r3, #1
 8017ab4:	687a      	ldr	r2, [r7, #4]
 8017ab6:	fa42 f303 	asr.w	r3, r2, r3
 8017aba:	f003 0301 	and.w	r3, r3, #1
 8017abe:	2b00      	cmp	r3, #0
 8017ac0:	d001      	beq.n	8017ac6 <_ZL11isKthBitSetii+0x20>
		return true;
 8017ac2:	2301      	movs	r3, #1
 8017ac4:	e000      	b.n	8017ac8 <_ZL11isKthBitSetii+0x22>
	} else {
		return false;
 8017ac6:	2300      	movs	r3, #0
	}
}
 8017ac8:	4618      	mov	r0, r3
 8017aca:	370c      	adds	r7, #12
 8017acc:	46bd      	mov	sp, r7
 8017ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ad2:	4770      	bx	lr

08017ad4 <_ZN16SecondScreenView9updateValEPh>:
		break;
	}
	return a;
}

void SecondScreenView::updateVal(uint8_t *newValue) {
 8017ad4:	b590      	push	{r4, r7, lr}
 8017ad6:	b097      	sub	sp, #92	; 0x5c
 8017ad8:	af00      	add	r7, sp, #0
 8017ada:	6078      	str	r0, [r7, #4]
 8017adc:	6039      	str	r1, [r7, #0]

	display_values *values = (display_values*) newValue;
 8017ade:	683b      	ldr	r3, [r7, #0]
 8017ae0:	657b      	str	r3, [r7, #84]	; 0x54

	if (values->ing_ang != prev_ign_ang) {
 8017ae2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017ae4:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8017ae8:	4ba5      	ldr	r3, [pc, #660]	; (8017d80 <_ZN16SecondScreenView9updateValEPh+0x2ac>)
 8017aea:	edd3 7a00 	vldr	s15, [r3]
 8017aee:	eeb4 7a67 	vcmp.f32	s14, s15
 8017af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017af6:	d014      	beq.n	8017b22 <_ZN16SecondScreenView9updateValEPh+0x4e>
		prev_ign_ang = values->ing_ang;
 8017af8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017afc:	4aa0      	ldr	r2, [pc, #640]	; (8017d80 <_ZN16SecondScreenView9updateValEPh+0x2ac>)
 8017afe:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(IngAngValueBuffer, INGANGVALUE_SIZE, "%.1f",
 8017b00:	687b      	ldr	r3, [r7, #4]
 8017b02:	f203 4014 	addw	r0, r3, #1044	; 0x414
 8017b06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017b08:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8017b0c:	eeb0 0a67 	vmov.f32	s0, s15
 8017b10:	4a9c      	ldr	r2, [pc, #624]	; (8017d84 <_ZN16SecondScreenView9updateValEPh+0x2b0>)
 8017b12:	2105      	movs	r1, #5
 8017b14:	f7ff f96c 	bl	8016df0 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
				values->ing_ang);
		IngAngValue.invalidate();
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	33e8      	adds	r3, #232	; 0xe8
 8017b1c:	4618      	mov	r0, r3
 8017b1e:	f007 fa2f 	bl	801ef80 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->ve != prev_ve) {
 8017b22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017b24:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8017b28:	4b97      	ldr	r3, [pc, #604]	; (8017d88 <_ZN16SecondScreenView9updateValEPh+0x2b4>)
 8017b2a:	edd3 7a00 	vldr	s15, [r3]
 8017b2e:	eeb4 7a67 	vcmp.f32	s14, s15
 8017b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b36:	d015      	beq.n	8017b64 <_ZN16SecondScreenView9updateValEPh+0x90>
		prev_ve = values->ve;
 8017b38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b3c:	4a92      	ldr	r2, [pc, #584]	; (8017d88 <_ZN16SecondScreenView9updateValEPh+0x2b4>)
 8017b3e:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(VeValueBuffer, VEVALUE_SIZE, "%.1f", values->ve);
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	f203 4064 	addw	r0, r3, #1124	; 0x464
 8017b46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017b48:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8017b4c:	eeb0 0a67 	vmov.f32	s0, s15
 8017b50:	4a8c      	ldr	r2, [pc, #560]	; (8017d84 <_ZN16SecondScreenView9updateValEPh+0x2b0>)
 8017b52:	2105      	movs	r1, #5
 8017b54:	f7ff f94c 	bl	8016df0 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
		VeValue.invalidate();
 8017b58:	687b      	ldr	r3, [r7, #4]
 8017b5a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8017b5e:	4618      	mov	r0, r3
 8017b60:	f007 fa0e 	bl	801ef80 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->boost_dc != prev_boost_dc) {
 8017b64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017b66:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8017b6a:	4b88      	ldr	r3, [pc, #544]	; (8017d8c <_ZN16SecondScreenView9updateValEPh+0x2b8>)
 8017b6c:	edd3 7a00 	vldr	s15, [r3]
 8017b70:	eeb4 7a67 	vcmp.f32	s14, s15
 8017b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b78:	d015      	beq.n	8017ba6 <_ZN16SecondScreenView9updateValEPh+0xd2>
		prev_boost_dc = values->boost_dc;
 8017b7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017b7e:	4a83      	ldr	r2, [pc, #524]	; (8017d8c <_ZN16SecondScreenView9updateValEPh+0x2b8>)
 8017b80:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(BoostDcValueBuffer, BOOSTDCVALUE_SIZE, "%.1f",
 8017b82:	687b      	ldr	r3, [r7, #4]
 8017b84:	f203 406e 	addw	r0, r3, #1134	; 0x46e
 8017b88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017b8a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8017b8e:	eeb0 0a67 	vmov.f32	s0, s15
 8017b92:	4a7c      	ldr	r2, [pc, #496]	; (8017d84 <_ZN16SecondScreenView9updateValEPh+0x2b0>)
 8017b94:	2105      	movs	r1, #5
 8017b96:	f7ff f92b 	bl	8016df0 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
				values->boost_dc);
		BoostDcValue.invalidate();
 8017b9a:	687b      	ldr	r3, [r7, #4]
 8017b9c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8017ba0:	4618      	mov	r0, r3
 8017ba2:	f007 f9ed 	bl	801ef80 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->boost_trgt != prev_boost_trgt) {
 8017ba6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017ba8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8017baa:	4b79      	ldr	r3, [pc, #484]	; (8017d90 <_ZN16SecondScreenView9updateValEPh+0x2bc>)
 8017bac:	681b      	ldr	r3, [r3, #0]
 8017bae:	429a      	cmp	r2, r3
 8017bb0:	d012      	beq.n	8017bd8 <_ZN16SecondScreenView9updateValEPh+0x104>
		prev_boost_trgt = values->boost_trgt;
 8017bb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017bb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017bb6:	4a76      	ldr	r2, [pc, #472]	; (8017d90 <_ZN16SecondScreenView9updateValEPh+0x2bc>)
 8017bb8:	6013      	str	r3, [r2, #0]
		Unicode::snprintf(BoostTrgtValueBuffer, BOOSTTRGTVALUE_SIZE, "%d",
 8017bba:	687b      	ldr	r3, [r7, #4]
 8017bbc:	f503 608f 	add.w	r0, r3, #1144	; 0x478
 8017bc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017bc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017bc4:	4a73      	ldr	r2, [pc, #460]	; (8017d94 <_ZN16SecondScreenView9updateValEPh+0x2c0>)
 8017bc6:	2105      	movs	r1, #5
 8017bc8:	f008 fe42 	bl	8020850 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
				values->boost_trgt);
		BoostTrgtValue.invalidate();
 8017bcc:	687b      	ldr	r3, [r7, #4]
 8017bce:	f503 7333 	add.w	r3, r3, #716	; 0x2cc
 8017bd2:	4618      	mov	r0, r3
 8017bd4:	f007 f9d4 	bl	801ef80 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if (values->injector_dc != prev_injector_dc) {
 8017bd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017bda:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8017bde:	4b6e      	ldr	r3, [pc, #440]	; (8017d98 <_ZN16SecondScreenView9updateValEPh+0x2c4>)
 8017be0:	edd3 7a00 	vldr	s15, [r3]
 8017be4:	eeb4 7a67 	vcmp.f32	s14, s15
 8017be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017bec:	d015      	beq.n	8017c1a <_ZN16SecondScreenView9updateValEPh+0x146>
		prev_injector_dc = values->injector_dc;
 8017bee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017bf2:	4a69      	ldr	r2, [pc, #420]	; (8017d98 <_ZN16SecondScreenView9updateValEPh+0x2c4>)
 8017bf4:	6013      	str	r3, [r2, #0]
		Unicode::snprintfFloat(InjctorDcValueBuffer, INJCTORDCVALUE_SIZE,
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	f203 4082 	addw	r0, r3, #1154	; 0x482
 8017bfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017bfe:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8017c02:	eeb0 0a67 	vmov.f32	s0, s15
 8017c06:	4a5f      	ldr	r2, [pc, #380]	; (8017d84 <_ZN16SecondScreenView9updateValEPh+0x2b0>)
 8017c08:	2105      	movs	r1, #5
 8017c0a:	f7ff f8f1 	bl	8016df0 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
				"%.1f", values->injector_dc);
		InjctorDcValue.invalidate();
 8017c0e:	687b      	ldr	r3, [r7, #4]
 8017c10:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8017c14:	4618      	mov	r0, r3
 8017c16:	f007 f9b3 	bl	801ef80 <_ZNK8touchgfx8Drawable10invalidateEv>
	}
	bool has_error = ((int) values->emu_errors) > 0;
 8017c1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017c1e:	2b00      	cmp	r3, #0
 8017c20:	bfcc      	ite	gt
 8017c22:	2301      	movgt	r3, #1
 8017c24:	2300      	movle	r3, #0
 8017c26:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	bool has_protection_error = ((int) values->emu_protection) > 0;
 8017c2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017c2e:	2b00      	cmp	r3, #0
 8017c30:	bfcc      	ite	gt
 8017c32:	2301      	movgt	r3, #1
 8017c34:	2300      	movle	r3, #0
 8017c36:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
	bool has_check_eng_code = ((int) values->check_eng_code) > 0;
 8017c3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017c3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017c3e:	2b00      	cmp	r3, #0
 8017c40:	bfcc      	ite	gt
 8017c42:	2301      	movgt	r3, #1
 8017c44:	2300      	movle	r3, #0
 8017c46:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	bool has_eng_prot_code = ((int) values->eng_protection_code) > 0;
 8017c4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017c4e:	2b00      	cmp	r3, #0
 8017c50:	bfcc      	ite	gt
 8017c52:	2301      	movgt	r3, #1
 8017c54:	2300      	movle	r3, #0
 8017c56:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	if (has_check_eng_code) {
 8017c5a:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8017c5e:	2b00      	cmp	r3, #0
 8017c60:	d03a      	beq.n	8017cd8 <_ZN16SecondScreenView9updateValEPh+0x204>
		if (error_screen_blinks < 100) {
 8017c62:	4b4e      	ldr	r3, [pc, #312]	; (8017d9c <_ZN16SecondScreenView9updateValEPh+0x2c8>)
 8017c64:	681b      	ldr	r3, [r3, #0]
 8017c66:	2b63      	cmp	r3, #99	; 0x63
 8017c68:	dc0a      	bgt.n	8017c80 <_ZN16SecondScreenView9updateValEPh+0x1ac>
			backgroundBox.setColor(getColorForErrors());
 8017c6a:	687b      	ldr	r3, [r7, #4]
 8017c6c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8017c70:	f7ff fea4 	bl	80179bc <_ZL17getColorForErrorsv>
 8017c74:	4603      	mov	r3, r0
 8017c76:	4619      	mov	r1, r3
 8017c78:	4620      	mov	r0, r4
 8017c7a:	f7fb f835 	bl	8012ce8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
 8017c7e:	e009      	b.n	8017c94 <_ZN16SecondScreenView9updateValEPh+0x1c0>
		} else {
			backgroundBox.setColor(getRedColor());
 8017c80:	687b      	ldr	r3, [r7, #4]
 8017c82:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8017c86:	f7ff fe8a 	bl	801799e <_ZL11getRedColorv>
 8017c8a:	4603      	mov	r3, r0
 8017c8c:	4619      	mov	r1, r3
 8017c8e:	4620      	mov	r0, r4
 8017c90:	f7fb f82a 	bl	8012ce8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		}
		backgroundBox.invalidate();
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	3340      	adds	r3, #64	; 0x40
 8017c98:	4618      	mov	r0, r3
 8017c9a:	f007 f971 	bl	801ef80 <_ZNK8touchgfx8Drawable10invalidateEv>
		CheckEngCodeValue.setVisible(true);
 8017c9e:	687b      	ldr	r3, [r7, #4]
 8017ca0:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8017ca4:	2101      	movs	r1, #1
 8017ca6:	4618      	mov	r0, r3
 8017ca8:	f7fa fe5d 	bl	8012966 <_ZN8touchgfx8Drawable10setVisibleEb>
		Unicode::snprintf(CheckEngCodeValueBuffer, CHECKENGCODEVALUE_SIZE, "%d",
 8017cac:	687b      	ldr	r3, [r7, #4]
 8017cae:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 8017cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017cb6:	4a37      	ldr	r2, [pc, #220]	; (8017d94 <_ZN16SecondScreenView9updateValEPh+0x2c0>)
 8017cb8:	2123      	movs	r1, #35	; 0x23
 8017cba:	f008 fdc9 	bl	8020850 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
				values->check_eng_code);
		CheckEngCodeValue.invalidate();
 8017cbe:	687b      	ldr	r3, [r7, #4]
 8017cc0:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8017cc4:	4618      	mov	r0, r3
 8017cc6:	f007 f95b 	bl	801ef80 <_ZNK8touchgfx8Drawable10invalidateEv>
		check_eng_code = values->check_eng_code;
 8017cca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017cce:	4a34      	ldr	r2, [pc, #208]	; (8017da0 <_ZN16SecondScreenView9updateValEPh+0x2cc>)
 8017cd0:	6013      	str	r3, [r2, #0]
		prev_error = true;
 8017cd2:	4b34      	ldr	r3, [pc, #208]	; (8017da4 <_ZN16SecondScreenView9updateValEPh+0x2d0>)
 8017cd4:	2201      	movs	r2, #1
 8017cd6:	701a      	strb	r2, [r3, #0]
	}
	if (has_eng_prot_code) {
 8017cd8:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8017cdc:	2b00      	cmp	r3, #0
 8017cde:	d03a      	beq.n	8017d56 <_ZN16SecondScreenView9updateValEPh+0x282>
		if (error_screen_blinks < 100) {
 8017ce0:	4b2e      	ldr	r3, [pc, #184]	; (8017d9c <_ZN16SecondScreenView9updateValEPh+0x2c8>)
 8017ce2:	681b      	ldr	r3, [r3, #0]
 8017ce4:	2b63      	cmp	r3, #99	; 0x63
 8017ce6:	dc0a      	bgt.n	8017cfe <_ZN16SecondScreenView9updateValEPh+0x22a>
			backgroundBox.setColor(getColorForErrors());
 8017ce8:	687b      	ldr	r3, [r7, #4]
 8017cea:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8017cee:	f7ff fe65 	bl	80179bc <_ZL17getColorForErrorsv>
 8017cf2:	4603      	mov	r3, r0
 8017cf4:	4619      	mov	r1, r3
 8017cf6:	4620      	mov	r0, r4
 8017cf8:	f7fa fff6 	bl	8012ce8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
 8017cfc:	e009      	b.n	8017d12 <_ZN16SecondScreenView9updateValEPh+0x23e>
		} else {
			backgroundBox.setColor(getRedColor());
 8017cfe:	687b      	ldr	r3, [r7, #4]
 8017d00:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8017d04:	f7ff fe4b 	bl	801799e <_ZL11getRedColorv>
 8017d08:	4603      	mov	r3, r0
 8017d0a:	4619      	mov	r1, r3
 8017d0c:	4620      	mov	r0, r4
 8017d0e:	f7fa ffeb 	bl	8012ce8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		}
		backgroundBox.invalidate();
 8017d12:	687b      	ldr	r3, [r7, #4]
 8017d14:	3340      	adds	r3, #64	; 0x40
 8017d16:	4618      	mov	r0, r3
 8017d18:	f007 f932 	bl	801ef80 <_ZNK8touchgfx8Drawable10invalidateEv>
		EngProtCodeValue.setVisible(true);
 8017d1c:	687b      	ldr	r3, [r7, #4]
 8017d1e:	f503 7377 	add.w	r3, r3, #988	; 0x3dc
 8017d22:	2101      	movs	r1, #1
 8017d24:	4618      	mov	r0, r3
 8017d26:	f7fa fe1e 	bl	8012966 <_ZN8touchgfx8Drawable10setVisibleEb>
		Unicode::snprintf(EngProtCodeValueBuffer, ENGPROTCODEVALUE_SIZE, "%d",
 8017d2a:	687b      	ldr	r3, [r7, #4]
 8017d2c:	f203 40d2 	addw	r0, r3, #1234	; 0x4d2
 8017d30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017d34:	4a17      	ldr	r2, [pc, #92]	; (8017d94 <_ZN16SecondScreenView9updateValEPh+0x2c0>)
 8017d36:	2123      	movs	r1, #35	; 0x23
 8017d38:	f008 fd8a 	bl	8020850 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
				values->eng_protection_code);
		EngProtCodeValue.invalidate();
 8017d3c:	687b      	ldr	r3, [r7, #4]
 8017d3e:	f503 7377 	add.w	r3, r3, #988	; 0x3dc
 8017d42:	4618      	mov	r0, r3
 8017d44:	f007 f91c 	bl	801ef80 <_ZNK8touchgfx8Drawable10invalidateEv>
		eng_prot_code = values->eng_protection_code;
 8017d48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017d4c:	4a16      	ldr	r2, [pc, #88]	; (8017da8 <_ZN16SecondScreenView9updateValEPh+0x2d4>)
 8017d4e:	6013      	str	r3, [r2, #0]
		prev_error = true;
 8017d50:	4b14      	ldr	r3, [pc, #80]	; (8017da4 <_ZN16SecondScreenView9updateValEPh+0x2d0>)
 8017d52:	2201      	movs	r2, #1
 8017d54:	701a      	strb	r2, [r3, #0]
	}
	if (has_error) {
 8017d56:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8017d5a:	2b00      	cmp	r3, #0
 8017d5c:	f000 816c 	beq.w	8018038 <_ZN16SecondScreenView9updateValEPh+0x564>
		if (error_screen_blinks < 100) {
 8017d60:	4b0e      	ldr	r3, [pc, #56]	; (8017d9c <_ZN16SecondScreenView9updateValEPh+0x2c8>)
 8017d62:	681b      	ldr	r3, [r3, #0]
 8017d64:	2b63      	cmp	r3, #99	; 0x63
 8017d66:	dc21      	bgt.n	8017dac <_ZN16SecondScreenView9updateValEPh+0x2d8>
			backgroundBox.setColor(getColorForErrors());
 8017d68:	687b      	ldr	r3, [r7, #4]
 8017d6a:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8017d6e:	f7ff fe25 	bl	80179bc <_ZL17getColorForErrorsv>
 8017d72:	4603      	mov	r3, r0
 8017d74:	4619      	mov	r1, r3
 8017d76:	4620      	mov	r0, r4
 8017d78:	f7fa ffb6 	bl	8012ce8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
 8017d7c:	e020      	b.n	8017dc0 <_ZN16SecondScreenView9updateValEPh+0x2ec>
 8017d7e:	bf00      	nop
 8017d80:	20000050 	.word	0x20000050
 8017d84:	0802c0e4 	.word	0x0802c0e4
 8017d88:	200087fc 	.word	0x200087fc
 8017d8c:	20008800 	.word	0x20008800
 8017d90:	20008804 	.word	0x20008804
 8017d94:	0802c0ec 	.word	0x0802c0ec
 8017d98:	20008808 	.word	0x20008808
 8017d9c:	20008810 	.word	0x20008810
 8017da0:	2000881c 	.word	0x2000881c
 8017da4:	20000054 	.word	0x20000054
 8017da8:	20008820 	.word	0x20008820
		} else {
			backgroundBox.setColor(getRedColor());
 8017dac:	687b      	ldr	r3, [r7, #4]
 8017dae:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8017db2:	f7ff fdf4 	bl	801799e <_ZL11getRedColorv>
 8017db6:	4603      	mov	r3, r0
 8017db8:	4619      	mov	r1, r3
 8017dba:	4620      	mov	r0, r4
 8017dbc:	f7fa ff94 	bl	8012ce8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		}
		backgroundBox.invalidate();
 8017dc0:	687b      	ldr	r3, [r7, #4]
 8017dc2:	3340      	adds	r3, #64	; 0x40
 8017dc4:	4618      	mov	r0, r3
 8017dc6:	f007 f8db 	bl	801ef80 <_ZNK8touchgfx8Drawable10invalidateEv>

		if (isKthBitSet((int) values->emu_errors, (int) 1)) {
 8017dca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017dce:	2101      	movs	r1, #1
 8017dd0:	4618      	mov	r0, r3
 8017dd2:	f7ff fe68 	bl	8017aa6 <_ZL11isKthBitSetii>
 8017dd6:	4603      	mov	r3, r0
 8017dd8:	2b00      	cmp	r3, #0
 8017dda:	d010      	beq.n	8017dfe <_ZN16SecondScreenView9updateValEPh+0x32a>
			ErrorMessage.setTypedText(TypedText(T_COOLANT_SENSOR_FAILURE));
 8017ddc:	687b      	ldr	r3, [r7, #4]
 8017dde:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 8017de2:	f107 0308 	add.w	r3, r7, #8
 8017de6:	213b      	movs	r1, #59	; 0x3b
 8017de8:	4618      	mov	r0, r3
 8017dea:	f7fa ff8b 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8017dee:	8939      	ldrh	r1, [r7, #8]
 8017df0:	4620      	mov	r0, r4
 8017df2:	f005 f82f 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
			*error = T_COOLANT_SENSOR_FAILURE;
 8017df6:	4b9a      	ldr	r3, [pc, #616]	; (8018060 <_ZN16SecondScreenView9updateValEPh+0x58c>)
 8017df8:	681b      	ldr	r3, [r3, #0]
 8017dfa:	223b      	movs	r2, #59	; 0x3b
 8017dfc:	701a      	strb	r2, [r3, #0]
		}
		if (isKthBitSet((int) values->emu_errors, (int) 2)) {
 8017dfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017e02:	2102      	movs	r1, #2
 8017e04:	4618      	mov	r0, r3
 8017e06:	f7ff fe4e 	bl	8017aa6 <_ZL11isKthBitSetii>
 8017e0a:	4603      	mov	r3, r0
 8017e0c:	2b00      	cmp	r3, #0
 8017e0e:	d010      	beq.n	8017e32 <_ZN16SecondScreenView9updateValEPh+0x35e>
			ErrorMessage.setTypedText(TypedText(T_IAT_SENSOR_FAILURE));
 8017e10:	687b      	ldr	r3, [r7, #4]
 8017e12:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 8017e16:	f107 030c 	add.w	r3, r7, #12
 8017e1a:	213e      	movs	r1, #62	; 0x3e
 8017e1c:	4618      	mov	r0, r3
 8017e1e:	f7fa ff71 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8017e22:	89b9      	ldrh	r1, [r7, #12]
 8017e24:	4620      	mov	r0, r4
 8017e26:	f005 f815 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
			*error = T_IAT_SENSOR_FAILURE;
 8017e2a:	4b8d      	ldr	r3, [pc, #564]	; (8018060 <_ZN16SecondScreenView9updateValEPh+0x58c>)
 8017e2c:	681b      	ldr	r3, [r3, #0]
 8017e2e:	223e      	movs	r2, #62	; 0x3e
 8017e30:	701a      	strb	r2, [r3, #0]
		}
		if (isKthBitSet((int) values->emu_errors, (int) 3)) {
 8017e32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017e36:	2103      	movs	r1, #3
 8017e38:	4618      	mov	r0, r3
 8017e3a:	f7ff fe34 	bl	8017aa6 <_ZL11isKthBitSetii>
 8017e3e:	4603      	mov	r3, r0
 8017e40:	2b00      	cmp	r3, #0
 8017e42:	d010      	beq.n	8017e66 <_ZN16SecondScreenView9updateValEPh+0x392>
			ErrorMessage.setTypedText(TypedText(T_MAP_SENSOR_FAILURE));
 8017e44:	687b      	ldr	r3, [r7, #4]
 8017e46:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 8017e4a:	f107 0310 	add.w	r3, r7, #16
 8017e4e:	213f      	movs	r1, #63	; 0x3f
 8017e50:	4618      	mov	r0, r3
 8017e52:	f7fa ff57 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8017e56:	8a39      	ldrh	r1, [r7, #16]
 8017e58:	4620      	mov	r0, r4
 8017e5a:	f004 fffb 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
			*error = T_MAP_SENSOR_FAILURE;
 8017e5e:	4b80      	ldr	r3, [pc, #512]	; (8018060 <_ZN16SecondScreenView9updateValEPh+0x58c>)
 8017e60:	681b      	ldr	r3, [r3, #0]
 8017e62:	223f      	movs	r2, #63	; 0x3f
 8017e64:	701a      	strb	r2, [r3, #0]
		}
		if (isKthBitSet((int) values->emu_errors, (int) 4)) {
 8017e66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017e6a:	2104      	movs	r1, #4
 8017e6c:	4618      	mov	r0, r3
 8017e6e:	f7ff fe1a 	bl	8017aa6 <_ZL11isKthBitSetii>
 8017e72:	4603      	mov	r3, r0
 8017e74:	2b00      	cmp	r3, #0
 8017e76:	d010      	beq.n	8017e9a <_ZN16SecondScreenView9updateValEPh+0x3c6>
			ErrorMessage.setTypedText(TypedText(T_O2_SENSOR_FAILED));
 8017e78:	687b      	ldr	r3, [r7, #4]
 8017e7a:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 8017e7e:	f107 0314 	add.w	r3, r7, #20
 8017e82:	2140      	movs	r1, #64	; 0x40
 8017e84:	4618      	mov	r0, r3
 8017e86:	f7fa ff3d 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8017e8a:	8ab9      	ldrh	r1, [r7, #20]
 8017e8c:	4620      	mov	r0, r4
 8017e8e:	f004 ffe1 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
			*error = T_O2_SENSOR_FAILED;
 8017e92:	4b73      	ldr	r3, [pc, #460]	; (8018060 <_ZN16SecondScreenView9updateValEPh+0x58c>)
 8017e94:	681b      	ldr	r3, [r3, #0]
 8017e96:	2240      	movs	r2, #64	; 0x40
 8017e98:	701a      	strb	r2, [r3, #0]
		}
		if (isKthBitSet((int) values->emu_errors, (int) 5)) {
 8017e9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017e9e:	2105      	movs	r1, #5
 8017ea0:	4618      	mov	r0, r3
 8017ea2:	f7ff fe00 	bl	8017aa6 <_ZL11isKthBitSetii>
 8017ea6:	4603      	mov	r3, r0
 8017ea8:	2b00      	cmp	r3, #0
 8017eaa:	d010      	beq.n	8017ece <_ZN16SecondScreenView9updateValEPh+0x3fa>
			ErrorMessage.setTypedText(TypedText(T_EGT1_SESNSOR_FAILED));
 8017eac:	687b      	ldr	r3, [r7, #4]
 8017eae:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 8017eb2:	f107 0318 	add.w	r3, r7, #24
 8017eb6:	2141      	movs	r1, #65	; 0x41
 8017eb8:	4618      	mov	r0, r3
 8017eba:	f7fa ff23 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8017ebe:	8b39      	ldrh	r1, [r7, #24]
 8017ec0:	4620      	mov	r0, r4
 8017ec2:	f004 ffc7 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
			*error = T_EGT1_SESNSOR_FAILED;
 8017ec6:	4b66      	ldr	r3, [pc, #408]	; (8018060 <_ZN16SecondScreenView9updateValEPh+0x58c>)
 8017ec8:	681b      	ldr	r3, [r3, #0]
 8017eca:	2241      	movs	r2, #65	; 0x41
 8017ecc:	701a      	strb	r2, [r3, #0]
		}
		if (isKthBitSet((int) values->emu_errors, (int) 6)) {
 8017ece:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017ed2:	2106      	movs	r1, #6
 8017ed4:	4618      	mov	r0, r3
 8017ed6:	f7ff fde6 	bl	8017aa6 <_ZL11isKthBitSetii>
 8017eda:	4603      	mov	r3, r0
 8017edc:	2b00      	cmp	r3, #0
 8017ede:	d010      	beq.n	8017f02 <_ZN16SecondScreenView9updateValEPh+0x42e>
			ErrorMessage.setTypedText(TypedText(T_EGT2_SENSOR_FAILED));
 8017ee0:	687b      	ldr	r3, [r7, #4]
 8017ee2:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 8017ee6:	f107 031c 	add.w	r3, r7, #28
 8017eea:	2142      	movs	r1, #66	; 0x42
 8017eec:	4618      	mov	r0, r3
 8017eee:	f7fa ff09 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8017ef2:	8bb9      	ldrh	r1, [r7, #28]
 8017ef4:	4620      	mov	r0, r4
 8017ef6:	f004 ffad 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
			*error = T_EGT2_SENSOR_FAILED;
 8017efa:	4b59      	ldr	r3, [pc, #356]	; (8018060 <_ZN16SecondScreenView9updateValEPh+0x58c>)
 8017efc:	681b      	ldr	r3, [r3, #0]
 8017efe:	2242      	movs	r2, #66	; 0x42
 8017f00:	701a      	strb	r2, [r3, #0]
		}
		if (isKthBitSet((int) values->emu_errors, (int) 7)) {
 8017f02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017f06:	2107      	movs	r1, #7
 8017f08:	4618      	mov	r0, r3
 8017f0a:	f7ff fdcc 	bl	8017aa6 <_ZL11isKthBitSetii>
 8017f0e:	4603      	mov	r3, r0
 8017f10:	2b00      	cmp	r3, #0
 8017f12:	d010      	beq.n	8017f36 <_ZN16SecondScreenView9updateValEPh+0x462>
			ErrorMessage.setTypedText(TypedText(T_EGT_HIGH));
 8017f14:	687b      	ldr	r3, [r7, #4]
 8017f16:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 8017f1a:	f107 0320 	add.w	r3, r7, #32
 8017f1e:	2143      	movs	r1, #67	; 0x43
 8017f20:	4618      	mov	r0, r3
 8017f22:	f7fa feef 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8017f26:	8c39      	ldrh	r1, [r7, #32]
 8017f28:	4620      	mov	r0, r4
 8017f2a:	f004 ff93 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
			*error = T_EGT_HIGH;
 8017f2e:	4b4c      	ldr	r3, [pc, #304]	; (8018060 <_ZN16SecondScreenView9updateValEPh+0x58c>)
 8017f30:	681b      	ldr	r3, [r3, #0]
 8017f32:	2243      	movs	r2, #67	; 0x43
 8017f34:	701a      	strb	r2, [r3, #0]
		}
		if (isKthBitSet((int) values->emu_errors, (int) 8)) {
 8017f36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017f3a:	2108      	movs	r1, #8
 8017f3c:	4618      	mov	r0, r3
 8017f3e:	f7ff fdb2 	bl	8017aa6 <_ZL11isKthBitSetii>
 8017f42:	4603      	mov	r3, r0
 8017f44:	2b00      	cmp	r3, #0
 8017f46:	d010      	beq.n	8017f6a <_ZN16SecondScreenView9updateValEPh+0x496>
			ErrorMessage.setTypedText(TypedText(T_KNOCKING));
 8017f48:	687b      	ldr	r3, [r7, #4]
 8017f4a:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 8017f4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017f52:	213d      	movs	r1, #61	; 0x3d
 8017f54:	4618      	mov	r0, r3
 8017f56:	f7fa fed5 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8017f5a:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8017f5c:	4620      	mov	r0, r4
 8017f5e:	f004 ff79 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
			*error = T_KNOCKING;
 8017f62:	4b3f      	ldr	r3, [pc, #252]	; (8018060 <_ZN16SecondScreenView9updateValEPh+0x58c>)
 8017f64:	681b      	ldr	r3, [r3, #0]
 8017f66:	223d      	movs	r2, #61	; 0x3d
 8017f68:	701a      	strb	r2, [r3, #0]
		}
		if (isKthBitSet((int) values->emu_errors, (int) 10)) {
 8017f6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017f6e:	210a      	movs	r1, #10
 8017f70:	4618      	mov	r0, r3
 8017f72:	f7ff fd98 	bl	8017aa6 <_ZL11isKthBitSetii>
 8017f76:	4603      	mov	r3, r0
 8017f78:	2b00      	cmp	r3, #0
 8017f7a:	d010      	beq.n	8017f9e <_ZN16SecondScreenView9updateValEPh+0x4ca>
			ErrorMessage.setTypedText(TypedText(T_DBW_SENSOR_FAILED));
 8017f7c:	687b      	ldr	r3, [r7, #4]
 8017f7e:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 8017f82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017f86:	2144      	movs	r1, #68	; 0x44
 8017f88:	4618      	mov	r0, r3
 8017f8a:	f7fa febb 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8017f8e:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8017f90:	4620      	mov	r0, r4
 8017f92:	f004 ff5f 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
			*error = T_DBW_SENSOR_FAILED;
 8017f96:	4b32      	ldr	r3, [pc, #200]	; (8018060 <_ZN16SecondScreenView9updateValEPh+0x58c>)
 8017f98:	681b      	ldr	r3, [r3, #0]
 8017f9a:	2244      	movs	r2, #68	; 0x44
 8017f9c:	701a      	strb	r2, [r3, #0]
		}
		if (isKthBitSet((int) values->emu_errors, (int) 11)) {
 8017f9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017fa2:	210b      	movs	r1, #11
 8017fa4:	4618      	mov	r0, r3
 8017fa6:	f7ff fd7e 	bl	8017aa6 <_ZL11isKthBitSetii>
 8017faa:	4603      	mov	r3, r0
 8017fac:	2b00      	cmp	r3, #0
 8017fae:	d010      	beq.n	8017fd2 <_ZN16SecondScreenView9updateValEPh+0x4fe>
			ErrorMessage.setTypedText(TypedText(T_FPR_RELATIVE_ERROR));
 8017fb0:	687b      	ldr	r3, [r7, #4]
 8017fb2:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 8017fb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8017fba:	2145      	movs	r1, #69	; 0x45
 8017fbc:	4618      	mov	r0, r3
 8017fbe:	f7fa fea1 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8017fc2:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8017fc4:	4620      	mov	r0, r4
 8017fc6:	f004 ff45 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
			*error = T_FPR_RELATIVE_ERROR;
 8017fca:	4b25      	ldr	r3, [pc, #148]	; (8018060 <_ZN16SecondScreenView9updateValEPh+0x58c>)
 8017fcc:	681b      	ldr	r3, [r3, #0]
 8017fce:	2245      	movs	r2, #69	; 0x45
 8017fd0:	701a      	strb	r2, [r3, #0]
		}

		int x = 240 - ErrorMessage.getTextWidth() / 2;
 8017fd2:	687b      	ldr	r3, [r7, #4]
 8017fd4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8017fd8:	4618      	mov	r0, r3
 8017fda:	f7ff fc69 	bl	80178b0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>
 8017fde:	4603      	mov	r3, r0
 8017fe0:	085b      	lsrs	r3, r3, #1
 8017fe2:	b29b      	uxth	r3, r3
 8017fe4:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8017fe8:	64bb      	str	r3, [r7, #72]	; 0x48
		ErrorMessage.setXY(x, 205);
 8017fea:	687b      	ldr	r3, [r7, #4]
 8017fec:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8017ff0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017ff2:	b211      	sxth	r1, r2
 8017ff4:	22cd      	movs	r2, #205	; 0xcd
 8017ff6:	4618      	mov	r0, r3
 8017ff8:	f7fa fc44 	bl	8012884 <_ZN8touchgfx8Drawable5setXYEss>
		ErrorMessage.resizeToCurrentText();
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8018002:	4618      	mov	r0, r3
 8018004:	f004 fefc 	bl	801ce00 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
		ErrorMessage.invalidate();
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801800e:	4618      	mov	r0, r3
 8018010:	f006 ffb6 	bl	801ef80 <_ZNK8touchgfx8Drawable10invalidateEv>
		nextErrorButton.setVisible(true);
 8018014:	687b      	ldr	r3, [r7, #4]
 8018016:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 801801a:	2101      	movs	r1, #1
 801801c:	4618      	mov	r0, r3
 801801e:	f7fa fca2 	bl	8012966 <_ZN8touchgfx8Drawable10setVisibleEb>
		clearErrorsBtn.setVisible(true);
 8018022:	687b      	ldr	r3, [r7, #4]
 8018024:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8018028:	2101      	movs	r1, #1
 801802a:	4618      	mov	r0, r3
 801802c:	f7fa fc9b 	bl	8012966 <_ZN8touchgfx8Drawable10setVisibleEb>
		prev_error = true;
 8018030:	4b0c      	ldr	r3, [pc, #48]	; (8018064 <_ZN16SecondScreenView9updateValEPh+0x590>)
 8018032:	2201      	movs	r2, #1
 8018034:	701a      	strb	r2, [r3, #0]
		CheckEngCodeValue.setVisible(false);
		EngProtCodeValue.setVisible(false);
		prev_error = false;
	}

}
 8018036:	e19b      	b.n	8018370 <_ZN16SecondScreenView9updateValEPh+0x89c>
	} else if (has_protection_error) {
 8018038:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 801803c:	2b00      	cmp	r3, #0
 801803e:	f000 80bf 	beq.w	80181c0 <_ZN16SecondScreenView9updateValEPh+0x6ec>
		if (error_screen_blinks < 100) {
 8018042:	4b09      	ldr	r3, [pc, #36]	; (8018068 <_ZN16SecondScreenView9updateValEPh+0x594>)
 8018044:	681b      	ldr	r3, [r3, #0]
 8018046:	2b63      	cmp	r3, #99	; 0x63
 8018048:	dc10      	bgt.n	801806c <_ZN16SecondScreenView9updateValEPh+0x598>
			backgroundBox.setColor(getColorForErrors());
 801804a:	687b      	ldr	r3, [r7, #4]
 801804c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8018050:	f7ff fcb4 	bl	80179bc <_ZL17getColorForErrorsv>
 8018054:	4603      	mov	r3, r0
 8018056:	4619      	mov	r1, r3
 8018058:	4620      	mov	r0, r4
 801805a:	f7fa fe45 	bl	8012ce8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
 801805e:	e00f      	b.n	8018080 <_ZN16SecondScreenView9updateValEPh+0x5ac>
 8018060:	20008814 	.word	0x20008814
 8018064:	20000054 	.word	0x20000054
 8018068:	20008810 	.word	0x20008810
			backgroundBox.setColor(getRedColor());
 801806c:	687b      	ldr	r3, [r7, #4]
 801806e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8018072:	f7ff fc94 	bl	801799e <_ZL11getRedColorv>
 8018076:	4603      	mov	r3, r0
 8018078:	4619      	mov	r1, r3
 801807a:	4620      	mov	r0, r4
 801807c:	f7fa fe34 	bl	8012ce8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		backgroundBox.invalidate();
 8018080:	687b      	ldr	r3, [r7, #4]
 8018082:	3340      	adds	r3, #64	; 0x40
 8018084:	4618      	mov	r0, r3
 8018086:	f006 ff7b 	bl	801ef80 <_ZNK8touchgfx8Drawable10invalidateEv>
		if (isKthBitSet((int) values->emu_protection, (int) 1)) {
 801808a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801808c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801808e:	2101      	movs	r1, #1
 8018090:	4618      	mov	r0, r3
 8018092:	f7ff fd08 	bl	8017aa6 <_ZL11isKthBitSetii>
 8018096:	4603      	mov	r3, r0
 8018098:	2b00      	cmp	r3, #0
 801809a:	d010      	beq.n	80180be <_ZN16SecondScreenView9updateValEPh+0x5ea>
			ErrorMessage.setTypedText(TypedText(T_OIL_TEMPERATURE_PROTECTION));
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 80180a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80180a6:	2152      	movs	r1, #82	; 0x52
 80180a8:	4618      	mov	r0, r3
 80180aa:	f7fa fe2b 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 80180ae:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 80180b0:	4620      	mov	r0, r4
 80180b2:	f004 fecf 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
			*error = T_OIL_TEMPERATURE_PROTECTION;
 80180b6:	4bb0      	ldr	r3, [pc, #704]	; (8018378 <_ZN16SecondScreenView9updateValEPh+0x8a4>)
 80180b8:	681b      	ldr	r3, [r3, #0]
 80180ba:	2252      	movs	r2, #82	; 0x52
 80180bc:	701a      	strb	r2, [r3, #0]
		if (isKthBitSet((int) values->emu_protection, (int) 2)) {
 80180be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80180c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80180c2:	2102      	movs	r1, #2
 80180c4:	4618      	mov	r0, r3
 80180c6:	f7ff fcee 	bl	8017aa6 <_ZL11isKthBitSetii>
 80180ca:	4603      	mov	r3, r0
 80180cc:	2b00      	cmp	r3, #0
 80180ce:	d010      	beq.n	80180f2 <_ZN16SecondScreenView9updateValEPh+0x61e>
			ErrorMessage.setTypedText(TypedText(T_CLT_PROTECTION));
 80180d0:	687b      	ldr	r3, [r7, #4]
 80180d2:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 80180d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80180da:	2154      	movs	r1, #84	; 0x54
 80180dc:	4618      	mov	r0, r3
 80180de:	f7fa fe11 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 80180e2:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 80180e4:	4620      	mov	r0, r4
 80180e6:	f004 feb5 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
			*error = T_CLT_PROTECTION;
 80180ea:	4ba3      	ldr	r3, [pc, #652]	; (8018378 <_ZN16SecondScreenView9updateValEPh+0x8a4>)
 80180ec:	681b      	ldr	r3, [r3, #0]
 80180ee:	2254      	movs	r2, #84	; 0x54
 80180f0:	701a      	strb	r2, [r3, #0]
		if (isKthBitSet((int) values->emu_protection, (int) 3)) {
 80180f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80180f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80180f6:	2103      	movs	r1, #3
 80180f8:	4618      	mov	r0, r3
 80180fa:	f7ff fcd4 	bl	8017aa6 <_ZL11isKthBitSetii>
 80180fe:	4603      	mov	r3, r0
 8018100:	2b00      	cmp	r3, #0
 8018102:	d010      	beq.n	8018126 <_ZN16SecondScreenView9updateValEPh+0x652>
			ErrorMessage.setTypedText(TypedText(T_OIL_PRESSSURE_PROTECTION));
 8018104:	687b      	ldr	r3, [r7, #4]
 8018106:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 801810a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801810e:	2153      	movs	r1, #83	; 0x53
 8018110:	4618      	mov	r0, r3
 8018112:	f7fa fdf7 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8018116:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8018118:	4620      	mov	r0, r4
 801811a:	f004 fe9b 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
			*error = T_OIL_PRESSSURE_PROTECTION;
 801811e:	4b96      	ldr	r3, [pc, #600]	; (8018378 <_ZN16SecondScreenView9updateValEPh+0x8a4>)
 8018120:	681b      	ldr	r3, [r3, #0]
 8018122:	2253      	movs	r2, #83	; 0x53
 8018124:	701a      	strb	r2, [r3, #0]
		if (isKthBitSet((int) values->emu_protection, (int) 4)) {
 8018126:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801812a:	2104      	movs	r1, #4
 801812c:	4618      	mov	r0, r3
 801812e:	f7ff fcba 	bl	8017aa6 <_ZL11isKthBitSetii>
 8018132:	4603      	mov	r3, r0
 8018134:	2b00      	cmp	r3, #0
 8018136:	d010      	beq.n	801815a <_ZN16SecondScreenView9updateValEPh+0x686>
			ErrorMessage.setTypedText(TypedText(T_FUEL_PRESSURE_PROTECTION));
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 801813e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8018142:	2155      	movs	r1, #85	; 0x55
 8018144:	4618      	mov	r0, r3
 8018146:	f7fa fddd 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 801814a:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 801814c:	4620      	mov	r0, r4
 801814e:	f004 fe81 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
			*error = T_FUEL_PRESSURE_PROTECTION;
 8018152:	4b89      	ldr	r3, [pc, #548]	; (8018378 <_ZN16SecondScreenView9updateValEPh+0x8a4>)
 8018154:	681b      	ldr	r3, [r3, #0]
 8018156:	2255      	movs	r2, #85	; 0x55
 8018158:	701a      	strb	r2, [r3, #0]
		int x = 240 - ErrorMessage.getTextWidth() / 2;
 801815a:	687b      	ldr	r3, [r7, #4]
 801815c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8018160:	4618      	mov	r0, r3
 8018162:	f7ff fba5 	bl	80178b0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>
 8018166:	4603      	mov	r3, r0
 8018168:	085b      	lsrs	r3, r3, #1
 801816a:	b29b      	uxth	r3, r3
 801816c:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8018170:	64fb      	str	r3, [r7, #76]	; 0x4c
		ErrorMessage.setXY(x, 205);
 8018172:	687b      	ldr	r3, [r7, #4]
 8018174:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8018178:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801817a:	b211      	sxth	r1, r2
 801817c:	22cd      	movs	r2, #205	; 0xcd
 801817e:	4618      	mov	r0, r3
 8018180:	f7fa fb80 	bl	8012884 <_ZN8touchgfx8Drawable5setXYEss>
		ErrorMessage.resizeToCurrentText();
 8018184:	687b      	ldr	r3, [r7, #4]
 8018186:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801818a:	4618      	mov	r0, r3
 801818c:	f004 fe38 	bl	801ce00 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
		ErrorMessage.invalidate();
 8018190:	687b      	ldr	r3, [r7, #4]
 8018192:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8018196:	4618      	mov	r0, r3
 8018198:	f006 fef2 	bl	801ef80 <_ZNK8touchgfx8Drawable10invalidateEv>
		nextErrorButton.setVisible(true);
 801819c:	687b      	ldr	r3, [r7, #4]
 801819e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80181a2:	2101      	movs	r1, #1
 80181a4:	4618      	mov	r0, r3
 80181a6:	f7fa fbde 	bl	8012966 <_ZN8touchgfx8Drawable10setVisibleEb>
		clearErrorsBtn.setVisible(true);
 80181aa:	687b      	ldr	r3, [r7, #4]
 80181ac:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 80181b0:	2101      	movs	r1, #1
 80181b2:	4618      	mov	r0, r3
 80181b4:	f7fa fbd7 	bl	8012966 <_ZN8touchgfx8Drawable10setVisibleEb>
		prev_error = true;
 80181b8:	4b70      	ldr	r3, [pc, #448]	; (801837c <_ZN16SecondScreenView9updateValEPh+0x8a8>)
 80181ba:	2201      	movs	r2, #1
 80181bc:	701a      	strb	r2, [r3, #0]
}
 80181be:	e0d7      	b.n	8018370 <_ZN16SecondScreenView9updateValEPh+0x89c>
	} else if (error || check_eng_code > 0 || eng_prot_code > 0) {
 80181c0:	4b6d      	ldr	r3, [pc, #436]	; (8018378 <_ZN16SecondScreenView9updateValEPh+0x8a4>)
 80181c2:	681b      	ldr	r3, [r3, #0]
 80181c4:	2b00      	cmp	r3, #0
 80181c6:	d107      	bne.n	80181d8 <_ZN16SecondScreenView9updateValEPh+0x704>
 80181c8:	4b6d      	ldr	r3, [pc, #436]	; (8018380 <_ZN16SecondScreenView9updateValEPh+0x8ac>)
 80181ca:	681b      	ldr	r3, [r3, #0]
 80181cc:	2b00      	cmp	r3, #0
 80181ce:	dc03      	bgt.n	80181d8 <_ZN16SecondScreenView9updateValEPh+0x704>
 80181d0:	4b6c      	ldr	r3, [pc, #432]	; (8018384 <_ZN16SecondScreenView9updateValEPh+0x8b0>)
 80181d2:	681b      	ldr	r3, [r3, #0]
 80181d4:	2b00      	cmp	r3, #0
 80181d6:	dd6f      	ble.n	80182b8 <_ZN16SecondScreenView9updateValEPh+0x7e4>
		CheckEngCodeValue.setVisible(true);
 80181d8:	687b      	ldr	r3, [r7, #4]
 80181da:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 80181de:	2101      	movs	r1, #1
 80181e0:	4618      	mov	r0, r3
 80181e2:	f7fa fbc0 	bl	8012966 <_ZN8touchgfx8Drawable10setVisibleEb>
		Unicode::snprintf(CheckEngCodeValueBuffer, CHECKENGCODEVALUE_SIZE, "%d",
 80181e6:	687b      	ldr	r3, [r7, #4]
 80181e8:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 80181ec:	4b64      	ldr	r3, [pc, #400]	; (8018380 <_ZN16SecondScreenView9updateValEPh+0x8ac>)
 80181ee:	681b      	ldr	r3, [r3, #0]
 80181f0:	4a65      	ldr	r2, [pc, #404]	; (8018388 <_ZN16SecondScreenView9updateValEPh+0x8b4>)
 80181f2:	2123      	movs	r1, #35	; 0x23
 80181f4:	f008 fb2c 	bl	8020850 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		CheckEngCodeValue.invalidate();
 80181f8:	687b      	ldr	r3, [r7, #4]
 80181fa:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 80181fe:	4618      	mov	r0, r3
 8018200:	f006 febe 	bl	801ef80 <_ZNK8touchgfx8Drawable10invalidateEv>
		EngProtCodeValue.setVisible(true);
 8018204:	687b      	ldr	r3, [r7, #4]
 8018206:	f503 7377 	add.w	r3, r3, #988	; 0x3dc
 801820a:	2101      	movs	r1, #1
 801820c:	4618      	mov	r0, r3
 801820e:	f7fa fbaa 	bl	8012966 <_ZN8touchgfx8Drawable10setVisibleEb>
		Unicode::snprintf(EngProtCodeValueBuffer, ENGPROTCODEVALUE_SIZE, "%d",
 8018212:	687b      	ldr	r3, [r7, #4]
 8018214:	f203 40d2 	addw	r0, r3, #1234	; 0x4d2
 8018218:	4b5a      	ldr	r3, [pc, #360]	; (8018384 <_ZN16SecondScreenView9updateValEPh+0x8b0>)
 801821a:	681b      	ldr	r3, [r3, #0]
 801821c:	4a5a      	ldr	r2, [pc, #360]	; (8018388 <_ZN16SecondScreenView9updateValEPh+0x8b4>)
 801821e:	2123      	movs	r1, #35	; 0x23
 8018220:	f008 fb16 	bl	8020850 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		EngProtCodeValue.invalidate();
 8018224:	687b      	ldr	r3, [r7, #4]
 8018226:	f503 7377 	add.w	r3, r3, #988	; 0x3dc
 801822a:	4618      	mov	r0, r3
 801822c:	f006 fea8 	bl	801ef80 <_ZNK8touchgfx8Drawable10invalidateEv>
		backgroundBox.setColor(getBlackColor());
 8018230:	687b      	ldr	r3, [r7, #4]
 8018232:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8018236:	f7ff fba3 	bl	8017980 <_ZL13getBlackColorv>
 801823a:	4603      	mov	r3, r0
 801823c:	4619      	mov	r1, r3
 801823e:	4620      	mov	r0, r4
 8018240:	f7fa fd52 	bl	8012ce8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		backgroundBox.invalidate();
 8018244:	687b      	ldr	r3, [r7, #4]
 8018246:	3340      	adds	r3, #64	; 0x40
 8018248:	4618      	mov	r0, r3
 801824a:	f006 fe99 	bl	801ef80 <_ZNK8touchgfx8Drawable10invalidateEv>
		ErrorMessage.setTypedText(TypedText(*error));
 801824e:	687b      	ldr	r3, [r7, #4]
 8018250:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 8018254:	4b48      	ldr	r3, [pc, #288]	; (8018378 <_ZN16SecondScreenView9updateValEPh+0x8a4>)
 8018256:	681b      	ldr	r3, [r3, #0]
 8018258:	781b      	ldrb	r3, [r3, #0]
 801825a:	b29a      	uxth	r2, r3
 801825c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018260:	4611      	mov	r1, r2
 8018262:	4618      	mov	r0, r3
 8018264:	f7fa fd4e 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 8018268:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 801826c:	4620      	mov	r0, r4
 801826e:	f004 fdf1 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
		ErrorMessage.setXY(193, 205);
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8018278:	22cd      	movs	r2, #205	; 0xcd
 801827a:	21c1      	movs	r1, #193	; 0xc1
 801827c:	4618      	mov	r0, r3
 801827e:	f7fa fb01 	bl	8012884 <_ZN8touchgfx8Drawable5setXYEss>
		ErrorMessage.invalidate();
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8018288:	4618      	mov	r0, r3
 801828a:	f006 fe79 	bl	801ef80 <_ZNK8touchgfx8Drawable10invalidateEv>
		nextErrorButton.setVisible(true);
 801828e:	687b      	ldr	r3, [r7, #4]
 8018290:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8018294:	2101      	movs	r1, #1
 8018296:	4618      	mov	r0, r3
 8018298:	f7fa fb65 	bl	8012966 <_ZN8touchgfx8Drawable10setVisibleEb>
		clearErrorsBtn.setVisible(true);
 801829c:	687b      	ldr	r3, [r7, #4]
 801829e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 80182a2:	2101      	movs	r1, #1
 80182a4:	4618      	mov	r0, r3
 80182a6:	f7fa fb5e 	bl	8012966 <_ZN8touchgfx8Drawable10setVisibleEb>
		cutrrentErrorIndex = 0;
 80182aa:	4b38      	ldr	r3, [pc, #224]	; (801838c <_ZN16SecondScreenView9updateValEPh+0x8b8>)
 80182ac:	2200      	movs	r2, #0
 80182ae:	601a      	str	r2, [r3, #0]
		prev_error = true;
 80182b0:	4b32      	ldr	r3, [pc, #200]	; (801837c <_ZN16SecondScreenView9updateValEPh+0x8a8>)
 80182b2:	2201      	movs	r2, #1
 80182b4:	701a      	strb	r2, [r3, #0]
}
 80182b6:	e05b      	b.n	8018370 <_ZN16SecondScreenView9updateValEPh+0x89c>
	} else if (prev_error && !has_check_eng_code && !has_eng_prot_code) {
 80182b8:	4b30      	ldr	r3, [pc, #192]	; (801837c <_ZN16SecondScreenView9updateValEPh+0x8a8>)
 80182ba:	781b      	ldrb	r3, [r3, #0]
 80182bc:	2b00      	cmp	r3, #0
 80182be:	d057      	beq.n	8018370 <_ZN16SecondScreenView9updateValEPh+0x89c>
 80182c0:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80182c4:	f083 0301 	eor.w	r3, r3, #1
 80182c8:	b2db      	uxtb	r3, r3
 80182ca:	2b00      	cmp	r3, #0
 80182cc:	d050      	beq.n	8018370 <_ZN16SecondScreenView9updateValEPh+0x89c>
 80182ce:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80182d2:	f083 0301 	eor.w	r3, r3, #1
 80182d6:	b2db      	uxtb	r3, r3
 80182d8:	2b00      	cmp	r3, #0
 80182da:	d049      	beq.n	8018370 <_ZN16SecondScreenView9updateValEPh+0x89c>
		backgroundBox.setColor(getBlackColor());
 80182dc:	687b      	ldr	r3, [r7, #4]
 80182de:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80182e2:	f7ff fb4d 	bl	8017980 <_ZL13getBlackColorv>
 80182e6:	4603      	mov	r3, r0
 80182e8:	4619      	mov	r1, r3
 80182ea:	4620      	mov	r0, r4
 80182ec:	f7fa fcfc 	bl	8012ce8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
		backgroundBox.invalidate();
 80182f0:	687b      	ldr	r3, [r7, #4]
 80182f2:	3340      	adds	r3, #64	; 0x40
 80182f4:	4618      	mov	r0, r3
 80182f6:	f006 fe43 	bl	801ef80 <_ZNK8touchgfx8Drawable10invalidateEv>
		ErrorMessage.setTypedText(TypedText(T_NO_ERRORS));
 80182fa:	687b      	ldr	r3, [r7, #4]
 80182fc:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 8018300:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8018304:	213c      	movs	r1, #60	; 0x3c
 8018306:	4618      	mov	r0, r3
 8018308:	f7fa fcfc 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 801830c:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8018310:	4620      	mov	r0, r4
 8018312:	f004 fd9f 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
		ErrorMessage.setXY(193, 232);
 8018316:	687b      	ldr	r3, [r7, #4]
 8018318:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801831c:	22e8      	movs	r2, #232	; 0xe8
 801831e:	21c1      	movs	r1, #193	; 0xc1
 8018320:	4618      	mov	r0, r3
 8018322:	f7fa faaf 	bl	8012884 <_ZN8touchgfx8Drawable5setXYEss>
		ErrorMessage.invalidate();
 8018326:	687b      	ldr	r3, [r7, #4]
 8018328:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801832c:	4618      	mov	r0, r3
 801832e:	f006 fe27 	bl	801ef80 <_ZNK8touchgfx8Drawable10invalidateEv>
		nextErrorButton.setVisible(false);
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8018338:	2100      	movs	r1, #0
 801833a:	4618      	mov	r0, r3
 801833c:	f7fa fb13 	bl	8012966 <_ZN8touchgfx8Drawable10setVisibleEb>
		clearErrorsBtn.setVisible(false);
 8018340:	687b      	ldr	r3, [r7, #4]
 8018342:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8018346:	2100      	movs	r1, #0
 8018348:	4618      	mov	r0, r3
 801834a:	f7fa fb0c 	bl	8012966 <_ZN8touchgfx8Drawable10setVisibleEb>
		CheckEngCodeValue.setVisible(false);
 801834e:	687b      	ldr	r3, [r7, #4]
 8018350:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8018354:	2100      	movs	r1, #0
 8018356:	4618      	mov	r0, r3
 8018358:	f7fa fb05 	bl	8012966 <_ZN8touchgfx8Drawable10setVisibleEb>
		EngProtCodeValue.setVisible(false);
 801835c:	687b      	ldr	r3, [r7, #4]
 801835e:	f503 7377 	add.w	r3, r3, #988	; 0x3dc
 8018362:	2100      	movs	r1, #0
 8018364:	4618      	mov	r0, r3
 8018366:	f7fa fafe 	bl	8012966 <_ZN8touchgfx8Drawable10setVisibleEb>
		prev_error = false;
 801836a:	4b04      	ldr	r3, [pc, #16]	; (801837c <_ZN16SecondScreenView9updateValEPh+0x8a8>)
 801836c:	2200      	movs	r2, #0
 801836e:	701a      	strb	r2, [r3, #0]
}
 8018370:	bf00      	nop
 8018372:	375c      	adds	r7, #92	; 0x5c
 8018374:	46bd      	mov	sp, r7
 8018376:	bd90      	pop	{r4, r7, pc}
 8018378:	20008814 	.word	0x20008814
 801837c:	20000054 	.word	0x20000054
 8018380:	2000881c 	.word	0x2000881c
 8018384:	20008820 	.word	0x20008820
 8018388:	0802c0ec 	.word	0x0802c0ec
 801838c:	20008818 	.word	0x20008818

08018390 <_ZN16SecondScreenView11clearErrorsEv>:

void SecondScreenView::clearErrors() {
 8018390:	b590      	push	{r4, r7, lr}
 8018392:	b085      	sub	sp, #20
 8018394:	af00      	add	r7, sp, #0
 8018396:	6078      	str	r0, [r7, #4]
	error = NULL;
 8018398:	4b23      	ldr	r3, [pc, #140]	; (8018428 <_ZN16SecondScreenView11clearErrorsEv+0x98>)
 801839a:	2200      	movs	r2, #0
 801839c:	601a      	str	r2, [r3, #0]
	check_eng_code = 0;
 801839e:	4b23      	ldr	r3, [pc, #140]	; (801842c <_ZN16SecondScreenView11clearErrorsEv+0x9c>)
 80183a0:	2200      	movs	r2, #0
 80183a2:	601a      	str	r2, [r3, #0]
	eng_prot_code = 0;
 80183a4:	4b22      	ldr	r3, [pc, #136]	; (8018430 <_ZN16SecondScreenView11clearErrorsEv+0xa0>)
 80183a6:	2200      	movs	r2, #0
 80183a8:	601a      	str	r2, [r3, #0]
	ErrorMessage.setTypedText(TypedText(T_NO_ERRORS));
 80183aa:	687b      	ldr	r3, [r7, #4]
 80183ac:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 80183b0:	f107 030c 	add.w	r3, r7, #12
 80183b4:	213c      	movs	r1, #60	; 0x3c
 80183b6:	4618      	mov	r0, r3
 80183b8:	f7fa fca4 	bl	8012d04 <_ZN8touchgfx9TypedTextC1Et>
 80183bc:	89b9      	ldrh	r1, [r7, #12]
 80183be:	4620      	mov	r0, r4
 80183c0:	f004 fd48 	bl	801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
	ErrorMessage.setXY(193, 232);
 80183c4:	687b      	ldr	r3, [r7, #4]
 80183c6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80183ca:	22e8      	movs	r2, #232	; 0xe8
 80183cc:	21c1      	movs	r1, #193	; 0xc1
 80183ce:	4618      	mov	r0, r3
 80183d0:	f7fa fa58 	bl	8012884 <_ZN8touchgfx8Drawable5setXYEss>
	ErrorMessage.invalidate();
 80183d4:	687b      	ldr	r3, [r7, #4]
 80183d6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80183da:	4618      	mov	r0, r3
 80183dc:	f006 fdd0 	bl	801ef80 <_ZNK8touchgfx8Drawable10invalidateEv>
	nextErrorButton.setVisible(false);
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80183e6:	2100      	movs	r1, #0
 80183e8:	4618      	mov	r0, r3
 80183ea:	f7fa fabc 	bl	8012966 <_ZN8touchgfx8Drawable10setVisibleEb>
	clearErrorsBtn.setVisible(false);
 80183ee:	687b      	ldr	r3, [r7, #4]
 80183f0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 80183f4:	2100      	movs	r1, #0
 80183f6:	4618      	mov	r0, r3
 80183f8:	f7fa fab5 	bl	8012966 <_ZN8touchgfx8Drawable10setVisibleEb>
	EngProtCodeValue.setVisible(false);
 80183fc:	687b      	ldr	r3, [r7, #4]
 80183fe:	f503 7377 	add.w	r3, r3, #988	; 0x3dc
 8018402:	2100      	movs	r1, #0
 8018404:	4618      	mov	r0, r3
 8018406:	f7fa faae 	bl	8012966 <_ZN8touchgfx8Drawable10setVisibleEb>
	CheckEngCodeValue.setVisible(false);
 801840a:	687b      	ldr	r3, [r7, #4]
 801840c:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8018410:	2100      	movs	r1, #0
 8018412:	4618      	mov	r0, r3
 8018414:	f7fa faa7 	bl	8012966 <_ZN8touchgfx8Drawable10setVisibleEb>
	prev_error = true;
 8018418:	4b06      	ldr	r3, [pc, #24]	; (8018434 <_ZN16SecondScreenView11clearErrorsEv+0xa4>)
 801841a:	2201      	movs	r2, #1
 801841c:	701a      	strb	r2, [r3, #0]
}
 801841e:	bf00      	nop
 8018420:	3714      	adds	r7, #20
 8018422:	46bd      	mov	sp, r7
 8018424:	bd90      	pop	{r4, r7, pc}
 8018426:	bf00      	nop
 8018428:	20008814 	.word	0x20008814
 801842c:	2000881c 	.word	0x2000881c
 8018430:	20008820 	.word	0x20008820
 8018434:	20000054 	.word	0x20000054

08018438 <_ZN16SecondScreenView9nextErrorEv>:

void SecondScreenView::nextError() {
 8018438:	b480      	push	{r7}
 801843a:	b083      	sub	sp, #12
 801843c:	af00      	add	r7, sp, #0
 801843e:	6078      	str	r0, [r7, #4]
//	ErrorMessage.setTypedText(TypedText(text));
//	int x = 240 - ErrorMessage.getTextWidth() / 2;
//	ErrorMessage.setXY(x, 205);
//	ErrorMessage.resizeToCurrentText();
//	ErrorMessage.invalidate();
}
 8018440:	bf00      	nop
 8018442:	370c      	adds	r7, #12
 8018444:	46bd      	mov	sp, r7
 8018446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801844a:	4770      	bx	lr

0801844c <_ZN16SecondScreenView16moveToMainScreenEv>:

void SecondScreenView::moveToMainScreen() {
 801844c:	b580      	push	{r7, lr}
 801844e:	b082      	sub	sp, #8
 8018450:	af00      	add	r7, sp, #0
 8018452:	6078      	str	r0, [r7, #4]
	presenter->setManualErrorChangeScreen();
 8018454:	687b      	ldr	r3, [r7, #4]
 8018456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018458:	4618      	mov	r0, r3
 801845a:	f7ff fa09 	bl	8017870 <_ZN21SecondScreenPresenter26setManualErrorChangeScreenEv>
}
 801845e:	bf00      	nop
 8018460:	3708      	adds	r7, #8
 8018462:	46bd      	mov	sp, r7
 8018464:	bd80      	pop	{r7, pc}
	...

08018468 <_ZN8touchgfx15TouchControllerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~TouchController()
 8018468:	b480      	push	{r7}
 801846a:	b083      	sub	sp, #12
 801846c:	af00      	add	r7, sp, #0
 801846e:	6078      	str	r0, [r7, #4]
    {
 8018470:	4a04      	ldr	r2, [pc, #16]	; (8018484 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8018472:	687b      	ldr	r3, [r7, #4]
 8018474:	601a      	str	r2, [r3, #0]
    }
 8018476:	687b      	ldr	r3, [r7, #4]
 8018478:	4618      	mov	r0, r3
 801847a:	370c      	adds	r7, #12
 801847c:	46bd      	mov	sp, r7
 801847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018482:	4770      	bx	lr
 8018484:	0802cf38 	.word	0x0802cf38

08018488 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8018488:	b580      	push	{r7, lr}
 801848a:	b082      	sub	sp, #8
 801848c:	af00      	add	r7, sp, #0
 801848e:	6078      	str	r0, [r7, #4]
    }
 8018490:	6878      	ldr	r0, [r7, #4]
 8018492:	f7ff ffe9 	bl	8018468 <_ZN8touchgfx15TouchControllerD1Ev>
 8018496:	2104      	movs	r1, #4
 8018498:	6878      	ldr	r0, [r7, #4]
 801849a:	f012 f946 	bl	802a72a <_ZdlPvj>
 801849e:	687b      	ldr	r3, [r7, #4]
 80184a0:	4618      	mov	r0, r3
 80184a2:	3708      	adds	r7, #8
 80184a4:	46bd      	mov	sp, r7
 80184a6:	bd80      	pop	{r7, pc}

080184a8 <_ZN20STM32TouchController4initEv>:

}


void STM32TouchController::init()
{
 80184a8:	b580      	push	{r7, lr}
 80184aa:	b082      	sub	sp, #8
 80184ac:	af00      	add	r7, sp, #0
 80184ae:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
	 BSP_TS_Init(420, 272);
 80184b0:	f44f 7188 	mov.w	r1, #272	; 0x110
 80184b4:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80184b8:	f7f7 fc98 	bl	800fdec <BSP_TS_Init>
}
 80184bc:	bf00      	nop
 80184be:	3708      	adds	r7, #8
 80184c0:	46bd      	mov	sp, r7
 80184c2:	bd80      	pop	{r7, pc}

080184c4 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 80184c4:	b580      	push	{r7, lr}
 80184c6:	b090      	sub	sp, #64	; 0x40
 80184c8:	af00      	add	r7, sp, #0
 80184ca:	60f8      	str	r0, [r7, #12]
 80184cc:	60b9      	str	r1, [r7, #8]
 80184ce:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
	TS_StateTypeDef state = { 0 };
 80184d0:	f107 0314 	add.w	r3, r7, #20
 80184d4:	222c      	movs	r2, #44	; 0x2c
 80184d6:	2100      	movs	r1, #0
 80184d8:	4618      	mov	r0, r3
 80184da:	f012 f9da 	bl	802a892 <memset>
	    BSP_TS_GetState(&state);
 80184de:	f107 0314 	add.w	r3, r7, #20
 80184e2:	4618      	mov	r0, r3
 80184e4:	f7f7 fcc2 	bl	800fe6c <BSP_TS_GetState>
	    if (state.touchDetected)
 80184e8:	7d3b      	ldrb	r3, [r7, #20]
 80184ea:	2b00      	cmp	r3, #0
 80184ec:	d009      	beq.n	8018502 <_ZN20STM32TouchController11sampleTouchERlS0_+0x3e>
	    {
	        x = state.touchX[0];
 80184ee:	8afb      	ldrh	r3, [r7, #22]
 80184f0:	461a      	mov	r2, r3
 80184f2:	68bb      	ldr	r3, [r7, #8]
 80184f4:	601a      	str	r2, [r3, #0]
	        y = state.touchY[0];
 80184f6:	8c3b      	ldrh	r3, [r7, #32]
 80184f8:	461a      	mov	r2, r3
 80184fa:	687b      	ldr	r3, [r7, #4]
 80184fc:	601a      	str	r2, [r3, #0]

	        return true;
 80184fe:	2301      	movs	r3, #1
 8018500:	e000      	b.n	8018504 <_ZN20STM32TouchController11sampleTouchERlS0_+0x40>
	    }

    return false;
 8018502:	2300      	movs	r3, #0
}
 8018504:	4618      	mov	r0, r3
 8018506:	3740      	adds	r7, #64	; 0x40
 8018508:	46bd      	mov	sp, r7
 801850a:	bd80      	pop	{r7, pc}

0801850c <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 801850c:	b580      	push	{r7, lr}
 801850e:	b082      	sub	sp, #8
 8018510:	af00      	add	r7, sp, #0
 8018512:	6078      	str	r0, [r7, #4]
 8018514:	4a05      	ldr	r2, [pc, #20]	; (801852c <_ZN20STM32TouchControllerD1Ev+0x20>)
 8018516:	687b      	ldr	r3, [r7, #4]
 8018518:	601a      	str	r2, [r3, #0]
 801851a:	687b      	ldr	r3, [r7, #4]
 801851c:	4618      	mov	r0, r3
 801851e:	f7ff ffa3 	bl	8018468 <_ZN8touchgfx15TouchControllerD1Ev>
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	4618      	mov	r0, r3
 8018526:	3708      	adds	r7, #8
 8018528:	46bd      	mov	sp, r7
 801852a:	bd80      	pop	{r7, pc}
 801852c:	0802cf20 	.word	0x0802cf20

08018530 <_ZN20STM32TouchControllerD0Ev>:
 8018530:	b580      	push	{r7, lr}
 8018532:	b082      	sub	sp, #8
 8018534:	af00      	add	r7, sp, #0
 8018536:	6078      	str	r0, [r7, #4]
 8018538:	6878      	ldr	r0, [r7, #4]
 801853a:	f7ff ffe7 	bl	801850c <_ZN20STM32TouchControllerD1Ev>
 801853e:	2104      	movs	r1, #4
 8018540:	6878      	ldr	r0, [r7, #4]
 8018542:	f012 f8f2 	bl	802a72a <_ZdlPvj>
 8018546:	687b      	ldr	r3, [r7, #4]
 8018548:	4618      	mov	r0, r3
 801854a:	3708      	adds	r7, #8
 801854c:	46bd      	mov	sp, r7
 801854e:	bd80      	pop	{r7, pc}

08018550 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8018550:	b480      	push	{r7}
 8018552:	b083      	sub	sp, #12
 8018554:	af00      	add	r7, sp, #0
 8018556:	4603      	mov	r3, r0
 8018558:	71fb      	strb	r3, [r7, #7]

}
 801855a:	bf00      	nop
 801855c:	370c      	adds	r7, #12
 801855e:	46bd      	mov	sp, r7
 8018560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018564:	4770      	bx	lr

08018566 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8018566:	b480      	push	{r7}
 8018568:	b083      	sub	sp, #12
 801856a:	af00      	add	r7, sp, #0
 801856c:	4603      	mov	r3, r0
 801856e:	71fb      	strb	r3, [r7, #7]

}
 8018570:	bf00      	nop
 8018572:	370c      	adds	r7, #12
 8018574:	46bd      	mov	sp, r7
 8018576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801857a:	4770      	bx	lr

0801857c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 801857c:	b480      	push	{r7}
 801857e:	b083      	sub	sp, #12
 8018580:	af00      	add	r7, sp, #0
 8018582:	4603      	mov	r3, r0
 8018584:	71fb      	strb	r3, [r7, #7]

}
 8018586:	bf00      	nop
 8018588:	370c      	adds	r7, #12
 801858a:	46bd      	mov	sp, r7
 801858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018590:	4770      	bx	lr
	...

08018594 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8018594:	b480      	push	{r7}
 8018596:	b083      	sub	sp, #12
 8018598:	af00      	add	r7, sp, #0
 801859a:	6078      	str	r0, [r7, #4]
    {
 801859c:	4a04      	ldr	r2, [pc, #16]	; (80185b0 <_ZN8touchgfx3HALD1Ev+0x1c>)
 801859e:	687b      	ldr	r3, [r7, #4]
 80185a0:	601a      	str	r2, [r3, #0]
    }
 80185a2:	687b      	ldr	r3, [r7, #4]
 80185a4:	4618      	mov	r0, r3
 80185a6:	370c      	adds	r7, #12
 80185a8:	46bd      	mov	sp, r7
 80185aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185ae:	4770      	bx	lr
 80185b0:	0802dcf0 	.word	0x0802dcf0

080185b4 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 80185b4:	b580      	push	{r7, lr}
 80185b6:	b082      	sub	sp, #8
 80185b8:	af00      	add	r7, sp, #0
 80185ba:	6078      	str	r0, [r7, #4]
    }
 80185bc:	6878      	ldr	r0, [r7, #4]
 80185be:	f7ff ffe9 	bl	8018594 <_ZN8touchgfx3HALD1Ev>
 80185c2:	2178      	movs	r1, #120	; 0x78
 80185c4:	6878      	ldr	r0, [r7, #4]
 80185c6:	f012 f8b0 	bl	802a72a <_ZdlPvj>
 80185ca:	687b      	ldr	r3, [r7, #4]
 80185cc:	4618      	mov	r0, r3
 80185ce:	3708      	adds	r7, #8
 80185d0:	46bd      	mov	sp, r7
 80185d2:	bd80      	pop	{r7, pc}

080185d4 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 80185d4:	b480      	push	{r7}
 80185d6:	b083      	sub	sp, #12
 80185d8:	af00      	add	r7, sp, #0
 80185da:	6078      	str	r0, [r7, #4]
 80185dc:	460b      	mov	r3, r1
 80185de:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 80185e0:	687b      	ldr	r3, [r7, #4]
 80185e2:	78fa      	ldrb	r2, [r7, #3]
 80185e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 80185e8:	687b      	ldr	r3, [r7, #4]
 80185ea:	2201      	movs	r2, #1
 80185ec:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 80185f0:	bf00      	nop
 80185f2:	370c      	adds	r7, #12
 80185f4:	46bd      	mov	sp, r7
 80185f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185fa:	4770      	bx	lr

080185fc <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *        As default, will return whatever blitcaps are reported by the associated DMA
     *        object.
     *
     * @return a bitmask of the supported blitcaps.
     */
    virtual BlitOperations getBlitCaps()
 80185fc:	b580      	push	{r7, lr}
 80185fe:	b082      	sub	sp, #8
 8018600:	af00      	add	r7, sp, #0
 8018602:	6078      	str	r0, [r7, #4]
    {
        return dma.getBlitCaps();
 8018604:	687b      	ldr	r3, [r7, #4]
 8018606:	685a      	ldr	r2, [r3, #4]
 8018608:	687b      	ldr	r3, [r7, #4]
 801860a:	685b      	ldr	r3, [r3, #4]
 801860c:	681b      	ldr	r3, [r3, #0]
 801860e:	681b      	ldr	r3, [r3, #0]
 8018610:	4610      	mov	r0, r2
 8018612:	4798      	blx	r3
 8018614:	4603      	mov	r3, r0
    }
 8018616:	4618      	mov	r0, r3
 8018618:	3708      	adds	r7, #8
 801861a:	46bd      	mov	sp, r7
 801861c:	bd80      	pop	{r7, pc}

0801861e <_ZN8touchgfx3HAL15backPorchExitedEv>:
     * @brief Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     *        Has to be called from within the LCD IRQ rutine when the Back Porch Exit is
     *        reached.
     */
    virtual void backPorchExited()
 801861e:	b580      	push	{r7, lr}
 8018620:	b082      	sub	sp, #8
 8018622:	af00      	add	r7, sp, #0
 8018624:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8018626:	6878      	ldr	r0, [r7, #4]
 8018628:	f003 fbbc 	bl	801bda4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 801862c:	687b      	ldr	r3, [r7, #4]
 801862e:	681b      	ldr	r3, [r3, #0]
 8018630:	3390      	adds	r3, #144	; 0x90
 8018632:	681b      	ldr	r3, [r3, #0]
 8018634:	6878      	ldr	r0, [r7, #4]
 8018636:	4798      	blx	r3
    }
 8018638:	bf00      	nop
 801863a:	3708      	adds	r7, #8
 801863c:	46bd      	mov	sp, r7
 801863e:	bd80      	pop	{r7, pc}

08018640 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8018640:	b480      	push	{r7}
 8018642:	b083      	sub	sp, #12
 8018644:	af00      	add	r7, sp, #0
 8018646:	6078      	str	r0, [r7, #4]
 8018648:	6039      	str	r1, [r7, #0]
    {
        return false;
 801864a:	2300      	movs	r3, #0
    }
 801864c:	4618      	mov	r0, r3
 801864e:	370c      	adds	r7, #12
 8018650:	46bd      	mov	sp, r7
 8018652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018656:	4770      	bx	lr

08018658 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
     * @param      useDoubleBuffering  (Optional) If true, reserve memory for an extra frame buffer.
     * @param      useAnimationStorage (Optional) If true, reserve memory for animation storage.
     *
     * @deprecated Use the setFramaBufferStartAddress with 'format' parameter instead of 'depth'
     */
    virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true)
 8018658:	b590      	push	{r4, r7, lr}
 801865a:	b08b      	sub	sp, #44	; 0x2c
 801865c:	af00      	add	r7, sp, #0
 801865e:	60f8      	str	r0, [r7, #12]
 8018660:	60b9      	str	r1, [r7, #8]
 8018662:	4611      	mov	r1, r2
 8018664:	461a      	mov	r2, r3
 8018666:	460b      	mov	r3, r1
 8018668:	80fb      	strh	r3, [r7, #6]
 801866a:	4613      	mov	r3, r2
 801866c:	717b      	strb	r3, [r7, #5]
    {
        uint16_t stride = lcd().framebufferStride();
 801866e:	f7f8 fbaf 	bl	8010dd0 <_ZN8touchgfx3HAL3lcdEv>
 8018672:	4602      	mov	r2, r0
 8018674:	6813      	ldr	r3, [r2, #0]
 8018676:	3328      	adds	r3, #40	; 0x28
 8018678:	681b      	ldr	r3, [r3, #0]
 801867a:	4610      	mov	r0, r2
 801867c:	4798      	blx	r3
 801867e:	4603      	mov	r3, r0
 8018680:	837b      	strh	r3, [r7, #26]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 8018682:	8b7b      	ldrh	r3, [r7, #26]
 8018684:	4a3d      	ldr	r2, [pc, #244]	; (801877c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x124>)
 8018686:	8812      	ldrh	r2, [r2, #0]
 8018688:	fb02 f303 	mul.w	r3, r2, r3
 801868c:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 801868e:	68bb      	ldr	r3, [r7, #8]
 8018690:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 8018692:	2300      	movs	r3, #0
 8018694:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 8018696:	2300      	movs	r3, #0
 8018698:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 801869a:	797b      	ldrb	r3, [r7, #5]
 801869c:	2b00      	cmp	r3, #0
 801869e:	d005      	beq.n	80186ac <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x54>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 80186a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80186a2:	697b      	ldr	r3, [r7, #20]
 80186a4:	4413      	add	r3, r2
 80186a6:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 80186a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186aa:	623b      	str	r3, [r7, #32]
        }
        if (useAnimationStorage)
 80186ac:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80186b0:	2b00      	cmp	r3, #0
 80186b2:	d005      	beq.n	80186c0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x68>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 80186b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80186b6:	697b      	ldr	r3, [r7, #20]
 80186b8:	4413      	add	r3, r2
 80186ba:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 80186bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186be:	61fb      	str	r3, [r7, #28]
        }
        switch (depth)
 80186c0:	88fb      	ldrh	r3, [r7, #6]
 80186c2:	3b01      	subs	r3, #1
 80186c4:	2b1f      	cmp	r3, #31
 80186c6:	d84d      	bhi.n	8018764 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x10c>
 80186c8:	a201      	add	r2, pc, #4	; (adr r2, 80186d0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x78>)
 80186ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80186ce:	bf00      	nop
 80186d0:	08018751 	.word	0x08018751
 80186d4:	08018751 	.word	0x08018751
 80186d8:	08018765 	.word	0x08018765
 80186dc:	08018751 	.word	0x08018751
 80186e0:	08018765 	.word	0x08018765
 80186e4:	08018765 	.word	0x08018765
 80186e8:	08018765 	.word	0x08018765
 80186ec:	08018751 	.word	0x08018751
 80186f0:	08018765 	.word	0x08018765
 80186f4:	08018765 	.word	0x08018765
 80186f8:	08018765 	.word	0x08018765
 80186fc:	08018765 	.word	0x08018765
 8018700:	08018765 	.word	0x08018765
 8018704:	08018765 	.word	0x08018765
 8018708:	08018765 	.word	0x08018765
 801870c:	08018751 	.word	0x08018751
 8018710:	08018765 	.word	0x08018765
 8018714:	08018765 	.word	0x08018765
 8018718:	08018765 	.word	0x08018765
 801871c:	08018765 	.word	0x08018765
 8018720:	08018765 	.word	0x08018765
 8018724:	08018765 	.word	0x08018765
 8018728:	08018765 	.word	0x08018765
 801872c:	08018751 	.word	0x08018751
 8018730:	08018765 	.word	0x08018765
 8018734:	08018765 	.word	0x08018765
 8018738:	08018765 	.word	0x08018765
 801873c:	08018765 	.word	0x08018765
 8018740:	08018765 	.word	0x08018765
 8018744:	08018765 	.word	0x08018765
 8018748:	08018765 	.word	0x08018765
 801874c:	08018751 	.word	0x08018751
        case 16:
        case 8:
        case 4:
        case 2:
        case 1:
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 8018750:	68fb      	ldr	r3, [r7, #12]
 8018752:	681b      	ldr	r3, [r3, #0]
 8018754:	3374      	adds	r3, #116	; 0x74
 8018756:	681c      	ldr	r4, [r3, #0]
 8018758:	69fb      	ldr	r3, [r7, #28]
 801875a:	6a3a      	ldr	r2, [r7, #32]
 801875c:	68b9      	ldr	r1, [r7, #8]
 801875e:	68f8      	ldr	r0, [r7, #12]
 8018760:	47a0      	blx	r4
            break;
 8018762:	e006      	b.n	8018772 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11a>
        default:
            assert(0 && "Unsupported bit depth");
 8018764:	4b06      	ldr	r3, [pc, #24]	; (8018780 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x128>)
 8018766:	4a07      	ldr	r2, [pc, #28]	; (8018784 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x12c>)
 8018768:	f240 3125 	movw	r1, #805	; 0x325
 801876c:	4806      	ldr	r0, [pc, #24]	; (8018788 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x130>)
 801876e:	f012 f807 	bl	802a780 <__assert_func>
            break;
        }
    }
 8018772:	bf00      	nop
 8018774:	372c      	adds	r7, #44	; 0x2c
 8018776:	46bd      	mov	sp, r7
 8018778:	bd90      	pop	{r4, r7, pc}
 801877a:	bf00      	nop
 801877c:	2000bf62 	.word	0x2000bf62
 8018780:	0802c0f0 	.word	0x0802c0f0
 8018784:	0802d04c 	.word	0x0802d04c
 8018788:	0802c110 	.word	0x0802c110

0801878c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     *
     * @param [in] frameBuffer      Buffer for frame buffer data, must be non-null.
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 801878c:	b580      	push	{r7, lr}
 801878e:	b084      	sub	sp, #16
 8018790:	af00      	add	r7, sp, #0
 8018792:	60f8      	str	r0, [r7, #12]
 8018794:	60b9      	str	r1, [r7, #8]
 8018796:	607a      	str	r2, [r7, #4]
 8018798:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 801879a:	68bb      	ldr	r3, [r7, #8]
 801879c:	2b00      	cmp	r3, #0
 801879e:	d106      	bne.n	80187ae <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 80187a0:	4b11      	ldr	r3, [pc, #68]	; (80187e8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 80187a2:	4a12      	ldr	r2, [pc, #72]	; (80187ec <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 80187a4:	f240 3137 	movw	r1, #823	; 0x337
 80187a8:	4811      	ldr	r0, [pc, #68]	; (80187f0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 80187aa:	f011 ffe9 	bl	802a780 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 80187ae:	68fb      	ldr	r3, [r7, #12]
 80187b0:	68ba      	ldr	r2, [r7, #8]
 80187b2:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80187b4:	68fb      	ldr	r3, [r7, #12]
 80187b6:	687a      	ldr	r2, [r7, #4]
 80187b8:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 80187ba:	68fb      	ldr	r3, [r7, #12]
 80187bc:	683a      	ldr	r2, [r7, #0]
 80187be:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80187c0:	687b      	ldr	r3, [r7, #4]
 80187c2:	2b00      	cmp	r3, #0
 80187c4:	bf14      	ite	ne
 80187c6:	2301      	movne	r3, #1
 80187c8:	2300      	moveq	r3, #0
 80187ca:	b2da      	uxtb	r2, r3
 80187cc:	4b09      	ldr	r3, [pc, #36]	; (80187f4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 80187ce:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80187d0:	683b      	ldr	r3, [r7, #0]
 80187d2:	2b00      	cmp	r3, #0
 80187d4:	bf14      	ite	ne
 80187d6:	2301      	movne	r3, #1
 80187d8:	2300      	moveq	r3, #0
 80187da:	b2da      	uxtb	r2, r3
 80187dc:	4b06      	ldr	r3, [pc, #24]	; (80187f8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 80187de:	701a      	strb	r2, [r3, #0]
    }
 80187e0:	bf00      	nop
 80187e2:	3710      	adds	r7, #16
 80187e4:	46bd      	mov	sp, r7
 80187e6:	bd80      	pop	{r7, pc}
 80187e8:	0802c154 	.word	0x0802c154
 80187ec:	0802cffc 	.word	0x0802cffc
 80187f0:	0802c110 	.word	0x0802c110
 80187f4:	2000bf64 	.word	0x2000bf64
 80187f8:	2000bf65 	.word	0x2000bf65

080187fc <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param ms Number of milliseconds to wait.
     *
     * @see void registerTaskDelayFunction(void (*delayF)(uint16_t))
     */
    virtual void taskDelay(uint16_t ms)
 80187fc:	b580      	push	{r7, lr}
 80187fe:	b082      	sub	sp, #8
 8018800:	af00      	add	r7, sp, #0
 8018802:	6078      	str	r0, [r7, #4]
 8018804:	460b      	mov	r3, r1
 8018806:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801880c:	2b00      	cmp	r3, #0
 801880e:	d004      	beq.n	801881a <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8018810:	687b      	ldr	r3, [r7, #4]
 8018812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018814:	887a      	ldrh	r2, [r7, #2]
 8018816:	4610      	mov	r0, r2
 8018818:	4798      	blx	r3
        }
    }
 801881a:	bf00      	nop
 801881c:	3708      	adds	r7, #8
 801881e:	46bd      	mov	sp, r7
 8018820:	bd80      	pop	{r7, pc}

08018822 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8018822:	b580      	push	{r7, lr}
 8018824:	b082      	sub	sp, #8
 8018826:	af00      	add	r7, sp, #0
 8018828:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 801882a:	687b      	ldr	r3, [r7, #4]
 801882c:	685a      	ldr	r2, [r3, #4]
 801882e:	687b      	ldr	r3, [r7, #4]
 8018830:	685b      	ldr	r3, [r3, #4]
 8018832:	681b      	ldr	r3, [r3, #0]
 8018834:	3318      	adds	r3, #24
 8018836:	681b      	ldr	r3, [r3, #0]
 8018838:	4610      	mov	r0, r2
 801883a:	4798      	blx	r3
 801883c:	4603      	mov	r3, r0
    }
 801883e:	4618      	mov	r0, r3
 8018840:	3708      	adds	r7, #8
 8018842:	46bd      	mov	sp, r7
 8018844:	bd80      	pop	{r7, pc}
	...

08018848 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
     *
     * @brief Perform the actual display orientation change.
     *
     *        Perform the actual display orientation change.
     */
    virtual void performDisplayOrientationChange()
 8018848:	b480      	push	{r7}
 801884a:	b083      	sub	sp, #12
 801884c:	af00      	add	r7, sp, #0
 801884e:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8018850:	687b      	ldr	r3, [r7, #4]
 8018852:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8018856:	687b      	ldr	r3, [r7, #4]
 8018858:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801885c:	429a      	cmp	r2, r3
 801885e:	d017      	beq.n	8018890 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 8018860:	4b1a      	ldr	r3, [pc, #104]	; (80188cc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8018862:	781b      	ldrb	r3, [r3, #0]
 8018864:	2b00      	cmp	r3, #0
 8018866:	d12a      	bne.n	80188be <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8018868:	4b19      	ldr	r3, [pc, #100]	; (80188d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801886a:	881a      	ldrh	r2, [r3, #0]
 801886c:	4b19      	ldr	r3, [pc, #100]	; (80188d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 801886e:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8018870:	4b19      	ldr	r3, [pc, #100]	; (80188d8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8018872:	881a      	ldrh	r2, [r3, #0]
 8018874:	4b19      	ldr	r3, [pc, #100]	; (80188dc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8018876:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 8018878:	4b16      	ldr	r3, [pc, #88]	; (80188d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 801887a:	881a      	ldrh	r2, [r3, #0]
 801887c:	4b16      	ldr	r3, [pc, #88]	; (80188d8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 801887e:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 8018880:	4b16      	ldr	r3, [pc, #88]	; (80188dc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8018882:	881a      	ldrh	r2, [r3, #0]
 8018884:	4b12      	ldr	r3, [pc, #72]	; (80188d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8018886:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8018888:	4b10      	ldr	r3, [pc, #64]	; (80188cc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801888a:	2201      	movs	r2, #1
 801888c:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 801888e:	e016      	b.n	80188be <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 8018890:	4b0e      	ldr	r3, [pc, #56]	; (80188cc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8018892:	781b      	ldrb	r3, [r3, #0]
 8018894:	2b00      	cmp	r3, #0
 8018896:	d012      	beq.n	80188be <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 8018898:	4b0f      	ldr	r3, [pc, #60]	; (80188d8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 801889a:	881a      	ldrh	r2, [r3, #0]
 801889c:	4b0d      	ldr	r3, [pc, #52]	; (80188d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 801889e:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 80188a0:	4b0b      	ldr	r3, [pc, #44]	; (80188d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80188a2:	881a      	ldrh	r2, [r3, #0]
 80188a4:	4b0d      	ldr	r3, [pc, #52]	; (80188dc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80188a6:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 80188a8:	4b0c      	ldr	r3, [pc, #48]	; (80188dc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80188aa:	881a      	ldrh	r2, [r3, #0]
 80188ac:	4b0a      	ldr	r3, [pc, #40]	; (80188d8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80188ae:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 80188b0:	4b08      	ldr	r3, [pc, #32]	; (80188d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80188b2:	881a      	ldrh	r2, [r3, #0]
 80188b4:	4b06      	ldr	r3, [pc, #24]	; (80188d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80188b6:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 80188b8:	4b04      	ldr	r3, [pc, #16]	; (80188cc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80188ba:	2200      	movs	r2, #0
 80188bc:	701a      	strb	r2, [r3, #0]
    }
 80188be:	bf00      	nop
 80188c0:	370c      	adds	r7, #12
 80188c2:	46bd      	mov	sp, r7
 80188c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188c8:	4770      	bx	lr
 80188ca:	bf00      	nop
 80188cc:	2000bf5e 	.word	0x2000bf5e
 80188d0:	2000bf5a 	.word	0x2000bf5a
 80188d4:	2000bf60 	.word	0x2000bf60
 80188d8:	2000bf5c 	.word	0x2000bf5c
 80188dc:	2000bf62 	.word	0x2000bf62

080188e0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80188e0:	b580      	push	{r7, lr}
 80188e2:	b082      	sub	sp, #8
 80188e4:	af00      	add	r7, sp, #0
 80188e6:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 80188e8:	687b      	ldr	r3, [r7, #4]
 80188ea:	4618      	mov	r0, r3
 80188ec:	f002 fcdc 	bl	801b2a8 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 80188f0:	bf00      	nop
 80188f2:	3708      	adds	r7, #8
 80188f4:	46bd      	mov	sp, r7
 80188f6:	bd80      	pop	{r7, pc}

080188f8 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 80188f8:	b580      	push	{r7, lr}
 80188fa:	b082      	sub	sp, #8
 80188fc:	af00      	add	r7, sp, #0
 80188fe:	6078      	str	r0, [r7, #4]
 8018900:	4a05      	ldr	r2, [pc, #20]	; (8018918 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8018902:	687b      	ldr	r3, [r7, #4]
 8018904:	601a      	str	r2, [r3, #0]
 8018906:	687b      	ldr	r3, [r7, #4]
 8018908:	4618      	mov	r0, r3
 801890a:	f7ff fe43 	bl	8018594 <_ZN8touchgfx3HALD1Ev>
 801890e:	687b      	ldr	r3, [r7, #4]
 8018910:	4618      	mov	r0, r3
 8018912:	3708      	adds	r7, #8
 8018914:	46bd      	mov	sp, r7
 8018916:	bd80      	pop	{r7, pc}
 8018918:	0802d224 	.word	0x0802d224

0801891c <_ZN20TouchGFXGeneratedHALD0Ev>:
 801891c:	b580      	push	{r7, lr}
 801891e:	b082      	sub	sp, #8
 8018920:	af00      	add	r7, sp, #0
 8018922:	6078      	str	r0, [r7, #4]
 8018924:	6878      	ldr	r0, [r7, #4]
 8018926:	f7ff ffe7 	bl	80188f8 <_ZN20TouchGFXGeneratedHALD1Ev>
 801892a:	2178      	movs	r1, #120	; 0x78
 801892c:	6878      	ldr	r0, [r7, #4]
 801892e:	f011 fefc 	bl	802a72a <_ZdlPvj>
 8018932:	687b      	ldr	r3, [r7, #4]
 8018934:	4618      	mov	r0, r3
 8018936:	3708      	adds	r7, #8
 8018938:	46bd      	mov	sp, r7
 801893a:	bd80      	pop	{r7, pc}

0801893c <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 801893c:	b580      	push	{r7, lr}
 801893e:	b082      	sub	sp, #8
 8018940:	af00      	add	r7, sp, #0
 8018942:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	4618      	mov	r0, r3
 8018948:	f7ff ffca 	bl	80188e0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 801894c:	bf00      	nop
 801894e:	3708      	adds	r7, #8
 8018950:	46bd      	mov	sp, r7
 8018952:	bd80      	pop	{r7, pc}

08018954 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32f7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8018954:	b580      	push	{r7, lr}
 8018956:	b082      	sub	sp, #8
 8018958:	af00      	add	r7, sp, #0
 801895a:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 801895c:	687b      	ldr	r3, [r7, #4]
 801895e:	4618      	mov	r0, r3
 8018960:	f001 fb08 	bl	8019f74 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8018964:	bf00      	nop
 8018966:	3708      	adds	r7, #8
 8018968:	46bd      	mov	sp, r7
 801896a:	bd80      	pop	{r7, pc}

0801896c <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 801896c:	b580      	push	{r7, lr}
 801896e:	b082      	sub	sp, #8
 8018970:	af00      	add	r7, sp, #0
 8018972:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8018974:	687b      	ldr	r3, [r7, #4]
 8018976:	4618      	mov	r0, r3
 8018978:	f001 fb88 	bl	801a08c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 801897c:	4603      	mov	r3, r0
}
 801897e:	4618      	mov	r0, r3
 8018980:	3708      	adds	r7, #8
 8018982:	46bd      	mov	sp, r7
 8018984:	bd80      	pop	{r7, pc}

08018986 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8018986:	b580      	push	{r7, lr}
 8018988:	b082      	sub	sp, #8
 801898a:	af00      	add	r7, sp, #0
 801898c:	6078      	str	r0, [r7, #4]
 801898e:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	6839      	ldr	r1, [r7, #0]
 8018994:	4618      	mov	r0, r3
 8018996:	f001 fb87 	bl	801a0a8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 801899a:	bf00      	nop
 801899c:	3708      	adds	r7, #8
 801899e:	46bd      	mov	sp, r7
 80189a0:	bd80      	pop	{r7, pc}

080189a2 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80189a2:	b580      	push	{r7, lr}
 80189a4:	b082      	sub	sp, #8
 80189a6:	af00      	add	r7, sp, #0
 80189a8:	6078      	str	r0, [r7, #4]
 80189aa:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 80189ac:	687b      	ldr	r3, [r7, #4]
 80189ae:	6839      	ldr	r1, [r7, #0]
 80189b0:	4618      	mov	r0, r3
 80189b2:	f001 fb8f 	bl	801a0d4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
}
 80189b6:	bf00      	nop
 80189b8:	3708      	adds	r7, #8
 80189ba:	46bd      	mov	sp, r7
 80189bc:	bd80      	pop	{r7, pc}

080189be <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 80189be:	b580      	push	{r7, lr}
 80189c0:	b082      	sub	sp, #8
 80189c2:	af00      	add	r7, sp, #0
 80189c4:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 80189c6:	687b      	ldr	r3, [r7, #4]
 80189c8:	4618      	mov	r0, r3
 80189ca:	f001 fb05 	bl	8019fd8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 80189ce:	bf00      	nop
 80189d0:	3708      	adds	r7, #8
 80189d2:	46bd      	mov	sp, r7
 80189d4:	bd80      	pop	{r7, pc}

080189d6 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 80189d6:	b580      	push	{r7, lr}
 80189d8:	b082      	sub	sp, #8
 80189da:	af00      	add	r7, sp, #0
 80189dc:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 80189de:	687b      	ldr	r3, [r7, #4]
 80189e0:	4618      	mov	r0, r3
 80189e2:	f001 fb09 	bl	8019ff8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 80189e6:	bf00      	nop
 80189e8:	3708      	adds	r7, #8
 80189ea:	46bd      	mov	sp, r7
 80189ec:	bd80      	pop	{r7, pc}

080189ee <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 80189ee:	b580      	push	{r7, lr}
 80189f0:	b082      	sub	sp, #8
 80189f2:	af00      	add	r7, sp, #0
 80189f4:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 80189f6:	687b      	ldr	r3, [r7, #4]
 80189f8:	4618      	mov	r0, r3
 80189fa:	f001 fb0b 	bl	801a014 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 80189fe:	bf00      	nop
 8018a00:	3708      	adds	r7, #8
 8018a02:	46bd      	mov	sp, r7
 8018a04:	bd80      	pop	{r7, pc}

08018a06 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8018a06:	b580      	push	{r7, lr}
 8018a08:	b082      	sub	sp, #8
 8018a0a:	af00      	add	r7, sp, #0
 8018a0c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8018a0e:	687b      	ldr	r3, [r7, #4]
 8018a10:	4618      	mov	r0, r3
 8018a12:	f001 fb0d 	bl	801a030 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8018a16:	bf00      	nop
 8018a18:	3708      	adds	r7, #8
 8018a1a:	46bd      	mov	sp, r7
 8018a1c:	bd80      	pop	{r7, pc}
	...

08018a20 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8018a20:	b580      	push	{r7, lr}
 8018a22:	b082      	sub	sp, #8
 8018a24:	af00      	add	r7, sp, #0
 8018a26:	6078      	str	r0, [r7, #4]
 8018a28:	4a05      	ldr	r2, [pc, #20]	; (8018a40 <_ZN11TouchGFXHALD1Ev+0x20>)
 8018a2a:	687b      	ldr	r3, [r7, #4]
 8018a2c:	601a      	str	r2, [r3, #0]
 8018a2e:	687b      	ldr	r3, [r7, #4]
 8018a30:	4618      	mov	r0, r3
 8018a32:	f7ff ff61 	bl	80188f8 <_ZN20TouchGFXGeneratedHALD1Ev>
 8018a36:	687b      	ldr	r3, [r7, #4]
 8018a38:	4618      	mov	r0, r3
 8018a3a:	3708      	adds	r7, #8
 8018a3c:	46bd      	mov	sp, r7
 8018a3e:	bd80      	pop	{r7, pc}
 8018a40:	0802cf50 	.word	0x0802cf50

08018a44 <_ZN11TouchGFXHALD0Ev>:
 8018a44:	b580      	push	{r7, lr}
 8018a46:	b082      	sub	sp, #8
 8018a48:	af00      	add	r7, sp, #0
 8018a4a:	6078      	str	r0, [r7, #4]
 8018a4c:	6878      	ldr	r0, [r7, #4]
 8018a4e:	f7ff ffe7 	bl	8018a20 <_ZN11TouchGFXHALD1Ev>
 8018a52:	2178      	movs	r1, #120	; 0x78
 8018a54:	6878      	ldr	r0, [r7, #4]
 8018a56:	f011 fe68 	bl	802a72a <_ZdlPvj>
 8018a5a:	687b      	ldr	r3, [r7, #4]
 8018a5c:	4618      	mov	r0, r3
 8018a5e:	3708      	adds	r7, #8
 8018a60:	46bd      	mov	sp, r7
 8018a62:	bd80      	pop	{r7, pc}

08018a64 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8018a64:	b580      	push	{r7, lr}
 8018a66:	af00      	add	r7, sp, #0
    vSemaphoreCreateBinary(frame_buffer_sem);
 8018a68:	2203      	movs	r2, #3
 8018a6a:	2100      	movs	r1, #0
 8018a6c:	2001      	movs	r0, #1
 8018a6e:	f7f4 fd76 	bl	800d55e <xQueueGenericCreate>
 8018a72:	4602      	mov	r2, r0
 8018a74:	4b0b      	ldr	r3, [pc, #44]	; (8018aa4 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8018a76:	601a      	str	r2, [r3, #0]
 8018a78:	4b0a      	ldr	r3, [pc, #40]	; (8018aa4 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8018a7a:	681b      	ldr	r3, [r3, #0]
 8018a7c:	2b00      	cmp	r3, #0
 8018a7e:	d006      	beq.n	8018a8e <_ZN8touchgfx10OSWrappers10initializeEv+0x2a>
 8018a80:	4b08      	ldr	r3, [pc, #32]	; (8018aa4 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8018a82:	6818      	ldr	r0, [r3, #0]
 8018a84:	2300      	movs	r3, #0
 8018a86:	2200      	movs	r2, #0
 8018a88:	2100      	movs	r1, #0
 8018a8a:	f7f4 fdc9 	bl	800d620 <xQueueGenericSend>
    // Create a queue of length 1
    vsync_q = xQueueGenericCreate(1, 1, 0);
 8018a8e:	2200      	movs	r2, #0
 8018a90:	2101      	movs	r1, #1
 8018a92:	2001      	movs	r0, #1
 8018a94:	f7f4 fd63 	bl	800d55e <xQueueGenericCreate>
 8018a98:	4602      	mov	r2, r0
 8018a9a:	4b03      	ldr	r3, [pc, #12]	; (8018aa8 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8018a9c:	601a      	str	r2, [r3, #0]
}
 8018a9e:	bf00      	nop
 8018aa0:	bd80      	pop	{r7, pc}
 8018aa2:	bf00      	nop
 8018aa4:	20008824 	.word	0x20008824
 8018aa8:	20008828 	.word	0x20008828

08018aac <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8018aac:	b580      	push	{r7, lr}
 8018aae:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, portMAX_DELAY);
 8018ab0:	4b04      	ldr	r3, [pc, #16]	; (8018ac4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8018ab2:	681b      	ldr	r3, [r3, #0]
 8018ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8018ab8:	4618      	mov	r0, r3
 8018aba:	f7f5 f8c3 	bl	800dc44 <xQueueSemaphoreTake>
}
 8018abe:	bf00      	nop
 8018ac0:	bd80      	pop	{r7, pc}
 8018ac2:	bf00      	nop
 8018ac4:	20008824 	.word	0x20008824

08018ac8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8018ac8:	b580      	push	{r7, lr}
 8018aca:	af00      	add	r7, sp, #0
    xSemaphoreGive(frame_buffer_sem);
 8018acc:	4b04      	ldr	r3, [pc, #16]	; (8018ae0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x18>)
 8018ace:	6818      	ldr	r0, [r3, #0]
 8018ad0:	2300      	movs	r3, #0
 8018ad2:	2200      	movs	r2, #0
 8018ad4:	2100      	movs	r1, #0
 8018ad6:	f7f4 fda3 	bl	800d620 <xQueueGenericSend>
}
 8018ada:	bf00      	nop
 8018adc:	bd80      	pop	{r7, pc}
 8018ade:	bf00      	nop
 8018ae0:	20008824 	.word	0x20008824

08018ae4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8018ae4:	b580      	push	{r7, lr}
 8018ae6:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, 0);
 8018ae8:	4b03      	ldr	r3, [pc, #12]	; (8018af8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8018aea:	681b      	ldr	r3, [r3, #0]
 8018aec:	2100      	movs	r1, #0
 8018aee:	4618      	mov	r0, r3
 8018af0:	f7f5 f8a8 	bl	800dc44 <xQueueSemaphoreTake>
}
 8018af4:	bf00      	nop
 8018af6:	bd80      	pop	{r7, pc}
 8018af8:	20008824 	.word	0x20008824

08018afc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8018afc:	b580      	push	{r7, lr}
 8018afe:	b082      	sub	sp, #8
 8018b00:	af00      	add	r7, sp, #0
    // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
    // re-scheduling. May be applicable for other OSes as well.
    portBASE_TYPE px = pdFALSE;
 8018b02:	2300      	movs	r3, #0
 8018b04:	607b      	str	r3, [r7, #4]
    xSemaphoreGiveFromISR(frame_buffer_sem, &px);
 8018b06:	4b0b      	ldr	r3, [pc, #44]	; (8018b34 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x38>)
 8018b08:	681b      	ldr	r3, [r3, #0]
 8018b0a:	1d3a      	adds	r2, r7, #4
 8018b0c:	4611      	mov	r1, r2
 8018b0e:	4618      	mov	r0, r3
 8018b10:	f7f4 ff24 	bl	800d95c <xQueueGiveFromISR>
    portEND_SWITCHING_ISR(px);
 8018b14:	687b      	ldr	r3, [r7, #4]
 8018b16:	2b00      	cmp	r3, #0
 8018b18:	d007      	beq.n	8018b2a <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x2e>
 8018b1a:	4b07      	ldr	r3, [pc, #28]	; (8018b38 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x3c>)
 8018b1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018b20:	601a      	str	r2, [r3, #0]
 8018b22:	f3bf 8f4f 	dsb	sy
 8018b26:	f3bf 8f6f 	isb	sy
}
 8018b2a:	bf00      	nop
 8018b2c:	3708      	adds	r7, #8
 8018b2e:	46bd      	mov	sp, r7
 8018b30:	bd80      	pop	{r7, pc}
 8018b32:	bf00      	nop
 8018b34:	20008824 	.word	0x20008824
 8018b38:	e000ed04 	.word	0xe000ed04

08018b3c <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8018b3c:	b580      	push	{r7, lr}
 8018b3e:	b082      	sub	sp, #8
 8018b40:	af00      	add	r7, sp, #0
    if (vsync_q)
 8018b42:	4b0e      	ldr	r3, [pc, #56]	; (8018b7c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8018b44:	681b      	ldr	r3, [r3, #0]
 8018b46:	2b00      	cmp	r3, #0
 8018b48:	d013      	beq.n	8018b72 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
    {
        // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
        // re-scheduling. May be applicable for other OSes as well.
        portBASE_TYPE px = pdFALSE;
 8018b4a:	2300      	movs	r3, #0
 8018b4c:	607b      	str	r3, [r7, #4]
        xQueueSendFromISR(vsync_q, &dummy, &px);
 8018b4e:	4b0b      	ldr	r3, [pc, #44]	; (8018b7c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8018b50:	6818      	ldr	r0, [r3, #0]
 8018b52:	1d3a      	adds	r2, r7, #4
 8018b54:	2300      	movs	r3, #0
 8018b56:	490a      	ldr	r1, [pc, #40]	; (8018b80 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x44>)
 8018b58:	f7f4 fe64 	bl	800d824 <xQueueGenericSendFromISR>
        portEND_SWITCHING_ISR(px);
 8018b5c:	687b      	ldr	r3, [r7, #4]
 8018b5e:	2b00      	cmp	r3, #0
 8018b60:	d007      	beq.n	8018b72 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
 8018b62:	4b08      	ldr	r3, [pc, #32]	; (8018b84 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x48>)
 8018b64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018b68:	601a      	str	r2, [r3, #0]
 8018b6a:	f3bf 8f4f 	dsb	sy
 8018b6e:	f3bf 8f6f 	isb	sy
    }
}
 8018b72:	bf00      	nop
 8018b74:	3708      	adds	r7, #8
 8018b76:	46bd      	mov	sp, r7
 8018b78:	bd80      	pop	{r7, pc}
 8018b7a:	bf00      	nop
 8018b7c:	20008828 	.word	0x20008828
 8018b80:	20000055 	.word	0x20000055
 8018b84:	e000ed04 	.word	0xe000ed04

08018b88 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8018b88:	b580      	push	{r7, lr}
 8018b8a:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    xQueueReceive(vsync_q, &dummy, 0);
 8018b8c:	4b08      	ldr	r3, [pc, #32]	; (8018bb0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 8018b8e:	681b      	ldr	r3, [r3, #0]
 8018b90:	2200      	movs	r2, #0
 8018b92:	4908      	ldr	r1, [pc, #32]	; (8018bb4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8018b94:	4618      	mov	r0, r3
 8018b96:	f7f4 ff73 	bl	800da80 <xQueueReceive>

    // Then, wait for next VSYNC to occur.
    xQueueReceive(vsync_q, &dummy, portMAX_DELAY);
 8018b9a:	4b05      	ldr	r3, [pc, #20]	; (8018bb0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 8018b9c:	681b      	ldr	r3, [r3, #0]
 8018b9e:	f04f 32ff 	mov.w	r2, #4294967295
 8018ba2:	4904      	ldr	r1, [pc, #16]	; (8018bb4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8018ba4:	4618      	mov	r0, r3
 8018ba6:	f7f4 ff6b 	bl	800da80 <xQueueReceive>
}
 8018baa:	bf00      	nop
 8018bac:	bd80      	pop	{r7, pc}
 8018bae:	bf00      	nop
 8018bb0:	20008828 	.word	0x20008828
 8018bb4:	20000055 	.word	0x20000055

08018bb8 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 8018bb8:	b580      	push	{r7, lr}
 8018bba:	b082      	sub	sp, #8
 8018bbc:	af00      	add	r7, sp, #0
 8018bbe:	4603      	mov	r3, r0
 8018bc0:	80fb      	strh	r3, [r7, #6]
    vTaskDelay(ms);
 8018bc2:	88fb      	ldrh	r3, [r7, #6]
 8018bc4:	4618      	mov	r0, r3
 8018bc6:	f7f5 fc9b 	bl	800e500 <vTaskDelay>
}
 8018bca:	bf00      	nop
 8018bcc:	3708      	adds	r7, #8
 8018bce:	46bd      	mov	sp, r7
 8018bd0:	bd80      	pop	{r7, pc}
	...

08018bd4 <__NVIC_EnableIRQ>:
{
 8018bd4:	b480      	push	{r7}
 8018bd6:	b083      	sub	sp, #12
 8018bd8:	af00      	add	r7, sp, #0
 8018bda:	4603      	mov	r3, r0
 8018bdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8018bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018be2:	2b00      	cmp	r3, #0
 8018be4:	db0d      	blt.n	8018c02 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8018be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018bea:	b2db      	uxtb	r3, r3
 8018bec:	f003 021f 	and.w	r2, r3, #31
 8018bf0:	4907      	ldr	r1, [pc, #28]	; (8018c10 <__NVIC_EnableIRQ+0x3c>)
 8018bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018bf6:	095b      	lsrs	r3, r3, #5
 8018bf8:	2001      	movs	r0, #1
 8018bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8018bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8018c02:	bf00      	nop
 8018c04:	370c      	adds	r7, #12
 8018c06:	46bd      	mov	sp, r7
 8018c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c0c:	4770      	bx	lr
 8018c0e:	bf00      	nop
 8018c10:	e000e100 	.word	0xe000e100

08018c14 <__NVIC_DisableIRQ>:
{
 8018c14:	b480      	push	{r7}
 8018c16:	b083      	sub	sp, #12
 8018c18:	af00      	add	r7, sp, #0
 8018c1a:	4603      	mov	r3, r0
 8018c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8018c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018c22:	2b00      	cmp	r3, #0
 8018c24:	db12      	blt.n	8018c4c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8018c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018c2a:	b2db      	uxtb	r3, r3
 8018c2c:	f003 021f 	and.w	r2, r3, #31
 8018c30:	4909      	ldr	r1, [pc, #36]	; (8018c58 <__NVIC_DisableIRQ+0x44>)
 8018c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018c36:	095b      	lsrs	r3, r3, #5
 8018c38:	2001      	movs	r0, #1
 8018c3a:	fa00 f202 	lsl.w	r2, r0, r2
 8018c3e:	3320      	adds	r3, #32
 8018c40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8018c44:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8018c48:	f3bf 8f6f 	isb	sy
}
 8018c4c:	bf00      	nop
 8018c4e:	370c      	adds	r7, #12
 8018c50:	46bd      	mov	sp, r7
 8018c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c56:	4770      	bx	lr
 8018c58:	e000e100 	.word	0xe000e100

08018c5c <_ZNK8touchgfx9colortype10getColor32Ev>:
    inline uint32_t getColor32() const
 8018c5c:	b480      	push	{r7}
 8018c5e:	b083      	sub	sp, #12
 8018c60:	af00      	add	r7, sp, #0
 8018c62:	6078      	str	r0, [r7, #4]
        return color;
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	681b      	ldr	r3, [r3, #0]
    }
 8018c68:	4618      	mov	r0, r3
 8018c6a:	370c      	adds	r7, #12
 8018c6c:	46bd      	mov	sp, r7
 8018c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c72:	4770      	bx	lr

08018c74 <_ZNK8touchgfx9colortypecvtEv>:
    operator uint16_t() const
 8018c74:	b480      	push	{r7}
 8018c76:	b083      	sub	sp, #12
 8018c78:	af00      	add	r7, sp, #0
 8018c7a:	6078      	str	r0, [r7, #4]
        return (uint16_t)color;
 8018c7c:	687b      	ldr	r3, [r7, #4]
 8018c7e:	681b      	ldr	r3, [r3, #0]
 8018c80:	b29b      	uxth	r3, r3
    }
 8018c82:	4618      	mov	r0, r3
 8018c84:	370c      	adds	r7, #12
 8018c86:	46bd      	mov	sp, r7
 8018c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c8c:	4770      	bx	lr
	...

08018c90 <_ZN8touchgfx9DMA_QueueD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Queue()
 8018c90:	b480      	push	{r7}
 8018c92:	b083      	sub	sp, #12
 8018c94:	af00      	add	r7, sp, #0
 8018c96:	6078      	str	r0, [r7, #4]
    {
 8018c98:	4a04      	ldr	r2, [pc, #16]	; (8018cac <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	601a      	str	r2, [r3, #0]
    }
 8018c9e:	687b      	ldr	r3, [r7, #4]
 8018ca0:	4618      	mov	r0, r3
 8018ca2:	370c      	adds	r7, #12
 8018ca4:	46bd      	mov	sp, r7
 8018ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018caa:	4770      	bx	lr
 8018cac:	0802d0f8 	.word	0x0802d0f8

08018cb0 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8018cb0:	b580      	push	{r7, lr}
 8018cb2:	b082      	sub	sp, #8
 8018cb4:	af00      	add	r7, sp, #0
 8018cb6:	6078      	str	r0, [r7, #4]
    }
 8018cb8:	6878      	ldr	r0, [r7, #4]
 8018cba:	f7ff ffe9 	bl	8018c90 <_ZN8touchgfx9DMA_QueueD1Ev>
 8018cbe:	2104      	movs	r1, #4
 8018cc0:	6878      	ldr	r0, [r7, #4]
 8018cc2:	f011 fd32 	bl	802a72a <_ZdlPvj>
 8018cc6:	687b      	ldr	r3, [r7, #4]
 8018cc8:	4618      	mov	r0, r3
 8018cca:	3708      	adds	r7, #8
 8018ccc:	46bd      	mov	sp, r7
 8018cce:	bd80      	pop	{r7, pc}

08018cd0 <_ZN8touchgfx13DMA_Interface5flushEv>:
     *
     * @brief This function blocks until all DMA transfers in the queue have been completed.
     *
     *        This function blocks until all DMA transfers in the queue have been completed.
     */
    virtual void flush()
 8018cd0:	b580      	push	{r7, lr}
 8018cd2:	b082      	sub	sp, #8
 8018cd4:	af00      	add	r7, sp, #0
 8018cd6:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8018cd8:	687b      	ldr	r3, [r7, #4]
 8018cda:	681b      	ldr	r3, [r3, #0]
 8018cdc:	3344      	adds	r3, #68	; 0x44
 8018cde:	681b      	ldr	r3, [r3, #0]
 8018ce0:	6878      	ldr	r0, [r7, #4]
 8018ce2:	4798      	blx	r3
    }
 8018ce4:	bf00      	nop
 8018ce6:	3708      	adds	r7, #8
 8018ce8:	46bd      	mov	sp, r7
 8018cea:	bd80      	pop	{r7, pc}

08018cec <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 8018cec:	b480      	push	{r7}
 8018cee:	b083      	sub	sp, #12
 8018cf0:	af00      	add	r7, sp, #0
 8018cf2:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 8018cf4:	2300      	movs	r3, #0
    }
 8018cf6:	4618      	mov	r0, r3
 8018cf8:	370c      	adds	r7, #12
 8018cfa:	46bd      	mov	sp, r7
 8018cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d00:	4770      	bx	lr
	...

08018d04 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Interface()
 8018d04:	b480      	push	{r7}
 8018d06:	b083      	sub	sp, #12
 8018d08:	af00      	add	r7, sp, #0
 8018d0a:	6078      	str	r0, [r7, #4]
    {
 8018d0c:	4a04      	ldr	r2, [pc, #16]	; (8018d20 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8018d0e:	687b      	ldr	r3, [r7, #4]
 8018d10:	601a      	str	r2, [r3, #0]
    }
 8018d12:	687b      	ldr	r3, [r7, #4]
 8018d14:	4618      	mov	r0, r3
 8018d16:	370c      	adds	r7, #12
 8018d18:	46bd      	mov	sp, r7
 8018d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d1e:	4770      	bx	lr
 8018d20:	0802e134 	.word	0x0802e134

08018d24 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8018d24:	b580      	push	{r7, lr}
 8018d26:	b082      	sub	sp, #8
 8018d28:	af00      	add	r7, sp, #0
 8018d2a:	6078      	str	r0, [r7, #4]
    }
 8018d2c:	6878      	ldr	r0, [r7, #4]
 8018d2e:	f7ff ffe9 	bl	8018d04 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8018d32:	210c      	movs	r1, #12
 8018d34:	6878      	ldr	r0, [r7, #4]
 8018d36:	f011 fcf8 	bl	802a72a <_ZdlPvj>
 8018d3a:	687b      	ldr	r3, [r7, #4]
 8018d3c:	4618      	mov	r0, r3
 8018d3e:	3708      	adds	r7, #8
 8018d40:	46bd      	mov	sp, r7
 8018d42:	bd80      	pop	{r7, pc}

08018d44 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
     *
     *        Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8018d44:	b480      	push	{r7}
 8018d46:	b083      	sub	sp, #12
 8018d48:	af00      	add	r7, sp, #0
 8018d4a:	6078      	str	r0, [r7, #4]
 8018d4c:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8018d4e:	4a09      	ldr	r2, [pc, #36]	; (8018d74 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8018d50:	687b      	ldr	r3, [r7, #4]
 8018d52:	601a      	str	r2, [r3, #0]
 8018d54:	687b      	ldr	r3, [r7, #4]
 8018d56:	683a      	ldr	r2, [r7, #0]
 8018d58:	605a      	str	r2, [r3, #4]
 8018d5a:	687b      	ldr	r3, [r7, #4]
 8018d5c:	2200      	movs	r2, #0
 8018d5e:	721a      	strb	r2, [r3, #8]
 8018d60:	687b      	ldr	r3, [r7, #4]
 8018d62:	2200      	movs	r2, #0
 8018d64:	725a      	strb	r2, [r3, #9]
    {
    }
 8018d66:	687b      	ldr	r3, [r7, #4]
 8018d68:	4618      	mov	r0, r3
 8018d6a:	370c      	adds	r7, #12
 8018d6c:	46bd      	mov	sp, r7
 8018d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d72:	4770      	bx	lr
 8018d74:	0802e134 	.word	0x0802e134

08018d78 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8018d78:	b580      	push	{r7, lr}
 8018d7a:	b082      	sub	sp, #8
 8018d7c:	af00      	add	r7, sp, #0
 8018d7e:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8018d80:	687b      	ldr	r3, [r7, #4]
 8018d82:	685a      	ldr	r2, [r3, #4]
 8018d84:	687b      	ldr	r3, [r7, #4]
 8018d86:	685b      	ldr	r3, [r3, #4]
 8018d88:	681b      	ldr	r3, [r3, #0]
 8018d8a:	3314      	adds	r3, #20
 8018d8c:	681b      	ldr	r3, [r3, #0]
 8018d8e:	4610      	mov	r0, r2
 8018d90:	4798      	blx	r3
    }
 8018d92:	bf00      	nop
 8018d94:	3708      	adds	r7, #8
 8018d96:	46bd      	mov	sp, r7
 8018d98:	bd80      	pop	{r7, pc}

08018d9a <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8018d9a:	b580      	push	{r7, lr}
 8018d9c:	b082      	sub	sp, #8
 8018d9e:	af00      	add	r7, sp, #0
 8018da0:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8018da2:	687a      	ldr	r2, [r7, #4]
 8018da4:	687b      	ldr	r3, [r7, #4]
 8018da6:	681b      	ldr	r3, [r3, #0]
 8018da8:	3328      	adds	r3, #40	; 0x28
 8018daa:	681b      	ldr	r3, [r3, #0]
 8018dac:	4610      	mov	r0, r2
 8018dae:	4798      	blx	r3
    }
 8018db0:	bf00      	nop
 8018db2:	3708      	adds	r7, #8
 8018db4:	46bd      	mov	sp, r7
 8018db6:	bd80      	pop	{r7, pc}

08018db8 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 8018db8:	b480      	push	{r7}
 8018dba:	b085      	sub	sp, #20
 8018dbc:	af00      	add	r7, sp, #0
 8018dbe:	60f8      	str	r0, [r7, #12]
 8018dc0:	60b9      	str	r1, [r7, #8]
 8018dc2:	607a      	str	r2, [r7, #4]
 8018dc4:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 8018dc6:	68fb      	ldr	r3, [r7, #12]
 8018dc8:	681b      	ldr	r3, [r3, #0]
 8018dca:	681b      	ldr	r3, [r3, #0]
 8018dcc:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8018dd0:	68ba      	ldr	r2, [r7, #8]
 8018dd2:	68fb      	ldr	r3, [r7, #12]
 8018dd4:	681b      	ldr	r3, [r3, #0]
 8018dd6:	430a      	orrs	r2, r1
 8018dd8:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 8018dda:	68fb      	ldr	r3, [r7, #12]
 8018ddc:	681b      	ldr	r3, [r3, #0]
 8018dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018de0:	f023 0107 	bic.w	r1, r3, #7
 8018de4:	687a      	ldr	r2, [r7, #4]
 8018de6:	68fb      	ldr	r3, [r7, #12]
 8018de8:	681b      	ldr	r3, [r3, #0]
 8018dea:	430a      	orrs	r2, r1
 8018dec:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 8018dee:	68fb      	ldr	r3, [r7, #12]
 8018df0:	681b      	ldr	r3, [r3, #0]
 8018df2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8018df4:	4b06      	ldr	r3, [pc, #24]	; (8018e10 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm+0x58>)
 8018df6:	4013      	ands	r3, r2
 8018df8:	6839      	ldr	r1, [r7, #0]
 8018dfa:	68fa      	ldr	r2, [r7, #12]
 8018dfc:	6812      	ldr	r2, [r2, #0]
 8018dfe:	430b      	orrs	r3, r1
 8018e00:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 8018e02:	2300      	movs	r3, #0
}
 8018e04:	4618      	mov	r0, r3
 8018e06:	3714      	adds	r7, #20
 8018e08:	46bd      	mov	sp, r7
 8018e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e0e:	4770      	bx	lr
 8018e10:	ffffc000 	.word	0xffffc000

08018e14 <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 8018e14:	b580      	push	{r7, lr}
 8018e16:	b082      	sub	sp, #8
 8018e18:	af00      	add	r7, sp, #0
 8018e1a:	6078      	str	r0, [r7, #4]
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END DMA2D_XferCpltCallback */

    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 8018e1c:	f7f7 ffcc 	bl	8010db8 <_ZN8touchgfx3HAL11getInstanceEv>
 8018e20:	4603      	mov	r3, r0
 8018e22:	4618      	mov	r0, r3
 8018e24:	f7ff ffa8 	bl	8018d78 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 8018e28:	bf00      	nop
 8018e2a:	3708      	adds	r7, #8
 8018e2c:	46bd      	mov	sp, r7
 8018e2e:	bd80      	pop	{r7, pc}

08018e30 <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 8018e30:	b580      	push	{r7, lr}
 8018e32:	b082      	sub	sp, #8
 8018e34:	af00      	add	r7, sp, #0
 8018e36:	6078      	str	r0, [r7, #4]
    assert(0);
 8018e38:	4b02      	ldr	r3, [pc, #8]	; (8018e44 <DMA2D_XferErrorCallback+0x14>)
 8018e3a:	4a03      	ldr	r2, [pc, #12]	; (8018e48 <DMA2D_XferErrorCallback+0x18>)
 8018e3c:	213e      	movs	r1, #62	; 0x3e
 8018e3e:	4803      	ldr	r0, [pc, #12]	; (8018e4c <DMA2D_XferErrorCallback+0x1c>)
 8018e40:	f011 fc9e 	bl	802a780 <__assert_func>
 8018e44:	0802c18c 	.word	0x0802c18c
 8018e48:	0802d114 	.word	0x0802d114
 8018e4c:	0802c190 	.word	0x0802c190

08018e50 <_ZN8touchgfx6BlitOpC1Ev>:
 *        (frame buffer) using DMA.
 *
 *        BlitOp instances carry the required information for performing operations on the LCD
 *        (frame buffer) using DMA.
 */
struct BlitOp
 8018e50:	b580      	push	{r7, lr}
 8018e52:	b082      	sub	sp, #8
 8018e54:	af00      	add	r7, sp, #0
 8018e56:	6078      	str	r0, [r7, #4]
 8018e58:	687b      	ldr	r3, [r7, #4]
 8018e5a:	3318      	adds	r3, #24
 8018e5c:	4618      	mov	r0, r3
 8018e5e:	f7f9 fc34 	bl	80126ca <_ZN8touchgfx9colortypeC1Ev>
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	4618      	mov	r0, r3
 8018e66:	3708      	adds	r7, #8
 8018e68:	46bd      	mov	sp, r7
 8018e6a:	bd80      	pop	{r7, pc}

08018e6c <_ZN10STM32F7DMAC1Ev>:
}

}

STM32F7DMA::STM32F7DMA()
 8018e6c:	b5b0      	push	{r4, r5, r7, lr}
 8018e6e:	b082      	sub	sp, #8
 8018e70:	af00      	add	r7, sp, #0
 8018e72:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8018e74:	687a      	ldr	r2, [r7, #4]
 8018e76:	687b      	ldr	r3, [r7, #4]
 8018e78:	330c      	adds	r3, #12
 8018e7a:	4619      	mov	r1, r3
 8018e7c:	4610      	mov	r0, r2
 8018e7e:	f7ff ff61 	bl	8018d44 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8018e82:	4a0e      	ldr	r2, [pc, #56]	; (8018ebc <_ZN10STM32F7DMAC1Ev+0x50>)
 8018e84:	687b      	ldr	r3, [r7, #4]
 8018e86:	601a      	str	r2, [r3, #0]
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	f103 000c 	add.w	r0, r3, #12
 8018e8e:	687b      	ldr	r3, [r7, #4]
 8018e90:	3320      	adds	r3, #32
 8018e92:	2260      	movs	r2, #96	; 0x60
 8018e94:	4619      	mov	r1, r3
 8018e96:	f003 f8ab 	bl	801bff0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8018e9a:	687b      	ldr	r3, [r7, #4]
 8018e9c:	3320      	adds	r3, #32
 8018e9e:	245f      	movs	r4, #95	; 0x5f
 8018ea0:	461d      	mov	r5, r3
 8018ea2:	2c00      	cmp	r4, #0
 8018ea4:	db05      	blt.n	8018eb2 <_ZN10STM32F7DMAC1Ev+0x46>
 8018ea6:	4628      	mov	r0, r5
 8018ea8:	f7ff ffd2 	bl	8018e50 <_ZN8touchgfx6BlitOpC1Ev>
 8018eac:	3520      	adds	r5, #32
 8018eae:	3c01      	subs	r4, #1
 8018eb0:	e7f7      	b.n	8018ea2 <_ZN10STM32F7DMAC1Ev+0x36>
{}
 8018eb2:	687b      	ldr	r3, [r7, #4]
 8018eb4:	4618      	mov	r0, r3
 8018eb6:	3708      	adds	r7, #8
 8018eb8:	46bd      	mov	sp, r7
 8018eba:	bdb0      	pop	{r4, r5, r7, pc}
 8018ebc:	0802d0a8 	.word	0x0802d0a8

08018ec0 <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 8018ec0:	b580      	push	{r7, lr}
 8018ec2:	b082      	sub	sp, #8
 8018ec4:	af00      	add	r7, sp, #0
 8018ec6:	6078      	str	r0, [r7, #4]
 8018ec8:	4a0b      	ldr	r2, [pc, #44]	; (8018ef8 <_ZN10STM32F7DMAD1Ev+0x38>)
 8018eca:	687b      	ldr	r3, [r7, #4]
 8018ecc:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 8018ece:	480b      	ldr	r0, [pc, #44]	; (8018efc <_ZN10STM32F7DMAD1Ev+0x3c>)
 8018ed0:	f7ec f9da 	bl	8005288 <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 8018ed4:	205a      	movs	r0, #90	; 0x5a
 8018ed6:	f7ff fe9d 	bl	8018c14 <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 8018eda:	687b      	ldr	r3, [r7, #4]
 8018edc:	330c      	adds	r3, #12
 8018ede:	4618      	mov	r0, r3
 8018ee0:	f000 faa0 	bl	8019424 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8018ee4:	687b      	ldr	r3, [r7, #4]
 8018ee6:	4618      	mov	r0, r3
 8018ee8:	f7ff ff0c 	bl	8018d04 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8018eec:	687b      	ldr	r3, [r7, #4]
 8018eee:	4618      	mov	r0, r3
 8018ef0:	3708      	adds	r7, #8
 8018ef2:	46bd      	mov	sp, r7
 8018ef4:	bd80      	pop	{r7, pc}
 8018ef6:	bf00      	nop
 8018ef8:	0802d0a8 	.word	0x0802d0a8
 8018efc:	2000c74c 	.word	0x2000c74c

08018f00 <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 8018f00:	b580      	push	{r7, lr}
 8018f02:	b082      	sub	sp, #8
 8018f04:	af00      	add	r7, sp, #0
 8018f06:	6078      	str	r0, [r7, #4]
}
 8018f08:	6878      	ldr	r0, [r7, #4]
 8018f0a:	f7ff ffd9 	bl	8018ec0 <_ZN10STM32F7DMAD1Ev>
 8018f0e:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8018f12:	6878      	ldr	r0, [r7, #4]
 8018f14:	f011 fc09 	bl	802a72a <_ZdlPvj>
 8018f18:	687b      	ldr	r3, [r7, #4]
 8018f1a:	4618      	mov	r0, r3
 8018f1c:	3708      	adds	r7, #8
 8018f1e:	46bd      	mov	sp, r7
 8018f20:	bd80      	pop	{r7, pc}
	...

08018f24 <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 8018f24:	b580      	push	{r7, lr}
 8018f26:	b082      	sub	sp, #8
 8018f28:	af00      	add	r7, sp, #0
 8018f2a:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 8018f2c:	4b09      	ldr	r3, [pc, #36]	; (8018f54 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8018f2e:	4a0a      	ldr	r2, [pc, #40]	; (8018f58 <_ZN10STM32F7DMA10initializeEv+0x34>)
 8018f30:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 8018f32:	4808      	ldr	r0, [pc, #32]	; (8018f54 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8018f34:	f7ec f95e 	bl	80051f4 <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8018f38:	4b06      	ldr	r3, [pc, #24]	; (8018f54 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8018f3a:	4a08      	ldr	r2, [pc, #32]	; (8018f5c <_ZN10STM32F7DMA10initializeEv+0x38>)
 8018f3c:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8018f3e:	4b05      	ldr	r3, [pc, #20]	; (8018f54 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8018f40:	4a07      	ldr	r2, [pc, #28]	; (8018f60 <_ZN10STM32F7DMA10initializeEv+0x3c>)
 8018f42:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 8018f44:	205a      	movs	r0, #90	; 0x5a
 8018f46:	f7ff fe45 	bl	8018bd4 <__NVIC_EnableIRQ>
}
 8018f4a:	bf00      	nop
 8018f4c:	3708      	adds	r7, #8
 8018f4e:	46bd      	mov	sp, r7
 8018f50:	bd80      	pop	{r7, pc}
 8018f52:	bf00      	nop
 8018f54:	2000c74c 	.word	0x2000c74c
 8018f58:	4002b000 	.word	0x4002b000
 8018f5c:	08018e15 	.word	0x08018e15
 8018f60:	08018e31 	.word	0x08018e31

08018f64 <_ZN10STM32F7DMA11getBlitCapsEv>:

BlitOperations STM32F7DMA::getBlitCaps()
{
 8018f64:	b480      	push	{r7}
 8018f66:	b083      	sub	sp, #12
 8018f68:	af00      	add	r7, sp, #0
 8018f6a:	6078      	str	r0, [r7, #4]
                                        | BLIT_OP_COPY
                                        | BLIT_OP_COPY_WITH_ALPHA
                                        | BLIT_OP_COPY_ARGB8888
                                        | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                        | BLIT_OP_COPY_A4
                                        | BLIT_OP_COPY_A8);
 8018f6c:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 8018f70:	4618      	mov	r0, r3
 8018f72:	370c      	adds	r7, #12
 8018f74:	46bd      	mov	sp, r7
 8018f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f7a:	4770      	bx	lr

08018f7c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 8018f7c:	b590      	push	{r4, r7, lr}
 8018f7e:	b08d      	sub	sp, #52	; 0x34
 8018f80:	af02      	add	r7, sp, #8
 8018f82:	6078      	str	r0, [r7, #4]
 8018f84:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 8018f86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8018f8a:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 8018f8c:	2300      	movs	r3, #0
 8018f8e:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8018f90:	683b      	ldr	r3, [r7, #0]
 8018f92:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8018f94:	2b20      	cmp	r3, #32
 8018f96:	d007      	beq.n	8018fa8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 8018f98:	683b      	ldr	r3, [r7, #0]
 8018f9a:	681b      	ldr	r3, [r3, #0]
 8018f9c:	2b40      	cmp	r3, #64	; 0x40
 8018f9e:	d003      	beq.n	8018fa8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8018fa0:	683b      	ldr	r3, [r7, #0]
 8018fa2:	681b      	ldr	r3, [r3, #0]
 8018fa4:	2b04      	cmp	r3, #4
 8018fa6:	d101      	bne.n	8018fac <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 8018fa8:	2301      	movs	r3, #1
 8018faa:	e000      	b.n	8018fae <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 8018fac:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8018fae:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8018fb0:	683b      	ldr	r3, [r7, #0]
 8018fb2:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 8018fb4:	2b80      	cmp	r3, #128	; 0x80
 8018fb6:	d004      	beq.n	8018fc2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 8018fb8:	683b      	ldr	r3, [r7, #0]
 8018fba:	681b      	ldr	r3, [r3, #0]
 8018fbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018fc0:	d101      	bne.n	8018fc6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 8018fc2:	2301      	movs	r3, #1
 8018fc4:	e000      	b.n	8018fc8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 8018fc6:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8018fc8:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 8018fca:	f7f7 ff01 	bl	8010dd0 <_ZN8touchgfx3HAL3lcdEv>
 8018fce:	4602      	mov	r2, r0
 8018fd0:	6813      	ldr	r3, [r2, #0]
 8018fd2:	3320      	adds	r3, #32
 8018fd4:	681b      	ldr	r3, [r3, #0]
 8018fd6:	4610      	mov	r0, r2
 8018fd8:	4798      	blx	r3
 8018fda:	4603      	mov	r3, r0
 8018fdc:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 8018fde:	683b      	ldr	r3, [r7, #0]
 8018fe0:	681b      	ldr	r3, [r3, #0]
 8018fe2:	2b40      	cmp	r3, #64	; 0x40
 8018fe4:	d01d      	beq.n	8019022 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8018fe6:	2b40      	cmp	r3, #64	; 0x40
 8018fe8:	d804      	bhi.n	8018ff4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 8018fea:	2b04      	cmp	r3, #4
 8018fec:	d00e      	beq.n	801900c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 8018fee:	2b20      	cmp	r3, #32
 8018ff0:	d017      	beq.n	8019022 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8018ff2:	e019      	b.n	8019028 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
 8018ff4:	2b80      	cmp	r3, #128	; 0x80
 8018ff6:	d003      	beq.n	8019000 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 8018ff8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018ffc:	d003      	beq.n	8019006 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
 8018ffe:	e013      	b.n	8019028 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 8019000:	230a      	movs	r3, #10
 8019002:	623b      	str	r3, [r7, #32]
        break;
 8019004:	e01a      	b.n	801903c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 8019006:	2309      	movs	r3, #9
 8019008:	623b      	str	r3, [r7, #32]
        break;
 801900a:	e017      	b.n	801903c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 801900c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8019010:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8019012:	7f7b      	ldrb	r3, [r7, #29]
 8019014:	2b10      	cmp	r3, #16
 8019016:	d101      	bne.n	801901c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa0>
 8019018:	2302      	movs	r3, #2
 801901a:	e000      	b.n	801901e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
 801901c:	2301      	movs	r3, #1
 801901e:	623b      	str	r3, [r7, #32]
        break;
 8019020:	e00c      	b.n	801903c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 8019022:	2300      	movs	r3, #0
 8019024:	623b      	str	r3, [r7, #32]
        break;
 8019026:	e009      	b.n	801903c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    default:
        dma2dTransferMode = DMA2D_M2M;
 8019028:	2300      	movs	r3, #0
 801902a:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 801902c:	7f7b      	ldrb	r3, [r7, #29]
 801902e:	2b10      	cmp	r3, #16
 8019030:	d101      	bne.n	8019036 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xba>
 8019032:	2302      	movs	r3, #2
 8019034:	e000      	b.n	8019038 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 8019036:	2301      	movs	r3, #1
 8019038:	623b      	str	r3, [r7, #32]
        break;
 801903a:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 801903c:	4a76      	ldr	r2, [pc, #472]	; (8019218 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801903e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019040:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8019042:	7f7b      	ldrb	r3, [r7, #29]
 8019044:	2b10      	cmp	r3, #16
 8019046:	d101      	bne.n	801904c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8019048:	2302      	movs	r3, #2
 801904a:	e000      	b.n	801904e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 801904c:	2301      	movs	r3, #1
 801904e:	4a72      	ldr	r2, [pc, #456]	; (8019218 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8019050:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8019052:	683b      	ldr	r3, [r7, #0]
 8019054:	8adb      	ldrh	r3, [r3, #22]
 8019056:	461a      	mov	r2, r3
 8019058:	683b      	ldr	r3, [r7, #0]
 801905a:	8a1b      	ldrh	r3, [r3, #16]
 801905c:	1ad3      	subs	r3, r2, r3
 801905e:	461a      	mov	r2, r3
 8019060:	4b6d      	ldr	r3, [pc, #436]	; (8019218 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8019062:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8019064:	7f7b      	ldrb	r3, [r7, #29]
 8019066:	2b10      	cmp	r3, #16
 8019068:	d101      	bne.n	801906e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
 801906a:	2202      	movs	r2, #2
 801906c:	e000      	b.n	8019070 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 801906e:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8019070:	683b      	ldr	r3, [r7, #0]
 8019072:	8adb      	ldrh	r3, [r3, #22]
 8019074:	4619      	mov	r1, r3
 8019076:	683b      	ldr	r3, [r7, #0]
 8019078:	8a1b      	ldrh	r3, [r3, #16]
 801907a:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 801907c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801907e:	4866      	ldr	r0, [pc, #408]	; (8019218 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8019080:	f7ff fe9a 	bl	8018db8 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8019084:	4a64      	ldr	r2, [pc, #400]	; (8019218 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8019086:	6a3b      	ldr	r3, [r7, #32]
 8019088:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 801908a:	683b      	ldr	r3, [r7, #0]
 801908c:	8a9b      	ldrh	r3, [r3, #20]
 801908e:	461a      	mov	r2, r3
 8019090:	683b      	ldr	r3, [r7, #0]
 8019092:	8a1b      	ldrh	r3, [r3, #16]
 8019094:	1ad3      	subs	r3, r2, r3
 8019096:	461a      	mov	r2, r3
 8019098:	4b5f      	ldr	r3, [pc, #380]	; (8019218 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801909a:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 801909c:	7ffb      	ldrb	r3, [r7, #31]
 801909e:	2b00      	cmp	r3, #0
 80190a0:	d103      	bne.n	80190aa <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
 80190a2:	7fbb      	ldrb	r3, [r7, #30]
 80190a4:	2b00      	cmp	r3, #0
 80190a6:	f000 8082 	beq.w	80191ae <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
    {
        if (blitOp.alpha < 255)
 80190aa:	683b      	ldr	r3, [r7, #0]
 80190ac:	7f1b      	ldrb	r3, [r3, #28]
 80190ae:	2bff      	cmp	r3, #255	; 0xff
 80190b0:	d008      	beq.n	80190c4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 80190b2:	4b59      	ldr	r3, [pc, #356]	; (8019218 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80190b4:	2202      	movs	r2, #2
 80190b6:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 80190b8:	683b      	ldr	r3, [r7, #0]
 80190ba:	7f1b      	ldrb	r3, [r3, #28]
 80190bc:	461a      	mov	r2, r3
 80190be:	4b56      	ldr	r3, [pc, #344]	; (8019218 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80190c0:	635a      	str	r2, [r3, #52]	; 0x34
 80190c2:	e002      	b.n	80190ca <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14e>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80190c4:	4b54      	ldr	r3, [pc, #336]	; (8019218 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80190c6:	2200      	movs	r2, #0
 80190c8:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 80190ca:	7fbb      	ldrb	r3, [r7, #30]
 80190cc:	2b00      	cmp	r3, #0
 80190ce:	d059      	beq.n	8019184 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
        {
            if (bitDepth == 16)
 80190d0:	7f7b      	ldrb	r3, [r7, #29]
 80190d2:	2b10      	cmp	r3, #16
 80190d4:	d14a      	bne.n	801916c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 80190d6:	683b      	ldr	r3, [r7, #0]
 80190d8:	3318      	adds	r3, #24
 80190da:	4618      	mov	r0, r3
 80190dc:	f7ff fdca 	bl	8018c74 <_ZNK8touchgfx9colortypecvtEv>
 80190e0:	4603      	mov	r3, r0
 80190e2:	12db      	asrs	r3, r3, #11
 80190e4:	f003 021f 	and.w	r2, r3, #31
 80190e8:	4613      	mov	r3, r2
 80190ea:	021b      	lsls	r3, r3, #8
 80190ec:	1a9b      	subs	r3, r3, r2
 80190ee:	4a4b      	ldr	r2, [pc, #300]	; (801921c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80190f0:	fb82 1203 	smull	r1, r2, r2, r3
 80190f4:	441a      	add	r2, r3
 80190f6:	1112      	asrs	r2, r2, #4
 80190f8:	17db      	asrs	r3, r3, #31
 80190fa:	1ad3      	subs	r3, r2, r3
 80190fc:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 80190fe:	683b      	ldr	r3, [r7, #0]
 8019100:	3318      	adds	r3, #24
 8019102:	4618      	mov	r0, r3
 8019104:	f7ff fdb6 	bl	8018c74 <_ZNK8touchgfx9colortypecvtEv>
 8019108:	4603      	mov	r3, r0
 801910a:	115b      	asrs	r3, r3, #5
 801910c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8019110:	4613      	mov	r3, r2
 8019112:	021b      	lsls	r3, r3, #8
 8019114:	1a9b      	subs	r3, r3, r2
 8019116:	4a42      	ldr	r2, [pc, #264]	; (8019220 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8019118:	fb82 1203 	smull	r1, r2, r2, r3
 801911c:	441a      	add	r2, r3
 801911e:	1152      	asrs	r2, r2, #5
 8019120:	17db      	asrs	r3, r3, #31
 8019122:	1ad3      	subs	r3, r2, r3
 8019124:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8019126:	683b      	ldr	r3, [r7, #0]
 8019128:	3318      	adds	r3, #24
 801912a:	4618      	mov	r0, r3
 801912c:	f7ff fda2 	bl	8018c74 <_ZNK8touchgfx9colortypecvtEv>
 8019130:	4603      	mov	r3, r0
 8019132:	f003 021f 	and.w	r2, r3, #31
 8019136:	4613      	mov	r3, r2
 8019138:	021b      	lsls	r3, r3, #8
 801913a:	1a9b      	subs	r3, r3, r2
 801913c:	4a37      	ldr	r2, [pc, #220]	; (801921c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801913e:	fb82 1203 	smull	r1, r2, r2, r3
 8019142:	441a      	add	r2, r3
 8019144:	1112      	asrs	r2, r2, #4
 8019146:	17db      	asrs	r3, r3, #31
 8019148:	1ad3      	subs	r3, r2, r3
 801914a:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 801914c:	683b      	ldr	r3, [r7, #0]
 801914e:	7f1b      	ldrb	r3, [r3, #28]
 8019150:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8019152:	68fb      	ldr	r3, [r7, #12]
 8019154:	061a      	lsls	r2, r3, #24
 8019156:	69bb      	ldr	r3, [r7, #24]
 8019158:	041b      	lsls	r3, r3, #16
 801915a:	431a      	orrs	r2, r3
 801915c:	697b      	ldr	r3, [r7, #20]
 801915e:	021b      	lsls	r3, r3, #8
 8019160:	431a      	orrs	r2, r3
 8019162:	693b      	ldr	r3, [r7, #16]
 8019164:	4313      	orrs	r3, r2
 8019166:	4a2c      	ldr	r2, [pc, #176]	; (8019218 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8019168:	6353      	str	r3, [r2, #52]	; 0x34
 801916a:	e00b      	b.n	8019184 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 801916c:	683b      	ldr	r3, [r7, #0]
 801916e:	3318      	adds	r3, #24
 8019170:	4618      	mov	r0, r3
 8019172:	f7ff fd73 	bl	8018c5c <_ZNK8touchgfx9colortype10getColor32Ev>
 8019176:	4602      	mov	r2, r0
 8019178:	683b      	ldr	r3, [r7, #0]
 801917a:	7f1b      	ldrb	r3, [r3, #28]
 801917c:	061b      	lsls	r3, r3, #24
 801917e:	4313      	orrs	r3, r2
 8019180:	4a25      	ldr	r2, [pc, #148]	; (8019218 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8019182:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8019184:	683b      	ldr	r3, [r7, #0]
 8019186:	8adb      	ldrh	r3, [r3, #22]
 8019188:	461a      	mov	r2, r3
 801918a:	683b      	ldr	r3, [r7, #0]
 801918c:	8a1b      	ldrh	r3, [r3, #16]
 801918e:	1ad3      	subs	r3, r2, r3
 8019190:	461a      	mov	r2, r3
 8019192:	4b21      	ldr	r3, [pc, #132]	; (8019218 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8019194:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8019196:	7f7b      	ldrb	r3, [r7, #29]
 8019198:	2b10      	cmp	r3, #16
 801919a:	d101      	bne.n	80191a0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>
 801919c:	2302      	movs	r3, #2
 801919e:	e000      	b.n	80191a2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x226>
 80191a0:	2301      	movs	r3, #1
 80191a2:	4a1d      	ldr	r2, [pc, #116]	; (8019218 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80191a4:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 80191a6:	2100      	movs	r1, #0
 80191a8:	481b      	ldr	r0, [pc, #108]	; (8019218 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80191aa:	f7ec faed 	bl	8005788 <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 80191ae:	2101      	movs	r1, #1
 80191b0:	4819      	ldr	r0, [pc, #100]	; (8019218 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80191b2:	f7ec fae9 	bl	8005788 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataCopy cache invalidation */

    if (blendingImage || blendingText)
 80191b6:	7ffb      	ldrb	r3, [r7, #31]
 80191b8:	2b00      	cmp	r3, #0
 80191ba:	d102      	bne.n	80191c2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x246>
 80191bc:	7fbb      	ldrb	r3, [r7, #30]
 80191be:	2b00      	cmp	r3, #0
 80191c0:	d015      	beq.n	80191ee <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x272>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 80191c2:	683b      	ldr	r3, [r7, #0]
 80191c4:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80191c6:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 80191c8:	683b      	ldr	r3, [r7, #0]
 80191ca:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80191cc:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 80191ce:	683b      	ldr	r3, [r7, #0]
 80191d0:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80191d2:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 80191d4:	683b      	ldr	r3, [r7, #0]
 80191d6:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80191d8:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 80191da:	683b      	ldr	r3, [r7, #0]
 80191dc:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80191de:	9301      	str	r3, [sp, #4]
 80191e0:	9200      	str	r2, [sp, #0]
 80191e2:	4623      	mov	r3, r4
 80191e4:	4602      	mov	r2, r0
 80191e6:	480c      	ldr	r0, [pc, #48]	; (8019218 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80191e8:	f7ec f8f1 	bl	80053ce <HAL_DMA2D_BlendingStart_IT>
 80191ec:	e00f      	b.n	801920e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x292>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 80191ee:	683b      	ldr	r3, [r7, #0]
 80191f0:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 80191f2:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 80191f4:	683b      	ldr	r3, [r7, #0]
 80191f6:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 80191f8:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 80191fa:	683b      	ldr	r3, [r7, #0]
 80191fc:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d,
 80191fe:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 8019200:	683b      	ldr	r3, [r7, #0]
 8019202:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d,
 8019204:	9300      	str	r3, [sp, #0]
 8019206:	4603      	mov	r3, r0
 8019208:	4803      	ldr	r0, [pc, #12]	; (8019218 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801920a:	f7ec f8ad 	bl	8005368 <HAL_DMA2D_Start_IT>
    }
}
 801920e:	bf00      	nop
 8019210:	372c      	adds	r7, #44	; 0x2c
 8019212:	46bd      	mov	sp, r7
 8019214:	bd90      	pop	{r4, r7, pc}
 8019216:	bf00      	nop
 8019218:	2000c74c 	.word	0x2000c74c
 801921c:	84210843 	.word	0x84210843
 8019220:	82082083 	.word	0x82082083

08019224 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 8019224:	b590      	push	{r4, r7, lr}
 8019226:	b08d      	sub	sp, #52	; 0x34
 8019228:	af02      	add	r7, sp, #8
 801922a:	6078      	str	r0, [r7, #4]
 801922c:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 801922e:	f7f7 fdcf 	bl	8010dd0 <_ZN8touchgfx3HAL3lcdEv>
 8019232:	4602      	mov	r2, r0
 8019234:	6813      	ldr	r3, [r2, #0]
 8019236:	3320      	adds	r3, #32
 8019238:	681b      	ldr	r3, [r3, #0]
 801923a:	4610      	mov	r0, r2
 801923c:	4798      	blx	r3
 801923e:	4603      	mov	r3, r0
 8019240:	77fb      	strb	r3, [r7, #31]
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8019242:	7ffb      	ldrb	r3, [r7, #31]
 8019244:	2b10      	cmp	r3, #16
 8019246:	d101      	bne.n	801924c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x28>
 8019248:	2302      	movs	r3, #2
 801924a:	e000      	b.n	801924e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2a>
 801924c:	2301      	movs	r3, #1
 801924e:	61bb      	str	r3, [r7, #24]

    uint32_t color = 0;
 8019250:	2300      	movs	r3, #0
 8019252:	623b      	str	r3, [r7, #32]
    if (bitDepth == 16)
 8019254:	7ffb      	ldrb	r3, [r7, #31]
 8019256:	2b10      	cmp	r3, #16
 8019258:	d149      	bne.n	80192ee <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xca>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 801925a:	683b      	ldr	r3, [r7, #0]
 801925c:	3318      	adds	r3, #24
 801925e:	4618      	mov	r0, r3
 8019260:	f7ff fd08 	bl	8018c74 <_ZNK8touchgfx9colortypecvtEv>
 8019264:	4603      	mov	r3, r0
 8019266:	12db      	asrs	r3, r3, #11
 8019268:	f003 021f 	and.w	r2, r3, #31
 801926c:	4613      	mov	r3, r2
 801926e:	021b      	lsls	r3, r3, #8
 8019270:	1a9b      	subs	r3, r3, r2
 8019272:	4a69      	ldr	r2, [pc, #420]	; (8019418 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 8019274:	fb82 1203 	smull	r1, r2, r2, r3
 8019278:	441a      	add	r2, r3
 801927a:	1112      	asrs	r2, r2, #4
 801927c:	17db      	asrs	r3, r3, #31
 801927e:	1ad3      	subs	r3, r2, r3
 8019280:	617b      	str	r3, [r7, #20]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8019282:	683b      	ldr	r3, [r7, #0]
 8019284:	3318      	adds	r3, #24
 8019286:	4618      	mov	r0, r3
 8019288:	f7ff fcf4 	bl	8018c74 <_ZNK8touchgfx9colortypecvtEv>
 801928c:	4603      	mov	r3, r0
 801928e:	115b      	asrs	r3, r3, #5
 8019290:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8019294:	4613      	mov	r3, r2
 8019296:	021b      	lsls	r3, r3, #8
 8019298:	1a9b      	subs	r3, r3, r2
 801929a:	4a60      	ldr	r2, [pc, #384]	; (801941c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f8>)
 801929c:	fb82 1203 	smull	r1, r2, r2, r3
 80192a0:	441a      	add	r2, r3
 80192a2:	1152      	asrs	r2, r2, #5
 80192a4:	17db      	asrs	r3, r3, #31
 80192a6:	1ad3      	subs	r3, r2, r3
 80192a8:	613b      	str	r3, [r7, #16]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 80192aa:	683b      	ldr	r3, [r7, #0]
 80192ac:	3318      	adds	r3, #24
 80192ae:	4618      	mov	r0, r3
 80192b0:	f7ff fce0 	bl	8018c74 <_ZNK8touchgfx9colortypecvtEv>
 80192b4:	4603      	mov	r3, r0
 80192b6:	f003 021f 	and.w	r2, r3, #31
 80192ba:	4613      	mov	r3, r2
 80192bc:	021b      	lsls	r3, r3, #8
 80192be:	1a9b      	subs	r3, r3, r2
 80192c0:	4a55      	ldr	r2, [pc, #340]	; (8019418 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 80192c2:	fb82 1203 	smull	r1, r2, r2, r3
 80192c6:	441a      	add	r2, r3
 80192c8:	1112      	asrs	r2, r2, #4
 80192ca:	17db      	asrs	r3, r3, #31
 80192cc:	1ad3      	subs	r3, r2, r3
 80192ce:	60fb      	str	r3, [r7, #12]
        uint32_t alpha = blitOp.alpha;
 80192d0:	683b      	ldr	r3, [r7, #0]
 80192d2:	7f1b      	ldrb	r3, [r3, #28]
 80192d4:	60bb      	str	r3, [r7, #8]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 80192d6:	68bb      	ldr	r3, [r7, #8]
 80192d8:	061a      	lsls	r2, r3, #24
 80192da:	697b      	ldr	r3, [r7, #20]
 80192dc:	041b      	lsls	r3, r3, #16
 80192de:	431a      	orrs	r2, r3
 80192e0:	693b      	ldr	r3, [r7, #16]
 80192e2:	021b      	lsls	r3, r3, #8
 80192e4:	4313      	orrs	r3, r2
 80192e6:	68fa      	ldr	r2, [r7, #12]
 80192e8:	4313      	orrs	r3, r2
 80192ea:	623b      	str	r3, [r7, #32]
 80192ec:	e00b      	b.n	8019306 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe2>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 80192ee:	683b      	ldr	r3, [r7, #0]
 80192f0:	7f1b      	ldrb	r3, [r3, #28]
 80192f2:	061b      	lsls	r3, r3, #24
 80192f4:	461c      	mov	r4, r3
 80192f6:	683b      	ldr	r3, [r7, #0]
 80192f8:	3318      	adds	r3, #24
 80192fa:	4618      	mov	r0, r3
 80192fc:	f7ff fcae 	bl	8018c5c <_ZNK8touchgfx9colortype10getColor32Ev>
 8019300:	4603      	mov	r3, r0
 8019302:	4323      	orrs	r3, r4
 8019304:	623b      	str	r3, [r7, #32]
    }

    switch (blitOp.operation)
 8019306:	683b      	ldr	r3, [r7, #0]
 8019308:	681b      	ldr	r3, [r3, #0]
 801930a:	2b08      	cmp	r3, #8
 801930c:	d103      	bne.n	8019316 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf2>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 801930e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8019312:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8019314:	e003      	b.n	801931e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfa>
    default:
        dma2dTransferMode = DMA2D_R2M;
 8019316:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 801931a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801931c:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 801931e:	4a40      	ldr	r2, [pc, #256]	; (8019420 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8019320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019322:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8019324:	7ffb      	ldrb	r3, [r7, #31]
 8019326:	2b10      	cmp	r3, #16
 8019328:	d101      	bne.n	801932e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10a>
 801932a:	2302      	movs	r3, #2
 801932c:	e000      	b.n	8019330 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>
 801932e:	2301      	movs	r3, #1
 8019330:	4a3b      	ldr	r2, [pc, #236]	; (8019420 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8019332:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8019334:	683b      	ldr	r3, [r7, #0]
 8019336:	8adb      	ldrh	r3, [r3, #22]
 8019338:	461a      	mov	r2, r3
 801933a:	683b      	ldr	r3, [r7, #0]
 801933c:	8a1b      	ldrh	r3, [r3, #16]
 801933e:	1ad3      	subs	r3, r2, r3
 8019340:	461a      	mov	r2, r3
 8019342:	4b37      	ldr	r3, [pc, #220]	; (8019420 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8019344:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8019346:	7ffb      	ldrb	r3, [r7, #31]
 8019348:	2b10      	cmp	r3, #16
 801934a:	d101      	bne.n	8019350 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12c>
 801934c:	2202      	movs	r2, #2
 801934e:	e000      	b.n	8019352 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12e>
 8019350:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8019352:	683b      	ldr	r3, [r7, #0]
 8019354:	8adb      	ldrh	r3, [r3, #22]
 8019356:	4619      	mov	r1, r3
 8019358:	683b      	ldr	r3, [r7, #0]
 801935a:	8a1b      	ldrh	r3, [r3, #16]
 801935c:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 801935e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019360:	482f      	ldr	r0, [pc, #188]	; (8019420 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8019362:	f7ff fd29 	bl	8018db8 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 8019366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019368:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801936c:	d11e      	bne.n	80193ac <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x188>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 801936e:	4b2c      	ldr	r3, [pc, #176]	; (8019420 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8019370:	2201      	movs	r2, #1
 8019372:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 8019374:	4a2a      	ldr	r2, [pc, #168]	; (8019420 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8019376:	6a3b      	ldr	r3, [r7, #32]
 8019378:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 801937a:	4b29      	ldr	r3, [pc, #164]	; (8019420 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801937c:	2209      	movs	r2, #9
 801937e:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8019380:	683b      	ldr	r3, [r7, #0]
 8019382:	8adb      	ldrh	r3, [r3, #22]
 8019384:	461a      	mov	r2, r3
 8019386:	683b      	ldr	r3, [r7, #0]
 8019388:	8a1b      	ldrh	r3, [r3, #16]
 801938a:	1ad3      	subs	r3, r2, r3
 801938c:	461a      	mov	r2, r3
 801938e:	4b24      	ldr	r3, [pc, #144]	; (8019420 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8019390:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8019392:	7ffb      	ldrb	r3, [r7, #31]
 8019394:	2b10      	cmp	r3, #16
 8019396:	d101      	bne.n	801939c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x178>
 8019398:	2302      	movs	r3, #2
 801939a:	e000      	b.n	801939e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x17a>
 801939c:	2301      	movs	r3, #1
 801939e:	4a20      	ldr	r2, [pc, #128]	; (8019420 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80193a0:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 80193a2:	2100      	movs	r1, #0
 80193a4:	481e      	ldr	r0, [pc, #120]	; (8019420 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80193a6:	f7ec f9ef 	bl	8005788 <HAL_DMA2D_ConfigLayer>
 80193aa:	e005      	b.n	80193b8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x194>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 80193ac:	4a1c      	ldr	r2, [pc, #112]	; (8019420 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80193ae:	69bb      	ldr	r3, [r7, #24]
 80193b0:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 80193b2:	4b1b      	ldr	r3, [pc, #108]	; (8019420 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80193b4:	2200      	movs	r2, #0
 80193b6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 80193b8:	2101      	movs	r1, #1
 80193ba:	4819      	ldr	r0, [pc, #100]	; (8019420 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80193bc:	f7ec f9e4 	bl	8005788 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataFill cache invalidation */

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 80193c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80193c6:	d115      	bne.n	80193f4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1d0>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 80193c8:	683b      	ldr	r3, [r7, #0]
 80193ca:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80193cc:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 80193ce:	683b      	ldr	r3, [r7, #0]
 80193d0:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80193d2:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 80193d4:	683b      	ldr	r3, [r7, #0]
 80193d6:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80193d8:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 80193da:	683b      	ldr	r3, [r7, #0]
 80193dc:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80193de:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 80193e0:	683b      	ldr	r3, [r7, #0]
 80193e2:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80193e4:	9301      	str	r3, [sp, #4]
 80193e6:	9200      	str	r2, [sp, #0]
 80193e8:	4623      	mov	r3, r4
 80193ea:	4602      	mov	r2, r0
 80193ec:	480c      	ldr	r0, [pc, #48]	; (8019420 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80193ee:	f7eb ffee 	bl	80053ce <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 80193f2:	e00d      	b.n	8019410 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1ec>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 80193f4:	683b      	ldr	r3, [r7, #0]
 80193f6:	68db      	ldr	r3, [r3, #12]
 80193f8:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 80193fa:	683b      	ldr	r3, [r7, #0]
 80193fc:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 80193fe:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 8019400:	683b      	ldr	r3, [r7, #0]
 8019402:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8019404:	9300      	str	r3, [sp, #0]
 8019406:	460b      	mov	r3, r1
 8019408:	6a39      	ldr	r1, [r7, #32]
 801940a:	4805      	ldr	r0, [pc, #20]	; (8019420 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801940c:	f7eb ffac 	bl	8005368 <HAL_DMA2D_Start_IT>
}
 8019410:	bf00      	nop
 8019412:	372c      	adds	r7, #44	; 0x2c
 8019414:	46bd      	mov	sp, r7
 8019416:	bd90      	pop	{r4, r7, pc}
 8019418:	84210843 	.word	0x84210843
 801941c:	82082083 	.word	0x82082083
 8019420:	2000c74c 	.word	0x2000c74c

08019424 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8019424:	b580      	push	{r7, lr}
 8019426:	b082      	sub	sp, #8
 8019428:	af00      	add	r7, sp, #0
 801942a:	6078      	str	r0, [r7, #4]
 801942c:	4a05      	ldr	r2, [pc, #20]	; (8019444 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 801942e:	687b      	ldr	r3, [r7, #4]
 8019430:	601a      	str	r2, [r3, #0]
 8019432:	687b      	ldr	r3, [r7, #4]
 8019434:	4618      	mov	r0, r3
 8019436:	f7ff fc2b 	bl	8018c90 <_ZN8touchgfx9DMA_QueueD1Ev>
 801943a:	687b      	ldr	r3, [r7, #4]
 801943c:	4618      	mov	r0, r3
 801943e:	3708      	adds	r7, #8
 8019440:	46bd      	mov	sp, r7
 8019442:	bd80      	pop	{r7, pc}
 8019444:	0802e184 	.word	0x0802e184

08019448 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8019448:	b580      	push	{r7, lr}
 801944a:	b082      	sub	sp, #8
 801944c:	af00      	add	r7, sp, #0
 801944e:	6078      	str	r0, [r7, #4]
 8019450:	6878      	ldr	r0, [r7, #4]
 8019452:	f7ff ffe7 	bl	8019424 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8019456:	2114      	movs	r1, #20
 8019458:	6878      	ldr	r0, [r7, #4]
 801945a:	f011 f966 	bl	802a72a <_ZdlPvj>
 801945e:	687b      	ldr	r3, [r7, #4]
 8019460:	4618      	mov	r0, r3
 8019462:	3708      	adds	r7, #8
 8019464:	46bd      	mov	sp, r7
 8019466:	bd80      	pop	{r7, pc}

08019468 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 8019468:	b480      	push	{r7}
 801946a:	b083      	sub	sp, #12
 801946c:	af00      	add	r7, sp, #0
 801946e:	6078      	str	r0, [r7, #4]
        texts = t;
 8019470:	4a04      	ldr	r2, [pc, #16]	; (8019484 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8019472:	687b      	ldr	r3, [r7, #4]
 8019474:	6013      	str	r3, [r2, #0]
    }
 8019476:	bf00      	nop
 8019478:	370c      	adds	r7, #12
 801947a:	46bd      	mov	sp, r7
 801947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019480:	4770      	bx	lr
 8019482:	bf00      	nop
 8019484:	2000c004 	.word	0x2000c004

08019488 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8019488:	b480      	push	{r7}
 801948a:	b085      	sub	sp, #20
 801948c:	af00      	add	r7, sp, #0
 801948e:	60f8      	str	r0, [r7, #12]
 8019490:	60b9      	str	r1, [r7, #8]
 8019492:	607a      	str	r2, [r7, #4]
 8019494:	603b      	str	r3, [r7, #0]
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app) : presenterStorage(pres),
        screenStorage(scr),
        transitionStorage(tra),
        frontendApplication(app)
 8019496:	4a0b      	ldr	r2, [pc, #44]	; (80194c4 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8019498:	68fb      	ldr	r3, [r7, #12]
 801949a:	601a      	str	r2, [r3, #0]
 801949c:	68fb      	ldr	r3, [r7, #12]
 801949e:	68ba      	ldr	r2, [r7, #8]
 80194a0:	605a      	str	r2, [r3, #4]
 80194a2:	68fb      	ldr	r3, [r7, #12]
 80194a4:	687a      	ldr	r2, [r7, #4]
 80194a6:	609a      	str	r2, [r3, #8]
 80194a8:	68fb      	ldr	r3, [r7, #12]
 80194aa:	683a      	ldr	r2, [r7, #0]
 80194ac:	60da      	str	r2, [r3, #12]
 80194ae:	68fb      	ldr	r3, [r7, #12]
 80194b0:	69ba      	ldr	r2, [r7, #24]
 80194b2:	611a      	str	r2, [r3, #16]
    {
    }
 80194b4:	68fb      	ldr	r3, [r7, #12]
 80194b6:	4618      	mov	r0, r3
 80194b8:	3714      	adds	r7, #20
 80194ba:	46bd      	mov	sp, r7
 80194bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194c0:	4770      	bx	lr
 80194c2:	bf00      	nop
 80194c4:	0802d214 	.word	0x0802d214

080194c8 <_ZN8touchgfx7MVPHeapD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPHeap()
 80194c8:	b480      	push	{r7}
 80194ca:	b083      	sub	sp, #12
 80194cc:	af00      	add	r7, sp, #0
 80194ce:	6078      	str	r0, [r7, #4]
    {
 80194d0:	4a04      	ldr	r2, [pc, #16]	; (80194e4 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 80194d2:	687b      	ldr	r3, [r7, #4]
 80194d4:	601a      	str	r2, [r3, #0]
    }
 80194d6:	687b      	ldr	r3, [r7, #4]
 80194d8:	4618      	mov	r0, r3
 80194da:	370c      	adds	r7, #12
 80194dc:	46bd      	mov	sp, r7
 80194de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194e2:	4770      	bx	lr
 80194e4:	0802d214 	.word	0x0802d214

080194e8 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 80194e8:	b580      	push	{r7, lr}
 80194ea:	b082      	sub	sp, #8
 80194ec:	af00      	add	r7, sp, #0
 80194ee:	6078      	str	r0, [r7, #4]
    }
 80194f0:	6878      	ldr	r0, [r7, #4]
 80194f2:	f7ff ffe9 	bl	80194c8 <_ZN8touchgfx7MVPHeapD1Ev>
 80194f6:	2114      	movs	r1, #20
 80194f8:	6878      	ldr	r0, [r7, #4]
 80194fa:	f011 f916 	bl	802a72a <_ZdlPvj>
 80194fe:	687b      	ldr	r3, [r7, #4]
 8019500:	4618      	mov	r0, r3
 8019502:	3708      	adds	r7, #8
 8019504:	46bd      	mov	sp, r7
 8019506:	bd80      	pop	{r7, pc}

08019508 <_ZN8touchgfx3LCDD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~LCD()
 8019508:	b480      	push	{r7}
 801950a:	b083      	sub	sp, #12
 801950c:	af00      	add	r7, sp, #0
 801950e:	6078      	str	r0, [r7, #4]
    {
 8019510:	4a04      	ldr	r2, [pc, #16]	; (8019524 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8019512:	687b      	ldr	r3, [r7, #4]
 8019514:	601a      	str	r2, [r3, #0]
    }
 8019516:	687b      	ldr	r3, [r7, #4]
 8019518:	4618      	mov	r0, r3
 801951a:	370c      	adds	r7, #12
 801951c:	46bd      	mov	sp, r7
 801951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019522:	4770      	bx	lr
 8019524:	0802ec50 	.word	0x0802ec50

08019528 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8019528:	b580      	push	{r7, lr}
 801952a:	b082      	sub	sp, #8
 801952c:	af00      	add	r7, sp, #0
 801952e:	6078      	str	r0, [r7, #4]
    }
 8019530:	6878      	ldr	r0, [r7, #4]
 8019532:	f7ff ffe9 	bl	8019508 <_ZN8touchgfx3LCDD1Ev>
 8019536:	2108      	movs	r1, #8
 8019538:	6878      	ldr	r0, [r7, #4]
 801953a:	f011 f8f6 	bl	802a72a <_ZdlPvj>
 801953e:	687b      	ldr	r3, [r7, #4]
 8019540:	4618      	mov	r0, r3
 8019542:	3708      	adds	r7, #8
 8019544:	46bd      	mov	sp, r7
 8019546:	bd80      	pop	{r7, pc}

08019548 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
     *
     *        Defines the state of a drag.
     */
    struct DragState
    {
        DragState() : startX(0),
 8019548:	b480      	push	{r7}
 801954a:	b083      	sub	sp, #12
 801954c:	af00      	add	r7, sp, #0
 801954e:	6078      	str	r0, [r7, #4]
            downX(0),
            downY(0),
            tickCount(0),
            velocityX(0),
            velocityY(0),
            inProgress(false)
 8019550:	687b      	ldr	r3, [r7, #4]
 8019552:	2200      	movs	r2, #0
 8019554:	801a      	strh	r2, [r3, #0]
 8019556:	687b      	ldr	r3, [r7, #4]
 8019558:	2200      	movs	r2, #0
 801955a:	805a      	strh	r2, [r3, #2]
 801955c:	687b      	ldr	r3, [r7, #4]
 801955e:	2200      	movs	r2, #0
 8019560:	809a      	strh	r2, [r3, #4]
 8019562:	687b      	ldr	r3, [r7, #4]
 8019564:	2200      	movs	r2, #0
 8019566:	80da      	strh	r2, [r3, #6]
 8019568:	687b      	ldr	r3, [r7, #4]
 801956a:	2200      	movs	r2, #0
 801956c:	811a      	strh	r2, [r3, #8]
 801956e:	687b      	ldr	r3, [r7, #4]
 8019570:	2200      	movs	r2, #0
 8019572:	815a      	strh	r2, [r3, #10]
 8019574:	687b      	ldr	r3, [r7, #4]
 8019576:	2200      	movs	r2, #0
 8019578:	819a      	strh	r2, [r3, #12]
 801957a:	687b      	ldr	r3, [r7, #4]
 801957c:	2200      	movs	r2, #0
 801957e:	739a      	strb	r2, [r3, #14]
        {
        }
 8019580:	687b      	ldr	r3, [r7, #4]
 8019582:	4618      	mov	r0, r3
 8019584:	370c      	adds	r7, #12
 8019586:	46bd      	mov	sp, r7
 8019588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801958c:	4770      	bx	lr

0801958e <_ZN8touchgfx8GesturesC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Does nothing.
     */
    Gestures() : listener(0), dragThresholdValue(0) { }
 801958e:	b580      	push	{r7, lr}
 8019590:	b082      	sub	sp, #8
 8019592:	af00      	add	r7, sp, #0
 8019594:	6078      	str	r0, [r7, #4]
 8019596:	687b      	ldr	r3, [r7, #4]
 8019598:	4618      	mov	r0, r3
 801959a:	f7ff ffd5 	bl	8019548 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 801959e:	687b      	ldr	r3, [r7, #4]
 80195a0:	2200      	movs	r2, #0
 80195a2:	611a      	str	r2, [r3, #16]
 80195a4:	687b      	ldr	r3, [r7, #4]
 80195a6:	2200      	movs	r2, #0
 80195a8:	829a      	strh	r2, [r3, #20]
 80195aa:	687b      	ldr	r3, [r7, #4]
 80195ac:	4618      	mov	r0, r3
 80195ae:	3708      	adds	r7, #8
 80195b0:	46bd      	mov	sp, r7
 80195b2:	bd80      	pop	{r7, pc}

080195b4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height) :
 80195b4:	b580      	push	{r7, lr}
 80195b6:	b084      	sub	sp, #16
 80195b8:	af00      	add	r7, sp, #0
 80195ba:	60f8      	str	r0, [r7, #12]
 80195bc:	60b9      	str	r1, [r7, #8]
 80195be:	607a      	str	r2, [r7, #4]
 80195c0:	603b      	str	r3, [r7, #0]
        displayOrientationChangeRequested(false)
 80195c2:	4a44      	ldr	r2, [pc, #272]	; (80196d4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 80195c4:	68fb      	ldr	r3, [r7, #12]
 80195c6:	601a      	str	r2, [r3, #0]
 80195c8:	68fb      	ldr	r3, [r7, #12]
 80195ca:	68ba      	ldr	r2, [r7, #8]
 80195cc:	605a      	str	r2, [r3, #4]
 80195ce:	68fb      	ldr	r3, [r7, #12]
 80195d0:	687a      	ldr	r2, [r7, #4]
 80195d2:	609a      	str	r2, [r3, #8]
 80195d4:	68fb      	ldr	r3, [r7, #12]
 80195d6:	683a      	ldr	r2, [r7, #0]
 80195d8:	60da      	str	r2, [r3, #12]
 80195da:	68fb      	ldr	r3, [r7, #12]
 80195dc:	2200      	movs	r2, #0
 80195de:	611a      	str	r2, [r3, #16]
 80195e0:	68fb      	ldr	r3, [r7, #12]
 80195e2:	2200      	movs	r2, #0
 80195e4:	615a      	str	r2, [r3, #20]
 80195e6:	68fb      	ldr	r3, [r7, #12]
 80195e8:	2200      	movs	r2, #0
 80195ea:	619a      	str	r2, [r3, #24]
 80195ec:	68fb      	ldr	r3, [r7, #12]
 80195ee:	331c      	adds	r3, #28
 80195f0:	4618      	mov	r0, r3
 80195f2:	f7ff ffcc 	bl	801958e <_ZN8touchgfx8GesturesC1Ev>
 80195f6:	68fb      	ldr	r3, [r7, #12]
 80195f8:	2200      	movs	r2, #0
 80195fa:	639a      	str	r2, [r3, #56]	; 0x38
 80195fc:	68fb      	ldr	r3, [r7, #12]
 80195fe:	2200      	movs	r2, #0
 8019600:	63da      	str	r2, [r3, #60]	; 0x3c
 8019602:	68fb      	ldr	r3, [r7, #12]
 8019604:	2200      	movs	r2, #0
 8019606:	641a      	str	r2, [r3, #64]	; 0x40
 8019608:	68fb      	ldr	r3, [r7, #12]
 801960a:	2200      	movs	r2, #0
 801960c:	645a      	str	r2, [r3, #68]	; 0x44
 801960e:	68fb      	ldr	r3, [r7, #12]
 8019610:	2200      	movs	r2, #0
 8019612:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8019616:	68fb      	ldr	r3, [r7, #12]
 8019618:	2201      	movs	r2, #1
 801961a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 801961e:	68fb      	ldr	r3, [r7, #12]
 8019620:	2201      	movs	r2, #1
 8019622:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8019626:	68fb      	ldr	r3, [r7, #12]
 8019628:	2200      	movs	r2, #0
 801962a:	64da      	str	r2, [r3, #76]	; 0x4c
 801962c:	68fb      	ldr	r3, [r7, #12]
 801962e:	3350      	adds	r3, #80	; 0x50
 8019630:	4618      	mov	r0, r3
 8019632:	f7f9 f867 	bl	8012704 <_ZN8touchgfx4RectC1Ev>
 8019636:	68fb      	ldr	r3, [r7, #12]
 8019638:	2201      	movs	r2, #1
 801963a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 801963e:	68fb      	ldr	r3, [r7, #12]
 8019640:	2200      	movs	r2, #0
 8019642:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8019646:	68fb      	ldr	r3, [r7, #12]
 8019648:	2200      	movs	r2, #0
 801964a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 801964e:	68fb      	ldr	r3, [r7, #12]
 8019650:	2201      	movs	r2, #1
 8019652:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8019656:	68fb      	ldr	r3, [r7, #12]
 8019658:	2200      	movs	r2, #0
 801965a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 801965e:	68fb      	ldr	r3, [r7, #12]
 8019660:	2200      	movs	r2, #0
 8019662:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8019666:	68fb      	ldr	r3, [r7, #12]
 8019668:	2200      	movs	r2, #0
 801966a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 801966e:	68fb      	ldr	r3, [r7, #12]
 8019670:	2200      	movs	r2, #0
 8019672:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8019676:	68fb      	ldr	r3, [r7, #12]
 8019678:	2200      	movs	r2, #0
 801967a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 801967e:	68fb      	ldr	r3, [r7, #12]
 8019680:	2200      	movs	r2, #0
 8019682:	671a      	str	r2, [r3, #112]	; 0x70
 8019684:	68fb      	ldr	r3, [r7, #12]
 8019686:	2200      	movs	r2, #0
 8019688:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        instance = this;
 801968c:	4a12      	ldr	r2, [pc, #72]	; (80196d8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x124>)
 801968e:	68fb      	ldr	r3, [r7, #12]
 8019690:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 8019692:	4a12      	ldr	r2, [pc, #72]	; (80196dc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8019694:	8b3b      	ldrh	r3, [r7, #24]
 8019696:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 8019698:	4a11      	ldr	r2, [pc, #68]	; (80196e0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 801969a:	8bbb      	ldrh	r3, [r7, #28]
 801969c:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 801969e:	4b11      	ldr	r3, [pc, #68]	; (80196e4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x130>)
 80196a0:	2200      	movs	r2, #0
 80196a2:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 80196a4:	4b0d      	ldr	r3, [pc, #52]	; (80196dc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 80196a6:	881a      	ldrh	r2, [r3, #0]
 80196a8:	4b0f      	ldr	r3, [pc, #60]	; (80196e8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x134>)
 80196aa:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 80196ac:	4b0c      	ldr	r3, [pc, #48]	; (80196e0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 80196ae:	881a      	ldrh	r2, [r3, #0]
 80196b0:	4b0e      	ldr	r3, [pc, #56]	; (80196ec <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 80196b2:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80196b4:	8b3a      	ldrh	r2, [r7, #24]
 80196b6:	8bbb      	ldrh	r3, [r7, #28]
 80196b8:	429a      	cmp	r2, r3
 80196ba:	d301      	bcc.n	80196c0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10c>
 80196bc:	2200      	movs	r2, #0
 80196be:	e000      	b.n	80196c2 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10e>
 80196c0:	2201      	movs	r2, #1
 80196c2:	68fb      	ldr	r3, [r7, #12]
 80196c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 80196c8:	68fb      	ldr	r3, [r7, #12]
 80196ca:	4618      	mov	r0, r3
 80196cc:	3710      	adds	r7, #16
 80196ce:	46bd      	mov	sp, r7
 80196d0:	bd80      	pop	{r7, pc}
 80196d2:	bf00      	nop
 80196d4:	0802dcf0 	.word	0x0802dcf0
 80196d8:	2000bf68 	.word	0x2000bf68
 80196dc:	2000bf5a 	.word	0x2000bf5a
 80196e0:	2000bf5c 	.word	0x2000bf5c
 80196e4:	2000bf5e 	.word	0x2000bf5e
 80196e8:	2000bf60 	.word	0x2000bf60
 80196ec:	2000bf62 	.word	0x2000bf62

080196f0 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 80196f0:	b580      	push	{r7, lr}
 80196f2:	b082      	sub	sp, #8
 80196f4:	af00      	add	r7, sp, #0
 80196f6:	6078      	str	r0, [r7, #4]
 80196f8:	6039      	str	r1, [r7, #0]
    {
        app.gotoMainScreenNoTransition();
 80196fa:	683b      	ldr	r3, [r7, #0]
 80196fc:	4618      	mov	r0, r3
 80196fe:	f7f7 fd8b 	bl	8011218 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
    }
 8019702:	bf00      	nop
 8019704:	3708      	adds	r7, #8
 8019706:	46bd      	mov	sp, r7
 8019708:	bd80      	pop	{r7, pc}
	...

0801970c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 801970c:	b580      	push	{r7, lr}
 801970e:	b086      	sub	sp, #24
 8019710:	af02      	add	r7, sp, #8
 8019712:	60f8      	str	r0, [r7, #12]
 8019714:	60b9      	str	r1, [r7, #8]
 8019716:	607a      	str	r2, [r7, #4]
 8019718:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 801971a:	68f8      	ldr	r0, [r7, #12]
 801971c:	69bb      	ldr	r3, [r7, #24]
 801971e:	9300      	str	r3, [sp, #0]
 8019720:	683b      	ldr	r3, [r7, #0]
 8019722:	687a      	ldr	r2, [r7, #4]
 8019724:	68b9      	ldr	r1, [r7, #8]
 8019726:	f7ff feaf 	bl	8019488 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 801972a:	4a04      	ldr	r2, [pc, #16]	; (801973c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 801972c:	68fb      	ldr	r3, [r7, #12]
 801972e:	601a      	str	r2, [r3, #0]
    {

    }
 8019730:	68fb      	ldr	r3, [r7, #12]
 8019732:	4618      	mov	r0, r3
 8019734:	3710      	adds	r7, #16
 8019736:	46bd      	mov	sp, r7
 8019738:	bd80      	pop	{r7, pc}
 801973a:	bf00      	nop
 801973c:	0802d200 	.word	0x0802d200

08019740 <__tcf_0>:
            > > CombinedTransitionTypes;
    typedef meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8019740:	b580      	push	{r7, lr}
 8019742:	af00      	add	r7, sp, #0
 8019744:	4801      	ldr	r0, [pc, #4]	; (801974c <__tcf_0+0xc>)
 8019746:	f000 f9dd 	bl	8019b04 <_ZN12FrontendHeapD1Ev>
 801974a:	bd80      	pop	{r7, pc}
 801974c:	2000882c 	.word	0x2000882c

08019750 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8019750:	b580      	push	{r7, lr}
 8019752:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8019754:	4b08      	ldr	r3, [pc, #32]	; (8019778 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 8019756:	681b      	ldr	r3, [r3, #0]
 8019758:	f003 0301 	and.w	r3, r3, #1
 801975c:	2b00      	cmp	r3, #0
 801975e:	d108      	bne.n	8019772 <_ZN12FrontendHeap11getInstanceEv+0x22>
 8019760:	4806      	ldr	r0, [pc, #24]	; (801977c <_ZN12FrontendHeap11getInstanceEv+0x2c>)
 8019762:	f000 f831 	bl	80197c8 <_ZN12FrontendHeapC1Ev>
 8019766:	4b04      	ldr	r3, [pc, #16]	; (8019778 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 8019768:	2201      	movs	r2, #1
 801976a:	601a      	str	r2, [r3, #0]
 801976c:	4804      	ldr	r0, [pc, #16]	; (8019780 <_ZN12FrontendHeap11getInstanceEv+0x30>)
 801976e:	f011 f825 	bl	802a7bc <atexit>
        return instance;
 8019772:	4b02      	ldr	r3, [pc, #8]	; (801977c <_ZN12FrontendHeap11getInstanceEv+0x2c>)
    }
 8019774:	4618      	mov	r0, r3
 8019776:	bd80      	pop	{r7, pc}
 8019778:	2000b254 	.word	0x2000b254
 801977c:	2000882c 	.word	0x2000882c
 8019780:	08019741 	.word	0x08019741

08019784 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8019784:	b580      	push	{r7, lr}
 8019786:	b082      	sub	sp, #8
 8019788:	af00      	add	r7, sp, #0
 801978a:	6078      	str	r0, [r7, #4]
 801978c:	4a05      	ldr	r2, [pc, #20]	; (80197a4 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 801978e:	687b      	ldr	r3, [r7, #4]
 8019790:	601a      	str	r2, [r3, #0]
 8019792:	687b      	ldr	r3, [r7, #4]
 8019794:	4618      	mov	r0, r3
 8019796:	f7ff fe97 	bl	80194c8 <_ZN8touchgfx7MVPHeapD1Ev>
 801979a:	687b      	ldr	r3, [r7, #4]
 801979c:	4618      	mov	r0, r3
 801979e:	3708      	adds	r7, #8
 80197a0:	46bd      	mov	sp, r7
 80197a2:	bd80      	pop	{r7, pc}
 80197a4:	0802d200 	.word	0x0802d200

080197a8 <_ZN16FrontendHeapBaseD0Ev>:
 80197a8:	b580      	push	{r7, lr}
 80197aa:	b082      	sub	sp, #8
 80197ac:	af00      	add	r7, sp, #0
 80197ae:	6078      	str	r0, [r7, #4]
 80197b0:	6878      	ldr	r0, [r7, #4]
 80197b2:	f7ff ffe7 	bl	8019784 <_ZN16FrontendHeapBaseD1Ev>
 80197b6:	2114      	movs	r1, #20
 80197b8:	6878      	ldr	r0, [r7, #4]
 80197ba:	f010 ffb6 	bl	802a72a <_ZdlPvj>
 80197be:	687b      	ldr	r3, [r7, #4]
 80197c0:	4618      	mov	r0, r3
 80197c2:	3708      	adds	r7, #8
 80197c4:	46bd      	mov	sp, r7
 80197c6:	bd80      	pop	{r7, pc}

080197c8 <_ZN12FrontendHeapC1Ev>:
    Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80197c8:	b5b0      	push	{r4, r5, r7, lr}
 80197ca:	b084      	sub	sp, #16
 80197cc:	af02      	add	r7, sp, #8
 80197ce:	6078      	str	r0, [r7, #4]
        app(model, *this)
 80197d0:	6878      	ldr	r0, [r7, #4]
 80197d2:	687b      	ldr	r3, [r7, #4]
 80197d4:	f103 0414 	add.w	r4, r3, #20
 80197d8:	687b      	ldr	r3, [r7, #4]
 80197da:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 80197de:	687b      	ldr	r3, [r7, #4]
 80197e0:	f642 0278 	movw	r2, #10360	; 0x2878
 80197e4:	441a      	add	r2, r3
 80197e6:	6879      	ldr	r1, [r7, #4]
 80197e8:	f642 03d4 	movw	r3, #10452	; 0x28d4
 80197ec:	440b      	add	r3, r1
 80197ee:	9300      	str	r3, [sp, #0]
 80197f0:	4613      	mov	r3, r2
 80197f2:	462a      	mov	r2, r5
 80197f4:	4621      	mov	r1, r4
 80197f6:	f7ff ff89 	bl	801970c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 80197fa:	4a1a      	ldr	r2, [pc, #104]	; (8019864 <_ZN12FrontendHeapC1Ev+0x9c>)
 80197fc:	687b      	ldr	r3, [r7, #4]
 80197fe:	601a      	str	r2, [r3, #0]
 8019800:	687b      	ldr	r3, [r7, #4]
 8019802:	3314      	adds	r3, #20
 8019804:	4618      	mov	r0, r3
 8019806:	f000 f8df 	bl	80199c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801980a:	687b      	ldr	r3, [r7, #4]
 801980c:	332c      	adds	r3, #44	; 0x2c
 801980e:	4618      	mov	r0, r3
 8019810:	f000 f90e 	bl	8019a30 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8019814:	687a      	ldr	r2, [r7, #4]
 8019816:	f642 0378 	movw	r3, #10360	; 0x2878
 801981a:	4413      	add	r3, r2
 801981c:	4618      	mov	r0, r3
 801981e:	f000 f93d 	bl	8019a9c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 8019822:	687a      	ldr	r2, [r7, #4]
 8019824:	f642 03d4 	movw	r3, #10452	; 0x28d4
 8019828:	4413      	add	r3, r2
 801982a:	687a      	ldr	r2, [r7, #4]
 801982c:	f642 2124 	movw	r1, #10788	; 0x2a24
 8019830:	4411      	add	r1, r2
 8019832:	687a      	ldr	r2, [r7, #4]
 8019834:	4618      	mov	r0, r3
 8019836:	f7fd f9a5 	bl	8016b84 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 801983a:	687a      	ldr	r2, [r7, #4]
 801983c:	f642 2324 	movw	r3, #10788	; 0x2a24
 8019840:	4413      	add	r3, r2
 8019842:	4618      	mov	r0, r3
 8019844:	f7fd fef2 	bl	801762c <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 8019848:	6878      	ldr	r0, [r7, #4]
 801984a:	687a      	ldr	r2, [r7, #4]
 801984c:	f642 03d4 	movw	r3, #10452	; 0x28d4
 8019850:	4413      	add	r3, r2
 8019852:	4619      	mov	r1, r3
 8019854:	f7ff ff4c 	bl	80196f0 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8019858:	687b      	ldr	r3, [r7, #4]
 801985a:	4618      	mov	r0, r3
 801985c:	3708      	adds	r7, #8
 801985e:	46bd      	mov	sp, r7
 8019860:	bdb0      	pop	{r4, r5, r7, pc}
 8019862:	bf00      	nop
 8019864:	0802d150 	.word	0x0802d150

08019868 <_ZN8touchgfx8LCD24bppD1Ev>:
class LCD24bpp : public LCD
{
public:
    LCD24bpp();

    virtual ~LCD24bpp()
 8019868:	b580      	push	{r7, lr}
 801986a:	b082      	sub	sp, #8
 801986c:	af00      	add	r7, sp, #0
 801986e:	6078      	str	r0, [r7, #4]
    {
 8019870:	4a05      	ldr	r2, [pc, #20]	; (8019888 <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 8019872:	687b      	ldr	r3, [r7, #4]
 8019874:	601a      	str	r2, [r3, #0]
 8019876:	687b      	ldr	r3, [r7, #4]
 8019878:	4618      	mov	r0, r3
 801987a:	f7ff fe45 	bl	8019508 <_ZN8touchgfx3LCDD1Ev>
    }
 801987e:	687b      	ldr	r3, [r7, #4]
 8019880:	4618      	mov	r0, r3
 8019882:	3708      	adds	r7, #8
 8019884:	46bd      	mov	sp, r7
 8019886:	bd80      	pop	{r7, pc}
 8019888:	0803002c 	.word	0x0803002c

0801988c <_ZN8touchgfx8LCD24bppD0Ev>:
    virtual ~LCD24bpp()
 801988c:	b580      	push	{r7, lr}
 801988e:	b082      	sub	sp, #8
 8019890:	af00      	add	r7, sp, #0
 8019892:	6078      	str	r0, [r7, #4]
    }
 8019894:	6878      	ldr	r0, [r7, #4]
 8019896:	f7ff ffe7 	bl	8019868 <_ZN8touchgfx8LCD24bppD1Ev>
 801989a:	2158      	movs	r1, #88	; 0x58
 801989c:	6878      	ldr	r0, [r7, #4]
 801989e:	f010 ff44 	bl	802a72a <_ZdlPvj>
 80198a2:	687b      	ldr	r3, [r7, #4]
 80198a4:	4618      	mov	r0, r3
 80198a6:	3708      	adds	r7, #8
 80198a8:	46bd      	mov	sp, r7
 80198aa:	bd80      	pop	{r7, pc}

080198ac <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 80198ac:	b580      	push	{r7, lr}
 80198ae:	b086      	sub	sp, #24
 80198b0:	af02      	add	r7, sp, #8
 80198b2:	60f8      	str	r0, [r7, #12]
 80198b4:	60b9      	str	r1, [r7, #8]
 80198b6:	607a      	str	r2, [r7, #4]
 80198b8:	603b      	str	r3, [r7, #0]
 80198ba:	68f8      	ldr	r0, [r7, #12]
 80198bc:	8bbb      	ldrh	r3, [r7, #28]
 80198be:	9301      	str	r3, [sp, #4]
 80198c0:	8b3b      	ldrh	r3, [r7, #24]
 80198c2:	9300      	str	r3, [sp, #0]
 80198c4:	683b      	ldr	r3, [r7, #0]
 80198c6:	687a      	ldr	r2, [r7, #4]
 80198c8:	68b9      	ldr	r1, [r7, #8]
 80198ca:	f7ff fe73 	bl	80195b4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 80198ce:	4a04      	ldr	r2, [pc, #16]	; (80198e0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80198d0:	68fb      	ldr	r3, [r7, #12]
 80198d2:	601a      	str	r2, [r3, #0]
    }
 80198d4:	68fb      	ldr	r3, [r7, #12]
 80198d6:	4618      	mov	r0, r3
 80198d8:	3710      	adds	r7, #16
 80198da:	46bd      	mov	sp, r7
 80198dc:	bd80      	pop	{r7, pc}
 80198de:	bf00      	nop
 80198e0:	0802d224 	.word	0x0802d224

080198e4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80198e4:	b580      	push	{r7, lr}
 80198e6:	b086      	sub	sp, #24
 80198e8:	af02      	add	r7, sp, #8
 80198ea:	60f8      	str	r0, [r7, #12]
 80198ec:	60b9      	str	r1, [r7, #8]
 80198ee:	607a      	str	r2, [r7, #4]
 80198f0:	603b      	str	r3, [r7, #0]
 80198f2:	68f8      	ldr	r0, [r7, #12]
 80198f4:	8bbb      	ldrh	r3, [r7, #28]
 80198f6:	9301      	str	r3, [sp, #4]
 80198f8:	8b3b      	ldrh	r3, [r7, #24]
 80198fa:	9300      	str	r3, [sp, #0]
 80198fc:	683b      	ldr	r3, [r7, #0]
 80198fe:	687a      	ldr	r2, [r7, #4]
 8019900:	68b9      	ldr	r1, [r7, #8]
 8019902:	f7ff ffd3 	bl	80198ac <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8019906:	4a04      	ldr	r2, [pc, #16]	; (8019918 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8019908:	68fb      	ldr	r3, [r7, #12]
 801990a:	601a      	str	r2, [r3, #0]
    }
 801990c:	68fb      	ldr	r3, [r7, #12]
 801990e:	4618      	mov	r0, r3
 8019910:	3710      	adds	r7, #16
 8019912:	46bd      	mov	sp, r7
 8019914:	bd80      	pop	{r7, pc}
 8019916:	bf00      	nop
 8019918:	0802cf50 	.word	0x0802cf50

0801991c <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 801991c:	b480      	push	{r7}
 801991e:	b083      	sub	sp, #12
 8019920:	af00      	add	r7, sp, #0
 8019922:	6078      	str	r0, [r7, #4]
 8019924:	4a04      	ldr	r2, [pc, #16]	; (8019938 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8019926:	687b      	ldr	r3, [r7, #4]
 8019928:	601a      	str	r2, [r3, #0]
 801992a:	687b      	ldr	r3, [r7, #4]
 801992c:	4618      	mov	r0, r3
 801992e:	370c      	adds	r7, #12
 8019930:	46bd      	mov	sp, r7
 8019932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019936:	4770      	bx	lr
 8019938:	0802cf38 	.word	0x0802cf38

0801993c <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 801993c:	b580      	push	{r7, lr}
 801993e:	b082      	sub	sp, #8
 8019940:	af00      	add	r7, sp, #0
 8019942:	6078      	str	r0, [r7, #4]
 8019944:	687b      	ldr	r3, [r7, #4]
 8019946:	4618      	mov	r0, r3
 8019948:	f7ff ffe8 	bl	801991c <_ZN8touchgfx15TouchControllerC1Ev>
 801994c:	4a03      	ldr	r2, [pc, #12]	; (801995c <_ZN20STM32TouchControllerC1Ev+0x20>)
 801994e:	687b      	ldr	r3, [r7, #4]
 8019950:	601a      	str	r2, [r3, #0]
 8019952:	687b      	ldr	r3, [r7, #4]
 8019954:	4618      	mov	r0, r3
 8019956:	3708      	adds	r7, #8
 8019958:	46bd      	mov	sp, r7
 801995a:	bd80      	pop	{r7, pc}
 801995c:	0802cf20 	.word	0x0802cf20

08019960 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8019960:	b590      	push	{r4, r7, lr}
 8019962:	b085      	sub	sp, #20
 8019964:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8019966:	f7fc ffe9 	bl	801693c <_ZN14BitmapDatabase11getInstanceEv>
 801996a:	4604      	mov	r4, r0
 801996c:	f7fc fff0 	bl	8016950 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8019970:	4603      	mov	r3, r0
 8019972:	4619      	mov	r1, r3
 8019974:	2300      	movs	r3, #0
 8019976:	9300      	str	r3, [sp, #0]
 8019978:	2300      	movs	r3, #0
 801997a:	2200      	movs	r2, #0
 801997c:	4620      	mov	r0, r4
 801997e:	f007 f999 	bl	8020cb4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 8019982:	4809      	ldr	r0, [pc, #36]	; (80199a8 <touchgfx_init+0x48>)
 8019984:	f7ff fd70 	bl	8019468 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 8019988:	2000      	movs	r0, #0
 801998a:	f7fd f805 	bl	8016998 <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 801998e:	4807      	ldr	r0, [pc, #28]	; (80199ac <touchgfx_init+0x4c>)
 8019990:	f007 f8de 	bl	8020b50 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 8019994:	f7ff fedc 	bl	8019750 <_ZN12FrontendHeap11getInstanceEv>
 8019998:	6078      	str	r0, [r7, #4]
  (void)heap; // we need to obtain the reference above to initialize the frontend heap.

  hal.initialize();
 801999a:	4805      	ldr	r0, [pc, #20]	; (80199b0 <touchgfx_init+0x50>)
 801999c:	f7fe ffda 	bl	8018954 <_ZN11TouchGFXHAL10initializeEv>
}
 80199a0:	bf00      	nop
 80199a2:	370c      	adds	r7, #12
 80199a4:	46bd      	mov	sp, r7
 80199a6:	bd90      	pop	{r4, r7, pc}
 80199a8:	2000bed4 	.word	0x2000bed4
 80199ac:	20000058 	.word	0x20000058
 80199b0:	2000bed8 	.word	0x2000bed8

080199b4 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 80199b4:	b580      	push	{r7, lr}
 80199b6:	af00      	add	r7, sp, #0
  * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
 80199b8:	4802      	ldr	r0, [pc, #8]	; (80199c4 <touchgfx_taskEntry+0x10>)
 80199ba:	f001 fca6 	bl	801b30a <_ZN8touchgfx3HAL9taskEntryEv>
}
 80199be:	bf00      	nop
 80199c0:	bd80      	pop	{r7, pc}
 80199c2:	bf00      	nop
 80199c4:	2000bed8 	.word	0x2000bed8

080199c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs an empty Partition.
     */
    Partition() : AbstractPartition()
 80199c8:	b580      	push	{r7, lr}
 80199ca:	b082      	sub	sp, #8
 80199cc:	af00      	add	r7, sp, #0
 80199ce:	6078      	str	r0, [r7, #4]
 80199d0:	687b      	ldr	r3, [r7, #4]
 80199d2:	4618      	mov	r0, r3
 80199d4:	f000 ff16 	bl	801a804 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80199d8:	4a03      	ldr	r2, [pc, #12]	; (80199e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80199da:	687b      	ldr	r3, [r7, #4]
 80199dc:	601a      	str	r2, [r3, #0]
    {
    }
 80199de:	687b      	ldr	r3, [r7, #4]
 80199e0:	4618      	mov	r0, r3
 80199e2:	3708      	adds	r7, #8
 80199e4:	46bd      	mov	sp, r7
 80199e6:	bd80      	pop	{r7, pc}
 80199e8:	0802d1cc 	.word	0x0802d1cc

080199ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    /**
     * @fn virtual Partition::~Partition()
     *
     * @brief Destructor.
     */
    virtual ~Partition()
 80199ec:	b580      	push	{r7, lr}
 80199ee:	b082      	sub	sp, #8
 80199f0:	af00      	add	r7, sp, #0
 80199f2:	6078      	str	r0, [r7, #4]
    {
    }
 80199f4:	4a05      	ldr	r2, [pc, #20]	; (8019a0c <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80199f6:	687b      	ldr	r3, [r7, #4]
 80199f8:	601a      	str	r2, [r3, #0]
 80199fa:	687b      	ldr	r3, [r7, #4]
 80199fc:	4618      	mov	r0, r3
 80199fe:	f000 feff 	bl	801a800 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8019a02:	687b      	ldr	r3, [r7, #4]
 8019a04:	4618      	mov	r0, r3
 8019a06:	3708      	adds	r7, #8
 8019a08:	46bd      	mov	sp, r7
 8019a0a:	bd80      	pop	{r7, pc}
 8019a0c:	0802d1cc 	.word	0x0802d1cc

08019a10 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8019a10:	b580      	push	{r7, lr}
 8019a12:	b082      	sub	sp, #8
 8019a14:	af00      	add	r7, sp, #0
 8019a16:	6078      	str	r0, [r7, #4]
    }
 8019a18:	6878      	ldr	r0, [r7, #4]
 8019a1a:	f7ff ffe7 	bl	80199ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8019a1e:	2118      	movs	r1, #24
 8019a20:	6878      	ldr	r0, [r7, #4]
 8019a22:	f010 fe82 	bl	802a72a <_ZdlPvj>
 8019a26:	687b      	ldr	r3, [r7, #4]
 8019a28:	4618      	mov	r0, r3
 8019a2a:	3708      	adds	r7, #8
 8019a2c:	46bd      	mov	sp, r7
 8019a2e:	bd80      	pop	{r7, pc}

08019a30 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 8019a30:	b580      	push	{r7, lr}
 8019a32:	b082      	sub	sp, #8
 8019a34:	af00      	add	r7, sp, #0
 8019a36:	6078      	str	r0, [r7, #4]
 8019a38:	687b      	ldr	r3, [r7, #4]
 8019a3a:	4618      	mov	r0, r3
 8019a3c:	f000 fee2 	bl	801a804 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8019a40:	4a03      	ldr	r2, [pc, #12]	; (8019a50 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8019a42:	687b      	ldr	r3, [r7, #4]
 8019a44:	601a      	str	r2, [r3, #0]
    }
 8019a46:	687b      	ldr	r3, [r7, #4]
 8019a48:	4618      	mov	r0, r3
 8019a4a:	3708      	adds	r7, #8
 8019a4c:	46bd      	mov	sp, r7
 8019a4e:	bd80      	pop	{r7, pc}
 8019a50:	0802d198 	.word	0x0802d198

08019a54 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 8019a54:	b580      	push	{r7, lr}
 8019a56:	b082      	sub	sp, #8
 8019a58:	af00      	add	r7, sp, #0
 8019a5a:	6078      	str	r0, [r7, #4]
    }
 8019a5c:	4a05      	ldr	r2, [pc, #20]	; (8019a74 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8019a5e:	687b      	ldr	r3, [r7, #4]
 8019a60:	601a      	str	r2, [r3, #0]
 8019a62:	687b      	ldr	r3, [r7, #4]
 8019a64:	4618      	mov	r0, r3
 8019a66:	f000 fecb 	bl	801a800 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8019a6a:	687b      	ldr	r3, [r7, #4]
 8019a6c:	4618      	mov	r0, r3
 8019a6e:	3708      	adds	r7, #8
 8019a70:	46bd      	mov	sp, r7
 8019a72:	bd80      	pop	{r7, pc}
 8019a74:	0802d198 	.word	0x0802d198

08019a78 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8019a78:	b580      	push	{r7, lr}
 8019a7a:	b082      	sub	sp, #8
 8019a7c:	af00      	add	r7, sp, #0
 8019a7e:	6078      	str	r0, [r7, #4]
    }
 8019a80:	6878      	ldr	r0, [r7, #4]
 8019a82:	f7ff ffe7 	bl	8019a54 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8019a86:	f642 014c 	movw	r1, #10316	; 0x284c
 8019a8a:	6878      	ldr	r0, [r7, #4]
 8019a8c:	f010 fe4d 	bl	802a72a <_ZdlPvj>
 8019a90:	687b      	ldr	r3, [r7, #4]
 8019a92:	4618      	mov	r0, r3
 8019a94:	3708      	adds	r7, #8
 8019a96:	46bd      	mov	sp, r7
 8019a98:	bd80      	pop	{r7, pc}
	...

08019a9c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 8019a9c:	b580      	push	{r7, lr}
 8019a9e:	b082      	sub	sp, #8
 8019aa0:	af00      	add	r7, sp, #0
 8019aa2:	6078      	str	r0, [r7, #4]
 8019aa4:	687b      	ldr	r3, [r7, #4]
 8019aa6:	4618      	mov	r0, r3
 8019aa8:	f000 feac 	bl	801a804 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8019aac:	4a03      	ldr	r2, [pc, #12]	; (8019abc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 8019aae:	687b      	ldr	r3, [r7, #4]
 8019ab0:	601a      	str	r2, [r3, #0]
    }
 8019ab2:	687b      	ldr	r3, [r7, #4]
 8019ab4:	4618      	mov	r0, r3
 8019ab6:	3708      	adds	r7, #8
 8019ab8:	46bd      	mov	sp, r7
 8019aba:	bd80      	pop	{r7, pc}
 8019abc:	0802d164 	.word	0x0802d164

08019ac0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
    virtual ~Partition()
 8019ac0:	b580      	push	{r7, lr}
 8019ac2:	b082      	sub	sp, #8
 8019ac4:	af00      	add	r7, sp, #0
 8019ac6:	6078      	str	r0, [r7, #4]
    }
 8019ac8:	4a05      	ldr	r2, [pc, #20]	; (8019ae0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 8019aca:	687b      	ldr	r3, [r7, #4]
 8019acc:	601a      	str	r2, [r3, #0]
 8019ace:	687b      	ldr	r3, [r7, #4]
 8019ad0:	4618      	mov	r0, r3
 8019ad2:	f000 fe95 	bl	801a800 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8019ad6:	687b      	ldr	r3, [r7, #4]
 8019ad8:	4618      	mov	r0, r3
 8019ada:	3708      	adds	r7, #8
 8019adc:	46bd      	mov	sp, r7
 8019ade:	bd80      	pop	{r7, pc}
 8019ae0:	0802d164 	.word	0x0802d164

08019ae4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
    virtual ~Partition()
 8019ae4:	b580      	push	{r7, lr}
 8019ae6:	b082      	sub	sp, #8
 8019ae8:	af00      	add	r7, sp, #0
 8019aea:	6078      	str	r0, [r7, #4]
    }
 8019aec:	6878      	ldr	r0, [r7, #4]
 8019aee:	f7ff ffe7 	bl	8019ac0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8019af2:	215c      	movs	r1, #92	; 0x5c
 8019af4:	6878      	ldr	r0, [r7, #4]
 8019af6:	f010 fe18 	bl	802a72a <_ZdlPvj>
 8019afa:	687b      	ldr	r3, [r7, #4]
 8019afc:	4618      	mov	r0, r3
 8019afe:	3708      	adds	r7, #8
 8019b00:	46bd      	mov	sp, r7
 8019b02:	bd80      	pop	{r7, pc}

08019b04 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8019b04:	b580      	push	{r7, lr}
 8019b06:	b082      	sub	sp, #8
 8019b08:	af00      	add	r7, sp, #0
 8019b0a:	6078      	str	r0, [r7, #4]
 8019b0c:	4a11      	ldr	r2, [pc, #68]	; (8019b54 <_ZN12FrontendHeapD1Ev+0x50>)
 8019b0e:	687b      	ldr	r3, [r7, #4]
 8019b10:	601a      	str	r2, [r3, #0]
 8019b12:	687a      	ldr	r2, [r7, #4]
 8019b14:	f642 03d4 	movw	r3, #10452	; 0x28d4
 8019b18:	4413      	add	r3, r2
 8019b1a:	4618      	mov	r0, r3
 8019b1c:	f7fc fffc 	bl	8016b18 <_ZN19FrontendApplicationD1Ev>
 8019b20:	687a      	ldr	r2, [r7, #4]
 8019b22:	f642 0378 	movw	r3, #10360	; 0x2878
 8019b26:	4413      	add	r3, r2
 8019b28:	4618      	mov	r0, r3
 8019b2a:	f7ff ffc9 	bl	8019ac0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8019b2e:	687b      	ldr	r3, [r7, #4]
 8019b30:	332c      	adds	r3, #44	; 0x2c
 8019b32:	4618      	mov	r0, r3
 8019b34:	f7ff ff8e 	bl	8019a54 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8019b38:	687b      	ldr	r3, [r7, #4]
 8019b3a:	3314      	adds	r3, #20
 8019b3c:	4618      	mov	r0, r3
 8019b3e:	f7ff ff55 	bl	80199ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8019b42:	687b      	ldr	r3, [r7, #4]
 8019b44:	4618      	mov	r0, r3
 8019b46:	f7ff fe1d 	bl	8019784 <_ZN16FrontendHeapBaseD1Ev>
 8019b4a:	687b      	ldr	r3, [r7, #4]
 8019b4c:	4618      	mov	r0, r3
 8019b4e:	3708      	adds	r7, #8
 8019b50:	46bd      	mov	sp, r7
 8019b52:	bd80      	pop	{r7, pc}
 8019b54:	0802d150 	.word	0x0802d150

08019b58 <_ZN12FrontendHeapD0Ev>:
 8019b58:	b580      	push	{r7, lr}
 8019b5a:	b082      	sub	sp, #8
 8019b5c:	af00      	add	r7, sp, #0
 8019b5e:	6078      	str	r0, [r7, #4]
 8019b60:	6878      	ldr	r0, [r7, #4]
 8019b62:	f7ff ffcf 	bl	8019b04 <_ZN12FrontendHeapD1Ev>
 8019b66:	f642 2128 	movw	r1, #10792	; 0x2a28
 8019b6a:	6878      	ldr	r0, [r7, #4]
 8019b6c:	f010 fddd 	bl	802a72a <_ZdlPvj>
 8019b70:	687b      	ldr	r3, [r7, #4]
 8019b72:	4618      	mov	r0, r3
 8019b74:	3708      	adds	r7, #8
 8019b76:	46bd      	mov	sp, r7
 8019b78:	bd80      	pop	{r7, pc}
	...

08019b7c <_Z41__static_initialization_and_destruction_0ii>:
 8019b7c:	b580      	push	{r7, lr}
 8019b7e:	b084      	sub	sp, #16
 8019b80:	af02      	add	r7, sp, #8
 8019b82:	6078      	str	r0, [r7, #4]
 8019b84:	6039      	str	r1, [r7, #0]
 8019b86:	687b      	ldr	r3, [r7, #4]
 8019b88:	2b01      	cmp	r3, #1
 8019b8a:	d119      	bne.n	8019bc0 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8019b8c:	683b      	ldr	r3, [r7, #0]
 8019b8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019b92:	4293      	cmp	r3, r2
 8019b94:	d114      	bne.n	8019bc0 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 8019b96:	4818      	ldr	r0, [pc, #96]	; (8019bf8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8019b98:	f7ff fed0 	bl	801993c <_ZN20STM32TouchControllerC1Ev>
static STM32F7DMA dma;
 8019b9c:	4817      	ldr	r0, [pc, #92]	; (8019bfc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8019b9e:	f7ff f965 	bl	8018e6c <_ZN10STM32F7DMAC1Ev>
static LCD24bpp display;
 8019ba2:	4817      	ldr	r0, [pc, #92]	; (8019c00 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8019ba4:	f009 faac 	bl	8023100 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 8019ba8:	f44f 7388 	mov.w	r3, #272	; 0x110
 8019bac:	9301      	str	r3, [sp, #4]
 8019bae:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8019bb2:	9300      	str	r3, [sp, #0]
 8019bb4:	4b10      	ldr	r3, [pc, #64]	; (8019bf8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8019bb6:	4a12      	ldr	r2, [pc, #72]	; (8019c00 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8019bb8:	4910      	ldr	r1, [pc, #64]	; (8019bfc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8019bba:	4812      	ldr	r0, [pc, #72]	; (8019c04 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8019bbc:	f7ff fe92 	bl	80198e4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8019bc0:	687b      	ldr	r3, [r7, #4]
 8019bc2:	2b00      	cmp	r3, #0
 8019bc4:	d113      	bne.n	8019bee <_Z41__static_initialization_and_destruction_0ii+0x72>
 8019bc6:	683b      	ldr	r3, [r7, #0]
 8019bc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019bcc:	4293      	cmp	r3, r2
 8019bce:	d10e      	bne.n	8019bee <_Z41__static_initialization_and_destruction_0ii+0x72>
 8019bd0:	480c      	ldr	r0, [pc, #48]	; (8019c04 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8019bd2:	f7fe ff25 	bl	8018a20 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8019bd6:	480c      	ldr	r0, [pc, #48]	; (8019c08 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8019bd8:	f7f6 fbde 	bl	8010398 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 8019bdc:	4808      	ldr	r0, [pc, #32]	; (8019c00 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8019bde:	f7ff fe43 	bl	8019868 <_ZN8touchgfx8LCD24bppD1Ev>
static STM32F7DMA dma;
 8019be2:	4806      	ldr	r0, [pc, #24]	; (8019bfc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8019be4:	f7ff f96c 	bl	8018ec0 <_ZN10STM32F7DMAD1Ev>
static STM32TouchController tc;
 8019be8:	4803      	ldr	r0, [pc, #12]	; (8019bf8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8019bea:	f7fe fc8f 	bl	801850c <_ZN20STM32TouchControllerD1Ev>
}
 8019bee:	bf00      	nop
 8019bf0:	3708      	adds	r7, #8
 8019bf2:	46bd      	mov	sp, r7
 8019bf4:	bd80      	pop	{r7, pc}
 8019bf6:	bf00      	nop
 8019bf8:	2000b258 	.word	0x2000b258
 8019bfc:	2000b25c 	.word	0x2000b25c
 8019c00:	2000be7c 	.word	0x2000be7c
 8019c04:	2000bed8 	.word	0x2000bed8
 8019c08:	20000058 	.word	0x20000058

08019c0c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity()
     */
    virtual uint16_t capacity() const
 8019c0c:	b480      	push	{r7}
 8019c0e:	b083      	sub	sp, #12
 8019c10:	af00      	add	r7, sp, #0
 8019c12:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8019c14:	2301      	movs	r3, #1
    }
 8019c16:	4618      	mov	r0, r3
 8019c18:	370c      	adds	r7, #12
 8019c1a:	46bd      	mov	sp, r7
 8019c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c20:	4770      	bx	lr

08019c22 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size()
     */
    virtual uint32_t element_size()
 8019c22:	b480      	push	{r7}
 8019c24:	b083      	sub	sp, #12
 8019c26:	af00      	add	r7, sp, #0
 8019c28:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8019c2a:	2354      	movs	r3, #84	; 0x54
    }
 8019c2c:	4618      	mov	r0, r3
 8019c2e:	370c      	adds	r7, #12
 8019c30:	46bd      	mov	sp, r7
 8019c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c36:	4770      	bx	lr

08019c38 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual void* element(uint16_t index)
 8019c38:	b480      	push	{r7}
 8019c3a:	b083      	sub	sp, #12
 8019c3c:	af00      	add	r7, sp, #0
 8019c3e:	6078      	str	r0, [r7, #4]
 8019c40:	460b      	mov	r3, r1
 8019c42:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8019c44:	887b      	ldrh	r3, [r7, #2]
 8019c46:	2254      	movs	r2, #84	; 0x54
 8019c48:	fb02 f303 	mul.w	r3, r2, r3
 8019c4c:	3308      	adds	r3, #8
 8019c4e:	687a      	ldr	r2, [r7, #4]
 8019c50:	4413      	add	r3, r2
    }
 8019c52:	4618      	mov	r0, r3
 8019c54:	370c      	adds	r7, #12
 8019c56:	46bd      	mov	sp, r7
 8019c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c5c:	4770      	bx	lr

08019c5e <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual const void* element(uint16_t index) const
 8019c5e:	b480      	push	{r7}
 8019c60:	b083      	sub	sp, #12
 8019c62:	af00      	add	r7, sp, #0
 8019c64:	6078      	str	r0, [r7, #4]
 8019c66:	460b      	mov	r3, r1
 8019c68:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8019c6a:	887b      	ldrh	r3, [r7, #2]
 8019c6c:	2254      	movs	r2, #84	; 0x54
 8019c6e:	fb02 f303 	mul.w	r3, r2, r3
 8019c72:	3308      	adds	r3, #8
 8019c74:	687a      	ldr	r2, [r7, #4]
 8019c76:	4413      	add	r3, r2
    }
 8019c78:	4618      	mov	r0, r3
 8019c7a:	370c      	adds	r7, #12
 8019c7c:	46bd      	mov	sp, r7
 8019c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c82:	4770      	bx	lr

08019c84 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8019c84:	b480      	push	{r7}
 8019c86:	b083      	sub	sp, #12
 8019c88:	af00      	add	r7, sp, #0
 8019c8a:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8019c8c:	2301      	movs	r3, #1
    }
 8019c8e:	4618      	mov	r0, r3
 8019c90:	370c      	adds	r7, #12
 8019c92:	46bd      	mov	sp, r7
 8019c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c98:	4770      	bx	lr

08019c9a <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8019c9a:	b480      	push	{r7}
 8019c9c:	b083      	sub	sp, #12
 8019c9e:	af00      	add	r7, sp, #0
 8019ca0:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8019ca2:	f642 0344 	movw	r3, #10308	; 0x2844
    }
 8019ca6:	4618      	mov	r0, r3
 8019ca8:	370c      	adds	r7, #12
 8019caa:	46bd      	mov	sp, r7
 8019cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cb0:	4770      	bx	lr

08019cb2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8019cb2:	b480      	push	{r7}
 8019cb4:	b083      	sub	sp, #12
 8019cb6:	af00      	add	r7, sp, #0
 8019cb8:	6078      	str	r0, [r7, #4]
 8019cba:	460b      	mov	r3, r1
 8019cbc:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8019cbe:	887b      	ldrh	r3, [r7, #2]
 8019cc0:	f642 0244 	movw	r2, #10308	; 0x2844
 8019cc4:	fb02 f303 	mul.w	r3, r2, r3
 8019cc8:	3308      	adds	r3, #8
 8019cca:	687a      	ldr	r2, [r7, #4]
 8019ccc:	4413      	add	r3, r2
    }
 8019cce:	4618      	mov	r0, r3
 8019cd0:	370c      	adds	r7, #12
 8019cd2:	46bd      	mov	sp, r7
 8019cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cd8:	4770      	bx	lr

08019cda <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8019cda:	b480      	push	{r7}
 8019cdc:	b083      	sub	sp, #12
 8019cde:	af00      	add	r7, sp, #0
 8019ce0:	6078      	str	r0, [r7, #4]
 8019ce2:	460b      	mov	r3, r1
 8019ce4:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8019ce6:	887b      	ldrh	r3, [r7, #2]
 8019ce8:	f642 0244 	movw	r2, #10308	; 0x2844
 8019cec:	fb02 f303 	mul.w	r3, r2, r3
 8019cf0:	3308      	adds	r3, #8
 8019cf2:	687a      	ldr	r2, [r7, #4]
 8019cf4:	4413      	add	r3, r2
    }
 8019cf6:	4618      	mov	r0, r3
 8019cf8:	370c      	adds	r7, #12
 8019cfa:	46bd      	mov	sp, r7
 8019cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d00:	4770      	bx	lr

08019d02 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8019d02:	b480      	push	{r7}
 8019d04:	b083      	sub	sp, #12
 8019d06:	af00      	add	r7, sp, #0
 8019d08:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8019d0a:	2301      	movs	r3, #1
    }
 8019d0c:	4618      	mov	r0, r3
 8019d0e:	370c      	adds	r7, #12
 8019d10:	46bd      	mov	sp, r7
 8019d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d16:	4770      	bx	lr

08019d18 <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8019d18:	b480      	push	{r7}
 8019d1a:	b083      	sub	sp, #12
 8019d1c:	af00      	add	r7, sp, #0
 8019d1e:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8019d20:	2310      	movs	r3, #16
    }
 8019d22:	4618      	mov	r0, r3
 8019d24:	370c      	adds	r7, #12
 8019d26:	46bd      	mov	sp, r7
 8019d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d2c:	4770      	bx	lr

08019d2e <_ZN8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8019d2e:	b480      	push	{r7}
 8019d30:	b083      	sub	sp, #12
 8019d32:	af00      	add	r7, sp, #0
 8019d34:	6078      	str	r0, [r7, #4]
 8019d36:	460b      	mov	r3, r1
 8019d38:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8019d3a:	887b      	ldrh	r3, [r7, #2]
 8019d3c:	011b      	lsls	r3, r3, #4
 8019d3e:	3308      	adds	r3, #8
 8019d40:	687a      	ldr	r2, [r7, #4]
 8019d42:	4413      	add	r3, r2
    }
 8019d44:	4618      	mov	r0, r3
 8019d46:	370c      	adds	r7, #12
 8019d48:	46bd      	mov	sp, r7
 8019d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d4e:	4770      	bx	lr

08019d50 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI21SecondScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8019d50:	b480      	push	{r7}
 8019d52:	b083      	sub	sp, #12
 8019d54:	af00      	add	r7, sp, #0
 8019d56:	6078      	str	r0, [r7, #4]
 8019d58:	460b      	mov	r3, r1
 8019d5a:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8019d5c:	887b      	ldrh	r3, [r7, #2]
 8019d5e:	011b      	lsls	r3, r3, #4
 8019d60:	3308      	adds	r3, #8
 8019d62:	687a      	ldr	r2, [r7, #4]
 8019d64:	4413      	add	r3, r2
    }
 8019d66:	4618      	mov	r0, r3
 8019d68:	370c      	adds	r7, #12
 8019d6a:	46bd      	mov	sp, r7
 8019d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d70:	4770      	bx	lr

08019d72 <_GLOBAL__sub_I_touchgfx_init>:
 8019d72:	b580      	push	{r7, lr}
 8019d74:	af00      	add	r7, sp, #0
 8019d76:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019d7a:	2001      	movs	r0, #1
 8019d7c:	f7ff fefe 	bl	8019b7c <_Z41__static_initialization_and_destruction_0ii>
 8019d80:	bd80      	pop	{r7, pc}

08019d82 <_GLOBAL__sub_D_touchgfx_init>:
 8019d82:	b580      	push	{r7, lr}
 8019d84:	af00      	add	r7, sp, #0
 8019d86:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019d8a:	2000      	movs	r0, #0
 8019d8c:	f7ff fef6 	bl	8019b7c <_Z41__static_initialization_and_destruction_0ii>
 8019d90:	bd80      	pop	{r7, pc}

08019d92 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8019d92:	b580      	push	{r7, lr}
 8019d94:	b082      	sub	sp, #8
 8019d96:	af00      	add	r7, sp, #0
 8019d98:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8019d9a:	687b      	ldr	r3, [r7, #4]
 8019d9c:	681b      	ldr	r3, [r3, #0]
 8019d9e:	3318      	adds	r3, #24
 8019da0:	681b      	ldr	r3, [r3, #0]
 8019da2:	6878      	ldr	r0, [r7, #4]
 8019da4:	4798      	blx	r3
    }
 8019da6:	bf00      	nop
 8019da8:	3708      	adds	r7, #8
 8019daa:	46bd      	mov	sp, r7
 8019dac:	bd80      	pop	{r7, pc}

08019dae <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 8019dae:	b480      	push	{r7}
 8019db0:	b083      	sub	sp, #12
 8019db2:	af00      	add	r7, sp, #0
 8019db4:	6078      	str	r0, [r7, #4]
 8019db6:	460b      	mov	r3, r1
 8019db8:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 8019dba:	687b      	ldr	r3, [r7, #4]
 8019dbc:	78fa      	ldrb	r2, [r7, #3]
 8019dbe:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 8019dc2:	bf00      	nop
 8019dc4:	370c      	adds	r7, #12
 8019dc6:	46bd      	mov	sp, r7
 8019dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dcc:	4770      	bx	lr

08019dce <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8019dce:	b480      	push	{r7}
 8019dd0:	b083      	sub	sp, #12
 8019dd2:	af00      	add	r7, sp, #0
 8019dd4:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8019dd6:	687b      	ldr	r3, [r7, #4]
 8019dd8:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8019ddc:	3301      	adds	r3, #1
 8019dde:	b2da      	uxtb	r2, r3
 8019de0:	687b      	ldr	r3, [r7, #4]
 8019de2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8019de6:	bf00      	nop
 8019de8:	370c      	adds	r7, #12
 8019dea:	46bd      	mov	sp, r7
 8019dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019df0:	4770      	bx	lr
	...

08019df4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 8019df4:	b580      	push	{r7, lr}
 8019df6:	b082      	sub	sp, #8
 8019df8:	af00      	add	r7, sp, #0
 8019dfa:	6078      	str	r0, [r7, #4]
 8019dfc:	460b      	mov	r3, r1
 8019dfe:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8019e00:	78fb      	ldrb	r3, [r7, #3]
 8019e02:	2b00      	cmp	r3, #0
 8019e04:	d002      	beq.n	8019e0c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 8019e06:	78fb      	ldrb	r3, [r7, #3]
 8019e08:	2b02      	cmp	r3, #2
 8019e0a:	d105      	bne.n	8019e18 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 8019e0c:	687b      	ldr	r3, [r7, #4]
 8019e0e:	78fa      	ldrb	r2, [r7, #3]
 8019e10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 8019e14:	2301      	movs	r3, #1
 8019e16:	e027      	b.n	8019e68 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        else if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8019e18:	78fb      	ldrb	r3, [r7, #3]
 8019e1a:	2b01      	cmp	r3, #1
 8019e1c:	d123      	bne.n	8019e66 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 8019e1e:	687b      	ldr	r3, [r7, #4]
 8019e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019e22:	2b00      	cmp	r3, #0
 8019e24:	d014      	beq.n	8019e50 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8019e26:	687b      	ldr	r3, [r7, #4]
 8019e28:	681b      	ldr	r3, [r3, #0]
 8019e2a:	3380      	adds	r3, #128	; 0x80
 8019e2c:	681b      	ldr	r3, [r3, #0]
 8019e2e:	6878      	ldr	r0, [r7, #4]
 8019e30:	4798      	blx	r3
 8019e32:	4603      	mov	r3, r0
 8019e34:	461a      	mov	r2, r3
 8019e36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019e3a:	429a      	cmp	r2, r3
 8019e3c:	d008      	beq.n	8019e50 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8019e3e:	4b0c      	ldr	r3, [pc, #48]	; (8019e70 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8019e40:	781b      	ldrb	r3, [r3, #0]
 8019e42:	f083 0301 	eor.w	r3, r3, #1
 8019e46:	b2db      	uxtb	r3, r3
 8019e48:	2b00      	cmp	r3, #0
 8019e4a:	d001      	beq.n	8019e50 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8019e4c:	2301      	movs	r3, #1
 8019e4e:	e000      	b.n	8019e52 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8019e50:	2300      	movs	r3, #0
 8019e52:	2b00      	cmp	r3, #0
 8019e54:	d005      	beq.n	8019e62 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 8019e56:	687b      	ldr	r3, [r7, #4]
 8019e58:	78fa      	ldrb	r2, [r7, #3]
 8019e5a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 8019e5e:	2301      	movs	r3, #1
 8019e60:	e002      	b.n	8019e68 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 8019e62:	2300      	movs	r3, #0
 8019e64:	e000      	b.n	8019e68 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 8019e66:	2300      	movs	r3, #0
    }
 8019e68:	4618      	mov	r0, r3
 8019e6a:	3708      	adds	r7, #8
 8019e6c:	46bd      	mov	sp, r7
 8019e6e:	bd80      	pop	{r7, pc}
 8019e70:	2000bf64 	.word	0x2000bf64

08019e74 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void(*delayF)(uint16_t))
 8019e74:	b480      	push	{r7}
 8019e76:	b083      	sub	sp, #12
 8019e78:	af00      	add	r7, sp, #0
 8019e7a:	6078      	str	r0, [r7, #4]
 8019e7c:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 8019e7e:	687b      	ldr	r3, [r7, #4]
 8019e80:	683a      	ldr	r2, [r7, #0]
 8019e82:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8019e84:	bf00      	nop
 8019e86:	370c      	adds	r7, #12
 8019e88:	46bd      	mov	sp, r7
 8019e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e8e:	4770      	bx	lr

08019e90 <__NVIC_EnableIRQ>:
{
 8019e90:	b480      	push	{r7}
 8019e92:	b083      	sub	sp, #12
 8019e94:	af00      	add	r7, sp, #0
 8019e96:	4603      	mov	r3, r0
 8019e98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8019e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019e9e:	2b00      	cmp	r3, #0
 8019ea0:	db0d      	blt.n	8019ebe <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8019ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019ea6:	b2db      	uxtb	r3, r3
 8019ea8:	f003 021f 	and.w	r2, r3, #31
 8019eac:	4907      	ldr	r1, [pc, #28]	; (8019ecc <__NVIC_EnableIRQ+0x3c>)
 8019eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019eb2:	095b      	lsrs	r3, r3, #5
 8019eb4:	2001      	movs	r0, #1
 8019eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8019eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8019ebe:	bf00      	nop
 8019ec0:	370c      	adds	r7, #12
 8019ec2:	46bd      	mov	sp, r7
 8019ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ec8:	4770      	bx	lr
 8019eca:	bf00      	nop
 8019ecc:	e000e100 	.word	0xe000e100

08019ed0 <__NVIC_DisableIRQ>:
{
 8019ed0:	b480      	push	{r7}
 8019ed2:	b083      	sub	sp, #12
 8019ed4:	af00      	add	r7, sp, #0
 8019ed6:	4603      	mov	r3, r0
 8019ed8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8019eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019ede:	2b00      	cmp	r3, #0
 8019ee0:	db12      	blt.n	8019f08 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8019ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019ee6:	b2db      	uxtb	r3, r3
 8019ee8:	f003 021f 	and.w	r2, r3, #31
 8019eec:	4909      	ldr	r1, [pc, #36]	; (8019f14 <__NVIC_DisableIRQ+0x44>)
 8019eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019ef2:	095b      	lsrs	r3, r3, #5
 8019ef4:	2001      	movs	r0, #1
 8019ef6:	fa00 f202 	lsl.w	r2, r0, r2
 8019efa:	3320      	adds	r3, #32
 8019efc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8019f00:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8019f04:	f3bf 8f6f 	isb	sy
}
 8019f08:	bf00      	nop
 8019f0a:	370c      	adds	r7, #12
 8019f0c:	46bd      	mov	sp, r7
 8019f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f12:	4770      	bx	lr
 8019f14:	e000e100 	.word	0xe000e100

08019f18 <__NVIC_SetPriority>:
{
 8019f18:	b480      	push	{r7}
 8019f1a:	b083      	sub	sp, #12
 8019f1c:	af00      	add	r7, sp, #0
 8019f1e:	4603      	mov	r3, r0
 8019f20:	6039      	str	r1, [r7, #0]
 8019f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8019f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019f28:	2b00      	cmp	r3, #0
 8019f2a:	db0c      	blt.n	8019f46 <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8019f2c:	683b      	ldr	r3, [r7, #0]
 8019f2e:	b2db      	uxtb	r3, r3
 8019f30:	4a0e      	ldr	r2, [pc, #56]	; (8019f6c <__NVIC_SetPriority+0x54>)
 8019f32:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8019f36:	4608      	mov	r0, r1
 8019f38:	011b      	lsls	r3, r3, #4
 8019f3a:	b2d9      	uxtb	r1, r3
 8019f3c:	1813      	adds	r3, r2, r0
 8019f3e:	460a      	mov	r2, r1
 8019f40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8019f44:	e00c      	b.n	8019f60 <__NVIC_SetPriority+0x48>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8019f46:	683b      	ldr	r3, [r7, #0]
 8019f48:	b2da      	uxtb	r2, r3
 8019f4a:	4909      	ldr	r1, [pc, #36]	; (8019f70 <__NVIC_SetPriority+0x58>)
 8019f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019f50:	b2db      	uxtb	r3, r3
 8019f52:	f003 030f 	and.w	r3, r3, #15
 8019f56:	3b04      	subs	r3, #4
 8019f58:	0112      	lsls	r2, r2, #4
 8019f5a:	b2d2      	uxtb	r2, r2
 8019f5c:	440b      	add	r3, r1
 8019f5e:	761a      	strb	r2, [r3, #24]
}
 8019f60:	bf00      	nop
 8019f62:	370c      	adds	r7, #12
 8019f64:	46bd      	mov	sp, r7
 8019f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f6a:	4770      	bx	lr
 8019f6c:	e000e100 	.word	0xe000e100
 8019f70:	e000ed00 	.word	0xe000ed00

08019f74 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8019f74:	b5b0      	push	{r4, r5, r7, lr}
 8019f76:	b082      	sub	sp, #8
 8019f78:	af00      	add	r7, sp, #0
 8019f7a:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8019f7c:	687b      	ldr	r3, [r7, #4]
 8019f7e:	4618      	mov	r0, r3
 8019f80:	f001 fc88 	bl	801b894 <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(touchgfx::Application::getInstance()));
 8019f84:	687d      	ldr	r5, [r7, #4]
 8019f86:	687b      	ldr	r3, [r7, #4]
 8019f88:	681b      	ldr	r3, [r3, #0]
 8019f8a:	334c      	adds	r3, #76	; 0x4c
 8019f8c:	681c      	ldr	r4, [r3, #0]
 8019f8e:	f004 fbc9 	bl	801e724 <_ZN8touchgfx11Application11getInstanceEv>
 8019f92:	4603      	mov	r3, r0
 8019f94:	4619      	mov	r1, r3
 8019f96:	4628      	mov	r0, r5
 8019f98:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 8019f9a:	687b      	ldr	r3, [r7, #4]
 8019f9c:	490d      	ldr	r1, [pc, #52]	; (8019fd4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x60>)
 8019f9e:	4618      	mov	r0, r3
 8019fa0:	f7ff ff68 	bl	8019e74 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 8019fa4:	687b      	ldr	r3, [r7, #4]
 8019fa6:	2101      	movs	r1, #1
 8019fa8:	4618      	mov	r0, r3
 8019faa:	f7ff ff23 	bl	8019df4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>

    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 8019fae:	6878      	ldr	r0, [r7, #4]
 8019fb0:	687b      	ldr	r3, [r7, #4]
 8019fb2:	681b      	ldr	r3, [r3, #0]
 8019fb4:	3374      	adds	r3, #116	; 0x74
 8019fb6:	681c      	ldr	r4, [r3, #0]
 8019fb8:	2300      	movs	r3, #0
 8019fba:	2200      	movs	r2, #0
 8019fbc:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8019fc0:	47a0      	blx	r4
     * Set whether the DMA transfers are locked to the TFT update cycle. If
     * locked, DMA transfer will not begin until the TFT controller has finished
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     */
    lockDMAToFrontPorch(true);
 8019fc2:	687b      	ldr	r3, [r7, #4]
 8019fc4:	2101      	movs	r1, #1
 8019fc6:	4618      	mov	r0, r3
 8019fc8:	f7ff fef1 	bl	8019dae <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 8019fcc:	bf00      	nop
 8019fce:	3708      	adds	r7, #8
 8019fd0:	46bd      	mov	sp, r7
 8019fd2:	bdb0      	pop	{r4, r5, r7, pc}
 8019fd4:	08018bb9 	.word	0x08018bb9

08019fd8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8019fd8:	b580      	push	{r7, lr}
 8019fda:	b082      	sub	sp, #8
 8019fdc:	af00      	add	r7, sp, #0
 8019fde:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8019fe0:	2109      	movs	r1, #9
 8019fe2:	205a      	movs	r0, #90	; 0x5a
 8019fe4:	f7ff ff98 	bl	8019f18 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8019fe8:	2109      	movs	r1, #9
 8019fea:	2058      	movs	r0, #88	; 0x58
 8019fec:	f7ff ff94 	bl	8019f18 <__NVIC_SetPriority>
}
 8019ff0:	bf00      	nop
 8019ff2:	3708      	adds	r7, #8
 8019ff4:	46bd      	mov	sp, r7
 8019ff6:	bd80      	pop	{r7, pc}

08019ff8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8019ff8:	b580      	push	{r7, lr}
 8019ffa:	b082      	sub	sp, #8
 8019ffc:	af00      	add	r7, sp, #0
 8019ffe:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 801a000:	205a      	movs	r0, #90	; 0x5a
 801a002:	f7ff ff45 	bl	8019e90 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 801a006:	2058      	movs	r0, #88	; 0x58
 801a008:	f7ff ff42 	bl	8019e90 <__NVIC_EnableIRQ>
}
 801a00c:	bf00      	nop
 801a00e:	3708      	adds	r7, #8
 801a010:	46bd      	mov	sp, r7
 801a012:	bd80      	pop	{r7, pc}

0801a014 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 801a014:	b580      	push	{r7, lr}
 801a016:	b082      	sub	sp, #8
 801a018:	af00      	add	r7, sp, #0
 801a01a:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 801a01c:	205a      	movs	r0, #90	; 0x5a
 801a01e:	f7ff ff57 	bl	8019ed0 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 801a022:	2058      	movs	r0, #88	; 0x58
 801a024:	f7ff ff54 	bl	8019ed0 <__NVIC_DisableIRQ>
}
 801a028:	bf00      	nop
 801a02a:	3708      	adds	r7, #8
 801a02c:	46bd      	mov	sp, r7
 801a02e:	bd80      	pop	{r7, pc}

0801a030 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 801a030:	b480      	push	{r7}
 801a032:	b083      	sub	sp, #12
 801a034:	af00      	add	r7, sp, #0
 801a036:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 801a038:	4b11      	ldr	r3, [pc, #68]	; (801a080 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801a03a:	68db      	ldr	r3, [r3, #12]
 801a03c:	b29b      	uxth	r3, r3
 801a03e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a042:	b29b      	uxth	r3, r3
 801a044:	3b01      	subs	r3, #1
 801a046:	b29a      	uxth	r2, r3
 801a048:	4b0e      	ldr	r3, [pc, #56]	; (801a084 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 801a04a:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 801a04c:	4b0c      	ldr	r3, [pc, #48]	; (801a080 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801a04e:	691b      	ldr	r3, [r3, #16]
 801a050:	b29b      	uxth	r3, r3
 801a052:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a056:	b29b      	uxth	r3, r3
 801a058:	3b01      	subs	r3, #1
 801a05a:	b29a      	uxth	r2, r3
 801a05c:	4b0a      	ldr	r3, [pc, #40]	; (801a088 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 801a05e:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 801a060:	4b08      	ldr	r3, [pc, #32]	; (801a084 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 801a062:	881a      	ldrh	r2, [r3, #0]
 801a064:	4b06      	ldr	r3, [pc, #24]	; (801a080 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801a066:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 801a068:	4b05      	ldr	r3, [pc, #20]	; (801a080 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801a06a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a06c:	4a04      	ldr	r2, [pc, #16]	; (801a080 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801a06e:	f043 0301 	orr.w	r3, r3, #1
 801a072:	6353      	str	r3, [r2, #52]	; 0x34
}
 801a074:	bf00      	nop
 801a076:	370c      	adds	r7, #12
 801a078:	46bd      	mov	sp, r7
 801a07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a07e:	4770      	bx	lr
 801a080:	40016800 	.word	0x40016800
 801a084:	2000bf50 	.word	0x2000bf50
 801a088:	2000bf52 	.word	0x2000bf52

0801a08c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 801a08c:	b480      	push	{r7}
 801a08e:	b083      	sub	sp, #12
 801a090:	af00      	add	r7, sp, #0
 801a092:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 801a094:	4b03      	ldr	r3, [pc, #12]	; (801a0a4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 801a096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 801a098:	4618      	mov	r0, r3
 801a09a:	370c      	adds	r7, #12
 801a09c:	46bd      	mov	sp, r7
 801a09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0a2:	4770      	bx	lr
 801a0a4:	40016884 	.word	0x40016884

0801a0a8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 801a0a8:	b480      	push	{r7}
 801a0aa:	b083      	sub	sp, #12
 801a0ac:	af00      	add	r7, sp, #0
 801a0ae:	6078      	str	r0, [r7, #4]
 801a0b0:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 801a0b2:	4a06      	ldr	r2, [pc, #24]	; (801a0cc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 801a0b4:	683b      	ldr	r3, [r7, #0]
 801a0b6:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 801a0b8:	4b05      	ldr	r3, [pc, #20]	; (801a0d0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 801a0ba:	2201      	movs	r2, #1
 801a0bc:	625a      	str	r2, [r3, #36]	; 0x24
}
 801a0be:	bf00      	nop
 801a0c0:	370c      	adds	r7, #12
 801a0c2:	46bd      	mov	sp, r7
 801a0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0c8:	4770      	bx	lr
 801a0ca:	bf00      	nop
 801a0cc:	40016884 	.word	0x40016884
 801a0d0:	40016800 	.word	0x40016800

0801a0d4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 801a0d4:	b580      	push	{r7, lr}
 801a0d6:	b082      	sub	sp, #8
 801a0d8:	af00      	add	r7, sp, #0
 801a0da:	6078      	str	r0, [r7, #4]
 801a0dc:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 801a0de:	687b      	ldr	r3, [r7, #4]
 801a0e0:	6839      	ldr	r1, [r7, #0]
 801a0e2:	4618      	mov	r0, r3
 801a0e4:	f001 f8e6 	bl	801b2b4 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 801a0e8:	bf00      	nop
 801a0ea:	3708      	adds	r7, #8
 801a0ec:	46bd      	mov	sp, r7
 801a0ee:	bd80      	pop	{r7, pc}

0801a0f0 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 801a0f0:	b480      	push	{r7}
 801a0f2:	b085      	sub	sp, #20
 801a0f4:	af00      	add	r7, sp, #0
 801a0f6:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 801a0f8:	4b0d      	ldr	r3, [pc, #52]	; (801a130 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 801a0fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a0fc:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 801a0fe:	4b0c      	ldr	r3, [pc, #48]	; (801a130 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 801a100:	68db      	ldr	r3, [r3, #12]
 801a102:	b29b      	uxth	r3, r3
 801a104:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a108:	b29b      	uxth	r3, r3
 801a10a:	3301      	adds	r3, #1
 801a10c:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    if (curr < backPorchY)
 801a10e:	89fa      	ldrh	r2, [r7, #14]
 801a110:	89bb      	ldrh	r3, [r7, #12]
 801a112:	429a      	cmp	r2, r3
 801a114:	d201      	bcs.n	801a11a <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x2a>
    {
        return 0;
 801a116:	2300      	movs	r3, #0
 801a118:	e003      	b.n	801a122 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
    }
    else
    {
        return curr - backPorchY;
 801a11a:	89fa      	ldrh	r2, [r7, #14]
 801a11c:	89bb      	ldrh	r3, [r7, #12]
 801a11e:	1ad3      	subs	r3, r2, r3
 801a120:	b29b      	uxth	r3, r3
    }
}
 801a122:	4618      	mov	r0, r3
 801a124:	3714      	adds	r7, #20
 801a126:	46bd      	mov	sp, r7
 801a128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a12c:	4770      	bx	lr
 801a12e:	bf00      	nop
 801a130:	40016800 	.word	0x40016800

0801a134 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 801a134:	b580      	push	{r7, lr}
 801a136:	b082      	sub	sp, #8
 801a138:	af00      	add	r7, sp, #0
 801a13a:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 801a13c:	4b1a      	ldr	r3, [pc, #104]	; (801a1a8 <HAL_LTDC_LineEventCallback+0x74>)
 801a13e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a140:	4a1a      	ldr	r2, [pc, #104]	; (801a1ac <HAL_LTDC_LineEventCallback+0x78>)
 801a142:	8812      	ldrh	r2, [r2, #0]
 801a144:	4293      	cmp	r3, r2
 801a146:	bf0c      	ite	eq
 801a148:	2301      	moveq	r3, #1
 801a14a:	2300      	movne	r3, #0
 801a14c:	b2db      	uxtb	r3, r3
 801a14e:	2b00      	cmp	r3, #0
 801a150:	d017      	beq.n	801a182 <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 801a152:	4b17      	ldr	r3, [pc, #92]	; (801a1b0 <HAL_LTDC_LineEventCallback+0x7c>)
 801a154:	881b      	ldrh	r3, [r3, #0]
 801a156:	4619      	mov	r1, r3
 801a158:	6878      	ldr	r0, [r7, #4]
 801a15a:	f7ec fd11 	bl	8006b80 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 801a15e:	f7f6 fe2b 	bl	8010db8 <_ZN8touchgfx3HAL11getInstanceEv>
 801a162:	4603      	mov	r3, r0
 801a164:	4618      	mov	r0, r3
 801a166:	f7ff fe32 	bl	8019dce <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 801a16a:	f7fe fce7 	bl	8018b3c <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 801a16e:	f7f6 fe23 	bl	8010db8 <_ZN8touchgfx3HAL11getInstanceEv>
 801a172:	4603      	mov	r3, r0
 801a174:	4618      	mov	r0, r3
 801a176:	f001 fe15 	bl	801bda4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 801a17a:	2000      	movs	r0, #0
 801a17c:	f7fe f9e8 	bl	8018550 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 801a180:	e00e      	b.n	801a1a0 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 801a182:	4b0a      	ldr	r3, [pc, #40]	; (801a1ac <HAL_LTDC_LineEventCallback+0x78>)
 801a184:	881b      	ldrh	r3, [r3, #0]
 801a186:	4619      	mov	r1, r3
 801a188:	6878      	ldr	r0, [r7, #4]
 801a18a:	f7ec fcf9 	bl	8006b80 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 801a18e:	2000      	movs	r0, #0
 801a190:	f7fe f9e9 	bl	8018566 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 801a194:	f7f6 fe10 	bl	8010db8 <_ZN8touchgfx3HAL11getInstanceEv>
 801a198:	4603      	mov	r3, r0
 801a19a:	4618      	mov	r0, r3
 801a19c:	f7ff fdf9 	bl	8019d92 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 801a1a0:	bf00      	nop
 801a1a2:	3708      	adds	r7, #8
 801a1a4:	46bd      	mov	sp, r7
 801a1a6:	bd80      	pop	{r7, pc}
 801a1a8:	40016800 	.word	0x40016800
 801a1ac:	2000bf50 	.word	0x2000bf50
 801a1b0:	2000bf52 	.word	0x2000bf52

0801a1b4 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 801a1b4:	b580      	push	{r7, lr}
 801a1b6:	b082      	sub	sp, #8
 801a1b8:	af00      	add	r7, sp, #0
 801a1ba:	4603      	mov	r3, r0
 801a1bc:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 801a1be:	20c8      	movs	r0, #200	; 0xc8
 801a1c0:	f7f5 fe08 	bl	800fdd4 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 801a1c4:	f000 fa7a 	bl	801a6bc <ft5336_I2C_InitializeIfRequired>
}
 801a1c8:	bf00      	nop
 801a1ca:	3708      	adds	r7, #8
 801a1cc:	46bd      	mov	sp, r7
 801a1ce:	bd80      	pop	{r7, pc}

0801a1d0 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 801a1d0:	b480      	push	{r7}
 801a1d2:	b083      	sub	sp, #12
 801a1d4:	af00      	add	r7, sp, #0
 801a1d6:	4603      	mov	r3, r0
 801a1d8:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 801a1da:	bf00      	nop
 801a1dc:	370c      	adds	r7, #12
 801a1de:	46bd      	mov	sp, r7
 801a1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1e4:	4770      	bx	lr

0801a1e6 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 801a1e6:	b580      	push	{r7, lr}
 801a1e8:	b084      	sub	sp, #16
 801a1ea:	af00      	add	r7, sp, #0
 801a1ec:	4603      	mov	r3, r0
 801a1ee:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 801a1f0:	2300      	movs	r3, #0
 801a1f2:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 801a1f4:	2300      	movs	r3, #0
 801a1f6:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 801a1f8:	2300      	movs	r3, #0
 801a1fa:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 801a1fc:	f000 fa5e 	bl	801a6bc <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 801a200:	2300      	movs	r3, #0
 801a202:	73fb      	strb	r3, [r7, #15]
 801a204:	e010      	b.n	801a228 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 801a206:	88fb      	ldrh	r3, [r7, #6]
 801a208:	b2db      	uxtb	r3, r3
 801a20a:	21a8      	movs	r1, #168	; 0xa8
 801a20c:	4618      	mov	r0, r3
 801a20e:	f7f5 fdc3 	bl	800fd98 <TS_IO_Read>
 801a212:	4603      	mov	r3, r0
 801a214:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 801a216:	7b7b      	ldrb	r3, [r7, #13]
 801a218:	b2db      	uxtb	r3, r3
 801a21a:	2b51      	cmp	r3, #81	; 0x51
 801a21c:	d101      	bne.n	801a222 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 801a21e:	2301      	movs	r3, #1
 801a220:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 801a222:	7bfb      	ldrb	r3, [r7, #15]
 801a224:	3301      	adds	r3, #1
 801a226:	73fb      	strb	r3, [r7, #15]
 801a228:	7bfb      	ldrb	r3, [r7, #15]
 801a22a:	2b02      	cmp	r3, #2
 801a22c:	d802      	bhi.n	801a234 <ft5336_ReadID+0x4e>
 801a22e:	7bbb      	ldrb	r3, [r7, #14]
 801a230:	2b00      	cmp	r3, #0
 801a232:	d0e8      	beq.n	801a206 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 801a234:	7b7b      	ldrb	r3, [r7, #13]
 801a236:	b2db      	uxtb	r3, r3
 801a238:	b29b      	uxth	r3, r3
}
 801a23a:	4618      	mov	r0, r3
 801a23c:	3710      	adds	r7, #16
 801a23e:	46bd      	mov	sp, r7
 801a240:	bd80      	pop	{r7, pc}

0801a242 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 801a242:	b580      	push	{r7, lr}
 801a244:	b082      	sub	sp, #8
 801a246:	af00      	add	r7, sp, #0
 801a248:	4603      	mov	r3, r0
 801a24a:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 801a24c:	88fb      	ldrh	r3, [r7, #6]
 801a24e:	4618      	mov	r0, r3
 801a250:	f000 fa44 	bl	801a6dc <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 801a254:	88fb      	ldrh	r3, [r7, #6]
 801a256:	4618      	mov	r0, r3
 801a258:	f000 f932 	bl	801a4c0 <ft5336_TS_DisableIT>
}
 801a25c:	bf00      	nop
 801a25e:	3708      	adds	r7, #8
 801a260:	46bd      	mov	sp, r7
 801a262:	bd80      	pop	{r7, pc}

0801a264 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 801a264:	b580      	push	{r7, lr}
 801a266:	b084      	sub	sp, #16
 801a268:	af00      	add	r7, sp, #0
 801a26a:	4603      	mov	r3, r0
 801a26c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 801a26e:	2300      	movs	r3, #0
 801a270:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 801a272:	88fb      	ldrh	r3, [r7, #6]
 801a274:	b2db      	uxtb	r3, r3
 801a276:	2102      	movs	r1, #2
 801a278:	4618      	mov	r0, r3
 801a27a:	f7f5 fd8d 	bl	800fd98 <TS_IO_Read>
 801a27e:	4603      	mov	r3, r0
 801a280:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 801a282:	7bfb      	ldrb	r3, [r7, #15]
 801a284:	b2db      	uxtb	r3, r3
 801a286:	f003 030f 	and.w	r3, r3, #15
 801a28a:	b2db      	uxtb	r3, r3
 801a28c:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 801a28e:	7bfb      	ldrb	r3, [r7, #15]
 801a290:	b2db      	uxtb	r3, r3
 801a292:	2b05      	cmp	r3, #5
 801a294:	d901      	bls.n	801a29a <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 801a296:	2300      	movs	r3, #0
 801a298:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 801a29a:	7bfb      	ldrb	r3, [r7, #15]
 801a29c:	b2da      	uxtb	r2, r3
 801a29e:	4b05      	ldr	r3, [pc, #20]	; (801a2b4 <ft5336_TS_DetectTouch+0x50>)
 801a2a0:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 801a2a2:	4b04      	ldr	r3, [pc, #16]	; (801a2b4 <ft5336_TS_DetectTouch+0x50>)
 801a2a4:	2200      	movs	r2, #0
 801a2a6:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 801a2a8:	7bfb      	ldrb	r3, [r7, #15]
 801a2aa:	b2db      	uxtb	r3, r3
}
 801a2ac:	4618      	mov	r0, r3
 801a2ae:	3710      	adds	r7, #16
 801a2b0:	46bd      	mov	sp, r7
 801a2b2:	bd80      	pop	{r7, pc}
 801a2b4:	2000bf54 	.word	0x2000bf54

0801a2b8 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 801a2b8:	b580      	push	{r7, lr}
 801a2ba:	b086      	sub	sp, #24
 801a2bc:	af00      	add	r7, sp, #0
 801a2be:	4603      	mov	r3, r0
 801a2c0:	60b9      	str	r1, [r7, #8]
 801a2c2:	607a      	str	r2, [r7, #4]
 801a2c4:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 801a2c6:	2300      	movs	r3, #0
 801a2c8:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 801a2ca:	2300      	movs	r3, #0
 801a2cc:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 801a2ce:	2300      	movs	r3, #0
 801a2d0:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 801a2d2:	2300      	movs	r3, #0
 801a2d4:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 801a2d6:	2300      	movs	r3, #0
 801a2d8:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 801a2da:	4b6d      	ldr	r3, [pc, #436]	; (801a490 <ft5336_TS_GetXY+0x1d8>)
 801a2dc:	789a      	ldrb	r2, [r3, #2]
 801a2de:	4b6c      	ldr	r3, [pc, #432]	; (801a490 <ft5336_TS_GetXY+0x1d8>)
 801a2e0:	785b      	ldrb	r3, [r3, #1]
 801a2e2:	429a      	cmp	r2, r3
 801a2e4:	f080 80cf 	bcs.w	801a486 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 801a2e8:	4b69      	ldr	r3, [pc, #420]	; (801a490 <ft5336_TS_GetXY+0x1d8>)
 801a2ea:	789b      	ldrb	r3, [r3, #2]
 801a2ec:	2b09      	cmp	r3, #9
 801a2ee:	d871      	bhi.n	801a3d4 <ft5336_TS_GetXY+0x11c>
 801a2f0:	a201      	add	r2, pc, #4	; (adr r2, 801a2f8 <ft5336_TS_GetXY+0x40>)
 801a2f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a2f6:	bf00      	nop
 801a2f8:	0801a321 	.word	0x0801a321
 801a2fc:	0801a333 	.word	0x0801a333
 801a300:	0801a345 	.word	0x0801a345
 801a304:	0801a357 	.word	0x0801a357
 801a308:	0801a369 	.word	0x0801a369
 801a30c:	0801a37b 	.word	0x0801a37b
 801a310:	0801a38d 	.word	0x0801a38d
 801a314:	0801a39f 	.word	0x0801a39f
 801a318:	0801a3b1 	.word	0x0801a3b1
 801a31c:	0801a3c3 	.word	0x0801a3c3
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 801a320:	2304      	movs	r3, #4
 801a322:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 801a324:	2303      	movs	r3, #3
 801a326:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 801a328:	2306      	movs	r3, #6
 801a32a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 801a32c:	2305      	movs	r3, #5
 801a32e:	753b      	strb	r3, [r7, #20]
      break;
 801a330:	e051      	b.n	801a3d6 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 801a332:	230a      	movs	r3, #10
 801a334:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 801a336:	2309      	movs	r3, #9
 801a338:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 801a33a:	230c      	movs	r3, #12
 801a33c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 801a33e:	230b      	movs	r3, #11
 801a340:	753b      	strb	r3, [r7, #20]
      break;
 801a342:	e048      	b.n	801a3d6 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 801a344:	2310      	movs	r3, #16
 801a346:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 801a348:	230f      	movs	r3, #15
 801a34a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 801a34c:	2312      	movs	r3, #18
 801a34e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 801a350:	2311      	movs	r3, #17
 801a352:	753b      	strb	r3, [r7, #20]
      break;
 801a354:	e03f      	b.n	801a3d6 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 801a356:	2316      	movs	r3, #22
 801a358:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 801a35a:	2315      	movs	r3, #21
 801a35c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 801a35e:	2318      	movs	r3, #24
 801a360:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 801a362:	2317      	movs	r3, #23
 801a364:	753b      	strb	r3, [r7, #20]
      break;
 801a366:	e036      	b.n	801a3d6 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 801a368:	231c      	movs	r3, #28
 801a36a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 801a36c:	231b      	movs	r3, #27
 801a36e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 801a370:	231e      	movs	r3, #30
 801a372:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 801a374:	231d      	movs	r3, #29
 801a376:	753b      	strb	r3, [r7, #20]
      break;
 801a378:	e02d      	b.n	801a3d6 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 801a37a:	2322      	movs	r3, #34	; 0x22
 801a37c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 801a37e:	2321      	movs	r3, #33	; 0x21
 801a380:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 801a382:	2324      	movs	r3, #36	; 0x24
 801a384:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 801a386:	2323      	movs	r3, #35	; 0x23
 801a388:	753b      	strb	r3, [r7, #20]
      break;
 801a38a:	e024      	b.n	801a3d6 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 801a38c:	2328      	movs	r3, #40	; 0x28
 801a38e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 801a390:	2327      	movs	r3, #39	; 0x27
 801a392:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 801a394:	232a      	movs	r3, #42	; 0x2a
 801a396:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 801a398:	2329      	movs	r3, #41	; 0x29
 801a39a:	753b      	strb	r3, [r7, #20]
      break;
 801a39c:	e01b      	b.n	801a3d6 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 801a39e:	232e      	movs	r3, #46	; 0x2e
 801a3a0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 801a3a2:	232d      	movs	r3, #45	; 0x2d
 801a3a4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 801a3a6:	2330      	movs	r3, #48	; 0x30
 801a3a8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 801a3aa:	232f      	movs	r3, #47	; 0x2f
 801a3ac:	753b      	strb	r3, [r7, #20]
      break;
 801a3ae:	e012      	b.n	801a3d6 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 801a3b0:	2334      	movs	r3, #52	; 0x34
 801a3b2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 801a3b4:	2333      	movs	r3, #51	; 0x33
 801a3b6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 801a3b8:	2336      	movs	r3, #54	; 0x36
 801a3ba:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 801a3bc:	2335      	movs	r3, #53	; 0x35
 801a3be:	753b      	strb	r3, [r7, #20]
      break;
 801a3c0:	e009      	b.n	801a3d6 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 801a3c2:	233a      	movs	r3, #58	; 0x3a
 801a3c4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 801a3c6:	2339      	movs	r3, #57	; 0x39
 801a3c8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 801a3ca:	233c      	movs	r3, #60	; 0x3c
 801a3cc:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 801a3ce:	233b      	movs	r3, #59	; 0x3b
 801a3d0:	753b      	strb	r3, [r7, #20]
      break;
 801a3d2:	e000      	b.n	801a3d6 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 801a3d4:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 801a3d6:	89fb      	ldrh	r3, [r7, #14]
 801a3d8:	b2db      	uxtb	r3, r3
 801a3da:	7dfa      	ldrb	r2, [r7, #23]
 801a3dc:	4611      	mov	r1, r2
 801a3de:	4618      	mov	r0, r3
 801a3e0:	f7f5 fcda 	bl	800fd98 <TS_IO_Read>
 801a3e4:	4603      	mov	r3, r0
 801a3e6:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 801a3e8:	7cfb      	ldrb	r3, [r7, #19]
 801a3ea:	b2db      	uxtb	r3, r3
 801a3ec:	b29a      	uxth	r2, r3
 801a3ee:	4b29      	ldr	r3, [pc, #164]	; (801a494 <ft5336_TS_GetXY+0x1dc>)
 801a3f0:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 801a3f2:	89fb      	ldrh	r3, [r7, #14]
 801a3f4:	b2db      	uxtb	r3, r3
 801a3f6:	7dba      	ldrb	r2, [r7, #22]
 801a3f8:	4611      	mov	r1, r2
 801a3fa:	4618      	mov	r0, r3
 801a3fc:	f7f5 fccc 	bl	800fd98 <TS_IO_Read>
 801a400:	4603      	mov	r3, r0
 801a402:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 801a404:	7cfb      	ldrb	r3, [r7, #19]
 801a406:	b2db      	uxtb	r3, r3
 801a408:	021b      	lsls	r3, r3, #8
 801a40a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801a40e:	b21a      	sxth	r2, r3
 801a410:	4b20      	ldr	r3, [pc, #128]	; (801a494 <ft5336_TS_GetXY+0x1dc>)
 801a412:	881b      	ldrh	r3, [r3, #0]
 801a414:	b21b      	sxth	r3, r3
 801a416:	4313      	orrs	r3, r2
 801a418:	b21b      	sxth	r3, r3
 801a41a:	b29a      	uxth	r2, r3
 801a41c:	4b1d      	ldr	r3, [pc, #116]	; (801a494 <ft5336_TS_GetXY+0x1dc>)
 801a41e:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 801a420:	4b1c      	ldr	r3, [pc, #112]	; (801a494 <ft5336_TS_GetXY+0x1dc>)
 801a422:	881a      	ldrh	r2, [r3, #0]
 801a424:	68bb      	ldr	r3, [r7, #8]
 801a426:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 801a428:	89fb      	ldrh	r3, [r7, #14]
 801a42a:	b2db      	uxtb	r3, r3
 801a42c:	7d7a      	ldrb	r2, [r7, #21]
 801a42e:	4611      	mov	r1, r2
 801a430:	4618      	mov	r0, r3
 801a432:	f7f5 fcb1 	bl	800fd98 <TS_IO_Read>
 801a436:	4603      	mov	r3, r0
 801a438:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 801a43a:	7cfb      	ldrb	r3, [r7, #19]
 801a43c:	b2db      	uxtb	r3, r3
 801a43e:	b29a      	uxth	r2, r3
 801a440:	4b14      	ldr	r3, [pc, #80]	; (801a494 <ft5336_TS_GetXY+0x1dc>)
 801a442:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 801a444:	89fb      	ldrh	r3, [r7, #14]
 801a446:	b2db      	uxtb	r3, r3
 801a448:	7d3a      	ldrb	r2, [r7, #20]
 801a44a:	4611      	mov	r1, r2
 801a44c:	4618      	mov	r0, r3
 801a44e:	f7f5 fca3 	bl	800fd98 <TS_IO_Read>
 801a452:	4603      	mov	r3, r0
 801a454:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 801a456:	7cfb      	ldrb	r3, [r7, #19]
 801a458:	b2db      	uxtb	r3, r3
 801a45a:	021b      	lsls	r3, r3, #8
 801a45c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801a460:	b21a      	sxth	r2, r3
 801a462:	4b0c      	ldr	r3, [pc, #48]	; (801a494 <ft5336_TS_GetXY+0x1dc>)
 801a464:	881b      	ldrh	r3, [r3, #0]
 801a466:	b21b      	sxth	r3, r3
 801a468:	4313      	orrs	r3, r2
 801a46a:	b21b      	sxth	r3, r3
 801a46c:	b29a      	uxth	r2, r3
 801a46e:	4b09      	ldr	r3, [pc, #36]	; (801a494 <ft5336_TS_GetXY+0x1dc>)
 801a470:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 801a472:	4b08      	ldr	r3, [pc, #32]	; (801a494 <ft5336_TS_GetXY+0x1dc>)
 801a474:	881a      	ldrh	r2, [r3, #0]
 801a476:	687b      	ldr	r3, [r7, #4]
 801a478:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 801a47a:	4b05      	ldr	r3, [pc, #20]	; (801a490 <ft5336_TS_GetXY+0x1d8>)
 801a47c:	789b      	ldrb	r3, [r3, #2]
 801a47e:	3301      	adds	r3, #1
 801a480:	b2da      	uxtb	r2, r3
 801a482:	4b03      	ldr	r3, [pc, #12]	; (801a490 <ft5336_TS_GetXY+0x1d8>)
 801a484:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 801a486:	bf00      	nop
 801a488:	3718      	adds	r7, #24
 801a48a:	46bd      	mov	sp, r7
 801a48c:	bd80      	pop	{r7, pc}
 801a48e:	bf00      	nop
 801a490:	2000bf54 	.word	0x2000bf54
 801a494:	2000bf58 	.word	0x2000bf58

0801a498 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 801a498:	b580      	push	{r7, lr}
 801a49a:	b084      	sub	sp, #16
 801a49c:	af00      	add	r7, sp, #0
 801a49e:	4603      	mov	r3, r0
 801a4a0:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 801a4a2:	2300      	movs	r3, #0
 801a4a4:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 801a4a6:	2301      	movs	r3, #1
 801a4a8:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 801a4aa:	88fb      	ldrh	r3, [r7, #6]
 801a4ac:	b2db      	uxtb	r3, r3
 801a4ae:	7bfa      	ldrb	r2, [r7, #15]
 801a4b0:	21a4      	movs	r1, #164	; 0xa4
 801a4b2:	4618      	mov	r0, r3
 801a4b4:	f7f5 fc56 	bl	800fd64 <TS_IO_Write>
}
 801a4b8:	bf00      	nop
 801a4ba:	3710      	adds	r7, #16
 801a4bc:	46bd      	mov	sp, r7
 801a4be:	bd80      	pop	{r7, pc}

0801a4c0 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 801a4c0:	b580      	push	{r7, lr}
 801a4c2:	b084      	sub	sp, #16
 801a4c4:	af00      	add	r7, sp, #0
 801a4c6:	4603      	mov	r3, r0
 801a4c8:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 801a4ca:	2300      	movs	r3, #0
 801a4cc:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 801a4ce:	2300      	movs	r3, #0
 801a4d0:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 801a4d2:	88fb      	ldrh	r3, [r7, #6]
 801a4d4:	b2db      	uxtb	r3, r3
 801a4d6:	7bfa      	ldrb	r2, [r7, #15]
 801a4d8:	21a4      	movs	r1, #164	; 0xa4
 801a4da:	4618      	mov	r0, r3
 801a4dc:	f7f5 fc42 	bl	800fd64 <TS_IO_Write>
}
 801a4e0:	bf00      	nop
 801a4e2:	3710      	adds	r7, #16
 801a4e4:	46bd      	mov	sp, r7
 801a4e6:	bd80      	pop	{r7, pc}

0801a4e8 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 801a4e8:	b480      	push	{r7}
 801a4ea:	b083      	sub	sp, #12
 801a4ec:	af00      	add	r7, sp, #0
 801a4ee:	4603      	mov	r3, r0
 801a4f0:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 801a4f2:	2300      	movs	r3, #0
}
 801a4f4:	4618      	mov	r0, r3
 801a4f6:	370c      	adds	r7, #12
 801a4f8:	46bd      	mov	sp, r7
 801a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4fe:	4770      	bx	lr

0801a500 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 801a500:	b480      	push	{r7}
 801a502:	b083      	sub	sp, #12
 801a504:	af00      	add	r7, sp, #0
 801a506:	4603      	mov	r3, r0
 801a508:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 801a50a:	bf00      	nop
 801a50c:	370c      	adds	r7, #12
 801a50e:	46bd      	mov	sp, r7
 801a510:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a514:	4770      	bx	lr

0801a516 <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 801a516:	b580      	push	{r7, lr}
 801a518:	b084      	sub	sp, #16
 801a51a:	af00      	add	r7, sp, #0
 801a51c:	4603      	mov	r3, r0
 801a51e:	6039      	str	r1, [r7, #0]
 801a520:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 801a522:	2300      	movs	r3, #0
 801a524:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 801a526:	88fb      	ldrh	r3, [r7, #6]
 801a528:	b2db      	uxtb	r3, r3
 801a52a:	2101      	movs	r1, #1
 801a52c:	4618      	mov	r0, r3
 801a52e:	f7f5 fc33 	bl	800fd98 <TS_IO_Read>
 801a532:	4603      	mov	r3, r0
 801a534:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 801a536:	7bfb      	ldrb	r3, [r7, #15]
 801a538:	b2db      	uxtb	r3, r3
 801a53a:	461a      	mov	r2, r3
 801a53c:	683b      	ldr	r3, [r7, #0]
 801a53e:	601a      	str	r2, [r3, #0]
}
 801a540:	bf00      	nop
 801a542:	3710      	adds	r7, #16
 801a544:	46bd      	mov	sp, r7
 801a546:	bd80      	pop	{r7, pc}

0801a548 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 801a548:	b580      	push	{r7, lr}
 801a54a:	b086      	sub	sp, #24
 801a54c:	af00      	add	r7, sp, #0
 801a54e:	60b9      	str	r1, [r7, #8]
 801a550:	607a      	str	r2, [r7, #4]
 801a552:	603b      	str	r3, [r7, #0]
 801a554:	4603      	mov	r3, r0
 801a556:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 801a558:	2300      	movs	r3, #0
 801a55a:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 801a55c:	2300      	movs	r3, #0
 801a55e:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 801a560:	2300      	movs	r3, #0
 801a562:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 801a564:	2300      	movs	r3, #0
 801a566:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 801a568:	4b4d      	ldr	r3, [pc, #308]	; (801a6a0 <ft5336_TS_GetTouchInfo+0x158>)
 801a56a:	785b      	ldrb	r3, [r3, #1]
 801a56c:	461a      	mov	r2, r3
 801a56e:	68bb      	ldr	r3, [r7, #8]
 801a570:	4293      	cmp	r3, r2
 801a572:	f080 8090 	bcs.w	801a696 <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 801a576:	68bb      	ldr	r3, [r7, #8]
 801a578:	2b09      	cmp	r3, #9
 801a57a:	d85d      	bhi.n	801a638 <ft5336_TS_GetTouchInfo+0xf0>
 801a57c:	a201      	add	r2, pc, #4	; (adr r2, 801a584 <ft5336_TS_GetTouchInfo+0x3c>)
 801a57e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a582:	bf00      	nop
 801a584:	0801a5ad 	.word	0x0801a5ad
 801a588:	0801a5bb 	.word	0x0801a5bb
 801a58c:	0801a5c9 	.word	0x0801a5c9
 801a590:	0801a5d7 	.word	0x0801a5d7
 801a594:	0801a5e5 	.word	0x0801a5e5
 801a598:	0801a5f3 	.word	0x0801a5f3
 801a59c:	0801a601 	.word	0x0801a601
 801a5a0:	0801a60f 	.word	0x0801a60f
 801a5a4:	0801a61d 	.word	0x0801a61d
 801a5a8:	0801a62b 	.word	0x0801a62b
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 801a5ac:	2303      	movs	r3, #3
 801a5ae:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 801a5b0:	2307      	movs	r3, #7
 801a5b2:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 801a5b4:	2308      	movs	r3, #8
 801a5b6:	757b      	strb	r3, [r7, #21]
      break;
 801a5b8:	e03f      	b.n	801a63a <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 801a5ba:	2309      	movs	r3, #9
 801a5bc:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 801a5be:	230d      	movs	r3, #13
 801a5c0:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 801a5c2:	230e      	movs	r3, #14
 801a5c4:	757b      	strb	r3, [r7, #21]
      break;
 801a5c6:	e038      	b.n	801a63a <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 801a5c8:	230f      	movs	r3, #15
 801a5ca:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 801a5cc:	2313      	movs	r3, #19
 801a5ce:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 801a5d0:	2314      	movs	r3, #20
 801a5d2:	757b      	strb	r3, [r7, #21]
      break;
 801a5d4:	e031      	b.n	801a63a <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 801a5d6:	2315      	movs	r3, #21
 801a5d8:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 801a5da:	2319      	movs	r3, #25
 801a5dc:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 801a5de:	231a      	movs	r3, #26
 801a5e0:	757b      	strb	r3, [r7, #21]
      break;
 801a5e2:	e02a      	b.n	801a63a <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 801a5e4:	231b      	movs	r3, #27
 801a5e6:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 801a5e8:	231f      	movs	r3, #31
 801a5ea:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 801a5ec:	2320      	movs	r3, #32
 801a5ee:	757b      	strb	r3, [r7, #21]
      break;
 801a5f0:	e023      	b.n	801a63a <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 801a5f2:	2321      	movs	r3, #33	; 0x21
 801a5f4:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 801a5f6:	2325      	movs	r3, #37	; 0x25
 801a5f8:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 801a5fa:	2326      	movs	r3, #38	; 0x26
 801a5fc:	757b      	strb	r3, [r7, #21]
      break;
 801a5fe:	e01c      	b.n	801a63a <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 801a600:	2327      	movs	r3, #39	; 0x27
 801a602:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 801a604:	232b      	movs	r3, #43	; 0x2b
 801a606:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 801a608:	232c      	movs	r3, #44	; 0x2c
 801a60a:	757b      	strb	r3, [r7, #21]
      break;
 801a60c:	e015      	b.n	801a63a <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 801a60e:	232d      	movs	r3, #45	; 0x2d
 801a610:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 801a612:	2331      	movs	r3, #49	; 0x31
 801a614:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 801a616:	2332      	movs	r3, #50	; 0x32
 801a618:	757b      	strb	r3, [r7, #21]
      break;
 801a61a:	e00e      	b.n	801a63a <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 801a61c:	2333      	movs	r3, #51	; 0x33
 801a61e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 801a620:	2337      	movs	r3, #55	; 0x37
 801a622:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 801a624:	2338      	movs	r3, #56	; 0x38
 801a626:	757b      	strb	r3, [r7, #21]
      break;
 801a628:	e007      	b.n	801a63a <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 801a62a:	2339      	movs	r3, #57	; 0x39
 801a62c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 801a62e:	233d      	movs	r3, #61	; 0x3d
 801a630:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 801a632:	233e      	movs	r3, #62	; 0x3e
 801a634:	757b      	strb	r3, [r7, #21]
      break;
 801a636:	e000      	b.n	801a63a <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 801a638:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 801a63a:	89fb      	ldrh	r3, [r7, #14]
 801a63c:	b2db      	uxtb	r3, r3
 801a63e:	7dfa      	ldrb	r2, [r7, #23]
 801a640:	4611      	mov	r1, r2
 801a642:	4618      	mov	r0, r3
 801a644:	f7f5 fba8 	bl	800fd98 <TS_IO_Read>
 801a648:	4603      	mov	r3, r0
 801a64a:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 801a64c:	7d3b      	ldrb	r3, [r7, #20]
 801a64e:	b2db      	uxtb	r3, r3
 801a650:	119b      	asrs	r3, r3, #6
 801a652:	f003 0203 	and.w	r2, r3, #3
 801a656:	6a3b      	ldr	r3, [r7, #32]
 801a658:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 801a65a:	89fb      	ldrh	r3, [r7, #14]
 801a65c:	b2db      	uxtb	r3, r3
 801a65e:	7dba      	ldrb	r2, [r7, #22]
 801a660:	4611      	mov	r1, r2
 801a662:	4618      	mov	r0, r3
 801a664:	f7f5 fb98 	bl	800fd98 <TS_IO_Read>
 801a668:	4603      	mov	r3, r0
 801a66a:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 801a66c:	7d3b      	ldrb	r3, [r7, #20]
 801a66e:	b2db      	uxtb	r3, r3
 801a670:	461a      	mov	r2, r3
 801a672:	687b      	ldr	r3, [r7, #4]
 801a674:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 801a676:	89fb      	ldrh	r3, [r7, #14]
 801a678:	b2db      	uxtb	r3, r3
 801a67a:	7d7a      	ldrb	r2, [r7, #21]
 801a67c:	4611      	mov	r1, r2
 801a67e:	4618      	mov	r0, r3
 801a680:	f7f5 fb8a 	bl	800fd98 <TS_IO_Read>
 801a684:	4603      	mov	r3, r0
 801a686:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 801a688:	7d3b      	ldrb	r3, [r7, #20]
 801a68a:	b2db      	uxtb	r3, r3
 801a68c:	111b      	asrs	r3, r3, #4
 801a68e:	f003 0204 	and.w	r2, r3, #4
 801a692:	683b      	ldr	r3, [r7, #0]
 801a694:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 801a696:	bf00      	nop
 801a698:	3718      	adds	r7, #24
 801a69a:	46bd      	mov	sp, r7
 801a69c:	bd80      	pop	{r7, pc}
 801a69e:	bf00      	nop
 801a6a0:	2000bf54 	.word	0x2000bf54

0801a6a4 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 801a6a4:	b480      	push	{r7}
 801a6a6:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 801a6a8:	4b03      	ldr	r3, [pc, #12]	; (801a6b8 <ft5336_Get_I2C_InitializedStatus+0x14>)
 801a6aa:	781b      	ldrb	r3, [r3, #0]
}
 801a6ac:	4618      	mov	r0, r3
 801a6ae:	46bd      	mov	sp, r7
 801a6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6b4:	4770      	bx	lr
 801a6b6:	bf00      	nop
 801a6b8:	2000bf54 	.word	0x2000bf54

0801a6bc <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 801a6bc:	b580      	push	{r7, lr}
 801a6be:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 801a6c0:	f7ff fff0 	bl	801a6a4 <ft5336_Get_I2C_InitializedStatus>
 801a6c4:	4603      	mov	r3, r0
 801a6c6:	2b00      	cmp	r3, #0
 801a6c8:	d104      	bne.n	801a6d4 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 801a6ca:	f7f5 fb41 	bl	800fd50 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 801a6ce:	4b02      	ldr	r3, [pc, #8]	; (801a6d8 <ft5336_I2C_InitializeIfRequired+0x1c>)
 801a6d0:	2201      	movs	r2, #1
 801a6d2:	701a      	strb	r2, [r3, #0]
  }
}
 801a6d4:	bf00      	nop
 801a6d6:	bd80      	pop	{r7, pc}
 801a6d8:	2000bf54 	.word	0x2000bf54

0801a6dc <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 801a6dc:	b480      	push	{r7}
 801a6de:	b085      	sub	sp, #20
 801a6e0:	af00      	add	r7, sp, #0
 801a6e2:	4603      	mov	r3, r0
 801a6e4:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 801a6e6:	2300      	movs	r3, #0
 801a6e8:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 801a6ea:	68fb      	ldr	r3, [r7, #12]
}
 801a6ec:	4618      	mov	r0, r3
 801a6ee:	3714      	adds	r7, #20
 801a6f0:	46bd      	mov	sp, r7
 801a6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6f6:	4770      	bx	lr

0801a6f8 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 801a6f8:	8880      	ldrh	r0, [r0, #4]
 801a6fa:	4770      	bx	lr

0801a6fc <_ZN8touchgfx17AbstractPartition5clearEv>:
 801a6fc:	2300      	movs	r3, #0
 801a6fe:	8083      	strh	r3, [r0, #4]
 801a700:	4770      	bx	lr
	...

0801a704 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 801a704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a706:	6803      	ldr	r3, [r0, #0]
 801a708:	460e      	mov	r6, r1
 801a70a:	2100      	movs	r1, #0
 801a70c:	4605      	mov	r5, r0
 801a70e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a710:	4798      	blx	r3
 801a712:	4604      	mov	r4, r0
 801a714:	682b      	ldr	r3, [r5, #0]
 801a716:	4628      	mov	r0, r5
 801a718:	1b34      	subs	r4, r6, r4
 801a71a:	6a1b      	ldr	r3, [r3, #32]
 801a71c:	b2a4      	uxth	r4, r4
 801a71e:	4798      	blx	r3
 801a720:	88ab      	ldrh	r3, [r5, #4]
 801a722:	fbb4 f4f0 	udiv	r4, r4, r0
 801a726:	42a3      	cmp	r3, r4
 801a728:	d805      	bhi.n	801a736 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 801a72a:	4b0e      	ldr	r3, [pc, #56]	; (801a764 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 801a72c:	211e      	movs	r1, #30
 801a72e:	4a0e      	ldr	r2, [pc, #56]	; (801a768 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 801a730:	480e      	ldr	r0, [pc, #56]	; (801a76c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 801a732:	f010 f825 	bl	802a780 <__assert_func>
 801a736:	682b      	ldr	r3, [r5, #0]
 801a738:	2100      	movs	r1, #0
 801a73a:	4628      	mov	r0, r5
 801a73c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a73e:	4798      	blx	r3
 801a740:	682b      	ldr	r3, [r5, #0]
 801a742:	4607      	mov	r7, r0
 801a744:	4628      	mov	r0, r5
 801a746:	6a1b      	ldr	r3, [r3, #32]
 801a748:	4798      	blx	r3
 801a74a:	1bf3      	subs	r3, r6, r7
 801a74c:	b29b      	uxth	r3, r3
 801a74e:	fbb3 f2f0 	udiv	r2, r3, r0
 801a752:	fb02 3010 	mls	r0, r2, r0, r3
 801a756:	b118      	cbz	r0, 801a760 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 801a758:	4b05      	ldr	r3, [pc, #20]	; (801a770 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 801a75a:	211f      	movs	r1, #31
 801a75c:	4a02      	ldr	r2, [pc, #8]	; (801a768 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 801a75e:	e7e7      	b.n	801a730 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 801a760:	4620      	mov	r0, r4
 801a762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a764:	0802d2d0 	.word	0x0802d2d0
 801a768:	0802d43e 	.word	0x0802d43e
 801a76c:	0802d2e5 	.word	0x0802d2e5
 801a770:	0802d313 	.word	0x0802d313

0801a774 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 801a774:	b538      	push	{r3, r4, r5, lr}
 801a776:	6803      	ldr	r3, [r0, #0]
 801a778:	460d      	mov	r5, r1
 801a77a:	4604      	mov	r4, r0
 801a77c:	6a1b      	ldr	r3, [r3, #32]
 801a77e:	4798      	blx	r3
 801a780:	4285      	cmp	r5, r0
 801a782:	d905      	bls.n	801a790 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 801a784:	4b0c      	ldr	r3, [pc, #48]	; (801a7b8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 801a786:	212f      	movs	r1, #47	; 0x2f
 801a788:	4a0c      	ldr	r2, [pc, #48]	; (801a7bc <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 801a78a:	480d      	ldr	r0, [pc, #52]	; (801a7c0 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 801a78c:	f00f fff8 	bl	802a780 <__assert_func>
 801a790:	6823      	ldr	r3, [r4, #0]
 801a792:	4620      	mov	r0, r4
 801a794:	88a5      	ldrh	r5, [r4, #4]
 801a796:	69db      	ldr	r3, [r3, #28]
 801a798:	4798      	blx	r3
 801a79a:	4285      	cmp	r5, r0
 801a79c:	d303      	bcc.n	801a7a6 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 801a79e:	4b09      	ldr	r3, [pc, #36]	; (801a7c4 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 801a7a0:	2130      	movs	r1, #48	; 0x30
 801a7a2:	4a06      	ldr	r2, [pc, #24]	; (801a7bc <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 801a7a4:	e7f1      	b.n	801a78a <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 801a7a6:	6823      	ldr	r3, [r4, #0]
 801a7a8:	4620      	mov	r0, r4
 801a7aa:	88a1      	ldrh	r1, [r4, #4]
 801a7ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a7ae:	4798      	blx	r3
 801a7b0:	88a3      	ldrh	r3, [r4, #4]
 801a7b2:	3301      	adds	r3, #1
 801a7b4:	80a3      	strh	r3, [r4, #4]
 801a7b6:	bd38      	pop	{r3, r4, r5, pc}
 801a7b8:	0802d38d 	.word	0x0802d38d
 801a7bc:	0802d481 	.word	0x0802d481
 801a7c0:	0802d2e5 	.word	0x0802d2e5
 801a7c4:	0802d3a4 	.word	0x0802d3a4

0801a7c8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 801a7c8:	b570      	push	{r4, r5, r6, lr}
 801a7ca:	6803      	ldr	r3, [r0, #0]
 801a7cc:	4616      	mov	r6, r2
 801a7ce:	4604      	mov	r4, r0
 801a7d0:	460d      	mov	r5, r1
 801a7d2:	6a1b      	ldr	r3, [r3, #32]
 801a7d4:	4798      	blx	r3
 801a7d6:	4286      	cmp	r6, r0
 801a7d8:	d905      	bls.n	801a7e6 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 801a7da:	4b06      	ldr	r3, [pc, #24]	; (801a7f4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 801a7dc:	2139      	movs	r1, #57	; 0x39
 801a7de:	4a06      	ldr	r2, [pc, #24]	; (801a7f8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 801a7e0:	4806      	ldr	r0, [pc, #24]	; (801a7fc <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 801a7e2:	f00f ffcd 	bl	802a780 <__assert_func>
 801a7e6:	6823      	ldr	r3, [r4, #0]
 801a7e8:	4629      	mov	r1, r5
 801a7ea:	4620      	mov	r0, r4
 801a7ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a7ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a7f2:	4718      	bx	r3
 801a7f4:	0802d38d 	.word	0x0802d38d
 801a7f8:	0802d3f4 	.word	0x0802d3f4
 801a7fc:	0802d2e5 	.word	0x0802d2e5

0801a800 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 801a800:	4770      	bx	lr
	...

0801a804 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 801a804:	4a02      	ldr	r2, [pc, #8]	; (801a810 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 801a806:	6002      	str	r2, [r0, #0]
 801a808:	2200      	movs	r2, #0
 801a80a:	8082      	strh	r2, [r0, #4]
 801a80c:	4770      	bx	lr
 801a80e:	bf00      	nop
 801a810:	0802d3c8 	.word	0x0802d3c8

0801a814 <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>:
 801a814:	f8c0 10b8 	str.w	r1, [r0, #184]	; 0xb8
 801a818:	4770      	bx	lr

0801a81a <_ZNK8touchgfx11BoxProgress8getColorEv>:
 801a81a:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 801a81e:	4770      	bx	lr

0801a820 <_ZN8touchgfx11BoxProgress8setAlphaEh>:
 801a820:	f880 10b6 	strb.w	r1, [r0, #182]	; 0xb6
 801a824:	4770      	bx	lr

0801a826 <_ZNK8touchgfx11BoxProgress8getAlphaEv>:
 801a826:	f890 00b6 	ldrb.w	r0, [r0, #182]	; 0xb6
 801a82a:	4770      	bx	lr

0801a82c <_ZN8touchgfx11BoxProgressD1Ev>:
 801a82c:	4b03      	ldr	r3, [pc, #12]	; (801a83c <_ZN8touchgfx11BoxProgressD1Ev+0x10>)
 801a82e:	b510      	push	{r4, lr}
 801a830:	4604      	mov	r4, r0
 801a832:	6003      	str	r3, [r0, #0]
 801a834:	f000 f8b6 	bl	801a9a4 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 801a838:	4620      	mov	r0, r4
 801a83a:	bd10      	pop	{r4, pc}
 801a83c:	0802d4c8 	.word	0x0802d4c8

0801a840 <_ZN8touchgfx11BoxProgressD0Ev>:
 801a840:	b510      	push	{r4, lr}
 801a842:	4604      	mov	r4, r0
 801a844:	f7ff fff2 	bl	801a82c <_ZN8touchgfx11BoxProgressD1Ev>
 801a848:	21c0      	movs	r1, #192	; 0xc0
 801a84a:	4620      	mov	r0, r4
 801a84c:	f00f ff6d 	bl	802a72a <_ZdlPvj>
 801a850:	4620      	mov	r0, r4
 801a852:	bd10      	pop	{r4, pc}

0801a854 <_ZN8touchgfx11BoxProgressC1Ev>:
 801a854:	b510      	push	{r4, lr}
 801a856:	4604      	mov	r4, r0
 801a858:	f000 f8b8 	bl	801a9cc <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 801a85c:	2201      	movs	r2, #1
 801a85e:	4b16      	ldr	r3, [pc, #88]	; (801a8b8 <_ZN8touchgfx11BoxProgressC1Ev+0x64>)
 801a860:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a864:	f104 0190 	add.w	r1, r4, #144	; 0x90
 801a868:	f884 20b5 	strb.w	r2, [r4, #181]	; 0xb5
 801a86c:	4a13      	ldr	r2, [pc, #76]	; (801a8bc <_ZN8touchgfx11BoxProgressC1Ev+0x68>)
 801a86e:	6023      	str	r3, [r4, #0]
 801a870:	2300      	movs	r3, #0
 801a872:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 801a876:	22ff      	movs	r2, #255	; 0xff
 801a878:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
 801a87c:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
 801a880:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
 801a884:	f8a4 309a 	strh.w	r3, [r4, #154]	; 0x9a
 801a888:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c
 801a88c:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 801a890:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 801a894:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 801a898:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 801a89c:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 801a8a0:	f884 20b6 	strb.w	r2, [r4, #182]	; 0xb6
 801a8a4:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 801a8a8:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
 801a8ac:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
 801a8b0:	f000 fbb8 	bl	801b024 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801a8b4:	4620      	mov	r0, r4
 801a8b6:	bd10      	pop	{r4, pc}
 801a8b8:	0802d4c8 	.word	0x0802d4c8
 801a8bc:	0802e85c 	.word	0x0802e85c

0801a8c0 <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>:
 801a8c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801a8c4:	4617      	mov	r7, r2
 801a8c6:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 801a8ca:	2200      	movs	r2, #0
 801a8cc:	4604      	mov	r4, r0
 801a8ce:	460e      	mov	r6, r1
 801a8d0:	4698      	mov	r8, r3
 801a8d2:	4611      	mov	r1, r2
 801a8d4:	9500      	str	r5, [sp, #0]
 801a8d6:	3090      	adds	r0, #144	; 0x90
 801a8d8:	f7f6 fa26 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
 801a8dc:	4643      	mov	r3, r8
 801a8de:	463a      	mov	r2, r7
 801a8e0:	4631      	mov	r1, r6
 801a8e2:	4620      	mov	r0, r4
 801a8e4:	9508      	str	r5, [sp, #32]
 801a8e6:	b002      	add	sp, #8
 801a8e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a8ec:	f000 b9fa 	b.w	801ace4 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

0801a8f0 <_ZN8touchgfx11BoxProgress8setValueEi>:
 801a8f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a8f2:	4604      	mov	r4, r0
 801a8f4:	f000 fa40 	bl	801ad78 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 801a8f8:	f104 0590 	add.w	r5, r4, #144	; 0x90
 801a8fc:	4628      	mov	r0, r5
 801a8fe:	f004 fb3f 	bl	801ef80 <_ZNK8touchgfx8Drawable10invalidateEv>
 801a902:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 801a906:	2b03      	cmp	r3, #3
 801a908:	d814      	bhi.n	801a934 <_ZN8touchgfx11BoxProgress8setValueEi+0x44>
 801a90a:	e8df f003 	tbb	[pc, r3]
 801a90e:	0202      	.short	0x0202
 801a910:	1010      	.short	0x1010
 801a912:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 801a916:	4620      	mov	r0, r4
 801a918:	f000 fa88 	bl	801ae2c <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 801a91c:	b200      	sxth	r0, r0
 801a91e:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 801a922:	2b03      	cmp	r3, #3
 801a924:	d81a      	bhi.n	801a95c <_ZN8touchgfx11BoxProgress8setValueEi+0x6c>
 801a926:	e8df f003 	tbb	[pc, r3]
 801a92a:	0e07      	.short	0x0e07
 801a92c:	231f      	.short	0x231f
 801a92e:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 801a932:	e7f0      	b.n	801a916 <_ZN8touchgfx11BoxProgress8setValueEi+0x26>
 801a934:	2000      	movs	r0, #0
 801a936:	e7f2      	b.n	801a91e <_ZN8touchgfx11BoxProgress8setValueEi+0x2e>
 801a938:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 801a93c:	9300      	str	r3, [sp, #0]
 801a93e:	4603      	mov	r3, r0
 801a940:	2200      	movs	r2, #0
 801a942:	2100      	movs	r1, #0
 801a944:	e007      	b.n	801a956 <_ZN8touchgfx11BoxProgress8setValueEi+0x66>
 801a946:	8921      	ldrh	r1, [r4, #8]
 801a948:	2200      	movs	r2, #0
 801a94a:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 801a94e:	1a09      	subs	r1, r1, r0
 801a950:	9300      	str	r3, [sp, #0]
 801a952:	4603      	mov	r3, r0
 801a954:	b209      	sxth	r1, r1
 801a956:	4628      	mov	r0, r5
 801a958:	f7f6 f9e6 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
 801a95c:	4628      	mov	r0, r5
 801a95e:	b003      	add	sp, #12
 801a960:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a964:	f004 bb0c 	b.w	801ef80 <_ZNK8touchgfx8Drawable10invalidateEv>
 801a968:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801a96c:	9000      	str	r0, [sp, #0]
 801a96e:	e7e7      	b.n	801a940 <_ZN8touchgfx11BoxProgress8setValueEi+0x50>
 801a970:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 801a974:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801a978:	1a12      	subs	r2, r2, r0
 801a97a:	9000      	str	r0, [sp, #0]
 801a97c:	b212      	sxth	r2, r2
 801a97e:	e7e0      	b.n	801a942 <_ZN8touchgfx11BoxProgress8setValueEi+0x52>

0801a980 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>:
 801a980:	b570      	push	{r4, r5, r6, lr}
 801a982:	6803      	ldr	r3, [r0, #0]
 801a984:	4604      	mov	r4, r0
 801a986:	f880 108e 	strb.w	r1, [r0, #142]	; 0x8e
 801a98a:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 801a98e:	4798      	blx	r3
 801a990:	4601      	mov	r1, r0
 801a992:	462b      	mov	r3, r5
 801a994:	4620      	mov	r0, r4
 801a996:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a99a:	4718      	bx	r3

0801a99c <_ZNK8touchgfx25AbstractDirectionProgress12getDirectionEv>:
 801a99c:	f890 008e 	ldrb.w	r0, [r0, #142]	; 0x8e
 801a9a0:	4770      	bx	lr
	...

0801a9a4 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>:
 801a9a4:	4b03      	ldr	r3, [pc, #12]	; (801a9b4 <_ZN8touchgfx25AbstractDirectionProgressD1Ev+0x10>)
 801a9a6:	b510      	push	{r4, lr}
 801a9a8:	4604      	mov	r4, r0
 801a9aa:	6003      	str	r3, [r0, #0]
 801a9ac:	f000 f999 	bl	801ace2 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 801a9b0:	4620      	mov	r0, r4
 801a9b2:	bd10      	pop	{r4, pc}
 801a9b4:	0802d5a0 	.word	0x0802d5a0

0801a9b8 <_ZN8touchgfx25AbstractDirectionProgressD0Ev>:
 801a9b8:	b510      	push	{r4, lr}
 801a9ba:	4604      	mov	r4, r0
 801a9bc:	f7ff fff2 	bl	801a9a4 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 801a9c0:	2190      	movs	r1, #144	; 0x90
 801a9c2:	4620      	mov	r0, r4
 801a9c4:	f00f feb1 	bl	802a72a <_ZdlPvj>
 801a9c8:	4620      	mov	r0, r4
 801a9ca:	bd10      	pop	{r4, pc}

0801a9cc <_ZN8touchgfx25AbstractDirectionProgressC1Ev>:
 801a9cc:	b510      	push	{r4, lr}
 801a9ce:	4604      	mov	r4, r0
 801a9d0:	f000 fa4c 	bl	801ae6c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 801a9d4:	4b03      	ldr	r3, [pc, #12]	; (801a9e4 <_ZN8touchgfx25AbstractDirectionProgressC1Ev+0x18>)
 801a9d6:	2100      	movs	r1, #0
 801a9d8:	4620      	mov	r0, r4
 801a9da:	6023      	str	r3, [r4, #0]
 801a9dc:	f7ff ffd0 	bl	801a980 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
 801a9e0:	4620      	mov	r0, r4
 801a9e2:	bd10      	pop	{r4, pc}
 801a9e4:	0802d5a0 	.word	0x0802d5a0

0801a9e8 <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>:
 801a9e8:	b570      	push	{r4, r5, r6, lr}
 801a9ea:	6803      	ldr	r3, [r0, #0]
 801a9ec:	4604      	mov	r4, r0
 801a9ee:	f880 10ec 	strb.w	r1, [r0, #236]	; 0xec
 801a9f2:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 801a9f6:	4798      	blx	r3
 801a9f8:	4601      	mov	r1, r0
 801a9fa:	462b      	mov	r3, r5
 801a9fc:	4620      	mov	r0, r4
 801a9fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801aa02:	4718      	bx	r3

0801aa04 <_ZNK8touchgfx13ImageProgress15getAnchorAtZeroEv>:
 801aa04:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
 801aa08:	4770      	bx	lr

0801aa0a <_ZN8touchgfx13ImageProgress8setAlphaEh>:
 801aa0a:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
 801aa0e:	4770      	bx	lr

0801aa10 <_ZNK8touchgfx13ImageProgress8getAlphaEv>:
 801aa10:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
 801aa14:	4770      	bx	lr

0801aa16 <_ZN8touchgfx13ImageProgress9setBitmapEt>:
 801aa16:	b507      	push	{r0, r1, r2, lr}
 801aa18:	ab02      	add	r3, sp, #8
 801aa1a:	30bc      	adds	r0, #188	; 0xbc
 801aa1c:	f823 1d04 	strh.w	r1, [r3, #-4]!
 801aa20:	4619      	mov	r1, r3
 801aa22:	f002 fa73 	bl	801cf0c <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>
 801aa26:	b003      	add	sp, #12
 801aa28:	f85d fb04 	ldr.w	pc, [sp], #4

0801aa2c <_ZN8touchgfx13ImageProgressD1Ev>:
 801aa2c:	4b03      	ldr	r3, [pc, #12]	; (801aa3c <_ZN8touchgfx13ImageProgressD1Ev+0x10>)
 801aa2e:	b510      	push	{r4, lr}
 801aa30:	4604      	mov	r4, r0
 801aa32:	6003      	str	r3, [r0, #0]
 801aa34:	f7ff ffb6 	bl	801a9a4 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 801aa38:	4620      	mov	r0, r4
 801aa3a:	bd10      	pop	{r4, pc}
 801aa3c:	0802d6cc 	.word	0x0802d6cc

0801aa40 <_ZN8touchgfx13ImageProgressD0Ev>:
 801aa40:	b510      	push	{r4, lr}
 801aa42:	4604      	mov	r4, r0
 801aa44:	f7ff fff2 	bl	801aa2c <_ZN8touchgfx13ImageProgressD1Ev>
 801aa48:	21f0      	movs	r1, #240	; 0xf0
 801aa4a:	4620      	mov	r0, r4
 801aa4c:	f00f fe6d 	bl	802a72a <_ZdlPvj>
 801aa50:	4620      	mov	r0, r4
 801aa52:	bd10      	pop	{r4, pc}

0801aa54 <_ZNK8touchgfx13ImageProgress9getBitmapEv>:
 801aa54:	b508      	push	{r3, lr}
 801aa56:	4b06      	ldr	r3, [pc, #24]	; (801aa70 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x1c>)
 801aa58:	681b      	ldr	r3, [r3, #0]
 801aa5a:	b92b      	cbnz	r3, 801aa68 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x14>
 801aa5c:	4b05      	ldr	r3, [pc, #20]	; (801aa74 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x20>)
 801aa5e:	21b8      	movs	r1, #184	; 0xb8
 801aa60:	4a05      	ldr	r2, [pc, #20]	; (801aa78 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x24>)
 801aa62:	4806      	ldr	r0, [pc, #24]	; (801aa7c <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x28>)
 801aa64:	f00f fe8c 	bl	802a780 <__assert_func>
 801aa68:	f8b0 00e2 	ldrh.w	r0, [r0, #226]	; 0xe2
 801aa6c:	bd08      	pop	{r3, pc}
 801aa6e:	bf00      	nop
 801aa70:	2000c030 	.word	0x2000c030
 801aa74:	0802d660 	.word	0x0802d660
 801aa78:	0802d7a4 	.word	0x0802d7a4
 801aa7c:	0802d69c 	.word	0x0802d69c

0801aa80 <_ZN8touchgfx13ImageProgressC1Ev>:
 801aa80:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801aa84:	4604      	mov	r4, r0
 801aa86:	f7ff ffa1 	bl	801a9cc <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 801aa8a:	4b31      	ldr	r3, [pc, #196]	; (801ab50 <_ZN8touchgfx13ImageProgressC1Ev+0xd0>)
 801aa8c:	a902      	add	r1, sp, #8
 801aa8e:	4626      	mov	r6, r4
 801aa90:	f104 08bc 	add.w	r8, r4, #188	; 0xbc
 801aa94:	2500      	movs	r5, #0
 801aa96:	4a2f      	ldr	r2, [pc, #188]	; (801ab54 <_ZN8touchgfx13ImageProgressC1Ev+0xd4>)
 801aa98:	f846 3b90 	str.w	r3, [r6], #144
 801aa9c:	2701      	movs	r7, #1
 801aa9e:	4b2e      	ldr	r3, [pc, #184]	; (801ab58 <_ZN8touchgfx13ImageProgressC1Ev+0xd8>)
 801aaa0:	4640      	mov	r0, r8
 801aaa2:	f8c4 20bc 	str.w	r2, [r4, #188]	; 0xbc
 801aaa6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 801aaaa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801aaae:	f8a4 5094 	strh.w	r5, [r4, #148]	; 0x94
 801aab2:	f821 3d04 	strh.w	r3, [r1, #-4]!
 801aab6:	f8a4 30e2 	strh.w	r3, [r4, #226]	; 0xe2
 801aaba:	f8a4 5096 	strh.w	r5, [r4, #150]	; 0x96
 801aabe:	f8a4 5098 	strh.w	r5, [r4, #152]	; 0x98
 801aac2:	f8a4 509a 	strh.w	r5, [r4, #154]	; 0x9a
 801aac6:	f8a4 509c 	strh.w	r5, [r4, #156]	; 0x9c
 801aaca:	f8a4 509e 	strh.w	r5, [r4, #158]	; 0x9e
 801aace:	f8a4 50a0 	strh.w	r5, [r4, #160]	; 0xa0
 801aad2:	f8a4 50a2 	strh.w	r5, [r4, #162]	; 0xa2
 801aad6:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
 801aada:	f884 50b4 	strb.w	r5, [r4, #180]	; 0xb4
 801aade:	f884 70b5 	strb.w	r7, [r4, #181]	; 0xb5
 801aae2:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
 801aae6:	f8a4 50c0 	strh.w	r5, [r4, #192]	; 0xc0
 801aaea:	f8a4 50c2 	strh.w	r5, [r4, #194]	; 0xc2
 801aaee:	f8a4 50c4 	strh.w	r5, [r4, #196]	; 0xc4
 801aaf2:	f8a4 50c6 	strh.w	r5, [r4, #198]	; 0xc6
 801aaf6:	f8a4 50c8 	strh.w	r5, [r4, #200]	; 0xc8
 801aafa:	f8a4 50ca 	strh.w	r5, [r4, #202]	; 0xca
 801aafe:	f8a4 50cc 	strh.w	r5, [r4, #204]	; 0xcc
 801ab02:	f8a4 50ce 	strh.w	r5, [r4, #206]	; 0xce
 801ab06:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
 801ab0a:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
 801ab0e:	f884 70e1 	strb.w	r7, [r4, #225]	; 0xe1
 801ab12:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 801ab16:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
 801ab1a:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
 801ab1e:	f002 fd53 	bl	801d5c8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801ab22:	4b0e      	ldr	r3, [pc, #56]	; (801ab5c <_ZN8touchgfx13ImageProgressC1Ev+0xdc>)
 801ab24:	4641      	mov	r1, r8
 801ab26:	4630      	mov	r0, r6
 801ab28:	f8a4 50e6 	strh.w	r5, [r4, #230]	; 0xe6
 801ab2c:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 801ab30:	f8a4 50e8 	strh.w	r5, [r4, #232]	; 0xe8
 801ab34:	f884 70ec 	strb.w	r7, [r4, #236]	; 0xec
 801ab38:	f000 fa74 	bl	801b024 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801ab3c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801ab40:	4631      	mov	r1, r6
 801ab42:	f000 fa6f 	bl	801b024 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801ab46:	4620      	mov	r0, r4
 801ab48:	b002      	add	sp, #8
 801ab4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ab4e:	bf00      	nop
 801ab50:	0802d6cc 	.word	0x0802d6cc
 801ab54:	0802ead0 	.word	0x0802ead0
 801ab58:	0802da48 	.word	0x0802da48
 801ab5c:	0802e8c4 	.word	0x0802e8c4

0801ab60 <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>:
 801ab60:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801ab64:	4617      	mov	r7, r2
 801ab66:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 801ab6a:	2200      	movs	r2, #0
 801ab6c:	4604      	mov	r4, r0
 801ab6e:	460e      	mov	r6, r1
 801ab70:	4698      	mov	r8, r3
 801ab72:	4611      	mov	r1, r2
 801ab74:	9500      	str	r5, [sp, #0]
 801ab76:	3090      	adds	r0, #144	; 0x90
 801ab78:	f7f6 f8d6 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
 801ab7c:	4643      	mov	r3, r8
 801ab7e:	463a      	mov	r2, r7
 801ab80:	4631      	mov	r1, r6
 801ab82:	4620      	mov	r0, r4
 801ab84:	9508      	str	r5, [sp, #32]
 801ab86:	b002      	add	sp, #8
 801ab88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ab8c:	f000 b8aa 	b.w	801ace4 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

0801ab90 <_ZN8touchgfx13ImageProgress8setValueEi>:
 801ab90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ab92:	4604      	mov	r4, r0
 801ab94:	f000 f8f0 	bl	801ad78 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 801ab98:	f104 0790 	add.w	r7, r4, #144	; 0x90
 801ab9c:	4638      	mov	r0, r7
 801ab9e:	f004 f9ef 	bl	801ef80 <_ZNK8touchgfx8Drawable10invalidateEv>
 801aba2:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 801aba6:	4620      	mov	r0, r4
 801aba8:	2b01      	cmp	r3, #1
 801abaa:	bf94      	ite	ls
 801abac:	f8b4 1060 	ldrhls.w	r1, [r4, #96]	; 0x60
 801abb0:	f8b4 1062 	ldrhhi.w	r1, [r4, #98]	; 0x62
 801abb4:	f000 f93a 	bl	801ae2c <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 801abb8:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
 801abbc:	4606      	mov	r6, r0
 801abbe:	b205      	sxth	r5, r0
 801abc0:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 801abc4:	2a00      	cmp	r2, #0
 801abc6:	d056      	beq.n	801ac76 <_ZN8touchgfx13ImageProgress8setValueEi+0xe6>
 801abc8:	2b03      	cmp	r3, #3
 801abca:	d82c      	bhi.n	801ac26 <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 801abcc:	e8df f003 	tbb	[pc, r3]
 801abd0:	3d311202 	.word	0x3d311202
 801abd4:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 801abd8:	2200      	movs	r2, #0
 801abda:	9300      	str	r3, [sp, #0]
 801abdc:	4611      	mov	r1, r2
 801abde:	462b      	mov	r3, r5
 801abe0:	4638      	mov	r0, r7
 801abe2:	f7f6 f8a1 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
 801abe6:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 801abea:	9300      	str	r3, [sp, #0]
 801abec:	462b      	mov	r3, r5
 801abee:	2200      	movs	r2, #0
 801abf0:	4611      	mov	r1, r2
 801abf2:	e014      	b.n	801ac1e <_ZN8touchgfx13ImageProgress8setValueEi+0x8e>
 801abf4:	8921      	ldrh	r1, [r4, #8]
 801abf6:	2200      	movs	r2, #0
 801abf8:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 801abfc:	1a09      	subs	r1, r1, r0
 801abfe:	4638      	mov	r0, r7
 801ac00:	9300      	str	r3, [sp, #0]
 801ac02:	462b      	mov	r3, r5
 801ac04:	b209      	sxth	r1, r1
 801ac06:	f7f6 f88f 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
 801ac0a:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
 801ac0e:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801ac12:	4249      	negs	r1, r1
 801ac14:	f9b4 2062 	ldrsh.w	r2, [r4, #98]	; 0x62
 801ac18:	9200      	str	r2, [sp, #0]
 801ac1a:	b209      	sxth	r1, r1
 801ac1c:	2200      	movs	r2, #0
 801ac1e:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 801ac22:	f7f6 f881 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
 801ac26:	4638      	mov	r0, r7
 801ac28:	b003      	add	sp, #12
 801ac2a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801ac2e:	f004 b9a7 	b.w	801ef80 <_ZNK8touchgfx8Drawable10invalidateEv>
 801ac32:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801ac36:	2200      	movs	r2, #0
 801ac38:	9500      	str	r5, [sp, #0]
 801ac3a:	2100      	movs	r1, #0
 801ac3c:	4638      	mov	r0, r7
 801ac3e:	f7f6 f873 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
 801ac42:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801ac46:	9500      	str	r5, [sp, #0]
 801ac48:	e7d1      	b.n	801abee <_ZN8touchgfx13ImageProgress8setValueEi+0x5e>
 801ac4a:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 801ac4e:	2100      	movs	r1, #0
 801ac50:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801ac54:	1a12      	subs	r2, r2, r0
 801ac56:	9500      	str	r5, [sp, #0]
 801ac58:	4638      	mov	r0, r7
 801ac5a:	b212      	sxth	r2, r2
 801ac5c:	f7f6 f864 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
 801ac60:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
 801ac64:	f9b4 1062 	ldrsh.w	r1, [r4, #98]	; 0x62
 801ac68:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801ac6c:	4252      	negs	r2, r2
 801ac6e:	9100      	str	r1, [sp, #0]
 801ac70:	b212      	sxth	r2, r2
 801ac72:	2100      	movs	r1, #0
 801ac74:	e7d3      	b.n	801ac1e <_ZN8touchgfx13ImageProgress8setValueEi+0x8e>
 801ac76:	2b03      	cmp	r3, #3
 801ac78:	d8d5      	bhi.n	801ac26 <_ZN8touchgfx13ImageProgress8setValueEi+0x96>
 801ac7a:	e8df f003 	tbb	[pc, r3]
 801ac7e:	1102      	.short	0x1102
 801ac80:	2a1b      	.short	0x2a1b
 801ac82:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801ac86:	2200      	movs	r2, #0
 801ac88:	4638      	mov	r0, r7
 801ac8a:	4611      	mov	r1, r2
 801ac8c:	9300      	str	r3, [sp, #0]
 801ac8e:	462b      	mov	r3, r5
 801ac90:	f7f6 f84a 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
 801ac94:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801ac98:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 801ac9c:	1af1      	subs	r1, r6, r3
 801ac9e:	e7bb      	b.n	801ac18 <_ZN8touchgfx13ImageProgress8setValueEi+0x88>
 801aca0:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 801aca4:	2200      	movs	r2, #0
 801aca6:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	; 0x62
 801acaa:	1a09      	subs	r1, r1, r0
 801acac:	9300      	str	r3, [sp, #0]
 801acae:	462b      	mov	r3, r5
 801acb0:	b209      	sxth	r1, r1
 801acb2:	e795      	b.n	801abe0 <_ZN8touchgfx13ImageProgress8setValueEi+0x50>
 801acb4:	2200      	movs	r2, #0
 801acb6:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801acba:	4638      	mov	r0, r7
 801acbc:	9500      	str	r5, [sp, #0]
 801acbe:	4611      	mov	r1, r2
 801acc0:	f7f6 f832 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
 801acc4:	f9b4 0062 	ldrsh.w	r0, [r4, #98]	; 0x62
 801acc8:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801accc:	1a32      	subs	r2, r6, r0
 801acce:	9000      	str	r0, [sp, #0]
 801acd0:	e7ce      	b.n	801ac70 <_ZN8touchgfx13ImageProgress8setValueEi+0xe0>
 801acd2:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 801acd6:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 801acda:	1a12      	subs	r2, r2, r0
 801acdc:	9500      	str	r5, [sp, #0]
 801acde:	b212      	sxth	r2, r2
 801ace0:	e7ab      	b.n	801ac3a <_ZN8touchgfx13ImageProgress8setValueEi+0xaa>

0801ace2 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 801ace2:	4770      	bx	lr

0801ace4 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 801ace4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801ace8:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
 801acec:	4604      	mov	r4, r0
 801acee:	460e      	mov	r6, r1
 801acf0:	4698      	mov	r8, r3
 801acf2:	9700      	str	r7, [sp, #0]
 801acf4:	3058      	adds	r0, #88	; 0x58
 801acf6:	4615      	mov	r5, r2
 801acf8:	f7f6 f816 	bl	8010d28 <_ZN8touchgfx8Drawable11setPositionEssss>
 801acfc:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 801ad00:	eb06 0308 	add.w	r3, r6, r8
 801ad04:	429a      	cmp	r2, r3
 801ad06:	eb05 0207 	add.w	r2, r5, r7
 801ad0a:	bfb8      	it	lt
 801ad0c:	8123      	strhlt	r3, [r4, #8]
 801ad0e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801ad12:	4293      	cmp	r3, r2
 801ad14:	bfb8      	it	lt
 801ad16:	8162      	strhlt	r2, [r4, #10]
 801ad18:	b002      	add	sp, #8
 801ad1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ad1e <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 801ad1e:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 801ad22:	4770      	bx	lr

0801ad24 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 801ad24:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 801ad28:	4770      	bx	lr

0801ad2a <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 801ad2a:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 801ad2e:	4770      	bx	lr

0801ad30 <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 801ad30:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 801ad34:	4770      	bx	lr

0801ad36 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_RtS2_>:
 801ad36:	b510      	push	{r4, lr}
 801ad38:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 801ad3c:	800c      	strh	r4, [r1, #0]
 801ad3e:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 801ad42:	8011      	strh	r1, [r2, #0]
 801ad44:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 801ad48:	801a      	strh	r2, [r3, #0]
 801ad4a:	9b02      	ldr	r3, [sp, #8]
 801ad4c:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
 801ad50:	801a      	strh	r2, [r3, #0]
 801ad52:	bd10      	pop	{r4, pc}

0801ad54 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_Rt>:
 801ad54:	b510      	push	{r4, lr}
 801ad56:	f9b0 4084 	ldrsh.w	r4, [r0, #132]	; 0x84
 801ad5a:	800c      	strh	r4, [r1, #0]
 801ad5c:	f9b0 1086 	ldrsh.w	r1, [r0, #134]	; 0x86
 801ad60:	8011      	strh	r1, [r2, #0]
 801ad62:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
 801ad66:	801a      	strh	r2, [r3, #0]
 801ad68:	bd10      	pop	{r4, pc}

0801ad6a <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_>:
 801ad6a:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 801ad6e:	800b      	strh	r3, [r1, #0]
 801ad70:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 801ad74:	8013      	strh	r3, [r2, #0]
 801ad76:	4770      	bx	lr

0801ad78 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 801ad78:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
 801ad7c:	4299      	cmp	r1, r3
 801ad7e:	bfb8      	it	lt
 801ad80:	4619      	movlt	r1, r3
 801ad82:	f9b0 3086 	ldrsh.w	r3, [r0, #134]	; 0x86
 801ad86:	4299      	cmp	r1, r3
 801ad88:	bfa8      	it	ge
 801ad8a:	4619      	movge	r1, r3
 801ad8c:	f8a0 1088 	strh.w	r1, [r0, #136]	; 0x88
 801ad90:	4770      	bx	lr

0801ad92 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 801ad92:	f8b0 0088 	ldrh.w	r0, [r0, #136]	; 0x88
 801ad96:	4770      	bx	lr

0801ad98 <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 801ad98:	b510      	push	{r4, lr}
 801ad9a:	4604      	mov	r4, r0
 801ad9c:	2190      	movs	r1, #144	; 0x90
 801ad9e:	f00f fcc4 	bl	802a72a <_ZdlPvj>
 801ada2:	4620      	mov	r0, r4
 801ada4:	bd10      	pop	{r4, pc}

0801ada6 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 801ada6:	b510      	push	{r4, lr}
 801ada8:	4604      	mov	r4, r0
 801adaa:	302c      	adds	r0, #44	; 0x2c
 801adac:	f002 fc0c 	bl	801d5c8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801adb0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801adb2:	8123      	strh	r3, [r4, #8]
 801adb4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801adb6:	8163      	strh	r3, [r4, #10]
 801adb8:	bd10      	pop	{r4, pc}
	...

0801adbc <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>:
 801adbc:	4291      	cmp	r1, r2
 801adbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801adc2:	4604      	mov	r4, r0
 801adc4:	460e      	mov	r6, r1
 801adc6:	4615      	mov	r5, r2
 801adc8:	4698      	mov	r8, r3
 801adca:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 801adce:	db05      	blt.n	801addc <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x20>
 801add0:	4b12      	ldr	r3, [pc, #72]	; (801ae1c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x60>)
 801add2:	214d      	movs	r1, #77	; 0x4d
 801add4:	4a12      	ldr	r2, [pc, #72]	; (801ae20 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 801add6:	4813      	ldr	r0, [pc, #76]	; (801ae24 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x68>)
 801add8:	f00f fcd2 	bl	802a780 <__assert_func>
 801addc:	f8a4 1084 	strh.w	r1, [r4, #132]	; 0x84
 801ade0:	f8a4 2086 	strh.w	r2, [r4, #134]	; 0x86
 801ade4:	6803      	ldr	r3, [r0, #0]
 801ade6:	f8b0 1088 	ldrh.w	r1, [r0, #136]	; 0x88
 801adea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801adee:	4798      	blx	r3
 801adf0:	f1b8 0f00 	cmp.w	r8, #0
 801adf4:	d10c      	bne.n	801ae10 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x54>
 801adf6:	1bad      	subs	r5, r5, r6
 801adf8:	f8a4 508a 	strh.w	r5, [r4, #138]	; 0x8a
 801adfc:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
 801ae00:	f8a4 708c 	strh.w	r7, [r4, #140]	; 0x8c
 801ae04:	42bb      	cmp	r3, r7
 801ae06:	d806      	bhi.n	801ae16 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x5a>
 801ae08:	4b07      	ldr	r3, [pc, #28]	; (801ae28 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x6c>)
 801ae0a:	215a      	movs	r1, #90	; 0x5a
 801ae0c:	4a04      	ldr	r2, [pc, #16]	; (801ae20 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x64>)
 801ae0e:	e7e2      	b.n	801add6 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x1a>
 801ae10:	f8a4 808a 	strh.w	r8, [r4, #138]	; 0x8a
 801ae14:	e7f2      	b.n	801adfc <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x40>
 801ae16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ae1a:	bf00      	nop
 801ae1c:	0802d7d7 	.word	0x0802d7d7
 801ae20:	0802d914 	.word	0x0802d914
 801ae24:	0802d7e1 	.word	0x0802d7e1
 801ae28:	0802d838 	.word	0x0802d838

0801ae2c <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 801ae2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ae2e:	4604      	mov	r4, r0
 801ae30:	460d      	mov	r5, r1
 801ae32:	b1b9      	cbz	r1, 801ae64 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x38>
 801ae34:	f8b0 608c 	ldrh.w	r6, [r0, #140]	; 0x8c
 801ae38:	ab01      	add	r3, sp, #4
 801ae3a:	f9b0 0084 	ldrsh.w	r0, [r0, #132]	; 0x84
 801ae3e:	f9b4 2086 	ldrsh.w	r2, [r4, #134]	; 0x86
 801ae42:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
 801ae46:	f8b4 7088 	ldrh.w	r7, [r4, #136]	; 0x88
 801ae4a:	1a12      	subs	r2, r2, r0
 801ae4c:	1b89      	subs	r1, r1, r6
 801ae4e:	1a38      	subs	r0, r7, r0
 801ae50:	f004 f9d7 	bl	801f202 <_ZN8touchgfx6muldivElllRl>
 801ae54:	4629      	mov	r1, r5
 801ae56:	ab01      	add	r3, sp, #4
 801ae58:	f8b4 208a 	ldrh.w	r2, [r4, #138]	; 0x8a
 801ae5c:	4430      	add	r0, r6
 801ae5e:	f004 f9d0 	bl	801f202 <_ZN8touchgfx6muldivElllRl>
 801ae62:	b285      	uxth	r5, r0
 801ae64:	4628      	mov	r0, r5
 801ae66:	b003      	add	sp, #12
 801ae68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801ae6c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 801ae6c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801ae70:	4604      	mov	r4, r0
 801ae72:	2600      	movs	r6, #0
 801ae74:	f7f7 fc9a 	bl	80127ac <_ZN8touchgfx8DrawableC1Ev>
 801ae78:	4b1b      	ldr	r3, [pc, #108]	; (801aee8 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x7c>)
 801ae7a:	4625      	mov	r5, r4
 801ae7c:	f64f 78ff 	movw	r8, #65535	; 0xffff
 801ae80:	af02      	add	r7, sp, #8
 801ae82:	62a6      	str	r6, [r4, #40]	; 0x28
 801ae84:	f845 3b2c 	str.w	r3, [r5], #44
 801ae88:	4628      	mov	r0, r5
 801ae8a:	f827 8d04 	strh.w	r8, [r7, #-4]!
 801ae8e:	f7f7 fc8d 	bl	80127ac <_ZN8touchgfx8DrawableC1Ev>
 801ae92:	4b16      	ldr	r3, [pc, #88]	; (801aeec <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x80>)
 801ae94:	4639      	mov	r1, r7
 801ae96:	f104 0758 	add.w	r7, r4, #88	; 0x58
 801ae9a:	4628      	mov	r0, r5
 801ae9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801ae9e:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
 801aea2:	f884 8054 	strb.w	r8, [r4, #84]	; 0x54
 801aea6:	f002 fb8f 	bl	801d5c8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801aeaa:	4638      	mov	r0, r7
 801aeac:	f7f7 fc7e 	bl	80127ac <_ZN8touchgfx8DrawableC1Ev>
 801aeb0:	4b0f      	ldr	r3, [pc, #60]	; (801aef0 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x84>)
 801aeb2:	4632      	mov	r2, r6
 801aeb4:	4631      	mov	r1, r6
 801aeb6:	65a3      	str	r3, [r4, #88]	; 0x58
 801aeb8:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 801aebc:	4628      	mov	r0, r5
 801aebe:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
 801aec2:	f8a4 608c 	strh.w	r6, [r4, #140]	; 0x8c
 801aec6:	e9c4 3321 	strd	r3, r3, [r4, #132]	; 0x84
 801aeca:	f7f7 fcdb 	bl	8012884 <_ZN8touchgfx8Drawable5setXYEss>
 801aece:	4629      	mov	r1, r5
 801aed0:	4620      	mov	r0, r4
 801aed2:	f000 f8a7 	bl	801b024 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801aed6:	4620      	mov	r0, r4
 801aed8:	4639      	mov	r1, r7
 801aeda:	f000 f8a3 	bl	801b024 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801aede:	4620      	mov	r0, r4
 801aee0:	b002      	add	sp, #8
 801aee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aee6:	bf00      	nop
 801aee8:	0802d85c 	.word	0x0802d85c
 801aeec:	0802ead0 	.word	0x0802ead0
 801aef0:	0802da48 	.word	0x0802da48

0801aef4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 801aef4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801aef6:	2000      	movs	r0, #0
 801aef8:	b12b      	cbz	r3, 801af06 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 801aefa:	b920      	cbnz	r0, 801af06 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 801aefc:	1a5a      	subs	r2, r3, r1
 801aefe:	699b      	ldr	r3, [r3, #24]
 801af00:	4250      	negs	r0, r2
 801af02:	4150      	adcs	r0, r2
 801af04:	e7f8      	b.n	801aef8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 801af06:	4770      	bx	lr

0801af08 <_ZN8touchgfx9Container9removeAllEv>:
 801af08:	2200      	movs	r2, #0
 801af0a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801af0c:	b123      	cbz	r3, 801af18 <_ZN8touchgfx9Container9removeAllEv+0x10>
 801af0e:	6999      	ldr	r1, [r3, #24]
 801af10:	6281      	str	r1, [r0, #40]	; 0x28
 801af12:	e9c3 2205 	strd	r2, r2, [r3, #20]
 801af16:	e7f8      	b.n	801af0a <_ZN8touchgfx9Container9removeAllEv+0x2>
 801af18:	4770      	bx	lr

0801af1a <_ZN8touchgfx9Container6unlinkEv>:
 801af1a:	2300      	movs	r3, #0
 801af1c:	6283      	str	r3, [r0, #40]	; 0x28
 801af1e:	4770      	bx	lr

0801af20 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 801af20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af24:	461f      	mov	r7, r3
 801af26:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 801af2a:	460d      	mov	r5, r1
 801af2c:	4616      	mov	r6, r2
 801af2e:	b103      	cbz	r3, 801af32 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 801af30:	6038      	str	r0, [r7, #0]
 801af32:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801af34:	b314      	cbz	r4, 801af7c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 801af36:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801af3a:	b1eb      	cbz	r3, 801af78 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801af3c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801af40:	428d      	cmp	r5, r1
 801af42:	db19      	blt.n	801af78 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801af44:	b289      	uxth	r1, r1
 801af46:	8923      	ldrh	r3, [r4, #8]
 801af48:	440b      	add	r3, r1
 801af4a:	b21b      	sxth	r3, r3
 801af4c:	429d      	cmp	r5, r3
 801af4e:	da13      	bge.n	801af78 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801af50:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801af54:	4296      	cmp	r6, r2
 801af56:	db0f      	blt.n	801af78 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801af58:	b292      	uxth	r2, r2
 801af5a:	8963      	ldrh	r3, [r4, #10]
 801af5c:	4413      	add	r3, r2
 801af5e:	b21b      	sxth	r3, r3
 801af60:	429e      	cmp	r6, r3
 801af62:	da09      	bge.n	801af78 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801af64:	6823      	ldr	r3, [r4, #0]
 801af66:	1ab2      	subs	r2, r6, r2
 801af68:	1a69      	subs	r1, r5, r1
 801af6a:	4620      	mov	r0, r4
 801af6c:	f8d3 801c 	ldr.w	r8, [r3, #28]
 801af70:	b212      	sxth	r2, r2
 801af72:	463b      	mov	r3, r7
 801af74:	b209      	sxth	r1, r1
 801af76:	47c0      	blx	r8
 801af78:	69a4      	ldr	r4, [r4, #24]
 801af7a:	e7db      	b.n	801af34 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 801af7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801af80 <_ZNK8touchgfx9Container12getSolidRectEv>:
 801af80:	2200      	movs	r2, #0
 801af82:	8002      	strh	r2, [r0, #0]
 801af84:	8042      	strh	r2, [r0, #2]
 801af86:	8082      	strh	r2, [r0, #4]
 801af88:	80c2      	strh	r2, [r0, #6]
 801af8a:	4770      	bx	lr

0801af8c <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 801af8c:	b570      	push	{r4, r5, r6, lr}
 801af8e:	460d      	mov	r5, r1
 801af90:	4616      	mov	r6, r2
 801af92:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801af94:	b13c      	cbz	r4, 801afa6 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 801af96:	6823      	ldr	r3, [r4, #0]
 801af98:	4620      	mov	r0, r4
 801af9a:	4632      	mov	r2, r6
 801af9c:	4629      	mov	r1, r5
 801af9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801afa0:	4798      	blx	r3
 801afa2:	69a4      	ldr	r4, [r4, #24]
 801afa4:	e7f6      	b.n	801af94 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 801afa6:	bd70      	pop	{r4, r5, r6, pc}

0801afa8 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 801afa8:	b538      	push	{r3, r4, r5, lr}
 801afaa:	460d      	mov	r5, r1
 801afac:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801afae:	b134      	cbz	r4, 801afbe <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 801afb0:	682b      	ldr	r3, [r5, #0]
 801afb2:	4621      	mov	r1, r4
 801afb4:	4628      	mov	r0, r5
 801afb6:	689b      	ldr	r3, [r3, #8]
 801afb8:	4798      	blx	r3
 801afba:	69a4      	ldr	r4, [r4, #24]
 801afbc:	e7f7      	b.n	801afae <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 801afbe:	bd38      	pop	{r3, r4, r5, pc}

0801afc0 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 801afc0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801afc2:	b19b      	cbz	r3, 801afec <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801afc4:	428b      	cmp	r3, r1
 801afc6:	d109      	bne.n	801afdc <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 801afc8:	699a      	ldr	r2, [r3, #24]
 801afca:	2100      	movs	r1, #0
 801afcc:	6159      	str	r1, [r3, #20]
 801afce:	6282      	str	r2, [r0, #40]	; 0x28
 801afd0:	b902      	cbnz	r2, 801afd4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 801afd2:	4770      	bx	lr
 801afd4:	6199      	str	r1, [r3, #24]
 801afd6:	4770      	bx	lr
 801afd8:	4613      	mov	r3, r2
 801afda:	b13a      	cbz	r2, 801afec <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801afdc:	699a      	ldr	r2, [r3, #24]
 801afde:	428a      	cmp	r2, r1
 801afe0:	d1fa      	bne.n	801afd8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 801afe2:	698a      	ldr	r2, [r1, #24]
 801afe4:	619a      	str	r2, [r3, #24]
 801afe6:	2300      	movs	r3, #0
 801afe8:	e9c1 3305 	strd	r3, r3, [r1, #20]
 801afec:	4770      	bx	lr

0801afee <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 801afee:	b410      	push	{r4}
 801aff0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801aff2:	4604      	mov	r4, r0
 801aff4:	b92b      	cbnz	r3, 801b002 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 801aff6:	6803      	ldr	r3, [r0, #0]
 801aff8:	4611      	mov	r1, r2
 801affa:	f85d 4b04 	ldr.w	r4, [sp], #4
 801affe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b000:	4718      	bx	r3
 801b002:	b941      	cbnz	r1, 801b016 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 801b004:	6193      	str	r3, [r2, #24]
 801b006:	6282      	str	r2, [r0, #40]	; 0x28
 801b008:	6154      	str	r4, [r2, #20]
 801b00a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b00e:	4770      	bx	lr
 801b010:	4603      	mov	r3, r0
 801b012:	2800      	cmp	r0, #0
 801b014:	d0f9      	beq.n	801b00a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 801b016:	4299      	cmp	r1, r3
 801b018:	6998      	ldr	r0, [r3, #24]
 801b01a:	d1f9      	bne.n	801b010 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 801b01c:	6190      	str	r0, [r2, #24]
 801b01e:	618a      	str	r2, [r1, #24]
 801b020:	e7f2      	b.n	801b008 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

0801b024 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 801b024:	4288      	cmp	r0, r1
 801b026:	b508      	push	{r3, lr}
 801b028:	d105      	bne.n	801b036 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 801b02a:	4b11      	ldr	r3, [pc, #68]	; (801b070 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 801b02c:	2123      	movs	r1, #35	; 0x23
 801b02e:	4a11      	ldr	r2, [pc, #68]	; (801b074 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801b030:	4811      	ldr	r0, [pc, #68]	; (801b078 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 801b032:	f00f fba5 	bl	802a780 <__assert_func>
 801b036:	694b      	ldr	r3, [r1, #20]
 801b038:	b11b      	cbz	r3, 801b042 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 801b03a:	4b10      	ldr	r3, [pc, #64]	; (801b07c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 801b03c:	2124      	movs	r1, #36	; 0x24
 801b03e:	4a0d      	ldr	r2, [pc, #52]	; (801b074 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801b040:	e7f6      	b.n	801b030 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 801b042:	e9c1 0305 	strd	r0, r3, [r1, #20]
 801b046:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801b048:	b913      	cbnz	r3, 801b050 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 801b04a:	6281      	str	r1, [r0, #40]	; 0x28
 801b04c:	bd08      	pop	{r3, pc}
 801b04e:	4613      	mov	r3, r2
 801b050:	699a      	ldr	r2, [r3, #24]
 801b052:	b12a      	cbz	r2, 801b060 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 801b054:	428b      	cmp	r3, r1
 801b056:	d1fa      	bne.n	801b04e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 801b058:	4b09      	ldr	r3, [pc, #36]	; (801b080 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 801b05a:	2135      	movs	r1, #53	; 0x35
 801b05c:	4a05      	ldr	r2, [pc, #20]	; (801b074 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801b05e:	e7e7      	b.n	801b030 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 801b060:	428b      	cmp	r3, r1
 801b062:	d103      	bne.n	801b06c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 801b064:	4b06      	ldr	r3, [pc, #24]	; (801b080 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 801b066:	2138      	movs	r1, #56	; 0x38
 801b068:	4a02      	ldr	r2, [pc, #8]	; (801b074 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801b06a:	e7e1      	b.n	801b030 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 801b06c:	6199      	str	r1, [r3, #24]
 801b06e:	e7ed      	b.n	801b04c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 801b070:	0802d975 	.word	0x0802d975
 801b074:	0802dacc 	.word	0x0802dacc
 801b078:	0802d9a1 	.word	0x0802d9a1
 801b07c:	0802d9d4 	.word	0x0802d9d4
 801b080:	0802da0a 	.word	0x0802da0a

0801b084 <_ZN8touchgfx4RectaNERKS0_>:
 801b084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b088:	888b      	ldrh	r3, [r1, #4]
 801b08a:	f9b1 9000 	ldrsh.w	r9, [r1]
 801b08e:	f9b0 a000 	ldrsh.w	sl, [r0]
 801b092:	444b      	add	r3, r9
 801b094:	b29b      	uxth	r3, r3
 801b096:	fa0f f883 	sxth.w	r8, r3
 801b09a:	45c2      	cmp	sl, r8
 801b09c:	da30      	bge.n	801b100 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 801b09e:	8882      	ldrh	r2, [r0, #4]
 801b0a0:	4452      	add	r2, sl
 801b0a2:	b292      	uxth	r2, r2
 801b0a4:	fa0f fe82 	sxth.w	lr, r2
 801b0a8:	45f1      	cmp	r9, lr
 801b0aa:	da29      	bge.n	801b100 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 801b0ac:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801b0b0:	88cc      	ldrh	r4, [r1, #6]
 801b0b2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801b0b6:	442c      	add	r4, r5
 801b0b8:	b224      	sxth	r4, r4
 801b0ba:	42a6      	cmp	r6, r4
 801b0bc:	da20      	bge.n	801b100 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 801b0be:	88c7      	ldrh	r7, [r0, #6]
 801b0c0:	4437      	add	r7, r6
 801b0c2:	b2bf      	uxth	r7, r7
 801b0c4:	fa0f fc87 	sxth.w	ip, r7
 801b0c8:	4565      	cmp	r5, ip
 801b0ca:	da19      	bge.n	801b100 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 801b0cc:	45ca      	cmp	sl, r9
 801b0ce:	4654      	mov	r4, sl
 801b0d0:	bfb8      	it	lt
 801b0d2:	464c      	movlt	r4, r9
 801b0d4:	42b5      	cmp	r5, r6
 801b0d6:	bfb8      	it	lt
 801b0d8:	4635      	movlt	r5, r6
 801b0da:	45f0      	cmp	r8, lr
 801b0dc:	bfc8      	it	gt
 801b0de:	4613      	movgt	r3, r2
 801b0e0:	1b1b      	subs	r3, r3, r4
 801b0e2:	8083      	strh	r3, [r0, #4]
 801b0e4:	88ca      	ldrh	r2, [r1, #6]
 801b0e6:	884b      	ldrh	r3, [r1, #2]
 801b0e8:	8004      	strh	r4, [r0, #0]
 801b0ea:	4413      	add	r3, r2
 801b0ec:	8045      	strh	r5, [r0, #2]
 801b0ee:	b29b      	uxth	r3, r3
 801b0f0:	b21a      	sxth	r2, r3
 801b0f2:	4594      	cmp	ip, r2
 801b0f4:	bfb8      	it	lt
 801b0f6:	463b      	movlt	r3, r7
 801b0f8:	1b5b      	subs	r3, r3, r5
 801b0fa:	80c3      	strh	r3, [r0, #6]
 801b0fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b100:	2300      	movs	r3, #0
 801b102:	8003      	strh	r3, [r0, #0]
 801b104:	8043      	strh	r3, [r0, #2]
 801b106:	8083      	strh	r3, [r0, #4]
 801b108:	80c3      	strh	r3, [r0, #6]
 801b10a:	e7f7      	b.n	801b0fc <_ZN8touchgfx4RectaNERKS0_+0x78>

0801b10c <_ZNK8touchgfx4Rect7isEmptyEv>:
 801b10c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801b110:	b12b      	cbz	r3, 801b11e <_ZNK8touchgfx4Rect7isEmptyEv+0x12>
 801b112:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801b116:	fab0 f080 	clz	r0, r0
 801b11a:	0940      	lsrs	r0, r0, #5
 801b11c:	4770      	bx	lr
 801b11e:	2001      	movs	r0, #1
 801b120:	4770      	bx	lr

0801b122 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 801b122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b126:	2300      	movs	r3, #0
 801b128:	4604      	mov	r4, r0
 801b12a:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801b12c:	8003      	strh	r3, [r0, #0]
 801b12e:	8043      	strh	r3, [r0, #2]
 801b130:	8083      	strh	r3, [r0, #4]
 801b132:	80c3      	strh	r3, [r0, #6]
 801b134:	2d00      	cmp	r5, #0
 801b136:	d040      	beq.n	801b1ba <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 801b138:	1d28      	adds	r0, r5, #4
 801b13a:	f7ff ffe7 	bl	801b10c <_ZNK8touchgfx4Rect7isEmptyEv>
 801b13e:	b988      	cbnz	r0, 801b164 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801b140:	4620      	mov	r0, r4
 801b142:	f7ff ffe3 	bl	801b10c <_ZNK8touchgfx4Rect7isEmptyEv>
 801b146:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801b14a:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801b14e:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 801b152:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 801b156:	b138      	cbz	r0, 801b168 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 801b158:	8022      	strh	r2, [r4, #0]
 801b15a:	8063      	strh	r3, [r4, #2]
 801b15c:	f8a4 e004 	strh.w	lr, [r4, #4]
 801b160:	f8a4 c006 	strh.w	ip, [r4, #6]
 801b164:	69ad      	ldr	r5, [r5, #24]
 801b166:	e7e5      	b.n	801b134 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 801b168:	f9b4 0000 	ldrsh.w	r0, [r4]
 801b16c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801b170:	4290      	cmp	r0, r2
 801b172:	4607      	mov	r7, r0
 801b174:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 801b178:	460e      	mov	r6, r1
 801b17a:	bfa8      	it	ge
 801b17c:	4617      	movge	r7, r2
 801b17e:	4299      	cmp	r1, r3
 801b180:	4472      	add	r2, lr
 801b182:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 801b186:	bfa8      	it	ge
 801b188:	461e      	movge	r6, r3
 801b18a:	4440      	add	r0, r8
 801b18c:	4471      	add	r1, lr
 801b18e:	4463      	add	r3, ip
 801b190:	b200      	sxth	r0, r0
 801b192:	8027      	strh	r7, [r4, #0]
 801b194:	b212      	sxth	r2, r2
 801b196:	8066      	strh	r6, [r4, #2]
 801b198:	b209      	sxth	r1, r1
 801b19a:	b21b      	sxth	r3, r3
 801b19c:	4290      	cmp	r0, r2
 801b19e:	bfac      	ite	ge
 801b1a0:	ebc7 0200 	rsbge	r2, r7, r0
 801b1a4:	ebc7 0202 	rsblt	r2, r7, r2
 801b1a8:	4299      	cmp	r1, r3
 801b1aa:	bfac      	ite	ge
 801b1ac:	ebc6 0301 	rsbge	r3, r6, r1
 801b1b0:	ebc6 0303 	rsblt	r3, r6, r3
 801b1b4:	80a2      	strh	r2, [r4, #4]
 801b1b6:	80e3      	strh	r3, [r4, #6]
 801b1b8:	e7d4      	b.n	801b164 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801b1ba:	4620      	mov	r0, r4
 801b1bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b1c0 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 801b1c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801b1c4:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801b1c8:	b383      	cbz	r3, 801b22c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801b1ca:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801b1cc:	b374      	cbz	r4, 801b22c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801b1ce:	f9b1 5000 	ldrsh.w	r5, [r1]
 801b1d2:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 801b1d6:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 801b1da:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 801b1de:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801b1e2:	b303      	cbz	r3, 801b226 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801b1e4:	4668      	mov	r0, sp
 801b1e6:	1d21      	adds	r1, r4, #4
 801b1e8:	f8ad 5000 	strh.w	r5, [sp]
 801b1ec:	f8ad 6002 	strh.w	r6, [sp, #2]
 801b1f0:	f8ad 7004 	strh.w	r7, [sp, #4]
 801b1f4:	f8ad 8006 	strh.w	r8, [sp, #6]
 801b1f8:	f7ff ff44 	bl	801b084 <_ZN8touchgfx4RectaNERKS0_>
 801b1fc:	4668      	mov	r0, sp
 801b1fe:	f7ff ff85 	bl	801b10c <_ZNK8touchgfx4Rect7isEmptyEv>
 801b202:	b980      	cbnz	r0, 801b226 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801b204:	f8bd 3000 	ldrh.w	r3, [sp]
 801b208:	4669      	mov	r1, sp
 801b20a:	88a2      	ldrh	r2, [r4, #4]
 801b20c:	4620      	mov	r0, r4
 801b20e:	1a9b      	subs	r3, r3, r2
 801b210:	88e2      	ldrh	r2, [r4, #6]
 801b212:	f8ad 3000 	strh.w	r3, [sp]
 801b216:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b21a:	1a9b      	subs	r3, r3, r2
 801b21c:	f8ad 3002 	strh.w	r3, [sp, #2]
 801b220:	6823      	ldr	r3, [r4, #0]
 801b222:	689b      	ldr	r3, [r3, #8]
 801b224:	4798      	blx	r3
 801b226:	69a4      	ldr	r4, [r4, #24]
 801b228:	2c00      	cmp	r4, #0
 801b22a:	d1d8      	bne.n	801b1de <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 801b22c:	b002      	add	sp, #8
 801b22e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b232 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 801b232:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b234:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801b238:	460d      	mov	r5, r1
 801b23a:	4616      	mov	r6, r2
 801b23c:	b323      	cbz	r3, 801b288 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801b23e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801b240:	b314      	cbz	r4, 801b288 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801b242:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801b246:	b1eb      	cbz	r3, 801b284 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801b248:	6828      	ldr	r0, [r5, #0]
 801b24a:	466b      	mov	r3, sp
 801b24c:	6869      	ldr	r1, [r5, #4]
 801b24e:	c303      	stmia	r3!, {r0, r1}
 801b250:	4668      	mov	r0, sp
 801b252:	1d21      	adds	r1, r4, #4
 801b254:	f7ff ff16 	bl	801b084 <_ZN8touchgfx4RectaNERKS0_>
 801b258:	4668      	mov	r0, sp
 801b25a:	f7ff ff57 	bl	801b10c <_ZNK8touchgfx4Rect7isEmptyEv>
 801b25e:	b988      	cbnz	r0, 801b284 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801b260:	f8bd 3000 	ldrh.w	r3, [sp]
 801b264:	4669      	mov	r1, sp
 801b266:	88a2      	ldrh	r2, [r4, #4]
 801b268:	4620      	mov	r0, r4
 801b26a:	1a9b      	subs	r3, r3, r2
 801b26c:	88e2      	ldrh	r2, [r4, #6]
 801b26e:	f8ad 3000 	strh.w	r3, [sp]
 801b272:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b276:	1a9b      	subs	r3, r3, r2
 801b278:	4632      	mov	r2, r6
 801b27a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801b27e:	6823      	ldr	r3, [r4, #0]
 801b280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b282:	4798      	blx	r3
 801b284:	69a4      	ldr	r4, [r4, #24]
 801b286:	e7db      	b.n	801b240 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 801b288:	b002      	add	sp, #8
 801b28a:	bd70      	pop	{r4, r5, r6, pc}

0801b28c <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 801b28c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801b290:	4770      	bx	lr

0801b292 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 801b292:	6803      	ldr	r3, [r0, #0]
 801b294:	b513      	push	{r0, r1, r4, lr}
 801b296:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 801b29a:	2300      	movs	r3, #0
 801b29c:	e9cd 3300 	strd	r3, r3, [sp]
 801b2a0:	466b      	mov	r3, sp
 801b2a2:	47a0      	blx	r4
 801b2a4:	b002      	add	sp, #8
 801b2a6:	bd10      	pop	{r4, pc}

0801b2a8 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 801b2a8:	2301      	movs	r3, #1
 801b2aa:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801b2ae:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801b2b2:	4770      	bx	lr

0801b2b4 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801b2b4:	2301      	movs	r3, #1
 801b2b6:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801b2ba:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801b2be:	4770      	bx	lr

0801b2c0 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 801b2c0:	6843      	ldr	r3, [r0, #4]
 801b2c2:	2201      	movs	r2, #1
 801b2c4:	725a      	strb	r2, [r3, #9]
 801b2c6:	6840      	ldr	r0, [r0, #4]
 801b2c8:	6803      	ldr	r3, [r0, #0]
 801b2ca:	691b      	ldr	r3, [r3, #16]
 801b2cc:	4718      	bx	r3

0801b2ce <_ZN8touchgfx3HAL8flushDMAEv>:
 801b2ce:	6840      	ldr	r0, [r0, #4]
 801b2d0:	6803      	ldr	r3, [r0, #0]
 801b2d2:	689b      	ldr	r3, [r3, #8]
 801b2d4:	4718      	bx	r3
	...

0801b2d8 <_ZN8touchgfx3HAL10beginFrameEv>:
 801b2d8:	4b04      	ldr	r3, [pc, #16]	; (801b2ec <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801b2da:	781b      	ldrb	r3, [r3, #0]
 801b2dc:	b123      	cbz	r3, 801b2e8 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801b2de:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 801b2e2:	f080 0001 	eor.w	r0, r0, #1
 801b2e6:	4770      	bx	lr
 801b2e8:	2001      	movs	r0, #1
 801b2ea:	4770      	bx	lr
 801b2ec:	2000bf64 	.word	0x2000bf64

0801b2f0 <_ZN8touchgfx3HAL8endFrameEv>:
 801b2f0:	b510      	push	{r4, lr}
 801b2f2:	4604      	mov	r4, r0
 801b2f4:	6840      	ldr	r0, [r0, #4]
 801b2f6:	6803      	ldr	r3, [r0, #0]
 801b2f8:	689b      	ldr	r3, [r3, #8]
 801b2fa:	4798      	blx	r3
 801b2fc:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 801b300:	b113      	cbz	r3, 801b308 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 801b302:	2301      	movs	r3, #1
 801b304:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801b308:	bd10      	pop	{r4, pc}

0801b30a <_ZN8touchgfx3HAL9taskEntryEv>:
 801b30a:	b508      	push	{r3, lr}
 801b30c:	6803      	ldr	r3, [r0, #0]
 801b30e:	4604      	mov	r4, r0
 801b310:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801b312:	4798      	blx	r3
 801b314:	6823      	ldr	r3, [r4, #0]
 801b316:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b318:	4620      	mov	r0, r4
 801b31a:	4798      	blx	r3
 801b31c:	f7fd fc34 	bl	8018b88 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 801b320:	6823      	ldr	r3, [r4, #0]
 801b322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b324:	e7f8      	b.n	801b318 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

0801b328 <_ZN8touchgfx3HAL4tickEv>:
 801b328:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801b32a:	6803      	ldr	r3, [r0, #0]
 801b32c:	4604      	mov	r4, r0
 801b32e:	4d5c      	ldr	r5, [pc, #368]	; (801b4a0 <_ZN8touchgfx3HAL4tickEv+0x178>)
 801b330:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b334:	4798      	blx	r3
 801b336:	2800      	cmp	r0, #0
 801b338:	f000 8097 	beq.w	801b46a <_ZN8touchgfx3HAL4tickEv+0x142>
 801b33c:	2001      	movs	r0, #1
 801b33e:	2600      	movs	r6, #0
 801b340:	f7fd f906 	bl	8018550 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801b344:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 801b348:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 801b34c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801b350:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 801b354:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 801b358:	b133      	cbz	r3, 801b368 <_ZN8touchgfx3HAL4tickEv+0x40>
 801b35a:	6823      	ldr	r3, [r4, #0]
 801b35c:	4620      	mov	r0, r4
 801b35e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801b362:	4798      	blx	r3
 801b364:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 801b368:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801b36c:	2601      	movs	r6, #1
 801b36e:	6862      	ldr	r2, [r4, #4]
 801b370:	f083 0301 	eor.w	r3, r3, #1
 801b374:	702e      	strb	r6, [r5, #0]
 801b376:	7253      	strb	r3, [r2, #9]
 801b378:	f003 f9d4 	bl	801e724 <_ZN8touchgfx11Application11getInstanceEv>
 801b37c:	6803      	ldr	r3, [r0, #0]
 801b37e:	4631      	mov	r1, r6
 801b380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b382:	4798      	blx	r3
 801b384:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801b388:	b90b      	cbnz	r3, 801b38e <_ZN8touchgfx3HAL4tickEv+0x66>
 801b38a:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 801b38e:	f003 f9c9 	bl	801e724 <_ZN8touchgfx11Application11getInstanceEv>
 801b392:	6803      	ldr	r3, [r0, #0]
 801b394:	695b      	ldr	r3, [r3, #20]
 801b396:	4798      	blx	r3
 801b398:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b39a:	6803      	ldr	r3, [r0, #0]
 801b39c:	691b      	ldr	r3, [r3, #16]
 801b39e:	4798      	blx	r3
 801b3a0:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801b3a4:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 801b3a8:	3b01      	subs	r3, #1
 801b3aa:	b2db      	uxtb	r3, r3
 801b3ac:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801b3b0:	b10a      	cbz	r2, 801b3b6 <_ZN8touchgfx3HAL4tickEv+0x8e>
 801b3b2:	2b00      	cmp	r3, #0
 801b3b4:	d1eb      	bne.n	801b38e <_ZN8touchgfx3HAL4tickEv+0x66>
 801b3b6:	4a3b      	ldr	r2, [pc, #236]	; (801b4a4 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 801b3b8:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 801b3bc:	7813      	ldrb	r3, [r2, #0]
 801b3be:	3301      	adds	r3, #1
 801b3c0:	b25b      	sxtb	r3, r3
 801b3c2:	4299      	cmp	r1, r3
 801b3c4:	7013      	strb	r3, [r2, #0]
 801b3c6:	dc10      	bgt.n	801b3ea <_ZN8touchgfx3HAL4tickEv+0xc2>
 801b3c8:	2300      	movs	r3, #0
 801b3ca:	68e0      	ldr	r0, [r4, #12]
 801b3cc:	a902      	add	r1, sp, #8
 801b3ce:	7013      	strb	r3, [r2, #0]
 801b3d0:	aa03      	add	r2, sp, #12
 801b3d2:	6803      	ldr	r3, [r0, #0]
 801b3d4:	68db      	ldr	r3, [r3, #12]
 801b3d6:	4798      	blx	r3
 801b3d8:	6823      	ldr	r3, [r4, #0]
 801b3da:	2800      	cmp	r0, #0
 801b3dc:	d051      	beq.n	801b482 <_ZN8touchgfx3HAL4tickEv+0x15a>
 801b3de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801b3e2:	4620      	mov	r0, r4
 801b3e4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801b3e8:	4798      	blx	r3
 801b3ea:	2300      	movs	r3, #0
 801b3ec:	6960      	ldr	r0, [r4, #20]
 801b3ee:	f88d 3007 	strb.w	r3, [sp, #7]
 801b3f2:	b158      	cbz	r0, 801b40c <_ZN8touchgfx3HAL4tickEv+0xe4>
 801b3f4:	6803      	ldr	r3, [r0, #0]
 801b3f6:	f10d 0107 	add.w	r1, sp, #7
 801b3fa:	68db      	ldr	r3, [r3, #12]
 801b3fc:	4798      	blx	r3
 801b3fe:	b128      	cbz	r0, 801b40c <_ZN8touchgfx3HAL4tickEv+0xe4>
 801b400:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b402:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801b406:	6803      	ldr	r3, [r0, #0]
 801b408:	68db      	ldr	r3, [r3, #12]
 801b40a:	4798      	blx	r3
 801b40c:	f104 001c 	add.w	r0, r4, #28
 801b410:	f00d fcea 	bl	8028de8 <_ZN8touchgfx8Gestures4tickEv>
 801b414:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 801b418:	b30b      	cbz	r3, 801b45e <_ZN8touchgfx3HAL4tickEv+0x136>
 801b41a:	6920      	ldr	r0, [r4, #16]
 801b41c:	6803      	ldr	r3, [r0, #0]
 801b41e:	691b      	ldr	r3, [r3, #16]
 801b420:	4798      	blx	r3
 801b422:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801b424:	4606      	mov	r6, r0
 801b426:	b903      	cbnz	r3, 801b42a <_ZN8touchgfx3HAL4tickEv+0x102>
 801b428:	6720      	str	r0, [r4, #112]	; 0x70
 801b42a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801b42c:	4a1e      	ldr	r2, [pc, #120]	; (801b4a8 <_ZN8touchgfx3HAL4tickEv+0x180>)
 801b42e:	1af3      	subs	r3, r6, r3
 801b430:	4293      	cmp	r3, r2
 801b432:	d914      	bls.n	801b45e <_ZN8touchgfx3HAL4tickEv+0x136>
 801b434:	6920      	ldr	r0, [r4, #16]
 801b436:	6803      	ldr	r3, [r0, #0]
 801b438:	699b      	ldr	r3, [r3, #24]
 801b43a:	4798      	blx	r3
 801b43c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801b43e:	2264      	movs	r2, #100	; 0x64
 801b440:	1af3      	subs	r3, r6, r3
 801b442:	fbb3 f3f2 	udiv	r3, r3, r2
 801b446:	fbb0 f0f3 	udiv	r0, r0, r3
 801b44a:	2800      	cmp	r0, #0
 801b44c:	dc1e      	bgt.n	801b48c <_ZN8touchgfx3HAL4tickEv+0x164>
 801b44e:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 801b452:	6920      	ldr	r0, [r4, #16]
 801b454:	2100      	movs	r1, #0
 801b456:	6803      	ldr	r3, [r0, #0]
 801b458:	69db      	ldr	r3, [r3, #28]
 801b45a:	4798      	blx	r3
 801b45c:	6726      	str	r6, [r4, #112]	; 0x70
 801b45e:	f003 f961 	bl	801e724 <_ZN8touchgfx11Application11getInstanceEv>
 801b462:	6803      	ldr	r3, [r0, #0]
 801b464:	2100      	movs	r1, #0
 801b466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b468:	4798      	blx	r3
 801b46a:	6823      	ldr	r3, [r4, #0]
 801b46c:	4620      	mov	r0, r4
 801b46e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801b472:	4798      	blx	r3
 801b474:	2001      	movs	r0, #1
 801b476:	f7fd f876 	bl	8018566 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801b47a:	2300      	movs	r3, #0
 801b47c:	702b      	strb	r3, [r5, #0]
 801b47e:	b004      	add	sp, #16
 801b480:	bd70      	pop	{r4, r5, r6, pc}
 801b482:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801b486:	4620      	mov	r0, r4
 801b488:	4798      	blx	r3
 801b48a:	e7ae      	b.n	801b3ea <_ZN8touchgfx3HAL4tickEv+0xc2>
 801b48c:	2863      	cmp	r0, #99	; 0x63
 801b48e:	bfcb      	itete	gt
 801b490:	2300      	movgt	r3, #0
 801b492:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801b496:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 801b49a:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 801b49e:	e7d8      	b.n	801b452 <_ZN8touchgfx3HAL4tickEv+0x12a>
 801b4a0:	2000bf6c 	.word	0x2000bf6c
 801b4a4:	2000bf6d 	.word	0x2000bf6d
 801b4a8:	05f5e100 	.word	0x05f5e100

0801b4ac <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 801b4ac:	f7fd bb0c 	b.w	8018ac8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801b4b0 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 801b4b0:	6581      	str	r1, [r0, #88]	; 0x58
 801b4b2:	301c      	adds	r0, #28
 801b4b4:	f00d bc96 	b.w	8028de4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0801b4b8 <_ZN8touchgfx3HAL5touchEll>:
 801b4b8:	b530      	push	{r4, r5, lr}
 801b4ba:	b087      	sub	sp, #28
 801b4bc:	4604      	mov	r4, r0
 801b4be:	a804      	add	r0, sp, #16
 801b4c0:	e9cd 1204 	strd	r1, r2, [sp, #16]
 801b4c4:	f002 ff32 	bl	801e32c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 801b4c8:	9b04      	ldr	r3, [sp, #16]
 801b4ca:	a906      	add	r1, sp, #24
 801b4cc:	a803      	add	r0, sp, #12
 801b4ce:	f8ad 300c 	strh.w	r3, [sp, #12]
 801b4d2:	9b05      	ldr	r3, [sp, #20]
 801b4d4:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 801b4d8:	f002 ff76 	bl	801e3c8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 801b4dc:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 801b4e0:	f104 001c 	add.w	r0, r4, #28
 801b4e4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801b4e8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801b4ec:	b189      	cbz	r1, 801b512 <_ZN8touchgfx3HAL5touchEll+0x5a>
 801b4ee:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 801b4f2:	9300      	str	r3, [sp, #0]
 801b4f4:	4613      	mov	r3, r2
 801b4f6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801b4fa:	462a      	mov	r2, r5
 801b4fc:	f00d fc82 	bl	8028e04 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 801b500:	b128      	cbz	r0, 801b50e <_ZN8touchgfx3HAL5touchEll+0x56>
 801b502:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801b506:	65e3      	str	r3, [r4, #92]	; 0x5c
 801b508:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801b50c:	6623      	str	r3, [r4, #96]	; 0x60
 801b50e:	b007      	add	sp, #28
 801b510:	bd30      	pop	{r4, r5, pc}
 801b512:	f00d fcbb 	bl	8028e8c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801b516:	2301      	movs	r3, #1
 801b518:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801b51c:	e7f1      	b.n	801b502 <_ZN8touchgfx3HAL5touchEll+0x4a>

0801b51e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 801b51e:	b570      	push	{r4, r5, r6, lr}
 801b520:	2b00      	cmp	r3, #0
 801b522:	d050      	beq.n	801b5c6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 801b524:	ea81 0002 	eor.w	r0, r1, r2
 801b528:	07c6      	lsls	r6, r0, #31
 801b52a:	d508      	bpl.n	801b53e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 801b52c:	3a01      	subs	r2, #1
 801b52e:	18cc      	adds	r4, r1, r3
 801b530:	42a1      	cmp	r1, r4
 801b532:	d048      	beq.n	801b5c6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 801b534:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801b538:	f801 0b01 	strb.w	r0, [r1], #1
 801b53c:	e7f8      	b.n	801b530 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 801b53e:	07d5      	lsls	r5, r2, #31
 801b540:	bf42      	ittt	mi
 801b542:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801b546:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801b54a:	f801 0b01 	strbmi.w	r0, [r1], #1
 801b54e:	2b01      	cmp	r3, #1
 801b550:	d915      	bls.n	801b57e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801b552:	ea82 0001 	eor.w	r0, r2, r1
 801b556:	0784      	lsls	r4, r0, #30
 801b558:	d02d      	beq.n	801b5b6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 801b55a:	1e94      	subs	r4, r2, #2
 801b55c:	4608      	mov	r0, r1
 801b55e:	18ce      	adds	r6, r1, r3
 801b560:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 801b564:	f820 5b02 	strh.w	r5, [r0], #2
 801b568:	1a35      	subs	r5, r6, r0
 801b56a:	2d01      	cmp	r5, #1
 801b56c:	d8f8      	bhi.n	801b560 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 801b56e:	1e98      	subs	r0, r3, #2
 801b570:	f003 0301 	and.w	r3, r3, #1
 801b574:	f020 0001 	bic.w	r0, r0, #1
 801b578:	3002      	adds	r0, #2
 801b57a:	4401      	add	r1, r0
 801b57c:	4402      	add	r2, r0
 801b57e:	1f14      	subs	r4, r2, #4
 801b580:	4608      	mov	r0, r1
 801b582:	18ce      	adds	r6, r1, r3
 801b584:	1a35      	subs	r5, r6, r0
 801b586:	2d03      	cmp	r5, #3
 801b588:	d810      	bhi.n	801b5ac <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 801b58a:	089c      	lsrs	r4, r3, #2
 801b58c:	00a0      	lsls	r0, r4, #2
 801b58e:	4401      	add	r1, r0
 801b590:	3801      	subs	r0, #1
 801b592:	4402      	add	r2, r0
 801b594:	f06f 0003 	mvn.w	r0, #3
 801b598:	fb00 3404 	mla	r4, r0, r4, r3
 801b59c:	440c      	add	r4, r1
 801b59e:	42a1      	cmp	r1, r4
 801b5a0:	d011      	beq.n	801b5c6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 801b5a2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801b5a6:	f801 3b01 	strb.w	r3, [r1], #1
 801b5aa:	e7f8      	b.n	801b59e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 801b5ac:	f854 5f04 	ldr.w	r5, [r4, #4]!
 801b5b0:	f840 5b04 	str.w	r5, [r0], #4
 801b5b4:	e7e6      	b.n	801b584 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 801b5b6:	0790      	lsls	r0, r2, #30
 801b5b8:	d0e1      	beq.n	801b57e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801b5ba:	f832 0b02 	ldrh.w	r0, [r2], #2
 801b5be:	3b02      	subs	r3, #2
 801b5c0:	f821 0b02 	strh.w	r0, [r1], #2
 801b5c4:	e7db      	b.n	801b57e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801b5c6:	2001      	movs	r0, #1
 801b5c8:	bd70      	pop	{r4, r5, r6, pc}

0801b5ca <_ZN8touchgfx3HAL7noTouchEv>:
 801b5ca:	b510      	push	{r4, lr}
 801b5cc:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 801b5d0:	4604      	mov	r4, r0
 801b5d2:	b153      	cbz	r3, 801b5ea <_ZN8touchgfx3HAL7noTouchEv+0x20>
 801b5d4:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 801b5d8:	2101      	movs	r1, #1
 801b5da:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 801b5de:	301c      	adds	r0, #28
 801b5e0:	f00d fc54 	bl	8028e8c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801b5e4:	2300      	movs	r3, #0
 801b5e6:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801b5ea:	bd10      	pop	{r4, pc}

0801b5ec <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 801b5ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b5f0:	4605      	mov	r5, r0
 801b5f2:	6980      	ldr	r0, [r0, #24]
 801b5f4:	b085      	sub	sp, #20
 801b5f6:	460f      	mov	r7, r1
 801b5f8:	4690      	mov	r8, r2
 801b5fa:	4699      	mov	r9, r3
 801b5fc:	b930      	cbnz	r0, 801b60c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 801b5fe:	4b1f      	ldr	r3, [pc, #124]	; (801b67c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 801b600:	f44f 7198 	mov.w	r1, #304	; 0x130
 801b604:	4a1e      	ldr	r2, [pc, #120]	; (801b680 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 801b606:	481f      	ldr	r0, [pc, #124]	; (801b684 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 801b608:	f00f f8ba 	bl	802a780 <__assert_func>
 801b60c:	ac04      	add	r4, sp, #16
 801b60e:	2600      	movs	r6, #0
 801b610:	f844 6d04 	str.w	r6, [r4, #-4]!
 801b614:	6806      	ldr	r6, [r0, #0]
 801b616:	9401      	str	r4, [sp, #4]
 801b618:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 801b61c:	9400      	str	r4, [sp, #0]
 801b61e:	6834      	ldr	r4, [r6, #0]
 801b620:	47a0      	blx	r4
 801b622:	4c19      	ldr	r4, [pc, #100]	; (801b688 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 801b624:	4606      	mov	r6, r0
 801b626:	f8a4 9000 	strh.w	r9, [r4]
 801b62a:	f7f5 fbd1 	bl	8010dd0 <_ZN8touchgfx3HAL3lcdEv>
 801b62e:	6803      	ldr	r3, [r0, #0]
 801b630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b632:	4798      	blx	r3
 801b634:	280c      	cmp	r0, #12
 801b636:	d80f      	bhi.n	801b658 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 801b638:	e8df f000 	tbb	[pc, r0]
 801b63c:	1b1b1207 	.word	0x1b1b1207
 801b640:	1b1b1b1b 	.word	0x1b1b1b1b
 801b644:	1b1b1b1b 	.word	0x1b1b1b1b
 801b648:	1b          	.byte	0x1b
 801b649:	00          	.byte	0x00
 801b64a:	8823      	ldrh	r3, [r4, #0]
 801b64c:	fb08 7203 	mla	r2, r8, r3, r7
 801b650:	9b03      	ldr	r3, [sp, #12]
 801b652:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801b656:	63eb      	str	r3, [r5, #60]	; 0x3c
 801b658:	4630      	mov	r0, r6
 801b65a:	b005      	add	sp, #20
 801b65c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b660:	8822      	ldrh	r2, [r4, #0]
 801b662:	9b03      	ldr	r3, [sp, #12]
 801b664:	fb08 7202 	mla	r2, r8, r2, r7
 801b668:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b66c:	1a9a      	subs	r2, r3, r2
 801b66e:	63ea      	str	r2, [r5, #60]	; 0x3c
 801b670:	e7f2      	b.n	801b658 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 801b672:	4b06      	ldr	r3, [pc, #24]	; (801b68c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0xa0>)
 801b674:	f240 114d 	movw	r1, #333	; 0x14d
 801b678:	4a01      	ldr	r2, [pc, #4]	; (801b680 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 801b67a:	e7c4      	b.n	801b606 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 801b67c:	0802db75 	.word	0x0802db75
 801b680:	0802de86 	.word	0x0802de86
 801b684:	0802dbba 	.word	0x0802dbba
 801b688:	2000bf60 	.word	0x2000bf60
 801b68c:	0802dbe0 	.word	0x0802dbe0

0801b690 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 801b690:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b694:	4698      	mov	r8, r3
 801b696:	6803      	ldr	r3, [r0, #0]
 801b698:	b087      	sub	sp, #28
 801b69a:	460e      	mov	r6, r1
 801b69c:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 801b69e:	4617      	mov	r7, r2
 801b6a0:	4b0d      	ldr	r3, [pc, #52]	; (801b6d8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 801b6a2:	4604      	mov	r4, r0
 801b6a4:	f8b3 9000 	ldrh.w	r9, [r3]
 801b6a8:	f7f5 fb92 	bl	8010dd0 <_ZN8touchgfx3HAL3lcdEv>
 801b6ac:	6803      	ldr	r3, [r0, #0]
 801b6ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b6b0:	4798      	blx	r3
 801b6b2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801b6b6:	463a      	mov	r2, r7
 801b6b8:	4631      	mov	r1, r6
 801b6ba:	9302      	str	r3, [sp, #8]
 801b6bc:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801b6c0:	9301      	str	r3, [sp, #4]
 801b6c2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801b6c6:	e9cd 9003 	strd	r9, r0, [sp, #12]
 801b6ca:	9300      	str	r3, [sp, #0]
 801b6cc:	4620      	mov	r0, r4
 801b6ce:	4643      	mov	r3, r8
 801b6d0:	47a8      	blx	r5
 801b6d2:	b007      	add	sp, #28
 801b6d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b6d8:	2000bf60 	.word	0x2000bf60

0801b6dc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 801b6dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6e0:	4606      	mov	r6, r0
 801b6e2:	b089      	sub	sp, #36	; 0x24
 801b6e4:	4610      	mov	r0, r2
 801b6e6:	460c      	mov	r4, r1
 801b6e8:	4691      	mov	r9, r2
 801b6ea:	4698      	mov	r8, r3
 801b6ec:	f005 fa36 	bl	8020b5c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801b6f0:	2800      	cmp	r0, #0
 801b6f2:	f000 8092 	beq.w	801b81a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x13e>
 801b6f6:	f8df a13c 	ldr.w	sl, [pc, #316]	; 801b834 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 801b6fa:	ad08      	add	r5, sp, #32
 801b6fc:	f8df b138 	ldr.w	fp, [pc, #312]	; 801b838 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>
 801b700:	f8da 0000 	ldr.w	r0, [sl]
 801b704:	4f4a      	ldr	r7, [pc, #296]	; (801b830 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 801b706:	6802      	ldr	r2, [r0, #0]
 801b708:	6a12      	ldr	r2, [r2, #32]
 801b70a:	4790      	blx	r2
 801b70c:	f8da 0000 	ldr.w	r0, [sl]
 801b710:	6802      	ldr	r2, [r0, #0]
 801b712:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801b714:	4790      	blx	r2
 801b716:	f8bb 3000 	ldrh.w	r3, [fp]
 801b71a:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 801b71e:	4628      	mov	r0, r5
 801b720:	9300      	str	r3, [sp, #0]
 801b722:	883b      	ldrh	r3, [r7, #0]
 801b724:	9301      	str	r3, [sp, #4]
 801b726:	f005 fad9 	bl	8020cdc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b72a:	f8ab 0000 	strh.w	r0, [fp]
 801b72e:	4628      	mov	r0, r5
 801b730:	f005 fb0e 	bl	8020d50 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b734:	f8da b000 	ldr.w	fp, [sl]
 801b738:	8038      	strh	r0, [r7, #0]
 801b73a:	4648      	mov	r0, r9
 801b73c:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 801b740:	f8db 7040 	ldr.w	r7, [fp, #64]	; 0x40
 801b744:	9302      	str	r3, [sp, #8]
 801b746:	f005 fa09 	bl	8020b5c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801b74a:	f8da 2000 	ldr.w	r2, [sl]
 801b74e:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 801b752:	63d0      	str	r0, [r2, #60]	; 0x3c
 801b754:	4620      	mov	r0, r4
 801b756:	6822      	ldr	r2, [r4, #0]
 801b758:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 801b75c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801b75e:	2200      	movs	r2, #0
 801b760:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 801b764:	4611      	mov	r1, r2
 801b766:	4798      	blx	r3
 801b768:	2201      	movs	r2, #1
 801b76a:	f894 b025 	ldrb.w	fp, [r4, #37]	; 0x25
 801b76e:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 801b772:	1d22      	adds	r2, r4, #4
 801b774:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
 801b778:	2900      	cmp	r1, #0
 801b77a:	d051      	beq.n	801b820 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 801b77c:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 801b780:	2900      	cmp	r1, #0
 801b782:	d04d      	beq.n	801b820 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 801b784:	6810      	ldr	r0, [r2, #0]
 801b786:	f10d 0c18 	add.w	ip, sp, #24
 801b78a:	6851      	ldr	r1, [r2, #4]
 801b78c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801b790:	4641      	mov	r1, r8
 801b792:	a806      	add	r0, sp, #24
 801b794:	f7ff fc76 	bl	801b084 <_ZN8touchgfx4RectaNERKS0_>
 801b798:	4628      	mov	r0, r5
 801b79a:	f005 fc2b 	bl	8020ff4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801b79e:	4680      	mov	r8, r0
 801b7a0:	f7f5 fb16 	bl	8010dd0 <_ZN8touchgfx3HAL3lcdEv>
 801b7a4:	6802      	ldr	r2, [r0, #0]
 801b7a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801b7a8:	4790      	blx	r2
 801b7aa:	4580      	cmp	r8, r0
 801b7ac:	d03d      	beq.n	801b82a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x14e>
 801b7ae:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 801b7b0:	b150      	cbz	r0, 801b7c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 801b7b2:	4628      	mov	r0, r5
 801b7b4:	f005 fc1e 	bl	8020ff4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801b7b8:	4605      	mov	r5, r0
 801b7ba:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 801b7bc:	6803      	ldr	r3, [r0, #0]
 801b7be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b7c0:	4798      	blx	r3
 801b7c2:	1a2b      	subs	r3, r5, r0
 801b7c4:	4258      	negs	r0, r3
 801b7c6:	4158      	adcs	r0, r3
 801b7c8:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 801b7cc:	2500      	movs	r5, #0
 801b7ce:	6963      	ldr	r3, [r4, #20]
 801b7d0:	4620      	mov	r0, r4
 801b7d2:	6822      	ldr	r2, [r4, #0]
 801b7d4:	a906      	add	r1, sp, #24
 801b7d6:	6165      	str	r5, [r4, #20]
 801b7d8:	9303      	str	r3, [sp, #12]
 801b7da:	6892      	ldr	r2, [r2, #8]
 801b7dc:	4790      	blx	r2
 801b7de:	9b03      	ldr	r3, [sp, #12]
 801b7e0:	4620      	mov	r0, r4
 801b7e2:	4652      	mov	r2, sl
 801b7e4:	6163      	str	r3, [r4, #20]
 801b7e6:	4649      	mov	r1, r9
 801b7e8:	f886 5076 	strb.w	r5, [r6, #118]	; 0x76
 801b7ec:	6823      	ldr	r3, [r4, #0]
 801b7ee:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
 801b7f2:	4c10      	ldr	r4, [pc, #64]	; (801b834 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>)
 801b7f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b7f6:	4798      	blx	r3
 801b7f8:	6820      	ldr	r0, [r4, #0]
 801b7fa:	9b02      	ldr	r3, [sp, #8]
 801b7fc:	9a00      	ldr	r2, [sp, #0]
 801b7fe:	e9c0 370f 	strd	r3, r7, [r0, #60]	; 0x3c
 801b802:	4b0d      	ldr	r3, [pc, #52]	; (801b838 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>)
 801b804:	801a      	strh	r2, [r3, #0]
 801b806:	4b0a      	ldr	r3, [pc, #40]	; (801b830 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 801b808:	9a01      	ldr	r2, [sp, #4]
 801b80a:	801a      	strh	r2, [r3, #0]
 801b80c:	6803      	ldr	r3, [r0, #0]
 801b80e:	6a1b      	ldr	r3, [r3, #32]
 801b810:	4798      	blx	r3
 801b812:	6820      	ldr	r0, [r4, #0]
 801b814:	6803      	ldr	r3, [r0, #0]
 801b816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b818:	4798      	blx	r3
 801b81a:	b009      	add	sp, #36	; 0x24
 801b81c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b820:	ab06      	add	r3, sp, #24
 801b822:	6810      	ldr	r0, [r2, #0]
 801b824:	6851      	ldr	r1, [r2, #4]
 801b826:	c303      	stmia	r3!, {r0, r1}
 801b828:	e7b6      	b.n	801b798 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xbc>
 801b82a:	2000      	movs	r0, #0
 801b82c:	e7cc      	b.n	801b7c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 801b82e:	bf00      	nop
 801b830:	2000bf62 	.word	0x2000bf62
 801b834:	2000bf68 	.word	0x2000bf68
 801b838:	2000bf60 	.word	0x2000bf60

0801b83c <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 801b83c:	4b07      	ldr	r3, [pc, #28]	; (801b85c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 801b83e:	b510      	push	{r4, lr}
 801b840:	781b      	ldrb	r3, [r3, #0]
 801b842:	4604      	mov	r4, r0
 801b844:	b13b      	cbz	r3, 801b856 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801b846:	6803      	ldr	r3, [r0, #0]
 801b848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b84a:	4798      	blx	r3
 801b84c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801b84e:	4283      	cmp	r3, r0
 801b850:	d101      	bne.n	801b856 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801b852:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801b854:	bd10      	pop	{r4, pc}
 801b856:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801b858:	e7fc      	b.n	801b854 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 801b85a:	bf00      	nop
 801b85c:	2000bf64 	.word	0x2000bf64

0801b860 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 801b860:	4b0b      	ldr	r3, [pc, #44]	; (801b890 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 801b862:	b510      	push	{r4, lr}
 801b864:	781b      	ldrb	r3, [r3, #0]
 801b866:	4604      	mov	r4, r0
 801b868:	b95b      	cbnz	r3, 801b882 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801b86a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 801b86e:	2b02      	cmp	r3, #2
 801b870:	d007      	beq.n	801b882 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801b872:	6840      	ldr	r0, [r0, #4]
 801b874:	f000 fbc8 	bl	801c008 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801b878:	b118      	cbz	r0, 801b882 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801b87a:	6862      	ldr	r2, [r4, #4]
 801b87c:	7a53      	ldrb	r3, [r2, #9]
 801b87e:	2b00      	cmp	r3, #0
 801b880:	d0fc      	beq.n	801b87c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 801b882:	f7fd f913 	bl	8018aac <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801b886:	4620      	mov	r0, r4
 801b888:	f7ff ffd8 	bl	801b83c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801b88c:	bd10      	pop	{r4, pc}
 801b88e:	bf00      	nop
 801b890:	2000bf64 	.word	0x2000bf64

0801b894 <_ZN8touchgfx3HAL10initializeEv>:
 801b894:	b510      	push	{r4, lr}
 801b896:	4604      	mov	r4, r0
 801b898:	f7fd f8e4 	bl	8018a64 <_ZN8touchgfx10OSWrappers10initializeEv>
 801b89c:	6860      	ldr	r0, [r4, #4]
 801b89e:	6803      	ldr	r3, [r0, #0]
 801b8a0:	68db      	ldr	r3, [r3, #12]
 801b8a2:	4798      	blx	r3
 801b8a4:	68e0      	ldr	r0, [r4, #12]
 801b8a6:	6803      	ldr	r3, [r0, #0]
 801b8a8:	689b      	ldr	r3, [r3, #8]
 801b8aa:	4798      	blx	r3
 801b8ac:	6823      	ldr	r3, [r4, #0]
 801b8ae:	4620      	mov	r0, r4
 801b8b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b8b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b8b6:	4718      	bx	r3

0801b8b8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 801b8b8:	b508      	push	{r3, lr}
 801b8ba:	290c      	cmp	r1, #12
 801b8bc:	d817      	bhi.n	801b8ee <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 801b8be:	e8df f001 	tbb	[pc, r1]
 801b8c2:	090b      	.short	0x090b
 801b8c4:	0d0d0d07 	.word	0x0d0d0d07
 801b8c8:	1414140d 	.word	0x1414140d
 801b8cc:	1414      	.short	0x1414
 801b8ce:	0d          	.byte	0x0d
 801b8cf:	00          	.byte	0x00
 801b8d0:	2020      	movs	r0, #32
 801b8d2:	bd08      	pop	{r3, pc}
 801b8d4:	2018      	movs	r0, #24
 801b8d6:	e7fc      	b.n	801b8d2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801b8d8:	2010      	movs	r0, #16
 801b8da:	e7fa      	b.n	801b8d2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801b8dc:	4b05      	ldr	r3, [pc, #20]	; (801b8f4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 801b8de:	f44f 710c 	mov.w	r1, #560	; 0x230
 801b8e2:	4a05      	ldr	r2, [pc, #20]	; (801b8f8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 801b8e4:	4805      	ldr	r0, [pc, #20]	; (801b8fc <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 801b8e6:	f00e ff4b 	bl	802a780 <__assert_func>
 801b8ea:	2008      	movs	r0, #8
 801b8ec:	e7f1      	b.n	801b8d2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801b8ee:	2000      	movs	r0, #0
 801b8f0:	e7ef      	b.n	801b8d2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801b8f2:	bf00      	nop
 801b8f4:	0802dcb3 	.word	0x0802dcb3
 801b8f8:	0802e048 	.word	0x0802e048
 801b8fc:	0802dbba 	.word	0x0802dbba

0801b900 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 801b900:	b570      	push	{r4, r5, r6, lr}
 801b902:	460d      	mov	r5, r1
 801b904:	f89d 1014 	ldrb.w	r1, [sp, #20]
 801b908:	4616      	mov	r6, r2
 801b90a:	461c      	mov	r4, r3
 801b90c:	f7ff ffd4 	bl	801b8b8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 801b910:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 801b914:	10c0      	asrs	r0, r0, #3
 801b916:	fb06 5101 	mla	r1, r6, r1, r5
 801b91a:	fb00 4001 	mla	r0, r0, r1, r4
 801b91e:	bd70      	pop	{r4, r5, r6, pc}

0801b920 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 801b920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b924:	b08a      	sub	sp, #40	; 0x28
 801b926:	f04f 0c00 	mov.w	ip, #0
 801b92a:	4604      	mov	r4, r0
 801b92c:	469a      	mov	sl, r3
 801b92e:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 801b932:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 801b936:	f1b8 0f02 	cmp.w	r8, #2
 801b93a:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 801b93e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801b942:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 801b946:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 801b94a:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801b94e:	f8cd c020 	str.w	ip, [sp, #32]
 801b952:	d030      	beq.n	801b9b6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 801b954:	2bff      	cmp	r3, #255	; 0xff
 801b956:	d12c      	bne.n	801b9b2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 801b958:	4560      	cmp	r0, ip
 801b95a:	bf14      	ite	ne
 801b95c:	2004      	movne	r0, #4
 801b95e:	2001      	moveq	r0, #1
 801b960:	9204      	str	r2, [sp, #16]
 801b962:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 801b966:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801b96a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801b96e:	f8ad 6018 	strh.w	r6, [sp, #24]
 801b972:	f8ad 501a 	strh.w	r5, [sp, #26]
 801b976:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b97a:	4620      	mov	r0, r4
 801b97c:	f7ff ff5e 	bl	801b83c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801b980:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 801b984:	4603      	mov	r3, r0
 801b986:	4651      	mov	r1, sl
 801b988:	4620      	mov	r0, r4
 801b98a:	e9cd 9700 	strd	r9, r7, [sp]
 801b98e:	f7ff ffb7 	bl	801b900 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 801b992:	f8ad 901e 	strh.w	r9, [sp, #30]
 801b996:	9005      	str	r0, [sp, #20]
 801b998:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 801b99c:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 801b9a0:	b106      	cbz	r6, 801b9a4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 801b9a2:	b98d      	cbnz	r5, 801b9c8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 801b9a4:	4b12      	ldr	r3, [pc, #72]	; (801b9f0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 801b9a6:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 801b9aa:	4a12      	ldr	r2, [pc, #72]	; (801b9f4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 801b9ac:	4812      	ldr	r0, [pc, #72]	; (801b9f8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 801b9ae:	f00e fee7 	bl	802a780 <__assert_func>
 801b9b2:	2004      	movs	r0, #4
 801b9b4:	e7d4      	b.n	801b960 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 801b9b6:	2bff      	cmp	r3, #255	; 0xff
 801b9b8:	d104      	bne.n	801b9c4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 801b9ba:	2800      	cmp	r0, #0
 801b9bc:	bf14      	ite	ne
 801b9be:	2040      	movne	r0, #64	; 0x40
 801b9c0:	2020      	moveq	r0, #32
 801b9c2:	e7cd      	b.n	801b960 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 801b9c4:	2040      	movs	r0, #64	; 0x40
 801b9c6:	e7cb      	b.n	801b960 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 801b9c8:	6823      	ldr	r3, [r4, #0]
 801b9ca:	4620      	mov	r0, r4
 801b9cc:	9d02      	ldr	r5, [sp, #8]
 801b9ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b9d0:	4798      	blx	r3
 801b9d2:	4228      	tst	r0, r5
 801b9d4:	d104      	bne.n	801b9e0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 801b9d6:	4b09      	ldr	r3, [pc, #36]	; (801b9fc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 801b9d8:	f240 11b1 	movw	r1, #433	; 0x1b1
 801b9dc:	4a05      	ldr	r2, [pc, #20]	; (801b9f4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 801b9de:	e7e5      	b.n	801b9ac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 801b9e0:	6860      	ldr	r0, [r4, #4]
 801b9e2:	a902      	add	r1, sp, #8
 801b9e4:	6803      	ldr	r3, [r0, #0]
 801b9e6:	685b      	ldr	r3, [r3, #4]
 801b9e8:	4798      	blx	r3
 801b9ea:	b00a      	add	sp, #40	; 0x28
 801b9ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b9f0:	0802dc36 	.word	0x0802dc36
 801b9f4:	0802deea 	.word	0x0802deea
 801b9f8:	0802dbba 	.word	0x0802dbba
 801b9fc:	0802dc6e 	.word	0x0802dc6e

0801ba00 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 801ba00:	b510      	push	{r4, lr}
 801ba02:	b08a      	sub	sp, #40	; 0x28
 801ba04:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801ba08:	9408      	str	r4, [sp, #32]
 801ba0a:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 801ba0e:	9407      	str	r4, [sp, #28]
 801ba10:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 801ba14:	9406      	str	r4, [sp, #24]
 801ba16:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 801ba1a:	9405      	str	r4, [sp, #20]
 801ba1c:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 801ba20:	9404      	str	r4, [sp, #16]
 801ba22:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 801ba26:	9403      	str	r4, [sp, #12]
 801ba28:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 801ba2c:	9402      	str	r4, [sp, #8]
 801ba2e:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 801ba32:	e9cd 3400 	strd	r3, r4, [sp]
 801ba36:	4613      	mov	r3, r2
 801ba38:	2200      	movs	r2, #0
 801ba3a:	f7ff ff71 	bl	801b920 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801ba3e:	b00a      	add	sp, #40	; 0x28
 801ba40:	bd10      	pop	{r4, pc}
	...

0801ba44 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 801ba44:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ba46:	b08b      	sub	sp, #44	; 0x2c
 801ba48:	4616      	mov	r6, r2
 801ba4a:	460d      	mov	r5, r1
 801ba4c:	461f      	mov	r7, r3
 801ba4e:	4604      	mov	r4, r0
 801ba50:	f7f5 f9be 	bl	8010dd0 <_ZN8touchgfx3HAL3lcdEv>
 801ba54:	6803      	ldr	r3, [r0, #0]
 801ba56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ba58:	4798      	blx	r3
 801ba5a:	4b0e      	ldr	r3, [pc, #56]	; (801ba94 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 801ba5c:	2200      	movs	r2, #0
 801ba5e:	4629      	mov	r1, r5
 801ba60:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801ba64:	881b      	ldrh	r3, [r3, #0]
 801ba66:	4620      	mov	r0, r4
 801ba68:	9306      	str	r3, [sp, #24]
 801ba6a:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801ba6e:	9305      	str	r3, [sp, #20]
 801ba70:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801ba74:	9304      	str	r3, [sp, #16]
 801ba76:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801ba7a:	9303      	str	r3, [sp, #12]
 801ba7c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801ba80:	9302      	str	r3, [sp, #8]
 801ba82:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801ba86:	e9cd 7300 	strd	r7, r3, [sp]
 801ba8a:	4633      	mov	r3, r6
 801ba8c:	f7ff ff48 	bl	801b920 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801ba90:	b00b      	add	sp, #44	; 0x2c
 801ba92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ba94:	2000bf60 	.word	0x2000bf60

0801ba98 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 801ba98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ba9c:	461f      	mov	r7, r3
 801ba9e:	4b14      	ldr	r3, [pc, #80]	; (801baf0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 801baa0:	b08a      	sub	sp, #40	; 0x28
 801baa2:	4616      	mov	r6, r2
 801baa4:	f8b3 8000 	ldrh.w	r8, [r3]
 801baa8:	460d      	mov	r5, r1
 801baaa:	4604      	mov	r4, r0
 801baac:	f7f5 f990 	bl	8010dd0 <_ZN8touchgfx3HAL3lcdEv>
 801bab0:	6803      	ldr	r3, [r0, #0]
 801bab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bab4:	4798      	blx	r3
 801bab6:	2302      	movs	r3, #2
 801bab8:	9008      	str	r0, [sp, #32]
 801baba:	2200      	movs	r2, #0
 801babc:	4629      	mov	r1, r5
 801babe:	4620      	mov	r0, r4
 801bac0:	e9cd 8306 	strd	r8, r3, [sp, #24]
 801bac4:	2301      	movs	r3, #1
 801bac6:	9305      	str	r3, [sp, #20]
 801bac8:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801bacc:	9304      	str	r3, [sp, #16]
 801bace:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801bad2:	9303      	str	r3, [sp, #12]
 801bad4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801bad8:	9302      	str	r3, [sp, #8]
 801bada:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801bade:	e9cd 7300 	strd	r7, r3, [sp]
 801bae2:	4633      	mov	r3, r6
 801bae4:	f7ff ff1c 	bl	801b920 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801bae8:	b00a      	add	sp, #40	; 0x28
 801baea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801baee:	bf00      	nop
 801baf0:	2000bf60 	.word	0x2000bf60

0801baf4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 801baf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801baf8:	b08b      	sub	sp, #44	; 0x2c
 801bafa:	469b      	mov	fp, r3
 801bafc:	4604      	mov	r4, r0
 801bafe:	4692      	mov	sl, r2
 801bb00:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801bb04:	2600      	movs	r6, #0
 801bb06:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 801bb0a:	4689      	mov	r9, r1
 801bb0c:	2fff      	cmp	r7, #255	; 0xff
 801bb0e:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 801bb12:	9608      	str	r6, [sp, #32]
 801bb14:	bf14      	ite	ne
 801bb16:	2308      	movne	r3, #8
 801bb18:	2302      	moveq	r3, #2
 801bb1a:	e9cd 3602 	strd	r3, r6, [sp, #8]
 801bb1e:	f7ff fe8d 	bl	801b83c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801bb22:	465a      	mov	r2, fp
 801bb24:	4603      	mov	r3, r0
 801bb26:	4651      	mov	r1, sl
 801bb28:	4620      	mov	r0, r4
 801bb2a:	e9cd 8500 	strd	r8, r5, [sp]
 801bb2e:	f7ff fee7 	bl	801b900 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 801bb32:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801bb36:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 801bb3a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801bb3e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801bb42:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 801bb46:	f8ad 301a 	strh.w	r3, [sp, #26]
 801bb4a:	6823      	ldr	r3, [r4, #0]
 801bb4c:	9d02      	ldr	r5, [sp, #8]
 801bb4e:	9005      	str	r0, [sp, #20]
 801bb50:	4620      	mov	r0, r4
 801bb52:	f8ad 601c 	strh.w	r6, [sp, #28]
 801bb56:	f8ad 801e 	strh.w	r8, [sp, #30]
 801bb5a:	f8cd 9020 	str.w	r9, [sp, #32]
 801bb5e:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 801bb62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bb64:	4798      	blx	r3
 801bb66:	4228      	tst	r0, r5
 801bb68:	d106      	bne.n	801bb78 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 801bb6a:	4b07      	ldr	r3, [pc, #28]	; (801bb88 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 801bb6c:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 801bb70:	4a06      	ldr	r2, [pc, #24]	; (801bb8c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 801bb72:	4807      	ldr	r0, [pc, #28]	; (801bb90 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 801bb74:	f00e fe04 	bl	802a780 <__assert_func>
 801bb78:	6860      	ldr	r0, [r4, #4]
 801bb7a:	a902      	add	r1, sp, #8
 801bb7c:	6803      	ldr	r3, [r0, #0]
 801bb7e:	685b      	ldr	r3, [r3, #4]
 801bb80:	4798      	blx	r3
 801bb82:	b00b      	add	sp, #44	; 0x2c
 801bb84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb88:	0802dc6e 	.word	0x0802dc6e
 801bb8c:	0802dfb3 	.word	0x0802dfb3
 801bb90:	0802dbba 	.word	0x0802dbba

0801bb94 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 801bb94:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801bb98:	461f      	mov	r7, r3
 801bb9a:	4b0b      	ldr	r3, [pc, #44]	; (801bbc8 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801bb9c:	460d      	mov	r5, r1
 801bb9e:	4616      	mov	r6, r2
 801bba0:	f8b3 8000 	ldrh.w	r8, [r3]
 801bba4:	4604      	mov	r4, r0
 801bba6:	f7f5 f913 	bl	8010dd0 <_ZN8touchgfx3HAL3lcdEv>
 801bbaa:	6803      	ldr	r3, [r0, #0]
 801bbac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bbae:	4798      	blx	r3
 801bbb0:	463b      	mov	r3, r7
 801bbb2:	4632      	mov	r2, r6
 801bbb4:	4629      	mov	r1, r5
 801bbb6:	e9cd 8000 	strd	r8, r0, [sp]
 801bbba:	4620      	mov	r0, r4
 801bbbc:	f7ff fea0 	bl	801b900 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 801bbc0:	b002      	add	sp, #8
 801bbc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bbc6:	bf00      	nop
 801bbc8:	2000bf60 	.word	0x2000bf60

0801bbcc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 801bbcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bbd0:	4698      	mov	r8, r3
 801bbd2:	b088      	sub	sp, #32
 801bbd4:	2300      	movs	r3, #0
 801bbd6:	4617      	mov	r7, r2
 801bbd8:	4604      	mov	r4, r0
 801bbda:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 801bbde:	9306      	str	r3, [sp, #24]
 801bbe0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801bbe4:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801bbe8:	f8ad 6010 	strh.w	r6, [sp, #16]
 801bbec:	f8ad 5012 	strh.w	r5, [sp, #18]
 801bbf0:	e9cd 3100 	strd	r3, r1, [sp]
 801bbf4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801bbf8:	f8ad 3014 	strh.w	r3, [sp, #20]
 801bbfc:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801bc00:	f88d 301c 	strb.w	r3, [sp, #28]
 801bc04:	f7ff fe1a 	bl	801b83c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801bc08:	4642      	mov	r2, r8
 801bc0a:	4603      	mov	r3, r0
 801bc0c:	4639      	mov	r1, r7
 801bc0e:	4620      	mov	r0, r4
 801bc10:	f7ff ffc0 	bl	801bb94 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801bc14:	4b16      	ldr	r3, [pc, #88]	; (801bc70 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 801bc16:	9003      	str	r0, [sp, #12]
 801bc18:	881b      	ldrh	r3, [r3, #0]
 801bc1a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801bc1e:	f7f5 f8d7 	bl	8010dd0 <_ZN8touchgfx3HAL3lcdEv>
 801bc22:	6803      	ldr	r3, [r0, #0]
 801bc24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bc26:	4798      	blx	r3
 801bc28:	f88d 001e 	strb.w	r0, [sp, #30]
 801bc2c:	f88d 001d 	strb.w	r0, [sp, #29]
 801bc30:	b106      	cbz	r6, 801bc34 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 801bc32:	b935      	cbnz	r5, 801bc42 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 801bc34:	4b0f      	ldr	r3, [pc, #60]	; (801bc74 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 801bc36:	f240 11cd 	movw	r1, #461	; 0x1cd
 801bc3a:	4a0f      	ldr	r2, [pc, #60]	; (801bc78 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 801bc3c:	480f      	ldr	r0, [pc, #60]	; (801bc7c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 801bc3e:	f00e fd9f 	bl	802a780 <__assert_func>
 801bc42:	6823      	ldr	r3, [r4, #0]
 801bc44:	4620      	mov	r0, r4
 801bc46:	9d00      	ldr	r5, [sp, #0]
 801bc48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bc4a:	4798      	blx	r3
 801bc4c:	4228      	tst	r0, r5
 801bc4e:	d104      	bne.n	801bc5a <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 801bc50:	4b0b      	ldr	r3, [pc, #44]	; (801bc80 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 801bc52:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 801bc56:	4a08      	ldr	r2, [pc, #32]	; (801bc78 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 801bc58:	e7f0      	b.n	801bc3c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 801bc5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801bc5c:	4669      	mov	r1, sp
 801bc5e:	6860      	ldr	r0, [r4, #4]
 801bc60:	9306      	str	r3, [sp, #24]
 801bc62:	6803      	ldr	r3, [r0, #0]
 801bc64:	685b      	ldr	r3, [r3, #4]
 801bc66:	4798      	blx	r3
 801bc68:	b008      	add	sp, #32
 801bc6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bc6e:	bf00      	nop
 801bc70:	2000bf60 	.word	0x2000bf60
 801bc74:	0802dc36 	.word	0x0802dc36
 801bc78:	0802dd9c 	.word	0x0802dd9c
 801bc7c:	0802dbba 	.word	0x0802dbba
 801bc80:	0802dc6e 	.word	0x0802dc6e

0801bc84 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 801bc84:	b570      	push	{r4, r5, r6, lr}
 801bc86:	b08a      	sub	sp, #40	; 0x28
 801bc88:	4604      	mov	r4, r0
 801bc8a:	466b      	mov	r3, sp
 801bc8c:	e883 0006 	stmia.w	r3, {r1, r2}
 801bc90:	4b1f      	ldr	r3, [pc, #124]	; (801bd10 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 801bc92:	781b      	ldrb	r3, [r3, #0]
 801bc94:	b933      	cbnz	r3, 801bca4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 801bc96:	4b1f      	ldr	r3, [pc, #124]	; (801bd14 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 801bc98:	f240 11f9 	movw	r1, #505	; 0x1f9
 801bc9c:	4a1e      	ldr	r2, [pc, #120]	; (801bd18 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 801bc9e:	481f      	ldr	r0, [pc, #124]	; (801bd1c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 801bca0:	f00e fd6e 	bl	802a780 <__assert_func>
 801bca4:	2300      	movs	r3, #0
 801bca6:	f8bd 5000 	ldrh.w	r5, [sp]
 801bcaa:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 801bcae:	9308      	str	r3, [sp, #32]
 801bcb0:	2301      	movs	r3, #1
 801bcb2:	9302      	str	r3, [sp, #8]
 801bcb4:	6803      	ldr	r3, [r0, #0]
 801bcb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bcb8:	4798      	blx	r3
 801bcba:	4632      	mov	r2, r6
 801bcbc:	4629      	mov	r1, r5
 801bcbe:	4603      	mov	r3, r0
 801bcc0:	4620      	mov	r0, r4
 801bcc2:	f7ff ff67 	bl	801bb94 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801bcc6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801bcc8:	9003      	str	r0, [sp, #12]
 801bcca:	9305      	str	r3, [sp, #20]
 801bccc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801bcd0:	f8ad 3018 	strh.w	r3, [sp, #24]
 801bcd4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801bcd8:	f8ad 301a 	strh.w	r3, [sp, #26]
 801bcdc:	4b10      	ldr	r3, [pc, #64]	; (801bd20 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 801bcde:	881b      	ldrh	r3, [r3, #0]
 801bce0:	f8ad 301c 	strh.w	r3, [sp, #28]
 801bce4:	f8ad 301e 	strh.w	r3, [sp, #30]
 801bce8:	f7f5 f872 	bl	8010dd0 <_ZN8touchgfx3HAL3lcdEv>
 801bcec:	6803      	ldr	r3, [r0, #0]
 801bcee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bcf0:	4798      	blx	r3
 801bcf2:	23ff      	movs	r3, #255	; 0xff
 801bcf4:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 801bcf8:	a902      	add	r1, sp, #8
 801bcfa:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 801bcfe:	6860      	ldr	r0, [r4, #4]
 801bd00:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801bd04:	6803      	ldr	r3, [r0, #0]
 801bd06:	685b      	ldr	r3, [r3, #4]
 801bd08:	4798      	blx	r3
 801bd0a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 801bd0c:	b00a      	add	sp, #40	; 0x28
 801bd0e:	bd70      	pop	{r4, r5, r6, pc}
 801bd10:	2000bf65 	.word	0x2000bf65
 801bd14:	0802db07 	.word	0x0802db07
 801bd18:	0802de40 	.word	0x0802de40
 801bd1c:	0802dbba 	.word	0x0802dbba
 801bd20:	2000bf60 	.word	0x2000bf60

0801bd24 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 801bd24:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bd26:	b08b      	sub	sp, #44	; 0x2c
 801bd28:	4604      	mov	r4, r0
 801bd2a:	466d      	mov	r5, sp
 801bd2c:	e885 0006 	stmia.w	r5, {r1, r2}
 801bd30:	461d      	mov	r5, r3
 801bd32:	2300      	movs	r3, #0
 801bd34:	f8bd 6000 	ldrh.w	r6, [sp]
 801bd38:	9308      	str	r3, [sp, #32]
 801bd3a:	2301      	movs	r3, #1
 801bd3c:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 801bd40:	9302      	str	r3, [sp, #8]
 801bd42:	6803      	ldr	r3, [r0, #0]
 801bd44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bd46:	4798      	blx	r3
 801bd48:	463a      	mov	r2, r7
 801bd4a:	4631      	mov	r1, r6
 801bd4c:	4603      	mov	r3, r0
 801bd4e:	4620      	mov	r0, r4
 801bd50:	f7ff ff20 	bl	801bb94 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801bd54:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801bd58:	9003      	str	r0, [sp, #12]
 801bd5a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801bd5e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801bd62:	9505      	str	r5, [sp, #20]
 801bd64:	f8ad 301a 	strh.w	r3, [sp, #26]
 801bd68:	4b0d      	ldr	r3, [pc, #52]	; (801bda0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 801bd6a:	881b      	ldrh	r3, [r3, #0]
 801bd6c:	f8ad 301c 	strh.w	r3, [sp, #28]
 801bd70:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bd72:	f8ad 301e 	strh.w	r3, [sp, #30]
 801bd76:	f7f5 f82b 	bl	8010dd0 <_ZN8touchgfx3HAL3lcdEv>
 801bd7a:	6803      	ldr	r3, [r0, #0]
 801bd7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bd7e:	4798      	blx	r3
 801bd80:	23ff      	movs	r3, #255	; 0xff
 801bd82:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 801bd86:	a902      	add	r1, sp, #8
 801bd88:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 801bd8c:	6860      	ldr	r0, [r4, #4]
 801bd8e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801bd92:	6803      	ldr	r3, [r0, #0]
 801bd94:	685b      	ldr	r3, [r3, #4]
 801bd96:	4798      	blx	r3
 801bd98:	4628      	mov	r0, r5
 801bd9a:	b00b      	add	sp, #44	; 0x2c
 801bd9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bd9e:	bf00      	nop
 801bda0:	2000bf60 	.word	0x2000bf60

0801bda4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 801bda4:	b570      	push	{r4, r5, r6, lr}
 801bda6:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 801bdaa:	4604      	mov	r4, r0
 801bdac:	b19b      	cbz	r3, 801bdd6 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801bdae:	2002      	movs	r0, #2
 801bdb0:	f7fc fbe4 	bl	801857c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 801bdb4:	2300      	movs	r3, #0
 801bdb6:	4620      	mov	r0, r4
 801bdb8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801bdbc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 801bdc0:	6823      	ldr	r3, [r4, #0]
 801bdc2:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 801bdc6:	f7ff fd39 	bl	801b83c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801bdca:	4601      	mov	r1, r0
 801bdcc:	4620      	mov	r0, r4
 801bdce:	462b      	mov	r3, r5
 801bdd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bdd4:	4718      	bx	r3
 801bdd6:	bd70      	pop	{r4, r5, r6, pc}

0801bdd8 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 801bdd8:	4770      	bx	lr

0801bdda <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 801bdda:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 801bdde:	1a13      	subs	r3, r2, r0
 801bde0:	4258      	negs	r0, r3
 801bde2:	4158      	adcs	r0, r3
 801bde4:	4770      	bx	lr

0801bde6 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801bde6:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 801bdea:	1a9b      	subs	r3, r3, r2
 801bdec:	2b00      	cmp	r3, #0
 801bdee:	bfdc      	itt	le
 801bdf0:	6882      	ldrle	r2, [r0, #8]
 801bdf2:	189b      	addle	r3, r3, r2
 801bdf4:	2b01      	cmp	r3, #1
 801bdf6:	bfcc      	ite	gt
 801bdf8:	2000      	movgt	r0, #0
 801bdfa:	2001      	movle	r0, #1
 801bdfc:	4770      	bx	lr

0801bdfe <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801bdfe:	6902      	ldr	r2, [r0, #16]
 801be00:	6840      	ldr	r0, [r0, #4]
 801be02:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 801be06:	4770      	bx	lr

0801be08 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801be08:	6803      	ldr	r3, [r0, #0]
 801be0a:	691b      	ldr	r3, [r3, #16]
 801be0c:	4718      	bx	r3

0801be0e <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 801be0e:	4770      	bx	lr

0801be10 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 801be10:	4770      	bx	lr
	...

0801be14 <_ZN8touchgfx13DMA_Interface7executeEv>:
 801be14:	2301      	movs	r3, #1
 801be16:	b570      	push	{r4, r5, r6, lr}
 801be18:	7203      	strb	r3, [r0, #8]
 801be1a:	4604      	mov	r4, r0
 801be1c:	6840      	ldr	r0, [r0, #4]
 801be1e:	6803      	ldr	r3, [r0, #0]
 801be20:	699b      	ldr	r3, [r3, #24]
 801be22:	4798      	blx	r3
 801be24:	6803      	ldr	r3, [r0, #0]
 801be26:	4605      	mov	r5, r0
 801be28:	2b08      	cmp	r3, #8
 801be2a:	d01e      	beq.n	801be6a <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 801be2c:	d80b      	bhi.n	801be46 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801be2e:	2b02      	cmp	r3, #2
 801be30:	d027      	beq.n	801be82 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 801be32:	2b04      	cmp	r3, #4
 801be34:	d011      	beq.n	801be5a <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 801be36:	2b01      	cmp	r3, #1
 801be38:	d028      	beq.n	801be8c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801be3a:	4b17      	ldr	r3, [pc, #92]	; (801be98 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 801be3c:	218b      	movs	r1, #139	; 0x8b
 801be3e:	4a17      	ldr	r2, [pc, #92]	; (801be9c <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 801be40:	4817      	ldr	r0, [pc, #92]	; (801bea0 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 801be42:	f00e fc9d 	bl	802a780 <__assert_func>
 801be46:	2b40      	cmp	r3, #64	; 0x40
 801be48:	d020      	beq.n	801be8c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801be4a:	d801      	bhi.n	801be50 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 801be4c:	2b20      	cmp	r3, #32
 801be4e:	e7f3      	b.n	801be38 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 801be50:	2b80      	cmp	r3, #128	; 0x80
 801be52:	d01b      	beq.n	801be8c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801be54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801be58:	e7ee      	b.n	801be38 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 801be5a:	6823      	ldr	r3, [r4, #0]
 801be5c:	7f01      	ldrb	r1, [r0, #28]
 801be5e:	4620      	mov	r0, r4
 801be60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801be62:	4798      	blx	r3
 801be64:	6823      	ldr	r3, [r4, #0]
 801be66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801be68:	e006      	b.n	801be78 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801be6a:	6823      	ldr	r3, [r4, #0]
 801be6c:	7f01      	ldrb	r1, [r0, #28]
 801be6e:	4620      	mov	r0, r4
 801be70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801be72:	4798      	blx	r3
 801be74:	6823      	ldr	r3, [r4, #0]
 801be76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801be78:	4629      	mov	r1, r5
 801be7a:	4620      	mov	r0, r4
 801be7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801be80:	4718      	bx	r3
 801be82:	6823      	ldr	r3, [r4, #0]
 801be84:	4620      	mov	r0, r4
 801be86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801be88:	4798      	blx	r3
 801be8a:	e7f3      	b.n	801be74 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 801be8c:	6823      	ldr	r3, [r4, #0]
 801be8e:	4620      	mov	r0, r4
 801be90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801be92:	4798      	blx	r3
 801be94:	e7e6      	b.n	801be64 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 801be96:	bf00      	nop
 801be98:	0802e091 	.word	0x0802e091
 801be9c:	0802e1a0 	.word	0x0802e1a0
 801bea0:	0802e0b6 	.word	0x0802e0b6

0801bea4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 801bea4:	b570      	push	{r4, r5, r6, lr}
 801bea6:	4604      	mov	r4, r0
 801bea8:	460e      	mov	r6, r1
 801beaa:	6860      	ldr	r0, [r4, #4]
 801beac:	6803      	ldr	r3, [r0, #0]
 801beae:	685b      	ldr	r3, [r3, #4]
 801beb0:	4798      	blx	r3
 801beb2:	2800      	cmp	r0, #0
 801beb4:	d1f9      	bne.n	801beaa <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801beb6:	4d0b      	ldr	r5, [pc, #44]	; (801bee4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 801beb8:	6828      	ldr	r0, [r5, #0]
 801beba:	6803      	ldr	r3, [r0, #0]
 801bebc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801bebe:	4798      	blx	r3
 801bec0:	f7fc fe10 	bl	8018ae4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 801bec4:	6860      	ldr	r0, [r4, #4]
 801bec6:	4631      	mov	r1, r6
 801bec8:	6803      	ldr	r3, [r0, #0]
 801beca:	689b      	ldr	r3, [r3, #8]
 801becc:	4798      	blx	r3
 801bece:	6823      	ldr	r3, [r4, #0]
 801bed0:	4620      	mov	r0, r4
 801bed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bed4:	4798      	blx	r3
 801bed6:	6828      	ldr	r0, [r5, #0]
 801bed8:	6803      	ldr	r3, [r0, #0]
 801beda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801bee0:	4718      	bx	r3
 801bee2:	bf00      	nop
 801bee4:	2000bf68 	.word	0x2000bf68

0801bee8 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 801bee8:	b508      	push	{r3, lr}
 801beea:	f7fc fddf 	bl	8018aac <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801beee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801bef2:	f7fc bde9 	b.w	8018ac8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801bef6 <_ZN8touchgfx13DMA_Interface5startEv>:
 801bef6:	b510      	push	{r4, lr}
 801bef8:	4604      	mov	r4, r0
 801befa:	6840      	ldr	r0, [r0, #4]
 801befc:	6803      	ldr	r3, [r0, #0]
 801befe:	681b      	ldr	r3, [r3, #0]
 801bf00:	4798      	blx	r3
 801bf02:	b948      	cbnz	r0, 801bf18 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801bf04:	7a63      	ldrb	r3, [r4, #9]
 801bf06:	b13b      	cbz	r3, 801bf18 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801bf08:	7a23      	ldrb	r3, [r4, #8]
 801bf0a:	b92b      	cbnz	r3, 801bf18 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801bf0c:	6823      	ldr	r3, [r4, #0]
 801bf0e:	4620      	mov	r0, r4
 801bf10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bf12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bf16:	4718      	bx	r3
 801bf18:	bd10      	pop	{r4, pc}
	...

0801bf1c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 801bf1c:	b510      	push	{r4, lr}
 801bf1e:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 801bf22:	1b12      	subs	r2, r2, r4
 801bf24:	2a00      	cmp	r2, #0
 801bf26:	bfdc      	itt	le
 801bf28:	6883      	ldrle	r3, [r0, #8]
 801bf2a:	18d2      	addle	r2, r2, r3
 801bf2c:	2a01      	cmp	r2, #1
 801bf2e:	dd18      	ble.n	801bf62 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 801bf30:	6843      	ldr	r3, [r0, #4]
 801bf32:	f101 021c 	add.w	r2, r1, #28
 801bf36:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 801bf3a:	f851 4b04 	ldr.w	r4, [r1], #4
 801bf3e:	4291      	cmp	r1, r2
 801bf40:	f843 4b04 	str.w	r4, [r3], #4
 801bf44:	d1f9      	bne.n	801bf3a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 801bf46:	880a      	ldrh	r2, [r1, #0]
 801bf48:	801a      	strh	r2, [r3, #0]
 801bf4a:	788a      	ldrb	r2, [r1, #2]
 801bf4c:	709a      	strb	r2, [r3, #2]
 801bf4e:	68c3      	ldr	r3, [r0, #12]
 801bf50:	6882      	ldr	r2, [r0, #8]
 801bf52:	f3bf 8f5b 	dmb	ish
 801bf56:	3301      	adds	r3, #1
 801bf58:	429a      	cmp	r2, r3
 801bf5a:	bfd8      	it	le
 801bf5c:	1a9b      	suble	r3, r3, r2
 801bf5e:	60c3      	str	r3, [r0, #12]
 801bf60:	bd10      	pop	{r4, pc}
 801bf62:	4b03      	ldr	r3, [pc, #12]	; (801bf70 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 801bf64:	2139      	movs	r1, #57	; 0x39
 801bf66:	4a03      	ldr	r2, [pc, #12]	; (801bf74 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 801bf68:	4803      	ldr	r0, [pc, #12]	; (801bf78 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 801bf6a:	f00e fc09 	bl	802a780 <__assert_func>
 801bf6e:	bf00      	nop
 801bf70:	0802e0dc 	.word	0x0802e0dc
 801bf74:	0802e1d0 	.word	0x0802e1d0
 801bf78:	0802e0b6 	.word	0x0802e0b6

0801bf7c <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 801bf7c:	b510      	push	{r4, lr}
 801bf7e:	6803      	ldr	r3, [r0, #0]
 801bf80:	4604      	mov	r4, r0
 801bf82:	681b      	ldr	r3, [r3, #0]
 801bf84:	4798      	blx	r3
 801bf86:	b128      	cbz	r0, 801bf94 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 801bf88:	4b07      	ldr	r3, [pc, #28]	; (801bfa8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 801bf8a:	213f      	movs	r1, #63	; 0x3f
 801bf8c:	4a07      	ldr	r2, [pc, #28]	; (801bfac <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 801bf8e:	4808      	ldr	r0, [pc, #32]	; (801bfb0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 801bf90:	f00e fbf6 	bl	802a780 <__assert_func>
 801bf94:	6923      	ldr	r3, [r4, #16]
 801bf96:	68a2      	ldr	r2, [r4, #8]
 801bf98:	f3bf 8f5b 	dmb	ish
 801bf9c:	3301      	adds	r3, #1
 801bf9e:	429a      	cmp	r2, r3
 801bfa0:	bfd8      	it	le
 801bfa2:	1a9b      	suble	r3, r3, r2
 801bfa4:	6123      	str	r3, [r4, #16]
 801bfa6:	bd10      	pop	{r4, pc}
 801bfa8:	0802e0ff 	.word	0x0802e0ff
 801bfac:	0802e21e 	.word	0x0802e21e
 801bfb0:	0802e0b6 	.word	0x0802e0b6

0801bfb4 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801bfb4:	b570      	push	{r4, r5, r6, lr}
 801bfb6:	4604      	mov	r4, r0
 801bfb8:	6840      	ldr	r0, [r0, #4]
 801bfba:	6803      	ldr	r3, [r0, #0]
 801bfbc:	681b      	ldr	r3, [r3, #0]
 801bfbe:	4798      	blx	r3
 801bfc0:	4605      	mov	r5, r0
 801bfc2:	b930      	cbnz	r0, 801bfd2 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801bfc4:	7a23      	ldrb	r3, [r4, #8]
 801bfc6:	b123      	cbz	r3, 801bfd2 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801bfc8:	6860      	ldr	r0, [r4, #4]
 801bfca:	6803      	ldr	r3, [r0, #0]
 801bfcc:	695b      	ldr	r3, [r3, #20]
 801bfce:	4798      	blx	r3
 801bfd0:	7225      	strb	r5, [r4, #8]
 801bfd2:	6860      	ldr	r0, [r4, #4]
 801bfd4:	6803      	ldr	r3, [r0, #0]
 801bfd6:	681b      	ldr	r3, [r3, #0]
 801bfd8:	4798      	blx	r3
 801bfda:	b928      	cbnz	r0, 801bfe8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 801bfdc:	6823      	ldr	r3, [r4, #0]
 801bfde:	4620      	mov	r0, r4
 801bfe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bfe2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bfe6:	4718      	bx	r3
 801bfe8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bfec:	f7fc bd86 	b.w	8018afc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0801bff0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 801bff0:	b510      	push	{r4, lr}
 801bff2:	6082      	str	r2, [r0, #8]
 801bff4:	2200      	movs	r2, #0
 801bff6:	4c03      	ldr	r4, [pc, #12]	; (801c004 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 801bff8:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801bffc:	e9c0 4100 	strd	r4, r1, [r0]
 801c000:	bd10      	pop	{r4, pc}
 801c002:	bf00      	nop
 801c004:	0802e184 	.word	0x0802e184

0801c008 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 801c008:	6840      	ldr	r0, [r0, #4]
 801c00a:	6803      	ldr	r3, [r0, #0]
 801c00c:	681b      	ldr	r3, [r3, #0]
 801c00e:	4718      	bx	r3

0801c010 <_ZN8touchgfx21AbstractPainterRGB88810renderInitEv>:
 801c010:	2001      	movs	r0, #1
 801c012:	4770      	bx	lr

0801c014 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh>:
 801c014:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c018:	460d      	mov	r5, r1
 801c01a:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801c01e:	b085      	sub	sp, #20
 801c020:	4690      	mov	r8, r2
 801c022:	4411      	add	r1, r2
 801c024:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801c028:	4699      	mov	r9, r3
 801c02a:	6803      	ldr	r3, [r0, #0]
 801c02c:	60c1      	str	r1, [r0, #12]
 801c02e:	4604      	mov	r4, r0
 801c030:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c032:	440a      	add	r2, r1
 801c034:	6102      	str	r2, [r0, #16]
 801c036:	68db      	ldr	r3, [r3, #12]
 801c038:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 801c03c:	4798      	blx	r3
 801c03e:	2800      	cmp	r0, #0
 801c040:	d039      	beq.n	801c0b6 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa2>
 801c042:	44c8      	add	r8, r9
 801c044:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801c048:	4445      	add	r5, r8
 801c04a:	6823      	ldr	r3, [r4, #0]
 801c04c:	f10d 020f 	add.w	r2, sp, #15
 801c050:	a903      	add	r1, sp, #12
 801c052:	4620      	mov	r0, r4
 801c054:	9200      	str	r2, [sp, #0]
 801c056:	f10d 020d 	add.w	r2, sp, #13
 801c05a:	f8d3 8010 	ldr.w	r8, [r3, #16]
 801c05e:	f10d 030e 	add.w	r3, sp, #14
 801c062:	47c0      	blx	r8
 801c064:	b1f8      	cbz	r0, 801c0a6 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x92>
 801c066:	f89d 300f 	ldrb.w	r3, [sp, #15]
 801c06a:	7a20      	ldrb	r0, [r4, #8]
 801c06c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 801c070:	4358      	muls	r0, r3
 801c072:	f89d 100e 	ldrb.w	r1, [sp, #14]
 801c076:	1c43      	adds	r3, r0, #1
 801c078:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801c07c:	f817 0b01 	ldrb.w	r0, [r7], #1
 801c080:	121b      	asrs	r3, r3, #8
 801c082:	fb10 f003 	smulbb	r0, r0, r3
 801c086:	b283      	uxth	r3, r0
 801c088:	1c58      	adds	r0, r3, #1
 801c08a:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801c08e:	6823      	ldr	r3, [r4, #0]
 801c090:	1200      	asrs	r0, r0, #8
 801c092:	f8d3 8014 	ldr.w	r8, [r3, #20]
 801c096:	f89d 300d 	ldrb.w	r3, [sp, #13]
 801c09a:	28ff      	cmp	r0, #255	; 0xff
 801c09c:	d10e      	bne.n	801c0bc <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa8>
 801c09e:	9100      	str	r1, [sp, #0]
 801c0a0:	4629      	mov	r1, r5
 801c0a2:	4620      	mov	r0, r4
 801c0a4:	47c0      	blx	r8
 801c0a6:	68e3      	ldr	r3, [r4, #12]
 801c0a8:	3e01      	subs	r6, #1
 801c0aa:	f105 0503 	add.w	r5, r5, #3
 801c0ae:	f103 0301 	add.w	r3, r3, #1
 801c0b2:	60e3      	str	r3, [r4, #12]
 801c0b4:	d1c9      	bne.n	801c04a <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x36>
 801c0b6:	b005      	add	sp, #20
 801c0b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c0bc:	fa1f fc80 	uxth.w	ip, r0
 801c0c0:	43c0      	mvns	r0, r0
 801c0c2:	f895 e002 	ldrb.w	lr, [r5, #2]
 801c0c6:	fb12 f20c 	smulbb	r2, r2, ip
 801c0ca:	b2c0      	uxtb	r0, r0
 801c0cc:	fb13 f30c 	smulbb	r3, r3, ip
 801c0d0:	fb0e 2200 	mla	r2, lr, r0, r2
 801c0d4:	f895 e001 	ldrb.w	lr, [r5, #1]
 801c0d8:	fb11 f10c 	smulbb	r1, r1, ip
 801c0dc:	fb0e 3300 	mla	r3, lr, r0, r3
 801c0e0:	f895 e000 	ldrb.w	lr, [r5]
 801c0e4:	b292      	uxth	r2, r2
 801c0e6:	b29b      	uxth	r3, r3
 801c0e8:	fb0e 1000 	mla	r0, lr, r0, r1
 801c0ec:	1c59      	adds	r1, r3, #1
 801c0ee:	b280      	uxth	r0, r0
 801c0f0:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801c0f4:	1c51      	adds	r1, r2, #1
 801c0f6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801c0fa:	1c41      	adds	r1, r0, #1
 801c0fc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801c100:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 801c104:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801c108:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801c10c:	9000      	str	r0, [sp, #0]
 801c10e:	e7c7      	b.n	801c0a0 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x8c>

0801c110 <_ZN8touchgfx21AbstractPainterRGB88811renderPixelEPthhh>:
 801c110:	f89d 0000 	ldrb.w	r0, [sp]
 801c114:	704b      	strb	r3, [r1, #1]
 801c116:	7008      	strb	r0, [r1, #0]
 801c118:	708a      	strb	r2, [r1, #2]
 801c11a:	4770      	bx	lr

0801c11c <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh>:
 801c11c:	4413      	add	r3, r2
 801c11e:	7dc2      	ldrb	r2, [r0, #23]
 801c120:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c124:	4419      	add	r1, r3
 801c126:	7a03      	ldrb	r3, [r0, #8]
 801c128:	435a      	muls	r2, r3
 801c12a:	1c53      	adds	r3, r2, #1
 801c12c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801c130:	121b      	asrs	r3, r3, #8
 801c132:	2bff      	cmp	r3, #255	; 0xff
 801c134:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c136:	e9dd 7406 	ldrd	r7, r4, [sp, #24]
 801c13a:	d13e      	bne.n	801c1ba <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x9e>
 801c13c:	4427      	add	r7, r4
 801c13e:	f814 3b01 	ldrb.w	r3, [r4], #1
 801c142:	3103      	adds	r1, #3
 801c144:	7d86      	ldrb	r6, [r0, #22]
 801c146:	2bff      	cmp	r3, #255	; 0xff
 801c148:	d10a      	bne.n	801c160 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x44>
 801c14a:	f801 6c03 	strb.w	r6, [r1, #-3]
 801c14e:	7d43      	ldrb	r3, [r0, #21]
 801c150:	f801 3c02 	strb.w	r3, [r1, #-2]
 801c154:	7d03      	ldrb	r3, [r0, #20]
 801c156:	f801 3c01 	strb.w	r3, [r1, #-1]
 801c15a:	42a7      	cmp	r7, r4
 801c15c:	d1ef      	bne.n	801c13e <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x22>
 801c15e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c160:	b29a      	uxth	r2, r3
 801c162:	43db      	mvns	r3, r3
 801c164:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 801c168:	fb16 f602 	smulbb	r6, r6, r2
 801c16c:	b2db      	uxtb	r3, r3
 801c16e:	fb05 6503 	mla	r5, r5, r3, r6
 801c172:	b2ad      	uxth	r5, r5
 801c174:	1c6e      	adds	r6, r5, #1
 801c176:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801c17a:	f811 6c02 	ldrb.w	r6, [r1, #-2]
 801c17e:	fb16 f603 	smulbb	r6, r6, r3
 801c182:	122d      	asrs	r5, r5, #8
 801c184:	f801 5c03 	strb.w	r5, [r1, #-3]
 801c188:	7d45      	ldrb	r5, [r0, #21]
 801c18a:	fb05 6502 	mla	r5, r5, r2, r6
 801c18e:	b2ad      	uxth	r5, r5
 801c190:	1c6e      	adds	r6, r5, #1
 801c192:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801c196:	122d      	asrs	r5, r5, #8
 801c198:	f801 5c02 	strb.w	r5, [r1, #-2]
 801c19c:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 801c1a0:	7d06      	ldrb	r6, [r0, #20]
 801c1a2:	fb15 f303 	smulbb	r3, r5, r3
 801c1a6:	fb06 3202 	mla	r2, r6, r2, r3
 801c1aa:	b292      	uxth	r2, r2
 801c1ac:	1c53      	adds	r3, r2, #1
 801c1ae:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801c1b2:	1212      	asrs	r2, r2, #8
 801c1b4:	f801 2c01 	strb.w	r2, [r1, #-1]
 801c1b8:	e7cf      	b.n	801c15a <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3e>
 801c1ba:	b2de      	uxtb	r6, r3
 801c1bc:	2b00      	cmp	r3, #0
 801c1be:	d0ce      	beq.n	801c15e <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>
 801c1c0:	3103      	adds	r1, #3
 801c1c2:	4427      	add	r7, r4
 801c1c4:	f814 2b01 	ldrb.w	r2, [r4], #1
 801c1c8:	3103      	adds	r1, #3
 801c1ca:	f811 cc06 	ldrb.w	ip, [r1, #-6]
 801c1ce:	fb02 f306 	mul.w	r3, r2, r6
 801c1d2:	42bc      	cmp	r4, r7
 801c1d4:	f103 0201 	add.w	r2, r3, #1
 801c1d8:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801c1dc:	ea4f 2222 	mov.w	r2, r2, asr #8
 801c1e0:	b295      	uxth	r5, r2
 801c1e2:	ea6f 0202 	mvn.w	r2, r2
 801c1e6:	b2d3      	uxtb	r3, r2
 801c1e8:	7d82      	ldrb	r2, [r0, #22]
 801c1ea:	fb1c fc03 	smulbb	ip, ip, r3
 801c1ee:	fb02 c205 	mla	r2, r2, r5, ip
 801c1f2:	b292      	uxth	r2, r2
 801c1f4:	f102 0c01 	add.w	ip, r2, #1
 801c1f8:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801c1fc:	f811 cc05 	ldrb.w	ip, [r1, #-5]
 801c200:	fb1c fc03 	smulbb	ip, ip, r3
 801c204:	ea4f 2222 	mov.w	r2, r2, asr #8
 801c208:	f801 2c06 	strb.w	r2, [r1, #-6]
 801c20c:	7d42      	ldrb	r2, [r0, #21]
 801c20e:	fb02 c205 	mla	r2, r2, r5, ip
 801c212:	b292      	uxth	r2, r2
 801c214:	f102 0c01 	add.w	ip, r2, #1
 801c218:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801c21c:	ea4f 2222 	mov.w	r2, r2, asr #8
 801c220:	f801 2c05 	strb.w	r2, [r1, #-5]
 801c224:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 801c228:	f890 c014 	ldrb.w	ip, [r0, #20]
 801c22c:	fb12 f303 	smulbb	r3, r2, r3
 801c230:	fb0c 3305 	mla	r3, ip, r5, r3
 801c234:	b29b      	uxth	r3, r3
 801c236:	f103 0201 	add.w	r2, r3, #1
 801c23a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801c23e:	ea4f 2323 	mov.w	r3, r3, asr #8
 801c242:	f801 3c04 	strb.w	r3, [r1, #-4]
 801c246:	d1bd      	bne.n	801c1c4 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0xa8>
 801c248:	e789      	b.n	801c15e <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>

0801c24a <_ZN8touchgfx13PainterRGB88810renderNextERhS1_S1_S1_>:
 801c24a:	b510      	push	{r4, lr}
 801c24c:	7d04      	ldrb	r4, [r0, #20]
 801c24e:	700c      	strb	r4, [r1, #0]
 801c250:	7d41      	ldrb	r1, [r0, #21]
 801c252:	7011      	strb	r1, [r2, #0]
 801c254:	7d82      	ldrb	r2, [r0, #22]
 801c256:	701a      	strb	r2, [r3, #0]
 801c258:	9b02      	ldr	r3, [sp, #8]
 801c25a:	7dc2      	ldrb	r2, [r0, #23]
 801c25c:	2001      	movs	r0, #1
 801c25e:	701a      	strb	r2, [r3, #0]
 801c260:	bd10      	pop	{r4, pc}

0801c262 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>:
 801c262:	b570      	push	{r4, r5, r6, lr}
 801c264:	4616      	mov	r6, r2
 801c266:	4604      	mov	r4, r0
 801c268:	460d      	mov	r5, r1
 801c26a:	f7f4 fdb1 	bl	8010dd0 <_ZN8touchgfx3HAL3lcdEv>
 801c26e:	6803      	ldr	r3, [r0, #0]
 801c270:	4629      	mov	r1, r5
 801c272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c274:	4798      	blx	r3
 801c276:	7520      	strb	r0, [r4, #20]
 801c278:	f7f4 fdaa 	bl	8010dd0 <_ZN8touchgfx3HAL3lcdEv>
 801c27c:	6803      	ldr	r3, [r0, #0]
 801c27e:	4629      	mov	r1, r5
 801c280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c282:	4798      	blx	r3
 801c284:	7560      	strb	r0, [r4, #21]
 801c286:	f7f4 fda3 	bl	8010dd0 <_ZN8touchgfx3HAL3lcdEv>
 801c28a:	6803      	ldr	r3, [r0, #0]
 801c28c:	4629      	mov	r1, r5
 801c28e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c290:	4798      	blx	r3
 801c292:	75e6      	strb	r6, [r4, #23]
 801c294:	75a0      	strb	r0, [r4, #22]
 801c296:	bd70      	pop	{r4, r5, r6, pc}

0801c298 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>:
 801c298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c29a:	460e      	mov	r6, r1
 801c29c:	4617      	mov	r7, r2
 801c29e:	4604      	mov	r4, r0
 801c2a0:	f000 f832 	bl	801c308 <_ZN8touchgfx15AbstractPainterC1Ev>
 801c2a4:	4b12      	ldr	r3, [pc, #72]	; (801c2f0 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x58>)
 801c2a6:	6023      	str	r3, [r4, #0]
 801c2a8:	f7f4 fd92 	bl	8010dd0 <_ZN8touchgfx3HAL3lcdEv>
 801c2ac:	6803      	ldr	r3, [r0, #0]
 801c2ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c2b0:	4798      	blx	r3
 801c2b2:	1e43      	subs	r3, r0, #1
 801c2b4:	425d      	negs	r5, r3
 801c2b6:	415d      	adcs	r5, r3
 801c2b8:	4b0e      	ldr	r3, [pc, #56]	; (801c2f4 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x5c>)
 801c2ba:	681b      	ldr	r3, [r3, #0]
 801c2bc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801c2be:	b130      	cbz	r0, 801c2ce <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x36>
 801c2c0:	6803      	ldr	r3, [r0, #0]
 801c2c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c2c4:	4798      	blx	r3
 801c2c6:	2801      	cmp	r0, #1
 801c2c8:	bf08      	it	eq
 801c2ca:	f045 0501 	orreq.w	r5, r5, #1
 801c2ce:	b92d      	cbnz	r5, 801c2dc <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x44>
 801c2d0:	4b09      	ldr	r3, [pc, #36]	; (801c2f8 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x60>)
 801c2d2:	2129      	movs	r1, #41	; 0x29
 801c2d4:	4a09      	ldr	r2, [pc, #36]	; (801c2fc <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x64>)
 801c2d6:	480a      	ldr	r0, [pc, #40]	; (801c300 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x68>)
 801c2d8:	f00e fa52 	bl	802a780 <__assert_func>
 801c2dc:	4b09      	ldr	r3, [pc, #36]	; (801c304 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x6c>)
 801c2de:	4620      	mov	r0, r4
 801c2e0:	463a      	mov	r2, r7
 801c2e2:	4631      	mov	r1, r6
 801c2e4:	6023      	str	r3, [r4, #0]
 801c2e6:	f7ff ffbc 	bl	801c262 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
 801c2ea:	4620      	mov	r0, r4
 801c2ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c2ee:	bf00      	nop
 801c2f0:	0802e258 	.word	0x0802e258
 801c2f4:	2000bf68 	.word	0x2000bf68
 801c2f8:	0802e270 	.word	0x0802e270
 801c2fc:	0802e334 	.word	0x0802e334
 801c300:	0802e2ce 	.word	0x0802e2ce
 801c304:	0802e31c 	.word	0x0802e31c

0801c308 <_ZN8touchgfx15AbstractPainterC1Ev>:
 801c308:	4a03      	ldr	r2, [pc, #12]	; (801c318 <_ZN8touchgfx15AbstractPainterC1Ev+0x10>)
 801c30a:	6002      	str	r2, [r0, #0]
 801c30c:	2200      	movs	r2, #0
 801c30e:	6042      	str	r2, [r0, #4]
 801c310:	22ff      	movs	r2, #255	; 0xff
 801c312:	7202      	strb	r2, [r0, #8]
 801c314:	4770      	bx	lr
 801c316:	bf00      	nop
 801c318:	0802e378 	.word	0x0802e378

0801c31c <_ZN8touchgfx15AbstractPainterD1Ev>:
 801c31c:	4770      	bx	lr

0801c31e <_ZN8touchgfx15AbstractPainter9setOffsetEtt>:
 801c31e:	8081      	strh	r1, [r0, #4]
 801c320:	80c2      	strh	r2, [r0, #6]
 801c322:	4770      	bx	lr

0801c324 <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>:
 801c324:	7201      	strb	r1, [r0, #8]
 801c326:	4770      	bx	lr

0801c328 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 801c328:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
 801c32c:	4770      	bx	lr

0801c32e <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 801c32e:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 801c332:	4770      	bx	lr

0801c334 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 801c334:	6281      	str	r1, [r0, #40]	; 0x28
 801c336:	4770      	bx	lr

0801c338 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 801c338:	b513      	push	{r0, r1, r4, lr}
 801c33a:	6803      	ldr	r3, [r0, #0]
 801c33c:	4604      	mov	r4, r0
 801c33e:	4601      	mov	r1, r0
 801c340:	4668      	mov	r0, sp
 801c342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c344:	4798      	blx	r3
 801c346:	6823      	ldr	r3, [r4, #0]
 801c348:	4669      	mov	r1, sp
 801c34a:	4620      	mov	r0, r4
 801c34c:	691b      	ldr	r3, [r3, #16]
 801c34e:	4798      	blx	r3
 801c350:	b002      	add	sp, #8
 801c352:	bd10      	pop	{r4, pc}

0801c354 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 801c354:	b510      	push	{r4, lr}
 801c356:	2200      	movs	r2, #0
 801c358:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 801c35c:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 801c360:	8002      	strh	r2, [r0, #0]
 801c362:	8042      	strh	r2, [r0, #2]
 801c364:	8084      	strh	r4, [r0, #4]
 801c366:	80c1      	strh	r1, [r0, #6]
 801c368:	bd10      	pop	{r4, pc}

0801c36a <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 801c36a:	2200      	movs	r2, #0
 801c36c:	8002      	strh	r2, [r0, #0]
 801c36e:	8042      	strh	r2, [r0, #2]
 801c370:	8082      	strh	r2, [r0, #4]
 801c372:	80c2      	strh	r2, [r0, #6]
 801c374:	4770      	bx	lr
	...

0801c378 <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 801c378:	b508      	push	{r3, lr}
 801c37a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801c37c:	b928      	cbnz	r0, 801c38a <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 801c37e:	4b03      	ldr	r3, [pc, #12]	; (801c38c <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 801c380:	2127      	movs	r1, #39	; 0x27
 801c382:	4a03      	ldr	r2, [pc, #12]	; (801c390 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 801c384:	4803      	ldr	r0, [pc, #12]	; (801c394 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 801c386:	f00e f9fb 	bl	802a780 <__assert_func>
 801c38a:	bd08      	pop	{r3, pc}
 801c38c:	0802e384 	.word	0x0802e384
 801c390:	0802e468 	.word	0x0802e468
 801c394:	0802e3ab 	.word	0x0802e3ab

0801c398 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 801c398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c39c:	b089      	sub	sp, #36	; 0x24
 801c39e:	4604      	mov	r4, r0
 801c3a0:	6808      	ldr	r0, [r1, #0]
 801c3a2:	f04f 0a00 	mov.w	sl, #0
 801c3a6:	6849      	ldr	r1, [r1, #4]
 801c3a8:	ab02      	add	r3, sp, #8
 801c3aa:	f04f 0b01 	mov.w	fp, #1
 801c3ae:	c303      	stmia	r3!, {r0, r1}
 801c3b0:	4b3f      	ldr	r3, [pc, #252]	; (801c4b0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x118>)
 801c3b2:	4621      	mov	r1, r4
 801c3b4:	a804      	add	r0, sp, #16
 801c3b6:	781b      	ldrb	r3, [r3, #0]
 801c3b8:	2b01      	cmp	r3, #1
 801c3ba:	6823      	ldr	r3, [r4, #0]
 801c3bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c3be:	bf1f      	itttt	ne
 801c3c0:	f10d 0906 	addne.w	r9, sp, #6
 801c3c4:	ae03      	addne	r6, sp, #12
 801c3c6:	f10d 050e 	addne.w	r5, sp, #14
 801c3ca:	f10d 080a 	addne.w	r8, sp, #10
 801c3ce:	bf01      	itttt	eq
 801c3d0:	f10d 090e 	addeq.w	r9, sp, #14
 801c3d4:	f10d 0606 	addeq.w	r6, sp, #6
 801c3d8:	ad03      	addeq	r5, sp, #12
 801c3da:	f10d 0808 	addeq.w	r8, sp, #8
 801c3de:	4798      	blx	r3
 801c3e0:	f9b5 3000 	ldrsh.w	r3, [r5]
 801c3e4:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 801c3e8:	2b00      	cmp	r3, #0
 801c3ea:	d056      	beq.n	801c49a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x102>
 801c3ec:	4293      	cmp	r3, r2
 801c3ee:	bfa8      	it	ge
 801c3f0:	4613      	movge	r3, r2
 801c3f2:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c3f6:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 801c3fa:	2f00      	cmp	r7, #0
 801c3fc:	dd34      	ble.n	801c468 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd0>
 801c3fe:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 801c402:	f8bd c014 	ldrh.w	ip, [sp, #20]
 801c406:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801c40a:	4484      	add	ip, r0
 801c40c:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801c410:	f9b6 e000 	ldrsh.w	lr, [r6]
 801c414:	fa0f fc8c 	sxth.w	ip, ip
 801c418:	f9b9 1000 	ldrsh.w	r1, [r9]
 801c41c:	f8ad 2018 	strh.w	r2, [sp, #24]
 801c420:	4562      	cmp	r2, ip
 801c422:	f8ad 301a 	strh.w	r3, [sp, #26]
 801c426:	f8ad e01c 	strh.w	lr, [sp, #28]
 801c42a:	f8ad 101e 	strh.w	r1, [sp, #30]
 801c42e:	da29      	bge.n	801c484 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801c430:	4472      	add	r2, lr
 801c432:	b212      	sxth	r2, r2
 801c434:	4290      	cmp	r0, r2
 801c436:	da25      	bge.n	801c484 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801c438:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801c43c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801c440:	4402      	add	r2, r0
 801c442:	b212      	sxth	r2, r2
 801c444:	4293      	cmp	r3, r2
 801c446:	da1d      	bge.n	801c484 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801c448:	440b      	add	r3, r1
 801c44a:	b21b      	sxth	r3, r3
 801c44c:	4298      	cmp	r0, r3
 801c44e:	da19      	bge.n	801c484 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801c450:	6823      	ldr	r3, [r4, #0]
 801c452:	a906      	add	r1, sp, #24
 801c454:	4620      	mov	r0, r4
 801c456:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c458:	4798      	blx	r3
 801c45a:	b998      	cbnz	r0, 801c484 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801c45c:	107f      	asrs	r7, r7, #1
 801c45e:	f04f 0a01 	mov.w	sl, #1
 801c462:	f8ad 7006 	strh.w	r7, [sp, #6]
 801c466:	e7c6      	b.n	801c3f6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 801c468:	d10c      	bne.n	801c484 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 801c46a:	f8ad b006 	strh.w	fp, [sp, #6]
 801c46e:	f8b8 2000 	ldrh.w	r2, [r8]
 801c472:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 801c476:	440a      	add	r2, r1
 801c478:	f8a8 2000 	strh.w	r2, [r8]
 801c47c:	882b      	ldrh	r3, [r5, #0]
 801c47e:	1a5b      	subs	r3, r3, r1
 801c480:	802b      	strh	r3, [r5, #0]
 801c482:	e7ad      	b.n	801c3e0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801c484:	f1ba 0f00 	cmp.w	sl, #0
 801c488:	d0f1      	beq.n	801c46e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 801c48a:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 801c48e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801c492:	429a      	cmp	r2, r3
 801c494:	bf08      	it	eq
 801c496:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 801c498:	e7e9      	b.n	801c46e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 801c49a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801c49e:	429a      	cmp	r2, r3
 801c4a0:	bf04      	itt	eq
 801c4a2:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 801c4a6:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 801c4a8:	b009      	add	sp, #36	; 0x24
 801c4aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c4ae:	bf00      	nop
 801c4b0:	2000bf5e 	.word	0x2000bf5e

0801c4b4 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 801c4b4:	2200      	movs	r2, #0
 801c4b6:	2101      	movs	r1, #1
 801c4b8:	8082      	strh	r2, [r0, #4]
 801c4ba:	80c2      	strh	r2, [r0, #6]
 801c4bc:	8102      	strh	r2, [r0, #8]
 801c4be:	8142      	strh	r2, [r0, #10]
 801c4c0:	8182      	strh	r2, [r0, #12]
 801c4c2:	81c2      	strh	r2, [r0, #14]
 801c4c4:	8202      	strh	r2, [r0, #16]
 801c4c6:	8242      	strh	r2, [r0, #18]
 801c4c8:	61c2      	str	r2, [r0, #28]
 801c4ca:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 801c4ce:	6282      	str	r2, [r0, #40]	; 0x28
 801c4d0:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 801c4d4:	4905      	ldr	r1, [pc, #20]	; (801c4ec <_ZN8touchgfx12CanvasWidgetC1Ev+0x38>)
 801c4d6:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801c4da:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801c4de:	6001      	str	r1, [r0, #0]
 801c4e0:	8582      	strh	r2, [r0, #44]	; 0x2c
 801c4e2:	22ff      	movs	r2, #255	; 0xff
 801c4e4:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 801c4e8:	4770      	bx	lr
 801c4ea:	bf00      	nop
 801c4ec:	0802e3f0 	.word	0x0802e3f0

0801c4f0 <_ZN8touchgfx12CanvasWidgetD1Ev>:
 801c4f0:	4770      	bx	lr

0801c4f2 <_ZNK8touchgfx4Line14getMinimalRectEv>:
 801c4f2:	f101 0368 	add.w	r3, r1, #104	; 0x68
 801c4f6:	4602      	mov	r2, r0
 801c4f8:	cb03      	ldmia	r3!, {r0, r1}
 801c4fa:	6010      	str	r0, [r2, #0]
 801c4fc:	4610      	mov	r0, r2
 801c4fe:	6051      	str	r1, [r2, #4]
 801c500:	4770      	bx	lr

0801c502 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801c502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c506:	f9b1 5004 	ldrsh.w	r5, [r1, #4]
 801c50a:	b395      	cbz	r5, 801c572 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 801c50c:	f9b1 c006 	ldrsh.w	ip, [r1, #6]
 801c510:	f1bc 0f00 	cmp.w	ip, #0
 801c514:	d02d      	beq.n	801c572 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 801c516:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801c51a:	f9b1 e000 	ldrsh.w	lr, [r1]
 801c51e:	b354      	cbz	r4, 801c576 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x74>
 801c520:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 801c524:	b33f      	cbz	r7, 801c576 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x74>
 801c526:	f9b0 8000 	ldrsh.w	r8, [r0]
 801c52a:	4475      	add	r5, lr
 801c52c:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801c530:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801c534:	45f0      	cmp	r8, lr
 801c536:	4646      	mov	r6, r8
 801c538:	4444      	add	r4, r8
 801c53a:	bfa8      	it	ge
 801c53c:	4676      	movge	r6, lr
 801c53e:	4293      	cmp	r3, r2
 801c540:	4619      	mov	r1, r3
 801c542:	443b      	add	r3, r7
 801c544:	bfa8      	it	ge
 801c546:	4611      	movge	r1, r2
 801c548:	4462      	add	r2, ip
 801c54a:	b22d      	sxth	r5, r5
 801c54c:	8006      	strh	r6, [r0, #0]
 801c54e:	b224      	sxth	r4, r4
 801c550:	8041      	strh	r1, [r0, #2]
 801c552:	b212      	sxth	r2, r2
 801c554:	b21b      	sxth	r3, r3
 801c556:	42a5      	cmp	r5, r4
 801c558:	bfac      	ite	ge
 801c55a:	ebc6 0405 	rsbge	r4, r6, r5
 801c55e:	ebc6 0404 	rsblt	r4, r6, r4
 801c562:	429a      	cmp	r2, r3
 801c564:	bfac      	ite	ge
 801c566:	ebc1 0302 	rsbge	r3, r1, r2
 801c56a:	ebc1 0303 	rsblt	r3, r1, r3
 801c56e:	8084      	strh	r4, [r0, #4]
 801c570:	80c3      	strh	r3, [r0, #6]
 801c572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c576:	f8a0 e000 	strh.w	lr, [r0]
 801c57a:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801c57e:	8043      	strh	r3, [r0, #2]
 801c580:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801c584:	8083      	strh	r3, [r0, #4]
 801c586:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801c58a:	e7f1      	b.n	801c570 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x6e>

0801c58c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 801c58c:	b507      	push	{r0, r1, r2, lr}
 801c58e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801c592:	ab01      	add	r3, sp, #4
 801c594:	6809      	ldr	r1, [r1, #0]
 801c596:	6800      	ldr	r0, [r0, #0]
 801c598:	f002 fe33 	bl	801f202 <_ZN8touchgfx6muldivElllRl>
 801c59c:	b003      	add	sp, #12
 801c59e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801c5a4 <_ZN8touchgfx7CWRUtil4sineEi>:
 801c5a4:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801c5a8:	fb90 f3f2 	sdiv	r3, r0, r2
 801c5ac:	fb03 0312 	mls	r3, r3, r2, r0
 801c5b0:	4413      	add	r3, r2
 801c5b2:	fb93 f0f2 	sdiv	r0, r3, r2
 801c5b6:	fb02 3010 	mls	r0, r2, r0, r3
 801c5ba:	4b0a      	ldr	r3, [pc, #40]	; (801c5e4 <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 801c5bc:	285a      	cmp	r0, #90	; 0x5a
 801c5be:	dc02      	bgt.n	801c5c6 <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 801c5c0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801c5c4:	4770      	bx	lr
 801c5c6:	28b4      	cmp	r0, #180	; 0xb4
 801c5c8:	dc02      	bgt.n	801c5d0 <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 801c5ca:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 801c5ce:	e7f7      	b.n	801c5c0 <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 801c5d0:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 801c5d4:	bfd4      	ite	le
 801c5d6:	38b4      	suble	r0, #180	; 0xb4
 801c5d8:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 801c5dc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801c5e0:	4240      	negs	r0, r0
 801c5e2:	4770      	bx	lr
 801c5e4:	0802e512 	.word	0x0802e512

0801c5e8 <_ZN8touchgfx7CWRUtil5isqrtEm>:
 801c5e8:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 801c5ec:	f04f 0300 	mov.w	r3, #0
 801c5f0:	bf2c      	ite	cs
 801c5f2:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 801c5f6:	f44f 4280 	movcc.w	r2, #16384	; 0x4000
 801c5fa:	1899      	adds	r1, r3, r2
 801c5fc:	4288      	cmp	r0, r1
 801c5fe:	bf24      	itt	cs
 801c600:	1853      	addcs	r3, r2, r1
 801c602:	1a40      	subcs	r0, r0, r1
 801c604:	0892      	lsrs	r2, r2, #2
 801c606:	ea4f 0353 	mov.w	r3, r3, lsr #1
 801c60a:	d1f6      	bne.n	801c5fa <_ZN8touchgfx7CWRUtil5isqrtEm+0x12>
 801c60c:	4618      	mov	r0, r3
 801c60e:	4770      	bx	lr

0801c610 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>:
 801c610:	2800      	cmp	r0, #0
 801c612:	b508      	push	{r3, lr}
 801c614:	da05      	bge.n	801c622 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x12>
 801c616:	4240      	negs	r0, r0
 801c618:	f7ff fffa 	bl	801c610 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 801c61c:	4240      	negs	r0, r0
 801c61e:	b240      	sxtb	r0, r0
 801c620:	bd08      	pop	{r3, pc}
 801c622:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801c626:	dc11      	bgt.n	801c64c <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x3c>
 801c628:	f5b0 7f35 	cmp.w	r0, #724	; 0x2d4
 801c62c:	dd09      	ble.n	801c642 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x32>
 801c62e:	4340      	muls	r0, r0
 801c630:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
 801c634:	f7ff ffd8 	bl	801c5e8 <_ZN8touchgfx7CWRUtil5isqrtEm>
 801c638:	f7ff ffea 	bl	801c610 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 801c63c:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 801c640:	e7ed      	b.n	801c61e <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0xe>
 801c642:	3003      	adds	r0, #3
 801c644:	4b02      	ldr	r3, [pc, #8]	; (801c650 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x40>)
 801c646:	10c0      	asrs	r0, r0, #3
 801c648:	5618      	ldrsb	r0, [r3, r0]
 801c64a:	e7e9      	b.n	801c620 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 801c64c:	2000      	movs	r0, #0
 801c64e:	e7e7      	b.n	801c620 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 801c650:	0802e4b6 	.word	0x0802e4b6

0801c654 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>:
 801c654:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c656:	460c      	mov	r4, r1
 801c658:	1e01      	subs	r1, r0, #0
 801c65a:	4615      	mov	r5, r2
 801c65c:	db01      	blt.n	801c662 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0xe>
 801c65e:	2c00      	cmp	r4, #0
 801c660:	da06      	bge.n	801c670 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x1c>
 801c662:	4b11      	ldr	r3, [pc, #68]	; (801c6a8 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x54>)
 801c664:	f240 3197 	movw	r1, #919	; 0x397
 801c668:	4a10      	ldr	r2, [pc, #64]	; (801c6ac <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x58>)
 801c66a:	4811      	ldr	r0, [pc, #68]	; (801c6b0 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x5c>)
 801c66c:	f00e f888 	bl	802a780 <__assert_func>
 801c670:	428c      	cmp	r4, r1
 801c672:	dd06      	ble.n	801c682 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2e>
 801c674:	4620      	mov	r0, r4
 801c676:	f7ff ffed 	bl	801c654 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801c67a:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 801c67e:	b003      	add	sp, #12
 801c680:	bd30      	pop	{r4, r5, pc}
 801c682:	4349      	muls	r1, r1
 801c684:	fb04 1004 	mla	r0, r4, r4, r1
 801c688:	f7ff ffae 	bl	801c5e8 <_ZN8touchgfx7CWRUtil5isqrtEm>
 801c68c:	6028      	str	r0, [r5, #0]
 801c68e:	2800      	cmp	r0, #0
 801c690:	d0f5      	beq.n	801c67e <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 801c692:	4602      	mov	r2, r0
 801c694:	ab01      	add	r3, sp, #4
 801c696:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801c69a:	4620      	mov	r0, r4
 801c69c:	f002 fdb1 	bl	801f202 <_ZN8touchgfx6muldivElllRl>
 801c6a0:	f7ff ffb6 	bl	801c610 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 801c6a4:	e7eb      	b.n	801c67e <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 801c6a6:	bf00      	nop
 801c6a8:	0802e5c8 	.word	0x0802e5c8
 801c6ac:	0802e690 	.word	0x0802e690
 801c6b0:	0802e5d9 	.word	0x0802e5d9

0801c6b4 <_ZN8touchgfx4LineC1Ev>:
 801c6b4:	b510      	push	{r4, lr}
 801c6b6:	4604      	mov	r4, r0
 801c6b8:	f7ff fefc 	bl	801c4b4 <_ZN8touchgfx12CanvasWidgetC1Ev>
 801c6bc:	4b0c      	ldr	r3, [pc, #48]	; (801c6f0 <_ZN8touchgfx4LineC1Ev+0x3c>)
 801c6be:	2220      	movs	r2, #32
 801c6c0:	4620      	mov	r0, r4
 801c6c2:	6023      	str	r3, [r4, #0]
 801c6c4:	2300      	movs	r3, #0
 801c6c6:	6422      	str	r2, [r4, #64]	; 0x40
 801c6c8:	2212      	movs	r2, #18
 801c6ca:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801c6ce:	6722      	str	r2, [r4, #112]	; 0x70
 801c6d0:	60a3      	str	r3, [r4, #8]
 801c6d2:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 801c6d6:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 801c6da:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801c6de:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
 801c6e2:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
 801c6e6:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
 801c6ea:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
 801c6ee:	bd10      	pop	{r4, pc}
 801c6f0:	0802e618 	.word	0x0802e618

0801c6f4 <_ZN8touchgfx4Line17updateCachedShapeEv>:
 801c6f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c6f8:	6b86      	ldr	r6, [r0, #56]	; 0x38
 801c6fa:	b085      	sub	sp, #20
 801c6fc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801c6fe:	4604      	mov	r4, r0
 801c700:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801c702:	6b42      	ldr	r2, [r0, #52]	; 0x34
 801c704:	1af6      	subs	r6, r6, r3
 801c706:	eba5 0502 	sub.w	r5, r5, r2
 801c70a:	f040 809b 	bne.w	801c844 <_ZN8touchgfx4Line17updateCachedShapeEv+0x150>
 801c70e:	b955      	cbnz	r5, 801c726 <_ZN8touchgfx4Line17updateCachedShapeEv+0x32>
 801c710:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 801c714:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801c718:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 801c71c:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801c720:	b005      	add	sp, #20
 801c722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c726:	ea85 77e5 	eor.w	r7, r5, r5, asr #31
 801c72a:	eba7 77e5 	sub.w	r7, r7, r5, asr #31
 801c72e:	f04f 0802 	mov.w	r8, #2
 801c732:	463a      	mov	r2, r7
 801c734:	4629      	mov	r1, r5
 801c736:	ab03      	add	r3, sp, #12
 801c738:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801c73a:	f002 fd62 	bl	801f202 <_ZN8touchgfx6muldivElllRl>
 801c73e:	ab03      	add	r3, sp, #12
 801c740:	463a      	mov	r2, r7
 801c742:	4631      	mov	r1, r6
 801c744:	fb90 f5f8 	sdiv	r5, r0, r8
 801c748:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801c74a:	f002 fd5a 	bl	801f202 <_ZN8touchgfx6muldivElllRl>
 801c74e:	f894 a044 	ldrb.w	sl, [r4, #68]	; 0x44
 801c752:	f8d4 e038 	ldr.w	lr, [r4, #56]	; 0x38
 801c756:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
 801c75a:	6b67      	ldr	r7, [r4, #52]	; 0x34
 801c75c:	fb90 f0f8 	sdiv	r0, r0, r8
 801c760:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 801c764:	eba8 0305 	sub.w	r3, r8, r5
 801c768:	f1ba 0f00 	cmp.w	sl, #0
 801c76c:	f040 80c3 	bne.w	801c8f6 <_ZN8touchgfx4Line17updateCachedShapeEv+0x202>
 801c770:	64a3      	str	r3, [r4, #72]	; 0x48
 801c772:	19c3      	adds	r3, r0, r7
 801c774:	65a3      	str	r3, [r4, #88]	; 0x58
 801c776:	ebae 0305 	sub.w	r3, lr, r5
 801c77a:	64e3      	str	r3, [r4, #76]	; 0x4c
 801c77c:	eb00 030c 	add.w	r3, r0, ip
 801c780:	65e3      	str	r3, [r4, #92]	; 0x5c
 801c782:	eb05 030e 	add.w	r3, r5, lr
 801c786:	6523      	str	r3, [r4, #80]	; 0x50
 801c788:	ebac 0300 	sub.w	r3, ip, r0
 801c78c:	6623      	str	r3, [r4, #96]	; 0x60
 801c78e:	eb05 0308 	add.w	r3, r5, r8
 801c792:	6563      	str	r3, [r4, #84]	; 0x54
 801c794:	1a3b      	subs	r3, r7, r0
 801c796:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 801c798:	f104 094c 	add.w	r9, r4, #76	; 0x4c
 801c79c:	6663      	str	r3, [r4, #100]	; 0x64
 801c79e:	f104 0358 	add.w	r3, r4, #88	; 0x58
 801c7a2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801c7a4:	4632      	mov	r2, r6
 801c7a6:	9301      	str	r3, [sp, #4]
 801c7a8:	9100      	str	r1, [sp, #0]
 801c7aa:	f859 bb04 	ldr.w	fp, [r9], #4
 801c7ae:	9b00      	ldr	r3, [sp, #0]
 801c7b0:	455e      	cmp	r6, fp
 801c7b2:	bfa8      	it	ge
 801c7b4:	465e      	movge	r6, fp
 801c7b6:	455a      	cmp	r2, fp
 801c7b8:	bfb8      	it	lt
 801c7ba:	465a      	movlt	r2, fp
 801c7bc:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 801c7c0:	4559      	cmp	r1, fp
 801c7c2:	bfa8      	it	ge
 801c7c4:	4659      	movge	r1, fp
 801c7c6:	455b      	cmp	r3, fp
 801c7c8:	bfb8      	it	lt
 801c7ca:	465b      	movlt	r3, fp
 801c7cc:	9300      	str	r3, [sp, #0]
 801c7ce:	9b01      	ldr	r3, [sp, #4]
 801c7d0:	454b      	cmp	r3, r9
 801c7d2:	d1ea      	bne.n	801c7aa <_ZN8touchgfx4Line17updateCachedShapeEv+0xb6>
 801c7d4:	f04f 0b20 	mov.w	fp, #32
 801c7d8:	b209      	sxth	r1, r1
 801c7da:	b212      	sxth	r2, r2
 801c7dc:	f1ba 0f01 	cmp.w	sl, #1
 801c7e0:	b236      	sxth	r6, r6
 801c7e2:	fb91 f9fb 	sdiv	r9, r1, fp
 801c7e6:	f9bd 1000 	ldrsh.w	r1, [sp]
 801c7ea:	f8a4 906a 	strh.w	r9, [r4, #106]	; 0x6a
 801c7ee:	fb92 f2fb 	sdiv	r2, r2, fp
 801c7f2:	fb91 f1fb 	sdiv	r1, r1, fp
 801c7f6:	fb96 f6fb 	sdiv	r6, r6, fp
 801c7fa:	f102 0201 	add.w	r2, r2, #1
 801c7fe:	f101 0101 	add.w	r1, r1, #1
 801c802:	f8a4 6068 	strh.w	r6, [r4, #104]	; 0x68
 801c806:	eba1 0109 	sub.w	r1, r1, r9
 801c80a:	eba2 0606 	sub.w	r6, r2, r6
 801c80e:	f8a4 106e 	strh.w	r1, [r4, #110]	; 0x6e
 801c812:	f8a4 606c 	strh.w	r6, [r4, #108]	; 0x6c
 801c816:	d183      	bne.n	801c720 <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 801c818:	eba8 0305 	sub.w	r3, r8, r5
 801c81c:	64a3      	str	r3, [r4, #72]	; 0x48
 801c81e:	19c3      	adds	r3, r0, r7
 801c820:	65a3      	str	r3, [r4, #88]	; 0x58
 801c822:	ebae 0305 	sub.w	r3, lr, r5
 801c826:	64e3      	str	r3, [r4, #76]	; 0x4c
 801c828:	eb00 030c 	add.w	r3, r0, ip
 801c82c:	65e3      	str	r3, [r4, #92]	; 0x5c
 801c82e:	eb05 030e 	add.w	r3, r5, lr
 801c832:	4445      	add	r5, r8
 801c834:	6523      	str	r3, [r4, #80]	; 0x50
 801c836:	ebac 0300 	sub.w	r3, ip, r0
 801c83a:	1a38      	subs	r0, r7, r0
 801c83c:	6565      	str	r5, [r4, #84]	; 0x54
 801c83e:	6623      	str	r3, [r4, #96]	; 0x60
 801c840:	6660      	str	r0, [r4, #100]	; 0x64
 801c842:	e76d      	b.n	801c720 <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 801c844:	ea86 77e6 	eor.w	r7, r6, r6, asr #31
 801c848:	eba7 77e6 	sub.w	r7, r7, r6, asr #31
 801c84c:	2d00      	cmp	r5, #0
 801c84e:	f43f af6e 	beq.w	801c72e <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 801c852:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 801c856:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 801c85a:	fb93 f2f7 	sdiv	r2, r3, r7
 801c85e:	fb07 3312 	mls	r3, r7, r2, r3
 801c862:	b34b      	cbz	r3, 801c8b8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c4>
 801c864:	fb97 f2f3 	sdiv	r2, r7, r3
 801c868:	fb03 7712 	mls	r7, r3, r2, r7
 801c86c:	2f00      	cmp	r7, #0
 801c86e:	d1f4      	bne.n	801c85a <_ZN8touchgfx4Line17updateCachedShapeEv+0x166>
 801c870:	2b01      	cmp	r3, #1
 801c872:	f24b 5204 	movw	r2, #46340	; 0xb504
 801c876:	bf18      	it	ne
 801c878:	fb96 f6f3 	sdivne	r6, r6, r3
 801c87c:	ea86 71e6 	eor.w	r1, r6, r6, asr #31
 801c880:	eba1 71e6 	sub.w	r1, r1, r6, asr #31
 801c884:	bf18      	it	ne
 801c886:	fb95 f5f3 	sdivne	r5, r5, r3
 801c88a:	4291      	cmp	r1, r2
 801c88c:	dd16      	ble.n	801c8bc <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c8>
 801c88e:	2d00      	cmp	r5, #0
 801c890:	da4d      	bge.n	801c92e <_ZN8touchgfx4Line17updateCachedShapeEv+0x23a>
 801c892:	4b29      	ldr	r3, [pc, #164]	; (801c938 <_ZN8touchgfx4Line17updateCachedShapeEv+0x244>)
 801c894:	429d      	cmp	r5, r3
 801c896:	da27      	bge.n	801c8e8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f4>
 801c898:	426a      	negs	r2, r5
 801c89a:	f24b 5304 	movw	r3, #46340	; 0xb504
 801c89e:	fb91 f1f3 	sdiv	r1, r1, r3
 801c8a2:	fb92 f3f3 	sdiv	r3, r2, r3
 801c8a6:	4299      	cmp	r1, r3
 801c8a8:	bfcc      	ite	gt
 801c8aa:	1c4b      	addgt	r3, r1, #1
 801c8ac:	3301      	addle	r3, #1
 801c8ae:	fb96 f6f3 	sdiv	r6, r6, r3
 801c8b2:	fb95 f5f3 	sdiv	r5, r5, r3
 801c8b6:	e00f      	b.n	801c8d8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1e4>
 801c8b8:	463b      	mov	r3, r7
 801c8ba:	e7d9      	b.n	801c870 <_ZN8touchgfx4Line17updateCachedShapeEv+0x17c>
 801c8bc:	2d00      	cmp	r5, #0
 801c8be:	fb92 f2f1 	sdiv	r2, r2, r1
 801c8c2:	da13      	bge.n	801c8ec <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f8>
 801c8c4:	4269      	negs	r1, r5
 801c8c6:	f24b 5304 	movw	r3, #46340	; 0xb504
 801c8ca:	fb93 f3f1 	sdiv	r3, r3, r1
 801c8ce:	429a      	cmp	r2, r3
 801c8d0:	bfa8      	it	ge
 801c8d2:	461a      	movge	r2, r3
 801c8d4:	4356      	muls	r6, r2
 801c8d6:	4355      	muls	r5, r2
 801c8d8:	fb05 f005 	mul.w	r0, r5, r5
 801c8dc:	fb06 0006 	mla	r0, r6, r6, r0
 801c8e0:	f7ff fe82 	bl	801c5e8 <_ZN8touchgfx7CWRUtil5isqrtEm>
 801c8e4:	4607      	mov	r7, r0
 801c8e6:	e722      	b.n	801c72e <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 801c8e8:	2200      	movs	r2, #0
 801c8ea:	e7eb      	b.n	801c8c4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d0>
 801c8ec:	4629      	mov	r1, r5
 801c8ee:	e7ea      	b.n	801c8c6 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 801c8f0:	4629      	mov	r1, r5
 801c8f2:	2200      	movs	r2, #0
 801c8f4:	e7e7      	b.n	801c8c6 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 801c8f6:	1a1b      	subs	r3, r3, r0
 801c8f8:	64a3      	str	r3, [r4, #72]	; 0x48
 801c8fa:	19c3      	adds	r3, r0, r7
 801c8fc:	1b5b      	subs	r3, r3, r5
 801c8fe:	65a3      	str	r3, [r4, #88]	; 0x58
 801c900:	ebae 0305 	sub.w	r3, lr, r5
 801c904:	4403      	add	r3, r0
 801c906:	64e3      	str	r3, [r4, #76]	; 0x4c
 801c908:	eb00 030c 	add.w	r3, r0, ip
 801c90c:	442b      	add	r3, r5
 801c90e:	65e3      	str	r3, [r4, #92]	; 0x5c
 801c910:	eb05 030e 	add.w	r3, r5, lr
 801c914:	4403      	add	r3, r0
 801c916:	6523      	str	r3, [r4, #80]	; 0x50
 801c918:	ebac 0300 	sub.w	r3, ip, r0
 801c91c:	442b      	add	r3, r5
 801c91e:	6623      	str	r3, [r4, #96]	; 0x60
 801c920:	eb05 0308 	add.w	r3, r5, r8
 801c924:	1a1b      	subs	r3, r3, r0
 801c926:	6563      	str	r3, [r4, #84]	; 0x54
 801c928:	1a3b      	subs	r3, r7, r0
 801c92a:	1b5b      	subs	r3, r3, r5
 801c92c:	e733      	b.n	801c796 <_ZN8touchgfx4Line17updateCachedShapeEv+0xa2>
 801c92e:	4295      	cmp	r5, r2
 801c930:	ddde      	ble.n	801c8f0 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1fc>
 801c932:	462a      	mov	r2, r5
 801c934:	e7b1      	b.n	801c89a <_ZN8touchgfx4Line17updateCachedShapeEv+0x1a6>
 801c936:	bf00      	nop
 801c938:	ffff4afc 	.word	0xffff4afc

0801c93c <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>:
 801c93c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801c93e:	428b      	cmp	r3, r1
 801c940:	d102      	bne.n	801c948 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0xc>
 801c942:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801c944:	4293      	cmp	r3, r2
 801c946:	d003      	beq.n	801c950 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0x14>
 801c948:	e9c0 120c 	strd	r1, r2, [r0, #48]	; 0x30
 801c94c:	f7ff bed2 	b.w	801c6f4 <_ZN8touchgfx4Line17updateCachedShapeEv>
 801c950:	4770      	bx	lr

0801c952 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>:
 801c952:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801c954:	428b      	cmp	r3, r1
 801c956:	d102      	bne.n	801c95e <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0xc>
 801c958:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 801c95a:	4293      	cmp	r3, r2
 801c95c:	d003      	beq.n	801c966 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0x14>
 801c95e:	e9c0 120e 	strd	r1, r2, [r0, #56]	; 0x38
 801c962:	f7ff bec7 	b.w	801c6f4 <_ZN8touchgfx4Line17updateCachedShapeEv>
 801c966:	4770      	bx	lr

0801c968 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>:
 801c968:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
 801c96c:	f7ff bec2 	b.w	801c6f4 <_ZN8touchgfx4Line17updateCachedShapeEv>

0801c970 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE>:
 801c970:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c974:	b0b3      	sub	sp, #204	; 0xcc
 801c976:	4604      	mov	r4, r0
 801c978:	460a      	mov	r2, r1
 801c97a:	4601      	mov	r1, r0
 801c97c:	a804      	add	r0, sp, #16
 801c97e:	ad32      	add	r5, sp, #200	; 0xc8
 801c980:	f00c fb32 	bl	8028fe8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 801c984:	2300      	movs	r3, #0
 801c986:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801c988:	f845 3dc4 	str.w	r3, [r5, #-196]!
 801c98c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c98e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801c990:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801c992:	1ac0      	subs	r0, r0, r3
 801c994:	eba1 0102 	sub.w	r1, r1, r2
 801c998:	d43c      	bmi.n	801ca14 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xa4>
 801c99a:	2900      	cmp	r1, #0
 801c99c:	462a      	mov	r2, r5
 801c99e:	db33      	blt.n	801ca08 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x98>
 801c9a0:	f7ff fe58 	bl	801c654 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801c9a4:	f100 075a 	add.w	r7, r0, #90	; 0x5a
 801c9a8:	6da2      	ldr	r2, [r4, #88]	; 0x58
 801c9aa:	a804      	add	r0, sp, #16
 801c9ac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801c9ae:	f00c fce4 	bl	802937a <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 801c9b2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 801c9b4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 801c9b6:	a804      	add	r0, sp, #16
 801c9b8:	f00c fc6e 	bl	8029298 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801c9bc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801c9c0:	2b01      	cmp	r3, #1
 801c9c2:	d137      	bne.n	801ca34 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 801c9c4:	6f26      	ldr	r6, [r4, #112]	; 0x70
 801c9c6:	2eb3      	cmp	r6, #179	; 0xb3
 801c9c8:	dc34      	bgt.n	801ca34 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 801c9ca:	eba7 0906 	sub.w	r9, r7, r6
 801c9ce:	4648      	mov	r0, r9
 801c9d0:	f7ff fde8 	bl	801c5a4 <_ZN8touchgfx7CWRUtil4sineEi>
 801c9d4:	a902      	add	r1, sp, #8
 801c9d6:	9002      	str	r0, [sp, #8]
 801c9d8:	4628      	mov	r0, r5
 801c9da:	f7ff fdd7 	bl	801c58c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801c9de:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801c9e0:	eb00 0801 	add.w	r8, r0, r1
 801c9e4:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 801c9e8:	f7ff fddc 	bl	801c5a4 <_ZN8touchgfx7CWRUtil4sineEi>
 801c9ec:	a903      	add	r1, sp, #12
 801c9ee:	9003      	str	r0, [sp, #12]
 801c9f0:	4628      	mov	r0, r5
 801c9f2:	f7ff fdcb 	bl	801c58c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801c9f6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801c9f8:	4641      	mov	r1, r8
 801c9fa:	1a12      	subs	r2, r2, r0
 801c9fc:	a804      	add	r0, sp, #16
 801c9fe:	f00c fc4b 	bl	8029298 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801ca02:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801ca04:	441e      	add	r6, r3
 801ca06:	e7de      	b.n	801c9c6 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x56>
 801ca08:	4249      	negs	r1, r1
 801ca0a:	f7ff fe23 	bl	801c654 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801ca0e:	f1c0 075a 	rsb	r7, r0, #90	; 0x5a
 801ca12:	e7c9      	b.n	801c9a8 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 801ca14:	2900      	cmp	r1, #0
 801ca16:	f1c0 0000 	rsb	r0, r0, #0
 801ca1a:	462a      	mov	r2, r5
 801ca1c:	db04      	blt.n	801ca28 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xb8>
 801ca1e:	f7ff fe19 	bl	801c654 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801ca22:	f5c0 7787 	rsb	r7, r0, #270	; 0x10e
 801ca26:	e7bf      	b.n	801c9a8 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 801ca28:	4249      	negs	r1, r1
 801ca2a:	f7ff fe13 	bl	801c654 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801ca2e:	f500 7787 	add.w	r7, r0, #270	; 0x10e
 801ca32:	e7b9      	b.n	801c9a8 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 801ca34:	6e22      	ldr	r2, [r4, #96]	; 0x60
 801ca36:	a804      	add	r0, sp, #16
 801ca38:	6d21      	ldr	r1, [r4, #80]	; 0x50
 801ca3a:	f00c fc2d 	bl	8029298 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801ca3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801ca40:	6d61      	ldr	r1, [r4, #84]	; 0x54
 801ca42:	a804      	add	r0, sp, #16
 801ca44:	f00c fc28 	bl	8029298 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801ca48:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801ca4c:	2b01      	cmp	r3, #1
 801ca4e:	d123      	bne.n	801ca98 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 801ca50:	6f26      	ldr	r6, [r4, #112]	; 0x70
 801ca52:	f1c6 06b4 	rsb	r6, r6, #180	; 0xb4
 801ca56:	2e00      	cmp	r6, #0
 801ca58:	dd1e      	ble.n	801ca98 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 801ca5a:	eb06 0907 	add.w	r9, r6, r7
 801ca5e:	4648      	mov	r0, r9
 801ca60:	f7ff fda0 	bl	801c5a4 <_ZN8touchgfx7CWRUtil4sineEi>
 801ca64:	a902      	add	r1, sp, #8
 801ca66:	9002      	str	r0, [sp, #8]
 801ca68:	4628      	mov	r0, r5
 801ca6a:	f7ff fd8f 	bl	801c58c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801ca6e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801ca70:	eb00 0801 	add.w	r8, r0, r1
 801ca74:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 801ca78:	f7ff fd94 	bl	801c5a4 <_ZN8touchgfx7CWRUtil4sineEi>
 801ca7c:	a903      	add	r1, sp, #12
 801ca7e:	9003      	str	r0, [sp, #12]
 801ca80:	4628      	mov	r0, r5
 801ca82:	f7ff fd83 	bl	801c58c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801ca86:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801ca88:	4641      	mov	r1, r8
 801ca8a:	1a12      	subs	r2, r2, r0
 801ca8c:	a804      	add	r0, sp, #16
 801ca8e:	f00c fc03 	bl	8029298 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801ca92:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801ca94:	1af6      	subs	r6, r6, r3
 801ca96:	e7de      	b.n	801ca56 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xe6>
 801ca98:	a804      	add	r0, sp, #16
 801ca9a:	f00c fd72 	bl	8029582 <_ZN8touchgfx6Canvas6renderEv>
 801ca9e:	4604      	mov	r4, r0
 801caa0:	a804      	add	r0, sp, #16
 801caa2:	f00c fdaf 	bl	8029604 <_ZN8touchgfx6CanvasD1Ev>
 801caa6:	4620      	mov	r0, r4
 801caa8:	b033      	add	sp, #204	; 0xcc
 801caaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801caae <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 801caae:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 801cab2:	4770      	bx	lr

0801cab4 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 801cab4:	b570      	push	{r4, r5, r6, lr}
 801cab6:	790b      	ldrb	r3, [r1, #4]
 801cab8:	4604      	mov	r4, r0
 801caba:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 801cabe:	460e      	mov	r6, r1
 801cac0:	2b00      	cmp	r3, #0
 801cac2:	bf0c      	ite	eq
 801cac4:	2301      	moveq	r3, #1
 801cac6:	2300      	movne	r3, #0
 801cac8:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 801cacc:	d110      	bne.n	801caf0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801cace:	b185      	cbz	r5, 801caf2 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3e>
 801cad0:	7933      	ldrb	r3, [r6, #4]
 801cad2:	2b01      	cmp	r3, #1
 801cad4:	d113      	bne.n	801cafe <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 801cad6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801cad8:	b188      	cbz	r0, 801cafe <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 801cada:	6803      	ldr	r3, [r0, #0]
 801cadc:	68db      	ldr	r3, [r3, #12]
 801cade:	4798      	blx	r3
 801cae0:	b168      	cbz	r0, 801cafe <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 801cae2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801cae4:	4621      	mov	r1, r4
 801cae6:	6803      	ldr	r3, [r0, #0]
 801cae8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801caec:	689b      	ldr	r3, [r3, #8]
 801caee:	4718      	bx	r3
 801caf0:	b12d      	cbz	r5, 801cafe <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 801caf2:	6823      	ldr	r3, [r4, #0]
 801caf4:	4620      	mov	r0, r4
 801caf6:	695b      	ldr	r3, [r3, #20]
 801caf8:	4798      	blx	r3
 801cafa:	2d00      	cmp	r5, #0
 801cafc:	d1e8      	bne.n	801cad0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 801cafe:	bd70      	pop	{r4, r5, r6, pc}

0801cb00 <_ZN8touchgfx14SnapshotWidgetD1Ev>:
 801cb00:	4770      	bx	lr

0801cb02 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>:
 801cb02:	6803      	ldr	r3, [r0, #0]
 801cb04:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 801cb08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801cb0a:	4718      	bx	r3

0801cb0c <_ZN8touchgfx14SnapshotWidgetD0Ev>:
 801cb0c:	b510      	push	{r4, lr}
 801cb0e:	4604      	mov	r4, r0
 801cb10:	212c      	movs	r1, #44	; 0x2c
 801cb12:	f00d fe0a 	bl	802a72a <_ZdlPvj>
 801cb16:	4620      	mov	r0, r4
 801cb18:	bd10      	pop	{r4, pc}

0801cb1a <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv>:
 801cb1a:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801cb1e:	2bff      	cmp	r3, #255	; 0xff
 801cb20:	b510      	push	{r4, lr}
 801cb22:	d104      	bne.n	801cb2e <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x14>
 801cb24:	8cca      	ldrh	r2, [r1, #38]	; 0x26
 801cb26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801cb2a:	429a      	cmp	r2, r3
 801cb2c:	d105      	bne.n	801cb3a <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x20>
 801cb2e:	2300      	movs	r3, #0
 801cb30:	8003      	strh	r3, [r0, #0]
 801cb32:	8043      	strh	r3, [r0, #2]
 801cb34:	8083      	strh	r3, [r0, #4]
 801cb36:	80c3      	strh	r3, [r0, #6]
 801cb38:	bd10      	pop	{r4, pc}
 801cb3a:	2300      	movs	r3, #0
 801cb3c:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 801cb40:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
 801cb44:	8003      	strh	r3, [r0, #0]
 801cb46:	8043      	strh	r3, [r0, #2]
 801cb48:	8084      	strh	r4, [r0, #4]
 801cb4a:	80c2      	strh	r2, [r0, #6]
 801cb4c:	e7f4      	b.n	801cb38 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x1e>

0801cb4e <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE>:
 801cb4e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cb52:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 801cb56:	b087      	sub	sp, #28
 801cb58:	4604      	mov	r4, r0
 801cb5a:	4689      	mov	r9, r1
 801cb5c:	b363      	cbz	r3, 801cbb8 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 801cb5e:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801cb60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801cb64:	429a      	cmp	r2, r3
 801cb66:	d027      	beq.n	801cbb8 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 801cb68:	ad06      	add	r5, sp, #24
 801cb6a:	2700      	movs	r7, #0
 801cb6c:	f825 2d0c 	strh.w	r2, [r5, #-12]!
 801cb70:	4628      	mov	r0, r5
 801cb72:	f004 f8b3 	bl	8020cdc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801cb76:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801cb7a:	a904      	add	r1, sp, #16
 801cb7c:	f8ad 0014 	strh.w	r0, [sp, #20]
 801cb80:	f8ad 3016 	strh.w	r3, [sp, #22]
 801cb84:	4620      	mov	r0, r4
 801cb86:	6823      	ldr	r3, [r4, #0]
 801cb88:	9704      	str	r7, [sp, #16]
 801cb8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cb8c:	4798      	blx	r3
 801cb8e:	f7f4 f91f 	bl	8010dd0 <_ZN8touchgfx3HAL3lcdEv>
 801cb92:	6803      	ldr	r3, [r0, #0]
 801cb94:	4606      	mov	r6, r0
 801cb96:	4628      	mov	r0, r5
 801cb98:	f8d3 8010 	ldr.w	r8, [r3, #16]
 801cb9c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801cb9e:	f8ad 300c 	strh.w	r3, [sp, #12]
 801cba2:	f004 f9a3 	bl	8020eec <_ZNK8touchgfx6Bitmap7getDataEv>
 801cba6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801cbaa:	4601      	mov	r1, r0
 801cbac:	9701      	str	r7, [sp, #4]
 801cbae:	aa04      	add	r2, sp, #16
 801cbb0:	9300      	str	r3, [sp, #0]
 801cbb2:	4630      	mov	r0, r6
 801cbb4:	464b      	mov	r3, r9
 801cbb6:	47c0      	blx	r8
 801cbb8:	b007      	add	sp, #28
 801cbba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801cbbe <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt>:
 801cbbe:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801cbc0:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801cbc4:	460d      	mov	r5, r1
 801cbc6:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 801cbca:	2100      	movs	r1, #0
 801cbcc:	f8ad 3006 	strh.w	r3, [sp, #6]
 801cbd0:	4604      	mov	r4, r0
 801cbd2:	6803      	ldr	r3, [r0, #0]
 801cbd4:	f8ad 2004 	strh.w	r2, [sp, #4]
 801cbd8:	6a1b      	ldr	r3, [r3, #32]
 801cbda:	9100      	str	r1, [sp, #0]
 801cbdc:	4669      	mov	r1, sp
 801cbde:	4798      	blx	r3
 801cbe0:	4621      	mov	r1, r4
 801cbe2:	a802      	add	r0, sp, #8
 801cbe4:	f002 fa73 	bl	801f0ce <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cbe8:	f7f4 f8f2 	bl	8010dd0 <_ZN8touchgfx3HAL3lcdEv>
 801cbec:	6803      	ldr	r3, [r0, #0]
 801cbee:	aa02      	add	r2, sp, #8
 801cbf0:	4669      	mov	r1, sp
 801cbf2:	699e      	ldr	r6, [r3, #24]
 801cbf4:	462b      	mov	r3, r5
 801cbf6:	47b0      	blx	r6
 801cbf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801cbfc:	2800      	cmp	r0, #0
 801cbfe:	bf08      	it	eq
 801cc00:	461d      	moveq	r5, r3
 801cc02:	84e5      	strh	r5, [r4, #38]	; 0x26
 801cc04:	b004      	add	sp, #16
 801cc06:	bd70      	pop	{r4, r5, r6, pc}

0801cc08 <_ZN8touchgfx14SnapshotWidgetC1Ev>:
 801cc08:	2200      	movs	r2, #0
 801cc0a:	8082      	strh	r2, [r0, #4]
 801cc0c:	80c2      	strh	r2, [r0, #6]
 801cc0e:	8102      	strh	r2, [r0, #8]
 801cc10:	8142      	strh	r2, [r0, #10]
 801cc12:	8182      	strh	r2, [r0, #12]
 801cc14:	81c2      	strh	r2, [r0, #14]
 801cc16:	8202      	strh	r2, [r0, #16]
 801cc18:	8242      	strh	r2, [r0, #18]
 801cc1a:	61c2      	str	r2, [r0, #28]
 801cc1c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 801cc20:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801cc24:	2201      	movs	r2, #1
 801cc26:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 801cc2a:	4a04      	ldr	r2, [pc, #16]	; (801cc3c <_ZN8touchgfx14SnapshotWidgetC1Ev+0x34>)
 801cc2c:	6002      	str	r2, [r0, #0]
 801cc2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801cc32:	84c2      	strh	r2, [r0, #38]	; 0x26
 801cc34:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801cc38:	4770      	bx	lr
 801cc3a:	bf00      	nop
 801cc3c:	0802e770 	.word	0x0802e770

0801cc40 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 801cc40:	b570      	push	{r4, r5, r6, lr}
 801cc42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801cc46:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801cc48:	4604      	mov	r4, r0
 801cc4a:	429a      	cmp	r2, r3
 801cc4c:	d00c      	beq.n	801cc68 <_ZN8touchgfx8TextArea13getTextHeightEv+0x28>
 801cc4e:	f850 3b26 	ldr.w	r3, [r0], #38
 801cc52:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 801cc54:	f7f6 f866 	bl	8012d24 <_ZNK8touchgfx9TypedText7getTextEv>
 801cc58:	2300      	movs	r3, #0
 801cc5a:	4601      	mov	r1, r0
 801cc5c:	46ac      	mov	ip, r5
 801cc5e:	4620      	mov	r0, r4
 801cc60:	461a      	mov	r2, r3
 801cc62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cc66:	4760      	bx	ip
 801cc68:	2000      	movs	r0, #0
 801cc6a:	bd70      	pop	{r4, r5, r6, pc}

0801cc6c <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 801cc6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801cc6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801cc72:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801cc74:	429a      	cmp	r2, r3
 801cc76:	d016      	beq.n	801cca6 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x3a>
 801cc78:	f100 0426 	add.w	r4, r0, #38	; 0x26
 801cc7c:	4620      	mov	r0, r4
 801cc7e:	f7f3 fc7f 	bl	8010580 <_ZNK8touchgfx9TypedText7getFontEv>
 801cc82:	6803      	ldr	r3, [r0, #0]
 801cc84:	4605      	mov	r5, r0
 801cc86:	4620      	mov	r0, r4
 801cc88:	69de      	ldr	r6, [r3, #28]
 801cc8a:	f7f3 fc95 	bl	80105b8 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801cc8e:	4607      	mov	r7, r0
 801cc90:	4620      	mov	r0, r4
 801cc92:	f7f6 f847 	bl	8012d24 <_ZNK8touchgfx9TypedText7getTextEv>
 801cc96:	2300      	movs	r3, #0
 801cc98:	4602      	mov	r2, r0
 801cc9a:	4639      	mov	r1, r7
 801cc9c:	9300      	str	r3, [sp, #0]
 801cc9e:	4628      	mov	r0, r5
 801cca0:	47b0      	blx	r6
 801cca2:	b003      	add	sp, #12
 801cca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cca6:	2000      	movs	r0, #0
 801cca8:	e7fb      	b.n	801cca2 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x36>

0801ccaa <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 801ccaa:	b40e      	push	{r1, r2, r3}
 801ccac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ccb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ccb4:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801ccb6:	b09b      	sub	sp, #108	; 0x6c
 801ccb8:	4604      	mov	r4, r0
 801ccba:	429a      	cmp	r2, r3
 801ccbc:	d03f      	beq.n	801cd3e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x94>
 801ccbe:	f100 0726 	add.w	r7, r0, #38	; 0x26
 801ccc2:	ab22      	add	r3, sp, #136	; 0x88
 801ccc4:	4638      	mov	r0, r7
 801ccc6:	9303      	str	r3, [sp, #12]
 801ccc8:	f7f3 fc5a 	bl	8010580 <_ZNK8touchgfx9TypedText7getFontEv>
 801cccc:	6803      	ldr	r3, [r0, #0]
 801ccce:	4680      	mov	r8, r0
 801ccd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ccd2:	4798      	blx	r3
 801ccd4:	4606      	mov	r6, r0
 801ccd6:	b205      	sxth	r5, r0
 801ccd8:	a804      	add	r0, sp, #16
 801ccda:	f003 f8d3 	bl	801fe84 <_ZN8touchgfx12TextProviderC1Ev>
 801ccde:	f8d8 3000 	ldr.w	r3, [r8]
 801cce2:	4640      	mov	r0, r8
 801cce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cce6:	4798      	blx	r3
 801cce8:	9a03      	ldr	r2, [sp, #12]
 801ccea:	4603      	mov	r3, r0
 801ccec:	9921      	ldr	r1, [sp, #132]	; 0x84
 801ccee:	a804      	add	r0, sp, #16
 801ccf0:	f003 f8e5 	bl	801febe <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801ccf4:	4638      	mov	r0, r7
 801ccf6:	f7f3 fc5f 	bl	80105b8 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801ccfa:	4680      	mov	r8, r0
 801ccfc:	4638      	mov	r0, r7
 801ccfe:	f7f3 fc3f 	bl	8010580 <_ZNK8touchgfx9TypedText7getFontEv>
 801cd02:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801cd06:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 801cd0a:	4642      	mov	r2, r8
 801cd0c:	9300      	str	r3, [sp, #0]
 801cd0e:	4603      	mov	r3, r0
 801cd10:	a804      	add	r0, sp, #16
 801cd12:	f001 f930 	bl	801df76 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 801cd16:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 801cd1a:	b203      	sxth	r3, r0
 801cd1c:	18a9      	adds	r1, r5, r2
 801cd1e:	2900      	cmp	r1, #0
 801cd20:	dd0b      	ble.n	801cd3a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x90>
 801cd22:	3b01      	subs	r3, #1
 801cd24:	fb13 f302 	smulbb	r3, r3, r2
 801cd28:	fb16 3300 	smlabb	r3, r6, r0, r3
 801cd2c:	b21d      	sxth	r5, r3
 801cd2e:	4628      	mov	r0, r5
 801cd30:	b01b      	add	sp, #108	; 0x6c
 801cd32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cd36:	b003      	add	sp, #12
 801cd38:	4770      	bx	lr
 801cd3a:	2b00      	cmp	r3, #0
 801cd3c:	dcf7      	bgt.n	801cd2e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>
 801cd3e:	2500      	movs	r5, #0
 801cd40:	e7f5      	b.n	801cd2e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>
	...

0801cd44 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 801cd44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801cd4c:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 801cd4e:	b08d      	sub	sp, #52	; 0x34
 801cd50:	4604      	mov	r4, r0
 801cd52:	429e      	cmp	r6, r3
 801cd54:	4688      	mov	r8, r1
 801cd56:	d04b      	beq.n	801cdf0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 801cd58:	f100 0526 	add.w	r5, r0, #38	; 0x26
 801cd5c:	4628      	mov	r0, r5
 801cd5e:	f7f3 fc0f 	bl	8010580 <_ZNK8touchgfx9TypedText7getFontEv>
 801cd62:	4607      	mov	r7, r0
 801cd64:	2800      	cmp	r0, #0
 801cd66:	d043      	beq.n	801cdf0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 801cd68:	4628      	mov	r0, r5
 801cd6a:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 801cd6e:	f7f3 fc3b 	bl	80105e8 <_ZNK8touchgfx9TypedText11assertValidEv>
 801cd72:	4b21      	ldr	r3, [pc, #132]	; (801cdf8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb4>)
 801cd74:	4628      	mov	r0, r5
 801cd76:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 801cd7a:	681b      	ldr	r3, [r3, #0]
 801cd7c:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 801cd80:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 801cd84:	785e      	ldrb	r6, [r3, #1]
 801cd86:	f7f3 fc17 	bl	80105b8 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801cd8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801cd8c:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 801cd90:	f3c6 0601 	ubfx	r6, r6, #0, #2
 801cd94:	9309      	str	r3, [sp, #36]	; 0x24
 801cd96:	4b19      	ldr	r3, [pc, #100]	; (801cdfc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb8>)
 801cd98:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 801cd9c:	681b      	ldr	r3, [r3, #0]
 801cd9e:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 801cda2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801cda6:	9707      	str	r7, [sp, #28]
 801cda8:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 801cdac:	f88d 6020 	strb.w	r6, [sp, #32]
 801cdb0:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 801cdb4:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 801cdb8:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801cdbc:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 801cdc0:	b10a      	cbz	r2, 801cdc6 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x82>
 801cdc2:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 801cdc4:	b906      	cbnz	r6, 801cdc8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x84>
 801cdc6:	689e      	ldr	r6, [r3, #8]
 801cdc8:	af05      	add	r7, sp, #20
 801cdca:	4621      	mov	r1, r4
 801cdcc:	4638      	mov	r0, r7
 801cdce:	f002 f97e 	bl	801f0ce <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cdd2:	4628      	mov	r0, r5
 801cdd4:	f7f5 ffa6 	bl	8012d24 <_ZNK8touchgfx9TypedText7getTextEv>
 801cdd8:	2300      	movs	r3, #0
 801cdda:	9001      	str	r0, [sp, #4]
 801cddc:	4630      	mov	r0, r6
 801cdde:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801cde2:	ab07      	add	r3, sp, #28
 801cde4:	9300      	str	r3, [sp, #0]
 801cde6:	4643      	mov	r3, r8
 801cde8:	e897 0006 	ldmia.w	r7, {r1, r2}
 801cdec:	f000 fe90 	bl	801db10 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801cdf0:	b00d      	add	sp, #52	; 0x34
 801cdf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cdf6:	bf00      	nop
 801cdf8:	2000bff8 	.word	0x2000bff8
 801cdfc:	2000bf68 	.word	0x2000bf68

0801ce00 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 801ce00:	b570      	push	{r4, r5, r6, lr}
 801ce02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ce06:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801ce08:	4604      	mov	r4, r0
 801ce0a:	429a      	cmp	r2, r3
 801ce0c:	d021      	beq.n	801ce52 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x52>
 801ce0e:	6803      	ldr	r3, [r0, #0]
 801ce10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ce12:	4798      	blx	r3
 801ce14:	6823      	ldr	r3, [r4, #0]
 801ce16:	4605      	mov	r5, r0
 801ce18:	4620      	mov	r0, r4
 801ce1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801ce1c:	4798      	blx	r3
 801ce1e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 801ce22:	4606      	mov	r6, r0
 801ce24:	b22d      	sxth	r5, r5
 801ce26:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801ce2a:	6823      	ldr	r3, [r4, #0]
 801ce2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ce2e:	d109      	bne.n	801ce44 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x44>
 801ce30:	4629      	mov	r1, r5
 801ce32:	4620      	mov	r0, r4
 801ce34:	4798      	blx	r3
 801ce36:	6823      	ldr	r3, [r4, #0]
 801ce38:	4631      	mov	r1, r6
 801ce3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ce3c:	4620      	mov	r0, r4
 801ce3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ce42:	4718      	bx	r3
 801ce44:	4601      	mov	r1, r0
 801ce46:	4620      	mov	r0, r4
 801ce48:	4798      	blx	r3
 801ce4a:	6823      	ldr	r3, [r4, #0]
 801ce4c:	4629      	mov	r1, r5
 801ce4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ce50:	e7f4      	b.n	801ce3c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>
 801ce52:	bd70      	pop	{r4, r5, r6, pc}

0801ce54 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 801ce54:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 801ce58:	84c1      	strh	r1, [r0, #38]	; 0x26
 801ce5a:	b922      	cbnz	r2, 801ce66 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 801ce5c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801ce60:	b90b      	cbnz	r3, 801ce66 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 801ce62:	f7ff bfcd 	b.w	801ce00 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 801ce66:	4770      	bx	lr

0801ce68 <_ZNK8touchgfx3Box12getSolidRectEv>:
 801ce68:	2300      	movs	r3, #0
 801ce6a:	8003      	strh	r3, [r0, #0]
 801ce6c:	8043      	strh	r3, [r0, #2]
 801ce6e:	8083      	strh	r3, [r0, #4]
 801ce70:	80c3      	strh	r3, [r0, #6]
 801ce72:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 801ce76:	b91b      	cbnz	r3, 801ce80 <_ZNK8touchgfx3Box12getSolidRectEv+0x18>
 801ce78:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801ce7c:	2bff      	cmp	r3, #255	; 0xff
 801ce7e:	d103      	bne.n	801ce88 <_ZNK8touchgfx3Box12getSolidRectEv+0x20>
 801ce80:	890b      	ldrh	r3, [r1, #8]
 801ce82:	8083      	strh	r3, [r0, #4]
 801ce84:	894b      	ldrh	r3, [r1, #10]
 801ce86:	80c3      	strh	r3, [r0, #6]
 801ce88:	4770      	bx	lr
	...

0801ce8c <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801ce8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ce8e:	4604      	mov	r4, r0
 801ce90:	466b      	mov	r3, sp
 801ce92:	6808      	ldr	r0, [r1, #0]
 801ce94:	6849      	ldr	r1, [r1, #4]
 801ce96:	c303      	stmia	r3!, {r0, r1}
 801ce98:	6823      	ldr	r3, [r4, #0]
 801ce9a:	4669      	mov	r1, sp
 801ce9c:	4620      	mov	r0, r4
 801ce9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cea0:	4798      	blx	r3
 801cea2:	4b08      	ldr	r3, [pc, #32]	; (801cec4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 801cea4:	681b      	ldr	r3, [r3, #0]
 801cea6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801ceaa:	b10a      	cbz	r2, 801ceb0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801ceac:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801ceae:	b900      	cbnz	r0, 801ceb2 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 801ceb0:	6898      	ldr	r0, [r3, #8]
 801ceb2:	6803      	ldr	r3, [r0, #0]
 801ceb4:	4669      	mov	r1, sp
 801ceb6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801ceb8:	69dd      	ldr	r5, [r3, #28]
 801ceba:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801cebe:	47a8      	blx	r5
 801cec0:	b003      	add	sp, #12
 801cec2:	bd30      	pop	{r4, r5, pc}
 801cec4:	2000bf68 	.word	0x2000bf68

0801cec8 <_ZN8touchgfx10TiledImage9setOffsetEss>:
 801cec8:	b570      	push	{r4, r5, r6, lr}
 801ceca:	6803      	ldr	r3, [r0, #0]
 801cecc:	4604      	mov	r4, r0
 801cece:	4615      	mov	r5, r2
 801ced0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801ced2:	4798      	blx	r3
 801ced4:	6823      	ldr	r3, [r4, #0]
 801ced6:	4629      	mov	r1, r5
 801ced8:	4620      	mov	r0, r4
 801ceda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cedc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cee0:	4718      	bx	r3

0801cee2 <_ZN8touchgfx10TiledImage9getOffsetERsS1_>:
 801cee2:	b570      	push	{r4, r5, r6, lr}
 801cee4:	6803      	ldr	r3, [r0, #0]
 801cee6:	4604      	mov	r4, r0
 801cee8:	460e      	mov	r6, r1
 801ceea:	4615      	mov	r5, r2
 801ceec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ceee:	4798      	blx	r3
 801cef0:	8030      	strh	r0, [r6, #0]
 801cef2:	6823      	ldr	r3, [r4, #0]
 801cef4:	4620      	mov	r0, r4
 801cef6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801cef8:	4798      	blx	r3
 801cefa:	8028      	strh	r0, [r5, #0]
 801cefc:	bd70      	pop	{r4, r5, r6, pc}

0801cefe <_ZN8touchgfx10TiledImage10getXOffsetEv>:
 801cefe:	f9b0 002a 	ldrsh.w	r0, [r0, #42]	; 0x2a
 801cf02:	4770      	bx	lr

0801cf04 <_ZN8touchgfx10TiledImage10getYOffsetEv>:
 801cf04:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 801cf08:	4770      	bx	lr

0801cf0a <_ZN8touchgfx10TiledImageD1Ev>:
 801cf0a:	4770      	bx	lr

0801cf0c <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>:
 801cf0c:	b510      	push	{r4, lr}
 801cf0e:	4604      	mov	r4, r0
 801cf10:	f000 fb5a 	bl	801d5c8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801cf14:	6823      	ldr	r3, [r4, #0]
 801cf16:	4620      	mov	r0, r4
 801cf18:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 801cf1c:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	; 0x2a
 801cf20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801cf22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cf26:	4718      	bx	r3

0801cf28 <_ZN8touchgfx10TiledImage10setXOffsetEs>:
 801cf28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cf2a:	f100 0626 	add.w	r6, r0, #38	; 0x26
 801cf2e:	4605      	mov	r5, r0
 801cf30:	8541      	strh	r1, [r0, #42]	; 0x2a
 801cf32:	4630      	mov	r0, r6
 801cf34:	f003 fed2 	bl	8020cdc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801cf38:	b1a0      	cbz	r0, 801cf64 <_ZN8touchgfx10TiledImage10setXOffsetEs+0x3c>
 801cf3a:	f9b5 702a 	ldrsh.w	r7, [r5, #42]	; 0x2a
 801cf3e:	4630      	mov	r0, r6
 801cf40:	f003 fecc 	bl	8020cdc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801cf44:	fb97 f4f0 	sdiv	r4, r7, r0
 801cf48:	fb04 7410 	mls	r4, r4, r0, r7
 801cf4c:	4630      	mov	r0, r6
 801cf4e:	f003 fec5 	bl	8020cdc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801cf52:	4404      	add	r4, r0
 801cf54:	4630      	mov	r0, r6
 801cf56:	f003 fec1 	bl	8020cdc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801cf5a:	fb94 f3f0 	sdiv	r3, r4, r0
 801cf5e:	fb03 4010 	mls	r0, r3, r0, r4
 801cf62:	8568      	strh	r0, [r5, #42]	; 0x2a
 801cf64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801cf66 <_ZN8touchgfx10TiledImage10setYOffsetEs>:
 801cf66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cf68:	f100 0626 	add.w	r6, r0, #38	; 0x26
 801cf6c:	4605      	mov	r5, r0
 801cf6e:	8581      	strh	r1, [r0, #44]	; 0x2c
 801cf70:	4630      	mov	r0, r6
 801cf72:	f003 feed 	bl	8020d50 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801cf76:	b1a0      	cbz	r0, 801cfa2 <_ZN8touchgfx10TiledImage10setYOffsetEs+0x3c>
 801cf78:	f9b5 702c 	ldrsh.w	r7, [r5, #44]	; 0x2c
 801cf7c:	4630      	mov	r0, r6
 801cf7e:	f003 fee7 	bl	8020d50 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801cf82:	fb97 f4f0 	sdiv	r4, r7, r0
 801cf86:	fb04 7410 	mls	r4, r4, r0, r7
 801cf8a:	4630      	mov	r0, r6
 801cf8c:	f003 fee0 	bl	8020d50 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801cf90:	4404      	add	r4, r0
 801cf92:	4630      	mov	r0, r6
 801cf94:	f003 fedc 	bl	8020d50 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801cf98:	fb94 f3f0 	sdiv	r3, r4, r0
 801cf9c:	fb03 4010 	mls	r0, r3, r0, r4
 801cfa0:	85a8      	strh	r0, [r5, #44]	; 0x2c
 801cfa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801cfa4 <_ZN8touchgfx10TiledImageD0Ev>:
 801cfa4:	b510      	push	{r4, lr}
 801cfa6:	4604      	mov	r4, r0
 801cfa8:	2130      	movs	r1, #48	; 0x30
 801cfaa:	f00d fbbe 	bl	802a72a <_ZdlPvj>
 801cfae:	4620      	mov	r0, r4
 801cfb0:	bd10      	pop	{r4, pc}
	...

0801cfb4 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE>:
 801cfb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cfb8:	f100 0b26 	add.w	fp, r0, #38	; 0x26
 801cfbc:	b093      	sub	sp, #76	; 0x4c
 801cfbe:	4607      	mov	r7, r0
 801cfc0:	460e      	mov	r6, r1
 801cfc2:	4658      	mov	r0, fp
 801cfc4:	f003 fe8a 	bl	8020cdc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801cfc8:	4605      	mov	r5, r0
 801cfca:	4658      	mov	r0, fp
 801cfcc:	f003 fec0 	bl	8020d50 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801cfd0:	4680      	mov	r8, r0
 801cfd2:	2d00      	cmp	r5, #0
 801cfd4:	f000 80c5 	beq.w	801d162 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 801cfd8:	2800      	cmp	r0, #0
 801cfda:	f000 80c2 	beq.w	801d162 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 801cfde:	2300      	movs	r3, #0
 801cfe0:	a90e      	add	r1, sp, #56	; 0x38
 801cfe2:	4638      	mov	r0, r7
 801cfe4:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 801cfe8:	683b      	ldr	r3, [r7, #0]
 801cfea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cfec:	4798      	blx	r3
 801cfee:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 801cff2:	f9b6 3000 	ldrsh.w	r3, [r6]
 801cff6:	88b1      	ldrh	r1, [r6, #4]
 801cff8:	189c      	adds	r4, r3, r2
 801cffa:	440b      	add	r3, r1
 801cffc:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 801d000:	fa02 f383 	sxtah	r3, r2, r3
 801d004:	3b01      	subs	r3, #1
 801d006:	fb93 f3f5 	sdiv	r3, r3, r5
 801d00a:	fb94 f4f5 	sdiv	r4, r4, r5
 801d00e:	fb13 f305 	smulbb	r3, r3, r5
 801d012:	fb14 f405 	smulbb	r4, r4, r5
 801d016:	b21b      	sxth	r3, r3
 801d018:	1aa4      	subs	r4, r4, r2
 801d01a:	930b      	str	r3, [sp, #44]	; 0x2c
 801d01c:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801d020:	b2a4      	uxth	r4, r4
 801d022:	185a      	adds	r2, r3, r1
 801d024:	fb92 f2f8 	sdiv	r2, r2, r8
 801d028:	fb12 f208 	smulbb	r2, r2, r8
 801d02c:	1a52      	subs	r2, r2, r1
 801d02e:	b212      	sxth	r2, r2
 801d030:	920c      	str	r2, [sp, #48]	; 0x30
 801d032:	88f2      	ldrh	r2, [r6, #6]
 801d034:	4413      	add	r3, r2
 801d036:	fa01 f383 	sxtah	r3, r1, r3
 801d03a:	3b01      	subs	r3, #1
 801d03c:	fb93 f3f8 	sdiv	r3, r3, r8
 801d040:	fb13 f308 	smulbb	r3, r3, r8
 801d044:	b21b      	sxth	r3, r3
 801d046:	930d      	str	r3, [sp, #52]	; 0x34
 801d048:	1963      	adds	r3, r4, r5
 801d04a:	fa1f fa83 	uxth.w	sl, r3
 801d04e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d050:	b223      	sxth	r3, r4
 801d052:	4293      	cmp	r3, r2
 801d054:	9305      	str	r3, [sp, #20]
 801d056:	f300 8084 	bgt.w	801d162 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 801d05a:	fa0f f38a 	sxth.w	r3, sl
 801d05e:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 801d062:	9309      	str	r3, [sp, #36]	; 0x24
 801d064:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d066:	4599      	cmp	r9, r3
 801d068:	dd04      	ble.n	801d074 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xc0>
 801d06a:	442c      	add	r4, r5
 801d06c:	eb05 030a 	add.w	r3, r5, sl
 801d070:	b2a4      	uxth	r4, r4
 801d072:	e7ea      	b.n	801d04a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x96>
 801d074:	f9b6 c000 	ldrsh.w	ip, [r6]
 801d078:	88b2      	ldrh	r2, [r6, #4]
 801d07a:	4462      	add	r2, ip
 801d07c:	b292      	uxth	r2, r2
 801d07e:	b213      	sxth	r3, r2
 801d080:	9308      	str	r3, [sp, #32]
 801d082:	fa1f f389 	uxth.w	r3, r9
 801d086:	eb08 0103 	add.w	r1, r8, r3
 801d08a:	9307      	str	r3, [sp, #28]
 801d08c:	b289      	uxth	r1, r1
 801d08e:	b208      	sxth	r0, r1
 801d090:	9006      	str	r0, [sp, #24]
 801d092:	9805      	ldr	r0, [sp, #20]
 801d094:	4603      	mov	r3, r0
 801d096:	9808      	ldr	r0, [sp, #32]
 801d098:	4283      	cmp	r3, r0
 801d09a:	da5e      	bge.n	801d15a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 801d09c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d09e:	4584      	cmp	ip, r0
 801d0a0:	da5b      	bge.n	801d15a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 801d0a2:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 801d0a6:	f8b6 e006 	ldrh.w	lr, [r6, #6]
 801d0aa:	4486      	add	lr, r0
 801d0ac:	fa1f fe8e 	uxth.w	lr, lr
 801d0b0:	fa0f f38e 	sxth.w	r3, lr
 801d0b4:	4599      	cmp	r9, r3
 801d0b6:	930a      	str	r3, [sp, #40]	; 0x28
 801d0b8:	da4f      	bge.n	801d15a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 801d0ba:	9b06      	ldr	r3, [sp, #24]
 801d0bc:	4298      	cmp	r0, r3
 801d0be:	da4c      	bge.n	801d15a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 801d0c0:	9b05      	ldr	r3, [sp, #20]
 801d0c2:	459c      	cmp	ip, r3
 801d0c4:	bfb8      	it	lt
 801d0c6:	469c      	movlt	ip, r3
 801d0c8:	4548      	cmp	r0, r9
 801d0ca:	9b08      	ldr	r3, [sp, #32]
 801d0cc:	bfb8      	it	lt
 801d0ce:	4648      	movlt	r0, r9
 801d0d0:	f8ad c040 	strh.w	ip, [sp, #64]	; 0x40
 801d0d4:	4699      	mov	r9, r3
 801d0d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d0d8:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
 801d0dc:	4599      	cmp	r9, r3
 801d0de:	bfc8      	it	gt
 801d0e0:	4652      	movgt	r2, sl
 801d0e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d0e4:	eba2 020c 	sub.w	r2, r2, ip
 801d0e8:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 801d0ec:	9a06      	ldr	r2, [sp, #24]
 801d0ee:	4293      	cmp	r3, r2
 801d0f0:	bfd8      	it	le
 801d0f2:	4671      	movle	r1, lr
 801d0f4:	1a09      	subs	r1, r1, r0
 801d0f6:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
 801d0fa:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801d0fe:	9b07      	ldr	r3, [sp, #28]
 801d100:	1b12      	subs	r2, r2, r4
 801d102:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801d106:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801d10a:	1ad2      	subs	r2, r2, r3
 801d10c:	4b16      	ldr	r3, [pc, #88]	; (801d168 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1b4>)
 801d10e:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801d112:	681a      	ldr	r2, [r3, #0]
 801d114:	f892 1076 	ldrb.w	r1, [r2, #118]	; 0x76
 801d118:	b109      	cbz	r1, 801d11e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16a>
 801d11a:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 801d11c:	b900      	cbnz	r0, 801d120 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16c>
 801d11e:	6890      	ldr	r0, [r2, #8]
 801d120:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801d124:	f04f 0c01 	mov.w	ip, #1
 801d128:	9b07      	ldr	r3, [sp, #28]
 801d12a:	6801      	ldr	r1, [r0, #0]
 801d12c:	4413      	add	r3, r2
 801d12e:	f8cd c008 	str.w	ip, [sp, #8]
 801d132:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801d136:	f897 c028 	ldrb.w	ip, [r7, #40]	; 0x28
 801d13a:	b21b      	sxth	r3, r3
 801d13c:	4422      	add	r2, r4
 801d13e:	f8cd c004 	str.w	ip, [sp, #4]
 801d142:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 801d146:	b212      	sxth	r2, r2
 801d148:	f8cd c000 	str.w	ip, [sp]
 801d14c:	f8d1 900c 	ldr.w	r9, [r1, #12]
 801d150:	4659      	mov	r1, fp
 801d152:	47c8      	blx	r9
 801d154:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801d158:	e784      	b.n	801d064 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xb0>
 801d15a:	2300      	movs	r3, #0
 801d15c:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 801d160:	e7cb      	b.n	801d0fa <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x146>
 801d162:	b013      	add	sp, #76	; 0x4c
 801d164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d168:	2000bf68 	.word	0x2000bf68

0801d16c <_ZNK8touchgfx10TiledImage12getSolidRectEv>:
 801d16c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d170:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801d174:	4606      	mov	r6, r0
 801d176:	4689      	mov	r9, r1
 801d178:	2bff      	cmp	r3, #255	; 0xff
 801d17a:	d008      	beq.n	801d18e <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x22>
 801d17c:	2300      	movs	r3, #0
 801d17e:	8003      	strh	r3, [r0, #0]
 801d180:	8043      	strh	r3, [r0, #2]
 801d182:	8083      	strh	r3, [r0, #4]
 801d184:	4630      	mov	r0, r6
 801d186:	80f3      	strh	r3, [r6, #6]
 801d188:	b003      	add	sp, #12
 801d18a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d18e:	f101 0b26 	add.w	fp, r1, #38	; 0x26
 801d192:	4668      	mov	r0, sp
 801d194:	4659      	mov	r1, fp
 801d196:	f003 fe15 	bl	8020dc4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801d19a:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 801d19e:	4658      	mov	r0, fp
 801d1a0:	f9bd 7000 	ldrsh.w	r7, [sp]
 801d1a4:	f9bd a002 	ldrsh.w	sl, [sp, #2]
 801d1a8:	f9bd 8006 	ldrsh.w	r8, [sp, #6]
 801d1ac:	f003 fd96 	bl	8020cdc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d1b0:	4284      	cmp	r4, r0
 801d1b2:	d10d      	bne.n	801d1d0 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x64>
 801d1b4:	f9b9 5008 	ldrsh.w	r5, [r9, #8]
 801d1b8:	4658      	mov	r0, fp
 801d1ba:	f003 fdc9 	bl	8020d50 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801d1be:	4580      	cmp	r8, r0
 801d1c0:	d12a      	bne.n	801d218 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xac>
 801d1c2:	f9b9 300a 	ldrsh.w	r3, [r9, #10]
 801d1c6:	8037      	strh	r7, [r6, #0]
 801d1c8:	f8a6 a002 	strh.w	sl, [r6, #2]
 801d1cc:	80b5      	strh	r5, [r6, #4]
 801d1ce:	e7d9      	b.n	801d184 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x18>
 801d1d0:	f8b9 502a 	ldrh.w	r5, [r9, #42]	; 0x2a
 801d1d4:	4658      	mov	r0, fp
 801d1d6:	f003 fd81 	bl	8020cdc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d1da:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
 801d1de:	1b7f      	subs	r7, r7, r5
 801d1e0:	b2a3      	uxth	r3, r4
 801d1e2:	b2bd      	uxth	r5, r7
 801d1e4:	b22f      	sxth	r7, r5
 801d1e6:	4428      	add	r0, r5
 801d1e8:	2f00      	cmp	r7, #0
 801d1ea:	b280      	uxth	r0, r0
 801d1ec:	bfb8      	it	lt
 801d1ee:	18ed      	addlt	r5, r5, r3
 801d1f0:	4403      	add	r3, r0
 801d1f2:	bfac      	ite	ge
 801d1f4:	4625      	movge	r5, r4
 801d1f6:	2700      	movlt	r7, #0
 801d1f8:	b29b      	uxth	r3, r3
 801d1fa:	bfb8      	it	lt
 801d1fc:	b22d      	sxthlt	r5, r5
 801d1fe:	b219      	sxth	r1, r3
 801d200:	bfb8      	it	lt
 801d202:	ea25 75e5 	biclt.w	r5, r5, r5, asr #31
 801d206:	4291      	cmp	r1, r2
 801d208:	bfc4      	itt	gt
 801d20a:	1a9c      	subgt	r4, r3, r2
 801d20c:	b224      	sxthgt	r4, r4
 801d20e:	42ac      	cmp	r4, r5
 801d210:	bfc4      	itt	gt
 801d212:	b207      	sxthgt	r7, r0
 801d214:	4625      	movgt	r5, r4
 801d216:	e7cf      	b.n	801d1b8 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x4c>
 801d218:	f8b9 402c 	ldrh.w	r4, [r9, #44]	; 0x2c
 801d21c:	4658      	mov	r0, fp
 801d21e:	f003 fd97 	bl	8020d50 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801d222:	f9b9 100a 	ldrsh.w	r1, [r9, #10]
 801d226:	ebaa 0404 	sub.w	r4, sl, r4
 801d22a:	fa1f f288 	uxth.w	r2, r8
 801d22e:	b2a4      	uxth	r4, r4
 801d230:	fa0f fa84 	sxth.w	sl, r4
 801d234:	4420      	add	r0, r4
 801d236:	f1ba 0f00 	cmp.w	sl, #0
 801d23a:	b280      	uxth	r0, r0
 801d23c:	bfb8      	it	lt
 801d23e:	18a3      	addlt	r3, r4, r2
 801d240:	4402      	add	r2, r0
 801d242:	bfac      	ite	ge
 801d244:	4643      	movge	r3, r8
 801d246:	f04f 0a00 	movlt.w	sl, #0
 801d24a:	b292      	uxth	r2, r2
 801d24c:	bfb8      	it	lt
 801d24e:	b21b      	sxthlt	r3, r3
 801d250:	b214      	sxth	r4, r2
 801d252:	bfb8      	it	lt
 801d254:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801d258:	428c      	cmp	r4, r1
 801d25a:	bfc4      	itt	gt
 801d25c:	eba2 0801 	subgt.w	r8, r2, r1
 801d260:	fa0f f888 	sxthgt.w	r8, r8
 801d264:	4543      	cmp	r3, r8
 801d266:	bfbc      	itt	lt
 801d268:	fa0f fa80 	sxthlt.w	sl, r0
 801d26c:	4643      	movlt	r3, r8
 801d26e:	e7aa      	b.n	801d1c6 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x5a>

0801d270 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 801d270:	b538      	push	{r3, r4, r5, lr}
 801d272:	880b      	ldrh	r3, [r1, #0]
 801d274:	4605      	mov	r5, r0
 801d276:	4604      	mov	r4, r0
 801d278:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801d27a:	8813      	ldrh	r3, [r2, #0]
 801d27c:	f825 3f30 	strh.w	r3, [r5, #48]!
 801d280:	4628      	mov	r0, r5
 801d282:	f003 fd2b 	bl	8020cdc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d286:	8120      	strh	r0, [r4, #8]
 801d288:	4628      	mov	r0, r5
 801d28a:	f003 fd61 	bl	8020d50 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801d28e:	8160      	strh	r0, [r4, #10]
 801d290:	bd38      	pop	{r3, r4, r5, pc}

0801d292 <_ZNK8touchgfx6Button12getSolidRectEv>:
 801d292:	b510      	push	{r4, lr}
 801d294:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 801d298:	4604      	mov	r4, r0
 801d29a:	2bff      	cmp	r3, #255	; 0xff
 801d29c:	d006      	beq.n	801d2ac <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 801d29e:	2300      	movs	r3, #0
 801d2a0:	8003      	strh	r3, [r0, #0]
 801d2a2:	8043      	strh	r3, [r0, #2]
 801d2a4:	8083      	strh	r3, [r0, #4]
 801d2a6:	80c3      	strh	r3, [r0, #6]
 801d2a8:	4620      	mov	r0, r4
 801d2aa:	bd10      	pop	{r4, pc}
 801d2ac:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 801d2b0:	b11b      	cbz	r3, 801d2ba <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 801d2b2:	3130      	adds	r1, #48	; 0x30
 801d2b4:	f003 fd86 	bl	8020dc4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801d2b8:	e7f6      	b.n	801d2a8 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 801d2ba:	312e      	adds	r1, #46	; 0x2e
 801d2bc:	e7fa      	b.n	801d2b4 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

0801d2c0 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 801d2c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d2c4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 801d2c8:	b08b      	sub	sp, #44	; 0x2c
 801d2ca:	4604      	mov	r4, r0
 801d2cc:	4689      	mov	r9, r1
 801d2ce:	2b00      	cmp	r3, #0
 801d2d0:	d043      	beq.n	801d35a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9a>
 801d2d2:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801d2d4:	a805      	add	r0, sp, #20
 801d2d6:	f8ad 3014 	strh.w	r3, [sp, #20]
 801d2da:	f003 fcff 	bl	8020cdc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d2de:	4607      	mov	r7, r0
 801d2e0:	fa0f f880 	sxth.w	r8, r0
 801d2e4:	a805      	add	r0, sp, #20
 801d2e6:	f003 fd33 	bl	8020d50 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801d2ea:	f9b9 6000 	ldrsh.w	r6, [r9]
 801d2ee:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 801d2f2:	2300      	movs	r3, #0
 801d2f4:	fa0f fc80 	sxth.w	ip, r0
 801d2f8:	4432      	add	r2, r6
 801d2fa:	9306      	str	r3, [sp, #24]
 801d2fc:	b292      	uxth	r2, r2
 801d2fe:	fa0f fe82 	sxth.w	lr, r2
 801d302:	459e      	cmp	lr, r3
 801d304:	dd2b      	ble.n	801d35e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9e>
 801d306:	45b0      	cmp	r8, r6
 801d308:	dd29      	ble.n	801d35e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9e>
 801d30a:	f9b9 5002 	ldrsh.w	r5, [r9, #2]
 801d30e:	f8b9 3006 	ldrh.w	r3, [r9, #6]
 801d312:	442b      	add	r3, r5
 801d314:	b29b      	uxth	r3, r3
 801d316:	b219      	sxth	r1, r3
 801d318:	2900      	cmp	r1, #0
 801d31a:	dd20      	ble.n	801d35e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9e>
 801d31c:	45ac      	cmp	ip, r5
 801d31e:	dd1e      	ble.n	801d35e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9e>
 801d320:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 801d324:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801d328:	45f0      	cmp	r8, lr
 801d32a:	bfb8      	it	lt
 801d32c:	463a      	movlt	r2, r7
 801d32e:	458c      	cmp	ip, r1
 801d330:	bfb8      	it	lt
 801d332:	4603      	movlt	r3, r0
 801d334:	f8ad 6018 	strh.w	r6, [sp, #24]
 801d338:	1b92      	subs	r2, r2, r6
 801d33a:	1b5b      	subs	r3, r3, r5
 801d33c:	f8ad 501a 	strh.w	r5, [sp, #26]
 801d340:	f8ad 201c 	strh.w	r2, [sp, #28]
 801d344:	f8ad 301e 	strh.w	r3, [sp, #30]
 801d348:	4b1d      	ldr	r3, [pc, #116]	; (801d3c0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>)
 801d34a:	681b      	ldr	r3, [r3, #0]
 801d34c:	b953      	cbnz	r3, 801d364 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa4>
 801d34e:	4b1d      	ldr	r3, [pc, #116]	; (801d3c4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x104>)
 801d350:	21b8      	movs	r1, #184	; 0xb8
 801d352:	4a1d      	ldr	r2, [pc, #116]	; (801d3c8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 801d354:	481d      	ldr	r0, [pc, #116]	; (801d3cc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 801d356:	f00d fa13 	bl	802a780 <__assert_func>
 801d35a:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801d35c:	e7ba      	b.n	801d2d4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 801d35e:	2300      	movs	r3, #0
 801d360:	9307      	str	r3, [sp, #28]
 801d362:	e7f1      	b.n	801d348 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x88>
 801d364:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801d368:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d36c:	429a      	cmp	r2, r3
 801d36e:	d024      	beq.n	801d3ba <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xfa>
 801d370:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801d374:	b30b      	cbz	r3, 801d3ba <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xfa>
 801d376:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801d37a:	b1f3      	cbz	r3, 801d3ba <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xfa>
 801d37c:	2300      	movs	r3, #0
 801d37e:	a908      	add	r1, sp, #32
 801d380:	4620      	mov	r0, r4
 801d382:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801d386:	6823      	ldr	r3, [r4, #0]
 801d388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d38a:	4798      	blx	r3
 801d38c:	4b10      	ldr	r3, [pc, #64]	; (801d3d0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 801d38e:	681b      	ldr	r3, [r3, #0]
 801d390:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801d394:	b10a      	cbz	r2, 801d39a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 801d396:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801d398:	b900      	cbnz	r0, 801d39c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xdc>
 801d39a:	6898      	ldr	r0, [r3, #8]
 801d39c:	2501      	movs	r5, #1
 801d39e:	6801      	ldr	r1, [r0, #0]
 801d3a0:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801d3a4:	9502      	str	r5, [sp, #8]
 801d3a6:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 801d3aa:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801d3ae:	9401      	str	r4, [sp, #4]
 801d3b0:	ac06      	add	r4, sp, #24
 801d3b2:	9400      	str	r4, [sp, #0]
 801d3b4:	68cc      	ldr	r4, [r1, #12]
 801d3b6:	a905      	add	r1, sp, #20
 801d3b8:	47a0      	blx	r4
 801d3ba:	b00b      	add	sp, #44	; 0x2c
 801d3bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d3c0:	2000c030 	.word	0x2000c030
 801d3c4:	0802d660 	.word	0x0802d660
 801d3c8:	0802e9b0 	.word	0x0802e9b0
 801d3cc:	0802d69c 	.word	0x0802d69c
 801d3d0:	2000bf68 	.word	0x2000bf68

0801d3d4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 801d3d4:	b570      	push	{r4, r5, r6, lr}
 801d3d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d3da:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801d3dc:	4604      	mov	r4, r0
 801d3de:	429a      	cmp	r2, r3
 801d3e0:	d00c      	beq.n	801d3fc <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x28>
 801d3e2:	f850 3b26 	ldr.w	r3, [r0], #38
 801d3e6:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 801d3e8:	f7f5 fc9c 	bl	8012d24 <_ZNK8touchgfx9TypedText7getTextEv>
 801d3ec:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801d3ee:	4601      	mov	r1, r0
 801d3f0:	46ac      	mov	ip, r5
 801d3f2:	4620      	mov	r0, r4
 801d3f4:	2300      	movs	r3, #0
 801d3f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d3fa:	4760      	bx	ip
 801d3fc:	2000      	movs	r0, #0
 801d3fe:	bd70      	pop	{r4, r5, r6, pc}

0801d400 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 801d400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d404:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d408:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 801d40a:	b08d      	sub	sp, #52	; 0x34
 801d40c:	4604      	mov	r4, r0
 801d40e:	429e      	cmp	r6, r3
 801d410:	460f      	mov	r7, r1
 801d412:	d048      	beq.n	801d4a6 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 801d414:	f100 0526 	add.w	r5, r0, #38	; 0x26
 801d418:	4628      	mov	r0, r5
 801d41a:	f7f3 f8b1 	bl	8010580 <_ZNK8touchgfx9TypedText7getFontEv>
 801d41e:	4680      	mov	r8, r0
 801d420:	2800      	cmp	r0, #0
 801d422:	d040      	beq.n	801d4a6 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 801d424:	4628      	mov	r0, r5
 801d426:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 801d42a:	f7f3 f8dd 	bl	80105e8 <_ZNK8touchgfx9TypedText11assertValidEv>
 801d42e:	4b1f      	ldr	r3, [pc, #124]	; (801d4ac <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xac>)
 801d430:	4628      	mov	r0, r5
 801d432:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 801d436:	681b      	ldr	r3, [r3, #0]
 801d438:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 801d43c:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 801d440:	785e      	ldrb	r6, [r3, #1]
 801d442:	f7f3 f8b9 	bl	80105b8 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801d446:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 801d44a:	f3c6 0601 	ubfx	r6, r6, #0, #2
 801d44e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801d450:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 801d454:	f88d 6020 	strb.w	r6, [sp, #32]
 801d458:	ae05      	add	r6, sp, #20
 801d45a:	9309      	str	r3, [sp, #36]	; 0x24
 801d45c:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 801d460:	f8cd 801c 	str.w	r8, [sp, #28]
 801d464:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 801d468:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 801d46c:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 801d470:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 801d474:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801d478:	f7f3 fcaa 	bl	8010dd0 <_ZN8touchgfx3HAL3lcdEv>
 801d47c:	4621      	mov	r1, r4
 801d47e:	4680      	mov	r8, r0
 801d480:	4630      	mov	r0, r6
 801d482:	f001 fe24 	bl	801f0ce <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d486:	4628      	mov	r0, r5
 801d488:	f7f5 fc4c 	bl	8012d24 <_ZNK8touchgfx9TypedText7getTextEv>
 801d48c:	2300      	movs	r3, #0
 801d48e:	9303      	str	r3, [sp, #12]
 801d490:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d492:	e9cd 0301 	strd	r0, r3, [sp, #4]
 801d496:	ab07      	add	r3, sp, #28
 801d498:	4640      	mov	r0, r8
 801d49a:	9300      	str	r3, [sp, #0]
 801d49c:	463b      	mov	r3, r7
 801d49e:	e896 0006 	ldmia.w	r6, {r1, r2}
 801d4a2:	f000 fb35 	bl	801db10 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801d4a6:	b00d      	add	sp, #52	; 0x34
 801d4a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d4ac:	2000bff8 	.word	0x2000bff8

0801d4b0 <_ZNK8touchgfx13BoxWithBorder12getSolidRectEv>:
 801d4b0:	2300      	movs	r3, #0
 801d4b2:	8083      	strh	r3, [r0, #4]
 801d4b4:	80c3      	strh	r3, [r0, #6]
 801d4b6:	8003      	strh	r3, [r0, #0]
 801d4b8:	8043      	strh	r3, [r0, #2]
 801d4ba:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801d4be:	2bff      	cmp	r3, #255	; 0xff
 801d4c0:	bf01      	itttt	eq
 801d4c2:	890b      	ldrheq	r3, [r1, #8]
 801d4c4:	8083      	strheq	r3, [r0, #4]
 801d4c6:	894b      	ldrheq	r3, [r1, #10]
 801d4c8:	80c3      	strheq	r3, [r0, #6]
 801d4ca:	4770      	bx	lr

0801d4cc <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 801d4cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d4d0:	4604      	mov	r4, r0
 801d4d2:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 801d4d6:	460e      	mov	r6, r1
 801d4d8:	b08c      	sub	sp, #48	; 0x30
 801d4da:	8962      	ldrh	r2, [r4, #10]
 801d4dc:	b218      	sxth	r0, r3
 801d4de:	8921      	ldrh	r1, [r4, #8]
 801d4e0:	005b      	lsls	r3, r3, #1
 801d4e2:	f8ad 0010 	strh.w	r0, [sp, #16]
 801d4e6:	1ac9      	subs	r1, r1, r3
 801d4e8:	1ad3      	subs	r3, r2, r3
 801d4ea:	f8ad 0012 	strh.w	r0, [sp, #18]
 801d4ee:	f8ad 1014 	strh.w	r1, [sp, #20]
 801d4f2:	6830      	ldr	r0, [r6, #0]
 801d4f4:	6871      	ldr	r1, [r6, #4]
 801d4f6:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d4fa:	466b      	mov	r3, sp
 801d4fc:	c303      	stmia	r3!, {r0, r1}
 801d4fe:	a904      	add	r1, sp, #16
 801d500:	4668      	mov	r0, sp
 801d502:	f7fd fdbf 	bl	801b084 <_ZN8touchgfx4RectaNERKS0_>
 801d506:	6823      	ldr	r3, [r4, #0]
 801d508:	4669      	mov	r1, sp
 801d50a:	4620      	mov	r0, r4
 801d50c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d50e:	4798      	blx	r3
 801d510:	f7f3 fc5e 	bl	8010dd0 <_ZN8touchgfx3HAL3lcdEv>
 801d514:	6803      	ldr	r3, [r0, #0]
 801d516:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801d518:	4669      	mov	r1, sp
 801d51a:	69dd      	ldr	r5, [r3, #28]
 801d51c:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801d520:	47a8      	blx	r5
 801d522:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 801d526:	2a00      	cmp	r2, #0
 801d528:	d04b      	beq.n	801d5c2 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf6>
 801d52a:	b211      	sxth	r1, r2
 801d52c:	8963      	ldrh	r3, [r4, #10]
 801d52e:	b292      	uxth	r2, r2
 801d530:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 801d534:	2500      	movs	r5, #0
 801d536:	f8ad 1016 	strh.w	r1, [sp, #22]
 801d53a:	1a9f      	subs	r7, r3, r2
 801d53c:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801d540:	1a82      	subs	r2, r0, r2
 801d542:	9504      	str	r5, [sp, #16]
 801d544:	b21b      	sxth	r3, r3
 801d546:	f8ad 701a 	strh.w	r7, [sp, #26]
 801d54a:	af02      	add	r7, sp, #8
 801d54c:	f8ad 0014 	strh.w	r0, [sp, #20]
 801d550:	f8ad 5018 	strh.w	r5, [sp, #24]
 801d554:	f8ad 001c 	strh.w	r0, [sp, #28]
 801d558:	f8ad 101e 	strh.w	r1, [sp, #30]
 801d55c:	f8ad 5020 	strh.w	r5, [sp, #32]
 801d560:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 801d564:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 801d568:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801d56c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801d570:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
 801d574:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 801d578:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801d57c:	ab04      	add	r3, sp, #16
 801d57e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801d582:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d586:	e887 0003 	stmia.w	r7, {r0, r1}
 801d58a:	4631      	mov	r1, r6
 801d58c:	4638      	mov	r0, r7
 801d58e:	f7fd fd79 	bl	801b084 <_ZN8touchgfx4RectaNERKS0_>
 801d592:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801d596:	b18b      	cbz	r3, 801d5bc <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 801d598:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801d59c:	b173      	cbz	r3, 801d5bc <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 801d59e:	6823      	ldr	r3, [r4, #0]
 801d5a0:	4639      	mov	r1, r7
 801d5a2:	4620      	mov	r0, r4
 801d5a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d5a6:	4798      	blx	r3
 801d5a8:	f7f3 fc12 	bl	8010dd0 <_ZN8touchgfx3HAL3lcdEv>
 801d5ac:	6803      	ldr	r3, [r0, #0]
 801d5ae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801d5b0:	4639      	mov	r1, r7
 801d5b2:	f8d3 801c 	ldr.w	r8, [r3, #28]
 801d5b6:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801d5ba:	47c0      	blx	r8
 801d5bc:	3501      	adds	r5, #1
 801d5be:	2d04      	cmp	r5, #4
 801d5c0:	d1dc      	bne.n	801d57c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xb0>
 801d5c2:	b00c      	add	sp, #48	; 0x30
 801d5c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d5c8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 801d5c8:	b570      	push	{r4, r5, r6, lr}
 801d5ca:	4605      	mov	r5, r0
 801d5cc:	880b      	ldrh	r3, [r1, #0]
 801d5ce:	4604      	mov	r4, r0
 801d5d0:	84c3      	strh	r3, [r0, #38]	; 0x26
 801d5d2:	f855 3b26 	ldr.w	r3, [r5], #38
 801d5d6:	4628      	mov	r0, r5
 801d5d8:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 801d5da:	f003 fb7f 	bl	8020cdc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d5de:	b201      	sxth	r1, r0
 801d5e0:	4620      	mov	r0, r4
 801d5e2:	47b0      	blx	r6
 801d5e4:	6823      	ldr	r3, [r4, #0]
 801d5e6:	4628      	mov	r0, r5
 801d5e8:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 801d5ea:	f003 fbb1 	bl	8020d50 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801d5ee:	b201      	sxth	r1, r0
 801d5f0:	4620      	mov	r0, r4
 801d5f2:	47b0      	blx	r6
 801d5f4:	4628      	mov	r0, r5
 801d5f6:	f003 fc3f 	bl	8020e78 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801d5fa:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 801d5fe:	bd70      	pop	{r4, r5, r6, pc}

0801d600 <_ZNK8touchgfx5Image12getSolidRectEv>:
 801d600:	b510      	push	{r4, lr}
 801d602:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801d606:	4604      	mov	r4, r0
 801d608:	2bff      	cmp	r3, #255	; 0xff
 801d60a:	d006      	beq.n	801d61a <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801d60c:	2300      	movs	r3, #0
 801d60e:	8003      	strh	r3, [r0, #0]
 801d610:	8043      	strh	r3, [r0, #2]
 801d612:	8083      	strh	r3, [r0, #4]
 801d614:	80c3      	strh	r3, [r0, #6]
 801d616:	4620      	mov	r0, r4
 801d618:	bd10      	pop	{r4, pc}
 801d61a:	3126      	adds	r1, #38	; 0x26
 801d61c:	f003 fbd2 	bl	8020dc4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801d620:	e7f9      	b.n	801d616 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>
	...

0801d624 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 801d624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d628:	4604      	mov	r4, r0
 801d62a:	b088      	sub	sp, #32
 801d62c:	2500      	movs	r5, #0
 801d62e:	460f      	mov	r7, r1
 801d630:	f854 3b26 	ldr.w	r3, [r4], #38
 801d634:	a904      	add	r1, sp, #16
 801d636:	4606      	mov	r6, r0
 801d638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d63a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801d63e:	4798      	blx	r3
 801d640:	4620      	mov	r0, r4
 801d642:	f003 fb4b 	bl	8020cdc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d646:	4680      	mov	r8, r0
 801d648:	4620      	mov	r0, r4
 801d64a:	f003 fb81 	bl	8020d50 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801d64e:	9506      	str	r5, [sp, #24]
 801d650:	ad06      	add	r5, sp, #24
 801d652:	f8ad 001e 	strh.w	r0, [sp, #30]
 801d656:	4639      	mov	r1, r7
 801d658:	f8ad 801c 	strh.w	r8, [sp, #28]
 801d65c:	4628      	mov	r0, r5
 801d65e:	f7fd fd11 	bl	801b084 <_ZN8touchgfx4RectaNERKS0_>
 801d662:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801d666:	b1c3      	cbz	r3, 801d69a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 801d668:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801d66c:	b1ab      	cbz	r3, 801d69a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 801d66e:	4b0c      	ldr	r3, [pc, #48]	; (801d6a0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7c>)
 801d670:	681b      	ldr	r3, [r3, #0]
 801d672:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801d676:	b10a      	cbz	r2, 801d67c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x58>
 801d678:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801d67a:	b900      	cbnz	r0, 801d67e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5a>
 801d67c:	6898      	ldr	r0, [r3, #8]
 801d67e:	2701      	movs	r7, #1
 801d680:	6801      	ldr	r1, [r0, #0]
 801d682:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801d686:	9702      	str	r7, [sp, #8]
 801d688:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 801d68c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801d690:	e9cd 5600 	strd	r5, r6, [sp]
 801d694:	68cd      	ldr	r5, [r1, #12]
 801d696:	4621      	mov	r1, r4
 801d698:	47a8      	blx	r5
 801d69a:	b008      	add	sp, #32
 801d69c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d6a0:	2000bf68 	.word	0x2000bf68

0801d6a4 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 801d6a4:	4b02      	ldr	r3, [pc, #8]	; (801d6b0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 801d6a6:	6018      	str	r0, [r3, #0]
 801d6a8:	4b02      	ldr	r3, [pc, #8]	; (801d6b4 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 801d6aa:	6019      	str	r1, [r3, #0]
 801d6ac:	4770      	bx	lr
 801d6ae:	bf00      	nop
 801d6b0:	2000bf70 	.word	0x2000bf70
 801d6b4:	2000bf84 	.word	0x2000bf84

0801d6b8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 801d6b8:	b538      	push	{r3, r4, r5, lr}
 801d6ba:	4c2b      	ldr	r4, [pc, #172]	; (801d768 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 801d6bc:	4b2b      	ldr	r3, [pc, #172]	; (801d76c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 801d6be:	6821      	ldr	r1, [r4, #0]
 801d6c0:	681a      	ldr	r2, [r3, #0]
 801d6c2:	4281      	cmp	r1, r0
 801d6c4:	4d2a      	ldr	r5, [pc, #168]	; (801d770 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 801d6c6:	492b      	ldr	r1, [pc, #172]	; (801d774 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 801d6c8:	d108      	bne.n	801d6dc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 801d6ca:	682b      	ldr	r3, [r5, #0]
 801d6cc:	4293      	cmp	r3, r2
 801d6ce:	d105      	bne.n	801d6dc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 801d6d0:	6808      	ldr	r0, [r1, #0]
 801d6d2:	280f      	cmp	r0, #15
 801d6d4:	bf94      	ite	ls
 801d6d6:	2000      	movls	r0, #0
 801d6d8:	2001      	movhi	r0, #1
 801d6da:	bd38      	pop	{r3, r4, r5, pc}
 801d6dc:	4b26      	ldr	r3, [pc, #152]	; (801d778 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 801d6de:	6020      	str	r0, [r4, #0]
 801d6e0:	681b      	ldr	r3, [r3, #0]
 801d6e2:	602a      	str	r2, [r5, #0]
 801d6e4:	4298      	cmp	r0, r3
 801d6e6:	d905      	bls.n	801d6f4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 801d6e8:	4b24      	ldr	r3, [pc, #144]	; (801d77c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801d6ea:	2137      	movs	r1, #55	; 0x37
 801d6ec:	4a24      	ldr	r2, [pc, #144]	; (801d780 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801d6ee:	4825      	ldr	r0, [pc, #148]	; (801d784 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 801d6f0:	f00d f846 	bl	802a780 <__assert_func>
 801d6f4:	f010 0403 	ands.w	r4, r0, #3
 801d6f8:	bf1f      	itttt	ne
 801d6fa:	f1c4 0504 	rsbne	r5, r4, #4
 801d6fe:	3b04      	subne	r3, #4
 801d700:	1952      	addne	r2, r2, r5
 801d702:	191b      	addne	r3, r3, r4
 801d704:	4d20      	ldr	r5, [pc, #128]	; (801d788 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 801d706:	4402      	add	r2, r0
 801d708:	1a1b      	subs	r3, r3, r0
 801d70a:	3001      	adds	r0, #1
 801d70c:	602a      	str	r2, [r5, #0]
 801d70e:	f020 0401 	bic.w	r4, r0, #1
 801d712:	42a3      	cmp	r3, r4
 801d714:	d203      	bcs.n	801d71e <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 801d716:	4b19      	ldr	r3, [pc, #100]	; (801d77c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801d718:	214a      	movs	r1, #74	; 0x4a
 801d71a:	4a19      	ldr	r2, [pc, #100]	; (801d780 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801d71c:	e7e7      	b.n	801d6ee <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801d71e:	f010 0002 	ands.w	r0, r0, #2
 801d722:	bf1f      	itttt	ne
 801d724:	f1c0 0504 	rsbne	r5, r0, #4
 801d728:	1952      	addne	r2, r2, r5
 801d72a:	1f05      	subne	r5, r0, #4
 801d72c:	195b      	addne	r3, r3, r5
 801d72e:	4422      	add	r2, r4
 801d730:	4d16      	ldr	r5, [pc, #88]	; (801d78c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 801d732:	1b1b      	subs	r3, r3, r4
 801d734:	602a      	str	r2, [r5, #0]
 801d736:	429c      	cmp	r4, r3
 801d738:	d903      	bls.n	801d742 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 801d73a:	4b10      	ldr	r3, [pc, #64]	; (801d77c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801d73c:	215d      	movs	r1, #93	; 0x5d
 801d73e:	4a10      	ldr	r2, [pc, #64]	; (801d780 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801d740:	e7d5      	b.n	801d6ee <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801d742:	b120      	cbz	r0, 801d74e <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 801d744:	f1c0 0504 	rsb	r5, r0, #4
 801d748:	3804      	subs	r0, #4
 801d74a:	442a      	add	r2, r5
 801d74c:	4403      	add	r3, r0
 801d74e:	1b1b      	subs	r3, r3, r4
 801d750:	4422      	add	r2, r4
 801d752:	480f      	ldr	r0, [pc, #60]	; (801d790 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 801d754:	2b0f      	cmp	r3, #15
 801d756:	600b      	str	r3, [r1, #0]
 801d758:	6002      	str	r2, [r0, #0]
 801d75a:	d803      	bhi.n	801d764 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 801d75c:	4b0d      	ldr	r3, [pc, #52]	; (801d794 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 801d75e:	2170      	movs	r1, #112	; 0x70
 801d760:	4a07      	ldr	r2, [pc, #28]	; (801d780 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801d762:	e7c4      	b.n	801d6ee <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801d764:	2001      	movs	r0, #1
 801d766:	e7b8      	b.n	801d6da <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 801d768:	2000bf78 	.word	0x2000bf78
 801d76c:	2000bf70 	.word	0x2000bf70
 801d770:	2000bf80 	.word	0x2000bf80
 801d774:	2000bf88 	.word	0x2000bf88
 801d778:	2000bf84 	.word	0x2000bf84
 801d77c:	0802eb34 	.word	0x0802eb34
 801d780:	0802ebfc 	.word	0x0802ebfc
 801d784:	0802eb6d 	.word	0x0802eb6d
 801d788:	2000bf8c 	.word	0x2000bf8c
 801d78c:	2000bf7c 	.word	0x2000bf7c
 801d790:	2000bf74 	.word	0x2000bf74
 801d794:	0802ebb7 	.word	0x0802ebb7

0801d798 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 801d798:	4b04      	ldr	r3, [pc, #16]	; (801d7ac <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 801d79a:	6818      	ldr	r0, [r3, #0]
 801d79c:	b120      	cbz	r0, 801d7a8 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 801d79e:	4b04      	ldr	r3, [pc, #16]	; (801d7b0 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 801d7a0:	6818      	ldr	r0, [r3, #0]
 801d7a2:	3000      	adds	r0, #0
 801d7a4:	bf18      	it	ne
 801d7a6:	2001      	movne	r0, #1
 801d7a8:	4770      	bx	lr
 801d7aa:	bf00      	nop
 801d7ac:	2000bf70 	.word	0x2000bf70
 801d7b0:	2000bf84 	.word	0x2000bf84

0801d7b4 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 801d7b4:	4b01      	ldr	r3, [pc, #4]	; (801d7bc <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 801d7b6:	6818      	ldr	r0, [r3, #0]
 801d7b8:	4770      	bx	lr
 801d7ba:	bf00      	nop
 801d7bc:	2000bf78 	.word	0x2000bf78

0801d7c0 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 801d7c0:	4b01      	ldr	r3, [pc, #4]	; (801d7c8 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 801d7c2:	6818      	ldr	r0, [r3, #0]
 801d7c4:	4770      	bx	lr
 801d7c6:	bf00      	nop
 801d7c8:	2000bf80 	.word	0x2000bf80

0801d7cc <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 801d7cc:	4b01      	ldr	r3, [pc, #4]	; (801d7d4 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 801d7ce:	6818      	ldr	r0, [r3, #0]
 801d7d0:	4770      	bx	lr
 801d7d2:	bf00      	nop
 801d7d4:	2000bf8c 	.word	0x2000bf8c

0801d7d8 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 801d7d8:	4b01      	ldr	r3, [pc, #4]	; (801d7e0 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 801d7da:	6818      	ldr	r0, [r3, #0]
 801d7dc:	4770      	bx	lr
 801d7de:	bf00      	nop
 801d7e0:	2000bf7c 	.word	0x2000bf7c

0801d7e4 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 801d7e4:	4b01      	ldr	r3, [pc, #4]	; (801d7ec <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 801d7e6:	6818      	ldr	r0, [r3, #0]
 801d7e8:	4770      	bx	lr
 801d7ea:	bf00      	nop
 801d7ec:	2000bf74 	.word	0x2000bf74

0801d7f0 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 801d7f0:	4b01      	ldr	r3, [pc, #4]	; (801d7f8 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 801d7f2:	6818      	ldr	r0, [r3, #0]
 801d7f4:	4770      	bx	lr
 801d7f6:	bf00      	nop
 801d7f8:	2000bf88 	.word	0x2000bf88

0801d7fc <_ZN8touchgfx3LCD4initEv>:
 801d7fc:	4770      	bx	lr

0801d7fe <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801d7fe:	2000      	movs	r0, #0
 801d800:	4770      	bx	lr

0801d802 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801d802:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d806:	b091      	sub	sp, #68	; 0x44
 801d808:	4699      	mov	r9, r3
 801d80a:	4617      	mov	r7, r2
 801d80c:	2500      	movs	r5, #0
 801d80e:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 801d812:	4680      	mov	r8, r0
 801d814:	a80e      	add	r0, sp, #56	; 0x38
 801d816:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 801d818:	f9ba 2008 	ldrsh.w	r2, [sl, #8]
 801d81c:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 801d820:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 801d824:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801d828:	910d      	str	r1, [sp, #52]	; 0x34
 801d82a:	950e      	str	r5, [sp, #56]	; 0x38
 801d82c:	f000 fe3a 	bl	801e4a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d830:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801d832:	f8d9 6000 	ldr.w	r6, [r9]
 801d836:	6818      	ldr	r0, [r3, #0]
 801d838:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801d83a:	f9b4 b000 	ldrsh.w	fp, [r4]
 801d83e:	1b80      	subs	r0, r0, r6
 801d840:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d844:	eb02 0c06 	add.w	ip, r2, r6
 801d848:	ebab 0e0c 	sub.w	lr, fp, ip
 801d84c:	4570      	cmp	r0, lr
 801d84e:	f340 80bc 	ble.w	801d9ca <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 801d852:	88a1      	ldrh	r1, [r4, #4]
 801d854:	4459      	add	r1, fp
 801d856:	b209      	sxth	r1, r1
 801d858:	458c      	cmp	ip, r1
 801d85a:	f300 80b6 	bgt.w	801d9ca <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 801d85e:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 801d862:	ed97 4a09 	vldr	s8, [r7, #36]	; 0x24
 801d866:	4283      	cmp	r3, r0
 801d868:	edd7 4a0b 	vldr	s9, [r7, #44]	; 0x2c
 801d86c:	edd9 6a07 	vldr	s13, [r9, #28]
 801d870:	bfa8      	it	ge
 801d872:	4603      	movge	r3, r0
 801d874:	edd9 1a0a 	vldr	s3, [r9, #40]	; 0x28
 801d878:	ed99 2a0d 	vldr	s4, [r9, #52]	; 0x34
 801d87c:	45e3      	cmp	fp, ip
 801d87e:	ee07 3a90 	vmov	s15, r3
 801d882:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801d886:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801d88a:	ee25 4a04 	vmul.f32	s8, s10, s8
 801d88e:	ee65 4a24 	vmul.f32	s9, s10, s9
 801d892:	ee25 5a27 	vmul.f32	s10, s10, s15
 801d896:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801d89a:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801d89e:	ee32 1a05 	vadd.f32	s2, s4, s10
 801d8a2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801d8a6:	ee36 0a84 	vadd.f32	s0, s13, s8
 801d8aa:	ee61 1a87 	vmul.f32	s3, s3, s14
 801d8ae:	ee22 2a07 	vmul.f32	s4, s4, s14
 801d8b2:	f340 808d 	ble.w	801d9d0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ce>
 801d8b6:	fb9e f5f3 	sdiv	r5, lr, r3
 801d8ba:	ee07 5a10 	vmov	s14, r5
 801d8be:	2d00      	cmp	r5, #0
 801d8c0:	fb03 e415 	mls	r4, r3, r5, lr
 801d8c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d8c8:	eea7 0a04 	vfma.f32	s0, s14, s8
 801d8cc:	eee7 0a24 	vfma.f32	s1, s14, s9
 801d8d0:	eea7 1a05 	vfma.f32	s2, s14, s10
 801d8d4:	dd12      	ble.n	801d8fc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfa>
 801d8d6:	ee70 6a44 	vsub.f32	s13, s0, s8
 801d8da:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801d8de:	ee31 2a45 	vsub.f32	s4, s2, s10
 801d8e2:	eef5 6a40 	vcmp.f32	s13, #0.0
 801d8e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d8ea:	bf14      	ite	ne
 801d8ec:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801d8f0:	eeb0 7a67 	vmoveq.f32	s14, s15
 801d8f4:	ee61 1a87 	vmul.f32	s3, s3, s14
 801d8f8:	ee22 2a07 	vmul.f32	s4, s4, s14
 801d8fc:	fb05 f703 	mul.w	r7, r5, r3
 801d900:	1bc0      	subs	r0, r0, r7
 801d902:	443e      	add	r6, r7
 801d904:	1997      	adds	r7, r2, r6
 801d906:	4407      	add	r7, r0
 801d908:	42b9      	cmp	r1, r7
 801d90a:	bfbc      	itt	lt
 801d90c:	1a88      	sublt	r0, r1, r2
 801d90e:	1b80      	sublt	r0, r0, r6
 801d910:	2800      	cmp	r0, #0
 801d912:	dd5a      	ble.n	801d9ca <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 801d914:	fb90 f1f3 	sdiv	r1, r0, r3
 801d918:	fb03 0211 	mls	r2, r3, r1, r0
 801d91c:	b90a      	cbnz	r2, 801d922 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x120>
 801d91e:	3901      	subs	r1, #1
 801d920:	461a      	mov	r2, r3
 801d922:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801d926:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 801d92a:	44a4      	add	ip, r4
 801d92c:	2900      	cmp	r1, #0
 801d92e:	bfcc      	ite	gt
 801d930:	469e      	movgt	lr, r3
 801d932:	4696      	movle	lr, r2
 801d934:	fb03 c505 	mla	r5, r3, r5, ip
 801d938:	eef0 6a42 	vmov.f32	s13, s4
 801d93c:	eeb0 7a61 	vmov.f32	s14, s3
 801d940:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d944:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801d948:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801d94c:	ee21 3a23 	vmul.f32	s6, s2, s7
 801d950:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801d954:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801d958:	ee17 0a90 	vmov	r0, s15
 801d95c:	ee73 7a42 	vsub.f32	s15, s6, s4
 801d960:	fb90 f6f3 	sdiv	r6, r0, r3
 801d964:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801d968:	ee17 0a90 	vmov	r0, s15
 801d96c:	fb90 f7f3 	sdiv	r7, r0, r3
 801d970:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801d974:	f8d0 8000 	ldr.w	r8, [r0]
 801d978:	900c      	str	r0, [sp, #48]	; 0x30
 801d97a:	981c      	ldr	r0, [sp, #112]	; 0x70
 801d97c:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801d980:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 801d984:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801d988:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 801d98c:	f8cd a020 	str.w	sl, [sp, #32]
 801d990:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 801d994:	980d      	ldr	r0, [sp, #52]	; 0x34
 801d996:	f8d9 9014 	ldr.w	r9, [r9, #20]
 801d99a:	9603      	str	r6, [sp, #12]
 801d99c:	44ca      	add	sl, r9
 801d99e:	9506      	str	r5, [sp, #24]
 801d9a0:	e9cd 7004 	strd	r7, r0, [sp, #16]
 801d9a4:	ee16 0a90 	vmov	r0, s13
 801d9a8:	f8cd a01c 	str.w	sl, [sp, #28]
 801d9ac:	fb07 0704 	mla	r7, r7, r4, r0
 801d9b0:	ee17 0a10 	vmov	r0, s14
 801d9b4:	fb06 0604 	mla	r6, r6, r4, r0
 801d9b8:	980c      	ldr	r0, [sp, #48]	; 0x30
 801d9ba:	9702      	str	r7, [sp, #8]
 801d9bc:	e9cd 3600 	strd	r3, r6, [sp]
 801d9c0:	ebae 0304 	sub.w	r3, lr, r4
 801d9c4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801d9c8:	47a8      	blx	r5
 801d9ca:	b011      	add	sp, #68	; 0x44
 801d9cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d9d0:	462c      	mov	r4, r5
 801d9d2:	e797      	b.n	801d904 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x102>

0801d9d4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 801d9d4:	b570      	push	{r4, r5, r6, lr}
 801d9d6:	4604      	mov	r4, r0
 801d9d8:	2500      	movs	r5, #0
 801d9da:	9804      	ldr	r0, [sp, #16]
 801d9dc:	7223      	strb	r3, [r4, #8]
 801d9de:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801d9e2:	8025      	strh	r5, [r4, #0]
 801d9e4:	6061      	str	r1, [r4, #4]
 801d9e6:	7263      	strb	r3, [r4, #9]
 801d9e8:	60e0      	str	r0, [r4, #12]
 801d9ea:	8222      	strh	r2, [r4, #16]
 801d9ec:	8265      	strh	r5, [r4, #18]
 801d9ee:	82a5      	strh	r5, [r4, #20]
 801d9f0:	82e5      	strh	r5, [r4, #22]
 801d9f2:	8325      	strh	r5, [r4, #24]
 801d9f4:	8365      	strh	r5, [r4, #26]
 801d9f6:	83a5      	strh	r5, [r4, #28]
 801d9f8:	77a5      	strb	r5, [r4, #30]
 801d9fa:	6803      	ldr	r3, [r0, #0]
 801d9fc:	695b      	ldr	r3, [r3, #20]
 801d9fe:	4798      	blx	r3
 801da00:	4606      	mov	r6, r0
 801da02:	b1f8      	cbz	r0, 801da44 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801da04:	68e0      	ldr	r0, [r4, #12]
 801da06:	4631      	mov	r1, r6
 801da08:	6803      	ldr	r3, [r0, #0]
 801da0a:	68db      	ldr	r3, [r3, #12]
 801da0c:	4798      	blx	r3
 801da0e:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801da12:	4605      	mov	r5, r0
 801da14:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801da18:	7a83      	ldrb	r3, [r0, #10]
 801da1a:	4313      	orrs	r3, r2
 801da1c:	83a3      	strh	r3, [r4, #28]
 801da1e:	7a63      	ldrb	r3, [r4, #9]
 801da20:	2b04      	cmp	r3, #4
 801da22:	d10f      	bne.n	801da44 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801da24:	68e0      	ldr	r0, [r4, #12]
 801da26:	462a      	mov	r2, r5
 801da28:	4631      	mov	r1, r6
 801da2a:	6803      	ldr	r3, [r0, #0]
 801da2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801da2e:	4798      	blx	r3
 801da30:	f995 300d 	ldrsb.w	r3, [r5, #13]
 801da34:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801da38:	7aab      	ldrb	r3, [r5, #10]
 801da3a:	4313      	orrs	r3, r2
 801da3c:	4418      	add	r0, r3
 801da3e:	8ba3      	ldrh	r3, [r4, #28]
 801da40:	4418      	add	r0, r3
 801da42:	83a0      	strh	r0, [r4, #28]
 801da44:	4620      	mov	r0, r4
 801da46:	bd70      	pop	{r4, r5, r6, pc}

0801da48 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801da48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da4c:	2400      	movs	r4, #0
 801da4e:	b085      	sub	sp, #20
 801da50:	4681      	mov	r9, r0
 801da52:	460f      	mov	r7, r1
 801da54:	4692      	mov	sl, r2
 801da56:	469b      	mov	fp, r3
 801da58:	46a0      	mov	r8, r4
 801da5a:	4626      	mov	r6, r4
 801da5c:	4554      	cmp	r4, sl
 801da5e:	da21      	bge.n	801daa4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 801da60:	2300      	movs	r3, #0
 801da62:	463a      	mov	r2, r7
 801da64:	4659      	mov	r1, fp
 801da66:	4648      	mov	r0, r9
 801da68:	9303      	str	r3, [sp, #12]
 801da6a:	ab03      	add	r3, sp, #12
 801da6c:	f002 fb8c 	bl	8020188 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801da70:	4605      	mov	r5, r0
 801da72:	b1b8      	cbz	r0, 801daa4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 801da74:	280a      	cmp	r0, #10
 801da76:	d015      	beq.n	801daa4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 801da78:	9a03      	ldr	r2, [sp, #12]
 801da7a:	b182      	cbz	r2, 801da9e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x56>
 801da7c:	f992 000d 	ldrsb.w	r0, [r2, #13]
 801da80:	4641      	mov	r1, r8
 801da82:	7a93      	ldrb	r3, [r2, #10]
 801da84:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801da88:	8895      	ldrh	r5, [r2, #4]
 801da8a:	4303      	orrs	r3, r0
 801da8c:	4638      	mov	r0, r7
 801da8e:	9301      	str	r3, [sp, #4]
 801da90:	683b      	ldr	r3, [r7, #0]
 801da92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801da94:	4798      	blx	r3
 801da96:	9b01      	ldr	r3, [sp, #4]
 801da98:	4418      	add	r0, r3
 801da9a:	4406      	add	r6, r0
 801da9c:	b2b6      	uxth	r6, r6
 801da9e:	3401      	adds	r4, #1
 801daa0:	46a8      	mov	r8, r5
 801daa2:	e7db      	b.n	801da5c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x14>
 801daa4:	4630      	mov	r0, r6
 801daa6:	b005      	add	sp, #20
 801daa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801daac <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801daac:	2a02      	cmp	r2, #2
 801daae:	b530      	push	{r4, r5, lr}
 801dab0:	d011      	beq.n	801dad6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801dab2:	2a03      	cmp	r2, #3
 801dab4:	d01c      	beq.n	801daf0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801dab6:	2a01      	cmp	r2, #1
 801dab8:	d10c      	bne.n	801dad4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801daba:	888b      	ldrh	r3, [r1, #4]
 801dabc:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801dac0:	8801      	ldrh	r1, [r0, #0]
 801dac2:	1a9b      	subs	r3, r3, r2
 801dac4:	8844      	ldrh	r4, [r0, #2]
 801dac6:	1a5b      	subs	r3, r3, r1
 801dac8:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801dacc:	8004      	strh	r4, [r0, #0]
 801dace:	8043      	strh	r3, [r0, #2]
 801dad0:	8081      	strh	r1, [r0, #4]
 801dad2:	80c2      	strh	r2, [r0, #6]
 801dad4:	bd30      	pop	{r4, r5, pc}
 801dad6:	88cb      	ldrh	r3, [r1, #6]
 801dad8:	88c2      	ldrh	r2, [r0, #6]
 801dada:	1a9b      	subs	r3, r3, r2
 801dadc:	8842      	ldrh	r2, [r0, #2]
 801dade:	1a9b      	subs	r3, r3, r2
 801dae0:	888a      	ldrh	r2, [r1, #4]
 801dae2:	8881      	ldrh	r1, [r0, #4]
 801dae4:	8043      	strh	r3, [r0, #2]
 801dae6:	1a52      	subs	r2, r2, r1
 801dae8:	8801      	ldrh	r1, [r0, #0]
 801daea:	1a52      	subs	r2, r2, r1
 801daec:	8002      	strh	r2, [r0, #0]
 801daee:	e7f1      	b.n	801dad4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801daf0:	88cb      	ldrh	r3, [r1, #6]
 801daf2:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801daf6:	8841      	ldrh	r1, [r0, #2]
 801daf8:	1a9b      	subs	r3, r3, r2
 801dafa:	f9b0 5000 	ldrsh.w	r5, [r0]
 801dafe:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801db02:	1a5b      	subs	r3, r3, r1
 801db04:	8045      	strh	r5, [r0, #2]
 801db06:	8082      	strh	r2, [r0, #4]
 801db08:	8003      	strh	r3, [r0, #0]
 801db0a:	80c4      	strh	r4, [r0, #6]
 801db0c:	e7e2      	b.n	801dad4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
	...

0801db10 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
 801db10:	b570      	push	{r4, r5, r6, lr}
 801db12:	b086      	sub	sp, #24
 801db14:	ac02      	add	r4, sp, #8
 801db16:	e884 0006 	stmia.w	r4, {r1, r2}
 801db1a:	461a      	mov	r2, r3
 801db1c:	ab0c      	add	r3, sp, #48	; 0x30
 801db1e:	9305      	str	r3, [sp, #20]
 801db20:	4b0a      	ldr	r3, [pc, #40]	; (801db4c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz+0x3c>)
 801db22:	685d      	ldr	r5, [r3, #4]
 801db24:	1069      	asrs	r1, r5, #1
 801db26:	07ed      	lsls	r5, r5, #31
 801db28:	eb00 0601 	add.w	r6, r0, r1
 801db2c:	bf46      	itte	mi
 801db2e:	681b      	ldrmi	r3, [r3, #0]
 801db30:	5841      	ldrmi	r1, [r0, r1]
 801db32:	681d      	ldrpl	r5, [r3, #0]
 801db34:	4630      	mov	r0, r6
 801db36:	bf48      	it	mi
 801db38:	58cd      	ldrmi	r5, [r1, r3]
 801db3a:	4621      	mov	r1, r4
 801db3c:	9b05      	ldr	r3, [sp, #20]
 801db3e:	9301      	str	r3, [sp, #4]
 801db40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801db42:	9300      	str	r3, [sp, #0]
 801db44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801db46:	47a8      	blx	r5
 801db48:	b006      	add	sp, #24
 801db4a:	bd70      	pop	{r4, r5, r6, pc}
 801db4c:	20000030 	.word	0x20000030

0801db50 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801db50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db54:	b09d      	sub	sp, #116	; 0x74
 801db56:	9114      	str	r1, [sp, #80]	; 0x50
 801db58:	9315      	str	r3, [sp, #84]	; 0x54
 801db5a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801db5c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801db5e:	8809      	ldrh	r1, [r1, #0]
 801db60:	889b      	ldrh	r3, [r3, #4]
 801db62:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 801db64:	440b      	add	r3, r1
 801db66:	9210      	str	r2, [sp, #64]	; 0x40
 801db68:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 801db6c:	b21b      	sxth	r3, r3
 801db6e:	900f      	str	r0, [sp, #60]	; 0x3c
 801db70:	f89d b0a4 	ldrb.w	fp, [sp, #164]	; 0xa4
 801db74:	930e      	str	r3, [sp, #56]	; 0x38
 801db76:	6833      	ldr	r3, [r6, #0]
 801db78:	7a59      	ldrb	r1, [r3, #9]
 801db7a:	7a1b      	ldrb	r3, [r3, #8]
 801db7c:	9113      	str	r1, [sp, #76]	; 0x4c
 801db7e:	9312      	str	r3, [sp, #72]	; 0x48
 801db80:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801db82:	f9b3 4000 	ldrsh.w	r4, [r3]
 801db86:	2a00      	cmp	r2, #0
 801db88:	d059      	beq.n	801dc3e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xee>
 801db8a:	7c33      	ldrb	r3, [r6, #16]
 801db8c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801db8e:	2b04      	cmp	r3, #4
 801db90:	bf14      	ite	ne
 801db92:	2301      	movne	r3, #1
 801db94:	2302      	moveq	r3, #2
 801db96:	4413      	add	r3, r2
 801db98:	f04f 0800 	mov.w	r8, #0
 801db9c:	930d      	str	r3, [sp, #52]	; 0x34
 801db9e:	4645      	mov	r5, r8
 801dba0:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 801dba4:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 801dba8:	4293      	cmp	r3, r2
 801dbaa:	da75      	bge.n	801dc98 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x148>
 801dbac:	2300      	movs	r3, #0
 801dbae:	992b      	ldr	r1, [sp, #172]	; 0xac
 801dbb0:	6832      	ldr	r2, [r6, #0]
 801dbb2:	931a      	str	r3, [sp, #104]	; 0x68
 801dbb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dbb6:	428b      	cmp	r3, r1
 801dbb8:	db43      	blt.n	801dc42 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xf2>
 801dbba:	6813      	ldr	r3, [r2, #0]
 801dbbc:	4610      	mov	r0, r2
 801dbbe:	695b      	ldr	r3, [r3, #20]
 801dbc0:	4798      	blx	r3
 801dbc2:	4681      	mov	r9, r0
 801dbc4:	6830      	ldr	r0, [r6, #0]
 801dbc6:	aa1b      	add	r2, sp, #108	; 0x6c
 801dbc8:	4649      	mov	r1, r9
 801dbca:	6803      	ldr	r3, [r0, #0]
 801dbcc:	689f      	ldr	r7, [r3, #8]
 801dbce:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 801dbd2:	47b8      	blx	r7
 801dbd4:	901a      	str	r0, [sp, #104]	; 0x68
 801dbd6:	f64f 6aff 	movw	sl, #65279	; 0xfeff
 801dbda:	45d1      	cmp	r9, sl
 801dbdc:	d045      	beq.n	801dc6a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801dbde:	f242 070b 	movw	r7, #8203	; 0x200b
 801dbe2:	45b9      	cmp	r9, r7
 801dbe4:	d041      	beq.n	801dc6a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801dbe6:	f1b9 0f00 	cmp.w	r9, #0
 801dbea:	f000 80ee 	beq.w	801ddca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 801dbee:	f1b9 0f0a 	cmp.w	r9, #10
 801dbf2:	d057      	beq.n	801dca4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 801dbf4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801dbf6:	b383      	cbz	r3, 801dc5a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10a>
 801dbf8:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 801dbfc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801dbfe:	2a00      	cmp	r2, #0
 801dc00:	f000 80d2 	beq.w	801dda8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x258>
 801dc04:	f1bb 0f00 	cmp.w	fp, #0
 801dc08:	d100      	bne.n	801dc0c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xbc>
 801dc0a:	4444      	add	r4, r8
 801dc0c:	f992 800d 	ldrsb.w	r8, [r2, #13]
 801dc10:	f1bb 0f01 	cmp.w	fp, #1
 801dc14:	f408 7380 	and.w	r3, r8, #256	; 0x100
 801dc18:	f892 800a 	ldrb.w	r8, [r2, #10]
 801dc1c:	ea48 0803 	orr.w	r8, r8, r3
 801dc20:	d128      	bne.n	801dc74 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x124>
 801dc22:	eba4 0408 	sub.w	r4, r4, r8
 801dc26:	2d00      	cmp	r5, #0
 801dc28:	d143      	bne.n	801dcb2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 801dc2a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801dc2c:	eb08 0304 	add.w	r3, r8, r4
 801dc30:	4413      	add	r3, r2
 801dc32:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801dc34:	f9b2 2000 	ldrsh.w	r2, [r2]
 801dc38:	4293      	cmp	r3, r2
 801dc3a:	da44      	bge.n	801dcc6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801dc3c:	e02b      	b.n	801dc96 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x146>
 801dc3e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801dc40:	e7aa      	b.n	801db98 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x48>
 801dc42:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 801dc46:	4659      	mov	r1, fp
 801dc48:	982a      	ldr	r0, [sp, #168]	; 0xa8
 801dc4a:	9301      	str	r3, [sp, #4]
 801dc4c:	ab1b      	add	r3, sp, #108	; 0x6c
 801dc4e:	9300      	str	r3, [sp, #0]
 801dc50:	ab1a      	add	r3, sp, #104	; 0x68
 801dc52:	f002 facd 	bl	80201f0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801dc56:	4681      	mov	r9, r0
 801dc58:	e7bd      	b.n	801dbd6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 801dc5a:	6830      	ldr	r0, [r6, #0]
 801dc5c:	6803      	ldr	r3, [r0, #0]
 801dc5e:	691b      	ldr	r3, [r3, #16]
 801dc60:	4798      	blx	r3
 801dc62:	4550      	cmp	r0, sl
 801dc64:	d001      	beq.n	801dc6a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801dc66:	42b8      	cmp	r0, r7
 801dc68:	d1c8      	bne.n	801dbfc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 801dc6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dc6c:	464d      	mov	r5, r9
 801dc6e:	3301      	adds	r3, #1
 801dc70:	930c      	str	r3, [sp, #48]	; 0x30
 801dc72:	e797      	b.n	801dba4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x54>
 801dc74:	2d00      	cmp	r5, #0
 801dc76:	f000 80aa 	beq.w	801ddce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27e>
 801dc7a:	f1bb 0f00 	cmp.w	fp, #0
 801dc7e:	d118      	bne.n	801dcb2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 801dc80:	6830      	ldr	r0, [r6, #0]
 801dc82:	4629      	mov	r1, r5
 801dc84:	6803      	ldr	r3, [r0, #0]
 801dc86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801dc88:	4798      	blx	r3
 801dc8a:	4404      	add	r4, r0
 801dc8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801dc8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801dc90:	1ae3      	subs	r3, r4, r3
 801dc92:	4293      	cmp	r3, r2
 801dc94:	dd17      	ble.n	801dcc6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801dc96:	464d      	mov	r5, r9
 801dc98:	2d00      	cmp	r5, #0
 801dc9a:	f000 8096 	beq.w	801ddca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 801dc9e:	2d0a      	cmp	r5, #10
 801dca0:	f040 8084 	bne.w	801ddac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25c>
 801dca4:	250a      	movs	r5, #10
 801dca6:	fab5 f085 	clz	r0, r5
 801dcaa:	0940      	lsrs	r0, r0, #5
 801dcac:	b01d      	add	sp, #116	; 0x74
 801dcae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dcb2:	6830      	ldr	r0, [r6, #0]
 801dcb4:	4629      	mov	r1, r5
 801dcb6:	6803      	ldr	r3, [r0, #0]
 801dcb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801dcba:	4798      	blx	r3
 801dcbc:	f1bb 0f01 	cmp.w	fp, #1
 801dcc0:	eba4 0400 	sub.w	r4, r4, r0
 801dcc4:	d0b1      	beq.n	801dc2a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 801dcc6:	981a      	ldr	r0, [sp, #104]	; 0x68
 801dcc8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801dcca:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801dcce:	f9b3 5000 	ldrsh.w	r5, [r3]
 801dcd2:	7b43      	ldrb	r3, [r0, #13]
 801dcd4:	4421      	add	r1, r4
 801dcd6:	015b      	lsls	r3, r3, #5
 801dcd8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801dcdc:	7983      	ldrb	r3, [r0, #6]
 801dcde:	4313      	orrs	r3, r2
 801dce0:	440b      	add	r3, r1
 801dce2:	42ab      	cmp	r3, r5
 801dce4:	dbc1      	blt.n	801dc6a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801dce6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dce8:	4299      	cmp	r1, r3
 801dcea:	dabe      	bge.n	801dc6a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801dcec:	6830      	ldr	r0, [r6, #0]
 801dcee:	42a5      	cmp	r5, r4
 801dcf0:	6803      	ldr	r3, [r0, #0]
 801dcf2:	bfcc      	ite	gt
 801dcf4:	1b2d      	subgt	r5, r5, r4
 801dcf6:	2500      	movle	r5, #0
 801dcf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dcfa:	bfc8      	it	gt
 801dcfc:	b2ad      	uxthgt	r5, r5
 801dcfe:	4798      	blx	r3
 801dd00:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801dd02:	4935      	ldr	r1, [pc, #212]	; (801ddd8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>)
 801dd04:	7b5a      	ldrb	r2, [r3, #13]
 801dd06:	f893 e008 	ldrb.w	lr, [r3, #8]
 801dd0a:	f012 0f40 	tst.w	r2, #64	; 0x40
 801dd0e:	bf18      	it	ne
 801dd10:	468c      	movne	ip, r1
 801dd12:	9915      	ldr	r1, [sp, #84]	; 0x54
 801dd14:	bf08      	it	eq
 801dd16:	f04f 0c00 	moveq.w	ip, #0
 801dd1a:	4408      	add	r0, r1
 801dd1c:	00d1      	lsls	r1, r2, #3
 801dd1e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801dd22:	ea41 070e 	orr.w	r7, r1, lr
 801dd26:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801dd28:	ea4c 0707 	orr.w	r7, ip, r7
 801dd2c:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801dd30:	1bc7      	subs	r7, r0, r7
 801dd32:	b2bf      	uxth	r7, r7
 801dd34:	fa0f fa87 	sxth.w	sl, r7
 801dd38:	4551      	cmp	r1, sl
 801dd3a:	dd33      	ble.n	801dda4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x254>
 801dd3c:	0112      	lsls	r2, r2, #4
 801dd3e:	79d8      	ldrb	r0, [r3, #7]
 801dd40:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801dd44:	4302      	orrs	r2, r0
 801dd46:	4492      	add	sl, r2
 801dd48:	4551      	cmp	r1, sl
 801dd4a:	dc8e      	bgt.n	801dc6a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801dd4c:	1bcf      	subs	r7, r1, r7
 801dd4e:	468a      	mov	sl, r1
 801dd50:	b2bf      	uxth	r7, r7
 801dd52:	9317      	str	r3, [sp, #92]	; 0x5c
 801dd54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801dd56:	6830      	ldr	r0, [r6, #0]
 801dd58:	681a      	ldr	r2, [r3, #0]
 801dd5a:	6801      	ldr	r1, [r0, #0]
 801dd5c:	6c53      	ldr	r3, [r2, #68]	; 0x44
 801dd5e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801dd60:	9311      	str	r3, [sp, #68]	; 0x44
 801dd62:	9216      	str	r2, [sp, #88]	; 0x58
 801dd64:	6b89      	ldr	r1, [r1, #56]	; 0x38
 801dd66:	4788      	blx	r1
 801dd68:	79b1      	ldrb	r1, [r6, #6]
 801dd6a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801dd6c:	910b      	str	r1, [sp, #44]	; 0x2c
 801dd6e:	7bb1      	ldrb	r1, [r6, #14]
 801dd70:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801dd72:	910a      	str	r1, [sp, #40]	; 0x28
 801dd74:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
 801dd78:	9109      	str	r1, [sp, #36]	; 0x24
 801dd7a:	68b1      	ldr	r1, [r6, #8]
 801dd7c:	9305      	str	r3, [sp, #20]
 801dd7e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801dd80:	9206      	str	r2, [sp, #24]
 801dd82:	e9cd a501 	strd	sl, r5, [sp, #4]
 801dd86:	4425      	add	r5, r4
 801dd88:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801dd8c:	b22d      	sxth	r5, r5
 801dd8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801dd90:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801dd94:	9500      	str	r5, [sp, #0]
 801dd96:	9914      	ldr	r1, [sp, #80]	; 0x50
 801dd98:	681a      	ldr	r2, [r3, #0]
 801dd9a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801dd9c:	685b      	ldr	r3, [r3, #4]
 801dd9e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801dda0:	47a8      	blx	r5
 801dda2:	e762      	b.n	801dc6a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801dda4:	2700      	movs	r7, #0
 801dda6:	e7d4      	b.n	801dd52 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x202>
 801dda8:	4690      	mov	r8, r2
 801ddaa:	e75e      	b.n	801dc6a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801ddac:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801ddae:	3401      	adds	r4, #1
 801ddb0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801ddb2:	429c      	cmp	r4, r3
 801ddb4:	f6bf af77 	bge.w	801dca6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 801ddb8:	4659      	mov	r1, fp
 801ddba:	982a      	ldr	r0, [sp, #168]	; 0xa8
 801ddbc:	f002 f9a4 	bl	8020108 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801ddc0:	4605      	mov	r5, r0
 801ddc2:	b110      	cbz	r0, 801ddca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 801ddc4:	280a      	cmp	r0, #10
 801ddc6:	d1f2      	bne.n	801ddae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25e>
 801ddc8:	e76c      	b.n	801dca4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 801ddca:	2500      	movs	r5, #0
 801ddcc:	e76b      	b.n	801dca6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 801ddce:	f1bb 0f00 	cmp.w	fp, #0
 801ddd2:	f43f af5b 	beq.w	801dc8c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x13c>
 801ddd6:	e776      	b.n	801dcc6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801ddd8:	fffffe00 	.word	0xfffffe00

0801dddc <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801dddc:	b530      	push	{r4, r5, lr}
 801ddde:	8a44      	ldrh	r4, [r0, #18]
 801dde0:	8ac5      	ldrh	r5, [r0, #22]
 801dde2:	82c3      	strh	r3, [r0, #22]
 801dde4:	442c      	add	r4, r5
 801dde6:	1ae4      	subs	r4, r4, r3
 801dde8:	8b03      	ldrh	r3, [r0, #24]
 801ddea:	8244      	strh	r4, [r0, #18]
 801ddec:	8a84      	ldrh	r4, [r0, #20]
 801ddee:	4422      	add	r2, r4
 801ddf0:	440c      	add	r4, r1
 801ddf2:	1a59      	subs	r1, r3, r1
 801ddf4:	8342      	strh	r2, [r0, #26]
 801ddf6:	8284      	strh	r4, [r0, #20]
 801ddf8:	8301      	strh	r1, [r0, #24]
 801ddfa:	bd30      	pop	{r4, r5, pc}

0801ddfc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 801ddfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de00:	7a45      	ldrb	r5, [r0, #9]
 801de02:	b085      	sub	sp, #20
 801de04:	4604      	mov	r4, r0
 801de06:	4689      	mov	r9, r1
 801de08:	1eeb      	subs	r3, r5, #3
 801de0a:	b2db      	uxtb	r3, r3
 801de0c:	b329      	cbz	r1, 801de5a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5e>
 801de0e:	2b01      	cmp	r3, #1
 801de10:	d921      	bls.n	801de56 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5a>
 801de12:	1e69      	subs	r1, r5, #1
 801de14:	f1d1 0b00 	rsbs	fp, r1, #0
 801de18:	eb4b 0b01 	adc.w	fp, fp, r1
 801de1c:	1eaa      	subs	r2, r5, #2
 801de1e:	2500      	movs	r5, #0
 801de20:	4253      	negs	r3, r2
 801de22:	9500      	str	r5, [sp, #0]
 801de24:	4153      	adcs	r3, r2
 801de26:	9301      	str	r3, [sp, #4]
 801de28:	2600      	movs	r6, #0
 801de2a:	f242 080b 	movw	r8, #8203	; 0x200b
 801de2e:	8266      	strh	r6, [r4, #18]
 801de30:	82a6      	strh	r6, [r4, #20]
 801de32:	2300      	movs	r3, #0
 801de34:	68e2      	ldr	r2, [r4, #12]
 801de36:	7a21      	ldrb	r1, [r4, #8]
 801de38:	9303      	str	r3, [sp, #12]
 801de3a:	ab03      	add	r3, sp, #12
 801de3c:	6860      	ldr	r0, [r4, #4]
 801de3e:	8827      	ldrh	r7, [r4, #0]
 801de40:	f002 f9a2 	bl	8020188 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801de44:	8020      	strh	r0, [r4, #0]
 801de46:	b9b0      	cbnz	r0, 801de76 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7a>
 801de48:	8b22      	ldrh	r2, [r4, #24]
 801de4a:	2300      	movs	r3, #0
 801de4c:	4611      	mov	r1, r2
 801de4e:	4620      	mov	r0, r4
 801de50:	f7ff ffc4 	bl	801dddc <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801de54:	e062      	b.n	801df1c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 801de56:	468b      	mov	fp, r1
 801de58:	e7e0      	b.n	801de1c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x20>
 801de5a:	2b01      	cmp	r3, #1
 801de5c:	f105 35ff 	add.w	r5, r5, #4294967295
 801de60:	9101      	str	r1, [sp, #4]
 801de62:	468b      	mov	fp, r1
 801de64:	bf8c      	ite	hi
 801de66:	2300      	movhi	r3, #0
 801de68:	2301      	movls	r3, #1
 801de6a:	2d01      	cmp	r5, #1
 801de6c:	9300      	str	r3, [sp, #0]
 801de6e:	bf8c      	ite	hi
 801de70:	2500      	movhi	r5, #0
 801de72:	2501      	movls	r5, #1
 801de74:	e7d8      	b.n	801de28 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x2c>
 801de76:	8ae3      	ldrh	r3, [r4, #22]
 801de78:	280a      	cmp	r0, #10
 801de7a:	f103 0301 	add.w	r3, r3, #1
 801de7e:	82e3      	strh	r3, [r4, #22]
 801de80:	d0e2      	beq.n	801de48 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x4c>
 801de82:	9a03      	ldr	r2, [sp, #12]
 801de84:	b972      	cbnz	r2, 801dea4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa8>
 801de86:	4540      	cmp	r0, r8
 801de88:	d1d3      	bne.n	801de32 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801de8a:	8823      	ldrh	r3, [r4, #0]
 801de8c:	8b21      	ldrh	r1, [r4, #24]
 801de8e:	2b20      	cmp	r3, #32
 801de90:	d001      	beq.n	801de96 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9a>
 801de92:	4543      	cmp	r3, r8
 801de94:	d11d      	bne.n	801ded2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 801de96:	2f20      	cmp	r7, #32
 801de98:	d002      	beq.n	801dea0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 801de9a:	4547      	cmp	r7, r8
 801de9c:	bf18      	it	ne
 801de9e:	460e      	movne	r6, r1
 801dea0:	2001      	movs	r0, #1
 801dea2:	e017      	b.n	801ded4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd8>
 801dea4:	4540      	cmp	r0, r8
 801dea6:	d012      	beq.n	801dece <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd2>
 801dea8:	8893      	ldrh	r3, [r2, #4]
 801deaa:	4639      	mov	r1, r7
 801deac:	8023      	strh	r3, [r4, #0]
 801deae:	f992 a00d 	ldrsb.w	sl, [r2, #13]
 801deb2:	f40a 7080 	and.w	r0, sl, #256	; 0x100
 801deb6:	f892 a00a 	ldrb.w	sl, [r2, #10]
 801deba:	ea4a 0a00 	orr.w	sl, sl, r0
 801debe:	68e0      	ldr	r0, [r4, #12]
 801dec0:	6803      	ldr	r3, [r0, #0]
 801dec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801dec4:	4798      	blx	r3
 801dec6:	eb0a 0200 	add.w	r2, sl, r0
 801deca:	b292      	uxth	r2, r2
 801decc:	e7dd      	b.n	801de8a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 801dece:	2200      	movs	r2, #0
 801ded0:	e7db      	b.n	801de8a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 801ded2:	2000      	movs	r0, #0
 801ded4:	440a      	add	r2, r1
 801ded6:	8aa3      	ldrh	r3, [r4, #20]
 801ded8:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801dedc:	b292      	uxth	r2, r2
 801dede:	8322      	strh	r2, [r4, #24]
 801dee0:	4413      	add	r3, r2
 801dee2:	f1b9 0f00 	cmp.w	r9, #0
 801dee6:	d022      	beq.n	801df2e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x132>
 801dee8:	f1bb 0f00 	cmp.w	fp, #0
 801deec:	d102      	bne.n	801def4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf8>
 801deee:	9901      	ldr	r1, [sp, #4]
 801def0:	b149      	cbz	r1, 801df06 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 801def2:	b140      	cbz	r0, 801df06 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 801def4:	8ba1      	ldrh	r1, [r4, #28]
 801def6:	4419      	add	r1, r3
 801def8:	458c      	cmp	ip, r1
 801defa:	da12      	bge.n	801df22 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 801defc:	8a61      	ldrh	r1, [r4, #18]
 801defe:	b181      	cbz	r1, 801df22 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 801df00:	4563      	cmp	r3, ip
 801df02:	dd96      	ble.n	801de32 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801df04:	e004      	b.n	801df10 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x114>
 801df06:	4563      	cmp	r3, ip
 801df08:	dd93      	ble.n	801de32 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801df0a:	8a63      	ldrh	r3, [r4, #18]
 801df0c:	2b00      	cmp	r3, #0
 801df0e:	d090      	beq.n	801de32 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801df10:	2301      	movs	r3, #1
 801df12:	8ba2      	ldrh	r2, [r4, #28]
 801df14:	77a3      	strb	r3, [r4, #30]
 801df16:	8b63      	ldrh	r3, [r4, #26]
 801df18:	4413      	add	r3, r2
 801df1a:	8363      	strh	r3, [r4, #26]
 801df1c:	b005      	add	sp, #20
 801df1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df22:	2300      	movs	r3, #0
 801df24:	4611      	mov	r1, r2
 801df26:	4620      	mov	r0, r4
 801df28:	f7ff ff58 	bl	801dddc <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801df2c:	e781      	b.n	801de32 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801df2e:	4563      	cmp	r3, ip
 801df30:	dd16      	ble.n	801df60 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x164>
 801df32:	9b00      	ldr	r3, [sp, #0]
 801df34:	b113      	cbz	r3, 801df3c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801df36:	2301      	movs	r3, #1
 801df38:	460a      	mov	r2, r1
 801df3a:	e787      	b.n	801de4c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x50>
 801df3c:	2d00      	cmp	r5, #0
 801df3e:	f43f af78 	beq.w	801de32 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801df42:	2800      	cmp	r0, #0
 801df44:	f47f af75 	bne.w	801de32 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801df48:	2f20      	cmp	r7, #32
 801df4a:	d001      	beq.n	801df50 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x154>
 801df4c:	4547      	cmp	r7, r8
 801df4e:	d102      	bne.n	801df56 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15a>
 801df50:	2301      	movs	r3, #1
 801df52:	4632      	mov	r2, r6
 801df54:	e77b      	b.n	801de4e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x52>
 801df56:	8a63      	ldrh	r3, [r4, #18]
 801df58:	2b00      	cmp	r3, #0
 801df5a:	f43f af6a 	beq.w	801de32 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801df5e:	e7dd      	b.n	801df1c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 801df60:	2800      	cmp	r0, #0
 801df62:	f47f af66 	bne.w	801de32 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801df66:	2f20      	cmp	r7, #32
 801df68:	d002      	beq.n	801df70 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x174>
 801df6a:	4547      	cmp	r7, r8
 801df6c:	f47f af61 	bne.w	801de32 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801df70:	2301      	movs	r3, #1
 801df72:	4632      	mov	r2, r6
 801df74:	e7d7      	b.n	801df26 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x12a>

0801df76 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801df76:	b570      	push	{r4, r5, r6, lr}
 801df78:	4606      	mov	r6, r0
 801df7a:	b08a      	sub	sp, #40	; 0x28
 801df7c:	4615      	mov	r5, r2
 801df7e:	b191      	cbz	r1, 801dfa6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x30>
 801df80:	2401      	movs	r4, #1
 801df82:	e9cd 3100 	strd	r3, r1, [sp]
 801df86:	4613      	mov	r3, r2
 801df88:	4601      	mov	r1, r0
 801df8a:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801df8e:	a802      	add	r0, sp, #8
 801df90:	f7ff fd20 	bl	801d9d4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801df94:	2100      	movs	r1, #0
 801df96:	a802      	add	r0, sp, #8
 801df98:	f7ff ff30 	bl	801ddfc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801df9c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801dfa0:	b173      	cbz	r3, 801dfc0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 801dfa2:	3401      	adds	r4, #1
 801dfa4:	e7f6      	b.n	801df94 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1e>
 801dfa6:	2401      	movs	r4, #1
 801dfa8:	4611      	mov	r1, r2
 801dfaa:	f002 f8ad 	bl	8020108 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801dfae:	280a      	cmp	r0, #10
 801dfb0:	4629      	mov	r1, r5
 801dfb2:	4630      	mov	r0, r6
 801dfb4:	bf08      	it	eq
 801dfb6:	3401      	addeq	r4, #1
 801dfb8:	f002 f8a6 	bl	8020108 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801dfbc:	2800      	cmp	r0, #0
 801dfbe:	d1f6      	bne.n	801dfae <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x38>
 801dfc0:	b2a0      	uxth	r0, r4
 801dfc2:	b00a      	add	sp, #40	; 0x28
 801dfc4:	bd70      	pop	{r4, r5, r6, pc}

0801dfc6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801dfc6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dfca:	b0db      	sub	sp, #364	; 0x16c
 801dfcc:	468a      	mov	sl, r1
 801dfce:	461c      	mov	r4, r3
 801dfd0:	f8dd b190 	ldr.w	fp, [sp, #400]	; 0x190
 801dfd4:	9009      	str	r0, [sp, #36]	; 0x24
 801dfd6:	f1bb 0f00 	cmp.w	fp, #0
 801dfda:	f000 80c7 	beq.w	801e16c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801dfde:	681b      	ldr	r3, [r3, #0]
 801dfe0:	2b00      	cmp	r3, #0
 801dfe2:	f000 80c3 	beq.w	801e16c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801dfe6:	7ba3      	ldrb	r3, [r4, #14]
 801dfe8:	2b00      	cmp	r3, #0
 801dfea:	f000 80bf 	beq.w	801e16c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801dfee:	af0c      	add	r7, sp, #48	; 0x30
 801dff0:	6810      	ldr	r0, [r2, #0]
 801dff2:	6851      	ldr	r1, [r2, #4]
 801dff4:	f10d 0960 	add.w	r9, sp, #96	; 0x60
 801dff8:	463b      	mov	r3, r7
 801dffa:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 801dffe:	c303      	stmia	r3!, {r0, r1}
 801e000:	2100      	movs	r1, #0
 801e002:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 801e006:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 801e00a:	4638      	mov	r0, r7
 801e00c:	910e      	str	r1, [sp, #56]	; 0x38
 801e00e:	a90e      	add	r1, sp, #56	; 0x38
 801e010:	79a2      	ldrb	r2, [r4, #6]
 801e012:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801e016:	f7ff fd49 	bl	801daac <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801e01a:	a90e      	add	r1, sp, #56	; 0x38
 801e01c:	79a2      	ldrb	r2, [r4, #6]
 801e01e:	4608      	mov	r0, r1
 801e020:	f7ff fd44 	bl	801daac <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801e024:	4648      	mov	r0, r9
 801e026:	f001 ff2d 	bl	801fe84 <_ZN8touchgfx12TextProviderC1Ev>
 801e02a:	6820      	ldr	r0, [r4, #0]
 801e02c:	6803      	ldr	r3, [r0, #0]
 801e02e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e030:	4798      	blx	r3
 801e032:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801e034:	4603      	mov	r3, r0
 801e036:	4659      	mov	r1, fp
 801e038:	4648      	mov	r0, r9
 801e03a:	f001 ff40 	bl	801febe <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801e03e:	a82e      	add	r0, sp, #184	; 0xb8
 801e040:	f001 ff20 	bl	801fe84 <_ZN8touchgfx12TextProviderC1Ev>
 801e044:	f894 8004 	ldrb.w	r8, [r4, #4]
 801e048:	f1b8 0f00 	cmp.w	r8, #0
 801e04c:	d009      	beq.n	801e062 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 801e04e:	6820      	ldr	r0, [r4, #0]
 801e050:	6803      	ldr	r3, [r0, #0]
 801e052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e054:	4798      	blx	r3
 801e056:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801e058:	4603      	mov	r3, r0
 801e05a:	4659      	mov	r1, fp
 801e05c:	a82e      	add	r0, sp, #184	; 0xb8
 801e05e:	f001 ff2e 	bl	801febe <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801e062:	6820      	ldr	r0, [r4, #0]
 801e064:	6803      	ldr	r3, [r0, #0]
 801e066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e068:	4798      	blx	r3
 801e06a:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801e06e:	182e      	adds	r6, r5, r0
 801e070:	2e00      	cmp	r6, #0
 801e072:	dd45      	ble.n	801e100 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 801e074:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801e078:	4283      	cmp	r3, r0
 801e07a:	db41      	blt.n	801e100 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 801e07c:	441d      	add	r5, r3
 801e07e:	fb95 f5f6 	sdiv	r5, r5, r6
 801e082:	a844      	add	r0, sp, #272	; 0x110
 801e084:	f001 fefe 	bl	801fe84 <_ZN8touchgfx12TextProviderC1Ev>
 801e088:	7c23      	ldrb	r3, [r4, #16]
 801e08a:	b14b      	cbz	r3, 801e0a0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xda>
 801e08c:	6820      	ldr	r0, [r4, #0]
 801e08e:	6803      	ldr	r3, [r0, #0]
 801e090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e092:	4798      	blx	r3
 801e094:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801e096:	4603      	mov	r3, r0
 801e098:	4659      	mov	r1, fp
 801e09a:	a844      	add	r0, sp, #272	; 0x110
 801e09c:	f001 ff0f 	bl	801febe <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801e0a0:	7c21      	ldrb	r1, [r4, #16]
 801e0a2:	a810      	add	r0, sp, #64	; 0x40
 801e0a4:	7963      	ldrb	r3, [r4, #5]
 801e0a6:	9101      	str	r1, [sp, #4]
 801e0a8:	6821      	ldr	r1, [r4, #0]
 801e0aa:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801e0ae:	9100      	str	r1, [sp, #0]
 801e0b0:	a944      	add	r1, sp, #272	; 0x110
 801e0b2:	f7ff fc8f 	bl	801d9d4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801e0b6:	7c23      	ldrb	r3, [r4, #16]
 801e0b8:	bb23      	cbnz	r3, 801e104 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13e>
 801e0ba:	fa1f fb86 	uxth.w	fp, r6
 801e0be:	2d00      	cmp	r5, #0
 801e0c0:	dd57      	ble.n	801e172 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 801e0c2:	7961      	ldrb	r1, [r4, #5]
 801e0c4:	4648      	mov	r0, r9
 801e0c6:	f002 f81f 	bl	8020108 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e0ca:	4603      	mov	r3, r0
 801e0cc:	f1b8 0f00 	cmp.w	r8, #0
 801e0d0:	d005      	beq.n	801e0de <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x118>
 801e0d2:	9008      	str	r0, [sp, #32]
 801e0d4:	a82e      	add	r0, sp, #184	; 0xb8
 801e0d6:	7961      	ldrb	r1, [r4, #5]
 801e0d8:	f002 f816 	bl	8020108 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e0dc:	9b08      	ldr	r3, [sp, #32]
 801e0de:	2b00      	cmp	r3, #0
 801e0e0:	d044      	beq.n	801e16c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801e0e2:	2b0a      	cmp	r3, #10
 801e0e4:	d1eb      	bne.n	801e0be <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 801e0e6:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801e0ea:	3d01      	subs	r5, #1
 801e0ec:	445b      	add	r3, fp
 801e0ee:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801e0f2:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801e0f6:	eba3 030b 	sub.w	r3, r3, fp
 801e0fa:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801e0fe:	e7de      	b.n	801e0be <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 801e100:	2500      	movs	r5, #0
 801e102:	e7be      	b.n	801e082 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xbc>
 801e104:	0073      	lsls	r3, r6, #1
 801e106:	9308      	str	r3, [sp, #32]
 801e108:	2d00      	cmp	r5, #0
 801e10a:	dd32      	ble.n	801e172 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 801e10c:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 801e110:	a810      	add	r0, sp, #64	; 0x40
 801e112:	9b08      	ldr	r3, [sp, #32]
 801e114:	428b      	cmp	r3, r1
 801e116:	bfd4      	ite	le
 801e118:	2100      	movle	r1, #0
 801e11a:	2101      	movgt	r1, #1
 801e11c:	f7ff fe6e 	bl	801ddfc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801e120:	f8bd b052 	ldrh.w	fp, [sp, #82]	; 0x52
 801e124:	f10b 33ff 	add.w	r3, fp, #4294967295
 801e128:	fa1f fb83 	uxth.w	fp, r3
 801e12c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e130:	459b      	cmp	fp, r3
 801e132:	d00b      	beq.n	801e14c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801e134:	7961      	ldrb	r1, [r4, #5]
 801e136:	4648      	mov	r0, r9
 801e138:	f001 ffe6 	bl	8020108 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e13c:	f1b8 0f00 	cmp.w	r8, #0
 801e140:	d0f0      	beq.n	801e124 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 801e142:	7961      	ldrb	r1, [r4, #5]
 801e144:	a82e      	add	r0, sp, #184	; 0xb8
 801e146:	f001 ffdf 	bl	8020108 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e14a:	e7eb      	b.n	801e124 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 801e14c:	b2b3      	uxth	r3, r6
 801e14e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801e152:	3d01      	subs	r5, #1
 801e154:	441a      	add	r2, r3
 801e156:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 801e15a:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 801e15e:	1ad3      	subs	r3, r2, r3
 801e160:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801e164:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801e168:	2b00      	cmp	r3, #0
 801e16a:	d1cd      	bne.n	801e108 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 801e16c:	b05b      	add	sp, #364	; 0x16c
 801e16e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e172:	ea4f 0b46 	mov.w	fp, r6, lsl #1
 801e176:	f10d 052e 	add.w	r5, sp, #46	; 0x2e
 801e17a:	7c23      	ldrb	r3, [r4, #16]
 801e17c:	2b00      	cmp	r3, #0
 801e17e:	d05f      	beq.n	801e240 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x27a>
 801e180:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 801e184:	a810      	add	r0, sp, #64	; 0x40
 801e186:	458b      	cmp	fp, r1
 801e188:	bfd4      	ite	le
 801e18a:	2100      	movle	r1, #0
 801e18c:	2101      	movgt	r1, #1
 801e18e:	f7ff fe35 	bl	801ddfc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801e192:	f1b8 0f00 	cmp.w	r8, #0
 801e196:	d04c      	beq.n	801e232 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 801e198:	7c23      	ldrb	r3, [r4, #16]
 801e19a:	2b00      	cmp	r3, #0
 801e19c:	d053      	beq.n	801e246 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x280>
 801e19e:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 801e1a2:	7922      	ldrb	r2, [r4, #4]
 801e1a4:	2a01      	cmp	r2, #1
 801e1a6:	d13c      	bne.n	801e222 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801e1a8:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 801e1ac:	1ac0      	subs	r0, r0, r3
 801e1ae:	2302      	movs	r3, #2
 801e1b0:	fb90 f0f3 	sdiv	r0, r0, r3
 801e1b4:	b200      	sxth	r0, r0
 801e1b6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801e1ba:	4418      	add	r0, r3
 801e1bc:	7c23      	ldrb	r3, [r4, #16]
 801e1be:	8028      	strh	r0, [r5, #0]
 801e1c0:	2b00      	cmp	r3, #0
 801e1c2:	d03a      	beq.n	801e23a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x274>
 801e1c4:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 801e1c8:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 801e1cc:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801e1d0:	f8cd 9010 	str.w	r9, [sp, #16]
 801e1d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e1d6:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801e1da:	2200      	movs	r2, #0
 801e1dc:	2100      	movs	r1, #0
 801e1de:	e9cd 4202 	strd	r4, r2, [sp, #8]
 801e1e2:	e9cd 5700 	strd	r5, r7, [sp]
 801e1e6:	4652      	mov	r2, sl
 801e1e8:	f7ff fcb2 	bl	801db50 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801e1ec:	2800      	cmp	r0, #0
 801e1ee:	d1bd      	bne.n	801e16c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801e1f0:	b2b2      	uxth	r2, r6
 801e1f2:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801e1f6:	4611      	mov	r1, r2
 801e1f8:	4413      	add	r3, r2
 801e1fa:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 801e1fe:	b21b      	sxth	r3, r3
 801e200:	1a52      	subs	r2, r2, r1
 801e202:	7c21      	ldrb	r1, [r4, #16]
 801e204:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801e208:	b212      	sxth	r2, r2
 801e20a:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801e20e:	b109      	cbz	r1, 801e214 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 801e210:	42b2      	cmp	r2, r6
 801e212:	dbab      	blt.n	801e16c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801e214:	887a      	ldrh	r2, [r7, #2]
 801e216:	88f9      	ldrh	r1, [r7, #6]
 801e218:	440a      	add	r2, r1
 801e21a:	b212      	sxth	r2, r2
 801e21c:	4293      	cmp	r3, r2
 801e21e:	ddac      	ble.n	801e17a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1b4>
 801e220:	e7a4      	b.n	801e16c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801e222:	2a02      	cmp	r2, #2
 801e224:	d107      	bne.n	801e236 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 801e226:	7be2      	ldrb	r2, [r4, #15]
 801e228:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 801e22c:	1a80      	subs	r0, r0, r2
 801e22e:	1ac0      	subs	r0, r0, r3
 801e230:	e7c0      	b.n	801e1b4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 801e232:	7be0      	ldrb	r0, [r4, #15]
 801e234:	e7bf      	b.n	801e1b6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 801e236:	2000      	movs	r0, #0
 801e238:	e7bd      	b.n	801e1b6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 801e23a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801e23e:	e7c3      	b.n	801e1c8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x202>
 801e240:	f1b8 0f00 	cmp.w	r8, #0
 801e244:	d0f5      	beq.n	801e232 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 801e246:	2300      	movs	r3, #0
 801e248:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801e24c:	6821      	ldr	r1, [r4, #0]
 801e24e:	a82e      	add	r0, sp, #184	; 0xb8
 801e250:	f7ff fbfa 	bl	801da48 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801e254:	b203      	sxth	r3, r0
 801e256:	e7a4      	b.n	801e1a2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>

0801e258 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801e258:	2b02      	cmp	r3, #2
 801e25a:	b510      	push	{r4, lr}
 801e25c:	f9b0 4000 	ldrsh.w	r4, [r0]
 801e260:	d00b      	beq.n	801e27a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801e262:	2b03      	cmp	r3, #3
 801e264:	d00e      	beq.n	801e284 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 801e266:	2b01      	cmp	r3, #1
 801e268:	d001      	beq.n	801e26e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 801e26a:	1860      	adds	r0, r4, r1
 801e26c:	bd10      	pop	{r4, pc}
 801e26e:	8880      	ldrh	r0, [r0, #4]
 801e270:	4420      	add	r0, r4
 801e272:	b200      	sxth	r0, r0
 801e274:	1a80      	subs	r0, r0, r2
 801e276:	3801      	subs	r0, #1
 801e278:	e7f8      	b.n	801e26c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801e27a:	8880      	ldrh	r0, [r0, #4]
 801e27c:	4420      	add	r0, r4
 801e27e:	b200      	sxth	r0, r0
 801e280:	1a40      	subs	r0, r0, r1
 801e282:	e7f8      	b.n	801e276 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801e284:	18a0      	adds	r0, r4, r2
 801e286:	e7f1      	b.n	801e26c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0801e288 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801e288:	2b02      	cmp	r3, #2
 801e28a:	b510      	push	{r4, lr}
 801e28c:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801e290:	d006      	beq.n	801e2a0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 801e292:	2b03      	cmp	r3, #3
 801e294:	d00a      	beq.n	801e2ac <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801e296:	2b01      	cmp	r3, #1
 801e298:	bf14      	ite	ne
 801e29a:	18a0      	addne	r0, r4, r2
 801e29c:	1860      	addeq	r0, r4, r1
 801e29e:	bd10      	pop	{r4, pc}
 801e2a0:	88c0      	ldrh	r0, [r0, #6]
 801e2a2:	4420      	add	r0, r4
 801e2a4:	b200      	sxth	r0, r0
 801e2a6:	1a80      	subs	r0, r0, r2
 801e2a8:	3801      	subs	r0, #1
 801e2aa:	e7f8      	b.n	801e29e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 801e2ac:	88c0      	ldrh	r0, [r0, #6]
 801e2ae:	4420      	add	r0, r4
 801e2b0:	b200      	sxth	r0, r0
 801e2b2:	1a40      	subs	r0, r0, r1
 801e2b4:	e7f8      	b.n	801e2a8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

0801e2b8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801e2b8:	4b01      	ldr	r3, [pc, #4]	; (801e2c0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801e2ba:	2200      	movs	r2, #0
 801e2bc:	601a      	str	r2, [r3, #0]
 801e2be:	4770      	bx	lr
 801e2c0:	2000bf90 	.word	0x2000bf90

0801e2c4 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 801e2c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e2c6:	1e05      	subs	r5, r0, #0
 801e2c8:	f04f 0601 	mov.w	r6, #1
 801e2cc:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801e2d0:	bfba      	itte	lt
 801e2d2:	f04f 37ff 	movlt.w	r7, #4294967295
 801e2d6:	426d      	neglt	r5, r5
 801e2d8:	2701      	movge	r7, #1
 801e2da:	e9dd e405 	ldrd	lr, r4, [sp, #20]
 801e2de:	f1be 0f00 	cmp.w	lr, #0
 801e2e2:	bfbc      	itt	lt
 801e2e4:	f1ce 0e00 	rsblt	lr, lr, #0
 801e2e8:	427f      	neglt	r7, r7
 801e2ea:	2c00      	cmp	r4, #0
 801e2ec:	fa4e f001 	asr.w	r0, lr, r1
 801e2f0:	fa06 f101 	lsl.w	r1, r6, r1
 801e2f4:	bfbc      	itt	lt
 801e2f6:	4264      	neglt	r4, r4
 801e2f8:	427f      	neglt	r7, r7
 801e2fa:	3901      	subs	r1, #1
 801e2fc:	ea01 010e 	and.w	r1, r1, lr
 801e300:	434d      	muls	r5, r1
 801e302:	f8dc 1000 	ldr.w	r1, [ip]
 801e306:	fb03 1300 	mla	r3, r3, r0, r1
 801e30a:	fb95 f1f4 	sdiv	r1, r5, r4
 801e30e:	fb04 5511 	mls	r5, r4, r1, r5
 801e312:	441d      	add	r5, r3
 801e314:	fb95 f3f4 	sdiv	r3, r5, r4
 801e318:	4419      	add	r1, r3
 801e31a:	fb04 5413 	mls	r4, r4, r3, r5
 801e31e:	fb02 1000 	mla	r0, r2, r0, r1
 801e322:	f8cc 4000 	str.w	r4, [ip]
 801e326:	4378      	muls	r0, r7
 801e328:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801e32c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801e32c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e330:	4c24      	ldr	r4, [pc, #144]	; (801e3c4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 801e332:	b086      	sub	sp, #24
 801e334:	4605      	mov	r5, r0
 801e336:	6807      	ldr	r7, [r0, #0]
 801e338:	69a3      	ldr	r3, [r4, #24]
 801e33a:	b92b      	cbnz	r3, 801e348 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 801e33c:	6840      	ldr	r0, [r0, #4]
 801e33e:	e9c5 7000 	strd	r7, r0, [r5]
 801e342:	b006      	add	sp, #24
 801e344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e348:	f04f 0802 	mov.w	r8, #2
 801e34c:	68a2      	ldr	r2, [r4, #8]
 801e34e:	ae06      	add	r6, sp, #24
 801e350:	6820      	ldr	r0, [r4, #0]
 801e352:	fb93 f1f8 	sdiv	r1, r3, r8
 801e356:	440a      	add	r2, r1
 801e358:	69e1      	ldr	r1, [r4, #28]
 801e35a:	f846 2d04 	str.w	r2, [r6, #-4]!
 801e35e:	9700      	str	r7, [sp, #0]
 801e360:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801e362:	e9cd 3601 	strd	r3, r6, [sp, #4]
 801e366:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801e368:	f7ff ffac 	bl	801e2c4 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801e36c:	69a3      	ldr	r3, [r4, #24]
 801e36e:	4607      	mov	r7, r0
 801e370:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801e372:	9301      	str	r3, [sp, #4]
 801e374:	686b      	ldr	r3, [r5, #4]
 801e376:	6a21      	ldr	r1, [r4, #32]
 801e378:	9300      	str	r3, [sp, #0]
 801e37a:	9602      	str	r6, [sp, #8]
 801e37c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e37e:	6860      	ldr	r0, [r4, #4]
 801e380:	f7ff ffa0 	bl	801e2c4 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801e384:	69a2      	ldr	r2, [r4, #24]
 801e386:	6963      	ldr	r3, [r4, #20]
 801e388:	4407      	add	r7, r0
 801e38a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801e38c:	68e0      	ldr	r0, [r4, #12]
 801e38e:	fb92 f8f8 	sdiv	r8, r2, r8
 801e392:	4443      	add	r3, r8
 801e394:	9305      	str	r3, [sp, #20]
 801e396:	682b      	ldr	r3, [r5, #0]
 801e398:	e9cd 2601 	strd	r2, r6, [sp, #4]
 801e39c:	9300      	str	r3, [sp, #0]
 801e39e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801e3a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801e3a2:	f7ff ff8f 	bl	801e2c4 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801e3a6:	69a3      	ldr	r3, [r4, #24]
 801e3a8:	4680      	mov	r8, r0
 801e3aa:	9602      	str	r6, [sp, #8]
 801e3ac:	9301      	str	r3, [sp, #4]
 801e3ae:	686b      	ldr	r3, [r5, #4]
 801e3b0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801e3b2:	9300      	str	r3, [sp, #0]
 801e3b4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801e3b6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801e3b8:	6920      	ldr	r0, [r4, #16]
 801e3ba:	f7ff ff83 	bl	801e2c4 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801e3be:	4440      	add	r0, r8
 801e3c0:	e7bd      	b.n	801e33e <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 801e3c2:	bf00      	nop
 801e3c4:	2000bf94 	.word	0x2000bf94

0801e3c8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801e3c8:	4b07      	ldr	r3, [pc, #28]	; (801e3e8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801e3ca:	b510      	push	{r4, lr}
 801e3cc:	781b      	ldrb	r3, [r3, #0]
 801e3ce:	2b01      	cmp	r3, #1
 801e3d0:	d108      	bne.n	801e3e4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801e3d2:	4b06      	ldr	r3, [pc, #24]	; (801e3ec <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801e3d4:	880c      	ldrh	r4, [r1, #0]
 801e3d6:	881b      	ldrh	r3, [r3, #0]
 801e3d8:	f9b0 2000 	ldrsh.w	r2, [r0]
 801e3dc:	3b01      	subs	r3, #1
 801e3de:	1b1b      	subs	r3, r3, r4
 801e3e0:	8003      	strh	r3, [r0, #0]
 801e3e2:	800a      	strh	r2, [r1, #0]
 801e3e4:	bd10      	pop	{r4, pc}
 801e3e6:	bf00      	nop
 801e3e8:	2000bf5e 	.word	0x2000bf5e
 801e3ec:	2000bf62 	.word	0x2000bf62

0801e3f0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801e3f0:	4b0a      	ldr	r3, [pc, #40]	; (801e41c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801e3f2:	b510      	push	{r4, lr}
 801e3f4:	781b      	ldrb	r3, [r3, #0]
 801e3f6:	2b01      	cmp	r3, #1
 801e3f8:	d10e      	bne.n	801e418 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801e3fa:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801e3fe:	8843      	ldrh	r3, [r0, #2]
 801e400:	f9b0 4000 	ldrsh.w	r4, [r0]
 801e404:	18ca      	adds	r2, r1, r3
 801e406:	4b06      	ldr	r3, [pc, #24]	; (801e420 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801e408:	8044      	strh	r4, [r0, #2]
 801e40a:	881b      	ldrh	r3, [r3, #0]
 801e40c:	1a9b      	subs	r3, r3, r2
 801e40e:	8003      	strh	r3, [r0, #0]
 801e410:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801e414:	8081      	strh	r1, [r0, #4]
 801e416:	80c3      	strh	r3, [r0, #6]
 801e418:	bd10      	pop	{r4, pc}
 801e41a:	bf00      	nop
 801e41c:	2000bf5e 	.word	0x2000bf5e
 801e420:	2000bf5a 	.word	0x2000bf5a

0801e424 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801e424:	4b07      	ldr	r3, [pc, #28]	; (801e444 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801e426:	b510      	push	{r4, lr}
 801e428:	781b      	ldrb	r3, [r3, #0]
 801e42a:	2b01      	cmp	r3, #1
 801e42c:	d108      	bne.n	801e440 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801e42e:	f9b1 3000 	ldrsh.w	r3, [r1]
 801e432:	f9b0 4000 	ldrsh.w	r4, [r0]
 801e436:	8003      	strh	r3, [r0, #0]
 801e438:	8893      	ldrh	r3, [r2, #4]
 801e43a:	3b01      	subs	r3, #1
 801e43c:	1b1b      	subs	r3, r3, r4
 801e43e:	800b      	strh	r3, [r1, #0]
 801e440:	bd10      	pop	{r4, pc}
 801e442:	bf00      	nop
 801e444:	2000bf5e 	.word	0x2000bf5e

0801e448 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801e448:	4b08      	ldr	r3, [pc, #32]	; (801e46c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801e44a:	b513      	push	{r0, r1, r4, lr}
 801e44c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e450:	2400      	movs	r4, #0
 801e452:	4b07      	ldr	r3, [pc, #28]	; (801e470 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 801e454:	f8ad 2004 	strh.w	r2, [sp, #4]
 801e458:	466a      	mov	r2, sp
 801e45a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e45e:	9400      	str	r4, [sp, #0]
 801e460:	f8ad 3006 	strh.w	r3, [sp, #6]
 801e464:	f7ff ffde 	bl	801e424 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801e468:	b002      	add	sp, #8
 801e46a:	bd10      	pop	{r4, pc}
 801e46c:	2000bf5a 	.word	0x2000bf5a
 801e470:	2000bf5c 	.word	0x2000bf5c

0801e474 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801e474:	4b0a      	ldr	r3, [pc, #40]	; (801e4a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801e476:	460a      	mov	r2, r1
 801e478:	b510      	push	{r4, lr}
 801e47a:	781b      	ldrb	r3, [r3, #0]
 801e47c:	2b01      	cmp	r3, #1
 801e47e:	d10d      	bne.n	801e49c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801e480:	8881      	ldrh	r1, [r0, #4]
 801e482:	8803      	ldrh	r3, [r0, #0]
 801e484:	440b      	add	r3, r1
 801e486:	4601      	mov	r1, r0
 801e488:	3b01      	subs	r3, #1
 801e48a:	f821 3b02 	strh.w	r3, [r1], #2
 801e48e:	f7ff ffc9 	bl	801e424 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801e492:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801e496:	88c2      	ldrh	r2, [r0, #6]
 801e498:	80c3      	strh	r3, [r0, #6]
 801e49a:	8082      	strh	r2, [r0, #4]
 801e49c:	bd10      	pop	{r4, pc}
 801e49e:	bf00      	nop
 801e4a0:	2000bf5e 	.word	0x2000bf5e

0801e4a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801e4a4:	4b09      	ldr	r3, [pc, #36]	; (801e4cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801e4a6:	b507      	push	{r0, r1, r2, lr}
 801e4a8:	2100      	movs	r1, #0
 801e4aa:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e4ae:	4b08      	ldr	r3, [pc, #32]	; (801e4d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 801e4b0:	9100      	str	r1, [sp, #0]
 801e4b2:	4669      	mov	r1, sp
 801e4b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e4b8:	f8ad 2004 	strh.w	r2, [sp, #4]
 801e4bc:	f8ad 3006 	strh.w	r3, [sp, #6]
 801e4c0:	f7ff ffd8 	bl	801e474 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e4c4:	b003      	add	sp, #12
 801e4c6:	f85d fb04 	ldr.w	pc, [sp], #4
 801e4ca:	bf00      	nop
 801e4cc:	2000bf5a 	.word	0x2000bf5a
 801e4d0:	2000bf5c 	.word	0x2000bf5c

0801e4d4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801e4d4:	4b03      	ldr	r3, [pc, #12]	; (801e4e4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801e4d6:	6818      	ldr	r0, [r3, #0]
 801e4d8:	b110      	cbz	r0, 801e4e0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801e4da:	6803      	ldr	r3, [r0, #0]
 801e4dc:	699b      	ldr	r3, [r3, #24]
 801e4de:	4718      	bx	r3
 801e4e0:	4770      	bx	lr
 801e4e2:	bf00      	nop
 801e4e4:	2000bfe4 	.word	0x2000bfe4

0801e4e8 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801e4e8:	4770      	bx	lr
	...

0801e4ec <_ZN8touchgfx11Application4drawEv>:
 801e4ec:	4b09      	ldr	r3, [pc, #36]	; (801e514 <_ZN8touchgfx11Application4drawEv+0x28>)
 801e4ee:	b507      	push	{r0, r1, r2, lr}
 801e4f0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e4f4:	2100      	movs	r1, #0
 801e4f6:	4b08      	ldr	r3, [pc, #32]	; (801e518 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801e4f8:	9100      	str	r1, [sp, #0]
 801e4fa:	4669      	mov	r1, sp
 801e4fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e500:	f8ad 2004 	strh.w	r2, [sp, #4]
 801e504:	f8ad 3006 	strh.w	r3, [sp, #6]
 801e508:	6803      	ldr	r3, [r0, #0]
 801e50a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e50c:	4798      	blx	r3
 801e50e:	b003      	add	sp, #12
 801e510:	f85d fb04 	ldr.w	pc, [sp], #4
 801e514:	2000bf5a 	.word	0x2000bf5a
 801e518:	2000bf5c 	.word	0x2000bf5c

0801e51c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801e51c:	4b03      	ldr	r3, [pc, #12]	; (801e52c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801e51e:	6818      	ldr	r0, [r3, #0]
 801e520:	b110      	cbz	r0, 801e528 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801e522:	6803      	ldr	r3, [r0, #0]
 801e524:	69db      	ldr	r3, [r3, #28]
 801e526:	4718      	bx	r3
 801e528:	4770      	bx	lr
 801e52a:	bf00      	nop
 801e52c:	2000bfe4 	.word	0x2000bfe4

0801e530 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801e530:	4b03      	ldr	r3, [pc, #12]	; (801e540 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801e532:	6818      	ldr	r0, [r3, #0]
 801e534:	b110      	cbz	r0, 801e53c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801e536:	6803      	ldr	r3, [r0, #0]
 801e538:	6a1b      	ldr	r3, [r3, #32]
 801e53a:	4718      	bx	r3
 801e53c:	4770      	bx	lr
 801e53e:	bf00      	nop
 801e540:	2000bfe4 	.word	0x2000bfe4

0801e544 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801e544:	4b03      	ldr	r3, [pc, #12]	; (801e554 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801e546:	6818      	ldr	r0, [r3, #0]
 801e548:	b110      	cbz	r0, 801e550 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801e54a:	6803      	ldr	r3, [r0, #0]
 801e54c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e54e:	4718      	bx	r3
 801e550:	4770      	bx	lr
 801e552:	bf00      	nop
 801e554:	2000bfe4 	.word	0x2000bfe4

0801e558 <_ZN8touchgfx11Application15handleTickEventEv>:
 801e558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e55c:	4d3a      	ldr	r5, [pc, #232]	; (801e648 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 801e55e:	4604      	mov	r4, r0
 801e560:	6828      	ldr	r0, [r5, #0]
 801e562:	b140      	cbz	r0, 801e576 <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 801e564:	7a03      	ldrb	r3, [r0, #8]
 801e566:	b933      	cbnz	r3, 801e576 <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 801e568:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 801e56c:	6803      	ldr	r3, [r0, #0]
 801e56e:	689b      	ldr	r3, [r3, #8]
 801e570:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e574:	4718      	bx	r3
 801e576:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 801e57a:	b97b      	cbnz	r3, 801e59c <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801e57c:	b170      	cbz	r0, 801e59c <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801e57e:	7a03      	ldrb	r3, [r0, #8]
 801e580:	b163      	cbz	r3, 801e59c <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801e582:	4b32      	ldr	r3, [pc, #200]	; (801e64c <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801e584:	6818      	ldr	r0, [r3, #0]
 801e586:	b110      	cbz	r0, 801e58e <_ZN8touchgfx11Application15handleTickEventEv+0x36>
 801e588:	6803      	ldr	r3, [r0, #0]
 801e58a:	691b      	ldr	r3, [r3, #16]
 801e58c:	4798      	blx	r3
 801e58e:	6828      	ldr	r0, [r5, #0]
 801e590:	6803      	ldr	r3, [r0, #0]
 801e592:	68db      	ldr	r3, [r3, #12]
 801e594:	4798      	blx	r3
 801e596:	2301      	movs	r3, #1
 801e598:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 801e59c:	2500      	movs	r5, #0
 801e59e:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801e5a2:	42a8      	cmp	r0, r5
 801e5a4:	dd0c      	ble.n	801e5c0 <_ZN8touchgfx11Application15handleTickEventEv+0x68>
 801e5a6:	1963      	adds	r3, r4, r5
 801e5a8:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801e5ac:	b132      	cbz	r2, 801e5bc <_ZN8touchgfx11Application15handleTickEventEv+0x64>
 801e5ae:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801e5b2:	4413      	add	r3, r2
 801e5b4:	6858      	ldr	r0, [r3, #4]
 801e5b6:	6803      	ldr	r3, [r0, #0]
 801e5b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e5ba:	4798      	blx	r3
 801e5bc:	3501      	adds	r5, #1
 801e5be:	e7ee      	b.n	801e59e <_ZN8touchgfx11Application15handleTickEventEv+0x46>
 801e5c0:	f5c4 467f 	rsb	r6, r4, #65280	; 0xff00
 801e5c4:	3801      	subs	r0, #1
 801e5c6:	f04f 0c00 	mov.w	ip, #0
 801e5ca:	3678      	adds	r6, #120	; 0x78
 801e5cc:	1c43      	adds	r3, r0, #1
 801e5ce:	d033      	beq.n	801e638 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 801e5d0:	1823      	adds	r3, r4, r0
 801e5d2:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801e5d6:	bb6a      	cbnz	r2, 801e634 <_ZN8touchgfx11Application15handleTickEventEv+0xdc>
 801e5d8:	b281      	uxth	r1, r0
 801e5da:	1d25      	adds	r5, r4, #4
 801e5dc:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 801e5e0:	f8d3 9004 	ldr.w	r9, [r3, #4]
 801e5e4:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 801e5e8:	4293      	cmp	r3, r2
 801e5ea:	dc0a      	bgt.n	801e602 <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 801e5ec:	f101 0288 	add.w	r2, r1, #136	; 0x88
 801e5f0:	4422      	add	r2, r4
 801e5f2:	18b1      	adds	r1, r6, r2
 801e5f4:	b289      	uxth	r1, r1
 801e5f6:	428b      	cmp	r3, r1
 801e5f8:	d919      	bls.n	801e62e <_ZN8touchgfx11Application15handleTickEventEv+0xd6>
 801e5fa:	7851      	ldrb	r1, [r2, #1]
 801e5fc:	f802 1b01 	strb.w	r1, [r2], #1
 801e600:	e7f7      	b.n	801e5f2 <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 801e602:	682f      	ldr	r7, [r5, #0]
 801e604:	f105 0804 	add.w	r8, r5, #4
 801e608:	45b9      	cmp	r9, r7
 801e60a:	d10d      	bne.n	801e628 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>
 801e60c:	4696      	mov	lr, r2
 801e60e:	f1be 0f1e 	cmp.w	lr, #30
 801e612:	dc06      	bgt.n	801e622 <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 801e614:	f10e 0e01 	add.w	lr, lr, #1
 801e618:	686f      	ldr	r7, [r5, #4]
 801e61a:	4573      	cmp	r3, lr
 801e61c:	f845 7b04 	str.w	r7, [r5], #4
 801e620:	dcf5      	bgt.n	801e60e <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 801e622:	3b01      	subs	r3, #1
 801e624:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 801e628:	3201      	adds	r2, #1
 801e62a:	4645      	mov	r5, r8
 801e62c:	e7da      	b.n	801e5e4 <_ZN8touchgfx11Application15handleTickEventEv+0x8c>
 801e62e:	4423      	add	r3, r4
 801e630:	f883 c088 	strb.w	ip, [r3, #136]	; 0x88
 801e634:	3801      	subs	r0, #1
 801e636:	e7c9      	b.n	801e5cc <_ZN8touchgfx11Application15handleTickEventEv+0x74>
 801e638:	4b04      	ldr	r3, [pc, #16]	; (801e64c <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801e63a:	6818      	ldr	r0, [r3, #0]
 801e63c:	b110      	cbz	r0, 801e644 <_ZN8touchgfx11Application15handleTickEventEv+0xec>
 801e63e:	6803      	ldr	r3, [r0, #0]
 801e640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e642:	e795      	b.n	801e570 <_ZN8touchgfx11Application15handleTickEventEv+0x18>
 801e644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e648:	2000bfe8 	.word	0x2000bfe8
 801e64c:	2000bfe4 	.word	0x2000bfe4

0801e650 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801e650:	b570      	push	{r4, r5, r6, lr}
 801e652:	4606      	mov	r6, r0
 801e654:	460c      	mov	r4, r1
 801e656:	b929      	cbnz	r1, 801e664 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801e658:	4b0c      	ldr	r3, [pc, #48]	; (801e68c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801e65a:	2164      	movs	r1, #100	; 0x64
 801e65c:	4a0c      	ldr	r2, [pc, #48]	; (801e690 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801e65e:	480d      	ldr	r0, [pc, #52]	; (801e694 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801e660:	f00c f88e 	bl	802a780 <__assert_func>
 801e664:	2300      	movs	r3, #0
 801e666:	4d0c      	ldr	r5, [pc, #48]	; (801e698 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801e668:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801e66c:	6828      	ldr	r0, [r5, #0]
 801e66e:	b110      	cbz	r0, 801e676 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801e670:	6803      	ldr	r3, [r0, #0]
 801e672:	695b      	ldr	r3, [r3, #20]
 801e674:	4798      	blx	r3
 801e676:	602c      	str	r4, [r5, #0]
 801e678:	4620      	mov	r0, r4
 801e67a:	6823      	ldr	r3, [r4, #0]
 801e67c:	68db      	ldr	r3, [r3, #12]
 801e67e:	4798      	blx	r3
 801e680:	6833      	ldr	r3, [r6, #0]
 801e682:	4630      	mov	r0, r6
 801e684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e686:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e68a:	4718      	bx	r3
 801e68c:	0802ec98 	.word	0x0802ec98
 801e690:	0802ed60 	.word	0x0802ed60
 801e694:	0802eca2 	.word	0x0802eca2
 801e698:	2000bfe4 	.word	0x2000bfe4

0801e69c <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801e69c:	b510      	push	{r4, lr}
 801e69e:	f9b1 4000 	ldrsh.w	r4, [r1]
 801e6a2:	888a      	ldrh	r2, [r1, #4]
 801e6a4:	f9b0 3000 	ldrsh.w	r3, [r0]
 801e6a8:	4422      	add	r2, r4
 801e6aa:	b212      	sxth	r2, r2
 801e6ac:	4293      	cmp	r3, r2
 801e6ae:	da15      	bge.n	801e6dc <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801e6b0:	8882      	ldrh	r2, [r0, #4]
 801e6b2:	4413      	add	r3, r2
 801e6b4:	b21b      	sxth	r3, r3
 801e6b6:	429c      	cmp	r4, r3
 801e6b8:	da10      	bge.n	801e6dc <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801e6ba:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801e6be:	88c9      	ldrh	r1, [r1, #6]
 801e6c0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801e6c4:	4419      	add	r1, r3
 801e6c6:	b209      	sxth	r1, r1
 801e6c8:	428a      	cmp	r2, r1
 801e6ca:	da07      	bge.n	801e6dc <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801e6cc:	88c0      	ldrh	r0, [r0, #6]
 801e6ce:	4410      	add	r0, r2
 801e6d0:	b200      	sxth	r0, r0
 801e6d2:	4283      	cmp	r3, r0
 801e6d4:	bfac      	ite	ge
 801e6d6:	2000      	movge	r0, #0
 801e6d8:	2001      	movlt	r0, #1
 801e6da:	bd10      	pop	{r4, pc}
 801e6dc:	2000      	movs	r0, #0
 801e6de:	e7fc      	b.n	801e6da <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801e6e0 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801e6e0:	b570      	push	{r4, r5, r6, lr}
 801e6e2:	f9b1 4000 	ldrsh.w	r4, [r1]
 801e6e6:	f9b0 5000 	ldrsh.w	r5, [r0]
 801e6ea:	42ac      	cmp	r4, r5
 801e6ec:	db18      	blt.n	801e720 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801e6ee:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801e6f2:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801e6f6:	429a      	cmp	r2, r3
 801e6f8:	db12      	blt.n	801e720 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801e6fa:	8886      	ldrh	r6, [r0, #4]
 801e6fc:	4435      	add	r5, r6
 801e6fe:	888e      	ldrh	r6, [r1, #4]
 801e700:	4434      	add	r4, r6
 801e702:	b22d      	sxth	r5, r5
 801e704:	b224      	sxth	r4, r4
 801e706:	42a5      	cmp	r5, r4
 801e708:	db0a      	blt.n	801e720 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801e70a:	88c0      	ldrh	r0, [r0, #6]
 801e70c:	4418      	add	r0, r3
 801e70e:	88cb      	ldrh	r3, [r1, #6]
 801e710:	441a      	add	r2, r3
 801e712:	b200      	sxth	r0, r0
 801e714:	b212      	sxth	r2, r2
 801e716:	4290      	cmp	r0, r2
 801e718:	bfb4      	ite	lt
 801e71a:	2000      	movlt	r0, #0
 801e71c:	2001      	movge	r0, #1
 801e71e:	bd70      	pop	{r4, r5, r6, pc}
 801e720:	2000      	movs	r0, #0
 801e722:	e7fc      	b.n	801e71e <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0801e724 <_ZN8touchgfx11Application11getInstanceEv>:
 801e724:	4b01      	ldr	r3, [pc, #4]	; (801e72c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801e726:	6818      	ldr	r0, [r3, #0]
 801e728:	4770      	bx	lr
 801e72a:	bf00      	nop
 801e72c:	2000bff4 	.word	0x2000bff4

0801e730 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801e730:	2300      	movs	r3, #0
 801e732:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801e736:	30a8      	adds	r0, #168	; 0xa8
 801e738:	f820 3c24 	strh.w	r3, [r0, #-36]
 801e73c:	f802 3b01 	strb.w	r3, [r2], #1
 801e740:	4282      	cmp	r2, r0
 801e742:	d1fb      	bne.n	801e73c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801e744:	4770      	bx	lr

0801e746 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801e746:	4603      	mov	r3, r0
 801e748:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801e74c:	2200      	movs	r2, #0
 801e74e:	801a      	strh	r2, [r3, #0]
 801e750:	3308      	adds	r3, #8
 801e752:	f823 2c06 	strh.w	r2, [r3, #-6]
 801e756:	f823 2c04 	strh.w	r2, [r3, #-4]
 801e75a:	f823 2c02 	strh.w	r2, [r3, #-2]
 801e75e:	428b      	cmp	r3, r1
 801e760:	d1f5      	bne.n	801e74e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801e762:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801e766:	4770      	bx	lr

0801e768 <_ZN8touchgfx11ApplicationC1Ev>:
 801e768:	b570      	push	{r4, r5, r6, lr}
 801e76a:	4b16      	ldr	r3, [pc, #88]	; (801e7c4 <_ZN8touchgfx11ApplicationC1Ev+0x5c>)
 801e76c:	2500      	movs	r5, #0
 801e76e:	4604      	mov	r4, r0
 801e770:	30a8      	adds	r0, #168	; 0xa8
 801e772:	f840 3ca8 	str.w	r3, [r0, #-168]
 801e776:	f820 5c24 	strh.w	r5, [r0, #-36]
 801e77a:	f7ff ffe4 	bl	801e746 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801e77e:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801e782:	f7ff ffe0 	bl	801e746 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801e786:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
 801e78a:	f884 512d 	strb.w	r5, [r4, #301]	; 0x12d
 801e78e:	490e      	ldr	r1, [pc, #56]	; (801e7c8 <_ZN8touchgfx11ApplicationC1Ev+0x60>)
 801e790:	480e      	ldr	r0, [pc, #56]	; (801e7cc <_ZN8touchgfx11ApplicationC1Ev+0x64>)
 801e792:	f00a fadb 	bl	8028d4c <CRC_Lock>
 801e796:	4e0e      	ldr	r6, [pc, #56]	; (801e7d0 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 801e798:	4b0e      	ldr	r3, [pc, #56]	; (801e7d4 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801e79a:	b158      	cbz	r0, 801e7b4 <_ZN8touchgfx11ApplicationC1Ev+0x4c>
 801e79c:	801d      	strh	r5, [r3, #0]
 801e79e:	2300      	movs	r3, #0
 801e7a0:	4a0d      	ldr	r2, [pc, #52]	; (801e7d8 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801e7a2:	4620      	mov	r0, r4
 801e7a4:	6013      	str	r3, [r2, #0]
 801e7a6:	4a0d      	ldr	r2, [pc, #52]	; (801e7dc <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801e7a8:	6033      	str	r3, [r6, #0]
 801e7aa:	6013      	str	r3, [r2, #0]
 801e7ac:	f7ff ffc0 	bl	801e730 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801e7b0:	4620      	mov	r0, r4
 801e7b2:	bd70      	pop	{r4, r5, r6, pc}
 801e7b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801e7b8:	2002      	movs	r0, #2
 801e7ba:	801a      	strh	r2, [r3, #0]
 801e7bc:	6030      	str	r0, [r6, #0]
 801e7be:	f000 ff81 	bl	801f6c4 <_ZN8touchgfx6Screen4drawEv>
 801e7c2:	e7ec      	b.n	801e79e <_ZN8touchgfx11ApplicationC1Ev+0x36>
 801e7c4:	0802ed2c 	.word	0x0802ed2c
 801e7c8:	b5e8b5cd 	.word	0xb5e8b5cd
 801e7cc:	f407a5c2 	.word	0xf407a5c2
 801e7d0:	2000bfe4 	.word	0x2000bfe4
 801e7d4:	20000084 	.word	0x20000084
 801e7d8:	2000bff4 	.word	0x2000bff4
 801e7dc:	2000bfe8 	.word	0x2000bfe8

0801e7e0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801e7e0:	2300      	movs	r3, #0
 801e7e2:	8003      	strh	r3, [r0, #0]
 801e7e4:	8043      	strh	r3, [r0, #2]
 801e7e6:	8083      	strh	r3, [r0, #4]
 801e7e8:	80c3      	strh	r3, [r0, #6]
 801e7ea:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 801e7ee:	4293      	cmp	r3, r2
 801e7f0:	b530      	push	{r4, r5, lr}
 801e7f2:	d912      	bls.n	801e81a <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801e7f4:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 801e7f8:	3b01      	subs	r3, #1
 801e7fa:	6825      	ldr	r5, [r4, #0]
 801e7fc:	b29b      	uxth	r3, r3
 801e7fe:	6005      	str	r5, [r0, #0]
 801e800:	4293      	cmp	r3, r2
 801e802:	6865      	ldr	r5, [r4, #4]
 801e804:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 801e808:	6045      	str	r5, [r0, #4]
 801e80a:	d906      	bls.n	801e81a <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801e80c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801e810:	681d      	ldr	r5, [r3, #0]
 801e812:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 801e816:	685d      	ldr	r5, [r3, #4]
 801e818:	6065      	str	r5, [r4, #4]
 801e81a:	bd30      	pop	{r4, r5, pc}

0801e81c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801e81c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e81e:	466b      	mov	r3, sp
 801e820:	4604      	mov	r4, r0
 801e822:	e883 0006 	stmia.w	r3, {r1, r2}
 801e826:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801e82a:	2a07      	cmp	r2, #7
 801e82c:	d906      	bls.n	801e83c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801e82e:	4b09      	ldr	r3, [pc, #36]	; (801e854 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801e830:	f44f 7102 	mov.w	r1, #520	; 0x208
 801e834:	4a08      	ldr	r2, [pc, #32]	; (801e858 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801e836:	4809      	ldr	r0, [pc, #36]	; (801e85c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801e838:	f00b ffa2 	bl	802a780 <__assert_func>
 801e83c:	1c51      	adds	r1, r2, #1
 801e83e:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801e842:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801e846:	cb03      	ldmia	r3!, {r0, r1}
 801e848:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801e84c:	6069      	str	r1, [r5, #4]
 801e84e:	b003      	add	sp, #12
 801e850:	bd30      	pop	{r4, r5, pc}
 801e852:	bf00      	nop
 801e854:	0802eccc 	.word	0x0802eccc
 801e858:	0802eda4 	.word	0x0802eda4
 801e85c:	0802ecfb 	.word	0x0802ecfb

0801e860 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801e860:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e864:	b089      	sub	sp, #36	; 0x24
 801e866:	4606      	mov	r6, r0
 801e868:	466c      	mov	r4, sp
 801e86a:	4620      	mov	r0, r4
 801e86c:	e884 0006 	stmia.w	r4, {r1, r2}
 801e870:	f7fc fc4c 	bl	801b10c <_ZNK8touchgfx4Rect7isEmptyEv>
 801e874:	bbb0      	cbnz	r0, 801e8e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801e876:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 801e87a:	b1fd      	cbz	r5, 801e8bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 801e87c:	3d01      	subs	r5, #1
 801e87e:	af04      	add	r7, sp, #16
 801e880:	f04f 090a 	mov.w	r9, #10
 801e884:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 801e888:	ab02      	add	r3, sp, #8
 801e88a:	fa1f f885 	uxth.w	r8, r5
 801e88e:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801e892:	6851      	ldr	r1, [r2, #4]
 801e894:	c303      	stmia	r3!, {r0, r1}
 801e896:	4621      	mov	r1, r4
 801e898:	a802      	add	r0, sp, #8
 801e89a:	f7ff ff21 	bl	801e6e0 <_ZNK8touchgfx4Rect8includesERKS0_>
 801e89e:	bb08      	cbnz	r0, 801e8e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801e8a0:	a902      	add	r1, sp, #8
 801e8a2:	4620      	mov	r0, r4
 801e8a4:	f7ff ff1c 	bl	801e6e0 <_ZNK8touchgfx4Rect8includesERKS0_>
 801e8a8:	b1f8      	cbz	r0, 801e8ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 801e8aa:	4642      	mov	r2, r8
 801e8ac:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801e8b0:	a806      	add	r0, sp, #24
 801e8b2:	f7ff ff95 	bl	801e7e0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801e8b6:	f115 35ff 	adds.w	r5, r5, #4294967295
 801e8ba:	d2e3      	bcs.n	801e884 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 801e8bc:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 801e8c0:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 801e8c4:	2b08      	cmp	r3, #8
 801e8c6:	d108      	bne.n	801e8da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801e8c8:	4629      	mov	r1, r5
 801e8ca:	a806      	add	r0, sp, #24
 801e8cc:	2207      	movs	r2, #7
 801e8ce:	f7ff ff87 	bl	801e7e0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801e8d2:	a906      	add	r1, sp, #24
 801e8d4:	4620      	mov	r0, r4
 801e8d6:	f7fd fe14 	bl	801c502 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801e8da:	4628      	mov	r0, r5
 801e8dc:	e894 0006 	ldmia.w	r4, {r1, r2}
 801e8e0:	f7ff ff9c 	bl	801e81c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801e8e4:	b009      	add	sp, #36	; 0x24
 801e8e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e8ea:	4621      	mov	r1, r4
 801e8ec:	a802      	add	r0, sp, #8
 801e8ee:	f7ff fed5 	bl	801e69c <_ZNK8touchgfx4Rect9intersectERKS0_>
 801e8f2:	b150      	cbz	r0, 801e90a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 801e8f4:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801e8f8:	a806      	add	r0, sp, #24
 801e8fa:	4642      	mov	r2, r8
 801e8fc:	f7ff ff70 	bl	801e7e0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801e900:	a902      	add	r1, sp, #8
 801e902:	4620      	mov	r0, r4
 801e904:	f7fd fdfd 	bl	801c502 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801e908:	e7d5      	b.n	801e8b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801e90a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801e90e:	e887 0003 	stmia.w	r7, {r0, r1}
 801e912:	a902      	add	r1, sp, #8
 801e914:	4638      	mov	r0, r7
 801e916:	f7fd fdf4 	bl	801c502 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801e91a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801e91e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801e922:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801e926:	fb13 f302 	smulbb	r3, r3, r2
 801e92a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801e92e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801e932:	fb11 f102 	smulbb	r1, r1, r2
 801e936:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801e93a:	fb09 f303 	mul.w	r3, r9, r3
 801e93e:	fb12 1100 	smlabb	r1, r2, r0, r1
 801e942:	220b      	movs	r2, #11
 801e944:	434a      	muls	r2, r1
 801e946:	4293      	cmp	r3, r2
 801e948:	dab5      	bge.n	801e8b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801e94a:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801e94e:	a806      	add	r0, sp, #24
 801e950:	4642      	mov	r2, r8
 801e952:	f7ff ff45 	bl	801e7e0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801e956:	e897 0003 	ldmia.w	r7, {r0, r1}
 801e95a:	e884 0003 	stmia.w	r4, {r0, r1}
 801e95e:	e7aa      	b.n	801e8b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

0801e960 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801e960:	4b1d      	ldr	r3, [pc, #116]	; (801e9d8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801e962:	b530      	push	{r4, r5, lr}
 801e964:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e968:	b085      	sub	sp, #20
 801e96a:	4b1c      	ldr	r3, [pc, #112]	; (801e9dc <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801e96c:	460c      	mov	r4, r1
 801e96e:	2100      	movs	r1, #0
 801e970:	4605      	mov	r5, r0
 801e972:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e976:	6820      	ldr	r0, [r4, #0]
 801e978:	9100      	str	r1, [sp, #0]
 801e97a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801e97e:	ab02      	add	r3, sp, #8
 801e980:	6861      	ldr	r1, [r4, #4]
 801e982:	f8ad 2004 	strh.w	r2, [sp, #4]
 801e986:	c303      	stmia	r3!, {r0, r1}
 801e988:	4669      	mov	r1, sp
 801e98a:	a802      	add	r0, sp, #8
 801e98c:	f7fc fb7a 	bl	801b084 <_ZN8touchgfx4RectaNERKS0_>
 801e990:	ab02      	add	r3, sp, #8
 801e992:	cb03      	ldmia	r3!, {r0, r1}
 801e994:	4b12      	ldr	r3, [pc, #72]	; (801e9e0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 801e996:	6020      	str	r0, [r4, #0]
 801e998:	6818      	ldr	r0, [r3, #0]
 801e99a:	6061      	str	r1, [r4, #4]
 801e99c:	b138      	cbz	r0, 801e9ae <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801e99e:	f895 312c 	ldrb.w	r3, [r5, #300]	; 0x12c
 801e9a2:	b133      	cbz	r3, 801e9b2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 801e9a4:	6821      	ldr	r1, [r4, #0]
 801e9a6:	4628      	mov	r0, r5
 801e9a8:	6862      	ldr	r2, [r4, #4]
 801e9aa:	f7ff ff59 	bl	801e860 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801e9ae:	b005      	add	sp, #20
 801e9b0:	bd30      	pop	{r4, r5, pc}
 801e9b2:	6803      	ldr	r3, [r0, #0]
 801e9b4:	4621      	mov	r1, r4
 801e9b6:	689b      	ldr	r3, [r3, #8]
 801e9b8:	4798      	blx	r3
 801e9ba:	4b0a      	ldr	r3, [pc, #40]	; (801e9e4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 801e9bc:	6818      	ldr	r0, [r3, #0]
 801e9be:	b118      	cbz	r0, 801e9c8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 801e9c0:	6803      	ldr	r3, [r0, #0]
 801e9c2:	4621      	mov	r1, r4
 801e9c4:	689b      	ldr	r3, [r3, #8]
 801e9c6:	4798      	blx	r3
 801e9c8:	4b07      	ldr	r3, [pc, #28]	; (801e9e8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 801e9ca:	4621      	mov	r1, r4
 801e9cc:	6818      	ldr	r0, [r3, #0]
 801e9ce:	6803      	ldr	r3, [r0, #0]
 801e9d0:	695b      	ldr	r3, [r3, #20]
 801e9d2:	4798      	blx	r3
 801e9d4:	e7eb      	b.n	801e9ae <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801e9d6:	bf00      	nop
 801e9d8:	2000bf5a 	.word	0x2000bf5a
 801e9dc:	2000bf5c 	.word	0x2000bf5c
 801e9e0:	2000bfe4 	.word	0x2000bfe4
 801e9e4:	2000bfe0 	.word	0x2000bfe0
 801e9e8:	2000bf68 	.word	0x2000bf68

0801e9ec <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801e9ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e9f0:	4604      	mov	r4, r0
 801e9f2:	b09b      	sub	sp, #108	; 0x6c
 801e9f4:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
 801e9f8:	b129      	cbz	r1, 801ea06 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801e9fa:	2300      	movs	r3, #0
 801e9fc:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801ea00:	b01b      	add	sp, #108	; 0x6c
 801ea02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea06:	4baf      	ldr	r3, [pc, #700]	; (801ecc4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 801ea08:	681b      	ldr	r3, [r3, #0]
 801ea0a:	b33b      	cbz	r3, 801ea5c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801ea0c:	4dae      	ldr	r5, [pc, #696]	; (801ecc8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 801ea0e:	4628      	mov	r0, r5
 801ea10:	f7fc fb7c 	bl	801b10c <_ZNK8touchgfx4Rect7isEmptyEv>
 801ea14:	4606      	mov	r6, r0
 801ea16:	bb08      	cbnz	r0, 801ea5c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801ea18:	4628      	mov	r0, r5
 801ea1a:	f7ff fce9 	bl	801e3f0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801ea1e:	6829      	ldr	r1, [r5, #0]
 801ea20:	686a      	ldr	r2, [r5, #4]
 801ea22:	4620      	mov	r0, r4
 801ea24:	f7ff ff1c 	bl	801e860 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801ea28:	802e      	strh	r6, [r5, #0]
 801ea2a:	806e      	strh	r6, [r5, #2]
 801ea2c:	80ae      	strh	r6, [r5, #4]
 801ea2e:	80ee      	strh	r6, [r5, #6]
 801ea30:	4fa6      	ldr	r7, [pc, #664]	; (801eccc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 801ea32:	a809      	add	r0, sp, #36	; 0x24
 801ea34:	f7ff fe87 	bl	801e746 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801ea38:	883d      	ldrh	r5, [r7, #0]
 801ea3a:	462e      	mov	r6, r5
 801ea3c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801ea40:	42b3      	cmp	r3, r6
 801ea42:	d910      	bls.n	801ea66 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7a>
 801ea44:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801ea48:	3601      	adds	r6, #1
 801ea4a:	a809      	add	r0, sp, #36	; 0x24
 801ea4c:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801ea50:	b2b6      	uxth	r6, r6
 801ea52:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801ea56:	f7ff fee1 	bl	801e81c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801ea5a:	e7ef      	b.n	801ea3c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x50>
 801ea5c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801ea60:	2b00      	cmp	r3, #0
 801ea62:	d1e5      	bne.n	801ea30 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x44>
 801ea64:	e7cc      	b.n	801ea00 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801ea66:	462e      	mov	r6, r5
 801ea68:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801ea6c:	42b3      	cmp	r3, r6
 801ea6e:	d90b      	bls.n	801ea88 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 801ea70:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801ea74:	3601      	adds	r6, #1
 801ea76:	4620      	mov	r0, r4
 801ea78:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801ea7c:	b2b6      	uxth	r6, r6
 801ea7e:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801ea82:	f7ff feed 	bl	801e860 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801ea86:	e7ef      	b.n	801ea68 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7c>
 801ea88:	4e91      	ldr	r6, [pc, #580]	; (801ecd0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 801ea8a:	6833      	ldr	r3, [r6, #0]
 801ea8c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801ea90:	2b01      	cmp	r3, #1
 801ea92:	f040 8092 	bne.w	801ebba <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ce>
 801ea96:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801ea9a:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801ea9e:	f04f 0900 	mov.w	r9, #0
 801eaa2:	33aa      	adds	r3, #170	; 0xaa
 801eaa4:	42a8      	cmp	r0, r5
 801eaa6:	f103 0308 	add.w	r3, r3, #8
 801eaaa:	dd0a      	ble.n	801eac2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xd6>
 801eaac:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801eab0:	3501      	adds	r5, #1
 801eab2:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801eab6:	440a      	add	r2, r1
 801eab8:	b212      	sxth	r2, r2
 801eaba:	4591      	cmp	r9, r2
 801eabc:	bfb8      	it	lt
 801eabe:	4691      	movlt	r9, r2
 801eac0:	e7f0      	b.n	801eaa4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xb8>
 801eac2:	4b84      	ldr	r3, [pc, #528]	; (801ecd4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 801eac4:	f8df 8214 	ldr.w	r8, [pc, #532]	; 801ecdc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>
 801eac8:	881d      	ldrh	r5, [r3, #0]
 801eaca:	2300      	movs	r3, #0
 801eacc:	2d0f      	cmp	r5, #15
 801eace:	bf8c      	ite	hi
 801ead0:	08ed      	lsrhi	r5, r5, #3
 801ead2:	2501      	movls	r5, #1
 801ead4:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801ead8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801eadc:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 801eae0:	6830      	ldr	r0, [r6, #0]
 801eae2:	440b      	add	r3, r1
 801eae4:	6802      	ldr	r2, [r0, #0]
 801eae6:	b21b      	sxth	r3, r3
 801eae8:	4599      	cmp	r9, r3
 801eaea:	dd49      	ble.n	801eb80 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x194>
 801eaec:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 801eaf0:	4798      	blx	r3
 801eaf2:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801eaf6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801eafa:	4413      	add	r3, r2
 801eafc:	b21b      	sxth	r3, r3
 801eafe:	195a      	adds	r2, r3, r5
 801eb00:	4290      	cmp	r0, r2
 801eb02:	da07      	bge.n	801eb14 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 801eb04:	4581      	cmp	r9, r0
 801eb06:	dd05      	ble.n	801eb14 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 801eb08:	4298      	cmp	r0, r3
 801eb0a:	da33      	bge.n	801eb74 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 801eb0c:	2b00      	cmp	r3, #0
 801eb0e:	dd31      	ble.n	801eb74 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 801eb10:	4648      	mov	r0, r9
 801eb12:	e004      	b.n	801eb1e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x132>
 801eb14:	4298      	cmp	r0, r3
 801eb16:	dbfb      	blt.n	801eb10 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x124>
 801eb18:	4548      	cmp	r0, r9
 801eb1a:	bfa8      	it	ge
 801eb1c:	4648      	movge	r0, r9
 801eb1e:	f9b8 2000 	ldrsh.w	r2, [r8]
 801eb22:	2100      	movs	r1, #0
 801eb24:	1ac0      	subs	r0, r0, r3
 801eb26:	f8b7 a000 	ldrh.w	sl, [r7]
 801eb2a:	f8ad 1014 	strh.w	r1, [sp, #20]
 801eb2e:	f8ad 3016 	strh.w	r3, [sp, #22]
 801eb32:	f8ad 2018 	strh.w	r2, [sp, #24]
 801eb36:	f8ad 001a 	strh.w	r0, [sp, #26]
 801eb3a:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801eb3e:	4553      	cmp	r3, sl
 801eb40:	d9ca      	bls.n	801ead8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 801eb42:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801eb46:	ab07      	add	r3, sp, #28
 801eb48:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801eb4c:	6851      	ldr	r1, [r2, #4]
 801eb4e:	c303      	stmia	r3!, {r0, r1}
 801eb50:	a807      	add	r0, sp, #28
 801eb52:	a905      	add	r1, sp, #20
 801eb54:	f7fc fa96 	bl	801b084 <_ZN8touchgfx4RectaNERKS0_>
 801eb58:	a807      	add	r0, sp, #28
 801eb5a:	f7fc fad7 	bl	801b10c <_ZNK8touchgfx4Rect7isEmptyEv>
 801eb5e:	b920      	cbnz	r0, 801eb6a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x17e>
 801eb60:	6823      	ldr	r3, [r4, #0]
 801eb62:	a907      	add	r1, sp, #28
 801eb64:	4620      	mov	r0, r4
 801eb66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801eb68:	4798      	blx	r3
 801eb6a:	f10a 0a01 	add.w	sl, sl, #1
 801eb6e:	fa1f fa8a 	uxth.w	sl, sl
 801eb72:	e7e2      	b.n	801eb3a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14e>
 801eb74:	6830      	ldr	r0, [r6, #0]
 801eb76:	2101      	movs	r1, #1
 801eb78:	6803      	ldr	r3, [r0, #0]
 801eb7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801eb7c:	4798      	blx	r3
 801eb7e:	e7ab      	b.n	801ead8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 801eb80:	69d3      	ldr	r3, [r2, #28]
 801eb82:	4798      	blx	r3
 801eb84:	4b54      	ldr	r3, [pc, #336]	; (801ecd8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 801eb86:	781b      	ldrb	r3, [r3, #0]
 801eb88:	2b00      	cmp	r3, #0
 801eb8a:	f43f af39 	beq.w	801ea00 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801eb8e:	2300      	movs	r3, #0
 801eb90:	883d      	ldrh	r5, [r7, #0]
 801eb92:	34ea      	adds	r4, #234	; 0xea
 801eb94:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801eb98:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801eb9c:	42ab      	cmp	r3, r5
 801eb9e:	f67f af2f 	bls.w	801ea00 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801eba2:	ab1a      	add	r3, sp, #104	; 0x68
 801eba4:	4620      	mov	r0, r4
 801eba6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801ebaa:	3501      	adds	r5, #1
 801ebac:	3b44      	subs	r3, #68	; 0x44
 801ebae:	b2ad      	uxth	r5, r5
 801ebb0:	e893 0006 	ldmia.w	r3, {r1, r2}
 801ebb4:	f7ff fe32 	bl	801e81c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801ebb8:	e7ee      	b.n	801eb98 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ac>
 801ebba:	2b02      	cmp	r3, #2
 801ebbc:	d16a      	bne.n	801ec94 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 801ebbe:	f8df a120 	ldr.w	sl, [pc, #288]	; 801ece0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 801ebc2:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801ebc6:	42ab      	cmp	r3, r5
 801ebc8:	d9dc      	bls.n	801eb84 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 801ebca:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801ebce:	ab03      	add	r3, sp, #12
 801ebd0:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801ebd4:	6851      	ldr	r1, [r2, #4]
 801ebd6:	c303      	stmia	r3!, {r0, r1}
 801ebd8:	f89a 3000 	ldrb.w	r3, [sl]
 801ebdc:	2b01      	cmp	r3, #1
 801ebde:	d102      	bne.n	801ebe6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1fa>
 801ebe0:	a803      	add	r0, sp, #12
 801ebe2:	f7ff fc5f 	bl	801e4a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ebe6:	a803      	add	r0, sp, #12
 801ebe8:	f7fc fa90 	bl	801b10c <_ZNK8touchgfx4Rect7isEmptyEv>
 801ebec:	2800      	cmp	r0, #0
 801ebee:	d14a      	bne.n	801ec86 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x29a>
 801ebf0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801ebf4:	f10d 0914 	add.w	r9, sp, #20
 801ebf8:	f10d 081c 	add.w	r8, sp, #28
 801ebfc:	f8ad 001a 	strh.w	r0, [sp, #26]
 801ec00:	f8ad 3014 	strh.w	r3, [sp, #20]
 801ec04:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801ec08:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ec0c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801ec10:	f8ad 3018 	strh.w	r3, [sp, #24]
 801ec14:	f8bd b012 	ldrh.w	fp, [sp, #18]
 801ec18:	f8bd c00e 	ldrh.w	ip, [sp, #14]
 801ec1c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801ec20:	44dc      	add	ip, fp
 801ec22:	6830      	ldr	r0, [r6, #0]
 801ec24:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801ec28:	ebac 0c02 	sub.w	ip, ip, r2
 801ec2c:	f8d0 e000 	ldr.w	lr, [r0]
 801ec30:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801ec34:	fa1f fc8c 	uxth.w	ip, ip
 801ec38:	f8cd c000 	str.w	ip, [sp]
 801ec3c:	f8de b078 	ldr.w	fp, [lr, #120]	; 0x78
 801ec40:	47d8      	blx	fp
 801ec42:	f89a 3000 	ldrb.w	r3, [sl]
 801ec46:	f8ad 001a 	strh.w	r0, [sp, #26]
 801ec4a:	2b01      	cmp	r3, #1
 801ec4c:	d11e      	bne.n	801ec8c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a0>
 801ec4e:	e899 0003 	ldmia.w	r9, {r0, r1}
 801ec52:	e888 0003 	stmia.w	r8, {r0, r1}
 801ec56:	4640      	mov	r0, r8
 801ec58:	f7ff fbca 	bl	801e3f0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801ec5c:	6823      	ldr	r3, [r4, #0]
 801ec5e:	4641      	mov	r1, r8
 801ec60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ec62:	4620      	mov	r0, r4
 801ec64:	4798      	blx	r3
 801ec66:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801ec6a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801ec6e:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 801ec72:	4413      	add	r3, r2
 801ec74:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801ec78:	440a      	add	r2, r1
 801ec7a:	b21b      	sxth	r3, r3
 801ec7c:	b212      	sxth	r2, r2
 801ec7e:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ec82:	4293      	cmp	r3, r2
 801ec84:	dbc6      	blt.n	801ec14 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x228>
 801ec86:	3501      	adds	r5, #1
 801ec88:	b2ad      	uxth	r5, r5
 801ec8a:	e79a      	b.n	801ebc2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d6>
 801ec8c:	6823      	ldr	r3, [r4, #0]
 801ec8e:	4649      	mov	r1, r9
 801ec90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ec92:	e7e6      	b.n	801ec62 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 801ec94:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801ec98:	42ab      	cmp	r3, r5
 801ec9a:	f67f af73 	bls.w	801eb84 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 801ec9e:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801eca2:	ab07      	add	r3, sp, #28
 801eca4:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801eca8:	6851      	ldr	r1, [r2, #4]
 801ecaa:	c303      	stmia	r3!, {r0, r1}
 801ecac:	a807      	add	r0, sp, #28
 801ecae:	f7fc fa2d 	bl	801b10c <_ZNK8touchgfx4Rect7isEmptyEv>
 801ecb2:	b920      	cbnz	r0, 801ecbe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d2>
 801ecb4:	6823      	ldr	r3, [r4, #0]
 801ecb6:	a907      	add	r1, sp, #28
 801ecb8:	4620      	mov	r0, r4
 801ecba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ecbc:	4798      	blx	r3
 801ecbe:	3501      	adds	r5, #1
 801ecc0:	b2ad      	uxth	r5, r5
 801ecc2:	e7e7      	b.n	801ec94 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 801ecc4:	2000bfe0 	.word	0x2000bfe0
 801ecc8:	2000bfec 	.word	0x2000bfec
 801eccc:	20000084 	.word	0x20000084
 801ecd0:	2000bf68 	.word	0x2000bf68
 801ecd4:	2000bf5c 	.word	0x2000bf5c
 801ecd8:	2000bf64 	.word	0x2000bf64
 801ecdc:	2000bf5a 	.word	0x2000bf5a
 801ece0:	2000bf5e 	.word	0x2000bf5e

0801ece4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801ece4:	4b03      	ldr	r3, [pc, #12]	; (801ecf4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801ece6:	2200      	movs	r2, #0
 801ece8:	801a      	strh	r2, [r3, #0]
 801ecea:	805a      	strh	r2, [r3, #2]
 801ecec:	809a      	strh	r2, [r3, #4]
 801ecee:	80da      	strh	r2, [r3, #6]
 801ecf0:	4770      	bx	lr
 801ecf2:	bf00      	nop
 801ecf4:	2000bfec 	.word	0x2000bfec

0801ecf8 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
 801ecf8:	2000      	movs	r0, #0
 801ecfa:	4770      	bx	lr

0801ecfc <_ZNK8touchgfx4Font12getGSUBTableEv>:
 801ecfc:	2000      	movs	r0, #0
 801ecfe:	4770      	bx	lr

0801ed00 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801ed00:	b508      	push	{r3, lr}
 801ed02:	6803      	ldr	r3, [r0, #0]
 801ed04:	68db      	ldr	r3, [r3, #12]
 801ed06:	4798      	blx	r3
 801ed08:	b128      	cbz	r0, 801ed16 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801ed0a:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801ed0e:	7a80      	ldrb	r0, [r0, #10]
 801ed10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ed14:	4318      	orrs	r0, r3
 801ed16:	bd08      	pop	{r3, pc}

0801ed18 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
 801ed18:	b40e      	push	{r1, r2, r3}
 801ed1a:	b533      	push	{r0, r1, r4, r5, lr}
 801ed1c:	ab05      	add	r3, sp, #20
 801ed1e:	f853 2b04 	ldr.w	r2, [r3], #4
 801ed22:	9301      	str	r3, [sp, #4]
 801ed24:	4b0a      	ldr	r3, [pc, #40]	; (801ed50 <_ZNK8touchgfx4Font14getStringWidthEPKtz+0x38>)
 801ed26:	685c      	ldr	r4, [r3, #4]
 801ed28:	1061      	asrs	r1, r4, #1
 801ed2a:	07e4      	lsls	r4, r4, #31
 801ed2c:	eb00 0501 	add.w	r5, r0, r1
 801ed30:	bf46      	itte	mi
 801ed32:	681b      	ldrmi	r3, [r3, #0]
 801ed34:	5841      	ldrmi	r1, [r0, r1]
 801ed36:	681c      	ldrpl	r4, [r3, #0]
 801ed38:	4628      	mov	r0, r5
 801ed3a:	bf48      	it	mi
 801ed3c:	58cc      	ldrmi	r4, [r1, r3]
 801ed3e:	2100      	movs	r1, #0
 801ed40:	9b01      	ldr	r3, [sp, #4]
 801ed42:	47a0      	blx	r4
 801ed44:	b002      	add	sp, #8
 801ed46:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ed4a:	b003      	add	sp, #12
 801ed4c:	4770      	bx	lr
 801ed4e:	bf00      	nop
 801ed50:	20000028 	.word	0x20000028

0801ed54 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:
 801ed54:	b40c      	push	{r2, r3}
 801ed56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ed58:	ab06      	add	r3, sp, #24
 801ed5a:	f853 2b04 	ldr.w	r2, [r3], #4
 801ed5e:	9301      	str	r3, [sp, #4]
 801ed60:	4b09      	ldr	r3, [pc, #36]	; (801ed88 <_ZNK8touchgfx4Font14getStringWidthEhPKtz+0x34>)
 801ed62:	685d      	ldr	r5, [r3, #4]
 801ed64:	106c      	asrs	r4, r5, #1
 801ed66:	07ed      	lsls	r5, r5, #31
 801ed68:	eb00 0604 	add.w	r6, r0, r4
 801ed6c:	bf45      	ittet	mi
 801ed6e:	681b      	ldrmi	r3, [r3, #0]
 801ed70:	5900      	ldrmi	r0, [r0, r4]
 801ed72:	681c      	ldrpl	r4, [r3, #0]
 801ed74:	58c4      	ldrmi	r4, [r0, r3]
 801ed76:	4630      	mov	r0, r6
 801ed78:	9b01      	ldr	r3, [sp, #4]
 801ed7a:	47a0      	blx	r4
 801ed7c:	b002      	add	sp, #8
 801ed7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ed82:	b002      	add	sp, #8
 801ed84:	4770      	bx	lr
 801ed86:	bf00      	nop
 801ed88:	20000028 	.word	0x20000028

0801ed8c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801ed8c:	b40e      	push	{r1, r2, r3}
 801ed8e:	b530      	push	{r4, r5, lr}
 801ed90:	b098      	sub	sp, #96	; 0x60
 801ed92:	4604      	mov	r4, r0
 801ed94:	ab1b      	add	r3, sp, #108	; 0x6c
 801ed96:	a802      	add	r0, sp, #8
 801ed98:	f853 5b04 	ldr.w	r5, [r3], #4
 801ed9c:	9301      	str	r3, [sp, #4]
 801ed9e:	f001 f871 	bl	801fe84 <_ZN8touchgfx12TextProviderC1Ev>
 801eda2:	6823      	ldr	r3, [r4, #0]
 801eda4:	4620      	mov	r0, r4
 801eda6:	2401      	movs	r4, #1
 801eda8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801edaa:	4798      	blx	r3
 801edac:	9a01      	ldr	r2, [sp, #4]
 801edae:	4603      	mov	r3, r0
 801edb0:	4629      	mov	r1, r5
 801edb2:	a802      	add	r0, sp, #8
 801edb4:	f001 f883 	bl	801febe <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801edb8:	a802      	add	r0, sp, #8
 801edba:	f001 f8b9 	bl	801ff30 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801edbe:	b2a3      	uxth	r3, r4
 801edc0:	b138      	cbz	r0, 801edd2 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 801edc2:	280a      	cmp	r0, #10
 801edc4:	a802      	add	r0, sp, #8
 801edc6:	bf04      	itt	eq
 801edc8:	3301      	addeq	r3, #1
 801edca:	b21c      	sxtheq	r4, r3
 801edcc:	f001 f8b0 	bl	801ff30 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801edd0:	e7f5      	b.n	801edbe <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 801edd2:	4618      	mov	r0, r3
 801edd4:	b018      	add	sp, #96	; 0x60
 801edd6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801edda:	b003      	add	sp, #12
 801eddc:	4770      	bx	lr
	...

0801ede0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801ede0:	b40e      	push	{r1, r2, r3}
 801ede2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ede4:	b098      	sub	sp, #96	; 0x60
 801ede6:	4605      	mov	r5, r0
 801ede8:	4f25      	ldr	r7, [pc, #148]	; (801ee80 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0xa0>)
 801edea:	ab1d      	add	r3, sp, #116	; 0x74
 801edec:	a802      	add	r0, sp, #8
 801edee:	ae18      	add	r6, sp, #96	; 0x60
 801edf0:	f853 4b04 	ldr.w	r4, [r3], #4
 801edf4:	9300      	str	r3, [sp, #0]
 801edf6:	f001 f845 	bl	801fe84 <_ZN8touchgfx12TextProviderC1Ev>
 801edfa:	682b      	ldr	r3, [r5, #0]
 801edfc:	4628      	mov	r0, r5
 801edfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ee00:	4798      	blx	r3
 801ee02:	4621      	mov	r1, r4
 801ee04:	2400      	movs	r4, #0
 801ee06:	4603      	mov	r3, r0
 801ee08:	9a00      	ldr	r2, [sp, #0]
 801ee0a:	a802      	add	r0, sp, #8
 801ee0c:	f001 f857 	bl	801febe <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801ee10:	f846 4d5c 	str.w	r4, [r6, #-92]!
 801ee14:	462a      	mov	r2, r5
 801ee16:	4633      	mov	r3, r6
 801ee18:	4621      	mov	r1, r4
 801ee1a:	a802      	add	r0, sp, #8
 801ee1c:	f001 f9b4 	bl	8020188 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801ee20:	b340      	cbz	r0, 801ee74 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x94>
 801ee22:	280a      	cmp	r0, #10
 801ee24:	d01f      	beq.n	801ee66 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801ee26:	9901      	ldr	r1, [sp, #4]
 801ee28:	b1e9      	cbz	r1, 801ee66 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801ee2a:	7b4b      	ldrb	r3, [r1, #13]
 801ee2c:	f891 c008 	ldrb.w	ip, [r1, #8]
 801ee30:	f013 0f40 	tst.w	r3, #64	; 0x40
 801ee34:	ea4f 1e03 	mov.w	lr, r3, lsl #4
 801ee38:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801ee3c:	79c9      	ldrb	r1, [r1, #7]
 801ee3e:	f40e 7e80 	and.w	lr, lr, #256	; 0x100
 801ee42:	bf18      	it	ne
 801ee44:	4638      	movne	r0, r7
 801ee46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ee4a:	bf08      	it	eq
 801ee4c:	2000      	moveq	r0, #0
 801ee4e:	88aa      	ldrh	r2, [r5, #4]
 801ee50:	ea41 010e 	orr.w	r1, r1, lr
 801ee54:	ea43 030c 	orr.w	r3, r3, ip
 801ee58:	440a      	add	r2, r1
 801ee5a:	4303      	orrs	r3, r0
 801ee5c:	1ad3      	subs	r3, r2, r3
 801ee5e:	b29b      	uxth	r3, r3
 801ee60:	42a3      	cmp	r3, r4
 801ee62:	bfc8      	it	gt
 801ee64:	b21c      	sxthgt	r4, r3
 801ee66:	4633      	mov	r3, r6
 801ee68:	462a      	mov	r2, r5
 801ee6a:	2100      	movs	r1, #0
 801ee6c:	a802      	add	r0, sp, #8
 801ee6e:	f001 f98b 	bl	8020188 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801ee72:	e7d5      	b.n	801ee20 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x40>
 801ee74:	b2a0      	uxth	r0, r4
 801ee76:	b018      	add	sp, #96	; 0x60
 801ee78:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801ee7c:	b003      	add	sp, #12
 801ee7e:	4770      	bx	lr
 801ee80:	fffffe00 	.word	0xfffffe00

0801ee84 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801ee84:	b40e      	push	{r1, r2, r3}
 801ee86:	b570      	push	{r4, r5, r6, lr}
 801ee88:	b099      	sub	sp, #100	; 0x64
 801ee8a:	4604      	mov	r4, r0
 801ee8c:	26ff      	movs	r6, #255	; 0xff
 801ee8e:	ab1d      	add	r3, sp, #116	; 0x74
 801ee90:	a802      	add	r0, sp, #8
 801ee92:	f853 5b04 	ldr.w	r5, [r3], #4
 801ee96:	9300      	str	r3, [sp, #0]
 801ee98:	f000 fff4 	bl	801fe84 <_ZN8touchgfx12TextProviderC1Ev>
 801ee9c:	6823      	ldr	r3, [r4, #0]
 801ee9e:	4620      	mov	r0, r4
 801eea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801eea2:	4798      	blx	r3
 801eea4:	4629      	mov	r1, r5
 801eea6:	4603      	mov	r3, r0
 801eea8:	9a00      	ldr	r2, [sp, #0]
 801eeaa:	a802      	add	r0, sp, #8
 801eeac:	ad18      	add	r5, sp, #96	; 0x60
 801eeae:	f001 f806 	bl	801febe <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801eeb2:	2100      	movs	r1, #0
 801eeb4:	4622      	mov	r2, r4
 801eeb6:	a802      	add	r0, sp, #8
 801eeb8:	f845 1d5c 	str.w	r1, [r5, #-92]!
 801eebc:	462b      	mov	r3, r5
 801eebe:	f001 f963 	bl	8020188 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801eec2:	b190      	cbz	r0, 801eeea <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x66>
 801eec4:	280a      	cmp	r0, #10
 801eec6:	d009      	beq.n	801eedc <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 801eec8:	9a01      	ldr	r2, [sp, #4]
 801eeca:	b13a      	cbz	r2, 801eedc <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 801eecc:	7923      	ldrb	r3, [r4, #4]
 801eece:	7a12      	ldrb	r2, [r2, #8]
 801eed0:	1a9b      	subs	r3, r3, r2
 801eed2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 801eed6:	429e      	cmp	r6, r3
 801eed8:	bf28      	it	cs
 801eeda:	461e      	movcs	r6, r3
 801eedc:	462b      	mov	r3, r5
 801eede:	4622      	mov	r2, r4
 801eee0:	2100      	movs	r1, #0
 801eee2:	a802      	add	r0, sp, #8
 801eee4:	f001 f950 	bl	8020188 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801eee8:	e7eb      	b.n	801eec2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 801eeea:	4630      	mov	r0, r6
 801eeec:	b019      	add	sp, #100	; 0x64
 801eeee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801eef2:	b003      	add	sp, #12
 801eef4:	4770      	bx	lr

0801eef6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801eef6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eefa:	b099      	sub	sp, #100	; 0x64
 801eefc:	4606      	mov	r6, r0
 801eefe:	4614      	mov	r4, r2
 801ef00:	4688      	mov	r8, r1
 801ef02:	a802      	add	r0, sp, #8
 801ef04:	461d      	mov	r5, r3
 801ef06:	f04f 0b00 	mov.w	fp, #0
 801ef0a:	f000 ffbb 	bl	801fe84 <_ZN8touchgfx12TextProviderC1Ev>
 801ef0e:	6833      	ldr	r3, [r6, #0]
 801ef10:	4630      	mov	r0, r6
 801ef12:	465f      	mov	r7, fp
 801ef14:	46da      	mov	sl, fp
 801ef16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ef18:	46d9      	mov	r9, fp
 801ef1a:	4798      	blx	r3
 801ef1c:	462a      	mov	r2, r5
 801ef1e:	4603      	mov	r3, r0
 801ef20:	4621      	mov	r1, r4
 801ef22:	a802      	add	r0, sp, #8
 801ef24:	f000 ffcb 	bl	801febe <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801ef28:	ab01      	add	r3, sp, #4
 801ef2a:	4632      	mov	r2, r6
 801ef2c:	4641      	mov	r1, r8
 801ef2e:	a802      	add	r0, sp, #8
 801ef30:	f8cd 9004 	str.w	r9, [sp, #4]
 801ef34:	f001 f928 	bl	8020188 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801ef38:	4605      	mov	r5, r0
 801ef3a:	b108      	cbz	r0, 801ef40 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x4a>
 801ef3c:	280a      	cmp	r0, #10
 801ef3e:	d10b      	bne.n	801ef58 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x62>
 801ef40:	4557      	cmp	r7, sl
 801ef42:	bf38      	it	cc
 801ef44:	4657      	movcc	r7, sl
 801ef46:	f04f 0a00 	mov.w	sl, #0
 801ef4a:	b91d      	cbnz	r5, 801ef54 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 801ef4c:	4638      	mov	r0, r7
 801ef4e:	b019      	add	sp, #100	; 0x64
 801ef50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef54:	46ab      	mov	fp, r5
 801ef56:	e7e7      	b.n	801ef28 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x32>
 801ef58:	9a01      	ldr	r2, [sp, #4]
 801ef5a:	2a00      	cmp	r2, #0
 801ef5c:	d0fa      	beq.n	801ef54 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 801ef5e:	f992 400d 	ldrsb.w	r4, [r2, #13]
 801ef62:	4659      	mov	r1, fp
 801ef64:	6833      	ldr	r3, [r6, #0]
 801ef66:	f404 7080 	and.w	r0, r4, #256	; 0x100
 801ef6a:	7a94      	ldrb	r4, [r2, #10]
 801ef6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ef6e:	4304      	orrs	r4, r0
 801ef70:	4630      	mov	r0, r6
 801ef72:	8895      	ldrh	r5, [r2, #4]
 801ef74:	4798      	blx	r3
 801ef76:	4420      	add	r0, r4
 801ef78:	4450      	add	r0, sl
 801ef7a:	fa1f fa80 	uxth.w	sl, r0
 801ef7e:	e7e4      	b.n	801ef4a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x54>

0801ef80 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801ef80:	b513      	push	{r0, r1, r4, lr}
 801ef82:	1d01      	adds	r1, r0, #4
 801ef84:	4603      	mov	r3, r0
 801ef86:	466a      	mov	r2, sp
 801ef88:	c903      	ldmia	r1, {r0, r1}
 801ef8a:	e882 0003 	stmia.w	r2, {r0, r1}
 801ef8e:	2100      	movs	r1, #0
 801ef90:	4618      	mov	r0, r3
 801ef92:	9100      	str	r1, [sp, #0]
 801ef94:	6819      	ldr	r1, [r3, #0]
 801ef96:	690c      	ldr	r4, [r1, #16]
 801ef98:	4611      	mov	r1, r2
 801ef9a:	47a0      	blx	r4
 801ef9c:	b002      	add	sp, #8
 801ef9e:	bd10      	pop	{r4, pc}

0801efa0 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801efa0:	b538      	push	{r3, r4, r5, lr}
 801efa2:	680b      	ldr	r3, [r1, #0]
 801efa4:	460c      	mov	r4, r1
 801efa6:	4605      	mov	r5, r0
 801efa8:	68db      	ldr	r3, [r3, #12]
 801efaa:	4798      	blx	r3
 801efac:	6823      	ldr	r3, [r4, #0]
 801efae:	4620      	mov	r0, r4
 801efb0:	4629      	mov	r1, r5
 801efb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801efb4:	4798      	blx	r3
 801efb6:	4628      	mov	r0, r5
 801efb8:	bd38      	pop	{r3, r4, r5, pc}

0801efba <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801efba:	b410      	push	{r4}
 801efbc:	880a      	ldrh	r2, [r1, #0]
 801efbe:	8884      	ldrh	r4, [r0, #4]
 801efc0:	4422      	add	r2, r4
 801efc2:	800a      	strh	r2, [r1, #0]
 801efc4:	884a      	ldrh	r2, [r1, #2]
 801efc6:	88c4      	ldrh	r4, [r0, #6]
 801efc8:	4422      	add	r2, r4
 801efca:	804a      	strh	r2, [r1, #2]
 801efcc:	6940      	ldr	r0, [r0, #20]
 801efce:	b120      	cbz	r0, 801efda <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801efd0:	6803      	ldr	r3, [r0, #0]
 801efd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801efd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801efd8:	4718      	bx	r3
 801efda:	f85d 4b04 	ldr.w	r4, [sp], #4
 801efde:	4770      	bx	lr

0801efe0 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801efe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801efe2:	460b      	mov	r3, r1
 801efe4:	b085      	sub	sp, #20
 801efe6:	4604      	mov	r4, r0
 801efe8:	b901      	cbnz	r1, 801efec <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801efea:	b1fa      	cbz	r2, 801f02c <_ZN8touchgfx8Drawable12moveRelativeEss+0x4c>
 801efec:	1d27      	adds	r7, r4, #4
 801efee:	466e      	mov	r6, sp
 801eff0:	ad02      	add	r5, sp, #8
 801eff2:	e897 0003 	ldmia.w	r7, {r0, r1}
 801eff6:	e886 0003 	stmia.w	r6, {r0, r1}
 801effa:	88e1      	ldrh	r1, [r4, #6]
 801effc:	4620      	mov	r0, r4
 801effe:	440a      	add	r2, r1
 801f000:	88a1      	ldrh	r1, [r4, #4]
 801f002:	4419      	add	r1, r3
 801f004:	6823      	ldr	r3, [r4, #0]
 801f006:	b212      	sxth	r2, r2
 801f008:	b209      	sxth	r1, r1
 801f00a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f00c:	4798      	blx	r3
 801f00e:	e897 0003 	ldmia.w	r7, {r0, r1}
 801f012:	e885 0003 	stmia.w	r5, {r0, r1}
 801f016:	6960      	ldr	r0, [r4, #20]
 801f018:	b150      	cbz	r0, 801f030 <_ZN8touchgfx8Drawable12moveRelativeEss+0x50>
 801f01a:	6803      	ldr	r3, [r0, #0]
 801f01c:	4631      	mov	r1, r6
 801f01e:	691b      	ldr	r3, [r3, #16]
 801f020:	4798      	blx	r3
 801f022:	6960      	ldr	r0, [r4, #20]
 801f024:	6803      	ldr	r3, [r0, #0]
 801f026:	691b      	ldr	r3, [r3, #16]
 801f028:	4629      	mov	r1, r5
 801f02a:	4798      	blx	r3
 801f02c:	b005      	add	sp, #20
 801f02e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f030:	f7ff fb78 	bl	801e724 <_ZN8touchgfx11Application11getInstanceEv>
 801f034:	6803      	ldr	r3, [r0, #0]
 801f036:	4631      	mov	r1, r6
 801f038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f03a:	4798      	blx	r3
 801f03c:	f7ff fb72 	bl	801e724 <_ZN8touchgfx11Application11getInstanceEv>
 801f040:	6803      	ldr	r3, [r0, #0]
 801f042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f044:	e7f0      	b.n	801f028 <_ZN8touchgfx8Drawable12moveRelativeEss+0x48>

0801f046 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801f046:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f048:	8882      	ldrh	r2, [r0, #4]
 801f04a:	4605      	mov	r5, r0
 801f04c:	880b      	ldrh	r3, [r1, #0]
 801f04e:	460c      	mov	r4, r1
 801f050:	4413      	add	r3, r2
 801f052:	800b      	strh	r3, [r1, #0]
 801f054:	884b      	ldrh	r3, [r1, #2]
 801f056:	88c2      	ldrh	r2, [r0, #6]
 801f058:	4413      	add	r3, r2
 801f05a:	4602      	mov	r2, r0
 801f05c:	804b      	strh	r3, [r1, #2]
 801f05e:	466b      	mov	r3, sp
 801f060:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801f064:	6851      	ldr	r1, [r2, #4]
 801f066:	c303      	stmia	r3!, {r0, r1}
 801f068:	4621      	mov	r1, r4
 801f06a:	4668      	mov	r0, sp
 801f06c:	f7fc f80a 	bl	801b084 <_ZN8touchgfx4RectaNERKS0_>
 801f070:	466b      	mov	r3, sp
 801f072:	cb03      	ldmia	r3!, {r0, r1}
 801f074:	6020      	str	r0, [r4, #0]
 801f076:	6061      	str	r1, [r4, #4]
 801f078:	6968      	ldr	r0, [r5, #20]
 801f07a:	b128      	cbz	r0, 801f088 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 801f07c:	6803      	ldr	r3, [r0, #0]
 801f07e:	691b      	ldr	r3, [r3, #16]
 801f080:	4621      	mov	r1, r4
 801f082:	4798      	blx	r3
 801f084:	b003      	add	sp, #12
 801f086:	bd30      	pop	{r4, r5, pc}
 801f088:	f7ff fb4c 	bl	801e724 <_ZN8touchgfx11Application11getInstanceEv>
 801f08c:	6803      	ldr	r3, [r0, #0]
 801f08e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f090:	e7f6      	b.n	801f080 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

0801f092 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801f092:	b570      	push	{r4, r5, r6, lr}
 801f094:	8882      	ldrh	r2, [r0, #4]
 801f096:	460c      	mov	r4, r1
 801f098:	880b      	ldrh	r3, [r1, #0]
 801f09a:	4605      	mov	r5, r0
 801f09c:	4413      	add	r3, r2
 801f09e:	800b      	strh	r3, [r1, #0]
 801f0a0:	884b      	ldrh	r3, [r1, #2]
 801f0a2:	88c2      	ldrh	r2, [r0, #6]
 801f0a4:	4413      	add	r3, r2
 801f0a6:	804b      	strh	r3, [r1, #2]
 801f0a8:	1d01      	adds	r1, r0, #4
 801f0aa:	4620      	mov	r0, r4
 801f0ac:	f7fb ffea 	bl	801b084 <_ZN8touchgfx4RectaNERKS0_>
 801f0b0:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801f0b4:	b153      	cbz	r3, 801f0cc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 801f0b6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801f0ba:	b13b      	cbz	r3, 801f0cc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 801f0bc:	6968      	ldr	r0, [r5, #20]
 801f0be:	b128      	cbz	r0, 801f0cc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 801f0c0:	6803      	ldr	r3, [r0, #0]
 801f0c2:	4621      	mov	r1, r4
 801f0c4:	6a1b      	ldr	r3, [r3, #32]
 801f0c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f0ca:	4718      	bx	r3
 801f0cc:	bd70      	pop	{r4, r5, r6, pc}

0801f0ce <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801f0ce:	b510      	push	{r4, lr}
 801f0d0:	2300      	movs	r3, #0
 801f0d2:	4604      	mov	r4, r0
 801f0d4:	4608      	mov	r0, r1
 801f0d6:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801f0da:	8023      	strh	r3, [r4, #0]
 801f0dc:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801f0e0:	8063      	strh	r3, [r4, #2]
 801f0e2:	6803      	ldr	r3, [r0, #0]
 801f0e4:	80a1      	strh	r1, [r4, #4]
 801f0e6:	4621      	mov	r1, r4
 801f0e8:	80e2      	strh	r2, [r4, #6]
 801f0ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f0ec:	4798      	blx	r3
 801f0ee:	4620      	mov	r0, r4
 801f0f0:	bd10      	pop	{r4, pc}
	...

0801f0f4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801f0f4:	b530      	push	{r4, r5, lr}
 801f0f6:	8083      	strh	r3, [r0, #4]
 801f0f8:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801f0fc:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801f100:	7183      	strb	r3, [r0, #6]
 801f102:	79c3      	ldrb	r3, [r0, #7]
 801f104:	6101      	str	r1, [r0, #16]
 801f106:	f365 0306 	bfi	r3, r5, #0, #7
 801f10a:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801f10e:	8282      	strh	r2, [r0, #20]
 801f110:	f365 13c7 	bfi	r3, r5, #7, #1
 801f114:	71c3      	strb	r3, [r0, #7]
 801f116:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801f11a:	7203      	strb	r3, [r0, #8]
 801f11c:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801f120:	7243      	strb	r3, [r0, #9]
 801f122:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801f126:	8143      	strh	r3, [r0, #10]
 801f128:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801f12c:	8183      	strh	r3, [r0, #12]
 801f12e:	4b01      	ldr	r3, [pc, #4]	; (801f134 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801f130:	6003      	str	r3, [r0, #0]
 801f132:	bd30      	pop	{r4, r5, pc}
 801f134:	0802eecc 	.word	0x0802eecc

0801f138 <_ZNK8touchgfx9ConstFont4findEt>:
 801f138:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f13a:	8a84      	ldrh	r4, [r0, #20]
 801f13c:	2500      	movs	r5, #0
 801f13e:	260e      	movs	r6, #14
 801f140:	3c01      	subs	r4, #1
 801f142:	42a5      	cmp	r5, r4
 801f144:	dc0c      	bgt.n	801f160 <_ZNK8touchgfx9ConstFont4findEt+0x28>
 801f146:	192a      	adds	r2, r5, r4
 801f148:	6903      	ldr	r3, [r0, #16]
 801f14a:	1052      	asrs	r2, r2, #1
 801f14c:	fb06 3302 	mla	r3, r6, r2, r3
 801f150:	889f      	ldrh	r7, [r3, #4]
 801f152:	428f      	cmp	r7, r1
 801f154:	d901      	bls.n	801f15a <_ZNK8touchgfx9ConstFont4findEt+0x22>
 801f156:	1e54      	subs	r4, r2, #1
 801f158:	e7f3      	b.n	801f142 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801f15a:	d202      	bcs.n	801f162 <_ZNK8touchgfx9ConstFont4findEt+0x2a>
 801f15c:	1c55      	adds	r5, r2, #1
 801f15e:	e7f0      	b.n	801f142 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801f160:	2300      	movs	r3, #0
 801f162:	4618      	mov	r0, r3
 801f164:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801f166 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801f166:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f168:	4605      	mov	r5, r0
 801f16a:	4617      	mov	r7, r2
 801f16c:	461e      	mov	r6, r3
 801f16e:	f7ff ffe3 	bl	801f138 <_ZNK8touchgfx9ConstFont4findEt>
 801f172:	b9e0      	cbnz	r0, 801f1ae <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x48>
 801f174:	b911      	cbnz	r1, 801f17c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x16>
 801f176:	2400      	movs	r4, #0
 801f178:	4620      	mov	r0, r4
 801f17a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f17c:	290a      	cmp	r1, #10
 801f17e:	d0fa      	beq.n	801f176 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801f180:	682b      	ldr	r3, [r5, #0]
 801f182:	4628      	mov	r0, r5
 801f184:	691b      	ldr	r3, [r3, #16]
 801f186:	4798      	blx	r3
 801f188:	4601      	mov	r1, r0
 801f18a:	4628      	mov	r0, r5
 801f18c:	f7ff ffd4 	bl	801f138 <_ZNK8touchgfx9ConstFont4findEt>
 801f190:	4604      	mov	r4, r0
 801f192:	2800      	cmp	r0, #0
 801f194:	d0ef      	beq.n	801f176 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801f196:	682b      	ldr	r3, [r5, #0]
 801f198:	4621      	mov	r1, r4
 801f19a:	4628      	mov	r0, r5
 801f19c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801f19e:	4798      	blx	r3
 801f1a0:	6038      	str	r0, [r7, #0]
 801f1a2:	682b      	ldr	r3, [r5, #0]
 801f1a4:	4628      	mov	r0, r5
 801f1a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f1a8:	4798      	blx	r3
 801f1aa:	7030      	strb	r0, [r6, #0]
 801f1ac:	e7e4      	b.n	801f178 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x12>
 801f1ae:	4604      	mov	r4, r0
 801f1b0:	e7f1      	b.n	801f196 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x30>

0801f1b2 <_ZN8touchgfx6memsetEPvhm>:
 801f1b2:	4402      	add	r2, r0
 801f1b4:	4290      	cmp	r0, r2
 801f1b6:	d002      	beq.n	801f1be <_ZN8touchgfx6memsetEPvhm+0xc>
 801f1b8:	f800 1b01 	strb.w	r1, [r0], #1
 801f1bc:	e7fa      	b.n	801f1b4 <_ZN8touchgfx6memsetEPvhm+0x2>
 801f1be:	4770      	bx	lr

0801f1c0 <_ZN8touchgfx3clzEl>:
 801f1c0:	b1e8      	cbz	r0, 801f1fe <_ZN8touchgfx3clzEl+0x3e>
 801f1c2:	2800      	cmp	r0, #0
 801f1c4:	bfb8      	it	lt
 801f1c6:	4240      	neglt	r0, r0
 801f1c8:	0c03      	lsrs	r3, r0, #16
 801f1ca:	041b      	lsls	r3, r3, #16
 801f1cc:	b9ab      	cbnz	r3, 801f1fa <_ZN8touchgfx3clzEl+0x3a>
 801f1ce:	0400      	lsls	r0, r0, #16
 801f1d0:	2310      	movs	r3, #16
 801f1d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801f1d6:	bf04      	itt	eq
 801f1d8:	0200      	lsleq	r0, r0, #8
 801f1da:	3308      	addeq	r3, #8
 801f1dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801f1e0:	bf04      	itt	eq
 801f1e2:	0100      	lsleq	r0, r0, #4
 801f1e4:	3304      	addeq	r3, #4
 801f1e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801f1ea:	bf04      	itt	eq
 801f1ec:	0080      	lsleq	r0, r0, #2
 801f1ee:	3302      	addeq	r3, #2
 801f1f0:	2800      	cmp	r0, #0
 801f1f2:	bfa8      	it	ge
 801f1f4:	3301      	addge	r3, #1
 801f1f6:	1e58      	subs	r0, r3, #1
 801f1f8:	4770      	bx	lr
 801f1fa:	2300      	movs	r3, #0
 801f1fc:	e7e9      	b.n	801f1d2 <_ZN8touchgfx3clzEl+0x12>
 801f1fe:	201f      	movs	r0, #31
 801f200:	4770      	bx	lr

0801f202 <_ZN8touchgfx6muldivElllRl>:
 801f202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f206:	4604      	mov	r4, r0
 801f208:	4698      	mov	r8, r3
 801f20a:	2601      	movs	r6, #1
 801f20c:	f7ff ffd8 	bl	801f1c0 <_ZN8touchgfx3clzEl>
 801f210:	2c00      	cmp	r4, #0
 801f212:	fa04 f500 	lsl.w	r5, r4, r0
 801f216:	fa06 f600 	lsl.w	r6, r6, r0
 801f21a:	bfba      	itte	lt
 801f21c:	f04f 37ff 	movlt.w	r7, #4294967295
 801f220:	4264      	neglt	r4, r4
 801f222:	2701      	movge	r7, #1
 801f224:	2900      	cmp	r1, #0
 801f226:	f106 36ff 	add.w	r6, r6, #4294967295
 801f22a:	bfbc      	itt	lt
 801f22c:	4249      	neglt	r1, r1
 801f22e:	427f      	neglt	r7, r7
 801f230:	2a00      	cmp	r2, #0
 801f232:	fa41 fc00 	asr.w	ip, r1, r0
 801f236:	ea01 0106 	and.w	r1, r1, r6
 801f23a:	bfb8      	it	lt
 801f23c:	427f      	neglt	r7, r7
 801f23e:	fb04 f401 	mul.w	r4, r4, r1
 801f242:	fb95 f3f2 	sdiv	r3, r5, r2
 801f246:	fb02 5513 	mls	r5, r2, r3, r5
 801f24a:	bfb8      	it	lt
 801f24c:	4252      	neglt	r2, r2
 801f24e:	fb94 f0f2 	sdiv	r0, r4, r2
 801f252:	fb02 4410 	mls	r4, r2, r0, r4
 801f256:	fb0c 4405 	mla	r4, ip, r5, r4
 801f25a:	fb94 f1f2 	sdiv	r1, r4, r2
 801f25e:	4408      	add	r0, r1
 801f260:	fb02 4211 	mls	r2, r2, r1, r4
 801f264:	fb0c 0003 	mla	r0, ip, r3, r0
 801f268:	f8c8 2000 	str.w	r2, [r8]
 801f26c:	4378      	muls	r0, r7
 801f26e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801f272 <_ZN8touchgfx10ClickEventD1Ev>:
 801f272:	4770      	bx	lr

0801f274 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801f274:	2000      	movs	r0, #0
 801f276:	4770      	bx	lr

0801f278 <_ZN8touchgfx9DragEventD1Ev>:
 801f278:	4770      	bx	lr

0801f27a <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801f27a:	2001      	movs	r0, #1
 801f27c:	4770      	bx	lr

0801f27e <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801f27e:	2002      	movs	r0, #2
 801f280:	4770      	bx	lr

0801f282 <_ZN8touchgfx12GestureEventD1Ev>:
 801f282:	4770      	bx	lr

0801f284 <_ZN8touchgfx10ClickEventD0Ev>:
 801f284:	b510      	push	{r4, lr}
 801f286:	4604      	mov	r4, r0
 801f288:	210c      	movs	r1, #12
 801f28a:	f00b fa4e 	bl	802a72a <_ZdlPvj>
 801f28e:	4620      	mov	r0, r4
 801f290:	bd10      	pop	{r4, pc}

0801f292 <_ZN8touchgfx9DragEventD0Ev>:
 801f292:	b510      	push	{r4, lr}
 801f294:	4604      	mov	r4, r0
 801f296:	2110      	movs	r1, #16
 801f298:	f00b fa47 	bl	802a72a <_ZdlPvj>
 801f29c:	4620      	mov	r0, r4
 801f29e:	bd10      	pop	{r4, pc}

0801f2a0 <_ZN8touchgfx12GestureEventD0Ev>:
 801f2a0:	b510      	push	{r4, lr}
 801f2a2:	4604      	mov	r4, r0
 801f2a4:	210c      	movs	r1, #12
 801f2a6:	f00b fa40 	bl	802a72a <_ZdlPvj>
 801f2aa:	4620      	mov	r0, r4
 801f2ac:	bd10      	pop	{r4, pc}
	...

0801f2b0 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801f2b0:	b530      	push	{r4, r5, lr}
 801f2b2:	460d      	mov	r5, r1
 801f2b4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801f2b6:	b087      	sub	sp, #28
 801f2b8:	4604      	mov	r4, r0
 801f2ba:	b301      	cbz	r1, 801f2fe <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801f2bc:	a801      	add	r0, sp, #4
 801f2be:	f7ff ff06 	bl	801f0ce <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f2c2:	892a      	ldrh	r2, [r5, #8]
 801f2c4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801f2c8:	7928      	ldrb	r0, [r5, #4]
 801f2ca:	1ad2      	subs	r2, r2, r3
 801f2cc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801f2ce:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801f2d2:	441a      	add	r2, r3
 801f2d4:	896b      	ldrh	r3, [r5, #10]
 801f2d6:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801f2da:	f88d 0010 	strb.w	r0, [sp, #16]
 801f2de:	1b5b      	subs	r3, r3, r5
 801f2e0:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801f2e2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801f2e4:	442b      	add	r3, r5
 801f2e6:	4d07      	ldr	r5, [pc, #28]	; (801f304 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801f2e8:	f8ad 1012 	strh.w	r1, [sp, #18]
 801f2ec:	a903      	add	r1, sp, #12
 801f2ee:	9503      	str	r5, [sp, #12]
 801f2f0:	f8ad 2014 	strh.w	r2, [sp, #20]
 801f2f4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801f2f8:	6803      	ldr	r3, [r0, #0]
 801f2fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801f2fc:	4798      	blx	r3
 801f2fe:	b007      	add	sp, #28
 801f300:	bd30      	pop	{r4, r5, pc}
 801f302:	bf00      	nop
 801f304:	0802ef48 	.word	0x0802ef48

0801f308 <_ZNK8touchgfx4Rect9intersectEss>:
 801f308:	b510      	push	{r4, lr}
 801f30a:	f9b0 3000 	ldrsh.w	r3, [r0]
 801f30e:	428b      	cmp	r3, r1
 801f310:	dc10      	bgt.n	801f334 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801f312:	8884      	ldrh	r4, [r0, #4]
 801f314:	4423      	add	r3, r4
 801f316:	b21b      	sxth	r3, r3
 801f318:	4299      	cmp	r1, r3
 801f31a:	da0b      	bge.n	801f334 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801f31c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801f320:	4293      	cmp	r3, r2
 801f322:	dc07      	bgt.n	801f334 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801f324:	88c0      	ldrh	r0, [r0, #6]
 801f326:	4418      	add	r0, r3
 801f328:	b200      	sxth	r0, r0
 801f32a:	4282      	cmp	r2, r0
 801f32c:	bfac      	ite	ge
 801f32e:	2000      	movge	r0, #0
 801f330:	2001      	movlt	r0, #1
 801f332:	bd10      	pop	{r4, pc}
 801f334:	2000      	movs	r0, #0
 801f336:	e7fc      	b.n	801f332 <_ZNK8touchgfx4Rect9intersectEss+0x2a>

0801f338 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801f338:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f33a:	460c      	mov	r4, r1
 801f33c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801f33e:	b089      	sub	sp, #36	; 0x24
 801f340:	4605      	mov	r5, r0
 801f342:	2900      	cmp	r1, #0
 801f344:	d054      	beq.n	801f3f0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 801f346:	4668      	mov	r0, sp
 801f348:	f7ff fec1 	bl	801f0ce <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f34c:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 801f34e:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 801f350:	4668      	mov	r0, sp
 801f352:	8922      	ldrh	r2, [r4, #8]
 801f354:	88e1      	ldrh	r1, [r4, #6]
 801f356:	443a      	add	r2, r7
 801f358:	4431      	add	r1, r6
 801f35a:	b212      	sxth	r2, r2
 801f35c:	b209      	sxth	r1, r1
 801f35e:	f7ff ffd3 	bl	801f308 <_ZNK8touchgfx4Rect9intersectEss>
 801f362:	b1d0      	cbz	r0, 801f39a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801f364:	89a2      	ldrh	r2, [r4, #12]
 801f366:	4668      	mov	r0, sp
 801f368:	8961      	ldrh	r1, [r4, #10]
 801f36a:	443a      	add	r2, r7
 801f36c:	4431      	add	r1, r6
 801f36e:	b212      	sxth	r2, r2
 801f370:	b209      	sxth	r1, r1
 801f372:	f7ff ffc9 	bl	801f308 <_ZNK8touchgfx4Rect9intersectEss>
 801f376:	4603      	mov	r3, r0
 801f378:	b978      	cbnz	r0, 801f39a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801f37a:	4a1e      	ldr	r2, [pc, #120]	; (801f3f4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 801f37c:	a904      	add	r1, sp, #16
 801f37e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801f380:	9204      	str	r2, [sp, #16]
 801f382:	2202      	movs	r2, #2
 801f384:	f8ad 3016 	strh.w	r3, [sp, #22]
 801f388:	f88d 2014 	strb.w	r2, [sp, #20]
 801f38c:	f8ad 3018 	strh.w	r3, [sp, #24]
 801f390:	f8ad 301a 	strh.w	r3, [sp, #26]
 801f394:	6803      	ldr	r3, [r0, #0]
 801f396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f398:	4798      	blx	r3
 801f39a:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801f39c:	a802      	add	r0, sp, #8
 801f39e:	f7ff fe96 	bl	801f0ce <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f3a2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801f3a6:	88e0      	ldrh	r0, [r4, #6]
 801f3a8:	8961      	ldrh	r1, [r4, #10]
 801f3aa:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801f3ae:	1a80      	subs	r0, r0, r2
 801f3b0:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 801f3b4:	1a89      	subs	r1, r1, r2
 801f3b6:	8923      	ldrh	r3, [r4, #8]
 801f3b8:	4460      	add	r0, ip
 801f3ba:	89a2      	ldrh	r2, [r4, #12]
 801f3bc:	4461      	add	r1, ip
 801f3be:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801f3c0:	eba3 030e 	sub.w	r3, r3, lr
 801f3c4:	eba2 020e 	sub.w	r2, r2, lr
 801f3c8:	f8ad 0016 	strh.w	r0, [sp, #22]
 801f3cc:	7927      	ldrb	r7, [r4, #4]
 801f3ce:	4433      	add	r3, r6
 801f3d0:	4432      	add	r2, r6
 801f3d2:	4c09      	ldr	r4, [pc, #36]	; (801f3f8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 801f3d4:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801f3d6:	f8ad 101a 	strh.w	r1, [sp, #26]
 801f3da:	a904      	add	r1, sp, #16
 801f3dc:	9404      	str	r4, [sp, #16]
 801f3de:	f88d 7014 	strb.w	r7, [sp, #20]
 801f3e2:	f8ad 3018 	strh.w	r3, [sp, #24]
 801f3e6:	f8ad 201c 	strh.w	r2, [sp, #28]
 801f3ea:	6803      	ldr	r3, [r0, #0]
 801f3ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801f3ee:	4798      	blx	r3
 801f3f0:	b009      	add	sp, #36	; 0x24
 801f3f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f3f4:	0802ef20 	.word	0x0802ef20
 801f3f8:	0802ef34 	.word	0x0802ef34

0801f3fc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801f3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f400:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 801f404:	b0a1      	sub	sp, #132	; 0x84
 801f406:	4604      	mov	r4, r0
 801f408:	460d      	mov	r5, r1
 801f40a:	790b      	ldrb	r3, [r1, #4]
 801f40c:	f1b9 0f00 	cmp.w	r9, #0
 801f410:	d00f      	beq.n	801f432 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 801f412:	2b00      	cmp	r3, #0
 801f414:	f040 80a2 	bne.w	801f55c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801f418:	b021      	add	sp, #132	; 0x84
 801f41a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f41e:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801f422:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801f426:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801f42a:	1d20      	adds	r0, r4, #4
 801f42c:	f7fb fd78 	bl	801af20 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801f430:	e094      	b.n	801f55c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 801f432:	2b00      	cmp	r3, #0
 801f434:	d1f0      	bne.n	801f418 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801f436:	4b5f      	ldr	r3, [pc, #380]	; (801f5b4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 801f438:	681b      	ldr	r3, [r3, #0]
 801f43a:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 801f43e:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 801f442:	f1ba 0f03 	cmp.w	sl, #3
 801f446:	ddea      	ble.n	801f41e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 801f448:	f1ba 0f0c 	cmp.w	sl, #12
 801f44c:	f04f 0303 	mov.w	r3, #3
 801f450:	f04f 0600 	mov.w	r6, #0
 801f454:	4958      	ldr	r1, [pc, #352]	; (801f5b8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 801f456:	bfd8      	it	le
 801f458:	f10a 32ff 	addle.w	r2, sl, #4294967295
 801f45c:	960a      	str	r6, [sp, #40]	; 0x28
 801f45e:	bfd8      	it	le
 801f460:	fb92 f3f3 	sdivle	r3, r2, r3
 801f464:	9301      	str	r3, [sp, #4]
 801f466:	4b55      	ldr	r3, [pc, #340]	; (801f5bc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 801f468:	f9b3 2000 	ldrsh.w	r2, [r3]
 801f46c:	4b54      	ldr	r3, [pc, #336]	; (801f5c0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 801f46e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801f472:	2248      	movs	r2, #72	; 0x48
 801f474:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f478:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801f47c:	ab0e      	add	r3, sp, #56	; 0x38
 801f47e:	4618      	mov	r0, r3
 801f480:	f00b f9fc 	bl	802a87c <memcpy>
 801f484:	f04f 32ff 	mov.w	r2, #4294967295
 801f488:	f8cd a008 	str.w	sl, [sp, #8]
 801f48c:	e9cd 2006 	strd	r2, r0, [sp, #24]
 801f490:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801f494:	46b3      	mov	fp, r6
 801f496:	fb93 f3f2 	sdiv	r3, r3, r2
 801f49a:	b29b      	uxth	r3, r3
 801f49c:	9303      	str	r3, [sp, #12]
 801f49e:	2300      	movs	r3, #0
 801f4a0:	9a03      	ldr	r2, [sp, #12]
 801f4a2:	88ef      	ldrh	r7, [r5, #6]
 801f4a4:	a80a      	add	r0, sp, #40	; 0x28
 801f4a6:	9309      	str	r3, [sp, #36]	; 0x24
 801f4a8:	9b07      	ldr	r3, [sp, #28]
 801f4aa:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 801f4ae:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 801f4b2:	fb13 f302 	smulbb	r3, r3, r2
 801f4b6:	b29b      	uxth	r3, r3
 801f4b8:	9304      	str	r3, [sp, #16]
 801f4ba:	9b07      	ldr	r3, [sp, #28]
 801f4bc:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801f4c0:	685b      	ldr	r3, [r3, #4]
 801f4c2:	fb13 f302 	smulbb	r3, r3, r2
 801f4c6:	b29b      	uxth	r3, r3
 801f4c8:	9305      	str	r3, [sp, #20]
 801f4ca:	9b04      	ldr	r3, [sp, #16]
 801f4cc:	441f      	add	r7, r3
 801f4ce:	9b05      	ldr	r3, [sp, #20]
 801f4d0:	4498      	add	r8, r3
 801f4d2:	b23f      	sxth	r7, r7
 801f4d4:	fa0f f888 	sxth.w	r8, r8
 801f4d8:	4639      	mov	r1, r7
 801f4da:	4642      	mov	r2, r8
 801f4dc:	f7ff ff14 	bl	801f308 <_ZNK8touchgfx4Rect9intersectEss>
 801f4e0:	b380      	cbz	r0, 801f544 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801f4e2:	4639      	mov	r1, r7
 801f4e4:	ab09      	add	r3, sp, #36	; 0x24
 801f4e6:	4642      	mov	r2, r8
 801f4e8:	1d20      	adds	r0, r4, #4
 801f4ea:	f7fb fd19 	bl	801af20 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801f4ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f4f0:	b341      	cbz	r1, 801f544 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801f4f2:	4549      	cmp	r1, r9
 801f4f4:	d026      	beq.n	801f544 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801f4f6:	a80c      	add	r0, sp, #48	; 0x30
 801f4f8:	f7ff fde9 	bl	801f0ce <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f4fc:	2002      	movs	r0, #2
 801f4fe:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801f502:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801f506:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801f50a:	fb92 f2f0 	sdiv	r2, r2, r0
 801f50e:	440a      	add	r2, r1
 801f510:	1a99      	subs	r1, r3, r2
 801f512:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801f516:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801f51a:	fb93 f3f0 	sdiv	r3, r3, r0
 801f51e:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801f522:	4403      	add	r3, r0
 801f524:	1ad3      	subs	r3, r2, r3
 801f526:	9a06      	ldr	r2, [sp, #24]
 801f528:	435b      	muls	r3, r3
 801f52a:	fb01 3301 	mla	r3, r1, r1, r3
 801f52e:	4293      	cmp	r3, r2
 801f530:	d208      	bcs.n	801f544 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801f532:	9a04      	ldr	r2, [sp, #16]
 801f534:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801f538:	86a2      	strh	r2, [r4, #52]	; 0x34
 801f53a:	9a05      	ldr	r2, [sp, #20]
 801f53c:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 801f540:	86e2      	strh	r2, [r4, #54]	; 0x36
 801f542:	9306      	str	r3, [sp, #24]
 801f544:	f10b 0b02 	add.w	fp, fp, #2
 801f548:	f1bb 0f08 	cmp.w	fp, #8
 801f54c:	dda7      	ble.n	801f49e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 801f54e:	9b02      	ldr	r3, [sp, #8]
 801f550:	3601      	adds	r6, #1
 801f552:	4453      	add	r3, sl
 801f554:	9302      	str	r3, [sp, #8]
 801f556:	9b01      	ldr	r3, [sp, #4]
 801f558:	42b3      	cmp	r3, r6
 801f55a:	d199      	bne.n	801f490 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 801f55c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801f55e:	2900      	cmp	r1, #0
 801f560:	f43f af5a 	beq.w	801f418 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801f564:	a80c      	add	r0, sp, #48	; 0x30
 801f566:	2600      	movs	r6, #0
 801f568:	f7ff fdb1 	bl	801f0ce <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f56c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801f570:	88ea      	ldrh	r2, [r5, #6]
 801f572:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801f576:	1ad2      	subs	r2, r2, r3
 801f578:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801f57a:	7929      	ldrb	r1, [r5, #4]
 801f57c:	441a      	add	r2, r3
 801f57e:	892b      	ldrh	r3, [r5, #8]
 801f580:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801f584:	a90e      	add	r1, sp, #56	; 0x38
 801f586:	1a1b      	subs	r3, r3, r0
 801f588:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801f58a:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801f58e:	4403      	add	r3, r0
 801f590:	480c      	ldr	r0, [pc, #48]	; (801f5c4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 801f592:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 801f596:	900e      	str	r0, [sp, #56]	; 0x38
 801f598:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801f59a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801f59e:	6803      	ldr	r3, [r0, #0]
 801f5a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f5a2:	4798      	blx	r3
 801f5a4:	792b      	ldrb	r3, [r5, #4]
 801f5a6:	2b00      	cmp	r3, #0
 801f5a8:	f43f af36 	beq.w	801f418 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801f5ac:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801f5b0:	e732      	b.n	801f418 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801f5b2:	bf00      	nop
 801f5b4:	2000bf68 	.word	0x2000bf68
 801f5b8:	0802c1bc 	.word	0x0802c1bc
 801f5bc:	2000bf5a 	.word	0x2000bf5a
 801f5c0:	2000bf5c 	.word	0x2000bf5c
 801f5c4:	0802ef20 	.word	0x0802ef20

0801f5c8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801f5c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f5ca:	4604      	mov	r4, r0
 801f5cc:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801f5d0:	3201      	adds	r2, #1
 801f5d2:	d112      	bne.n	801f5fa <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801f5d4:	2500      	movs	r5, #0
 801f5d6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801f5da:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801f5de:	6803      	ldr	r3, [r0, #0]
 801f5e0:	9500      	str	r5, [sp, #0]
 801f5e2:	466d      	mov	r5, sp
 801f5e4:	f8ad 1004 	strh.w	r1, [sp, #4]
 801f5e8:	f8ad 2006 	strh.w	r2, [sp, #6]
 801f5ec:	4629      	mov	r1, r5
 801f5ee:	6a1b      	ldr	r3, [r3, #32]
 801f5f0:	4798      	blx	r3
 801f5f2:	e895 0003 	ldmia.w	r5, {r0, r1}
 801f5f6:	e884 0003 	stmia.w	r4, {r0, r1}
 801f5fa:	4620      	mov	r0, r4
 801f5fc:	b003      	add	sp, #12
 801f5fe:	bd30      	pop	{r4, r5, pc}

0801f600 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801f600:	b513      	push	{r0, r1, r4, lr}
 801f602:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801f606:	4604      	mov	r4, r0
 801f608:	3301      	adds	r3, #1
 801f60a:	d109      	bne.n	801f620 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801f60c:	4601      	mov	r1, r0
 801f60e:	4668      	mov	r0, sp
 801f610:	f7ff fd5d 	bl	801f0ce <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f614:	f8bd 3000 	ldrh.w	r3, [sp]
 801f618:	8423      	strh	r3, [r4, #32]
 801f61a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801f61e:	8463      	strh	r3, [r4, #34]	; 0x22
 801f620:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801f624:	b002      	add	sp, #8
 801f626:	bd10      	pop	{r4, pc}

0801f628 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801f628:	b513      	push	{r0, r1, r4, lr}
 801f62a:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801f62e:	4604      	mov	r4, r0
 801f630:	3301      	adds	r3, #1
 801f632:	d109      	bne.n	801f648 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801f634:	4601      	mov	r1, r0
 801f636:	4668      	mov	r0, sp
 801f638:	f7ff fd49 	bl	801f0ce <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f63c:	f8bd 3000 	ldrh.w	r3, [sp]
 801f640:	8423      	strh	r3, [r4, #32]
 801f642:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801f646:	8463      	strh	r3, [r4, #34]	; 0x22
 801f648:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801f64c:	b002      	add	sp, #8
 801f64e:	bd10      	pop	{r4, pc}

0801f650 <_ZN8touchgfx6ScreenC1Ev>:
 801f650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f652:	4605      	mov	r5, r0
 801f654:	4b17      	ldr	r3, [pc, #92]	; (801f6b4 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801f656:	2200      	movs	r2, #0
 801f658:	4917      	ldr	r1, [pc, #92]	; (801f6b8 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801f65a:	f845 3b04 	str.w	r3, [r5], #4
 801f65e:	2301      	movs	r3, #1
 801f660:	8102      	strh	r2, [r0, #8]
 801f662:	4604      	mov	r4, r0
 801f664:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 801f668:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801f66c:	4b13      	ldr	r3, [pc, #76]	; (801f6bc <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801f66e:	8142      	strh	r2, [r0, #10]
 801f670:	f9b3 7000 	ldrsh.w	r7, [r3]
 801f674:	4b12      	ldr	r3, [pc, #72]	; (801f6c0 <_ZN8touchgfx6ScreenC1Ev+0x70>)
 801f676:	8182      	strh	r2, [r0, #12]
 801f678:	81c2      	strh	r2, [r0, #14]
 801f67a:	8202      	strh	r2, [r0, #16]
 801f67c:	8242      	strh	r2, [r0, #18]
 801f67e:	8282      	strh	r2, [r0, #20]
 801f680:	82c2      	strh	r2, [r0, #22]
 801f682:	6202      	str	r2, [r0, #32]
 801f684:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801f688:	6342      	str	r2, [r0, #52]	; 0x34
 801f68a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801f68e:	6041      	str	r1, [r0, #4]
 801f690:	4611      	mov	r1, r2
 801f692:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801f696:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 801f69a:	4628      	mov	r0, r5
 801f69c:	f7f3 f8f2 	bl	8012884 <_ZN8touchgfx8Drawable5setXYEss>
 801f6a0:	4639      	mov	r1, r7
 801f6a2:	4628      	mov	r0, r5
 801f6a4:	f7f3 f90c 	bl	80128c0 <_ZN8touchgfx8Drawable8setWidthEs>
 801f6a8:	4628      	mov	r0, r5
 801f6aa:	4631      	mov	r1, r6
 801f6ac:	f7f3 f917 	bl	80128de <_ZN8touchgfx8Drawable9setHeightEs>
 801f6b0:	4620      	mov	r0, r4
 801f6b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f6b4:	0802ef5c 	.word	0x0802ef5c
 801f6b8:	0802da48 	.word	0x0802da48
 801f6bc:	2000bf5a 	.word	0x2000bf5a
 801f6c0:	2000bf5c 	.word	0x2000bf5c

0801f6c4 <_ZN8touchgfx6Screen4drawEv>:
 801f6c4:	4b09      	ldr	r3, [pc, #36]	; (801f6ec <_ZN8touchgfx6Screen4drawEv+0x28>)
 801f6c6:	b507      	push	{r0, r1, r2, lr}
 801f6c8:	f9b3 2000 	ldrsh.w	r2, [r3]
 801f6cc:	2100      	movs	r1, #0
 801f6ce:	4b08      	ldr	r3, [pc, #32]	; (801f6f0 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801f6d0:	9100      	str	r1, [sp, #0]
 801f6d2:	4669      	mov	r1, sp
 801f6d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f6d8:	f8ad 2004 	strh.w	r2, [sp, #4]
 801f6dc:	f8ad 3006 	strh.w	r3, [sp, #6]
 801f6e0:	6803      	ldr	r3, [r0, #0]
 801f6e2:	689b      	ldr	r3, [r3, #8]
 801f6e4:	4798      	blx	r3
 801f6e6:	b003      	add	sp, #12
 801f6e8:	f85d fb04 	ldr.w	pc, [sp], #4
 801f6ec:	2000bf5a 	.word	0x2000bf5a
 801f6f0:	2000bf5c 	.word	0x2000bf5c

0801f6f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801f6f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f6f8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801f6fc:	b089      	sub	sp, #36	; 0x24
 801f6fe:	4680      	mov	r8, r0
 801f700:	460c      	mov	r4, r1
 801f702:	4615      	mov	r5, r2
 801f704:	b16b      	cbz	r3, 801f722 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801f706:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801f70a:	b153      	cbz	r3, 801f722 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801f70c:	4628      	mov	r0, r5
 801f70e:	f7ff ff5b 	bl	801f5c8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801f712:	4621      	mov	r1, r4
 801f714:	f7fe ffc2 	bl	801e69c <_ZNK8touchgfx4Rect9intersectERKS0_>
 801f718:	69eb      	ldr	r3, [r5, #28]
 801f71a:	b928      	cbnz	r0, 801f728 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x34>
 801f71c:	461d      	mov	r5, r3
 801f71e:	2b00      	cmp	r3, #0
 801f720:	d1f4      	bne.n	801f70c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18>
 801f722:	b009      	add	sp, #36	; 0x24
 801f724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f728:	ae04      	add	r6, sp, #16
 801f72a:	2b00      	cmp	r3, #0
 801f72c:	d051      	beq.n	801f7d2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 801f72e:	682b      	ldr	r3, [r5, #0]
 801f730:	4629      	mov	r1, r5
 801f732:	a802      	add	r0, sp, #8
 801f734:	68db      	ldr	r3, [r3, #12]
 801f736:	4798      	blx	r3
 801f738:	4628      	mov	r0, r5
 801f73a:	f7ff ff61 	bl	801f600 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801f73e:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801f742:	4407      	add	r7, r0
 801f744:	4628      	mov	r0, r5
 801f746:	f7ff ff6f 	bl	801f628 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801f74a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801f74e:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801f752:	b23f      	sxth	r7, r7
 801f754:	4418      	add	r0, r3
 801f756:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801f75a:	4621      	mov	r1, r4
 801f75c:	f8ad 2014 	strh.w	r2, [sp, #20]
 801f760:	f8ad 0012 	strh.w	r0, [sp, #18]
 801f764:	4630      	mov	r0, r6
 801f766:	f8ad 3016 	strh.w	r3, [sp, #22]
 801f76a:	f8ad 7010 	strh.w	r7, [sp, #16]
 801f76e:	f7fb fc89 	bl	801b084 <_ZN8touchgfx4RectaNERKS0_>
 801f772:	4628      	mov	r0, r5
 801f774:	f7ff ff28 	bl	801f5c8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801f778:	ab06      	add	r3, sp, #24
 801f77a:	4602      	mov	r2, r0
 801f77c:	e896 0003 	ldmia.w	r6, {r0, r1}
 801f780:	e883 0003 	stmia.w	r3, {r0, r1}
 801f784:	4611      	mov	r1, r2
 801f786:	4618      	mov	r0, r3
 801f788:	f7fb fc7c 	bl	801b084 <_ZN8touchgfx4RectaNERKS0_>
 801f78c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801f790:	f9b4 1000 	ldrsh.w	r1, [r4]
 801f794:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801f798:	4299      	cmp	r1, r3
 801f79a:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801f79e:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801f7a2:	d10b      	bne.n	801f7bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 801f7a4:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801f7a8:	4552      	cmp	r2, sl
 801f7aa:	d107      	bne.n	801f7bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 801f7ac:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801f7b0:	455a      	cmp	r2, fp
 801f7b2:	d103      	bne.n	801f7bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 801f7b4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801f7b8:	454a      	cmp	r2, r9
 801f7ba:	d00a      	beq.n	801f7d2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 801f7bc:	f1bb 0f00 	cmp.w	fp, #0
 801f7c0:	d002      	beq.n	801f7c8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd4>
 801f7c2:	f1b9 0f00 	cmp.w	r9, #0
 801f7c6:	d12e      	bne.n	801f826 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x132>
 801f7c8:	69ea      	ldr	r2, [r5, #28]
 801f7ca:	4621      	mov	r1, r4
 801f7cc:	4640      	mov	r0, r8
 801f7ce:	f7ff ff91 	bl	801f6f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801f7d2:	4628      	mov	r0, r5
 801f7d4:	f7ff fef8 	bl	801f5c8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801f7d8:	6861      	ldr	r1, [r4, #4]
 801f7da:	4602      	mov	r2, r0
 801f7dc:	4633      	mov	r3, r6
 801f7de:	6820      	ldr	r0, [r4, #0]
 801f7e0:	c303      	stmia	r3!, {r0, r1}
 801f7e2:	4611      	mov	r1, r2
 801f7e4:	4630      	mov	r0, r6
 801f7e6:	f7fb fc4d 	bl	801b084 <_ZN8touchgfx4RectaNERKS0_>
 801f7ea:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801f7ee:	2b00      	cmp	r3, #0
 801f7f0:	d097      	beq.n	801f722 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801f7f2:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801f7f6:	2b00      	cmp	r3, #0
 801f7f8:	d093      	beq.n	801f722 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801f7fa:	4628      	mov	r0, r5
 801f7fc:	f7ff ff00 	bl	801f600 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801f800:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801f804:	1a18      	subs	r0, r3, r0
 801f806:	f8ad 0010 	strh.w	r0, [sp, #16]
 801f80a:	4628      	mov	r0, r5
 801f80c:	f7ff ff0c 	bl	801f628 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801f810:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801f814:	4631      	mov	r1, r6
 801f816:	1a18      	subs	r0, r3, r0
 801f818:	f8ad 0012 	strh.w	r0, [sp, #18]
 801f81c:	4628      	mov	r0, r5
 801f81e:	682b      	ldr	r3, [r5, #0]
 801f820:	689b      	ldr	r3, [r3, #8]
 801f822:	4798      	blx	r3
 801f824:	e77d      	b.n	801f722 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801f826:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801f82a:	fa1f f08a 	uxth.w	r0, sl
 801f82e:	4552      	cmp	r2, sl
 801f830:	9000      	str	r0, [sp, #0]
 801f832:	da12      	bge.n	801f85a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x166>
 801f834:	9301      	str	r3, [sp, #4]
 801f836:	9b00      	ldr	r3, [sp, #0]
 801f838:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801f83c:	f8ad 2012 	strh.w	r2, [sp, #18]
 801f840:	1a9a      	subs	r2, r3, r2
 801f842:	f8ad 1010 	strh.w	r1, [sp, #16]
 801f846:	4631      	mov	r1, r6
 801f848:	f8ad 0014 	strh.w	r0, [sp, #20]
 801f84c:	4640      	mov	r0, r8
 801f84e:	f8ad 2016 	strh.w	r2, [sp, #22]
 801f852:	69ea      	ldr	r2, [r5, #28]
 801f854:	f7ff ff4e 	bl	801f6f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801f858:	9b01      	ldr	r3, [sp, #4]
 801f85a:	f9b4 2000 	ldrsh.w	r2, [r4]
 801f85e:	b29f      	uxth	r7, r3
 801f860:	429a      	cmp	r2, r3
 801f862:	da0d      	bge.n	801f880 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18c>
 801f864:	f8ad 2010 	strh.w	r2, [sp, #16]
 801f868:	1aba      	subs	r2, r7, r2
 801f86a:	f8ad a012 	strh.w	sl, [sp, #18]
 801f86e:	4631      	mov	r1, r6
 801f870:	f8ad 2014 	strh.w	r2, [sp, #20]
 801f874:	4640      	mov	r0, r8
 801f876:	f8ad 9016 	strh.w	r9, [sp, #22]
 801f87a:	69ea      	ldr	r2, [r5, #28]
 801f87c:	f7ff ff3a 	bl	801f6f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801f880:	8822      	ldrh	r2, [r4, #0]
 801f882:	445f      	add	r7, fp
 801f884:	88a3      	ldrh	r3, [r4, #4]
 801f886:	b2bf      	uxth	r7, r7
 801f888:	4413      	add	r3, r2
 801f88a:	b23a      	sxth	r2, r7
 801f88c:	b29b      	uxth	r3, r3
 801f88e:	b219      	sxth	r1, r3
 801f890:	4291      	cmp	r1, r2
 801f892:	dd0d      	ble.n	801f8b0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1bc>
 801f894:	1bdb      	subs	r3, r3, r7
 801f896:	f8ad 2010 	strh.w	r2, [sp, #16]
 801f89a:	f8ad a012 	strh.w	sl, [sp, #18]
 801f89e:	4631      	mov	r1, r6
 801f8a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 801f8a4:	4640      	mov	r0, r8
 801f8a6:	f8ad 9016 	strh.w	r9, [sp, #22]
 801f8aa:	69ea      	ldr	r2, [r5, #28]
 801f8ac:	f7ff ff22 	bl	801f6f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801f8b0:	88e2      	ldrh	r2, [r4, #6]
 801f8b2:	8863      	ldrh	r3, [r4, #2]
 801f8b4:	4413      	add	r3, r2
 801f8b6:	9a00      	ldr	r2, [sp, #0]
 801f8b8:	444a      	add	r2, r9
 801f8ba:	b29b      	uxth	r3, r3
 801f8bc:	fa1f f982 	uxth.w	r9, r2
 801f8c0:	b219      	sxth	r1, r3
 801f8c2:	fa0f f289 	sxth.w	r2, r9
 801f8c6:	428a      	cmp	r2, r1
 801f8c8:	da83      	bge.n	801f7d2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 801f8ca:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801f8ce:	eba3 0309 	sub.w	r3, r3, r9
 801f8d2:	f9b4 0000 	ldrsh.w	r0, [r4]
 801f8d6:	f8ad 1014 	strh.w	r1, [sp, #20]
 801f8da:	4631      	mov	r1, r6
 801f8dc:	f8ad 0010 	strh.w	r0, [sp, #16]
 801f8e0:	f8ad 2012 	strh.w	r2, [sp, #18]
 801f8e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801f8e8:	69ea      	ldr	r2, [r5, #28]
 801f8ea:	e76f      	b.n	801f7cc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd8>

0801f8ec <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801f8ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f8ee:	2300      	movs	r3, #0
 801f8f0:	aa02      	add	r2, sp, #8
 801f8f2:	4604      	mov	r4, r0
 801f8f4:	3004      	adds	r0, #4
 801f8f6:	f842 3d04 	str.w	r3, [r2, #-4]!
 801f8fa:	460d      	mov	r5, r1
 801f8fc:	f7fb fc99 	bl	801b232 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801f900:	9a01      	ldr	r2, [sp, #4]
 801f902:	b11a      	cbz	r2, 801f90c <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 801f904:	4629      	mov	r1, r5
 801f906:	4620      	mov	r0, r4
 801f908:	f7ff fef4 	bl	801f6f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801f90c:	b003      	add	sp, #12
 801f90e:	bd30      	pop	{r4, r5, pc}

0801f910 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801f910:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f912:	4602      	mov	r2, r0
 801f914:	4604      	mov	r4, r0
 801f916:	460d      	mov	r5, r1
 801f918:	466b      	mov	r3, sp
 801f91a:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801f91e:	6851      	ldr	r1, [r2, #4]
 801f920:	c303      	stmia	r3!, {r0, r1}
 801f922:	4629      	mov	r1, r5
 801f924:	4668      	mov	r0, sp
 801f926:	f7fb fbad 	bl	801b084 <_ZN8touchgfx4RectaNERKS0_>
 801f92a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801f92e:	4669      	mov	r1, sp
 801f930:	b123      	cbz	r3, 801f93c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801f932:	4620      	mov	r0, r4
 801f934:	f7ff ffda 	bl	801f8ec <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801f938:	b003      	add	sp, #12
 801f93a:	bd30      	pop	{r4, r5, pc}
 801f93c:	1d20      	adds	r0, r4, #4
 801f93e:	f7fb fc3f 	bl	801b1c0 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801f942:	e7f9      	b.n	801f938 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801f944 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801f944:	460b      	mov	r3, r1
 801f946:	680a      	ldr	r2, [r1, #0]
 801f948:	1d01      	adds	r1, r0, #4
 801f94a:	6952      	ldr	r2, [r2, #20]
 801f94c:	4618      	mov	r0, r3
 801f94e:	4710      	bx	r2

0801f950 <_ZN8touchgfx15EasingEquations16roundRespectSignEf>:
 801f950:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801f954:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801f958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f95c:	bfcc      	ite	gt
 801f95e:	ee30 0a27 	vaddgt.f32	s0, s0, s15
 801f962:	ee30 0a67 	vsuble.f32	s0, s0, s15
 801f966:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801f96a:	ee10 3a10 	vmov	r3, s0
 801f96e:	b218      	sxth	r0, r3
 801f970:	4770      	bx	lr

0801f972 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801f972:	b510      	push	{r4, lr}
 801f974:	4298      	cmp	r0, r3
 801f976:	eb01 0402 	add.w	r4, r1, r2
 801f97a:	b224      	sxth	r4, r4
 801f97c:	d21f      	bcs.n	801f9be <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x4c>
 801f97e:	b1f3      	cbz	r3, 801f9be <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x4c>
 801f980:	ee07 0a90 	vmov	s15, r0
 801f984:	ee06 1a10 	vmov	s12, r1
 801f988:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f98c:	ee07 3a90 	vmov	s15, r3
 801f990:	eeb8 0ac6 	vcvt.f32.s32	s0, s12
 801f994:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801f998:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f99c:	ee06 2a90 	vmov	s13, r2
 801f9a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f9a4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801f9a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f9ac:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801f9b0:	eea6 7a27 	vfma.f32	s14, s12, s15
 801f9b4:	eea6 0a87 	vfma.f32	s0, s13, s14
 801f9b8:	f7ff ffca 	bl	801f950 <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 801f9bc:	4604      	mov	r4, r0
 801f9be:	4620      	mov	r0, r4
 801f9c0:	bd10      	pop	{r4, pc}
	...

0801f9c4 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>:
 801f9c4:	f011 0f40 	tst.w	r1, #64	; 0x40
 801f9c8:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 801f9cc:	4b03      	ldr	r3, [pc, #12]	; (801f9dc <_ZNK8touchgfx9GlyphNode3topEv.isra.2+0x18>)
 801f9ce:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801f9d2:	bf08      	it	eq
 801f9d4:	2300      	moveq	r3, #0
 801f9d6:	4308      	orrs	r0, r1
 801f9d8:	4318      	orrs	r0, r3
 801f9da:	4770      	bx	lr
 801f9dc:	fffffe00 	.word	0xfffffe00

0801f9e0 <_ZN8touchgfx9GlyphNode6setTopEs>:
 801f9e0:	7b43      	ldrb	r3, [r0, #13]
 801f9e2:	7201      	strb	r1, [r0, #8]
 801f9e4:	b289      	uxth	r1, r1
 801f9e6:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 801f9ea:	05ca      	lsls	r2, r1, #23
 801f9ec:	bf48      	it	mi
 801f9ee:	f043 0320 	orrmi.w	r3, r3, #32
 801f9f2:	7343      	strb	r3, [r0, #13]
 801f9f4:	058b      	lsls	r3, r1, #22
 801f9f6:	bf42      	ittt	mi
 801f9f8:	7b43      	ldrbmi	r3, [r0, #13]
 801f9fa:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 801f9fe:	7343      	strbmi	r3, [r0, #13]
 801fa00:	4770      	bx	lr

0801fa02 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801fa02:	b530      	push	{r4, r5, lr}
 801fa04:	2500      	movs	r5, #0
 801fa06:	2401      	movs	r4, #1
 801fa08:	6843      	ldr	r3, [r0, #4]
 801fa0a:	b913      	cbnz	r3, 801fa12 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801fa0c:	6803      	ldr	r3, [r0, #0]
 801fa0e:	b1f3      	cbz	r3, 801fa4e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801fa10:	6043      	str	r3, [r0, #4]
 801fa12:	7c03      	ldrb	r3, [r0, #16]
 801fa14:	b143      	cbz	r3, 801fa28 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801fa16:	68c3      	ldr	r3, [r0, #12]
 801fa18:	b12b      	cbz	r3, 801fa26 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801fa1a:	881a      	ldrh	r2, [r3, #0]
 801fa1c:	b11a      	cbz	r2, 801fa26 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801fa1e:	1c9a      	adds	r2, r3, #2
 801fa20:	60c2      	str	r2, [r0, #12]
 801fa22:	8818      	ldrh	r0, [r3, #0]
 801fa24:	bd30      	pop	{r4, r5, pc}
 801fa26:	7405      	strb	r5, [r0, #16]
 801fa28:	6843      	ldr	r3, [r0, #4]
 801fa2a:	8819      	ldrh	r1, [r3, #0]
 801fa2c:	b179      	cbz	r1, 801fa4e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801fa2e:	1c9a      	adds	r2, r3, #2
 801fa30:	2902      	cmp	r1, #2
 801fa32:	6042      	str	r2, [r0, #4]
 801fa34:	d1f5      	bne.n	801fa22 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801fa36:	6883      	ldr	r3, [r0, #8]
 801fa38:	1d1a      	adds	r2, r3, #4
 801fa3a:	6082      	str	r2, [r0, #8]
 801fa3c:	681b      	ldr	r3, [r3, #0]
 801fa3e:	60c3      	str	r3, [r0, #12]
 801fa40:	2b00      	cmp	r3, #0
 801fa42:	d0e1      	beq.n	801fa08 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801fa44:	881b      	ldrh	r3, [r3, #0]
 801fa46:	2b00      	cmp	r3, #0
 801fa48:	d0de      	beq.n	801fa08 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801fa4a:	7404      	strb	r4, [r0, #16]
 801fa4c:	e7dc      	b.n	801fa08 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801fa4e:	2000      	movs	r0, #0
 801fa50:	e7e8      	b.n	801fa24 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801fa52 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801fa52:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fa54:	4605      	mov	r5, r0
 801fa56:	4608      	mov	r0, r1
 801fa58:	b1f1      	cbz	r1, 801fa98 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801fa5a:	f105 0440 	add.w	r4, r5, #64	; 0x40
 801fa5e:	460b      	mov	r3, r1
 801fa60:	f101 0708 	add.w	r7, r1, #8
 801fa64:	4622      	mov	r2, r4
 801fa66:	6818      	ldr	r0, [r3, #0]
 801fa68:	3308      	adds	r3, #8
 801fa6a:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801fa6e:	4626      	mov	r6, r4
 801fa70:	42bb      	cmp	r3, r7
 801fa72:	c603      	stmia	r6!, {r0, r1}
 801fa74:	4634      	mov	r4, r6
 801fa76:	d1f6      	bne.n	801fa66 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801fa78:	6818      	ldr	r0, [r3, #0]
 801fa7a:	6030      	str	r0, [r6, #0]
 801fa7c:	4610      	mov	r0, r2
 801fa7e:	889b      	ldrh	r3, [r3, #4]
 801fa80:	80b3      	strh	r3, [r6, #4]
 801fa82:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 801fa86:	015b      	lsls	r3, r3, #5
 801fa88:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801fa8c:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 801fa90:	430b      	orrs	r3, r1
 801fa92:	425b      	negs	r3, r3
 801fa94:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 801fa98:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801fa9a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801fa9a:	b538      	push	{r3, r4, r5, lr}
 801fa9c:	460c      	mov	r4, r1
 801fa9e:	6811      	ldr	r1, [r2, #0]
 801faa0:	4610      	mov	r0, r2
 801faa2:	68cd      	ldr	r5, [r1, #12]
 801faa4:	4619      	mov	r1, r3
 801faa6:	47a8      	blx	r5
 801faa8:	2800      	cmp	r0, #0
 801faaa:	bf08      	it	eq
 801faac:	4620      	moveq	r0, r4
 801faae:	bd38      	pop	{r3, r4, r5, pc}

0801fab0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801fab0:	b570      	push	{r4, r5, r6, lr}
 801fab2:	8810      	ldrh	r0, [r2, #0]
 801fab4:	4298      	cmp	r0, r3
 801fab6:	d817      	bhi.n	801fae8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801fab8:	1e48      	subs	r0, r1, #1
 801faba:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801fabe:	4298      	cmp	r0, r3
 801fac0:	d312      	bcc.n	801fae8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801fac2:	2400      	movs	r4, #0
 801fac4:	428c      	cmp	r4, r1
 801fac6:	d20f      	bcs.n	801fae8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801fac8:	1860      	adds	r0, r4, r1
 801faca:	1040      	asrs	r0, r0, #1
 801facc:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801fad0:	0085      	lsls	r5, r0, #2
 801fad2:	42b3      	cmp	r3, r6
 801fad4:	d902      	bls.n	801fadc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801fad6:	3001      	adds	r0, #1
 801fad8:	b284      	uxth	r4, r0
 801fada:	e7f3      	b.n	801fac4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801fadc:	d102      	bne.n	801fae4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x34>
 801fade:	442a      	add	r2, r5
 801fae0:	8850      	ldrh	r0, [r2, #2]
 801fae2:	bd70      	pop	{r4, r5, r6, pc}
 801fae4:	b281      	uxth	r1, r0
 801fae6:	e7ed      	b.n	801fac4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801fae8:	2000      	movs	r0, #0
 801faea:	e7fa      	b.n	801fae2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>

0801faec <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>:
 801faec:	b510      	push	{r4, lr}
 801faee:	8ac3      	ldrh	r3, [r0, #22]
 801faf0:	428b      	cmp	r3, r1
 801faf2:	d805      	bhi.n	801fb00 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x14>
 801faf4:	4b07      	ldr	r3, [pc, #28]	; (801fb14 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x28>)
 801faf6:	21fd      	movs	r1, #253	; 0xfd
 801faf8:	4a07      	ldr	r2, [pc, #28]	; (801fb18 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x2c>)
 801fafa:	4808      	ldr	r0, [pc, #32]	; (801fb1c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x30>)
 801fafc:	f00a fe40 	bl	802a780 <__assert_func>
 801fb00:	8a83      	ldrh	r3, [r0, #20]
 801fb02:	240a      	movs	r4, #10
 801fb04:	4419      	add	r1, r3
 801fb06:	fbb1 f3f4 	udiv	r3, r1, r4
 801fb0a:	fb04 1113 	mls	r1, r4, r3, r1
 801fb0e:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 801fb12:	bd10      	pop	{r4, pc}
 801fb14:	0802efa9 	.word	0x0802efa9
 801fb18:	0802f3d8 	.word	0x0802f3d8
 801fb1c:	0802efb7 	.word	0x0802efb7

0801fb20 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>:
 801fb20:	b508      	push	{r3, lr}
 801fb22:	8ac3      	ldrh	r3, [r0, #22]
 801fb24:	428b      	cmp	r3, r1
 801fb26:	d805      	bhi.n	801fb34 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x14>
 801fb28:	4b07      	ldr	r3, [pc, #28]	; (801fb48 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x28>)
 801fb2a:	21d3      	movs	r1, #211	; 0xd3
 801fb2c:	4a07      	ldr	r2, [pc, #28]	; (801fb4c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x2c>)
 801fb2e:	4808      	ldr	r0, [pc, #32]	; (801fb50 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x30>)
 801fb30:	f00a fe26 	bl	802a780 <__assert_func>
 801fb34:	8a83      	ldrh	r3, [r0, #20]
 801fb36:	220a      	movs	r2, #10
 801fb38:	4419      	add	r1, r3
 801fb3a:	fbb1 f3f2 	udiv	r3, r1, r2
 801fb3e:	fb02 1113 	mls	r1, r2, r3, r1
 801fb42:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 801fb46:	bd08      	pop	{r3, pc}
 801fb48:	0802efa9 	.word	0x0802efa9
 801fb4c:	0802f128 	.word	0x0802f128
 801fb50:	0802efb7 	.word	0x0802efb7

0801fb54 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801fb54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb58:	4604      	mov	r4, r0
 801fb5a:	4688      	mov	r8, r1
 801fb5c:	4615      	mov	r5, r2
 801fb5e:	b94a      	cbnz	r2, 801fb74 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20>
 801fb60:	4691      	mov	r9, r2
 801fb62:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801fb66:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 801fb6a:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801fb6e:	4648      	mov	r0, r9
 801fb70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fb74:	f100 0640 	add.w	r6, r0, #64	; 0x40
 801fb78:	8892      	ldrh	r2, [r2, #4]
 801fb7a:	462b      	mov	r3, r5
 801fb7c:	f105 0c08 	add.w	ip, r5, #8
 801fb80:	46b3      	mov	fp, r6
 801fb82:	6818      	ldr	r0, [r3, #0]
 801fb84:	3308      	adds	r3, #8
 801fb86:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801fb8a:	4637      	mov	r7, r6
 801fb8c:	4563      	cmp	r3, ip
 801fb8e:	c703      	stmia	r7!, {r0, r1}
 801fb90:	463e      	mov	r6, r7
 801fb92:	d1f6      	bne.n	801fb82 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x2e>
 801fb94:	6818      	ldr	r0, [r3, #0]
 801fb96:	46d9      	mov	r9, fp
 801fb98:	6038      	str	r0, [r7, #0]
 801fb9a:	889b      	ldrh	r3, [r3, #4]
 801fb9c:	80bb      	strh	r3, [r7, #4]
 801fb9e:	f46f 6363 	mvn.w	r3, #3632	; 0xe30
 801fba2:	f894 704d 	ldrb.w	r7, [r4, #77]	; 0x4d
 801fba6:	18d3      	adds	r3, r2, r3
 801fba8:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 801fbac:	b298      	uxth	r0, r3
 801fbae:	f40a 7180 	and.w	r1, sl, #256	; 0x100
 801fbb2:	f894 a047 	ldrb.w	sl, [r4, #71]	; 0x47
 801fbb6:	281d      	cmp	r0, #29
 801fbb8:	ea4a 0a01 	orr.w	sl, sl, r1
 801fbbc:	fa1f f68a 	uxth.w	r6, sl
 801fbc0:	d842      	bhi.n	801fc48 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf4>
 801fbc2:	2301      	movs	r3, #1
 801fbc4:	4950      	ldr	r1, [pc, #320]	; (801fd08 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b4>)
 801fbc6:	ea4f 0aea 	mov.w	sl, sl, asr #3
 801fbca:	4083      	lsls	r3, r0
 801fbcc:	420b      	tst	r3, r1
 801fbce:	d114      	bne.n	801fbfa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801fbd0:	f413 7f60 	tst.w	r3, #896	; 0x380
 801fbd4:	d03c      	beq.n	801fc50 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xfc>
 801fbd6:	fa1f fa8a 	uxth.w	sl, sl
 801fbda:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 801fbde:	4658      	mov	r0, fp
 801fbe0:	eba1 010a 	sub.w	r1, r1, sl
 801fbe4:	b209      	sxth	r1, r1
 801fbe6:	f7ff fefb 	bl	801f9e0 <_ZN8touchgfx9GlyphNode6setTopEs>
 801fbea:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 801fbee:	1b86      	subs	r6, r0, r6
 801fbf0:	eba6 0a0a 	sub.w	sl, r6, sl
 801fbf4:	f8a4 a050 	strh.w	sl, [r4, #80]	; 0x50
 801fbf8:	e7b9      	b.n	801fb6e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801fbfa:	2100      	movs	r1, #0
 801fbfc:	f104 001a 	add.w	r0, r4, #26
 801fc00:	f7ff ff8e 	bl	801fb20 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801fc04:	f640 6333 	movw	r3, #3635	; 0xe33
 801fc08:	4601      	mov	r1, r0
 801fc0a:	4298      	cmp	r0, r3
 801fc0c:	d10a      	bne.n	801fc24 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd0>
 801fc0e:	f8d8 3000 	ldr.w	r3, [r8]
 801fc12:	4640      	mov	r0, r8
 801fc14:	68db      	ldr	r3, [r3, #12]
 801fc16:	4798      	blx	r3
 801fc18:	7b41      	ldrb	r1, [r0, #13]
 801fc1a:	7a00      	ldrb	r0, [r0, #8]
 801fc1c:	f7ff fed2 	bl	801f9c4 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801fc20:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801fc24:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 801fc28:	4658      	mov	r0, fp
 801fc2a:	4431      	add	r1, r6
 801fc2c:	4451      	add	r1, sl
 801fc2e:	b209      	sxth	r1, r1
 801fc30:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
 801fc34:	f7ff fed4 	bl	801f9e0 <_ZN8touchgfx9GlyphNode6setTopEs>
 801fc38:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 801fc3c:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 801fc40:	1a9b      	subs	r3, r3, r2
 801fc42:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 801fc46:	e792      	b.n	801fb6e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801fc48:	f640 631b 	movw	r3, #3611	; 0xe1b
 801fc4c:	429a      	cmp	r2, r3
 801fc4e:	d005      	beq.n	801fc5c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x108>
 801fc50:	f022 0302 	bic.w	r3, r2, #2
 801fc54:	f640 611d 	movw	r1, #3613	; 0xe1d
 801fc58:	428b      	cmp	r3, r1
 801fc5a:	d119      	bne.n	801fc90 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13c>
 801fc5c:	1e53      	subs	r3, r2, #1
 801fc5e:	4629      	mov	r1, r5
 801fc60:	4642      	mov	r2, r8
 801fc62:	4620      	mov	r0, r4
 801fc64:	b29b      	uxth	r3, r3
 801fc66:	f7ff ff18 	bl	801fa9a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801fc6a:	7b41      	ldrb	r1, [r0, #13]
 801fc6c:	7a00      	ldrb	r0, [r0, #8]
 801fc6e:	f7ff fea9 	bl	801f9c4 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801fc72:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 801fc76:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801fc7a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801fc7e:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801fc82:	4313      	orrs	r3, r2
 801fc84:	115a      	asrs	r2, r3, #5
 801fc86:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801fc8a:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801fc8e:	e02e      	b.n	801fcee <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801fc90:	4639      	mov	r1, r7
 801fc92:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 801fc96:	f7ff fe95 	bl	801f9c4 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801fc9a:	f640 6109 	movw	r1, #3593	; 0xe09
 801fc9e:	f022 0310 	bic.w	r3, r2, #16
 801fca2:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801fca6:	428b      	cmp	r3, r1
 801fca8:	d003      	beq.n	801fcb2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15e>
 801fcaa:	f640 6313 	movw	r3, #3603	; 0xe13
 801fcae:	429a      	cmp	r2, r3
 801fcb0:	d127      	bne.n	801fd02 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ae>
 801fcb2:	b27f      	sxtb	r7, r7
 801fcb4:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801fcb8:	4629      	mov	r1, r5
 801fcba:	4620      	mov	r0, r4
 801fcbc:	f407 7780 	and.w	r7, r7, #256	; 0x100
 801fcc0:	431f      	orrs	r7, r3
 801fcc2:	f640 6313 	movw	r3, #3603	; 0xe13
 801fcc6:	429a      	cmp	r2, r3
 801fcc8:	bf14      	ite	ne
 801fcca:	f102 33ff 	addne.w	r3, r2, #4294967295
 801fcce:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801fcd2:	4642      	mov	r2, r8
 801fcd4:	bf18      	it	ne
 801fcd6:	b29b      	uxthne	r3, r3
 801fcd8:	f7ff fedf 	bl	801fa9a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801fcdc:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801fce0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801fce4:	7a83      	ldrb	r3, [r0, #10]
 801fce6:	4313      	orrs	r3, r2
 801fce8:	1aff      	subs	r7, r7, r3
 801fcea:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
 801fcee:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801fcf2:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 801fcf6:	f7ff fe65 	bl	801f9c4 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801fcfa:	1b80      	subs	r0, r0, r6
 801fcfc:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
 801fd00:	e735      	b.n	801fb6e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801fd02:	2300      	movs	r3, #0
 801fd04:	e7c1      	b.n	801fc8a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x136>
 801fd06:	bf00      	nop
 801fd08:	3fc00079 	.word	0x3fc00079

0801fd0c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801fd0c:	3a01      	subs	r2, #1
 801fd0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fd12:	b292      	uxth	r2, r2
 801fd14:	460c      	mov	r4, r1
 801fd16:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801fd1a:	42b2      	cmp	r2, r6
 801fd1c:	d018      	beq.n	801fd50 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x44>
 801fd1e:	8b01      	ldrh	r1, [r0, #24]
 801fd20:	f834 5b02 	ldrh.w	r5, [r4], #2
 801fd24:	4291      	cmp	r1, r2
 801fd26:	d805      	bhi.n	801fd34 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x28>
 801fd28:	4b13      	ldr	r3, [pc, #76]	; (801fd78 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x6c>)
 801fd2a:	21d3      	movs	r1, #211	; 0xd3
 801fd2c:	4a13      	ldr	r2, [pc, #76]	; (801fd7c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x70>)
 801fd2e:	4814      	ldr	r0, [pc, #80]	; (801fd80 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x74>)
 801fd30:	f00a fd26 	bl	802a780 <__assert_func>
 801fd34:	8ac1      	ldrh	r1, [r0, #22]
 801fd36:	4411      	add	r1, r2
 801fd38:	3a01      	subs	r2, #1
 801fd3a:	f001 0101 	and.w	r1, r1, #1
 801fd3e:	b292      	uxth	r2, r2
 801fd40:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801fd44:	8a49      	ldrh	r1, [r1, #18]
 801fd46:	428d      	cmp	r5, r1
 801fd48:	d0e7      	beq.n	801fd1a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xe>
 801fd4a:	2000      	movs	r0, #0
 801fd4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fd50:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 801fd54:	2600      	movs	r6, #0
 801fd56:	f100 051a 	add.w	r5, r0, #26
 801fd5a:	441f      	add	r7, r3
 801fd5c:	b2b1      	uxth	r1, r6
 801fd5e:	42b9      	cmp	r1, r7
 801fd60:	da08      	bge.n	801fd74 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x68>
 801fd62:	f834 8016 	ldrh.w	r8, [r4, r6, lsl #1]
 801fd66:	4628      	mov	r0, r5
 801fd68:	f7ff feda 	bl	801fb20 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801fd6c:	3601      	adds	r6, #1
 801fd6e:	4540      	cmp	r0, r8
 801fd70:	d0f4      	beq.n	801fd5c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x50>
 801fd72:	e7ea      	b.n	801fd4a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801fd74:	2001      	movs	r0, #1
 801fd76:	e7e9      	b.n	801fd4c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801fd78:	0802efa9 	.word	0x0802efa9
 801fd7c:	0802f538 	.word	0x0802f538
 801fd80:	0802efb7 	.word	0x0802efb7

0801fd84 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>:
 801fd84:	b538      	push	{r3, r4, r5, lr}
 801fd86:	8ac3      	ldrh	r3, [r0, #22]
 801fd88:	428b      	cmp	r3, r1
 801fd8a:	d205      	bcs.n	801fd98 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x14>
 801fd8c:	4b08      	ldr	r3, [pc, #32]	; (801fdb0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x2c>)
 801fd8e:	21d8      	movs	r1, #216	; 0xd8
 801fd90:	4a08      	ldr	r2, [pc, #32]	; (801fdb4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x30>)
 801fd92:	4809      	ldr	r0, [pc, #36]	; (801fdb8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x34>)
 801fd94:	f00a fcf4 	bl	802a780 <__assert_func>
 801fd98:	8a82      	ldrh	r2, [r0, #20]
 801fd9a:	250a      	movs	r5, #10
 801fd9c:	1a5b      	subs	r3, r3, r1
 801fd9e:	440a      	add	r2, r1
 801fda0:	82c3      	strh	r3, [r0, #22]
 801fda2:	fbb2 f4f5 	udiv	r4, r2, r5
 801fda6:	fb05 2214 	mls	r2, r5, r4, r2
 801fdaa:	8282      	strh	r2, [r0, #20]
 801fdac:	bd38      	pop	{r3, r4, r5, pc}
 801fdae:	bf00      	nop
 801fdb0:	0802ef9d 	.word	0x0802ef9d
 801fdb4:	0802f354 	.word	0x0802f354
 801fdb8:	0802efb7 	.word	0x0802efb7

0801fdbc <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>:
 801fdbc:	b538      	push	{r3, r4, r5, lr}
 801fdbe:	8ac3      	ldrh	r3, [r0, #22]
 801fdc0:	2b09      	cmp	r3, #9
 801fdc2:	d905      	bls.n	801fdd0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x14>
 801fdc4:	4b08      	ldr	r3, [pc, #32]	; (801fde8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x2c>)
 801fdc6:	21f7      	movs	r1, #247	; 0xf7
 801fdc8:	4a08      	ldr	r2, [pc, #32]	; (801fdec <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x30>)
 801fdca:	4809      	ldr	r0, [pc, #36]	; (801fdf0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x34>)
 801fdcc:	f00a fcd8 	bl	802a780 <__assert_func>
 801fdd0:	8a82      	ldrh	r2, [r0, #20]
 801fdd2:	250a      	movs	r5, #10
 801fdd4:	441a      	add	r2, r3
 801fdd6:	3301      	adds	r3, #1
 801fdd8:	fbb2 f4f5 	udiv	r4, r2, r5
 801fddc:	fb05 2214 	mls	r2, r5, r4, r2
 801fde0:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
 801fde4:	82c3      	strh	r3, [r0, #22]
 801fde6:	bd38      	pop	{r3, r4, r5, pc}
 801fde8:	0802ef91 	.word	0x0802ef91
 801fdec:	0802f2a5 	.word	0x0802f2a5
 801fdf0:	0802efb7 	.word	0x0802efb7

0801fdf4 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801fdf4:	b538      	push	{r3, r4, r5, lr}
 801fdf6:	4604      	mov	r4, r0
 801fdf8:	f100 051a 	add.w	r5, r0, #26
 801fdfc:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801fdfe:	2b0a      	cmp	r3, #10
 801fe00:	d01c      	beq.n	801fe3c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 801fe02:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 801fe04:	b962      	cbnz	r2, 801fe20 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 801fe06:	f104 051a 	add.w	r5, r4, #26
 801fe0a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801fe0c:	2b0a      	cmp	r3, #10
 801fe0e:	d015      	beq.n	801fe3c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 801fe10:	4620      	mov	r0, r4
 801fe12:	f7ff fdf6 	bl	801fa02 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801fe16:	4601      	mov	r1, r0
 801fe18:	4628      	mov	r0, r5
 801fe1a:	f7ff ffcf 	bl	801fdbc <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 801fe1e:	e7f4      	b.n	801fe0a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x16>
 801fe20:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801fe22:	3a01      	subs	r2, #1
 801fe24:	4628      	mov	r0, r5
 801fe26:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 801fe2a:	3301      	adds	r3, #1
 801fe2c:	f003 0301 	and.w	r3, r3, #1
 801fe30:	8e49      	ldrh	r1, [r1, #50]	; 0x32
 801fe32:	8722      	strh	r2, [r4, #56]	; 0x38
 801fe34:	86e3      	strh	r3, [r4, #54]	; 0x36
 801fe36:	f7ff ffc1 	bl	801fdbc <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 801fe3a:	e7df      	b.n	801fdfc <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8>
 801fe3c:	bd38      	pop	{r3, r4, r5, pc}
	...

0801fe40 <_ZN8touchgfx12TextProvider18initializeInternalEv>:
 801fe40:	2300      	movs	r3, #0
 801fe42:	b510      	push	{r4, lr}
 801fe44:	6043      	str	r3, [r0, #4]
 801fe46:	4604      	mov	r4, r0
 801fe48:	60c3      	str	r3, [r0, #12]
 801fe4a:	7403      	strb	r3, [r0, #16]
 801fe4c:	8603      	strh	r3, [r0, #48]	; 0x30
 801fe4e:	8303      	strh	r3, [r0, #24]
 801fe50:	8703      	strh	r3, [r0, #56]	; 0x38
 801fe52:	f7ff ffcf 	bl	801fdf4 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801fe56:	4a0a      	ldr	r2, [pc, #40]	; (801fe80 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x40>)
 801fe58:	6813      	ldr	r3, [r2, #0]
 801fe5a:	4611      	mov	r1, r2
 801fe5c:	b913      	cbnz	r3, 801fe64 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x24>
 801fe5e:	6852      	ldr	r2, [r2, #4]
 801fe60:	07d0      	lsls	r0, r2, #31
 801fe62:	d50b      	bpl.n	801fe7c <_ZN8touchgfx12TextProvider18initializeInternalEv+0x3c>
 801fe64:	6849      	ldr	r1, [r1, #4]
 801fe66:	104a      	asrs	r2, r1, #1
 801fe68:	07c9      	lsls	r1, r1, #31
 801fe6a:	eb04 0002 	add.w	r0, r4, r2
 801fe6e:	bf48      	it	mi
 801fe70:	58a2      	ldrmi	r2, [r4, r2]
 801fe72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fe76:	bf48      	it	mi
 801fe78:	58d3      	ldrmi	r3, [r2, r3]
 801fe7a:	4718      	bx	r3
 801fe7c:	bd10      	pop	{r4, pc}
 801fe7e:	bf00      	nop
 801fe80:	20008708 	.word	0x20008708

0801fe84 <_ZN8touchgfx12TextProviderC1Ev>:
 801fe84:	2300      	movs	r3, #0
 801fe86:	2201      	movs	r2, #1
 801fe88:	b510      	push	{r4, lr}
 801fe8a:	4604      	mov	r4, r0
 801fe8c:	60c3      	str	r3, [r0, #12]
 801fe8e:	7403      	strb	r3, [r0, #16]
 801fe90:	82c3      	strh	r3, [r0, #22]
 801fe92:	8303      	strh	r3, [r0, #24]
 801fe94:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801fe96:	8603      	strh	r3, [r0, #48]	; 0x30
 801fe98:	86c3      	strh	r3, [r0, #54]	; 0x36
 801fe9a:	8703      	strh	r3, [r0, #56]	; 0x38
 801fe9c:	63c3      	str	r3, [r0, #60]	; 0x3c
 801fe9e:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801fea2:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801fea6:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 801feaa:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 801feae:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 801feb2:	e9c0 3300 	strd	r3, r3, [r0]
 801feb6:	f7ff ffc3 	bl	801fe40 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801feba:	4620      	mov	r0, r4
 801febc:	bd10      	pop	{r4, pc}

0801febe <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 801febe:	b410      	push	{r4}
 801fec0:	6082      	str	r2, [r0, #8]
 801fec2:	6001      	str	r1, [r0, #0]
 801fec4:	63c3      	str	r3, [r0, #60]	; 0x3c
 801fec6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801feca:	f7ff bfb9 	b.w	801fe40 <_ZN8touchgfx12TextProvider18initializeInternalEv>
	...

0801fed0 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>:
 801fed0:	b508      	push	{r3, lr}
 801fed2:	88c2      	ldrh	r2, [r0, #6]
 801fed4:	440a      	add	r2, r1
 801fed6:	2a02      	cmp	r2, #2
 801fed8:	dd05      	ble.n	801fee6 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x16>
 801feda:	4b06      	ldr	r3, [pc, #24]	; (801fef4 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x24>)
 801fedc:	21ec      	movs	r1, #236	; 0xec
 801fede:	4a06      	ldr	r2, [pc, #24]	; (801fef8 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x28>)
 801fee0:	4806      	ldr	r0, [pc, #24]	; (801fefc <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x2c>)
 801fee2:	f00a fc4d 	bl	802a780 <__assert_func>
 801fee6:	8883      	ldrh	r3, [r0, #4]
 801fee8:	80c2      	strh	r2, [r0, #6]
 801feea:	1a59      	subs	r1, r3, r1
 801feec:	f001 0101 	and.w	r1, r1, #1
 801fef0:	8081      	strh	r1, [r0, #4]
 801fef2:	bd08      	pop	{r3, pc}
 801fef4:	0802efe3 	.word	0x0802efe3
 801fef8:	0802f4b1 	.word	0x0802f4b1
 801fefc:	0802efb7 	.word	0x0802efb7

0801ff00 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>:
 801ff00:	b508      	push	{r3, lr}
 801ff02:	88c3      	ldrh	r3, [r0, #6]
 801ff04:	428b      	cmp	r3, r1
 801ff06:	d805      	bhi.n	801ff14 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x14>
 801ff08:	4b06      	ldr	r3, [pc, #24]	; (801ff24 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x24>)
 801ff0a:	21fd      	movs	r1, #253	; 0xfd
 801ff0c:	4a06      	ldr	r2, [pc, #24]	; (801ff28 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x28>)
 801ff0e:	4807      	ldr	r0, [pc, #28]	; (801ff2c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x2c>)
 801ff10:	f00a fc36 	bl	802a780 <__assert_func>
 801ff14:	8883      	ldrh	r3, [r0, #4]
 801ff16:	4419      	add	r1, r3
 801ff18:	f001 0101 	and.w	r1, r1, #1
 801ff1c:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 801ff20:	bd08      	pop	{r3, pc}
 801ff22:	bf00      	nop
 801ff24:	0802efa9 	.word	0x0802efa9
 801ff28:	0802f609 	.word	0x0802f609
 801ff2c:	0802efb7 	.word	0x0802efb7

0801ff30 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801ff30:	b570      	push	{r4, r5, r6, lr}
 801ff32:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 801ff34:	4604      	mov	r4, r0
 801ff36:	b92a      	cbnz	r2, 801ff44 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801ff38:	4b12      	ldr	r3, [pc, #72]	; (801ff84 <_ZN8touchgfx12TextProvider11getNextCharEv+0x54>)
 801ff3a:	21de      	movs	r1, #222	; 0xde
 801ff3c:	4a12      	ldr	r2, [pc, #72]	; (801ff88 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801ff3e:	4813      	ldr	r0, [pc, #76]	; (801ff8c <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801ff40:	f00a fc1e 	bl	802a780 <__assert_func>
 801ff44:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801ff46:	260a      	movs	r6, #10
 801ff48:	3a01      	subs	r2, #1
 801ff4a:	3412      	adds	r4, #18
 801ff4c:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801ff50:	3301      	adds	r3, #1
 801ff52:	8b4d      	ldrh	r5, [r1, #26]
 801ff54:	8602      	strh	r2, [r0, #48]	; 0x30
 801ff56:	fbb3 f1f6 	udiv	r1, r3, r6
 801ff5a:	fb06 3311 	mls	r3, r6, r1, r3
 801ff5e:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801ff60:	f7ff ff48 	bl	801fdf4 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801ff64:	88e3      	ldrh	r3, [r4, #6]
 801ff66:	2101      	movs	r1, #1
 801ff68:	2b02      	cmp	r3, #2
 801ff6a:	bf04      	itt	eq
 801ff6c:	2301      	moveq	r3, #1
 801ff6e:	80e3      	strheq	r3, [r4, #6]
 801ff70:	4620      	mov	r0, r4
 801ff72:	f7ff ffad 	bl	801fed0 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 801ff76:	4620      	mov	r0, r4
 801ff78:	462a      	mov	r2, r5
 801ff7a:	2100      	movs	r1, #0
 801ff7c:	f7ff ffc0 	bl	801ff00 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 801ff80:	4628      	mov	r0, r5
 801ff82:	bd70      	pop	{r4, r5, r6, pc}
 801ff84:	0802ef88 	.word	0x0802ef88
 801ff88:	0802f1fa 	.word	0x0802f1fa
 801ff8c:	0802efb7 	.word	0x0802efb7

0801ff90 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801ff90:	428a      	cmp	r2, r1
 801ff92:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff96:	4604      	mov	r4, r0
 801ff98:	460e      	mov	r6, r1
 801ff9a:	4615      	mov	r5, r2
 801ff9c:	469a      	mov	sl, r3
 801ff9e:	d92b      	bls.n	801fff8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x68>
 801ffa0:	1a57      	subs	r7, r2, r1
 801ffa2:	f04f 0800 	mov.w	r8, #0
 801ffa6:	f100 0932 	add.w	r9, r0, #50	; 0x32
 801ffaa:	f04f 0b0a 	mov.w	fp, #10
 801ffae:	b2bf      	uxth	r7, r7
 801ffb0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801ffb2:	b92b      	cbnz	r3, 801ffc0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x30>
 801ffb4:	4b24      	ldr	r3, [pc, #144]	; (8020048 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xb8>)
 801ffb6:	21e6      	movs	r1, #230	; 0xe6
 801ffb8:	4a24      	ldr	r2, [pc, #144]	; (802004c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xbc>)
 801ffba:	4825      	ldr	r0, [pc, #148]	; (8020050 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc0>)
 801ffbc:	f00a fbe0 	bl	802a780 <__assert_func>
 801ffc0:	3b01      	subs	r3, #1
 801ffc2:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801ffc4:	2101      	movs	r1, #1
 801ffc6:	4648      	mov	r0, r9
 801ffc8:	b29b      	uxth	r3, r3
 801ffca:	f108 0801 	add.w	r8, r8, #1
 801ffce:	441a      	add	r2, r3
 801ffd0:	8623      	strh	r3, [r4, #48]	; 0x30
 801ffd2:	fbb2 f3fb 	udiv	r3, r2, fp
 801ffd6:	fb0b 2313 	mls	r3, fp, r3, r2
 801ffda:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801ffde:	8b5a      	ldrh	r2, [r3, #26]
 801ffe0:	9201      	str	r2, [sp, #4]
 801ffe2:	f7ff ff75 	bl	801fed0 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 801ffe6:	9a01      	ldr	r2, [sp, #4]
 801ffe8:	2100      	movs	r1, #0
 801ffea:	4648      	mov	r0, r9
 801ffec:	f7ff ff88 	bl	801ff00 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 801fff0:	fa1f f388 	uxth.w	r3, r8
 801fff4:	429f      	cmp	r7, r3
 801fff6:	d8db      	bhi.n	801ffb0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x20>
 801fff8:	f104 071a 	add.w	r7, r4, #26
 801fffc:	4631      	mov	r1, r6
 801fffe:	260a      	movs	r6, #10
 8020000:	4638      	mov	r0, r7
 8020002:	f7ff febf 	bl	801fd84 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 8020006:	b1c5      	cbz	r5, 802003a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 8020008:	3d01      	subs	r5, #1
 802000a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 802000c:	b2ad      	uxth	r5, r5
 802000e:	2b09      	cmp	r3, #9
 8020010:	f83a 2015 	ldrh.w	r2, [sl, r5, lsl #1]
 8020014:	d903      	bls.n	802001e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8e>
 8020016:	4b0f      	ldr	r3, [pc, #60]	; (8020054 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc4>)
 8020018:	21ec      	movs	r1, #236	; 0xec
 802001a:	4a0f      	ldr	r2, [pc, #60]	; (8020058 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc8>)
 802001c:	e7cd      	b.n	801ffba <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2a>
 802001e:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8020020:	3301      	adds	r3, #1
 8020022:	3109      	adds	r1, #9
 8020024:	8623      	strh	r3, [r4, #48]	; 0x30
 8020026:	fbb1 f0f6 	udiv	r0, r1, r6
 802002a:	fb06 1110 	mls	r1, r6, r0, r1
 802002e:	4638      	mov	r0, r7
 8020030:	85e1      	strh	r1, [r4, #46]	; 0x2e
 8020032:	2100      	movs	r1, #0
 8020034:	f7ff fd5a 	bl	801faec <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 8020038:	e7e5      	b.n	8020006 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x76>
 802003a:	4620      	mov	r0, r4
 802003c:	b003      	add	sp, #12
 802003e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020042:	f7ff bed7 	b.w	801fdf4 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8020046:	bf00      	nop
 8020048:	0802ef88 	.word	0x0802ef88
 802004c:	0802f07e 	.word	0x0802f07e
 8020050:	0802efb7 	.word	0x0802efb7
 8020054:	0802efe3 	.word	0x0802efe3
 8020058:	0802eff6 	.word	0x0802eff6

0802005c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 802005c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020060:	4605      	mov	r5, r0
 8020062:	4616      	mov	r6, r2
 8020064:	1c8c      	adds	r4, r1, #2
 8020066:	8809      	ldrh	r1, [r1, #0]
 8020068:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 802006c:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8020070:	42b3      	cmp	r3, r6
 8020072:	d124      	bne.n	80200be <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8020074:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8020078:	f3c1 1803 	ubfx	r8, r1, #4, #4
 802007c:	f001 070f 	and.w	r7, r1, #15
 8020080:	4652      	mov	r2, sl
 8020082:	f8cd 8000 	str.w	r8, [sp]
 8020086:	464b      	mov	r3, r9
 8020088:	4621      	mov	r1, r4
 802008a:	4628      	mov	r0, r5
 802008c:	f7ff fe3e 	bl	801fd0c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8020090:	4683      	mov	fp, r0
 8020092:	b168      	cbz	r0, 80200b0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8020094:	eb0a 0109 	add.w	r1, sl, r9
 8020098:	463a      	mov	r2, r7
 802009a:	4628      	mov	r0, r5
 802009c:	4441      	add	r1, r8
 802009e:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 80200a2:	4649      	mov	r1, r9
 80200a4:	f7ff ff74 	bl	801ff90 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 80200a8:	4658      	mov	r0, fp
 80200aa:	b003      	add	sp, #12
 80200ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80200b0:	eb07 010a 	add.w	r1, r7, sl
 80200b4:	4449      	add	r1, r9
 80200b6:	4441      	add	r1, r8
 80200b8:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80200bc:	e7d2      	b.n	8020064 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 80200be:	f04f 0b00 	mov.w	fp, #0
 80200c2:	e7f1      	b.n	80200a8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

080200c4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 80200c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80200c8:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80200ca:	4604      	mov	r4, r0
 80200cc:	260b      	movs	r6, #11
 80200ce:	f100 091a 	add.w	r9, r0, #26
 80200d2:	886f      	ldrh	r7, [r5, #2]
 80200d4:	087f      	lsrs	r7, r7, #1
 80200d6:	3e01      	subs	r6, #1
 80200d8:	d013      	beq.n	8020102 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 80200da:	2100      	movs	r1, #0
 80200dc:	4648      	mov	r0, r9
 80200de:	f7ff fd1f 	bl	801fb20 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 80200e2:	462a      	mov	r2, r5
 80200e4:	4680      	mov	r8, r0
 80200e6:	4603      	mov	r3, r0
 80200e8:	4639      	mov	r1, r7
 80200ea:	4620      	mov	r0, r4
 80200ec:	f7ff fce0 	bl	801fab0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 80200f0:	b138      	cbz	r0, 8020102 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 80200f2:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 80200f6:	4642      	mov	r2, r8
 80200f8:	4620      	mov	r0, r4
 80200fa:	f7ff ffaf 	bl	802005c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 80200fe:	2800      	cmp	r0, #0
 8020100:	d1e9      	bne.n	80200d6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x12>
 8020102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08020108 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:
 8020108:	4b1e      	ldr	r3, [pc, #120]	; (8020184 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 802010a:	b570      	push	{r4, r5, r6, lr}
 802010c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020110:	4604      	mov	r4, r0
 8020112:	f003 0501 	and.w	r5, r3, #1
 8020116:	b902      	cbnz	r2, 802011a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
 8020118:	b165      	cbz	r5, 8020134 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2c>
 802011a:	105b      	asrs	r3, r3, #1
 802011c:	f104 061a 	add.w	r6, r4, #26
 8020120:	18e0      	adds	r0, r4, r3
 8020122:	b10d      	cbz	r5, 8020128 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x20>
 8020124:	58e3      	ldr	r3, [r4, r3]
 8020126:	589a      	ldr	r2, [r3, r2]
 8020128:	4790      	blx	r2
 802012a:	2100      	movs	r1, #0
 802012c:	4602      	mov	r2, r0
 802012e:	4630      	mov	r0, r6
 8020130:	f7ff fcdc 	bl	801faec <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 8020134:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8020136:	b303      	cbz	r3, 802017a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 8020138:	f104 051a 	add.w	r5, r4, #26
 802013c:	2100      	movs	r1, #0
 802013e:	4628      	mov	r0, r5
 8020140:	f7ff fcee 	bl	801fb20 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8020144:	b1c8      	cbz	r0, 802017a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 8020146:	4620      	mov	r0, r4
 8020148:	f7ff ffbc 	bl	80200c4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
 802014c:	2101      	movs	r1, #1
 802014e:	4628      	mov	r0, r5
 8020150:	f7ff fce6 	bl	801fb20 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8020154:	f640 133f 	movw	r3, #2367	; 0x93f
 8020158:	4606      	mov	r6, r0
 802015a:	4298      	cmp	r0, r3
 802015c:	d10d      	bne.n	802017a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 802015e:	2100      	movs	r1, #0
 8020160:	4628      	mov	r0, r5
 8020162:	f7ff fcdd 	bl	801fb20 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8020166:	2101      	movs	r1, #1
 8020168:	4602      	mov	r2, r0
 802016a:	4628      	mov	r0, r5
 802016c:	f7ff fcbe 	bl	801faec <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 8020170:	4632      	mov	r2, r6
 8020172:	2100      	movs	r1, #0
 8020174:	4628      	mov	r0, r5
 8020176:	f7ff fcb9 	bl	801faec <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 802017a:	4620      	mov	r0, r4
 802017c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8020180:	f7ff bed6 	b.w	801ff30 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8020184:	20008710 	.word	0x20008710

08020188 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8020188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802018a:	4617      	mov	r7, r2
 802018c:	461e      	mov	r6, r3
 802018e:	4605      	mov	r5, r0
 8020190:	f7ff ffba 	bl	8020108 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8020194:	683b      	ldr	r3, [r7, #0]
 8020196:	4604      	mov	r4, r0
 8020198:	4601      	mov	r1, r0
 802019a:	4638      	mov	r0, r7
 802019c:	68db      	ldr	r3, [r3, #12]
 802019e:	4798      	blx	r3
 80201a0:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 80201a4:	4602      	mov	r2, r0
 80201a6:	6030      	str	r0, [r6, #0]
 80201a8:	b29b      	uxth	r3, r3
 80201aa:	2b7f      	cmp	r3, #127	; 0x7f
 80201ac:	d813      	bhi.n	80201d6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 80201ae:	4639      	mov	r1, r7
 80201b0:	4628      	mov	r0, r5
 80201b2:	f7ff fccf 	bl	801fb54 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 80201b6:	6030      	str	r0, [r6, #0]
 80201b8:	6833      	ldr	r3, [r6, #0]
 80201ba:	b143      	cbz	r3, 80201ce <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 80201bc:	f993 200d 	ldrsb.w	r2, [r3, #13]
 80201c0:	7a9b      	ldrb	r3, [r3, #10]
 80201c2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80201c6:	4313      	orrs	r3, r2
 80201c8:	bf0c      	ite	eq
 80201ca:	2301      	moveq	r3, #1
 80201cc:	2300      	movne	r3, #0
 80201ce:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 80201d2:	4620      	mov	r0, r4
 80201d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80201d6:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 80201da:	2b00      	cmp	r3, #0
 80201dc:	d0ec      	beq.n	80201b8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 80201de:	f640 1302 	movw	r3, #2306	; 0x902
 80201e2:	429c      	cmp	r4, r3
 80201e4:	d1e8      	bne.n	80201b8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 80201e6:	4601      	mov	r1, r0
 80201e8:	4628      	mov	r0, r5
 80201ea:	f7ff fc32 	bl	801fa52 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80201ee:	e7e2      	b.n	80201b6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>

080201f0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 80201f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80201f4:	4617      	mov	r7, r2
 80201f6:	461e      	mov	r6, r3
 80201f8:	4605      	mov	r5, r0
 80201fa:	f7ff ff85 	bl	8020108 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80201fe:	683b      	ldr	r3, [r7, #0]
 8020200:	4604      	mov	r4, r0
 8020202:	4601      	mov	r1, r0
 8020204:	4638      	mov	r0, r7
 8020206:	f8d3 8008 	ldr.w	r8, [r3, #8]
 802020a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802020e:	47c0      	blx	r8
 8020210:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 8020214:	4602      	mov	r2, r0
 8020216:	6030      	str	r0, [r6, #0]
 8020218:	b29b      	uxth	r3, r3
 802021a:	2b7f      	cmp	r3, #127	; 0x7f
 802021c:	d814      	bhi.n	8020248 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x58>
 802021e:	4639      	mov	r1, r7
 8020220:	4628      	mov	r0, r5
 8020222:	f7ff fc97 	bl	801fb54 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8020226:	6030      	str	r0, [r6, #0]
 8020228:	6833      	ldr	r3, [r6, #0]
 802022a:	b143      	cbz	r3, 802023e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 802022c:	f993 200d 	ldrsb.w	r2, [r3, #13]
 8020230:	7a9b      	ldrb	r3, [r3, #10]
 8020232:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8020236:	4313      	orrs	r3, r2
 8020238:	bf0c      	ite	eq
 802023a:	2301      	moveq	r3, #1
 802023c:	2300      	movne	r3, #0
 802023e:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8020242:	4620      	mov	r0, r4
 8020244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020248:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 802024c:	2b00      	cmp	r3, #0
 802024e:	d0eb      	beq.n	8020228 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 8020250:	f640 1302 	movw	r3, #2306	; 0x902
 8020254:	429c      	cmp	r4, r3
 8020256:	d1e7      	bne.n	8020228 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 8020258:	4601      	mov	r1, r0
 802025a:	4628      	mov	r0, r5
 802025c:	f7ff fbf9 	bl	801fa52 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8020260:	e7e1      	b.n	8020226 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x36>

08020262 <_ZN8touchgfx7Unicode6strlenEPKt>:
 8020262:	4602      	mov	r2, r0
 8020264:	b148      	cbz	r0, 802027a <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 8020266:	2300      	movs	r3, #0
 8020268:	b298      	uxth	r0, r3
 802026a:	3301      	adds	r3, #1
 802026c:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8020270:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 8020274:	2900      	cmp	r1, #0
 8020276:	d1f7      	bne.n	8020268 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 8020278:	4770      	bx	lr
 802027a:	4770      	bx	lr

0802027c <_ZN8touchgfx7Unicode6strlenEPKc>:
 802027c:	b140      	cbz	r0, 8020290 <_ZN8touchgfx7Unicode6strlenEPKc+0x14>
 802027e:	4602      	mov	r2, r0
 8020280:	1a13      	subs	r3, r2, r0
 8020282:	f812 1b01 	ldrb.w	r1, [r2], #1
 8020286:	b29b      	uxth	r3, r3
 8020288:	2900      	cmp	r1, #0
 802028a:	d1f9      	bne.n	8020280 <_ZN8touchgfx7Unicode6strlenEPKc+0x4>
 802028c:	4618      	mov	r0, r3
 802028e:	4770      	bx	lr
 8020290:	4603      	mov	r3, r0
 8020292:	e7fb      	b.n	802028c <_ZN8touchgfx7Unicode6strlenEPKc+0x10>

08020294 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 8020294:	b530      	push	{r4, r5, lr}
 8020296:	4604      	mov	r4, r0
 8020298:	b159      	cbz	r1, 80202b2 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 802029a:	b148      	cbz	r0, 80202b0 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 802029c:	2300      	movs	r3, #0
 802029e:	b298      	uxth	r0, r3
 80202a0:	4282      	cmp	r2, r0
 80202a2:	d905      	bls.n	80202b0 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 80202a4:	5ccd      	ldrb	r5, [r1, r3]
 80202a6:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 80202aa:	3301      	adds	r3, #1
 80202ac:	2d00      	cmp	r5, #0
 80202ae:	d1f6      	bne.n	802029e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 80202b0:	bd30      	pop	{r4, r5, pc}
 80202b2:	4608      	mov	r0, r1
 80202b4:	e7fc      	b.n	80202b0 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

080202b6 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 80202b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80202b8:	468c      	mov	ip, r1
 80202ba:	b08b      	sub	sp, #44	; 0x2c
 80202bc:	2100      	movs	r1, #0
 80202be:	ae01      	add	r6, sp, #4
 80202c0:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80202c4:	211f      	movs	r1, #31
 80202c6:	fbb0 f7f3 	udiv	r7, r0, r3
 80202ca:	fb03 0517 	mls	r5, r3, r7, r0
 80202ce:	4638      	mov	r0, r7
 80202d0:	b2ec      	uxtb	r4, r5
 80202d2:	2d09      	cmp	r5, #9
 80202d4:	bfd4      	ite	le
 80202d6:	3430      	addle	r4, #48	; 0x30
 80202d8:	3457      	addgt	r4, #87	; 0x57
 80202da:	b2e4      	uxtb	r4, r4
 80202dc:	558c      	strb	r4, [r1, r6]
 80202de:	1e4c      	subs	r4, r1, #1
 80202e0:	b92f      	cbnz	r7, 80202ee <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 80202e2:	4431      	add	r1, r6
 80202e4:	4660      	mov	r0, ip
 80202e6:	f7ff ffd5 	bl	8020294 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 80202ea:	b00b      	add	sp, #44	; 0x2c
 80202ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80202ee:	4621      	mov	r1, r4
 80202f0:	e7e9      	b.n	80202c6 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

080202f2 <_ZN8touchgfx7Unicode4itoaElPtti>:
 80202f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80202f4:	4607      	mov	r7, r0
 80202f6:	b08b      	sub	sp, #44	; 0x2c
 80202f8:	4608      	mov	r0, r1
 80202fa:	b341      	cbz	r1, 802034e <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 80202fc:	1e99      	subs	r1, r3, #2
 80202fe:	290e      	cmp	r1, #14
 8020300:	d825      	bhi.n	802034e <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8020302:	2100      	movs	r1, #0
 8020304:	463c      	mov	r4, r7
 8020306:	261f      	movs	r6, #31
 8020308:	f10d 0c04 	add.w	ip, sp, #4
 802030c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8020310:	1e71      	subs	r1, r6, #1
 8020312:	fb94 fef3 	sdiv	lr, r4, r3
 8020316:	fb03 441e 	mls	r4, r3, lr, r4
 802031a:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 802031e:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 8020322:	b2ec      	uxtb	r4, r5
 8020324:	2d09      	cmp	r5, #9
 8020326:	bfd4      	ite	le
 8020328:	3430      	addle	r4, #48	; 0x30
 802032a:	3457      	addgt	r4, #87	; 0x57
 802032c:	b2e4      	uxtb	r4, r4
 802032e:	f80c 4006 	strb.w	r4, [ip, r6]
 8020332:	4674      	mov	r4, lr
 8020334:	b96c      	cbnz	r4, 8020352 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 8020336:	2f00      	cmp	r7, #0
 8020338:	da05      	bge.n	8020346 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 802033a:	ab0a      	add	r3, sp, #40	; 0x28
 802033c:	4419      	add	r1, r3
 802033e:	232d      	movs	r3, #45	; 0x2d
 8020340:	f801 3c24 	strb.w	r3, [r1, #-36]
 8020344:	1eb1      	subs	r1, r6, #2
 8020346:	3101      	adds	r1, #1
 8020348:	4461      	add	r1, ip
 802034a:	f7ff ffa3 	bl	8020294 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 802034e:	b00b      	add	sp, #44	; 0x2c
 8020350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020352:	460e      	mov	r6, r1
 8020354:	e7dc      	b.n	8020310 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

08020356 <_ZN8touchgfx7Unicode4atoiEPKt>:
 8020356:	b510      	push	{r4, lr}
 8020358:	b158      	cbz	r0, 8020372 <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 802035a:	1e82      	subs	r2, r0, #2
 802035c:	210a      	movs	r1, #10
 802035e:	2000      	movs	r0, #0
 8020360:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8020364:	3b30      	subs	r3, #48	; 0x30
 8020366:	b29c      	uxth	r4, r3
 8020368:	2c09      	cmp	r4, #9
 802036a:	d802      	bhi.n	8020372 <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 802036c:	fb01 3000 	mla	r0, r1, r0, r3
 8020370:	e7f6      	b.n	8020360 <_ZN8touchgfx7Unicode4atoiEPKt+0xa>
 8020372:	bd10      	pop	{r4, pc}

08020374 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>:
 8020374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020378:	b085      	sub	sp, #20
 802037a:	f8d0 8000 	ldr.w	r8, [r0]
 802037e:	468a      	mov	sl, r1
 8020380:	461c      	mov	r4, r3
 8020382:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 8020386:	4681      	mov	r9, r0
 8020388:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 802038c:	4640      	mov	r0, r8
 802038e:	9203      	str	r2, [sp, #12]
 8020390:	9102      	str	r1, [sp, #8]
 8020392:	9301      	str	r3, [sp, #4]
 8020394:	f7ff ff65 	bl	8020262 <_ZN8touchgfx7Unicode6strlenEPKt>
 8020398:	9a03      	ldr	r2, [sp, #12]
 802039a:	f1ba 0f00 	cmp.w	sl, #0
 802039e:	bf0c      	ite	eq
 80203a0:	4684      	moveq	ip, r0
 80203a2:	f100 0c01 	addne.w	ip, r0, #1
 80203a6:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 80203aa:	8812      	ldrh	r2, [r2, #0]
 80203ac:	fa1f fc8c 	uxth.w	ip, ip
 80203b0:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80203b2:	2a69      	cmp	r2, #105	; 0x69
 80203b4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80203b6:	9f15      	ldr	r7, [sp, #84]	; 0x54
 80203b8:	e9dd 3101 	ldrd	r3, r1, [sp, #4]
 80203bc:	d004      	beq.n	80203c8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 80203be:	d844      	bhi.n	802044a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xd6>
 80203c0:	2a58      	cmp	r2, #88	; 0x58
 80203c2:	d001      	beq.n	80203c8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 80203c4:	2a64      	cmp	r2, #100	; 0x64
 80203c6:	d14b      	bne.n	8020460 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 80203c8:	b1a4      	cbz	r4, 80203f4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 80203ca:	b956      	cbnz	r6, 80203e2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 80203cc:	2801      	cmp	r0, #1
 80203ce:	d108      	bne.n	80203e2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 80203d0:	f8b8 2000 	ldrh.w	r2, [r8]
 80203d4:	2a30      	cmp	r2, #48	; 0x30
 80203d6:	bf02      	ittt	eq
 80203d8:	f108 0202 	addeq.w	r2, r8, #2
 80203dc:	4630      	moveq	r0, r6
 80203de:	f8c9 2000 	streq.w	r2, [r9]
 80203e2:	45b4      	cmp	ip, r6
 80203e4:	da3e      	bge.n	8020464 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf0>
 80203e6:	b2b6      	uxth	r6, r6
 80203e8:	eba6 040c 	sub.w	r4, r6, ip
 80203ec:	46b4      	mov	ip, r6
 80203ee:	b2a4      	uxth	r4, r4
 80203f0:	f04f 0b00 	mov.w	fp, #0
 80203f4:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 80203f8:	3a01      	subs	r2, #1
 80203fa:	b169      	cbz	r1, 8020418 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 80203fc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80203fe:	458c      	cmp	ip, r1
 8020400:	da09      	bge.n	8020416 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 8020402:	eba1 010c 	sub.w	r1, r1, ip
 8020406:	b289      	uxth	r1, r1
 8020408:	b933      	cbnz	r3, 8020418 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 802040a:	f1bb 0f00 	cmp.w	fp, #0
 802040e:	d02b      	beq.n	8020468 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 8020410:	b350      	cbz	r0, 8020468 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 8020412:	440c      	add	r4, r1
 8020414:	b2a4      	uxth	r4, r4
 8020416:	2100      	movs	r1, #0
 8020418:	682b      	ldr	r3, [r5, #0]
 802041a:	4293      	cmp	r3, r2
 802041c:	da07      	bge.n	802042e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 802041e:	f1ba 0f00 	cmp.w	sl, #0
 8020422:	d004      	beq.n	802042e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 8020424:	f827 a013 	strh.w	sl, [r7, r3, lsl #1]
 8020428:	682b      	ldr	r3, [r5, #0]
 802042a:	3301      	adds	r3, #1
 802042c:	602b      	str	r3, [r5, #0]
 802042e:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8020432:	b354      	cbz	r4, 802048a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 8020434:	682e      	ldr	r6, [r5, #0]
 8020436:	3c01      	subs	r4, #1
 8020438:	42b2      	cmp	r2, r6
 802043a:	b2a4      	uxth	r4, r4
 802043c:	dd25      	ble.n	802048a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 802043e:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 8020442:	682b      	ldr	r3, [r5, #0]
 8020444:	3301      	adds	r3, #1
 8020446:	602b      	str	r3, [r5, #0]
 8020448:	e7f3      	b.n	8020432 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xbe>
 802044a:	2a73      	cmp	r2, #115	; 0x73
 802044c:	d003      	beq.n	8020456 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xe2>
 802044e:	2a78      	cmp	r2, #120	; 0x78
 8020450:	d0ba      	beq.n	80203c8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 8020452:	2a6f      	cmp	r2, #111	; 0x6f
 8020454:	e7b7      	b.n	80203c6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x52>
 8020456:	2c00      	cmp	r4, #0
 8020458:	d0cc      	beq.n	80203f4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 802045a:	42b0      	cmp	r0, r6
 802045c:	dd00      	ble.n	8020460 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 802045e:	b2b0      	uxth	r0, r6
 8020460:	2400      	movs	r4, #0
 8020462:	e7c7      	b.n	80203f4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 8020464:	2400      	movs	r4, #0
 8020466:	e7c3      	b.n	80203f0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x7c>
 8020468:	2900      	cmp	r1, #0
 802046a:	d0d5      	beq.n	8020418 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 802046c:	f04f 0c20 	mov.w	ip, #32
 8020470:	682e      	ldr	r6, [r5, #0]
 8020472:	2900      	cmp	r1, #0
 8020474:	d0d0      	beq.n	8020418 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 8020476:	3901      	subs	r1, #1
 8020478:	4296      	cmp	r6, r2
 802047a:	b289      	uxth	r1, r1
 802047c:	dacb      	bge.n	8020416 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 802047e:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 8020482:	682b      	ldr	r3, [r5, #0]
 8020484:	3301      	adds	r3, #1
 8020486:	602b      	str	r3, [r5, #0]
 8020488:	e7f2      	b.n	8020470 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xfc>
 802048a:	b198      	cbz	r0, 80204b4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 802048c:	f8d9 3000 	ldr.w	r3, [r9]
 8020490:	881c      	ldrh	r4, [r3, #0]
 8020492:	b17c      	cbz	r4, 80204b4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 8020494:	682c      	ldr	r4, [r5, #0]
 8020496:	3801      	subs	r0, #1
 8020498:	42a2      	cmp	r2, r4
 802049a:	b280      	uxth	r0, r0
 802049c:	dd0a      	ble.n	80204b4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 802049e:	1c9c      	adds	r4, r3, #2
 80204a0:	f8c9 4000 	str.w	r4, [r9]
 80204a4:	881c      	ldrh	r4, [r3, #0]
 80204a6:	682b      	ldr	r3, [r5, #0]
 80204a8:	f827 4013 	strh.w	r4, [r7, r3, lsl #1]
 80204ac:	682b      	ldr	r3, [r5, #0]
 80204ae:	3301      	adds	r3, #1
 80204b0:	602b      	str	r3, [r5, #0]
 80204b2:	e7ea      	b.n	802048a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 80204b4:	2620      	movs	r6, #32
 80204b6:	b151      	cbz	r1, 80204ce <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 80204b8:	6828      	ldr	r0, [r5, #0]
 80204ba:	3901      	subs	r1, #1
 80204bc:	4282      	cmp	r2, r0
 80204be:	b289      	uxth	r1, r1
 80204c0:	dd05      	ble.n	80204ce <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 80204c2:	f827 6010 	strh.w	r6, [r7, r0, lsl #1]
 80204c6:	682b      	ldr	r3, [r5, #0]
 80204c8:	3301      	adds	r3, #1
 80204ca:	602b      	str	r3, [r5, #0]
 80204cc:	e7f3      	b.n	80204b6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x142>
 80204ce:	b005      	add	sp, #20
 80204d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080204d4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>:
 80204d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80204d8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80204da:	4604      	mov	r4, r0
 80204dc:	f04f 0801 	mov.w	r8, #1
 80204e0:	2000      	movs	r0, #0
 80204e2:	e9dd ce06 	ldrd	ip, lr, [sp, #24]
 80204e6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80204ea:	8008      	strh	r0, [r1, #0]
 80204ec:	7010      	strb	r0, [r2, #0]
 80204ee:	7018      	strb	r0, [r3, #0]
 80204f0:	f88c 0000 	strb.w	r0, [ip]
 80204f4:	f88e 0000 	strb.w	r0, [lr]
 80204f8:	7030      	strb	r0, [r6, #0]
 80204fa:	6820      	ldr	r0, [r4, #0]
 80204fc:	8800      	ldrh	r0, [r0, #0]
 80204fe:	b190      	cbz	r0, 8020526 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 8020500:	282b      	cmp	r0, #43	; 0x2b
 8020502:	d001      	beq.n	8020508 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x34>
 8020504:	2820      	cmp	r0, #32
 8020506:	d104      	bne.n	8020512 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x3e>
 8020508:	8008      	strh	r0, [r1, #0]
 802050a:	6820      	ldr	r0, [r4, #0]
 802050c:	3002      	adds	r0, #2
 802050e:	6020      	str	r0, [r4, #0]
 8020510:	e7f3      	b.n	80204fa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x26>
 8020512:	282d      	cmp	r0, #45	; 0x2d
 8020514:	d102      	bne.n	802051c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x48>
 8020516:	f882 8000 	strb.w	r8, [r2]
 802051a:	e7f6      	b.n	802050a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 802051c:	2823      	cmp	r0, #35	; 0x23
 802051e:	d102      	bne.n	8020526 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 8020520:	f883 8000 	strb.w	r8, [r3]
 8020524:	e7f1      	b.n	802050a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 8020526:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 802052a:	2b09      	cmp	r3, #9
 802052c:	d901      	bls.n	8020532 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x5e>
 802052e:	282a      	cmp	r0, #42	; 0x2a
 8020530:	d114      	bne.n	802055c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 8020532:	2201      	movs	r2, #1
 8020534:	f88e 2000 	strb.w	r2, [lr]
 8020538:	6823      	ldr	r3, [r4, #0]
 802053a:	8819      	ldrh	r1, [r3, #0]
 802053c:	2930      	cmp	r1, #48	; 0x30
 802053e:	bf02      	ittt	eq
 8020540:	3302      	addeq	r3, #2
 8020542:	6023      	streq	r3, [r4, #0]
 8020544:	f88c 2000 	strbeq.w	r2, [ip]
 8020548:	6820      	ldr	r0, [r4, #0]
 802054a:	8803      	ldrh	r3, [r0, #0]
 802054c:	2b2a      	cmp	r3, #42	; 0x2a
 802054e:	d11e      	bne.n	802058e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xba>
 8020550:	f04f 33ff 	mov.w	r3, #4294967295
 8020554:	603b      	str	r3, [r7, #0]
 8020556:	6823      	ldr	r3, [r4, #0]
 8020558:	3302      	adds	r3, #2
 802055a:	6023      	str	r3, [r4, #0]
 802055c:	6823      	ldr	r3, [r4, #0]
 802055e:	881b      	ldrh	r3, [r3, #0]
 8020560:	2b2e      	cmp	r3, #46	; 0x2e
 8020562:	d112      	bne.n	802058a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xb6>
 8020564:	2301      	movs	r3, #1
 8020566:	7033      	strb	r3, [r6, #0]
 8020568:	6823      	ldr	r3, [r4, #0]
 802056a:	1c98      	adds	r0, r3, #2
 802056c:	6020      	str	r0, [r4, #0]
 802056e:	885b      	ldrh	r3, [r3, #2]
 8020570:	2b2a      	cmp	r3, #42	; 0x2a
 8020572:	d117      	bne.n	80205a4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd0>
 8020574:	f04f 33ff 	mov.w	r3, #4294967295
 8020578:	602b      	str	r3, [r5, #0]
 802057a:	6823      	ldr	r3, [r4, #0]
 802057c:	3302      	adds	r3, #2
 802057e:	6023      	str	r3, [r4, #0]
 8020580:	682b      	ldr	r3, [r5, #0]
 8020582:	2b06      	cmp	r3, #6
 8020584:	bfa8      	it	ge
 8020586:	2306      	movge	r3, #6
 8020588:	602b      	str	r3, [r5, #0]
 802058a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802058e:	f7ff fee2 	bl	8020356 <_ZN8touchgfx7Unicode4atoiEPKt>
 8020592:	6038      	str	r0, [r7, #0]
 8020594:	6823      	ldr	r3, [r4, #0]
 8020596:	881a      	ldrh	r2, [r3, #0]
 8020598:	3a30      	subs	r2, #48	; 0x30
 802059a:	2a09      	cmp	r2, #9
 802059c:	d8de      	bhi.n	802055c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 802059e:	3302      	adds	r3, #2
 80205a0:	6023      	str	r3, [r4, #0]
 80205a2:	e7f7      	b.n	8020594 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xc0>
 80205a4:	f7ff fed7 	bl	8020356 <_ZN8touchgfx7Unicode4atoiEPKt>
 80205a8:	6028      	str	r0, [r5, #0]
 80205aa:	6823      	ldr	r3, [r4, #0]
 80205ac:	881a      	ldrh	r2, [r3, #0]
 80205ae:	3a30      	subs	r2, #48	; 0x30
 80205b0:	2a09      	cmp	r2, #9
 80205b2:	d8e5      	bhi.n	8020580 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xac>
 80205b4:	3302      	adds	r3, #2
 80205b6:	6023      	str	r3, [r4, #0]
 80205b8:	e7f7      	b.n	80205aa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd6>

080205ba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>:
 80205ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80205be:	b0a2      	sub	sp, #136	; 0x88
 80205c0:	2500      	movs	r5, #0
 80205c2:	4606      	mov	r6, r0
 80205c4:	460f      	mov	r7, r1
 80205c6:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 80205ca:	9209      	str	r2, [sp, #36]	; 0x24
 80205cc:	4629      	mov	r1, r5
 80205ce:	2242      	movs	r2, #66	; 0x42
 80205d0:	4640      	mov	r0, r8
 80205d2:	461c      	mov	r4, r3
 80205d4:	950d      	str	r5, [sp, #52]	; 0x34
 80205d6:	f7fe fdec 	bl	801f1b2 <_ZN8touchgfx6memsetEPvhm>
 80205da:	b30e      	cbz	r6, 8020620 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 80205dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80205de:	b1f3      	cbz	r3, 802061e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x64>
 80205e0:	f107 3aff 	add.w	sl, r7, #4294967295
 80205e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80205e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80205e8:	8812      	ldrh	r2, [r2, #0]
 80205ea:	2a00      	cmp	r2, #0
 80205ec:	f000 80b3 	beq.w	8020756 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 80205f0:	459a      	cmp	sl, r3
 80205f2:	f340 80b0 	ble.w	8020756 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 80205f6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80205fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80205fc:	f8b9 2000 	ldrh.w	r2, [r9]
 8020600:	2a00      	cmp	r2, #0
 8020602:	d0ef      	beq.n	80205e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 8020604:	2a25      	cmp	r2, #37	; 0x25
 8020606:	f000 80aa 	beq.w	802075e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1a4>
 802060a:	459a      	cmp	sl, r3
 802060c:	ddea      	ble.n	80205e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 802060e:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 8020612:	f109 0202 	add.w	r2, r9, #2
 8020616:	3301      	adds	r3, #1
 8020618:	9209      	str	r2, [sp, #36]	; 0x24
 802061a:	930d      	str	r3, [sp, #52]	; 0x34
 802061c:	e7eb      	b.n	80205f6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x3c>
 802061e:	8033      	strh	r3, [r6, #0]
 8020620:	4630      	mov	r0, r6
 8020622:	b022      	add	sp, #136	; 0x88
 8020624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020628:	3b63      	subs	r3, #99	; 0x63
 802062a:	2b01      	cmp	r3, #1
 802062c:	f200 80df 	bhi.w	80207ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 8020630:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8020634:	8813      	ldrh	r3, [r2, #0]
 8020636:	2b69      	cmp	r3, #105	; 0x69
 8020638:	d058      	beq.n	80206ec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 802063a:	d81b      	bhi.n	8020674 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xba>
 802063c:	2b63      	cmp	r3, #99	; 0x63
 802063e:	d02e      	beq.n	802069e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xe4>
 8020640:	2b64      	cmp	r3, #100	; 0x64
 8020642:	d053      	beq.n	80206ec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 8020644:	2b58      	cmp	r3, #88	; 0x58
 8020646:	d06f      	beq.n	8020728 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x16e>
 8020648:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 802064c:	46a1      	mov	r9, r4
 802064e:	e02d      	b.n	80206ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 8020650:	2b73      	cmp	r3, #115	; 0x73
 8020652:	d0ed      	beq.n	8020630 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 8020654:	d803      	bhi.n	802065e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xa4>
 8020656:	2b6f      	cmp	r3, #111	; 0x6f
 8020658:	f040 80c9 	bne.w	80207ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 802065c:	e7e8      	b.n	8020630 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 802065e:	2b75      	cmp	r3, #117	; 0x75
 8020660:	d0e6      	beq.n	8020630 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 8020662:	2b78      	cmp	r3, #120	; 0x78
 8020664:	e7f8      	b.n	8020658 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x9e>
 8020666:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020668:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 802066c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802066e:	3302      	adds	r3, #2
 8020670:	9309      	str	r3, [sp, #36]	; 0x24
 8020672:	e7b7      	b.n	80205e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 8020674:	2b73      	cmp	r3, #115	; 0x73
 8020676:	d034      	beq.n	80206e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x128>
 8020678:	d807      	bhi.n	802068a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xd0>
 802067a:	2b6f      	cmp	r3, #111	; 0x6f
 802067c:	d1e4      	bne.n	8020648 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 802067e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020680:	f104 0904 	add.w	r9, r4, #4
 8020684:	2308      	movs	r3, #8
 8020686:	1aba      	subs	r2, r7, r2
 8020688:	e048      	b.n	802071c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 802068a:	2b75      	cmp	r3, #117	; 0x75
 802068c:	d041      	beq.n	8020712 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x158>
 802068e:	2b78      	cmp	r3, #120	; 0x78
 8020690:	d1da      	bne.n	8020648 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 8020692:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020694:	f104 0904 	add.w	r9, r4, #4
 8020698:	2310      	movs	r3, #16
 802069a:	1aba      	subs	r2, r7, r2
 802069c:	e03e      	b.n	802071c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 802069e:	7823      	ldrb	r3, [r4, #0]
 80206a0:	f104 0904 	add.w	r9, r4, #4
 80206a4:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 80206a8:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 80206ac:	aa0d      	add	r2, sp, #52	; 0x34
 80206ae:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 80206b2:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 80206b6:	a810      	add	r0, sp, #64	; 0x40
 80206b8:	9205      	str	r2, [sp, #20]
 80206ba:	464c      	mov	r4, r9
 80206bc:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 80206c0:	9204      	str	r2, [sp, #16]
 80206c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80206c4:	9203      	str	r2, [sp, #12]
 80206c6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 80206ca:	9202      	str	r2, [sp, #8]
 80206cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80206ce:	9201      	str	r2, [sp, #4]
 80206d0:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 80206d4:	e9cd 7606 	strd	r7, r6, [sp, #24]
 80206d8:	9200      	str	r2, [sp, #0]
 80206da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80206dc:	f7ff fe4a 	bl	8020374 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 80206e0:	e7c4      	b.n	802066c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
 80206e2:	f104 0904 	add.w	r9, r4, #4
 80206e6:	6823      	ldr	r3, [r4, #0]
 80206e8:	9310      	str	r3, [sp, #64]	; 0x40
 80206ea:	e7df      	b.n	80206ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 80206ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80206ee:	230a      	movs	r3, #10
 80206f0:	4641      	mov	r1, r8
 80206f2:	6820      	ldr	r0, [r4, #0]
 80206f4:	1aba      	subs	r2, r7, r2
 80206f6:	f104 0904 	add.w	r9, r4, #4
 80206fa:	b292      	uxth	r2, r2
 80206fc:	f7ff fdf9 	bl	80202f2 <_ZN8touchgfx7Unicode4itoaElPtti>
 8020700:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8020704:	2b2d      	cmp	r3, #45	; 0x2d
 8020706:	d1d1      	bne.n	80206ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 8020708:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 802070c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802070e:	3302      	adds	r3, #2
 8020710:	e7ea      	b.n	80206e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x12e>
 8020712:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020714:	f104 0904 	add.w	r9, r4, #4
 8020718:	230a      	movs	r3, #10
 802071a:	1aba      	subs	r2, r7, r2
 802071c:	b292      	uxth	r2, r2
 802071e:	4641      	mov	r1, r8
 8020720:	6820      	ldr	r0, [r4, #0]
 8020722:	f7ff fdc8 	bl	80202b6 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 8020726:	e7c1      	b.n	80206ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 8020728:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802072a:	2310      	movs	r3, #16
 802072c:	4641      	mov	r1, r8
 802072e:	6820      	ldr	r0, [r4, #0]
 8020730:	1aba      	subs	r2, r7, r2
 8020732:	f104 0904 	add.w	r9, r4, #4
 8020736:	b292      	uxth	r2, r2
 8020738:	f7ff fdbd 	bl	80202b6 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 802073c:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 8020740:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8020744:	2b00      	cmp	r3, #0
 8020746:	d0b1      	beq.n	80206ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 8020748:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 802074c:	2919      	cmp	r1, #25
 802074e:	d8f7      	bhi.n	8020740 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 8020750:	3b20      	subs	r3, #32
 8020752:	8013      	strh	r3, [r2, #0]
 8020754:	e7f4      	b.n	8020740 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 8020756:	2200      	movs	r2, #0
 8020758:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 802075c:	e760      	b.n	8020620 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 802075e:	459a      	cmp	sl, r3
 8020760:	f77f af40 	ble.w	80205e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 8020764:	f109 0302 	add.w	r3, r9, #2
 8020768:	f10d 022d 	add.w	r2, sp, #45	; 0x2d
 802076c:	f10d 0132 	add.w	r1, sp, #50	; 0x32
 8020770:	a809      	add	r0, sp, #36	; 0x24
 8020772:	9309      	str	r3, [sp, #36]	; 0x24
 8020774:	ab0f      	add	r3, sp, #60	; 0x3c
 8020776:	f8ad 5032 	strh.w	r5, [sp, #50]	; 0x32
 802077a:	9304      	str	r3, [sp, #16]
 802077c:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 8020780:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
 8020784:	9303      	str	r3, [sp, #12]
 8020786:	ab0e      	add	r3, sp, #56	; 0x38
 8020788:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
 802078c:	9302      	str	r3, [sp, #8]
 802078e:	ab0c      	add	r3, sp, #48	; 0x30
 8020790:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
 8020794:	9301      	str	r3, [sp, #4]
 8020796:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 802079a:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
 802079e:	9300      	str	r3, [sp, #0]
 80207a0:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 80207a4:	950e      	str	r5, [sp, #56]	; 0x38
 80207a6:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
 80207aa:	950f      	str	r5, [sp, #60]	; 0x3c
 80207ac:	f7ff fe92 	bl	80204d4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 80207b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80207b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80207b4:	2b00      	cmp	r3, #0
 80207b6:	bfbf      	itttt	lt
 80207b8:	6823      	ldrlt	r3, [r4, #0]
 80207ba:	3404      	addlt	r4, #4
 80207bc:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 80207c0:	930e      	strlt	r3, [sp, #56]	; 0x38
 80207c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80207c4:	2b00      	cmp	r3, #0
 80207c6:	bfbf      	itttt	lt
 80207c8:	6823      	ldrlt	r3, [r4, #0]
 80207ca:	3404      	addlt	r4, #4
 80207cc:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 80207d0:	930f      	strlt	r3, [sp, #60]	; 0x3c
 80207d2:	8813      	ldrh	r3, [r2, #0]
 80207d4:	2b69      	cmp	r3, #105	; 0x69
 80207d6:	f43f af2b 	beq.w	8020630 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 80207da:	f63f af39 	bhi.w	8020650 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x96>
 80207de:	2b58      	cmp	r3, #88	; 0x58
 80207e0:	f43f af26 	beq.w	8020630 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 80207e4:	f63f af20 	bhi.w	8020628 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x6e>
 80207e8:	2b25      	cmp	r3, #37	; 0x25
 80207ea:	f43f af3c 	beq.w	8020666 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xac>
 80207ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80207f0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80207f4:	f8b9 2000 	ldrh.w	r2, [r9]
 80207f8:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 80207fc:	3301      	adds	r3, #1
 80207fe:	930d      	str	r3, [sp, #52]	; 0x34
 8020800:	e734      	b.n	802066c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
	...

08020804 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 8020804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020806:	4605      	mov	r5, r0
 8020808:	b0a1      	sub	sp, #132	; 0x84
 802080a:	4610      	mov	r0, r2
 802080c:	460e      	mov	r6, r1
 802080e:	4614      	mov	r4, r2
 8020810:	461f      	mov	r7, r3
 8020812:	f7ff fd33 	bl	802027c <_ZN8touchgfx7Unicode6strlenEPKc>
 8020816:	283f      	cmp	r0, #63	; 0x3f
 8020818:	d906      	bls.n	8020828 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x24>
 802081a:	4b0a      	ldr	r3, [pc, #40]	; (8020844 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x40>)
 802081c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8020820:	4a09      	ldr	r2, [pc, #36]	; (8020848 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x44>)
 8020822:	480a      	ldr	r0, [pc, #40]	; (802084c <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x48>)
 8020824:	f009 ffac 	bl	802a780 <__assert_func>
 8020828:	4621      	mov	r1, r4
 802082a:	2240      	movs	r2, #64	; 0x40
 802082c:	4668      	mov	r0, sp
 802082e:	f7ff fd31 	bl	8020294 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8020832:	463b      	mov	r3, r7
 8020834:	466a      	mov	r2, sp
 8020836:	4631      	mov	r1, r6
 8020838:	4628      	mov	r0, r5
 802083a:	f7ff febe 	bl	80205ba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>
 802083e:	b021      	add	sp, #132	; 0x84
 8020840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020842:	bf00      	nop
 8020844:	0802f6e1 	.word	0x0802f6e1
 8020848:	0802f7b3 	.word	0x0802f7b3
 802084c:	0802f6fe 	.word	0x0802f6fe

08020850 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 8020850:	b40c      	push	{r2, r3}
 8020852:	b507      	push	{r0, r1, r2, lr}
 8020854:	ab04      	add	r3, sp, #16
 8020856:	f853 2b04 	ldr.w	r2, [r3], #4
 802085a:	9301      	str	r3, [sp, #4]
 802085c:	f7ff ffd2 	bl	8020804 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 8020860:	b003      	add	sp, #12
 8020862:	f85d eb04 	ldr.w	lr, [sp], #4
 8020866:	b002      	add	sp, #8
 8020868:	4770      	bx	lr
	...

0802086c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf>:
 802086c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020870:	b0c3      	sub	sp, #268	; 0x10c
 8020872:	2400      	movs	r4, #0
 8020874:	4606      	mov	r6, r0
 8020876:	4689      	mov	r9, r1
 8020878:	af10      	add	r7, sp, #64	; 0x40
 802087a:	9209      	str	r2, [sp, #36]	; 0x24
 802087c:	4621      	mov	r1, r4
 802087e:	22c8      	movs	r2, #200	; 0xc8
 8020880:	4638      	mov	r0, r7
 8020882:	469a      	mov	sl, r3
 8020884:	940c      	str	r4, [sp, #48]	; 0x30
 8020886:	f7fe fc94 	bl	801f1b2 <_ZN8touchgfx6memsetEPvhm>
 802088a:	b116      	cbz	r6, 8020892 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x26>
 802088c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802088e:	b923      	cbnz	r3, 802089a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x2e>
 8020890:	8033      	strh	r3, [r6, #0]
 8020892:	4630      	mov	r0, r6
 8020894:	b043      	add	sp, #268	; 0x10c
 8020896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802089a:	f109 3bff 	add.w	fp, r9, #4294967295
 802089e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80208a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80208a2:	8812      	ldrh	r2, [r2, #0]
 80208a4:	2a00      	cmp	r2, #0
 80208a6:	f000 80d1 	beq.w	8020a4c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e0>
 80208aa:	459b      	cmp	fp, r3
 80208ac:	f340 80ce 	ble.w	8020a4c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e0>
 80208b0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80208b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80208b4:	882a      	ldrh	r2, [r5, #0]
 80208b6:	2a00      	cmp	r2, #0
 80208b8:	d0f1      	beq.n	802089e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 80208ba:	2a25      	cmp	r2, #37	; 0x25
 80208bc:	f000 80ca 	beq.w	8020a54 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e8>
 80208c0:	459b      	cmp	fp, r3
 80208c2:	ddec      	ble.n	802089e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 80208c4:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 80208c8:	3502      	adds	r5, #2
 80208ca:	3301      	adds	r3, #1
 80208cc:	9509      	str	r5, [sp, #36]	; 0x24
 80208ce:	930c      	str	r3, [sp, #48]	; 0x30
 80208d0:	e7ee      	b.n	80208b0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x44>
 80208d2:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 80208d6:	3202      	adds	r2, #2
 80208d8:	920c      	str	r2, [sp, #48]	; 0x30
 80208da:	e0ac      	b.n	8020a36 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1ca>
 80208dc:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 80208e0:	970f      	str	r7, [sp, #60]	; 0x3c
 80208e2:	3401      	adds	r4, #1
 80208e4:	edd3 7a00 	vldr	s15, [r3]
 80208e8:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 80208ec:	b923      	cbnz	r3, 80208f8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x8c>
 80208ee:	2301      	movs	r3, #1
 80208f0:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 80208f4:	2303      	movs	r3, #3
 80208f6:	930e      	str	r3, [sp, #56]	; 0x38
 80208f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80208fc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80208fe:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8020902:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8020b00 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x294>
 8020906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802090a:	bf42      	ittt	mi
 802090c:	232d      	movmi	r3, #45	; 0x2d
 802090e:	eef1 7a67 	vnegmi.f32	s15, s15
 8020912:	f8ad 302e 	strhmi.w	r3, [sp, #46]	; 0x2e
 8020916:	2300      	movs	r3, #0
 8020918:	4298      	cmp	r0, r3
 802091a:	dd03      	ble.n	8020924 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xb8>
 802091c:	ee87 7a06 	vdiv.f32	s14, s14, s12
 8020920:	3301      	adds	r3, #1
 8020922:	e7f9      	b.n	8020918 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xac>
 8020924:	ee77 7a87 	vadd.f32	s15, s15, s14
 8020928:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802092c:	eeb0 7a67 	vmov.f32	s14, s15
 8020930:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8020934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020938:	da26      	bge.n	8020988 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x11c>
 802093a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 802093e:	eba9 0202 	sub.w	r2, r9, r2
 8020942:	2100      	movs	r1, #0
 8020944:	eef4 6ae5 	vcmpe.f32	s13, s11
 8020948:	b28d      	uxth	r5, r1
 802094a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802094e:	db21      	blt.n	8020994 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x128>
 8020950:	1a53      	subs	r3, r2, r1
 8020952:	2b00      	cmp	r3, #0
 8020954:	dd1e      	ble.n	8020994 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x128>
 8020956:	2963      	cmp	r1, #99	; 0x63
 8020958:	d01b      	beq.n	8020992 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x126>
 802095a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 802095e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8020962:	ee17 3a10 	vmov	r3, s14
 8020966:	2b09      	cmp	r3, #9
 8020968:	bfa8      	it	ge
 802096a:	2309      	movge	r3, #9
 802096c:	ee07 3a10 	vmov	s14, r3
 8020970:	f103 0530 	add.w	r5, r3, #48	; 0x30
 8020974:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8020978:	f827 5011 	strh.w	r5, [r7, r1, lsl #1]
 802097c:	3101      	adds	r1, #1
 802097e:	eee7 7a66 	vfms.f32	s15, s14, s13
 8020982:	eec6 6a86 	vdiv.f32	s13, s13, s12
 8020986:	e7dd      	b.n	8020944 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xd8>
 8020988:	ee66 6a86 	vmul.f32	s13, s13, s12
 802098c:	ee87 7a06 	vdiv.f32	s14, s14, s12
 8020990:	e7ce      	b.n	8020930 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xc4>
 8020992:	460d      	mov	r5, r1
 8020994:	2a63      	cmp	r2, #99	; 0x63
 8020996:	bfd4      	ite	le
 8020998:	ebc5 0202 	rsble	r2, r5, r2
 802099c:	f1c5 0263 	rsbgt	r2, r5, #99	; 0x63
 80209a0:	2a00      	cmp	r2, #0
 80209a2:	dd4e      	ble.n	8020a42 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1d6>
 80209a4:	4603      	mov	r3, r0
 80209a6:	f04f 0801 	mov.w	r8, #1
 80209aa:	2b00      	cmp	r3, #0
 80209ac:	dd0e      	ble.n	80209cc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x160>
 80209ae:	ee67 7a86 	vmul.f32	s15, s15, s12
 80209b2:	210a      	movs	r1, #10
 80209b4:	3b01      	subs	r3, #1
 80209b6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80209ba:	ee17 ca10 	vmov	ip, s14
 80209be:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80209c2:	fb01 c808 	mla	r8, r1, r8, ip
 80209c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80209ca:	e7ee      	b.n	80209aa <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x13e>
 80209cc:	2800      	cmp	r0, #0
 80209ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80209d2:	ea4f 0545 	mov.w	r5, r5, lsl #1
 80209d6:	bfac      	ite	ge
 80209d8:	1a18      	subge	r0, r3, r0
 80209da:	4618      	movlt	r0, r3
 80209dc:	b292      	uxth	r2, r2
 80209de:	230a      	movs	r3, #10
 80209e0:	900e      	str	r0, [sp, #56]	; 0x38
 80209e2:	1979      	adds	r1, r7, r5
 80209e4:	4640      	mov	r0, r8
 80209e6:	f7ff fc84 	bl	80202f2 <_ZN8touchgfx7Unicode4itoaElPtti>
 80209ea:	f1b8 0f01 	cmp.w	r8, #1
 80209ee:	dc26      	bgt.n	8020a3e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1d2>
 80209f0:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 80209f4:	2b00      	cmp	r3, #0
 80209f6:	bf0c      	ite	eq
 80209f8:	2300      	moveq	r3, #0
 80209fa:	232e      	movne	r3, #46	; 0x2e
 80209fc:	aa42      	add	r2, sp, #264	; 0x108
 80209fe:	4415      	add	r5, r2
 8020a00:	aa0c      	add	r2, sp, #48	; 0x30
 8020a02:	f825 3cc8 	strh.w	r3, [r5, #-200]
 8020a06:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8020a0a:	a80f      	add	r0, sp, #60	; 0x3c
 8020a0c:	9205      	str	r2, [sp, #20]
 8020a0e:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 8020a12:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8020a16:	9204      	str	r2, [sp, #16]
 8020a18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020a1a:	9203      	str	r2, [sp, #12]
 8020a1c:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 8020a20:	9202      	str	r2, [sp, #8]
 8020a22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020a24:	9201      	str	r2, [sp, #4]
 8020a26:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
 8020a2a:	e9cd 9606 	strd	r9, r6, [sp, #24]
 8020a2e:	9200      	str	r2, [sp, #0]
 8020a30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020a32:	f7ff fc9f 	bl	8020374 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 8020a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020a38:	3302      	adds	r3, #2
 8020a3a:	9309      	str	r3, [sp, #36]	; 0x24
 8020a3c:	e72f      	b.n	802089e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 8020a3e:	232e      	movs	r3, #46	; 0x2e
 8020a40:	e7dc      	b.n	80209fc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x190>
 8020a42:	ab42      	add	r3, sp, #264	; 0x108
 8020a44:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8020a48:	2300      	movs	r3, #0
 8020a4a:	e7d9      	b.n	8020a00 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x194>
 8020a4c:	2200      	movs	r2, #0
 8020a4e:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 8020a52:	e71e      	b.n	8020892 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x26>
 8020a54:	459b      	cmp	fp, r3
 8020a56:	f77f af22 	ble.w	802089e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 8020a5a:	2300      	movs	r3, #0
 8020a5c:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 8020a60:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 8020a64:	a809      	add	r0, sp, #36	; 0x24
 8020a66:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8020a6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8020a6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8020a72:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8020a76:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8020a7a:	930d      	str	r3, [sp, #52]	; 0x34
 8020a7c:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 8020a80:	930e      	str	r3, [sp, #56]	; 0x38
 8020a82:	1cab      	adds	r3, r5, #2
 8020a84:	9309      	str	r3, [sp, #36]	; 0x24
 8020a86:	ab0e      	add	r3, sp, #56	; 0x38
 8020a88:	9304      	str	r3, [sp, #16]
 8020a8a:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 8020a8e:	9303      	str	r3, [sp, #12]
 8020a90:	ab0d      	add	r3, sp, #52	; 0x34
 8020a92:	9302      	str	r3, [sp, #8]
 8020a94:	ab0b      	add	r3, sp, #44	; 0x2c
 8020a96:	9301      	str	r3, [sp, #4]
 8020a98:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 8020a9c:	9300      	str	r3, [sp, #0]
 8020a9e:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 8020aa2:	f7ff fd17 	bl	80204d4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 8020aa6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020aa8:	2b00      	cmp	r3, #0
 8020aaa:	da0b      	bge.n	8020ac4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x258>
 8020aac:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 8020ab0:	3401      	adds	r4, #1
 8020ab2:	edd3 7a00 	vldr	s15, [r3]
 8020ab6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020aba:	ee17 3a90 	vmov	r3, s15
 8020abe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020ac2:	930d      	str	r3, [sp, #52]	; 0x34
 8020ac4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020ac6:	2b00      	cmp	r3, #0
 8020ac8:	da0b      	bge.n	8020ae2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x276>
 8020aca:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 8020ace:	3401      	adds	r4, #1
 8020ad0:	edd3 7a00 	vldr	s15, [r3]
 8020ad4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020ad8:	ee17 3a90 	vmov	r3, s15
 8020adc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020ae0:	930e      	str	r3, [sp, #56]	; 0x38
 8020ae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020ae4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020ae6:	881b      	ldrh	r3, [r3, #0]
 8020ae8:	2b25      	cmp	r3, #37	; 0x25
 8020aea:	f43f aef2 	beq.w	80208d2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x66>
 8020aee:	2b66      	cmp	r3, #102	; 0x66
 8020af0:	f43f aef4 	beq.w	80208dc <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x70>
 8020af4:	9509      	str	r5, [sp, #36]	; 0x24
 8020af6:	882b      	ldrh	r3, [r5, #0]
 8020af8:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 8020afc:	3201      	adds	r2, #1
 8020afe:	e6eb      	b.n	80208d8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x6c>
 8020b00:	3f000002 	.word	0x3f000002

08020b04 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>:
 8020b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020b06:	4605      	mov	r5, r0
 8020b08:	b0a1      	sub	sp, #132	; 0x84
 8020b0a:	4610      	mov	r0, r2
 8020b0c:	460e      	mov	r6, r1
 8020b0e:	4614      	mov	r4, r2
 8020b10:	461f      	mov	r7, r3
 8020b12:	f7ff fbb3 	bl	802027c <_ZN8touchgfx7Unicode6strlenEPKc>
 8020b16:	283f      	cmp	r0, #63	; 0x3f
 8020b18:	d906      	bls.n	8020b28 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x24>
 8020b1a:	4b0a      	ldr	r3, [pc, #40]	; (8020b44 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x40>)
 8020b1c:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 8020b20:	4a09      	ldr	r2, [pc, #36]	; (8020b48 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x44>)
 8020b22:	480a      	ldr	r0, [pc, #40]	; (8020b4c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x48>)
 8020b24:	f009 fe2c 	bl	802a780 <__assert_func>
 8020b28:	4621      	mov	r1, r4
 8020b2a:	2240      	movs	r2, #64	; 0x40
 8020b2c:	4668      	mov	r0, sp
 8020b2e:	f7ff fbb1 	bl	8020294 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8020b32:	463b      	mov	r3, r7
 8020b34:	466a      	mov	r2, sp
 8020b36:	4631      	mov	r1, r6
 8020b38:	4628      	mov	r0, r5
 8020b3a:	f7ff fe97 	bl	802086c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf>
 8020b3e:	b021      	add	sp, #132	; 0x84
 8020b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020b42:	bf00      	nop
 8020b44:	0802f6e1 	.word	0x0802f6e1
 8020b48:	0802f724 	.word	0x0802f724
 8020b4c:	0802f6fe 	.word	0x0802f6fe

08020b50 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8020b50:	4b01      	ldr	r3, [pc, #4]	; (8020b58 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8020b52:	6018      	str	r0, [r3, #0]
 8020b54:	4770      	bx	lr
 8020b56:	bf00      	nop
 8020b58:	2000c008 	.word	0x2000c008

08020b5c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8020b5c:	4b07      	ldr	r3, [pc, #28]	; (8020b7c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x20>)
 8020b5e:	881a      	ldrh	r2, [r3, #0]
 8020b60:	4282      	cmp	r2, r0
 8020b62:	d809      	bhi.n	8020b78 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 8020b64:	4b06      	ldr	r3, [pc, #24]	; (8020b80 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 8020b66:	881b      	ldrh	r3, [r3, #0]
 8020b68:	4413      	add	r3, r2
 8020b6a:	4298      	cmp	r0, r3
 8020b6c:	da04      	bge.n	8020b78 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 8020b6e:	4b05      	ldr	r3, [pc, #20]	; (8020b84 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 8020b70:	681b      	ldr	r3, [r3, #0]
 8020b72:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8020b76:	4770      	bx	lr
 8020b78:	2000      	movs	r0, #0
 8020b7a:	4770      	bx	lr
 8020b7c:	2000c028 	.word	0x2000c028
 8020b80:	2000c02c 	.word	0x2000c02c
 8020b84:	2000c00c 	.word	0x2000c00c

08020b88 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8020b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020b8c:	4d26      	ldr	r5, [pc, #152]	; (8020c28 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8020b8e:	682b      	ldr	r3, [r5, #0]
 8020b90:	2b00      	cmp	r3, #0
 8020b92:	d046      	beq.n	8020c22 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 8020b94:	4a25      	ldr	r2, [pc, #148]	; (8020c2c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8020b96:	4f26      	ldr	r7, [pc, #152]	; (8020c30 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8020b98:	8810      	ldrh	r0, [r2, #0]
 8020b9a:	883c      	ldrh	r4, [r7, #0]
 8020b9c:	4e25      	ldr	r6, [pc, #148]	; (8020c34 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8020b9e:	4420      	add	r0, r4
 8020ba0:	1c42      	adds	r2, r0, #1
 8020ba2:	ea4f 0880 	mov.w	r8, r0, lsl #2
 8020ba6:	f022 0201 	bic.w	r2, r2, #1
 8020baa:	0412      	lsls	r2, r2, #16
 8020bac:	0c12      	lsrs	r2, r2, #16
 8020bae:	0051      	lsls	r1, r2, #1
 8020bb0:	220e      	movs	r2, #14
 8020bb2:	eb08 0e01 	add.w	lr, r8, r1
 8020bb6:	fb02 fc04 	mul.w	ip, r2, r4
 8020bba:	eb03 0208 	add.w	r2, r3, r8
 8020bbe:	4c1e      	ldr	r4, [pc, #120]	; (8020c38 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8020bc0:	6022      	str	r2, [r4, #0]
 8020bc2:	eb03 020e 	add.w	r2, r3, lr
 8020bc6:	44e6      	add	lr, ip
 8020bc8:	6032      	str	r2, [r6, #0]
 8020bca:	4473      	add	r3, lr
 8020bcc:	4a1b      	ldr	r2, [pc, #108]	; (8020c3c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8020bce:	6013      	str	r3, [r2, #0]
 8020bd0:	2300      	movs	r3, #0
 8020bd2:	4a1b      	ldr	r2, [pc, #108]	; (8020c40 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8020bd4:	8013      	strh	r3, [r2, #0]
 8020bd6:	4a1b      	ldr	r2, [pc, #108]	; (8020c44 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 8020bd8:	6812      	ldr	r2, [r2, #0]
 8020bda:	eba2 0208 	sub.w	r2, r2, r8
 8020bde:	1a52      	subs	r2, r2, r1
 8020be0:	4919      	ldr	r1, [pc, #100]	; (8020c48 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 8020be2:	eba2 020c 	sub.w	r2, r2, ip
 8020be6:	469c      	mov	ip, r3
 8020be8:	600a      	str	r2, [r1, #0]
 8020bea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8020bee:	4a17      	ldr	r2, [pc, #92]	; (8020c4c <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 8020bf0:	8013      	strh	r3, [r2, #0]
 8020bf2:	4283      	cmp	r3, r0
 8020bf4:	d10d      	bne.n	8020c12 <_ZN8touchgfx6Bitmap10clearCacheEv+0x8a>
 8020bf6:	883d      	ldrh	r5, [r7, #0]
 8020bf8:	2300      	movs	r3, #0
 8020bfa:	6830      	ldr	r0, [r6, #0]
 8020bfc:	240e      	movs	r4, #14
 8020bfe:	429d      	cmp	r5, r3
 8020c00:	d90f      	bls.n	8020c22 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 8020c02:	fb04 0203 	mla	r2, r4, r3, r0
 8020c06:	3301      	adds	r3, #1
 8020c08:	7b11      	ldrb	r1, [r2, #12]
 8020c0a:	f36f 1145 	bfc	r1, #5, #1
 8020c0e:	7311      	strb	r1, [r2, #12]
 8020c10:	e7f5      	b.n	8020bfe <_ZN8touchgfx6Bitmap10clearCacheEv+0x76>
 8020c12:	682a      	ldr	r2, [r5, #0]
 8020c14:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8020c18:	6822      	ldr	r2, [r4, #0]
 8020c1a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8020c1e:	3301      	adds	r3, #1
 8020c20:	e7e7      	b.n	8020bf2 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6a>
 8020c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020c26:	bf00      	nop
 8020c28:	2000c00c 	.word	0x2000c00c
 8020c2c:	2000c028 	.word	0x2000c028
 8020c30:	2000c02c 	.word	0x2000c02c
 8020c34:	2000c010 	.word	0x2000c010
 8020c38:	2000c020 	.word	0x2000c020
 8020c3c:	2000c018 	.word	0x2000c018
 8020c40:	2000c02a 	.word	0x2000c02a
 8020c44:	2000c014 	.word	0x2000c014
 8020c48:	2000c024 	.word	0x2000c024
 8020c4c:	2000c01c 	.word	0x2000c01c

08020c50 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8020c50:	4b10      	ldr	r3, [pc, #64]	; (8020c94 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 8020c52:	b510      	push	{r4, lr}
 8020c54:	681b      	ldr	r3, [r3, #0]
 8020c56:	b9db      	cbnz	r3, 8020c90 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8020c58:	b1d1      	cbz	r1, 8020c90 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8020c5a:	4b0f      	ldr	r3, [pc, #60]	; (8020c98 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 8020c5c:	240e      	movs	r4, #14
 8020c5e:	801a      	strh	r2, [r3, #0]
 8020c60:	b292      	uxth	r2, r2
 8020c62:	4b0e      	ldr	r3, [pc, #56]	; (8020c9c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 8020c64:	881b      	ldrh	r3, [r3, #0]
 8020c66:	4413      	add	r3, r2
 8020c68:	4362      	muls	r2, r4
 8020c6a:	2406      	movs	r4, #6
 8020c6c:	fb04 2203 	mla	r2, r4, r3, r2
 8020c70:	428a      	cmp	r2, r1
 8020c72:	d305      	bcc.n	8020c80 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 8020c74:	4b0a      	ldr	r3, [pc, #40]	; (8020ca0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 8020c76:	2137      	movs	r1, #55	; 0x37
 8020c78:	4a0a      	ldr	r2, [pc, #40]	; (8020ca4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 8020c7a:	480b      	ldr	r0, [pc, #44]	; (8020ca8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 8020c7c:	f009 fd80 	bl	802a780 <__assert_func>
 8020c80:	4b0a      	ldr	r3, [pc, #40]	; (8020cac <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 8020c82:	6019      	str	r1, [r3, #0]
 8020c84:	4b0a      	ldr	r3, [pc, #40]	; (8020cb0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 8020c86:	6018      	str	r0, [r3, #0]
 8020c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020c8c:	f7ff bf7c 	b.w	8020b88 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8020c90:	bd10      	pop	{r4, pc}
 8020c92:	bf00      	nop
 8020c94:	2000c018 	.word	0x2000c018
 8020c98:	2000c02c 	.word	0x2000c02c
 8020c9c:	2000c028 	.word	0x2000c028
 8020ca0:	0802f895 	.word	0x0802f895
 8020ca4:	0802f8ee 	.word	0x0802f8ee
 8020ca8:	0802f870 	.word	0x0802f870
 8020cac:	2000c014 	.word	0x2000c014
 8020cb0:	2000c00c 	.word	0x2000c00c

08020cb4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8020cb4:	b470      	push	{r4, r5, r6}
 8020cb6:	4c07      	ldr	r4, [pc, #28]	; (8020cd4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8020cb8:	4605      	mov	r5, r0
 8020cba:	4610      	mov	r0, r2
 8020cbc:	9a03      	ldr	r2, [sp, #12]
 8020cbe:	6826      	ldr	r6, [r4, #0]
 8020cc0:	b936      	cbnz	r6, 8020cd0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8020cc2:	6025      	str	r5, [r4, #0]
 8020cc4:	4c04      	ldr	r4, [pc, #16]	; (8020cd8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8020cc6:	8021      	strh	r1, [r4, #0]
 8020cc8:	4619      	mov	r1, r3
 8020cca:	bc70      	pop	{r4, r5, r6}
 8020ccc:	f7ff bfc0 	b.w	8020c50 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8020cd0:	bc70      	pop	{r4, r5, r6}
 8020cd2:	4770      	bx	lr
 8020cd4:	2000c030 	.word	0x2000c030
 8020cd8:	2000c028 	.word	0x2000c028

08020cdc <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8020cdc:	b508      	push	{r3, lr}
 8020cde:	4b14      	ldr	r3, [pc, #80]	; (8020d30 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8020ce0:	6819      	ldr	r1, [r3, #0]
 8020ce2:	b931      	cbnz	r1, 8020cf2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 8020ce4:	4b13      	ldr	r3, [pc, #76]	; (8020d34 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8020ce6:	f240 21e6 	movw	r1, #742	; 0x2e6
 8020cea:	4a13      	ldr	r2, [pc, #76]	; (8020d38 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8020cec:	4813      	ldr	r0, [pc, #76]	; (8020d3c <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8020cee:	f009 fd47 	bl	802a780 <__assert_func>
 8020cf2:	4a13      	ldr	r2, [pc, #76]	; (8020d40 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8020cf4:	8803      	ldrh	r3, [r0, #0]
 8020cf6:	8812      	ldrh	r2, [r2, #0]
 8020cf8:	4293      	cmp	r3, r2
 8020cfa:	d204      	bcs.n	8020d06 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 8020cfc:	2214      	movs	r2, #20
 8020cfe:	fb02 1303 	mla	r3, r2, r3, r1
 8020d02:	8918      	ldrh	r0, [r3, #8]
 8020d04:	bd08      	pop	{r3, pc}
 8020d06:	490f      	ldr	r1, [pc, #60]	; (8020d44 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 8020d08:	8809      	ldrh	r1, [r1, #0]
 8020d0a:	4411      	add	r1, r2
 8020d0c:	428b      	cmp	r3, r1
 8020d0e:	da06      	bge.n	8020d1e <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 8020d10:	1a9b      	subs	r3, r3, r2
 8020d12:	4a0d      	ldr	r2, [pc, #52]	; (8020d48 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 8020d14:	210e      	movs	r1, #14
 8020d16:	6812      	ldr	r2, [r2, #0]
 8020d18:	fb01 2303 	mla	r3, r1, r3, r2
 8020d1c:	e7f1      	b.n	8020d02 <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 8020d1e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8020d22:	4293      	cmp	r3, r2
 8020d24:	bf0a      	itet	eq
 8020d26:	4b09      	ldreq	r3, [pc, #36]	; (8020d4c <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 8020d28:	2000      	movne	r0, #0
 8020d2a:	8818      	ldrheq	r0, [r3, #0]
 8020d2c:	e7ea      	b.n	8020d04 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 8020d2e:	bf00      	nop
 8020d30:	2000c030 	.word	0x2000c030
 8020d34:	0802d660 	.word	0x0802d660
 8020d38:	0802f99b 	.word	0x0802f99b
 8020d3c:	0802f870 	.word	0x0802f870
 8020d40:	2000c028 	.word	0x2000c028
 8020d44:	2000c02c 	.word	0x2000c02c
 8020d48:	2000c010 	.word	0x2000c010
 8020d4c:	2000bf5a 	.word	0x2000bf5a

08020d50 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8020d50:	b508      	push	{r3, lr}
 8020d52:	4b14      	ldr	r3, [pc, #80]	; (8020da4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8020d54:	6819      	ldr	r1, [r3, #0]
 8020d56:	b931      	cbnz	r1, 8020d66 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 8020d58:	4b13      	ldr	r3, [pc, #76]	; (8020da8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8020d5a:	f240 21fa 	movw	r1, #762	; 0x2fa
 8020d5e:	4a13      	ldr	r2, [pc, #76]	; (8020dac <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8020d60:	4813      	ldr	r0, [pc, #76]	; (8020db0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8020d62:	f009 fd0d 	bl	802a780 <__assert_func>
 8020d66:	4a13      	ldr	r2, [pc, #76]	; (8020db4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8020d68:	8803      	ldrh	r3, [r0, #0]
 8020d6a:	8812      	ldrh	r2, [r2, #0]
 8020d6c:	4293      	cmp	r3, r2
 8020d6e:	d204      	bcs.n	8020d7a <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 8020d70:	2214      	movs	r2, #20
 8020d72:	fb02 1303 	mla	r3, r2, r3, r1
 8020d76:	8958      	ldrh	r0, [r3, #10]
 8020d78:	bd08      	pop	{r3, pc}
 8020d7a:	490f      	ldr	r1, [pc, #60]	; (8020db8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 8020d7c:	8809      	ldrh	r1, [r1, #0]
 8020d7e:	4411      	add	r1, r2
 8020d80:	428b      	cmp	r3, r1
 8020d82:	da06      	bge.n	8020d92 <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 8020d84:	1a9b      	subs	r3, r3, r2
 8020d86:	4a0d      	ldr	r2, [pc, #52]	; (8020dbc <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 8020d88:	210e      	movs	r1, #14
 8020d8a:	6812      	ldr	r2, [r2, #0]
 8020d8c:	fb01 2303 	mla	r3, r1, r3, r2
 8020d90:	e7f1      	b.n	8020d76 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 8020d92:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8020d96:	4293      	cmp	r3, r2
 8020d98:	bf0a      	itet	eq
 8020d9a:	4b09      	ldreq	r3, [pc, #36]	; (8020dc0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 8020d9c:	2000      	movne	r0, #0
 8020d9e:	8818      	ldrheq	r0, [r3, #0]
 8020da0:	e7ea      	b.n	8020d78 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 8020da2:	bf00      	nop
 8020da4:	2000c030 	.word	0x2000c030
 8020da8:	0802d660 	.word	0x0802d660
 8020dac:	0802f9c7 	.word	0x0802f9c7
 8020db0:	0802f870 	.word	0x0802f870
 8020db4:	2000c028 	.word	0x2000c028
 8020db8:	2000c02c 	.word	0x2000c02c
 8020dbc:	2000c010 	.word	0x2000c010
 8020dc0:	2000bf5c 	.word	0x2000bf5c

08020dc4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8020dc4:	4b23      	ldr	r3, [pc, #140]	; (8020e54 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8020dc6:	b510      	push	{r4, lr}
 8020dc8:	681c      	ldr	r4, [r3, #0]
 8020dca:	b934      	cbnz	r4, 8020dda <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 8020dcc:	4b22      	ldr	r3, [pc, #136]	; (8020e58 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8020dce:	f240 310e 	movw	r1, #782	; 0x30e
 8020dd2:	4a22      	ldr	r2, [pc, #136]	; (8020e5c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 8020dd4:	4822      	ldr	r0, [pc, #136]	; (8020e60 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 8020dd6:	f009 fcd3 	bl	802a780 <__assert_func>
 8020dda:	4a22      	ldr	r2, [pc, #136]	; (8020e64 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8020ddc:	880b      	ldrh	r3, [r1, #0]
 8020dde:	8812      	ldrh	r2, [r2, #0]
 8020de0:	4293      	cmp	r3, r2
 8020de2:	d211      	bcs.n	8020e08 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 8020de4:	2214      	movs	r2, #20
 8020de6:	fb02 4303 	mla	r3, r2, r3, r4
 8020dea:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8020dee:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8020df2:	8a1a      	ldrh	r2, [r3, #16]
 8020df4:	8a5b      	ldrh	r3, [r3, #18]
 8020df6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8020dfa:	8004      	strh	r4, [r0, #0]
 8020dfc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8020e00:	8041      	strh	r1, [r0, #2]
 8020e02:	8082      	strh	r2, [r0, #4]
 8020e04:	80c3      	strh	r3, [r0, #6]
 8020e06:	e00e      	b.n	8020e26 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8020e08:	4917      	ldr	r1, [pc, #92]	; (8020e68 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 8020e0a:	8809      	ldrh	r1, [r1, #0]
 8020e0c:	4411      	add	r1, r2
 8020e0e:	428b      	cmp	r3, r1
 8020e10:	da0a      	bge.n	8020e28 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 8020e12:	1a9b      	subs	r3, r3, r2
 8020e14:	4a15      	ldr	r2, [pc, #84]	; (8020e6c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 8020e16:	210e      	movs	r1, #14
 8020e18:	6812      	ldr	r2, [r2, #0]
 8020e1a:	fb01 2303 	mla	r3, r1, r3, r2
 8020e1e:	681a      	ldr	r2, [r3, #0]
 8020e20:	6002      	str	r2, [r0, #0]
 8020e22:	685a      	ldr	r2, [r3, #4]
 8020e24:	6042      	str	r2, [r0, #4]
 8020e26:	bd10      	pop	{r4, pc}
 8020e28:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8020e2c:	4293      	cmp	r3, r2
 8020e2e:	d10b      	bne.n	8020e48 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 8020e30:	4b0f      	ldr	r3, [pc, #60]	; (8020e70 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 8020e32:	f9b3 1000 	ldrsh.w	r1, [r3]
 8020e36:	4b0f      	ldr	r3, [pc, #60]	; (8020e74 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 8020e38:	8081      	strh	r1, [r0, #4]
 8020e3a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8020e3e:	2300      	movs	r3, #0
 8020e40:	80c2      	strh	r2, [r0, #6]
 8020e42:	8003      	strh	r3, [r0, #0]
 8020e44:	8043      	strh	r3, [r0, #2]
 8020e46:	e7ee      	b.n	8020e26 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8020e48:	2300      	movs	r3, #0
 8020e4a:	8003      	strh	r3, [r0, #0]
 8020e4c:	8043      	strh	r3, [r0, #2]
 8020e4e:	8083      	strh	r3, [r0, #4]
 8020e50:	e7d8      	b.n	8020e04 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 8020e52:	bf00      	nop
 8020e54:	2000c030 	.word	0x2000c030
 8020e58:	0802d660 	.word	0x0802d660
 8020e5c:	0802f934 	.word	0x0802f934
 8020e60:	0802f870 	.word	0x0802f870
 8020e64:	2000c028 	.word	0x2000c028
 8020e68:	2000c02c 	.word	0x2000c02c
 8020e6c:	2000c010 	.word	0x2000c010
 8020e70:	2000bf5a 	.word	0x2000bf5a
 8020e74:	2000bf5c 	.word	0x2000bf5c

08020e78 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8020e78:	4b18      	ldr	r3, [pc, #96]	; (8020edc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8020e7a:	681b      	ldr	r3, [r3, #0]
 8020e7c:	b34b      	cbz	r3, 8020ed2 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 8020e7e:	4a18      	ldr	r2, [pc, #96]	; (8020ee0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8020e80:	8800      	ldrh	r0, [r0, #0]
 8020e82:	8812      	ldrh	r2, [r2, #0]
 8020e84:	4290      	cmp	r0, r2
 8020e86:	d211      	bcs.n	8020eac <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 8020e88:	2214      	movs	r2, #20
 8020e8a:	fb02 3300 	mla	r3, r2, r0, r3
 8020e8e:	8a1a      	ldrh	r2, [r3, #16]
 8020e90:	8919      	ldrh	r1, [r3, #8]
 8020e92:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8020e96:	428a      	cmp	r2, r1
 8020e98:	db1d      	blt.n	8020ed6 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8020e9a:	8a58      	ldrh	r0, [r3, #18]
 8020e9c:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8020ea0:	895b      	ldrh	r3, [r3, #10]
 8020ea2:	4298      	cmp	r0, r3
 8020ea4:	bfac      	ite	ge
 8020ea6:	2000      	movge	r0, #0
 8020ea8:	2001      	movlt	r0, #1
 8020eaa:	4770      	bx	lr
 8020eac:	4b0d      	ldr	r3, [pc, #52]	; (8020ee4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8020eae:	881b      	ldrh	r3, [r3, #0]
 8020eb0:	4413      	add	r3, r2
 8020eb2:	4298      	cmp	r0, r3
 8020eb4:	da0d      	bge.n	8020ed2 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 8020eb6:	4b0c      	ldr	r3, [pc, #48]	; (8020ee8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 8020eb8:	1a80      	subs	r0, r0, r2
 8020eba:	220e      	movs	r2, #14
 8020ebc:	681b      	ldr	r3, [r3, #0]
 8020ebe:	fb02 3300 	mla	r3, r2, r0, r3
 8020ec2:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8020ec6:	891a      	ldrh	r2, [r3, #8]
 8020ec8:	4291      	cmp	r1, r2
 8020eca:	db04      	blt.n	8020ed6 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8020ecc:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8020ed0:	e7e6      	b.n	8020ea0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 8020ed2:	2000      	movs	r0, #0
 8020ed4:	4770      	bx	lr
 8020ed6:	2001      	movs	r0, #1
 8020ed8:	4770      	bx	lr
 8020eda:	bf00      	nop
 8020edc:	2000c030 	.word	0x2000c030
 8020ee0:	2000c028 	.word	0x2000c028
 8020ee4:	2000c02c 	.word	0x2000c02c
 8020ee8:	2000c010 	.word	0x2000c010

08020eec <_ZNK8touchgfx6Bitmap7getDataEv>:
 8020eec:	b508      	push	{r3, lr}
 8020eee:	4b12      	ldr	r3, [pc, #72]	; (8020f38 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8020ef0:	6819      	ldr	r1, [r3, #0]
 8020ef2:	b931      	cbnz	r1, 8020f02 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8020ef4:	4b11      	ldr	r3, [pc, #68]	; (8020f3c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8020ef6:	f240 3132 	movw	r1, #818	; 0x332
 8020efa:	4a11      	ldr	r2, [pc, #68]	; (8020f40 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8020efc:	4811      	ldr	r0, [pc, #68]	; (8020f44 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8020efe:	f009 fc3f 	bl	802a780 <__assert_func>
 8020f02:	8803      	ldrh	r3, [r0, #0]
 8020f04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8020f08:	4293      	cmp	r3, r2
 8020f0a:	d012      	beq.n	8020f32 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8020f0c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8020f10:	4293      	cmp	r3, r2
 8020f12:	d103      	bne.n	8020f1c <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 8020f14:	4b0c      	ldr	r3, [pc, #48]	; (8020f48 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8020f16:	681b      	ldr	r3, [r3, #0]
 8020f18:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8020f1a:	bd08      	pop	{r3, pc}
 8020f1c:	4a0b      	ldr	r2, [pc, #44]	; (8020f4c <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 8020f1e:	6812      	ldr	r2, [r2, #0]
 8020f20:	b11a      	cbz	r2, 8020f2a <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 8020f22:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8020f26:	2800      	cmp	r0, #0
 8020f28:	d1f7      	bne.n	8020f1a <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8020f2a:	2214      	movs	r2, #20
 8020f2c:	4353      	muls	r3, r2
 8020f2e:	58c8      	ldr	r0, [r1, r3]
 8020f30:	e7f3      	b.n	8020f1a <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8020f32:	2000      	movs	r0, #0
 8020f34:	e7f1      	b.n	8020f1a <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8020f36:	bf00      	nop
 8020f38:	2000c030 	.word	0x2000c030
 8020f3c:	0802d660 	.word	0x0802d660
 8020f40:	0802f96a 	.word	0x0802f96a
 8020f44:	0802f870 	.word	0x0802f870
 8020f48:	2000bf68 	.word	0x2000bf68
 8020f4c:	2000c00c 	.word	0x2000c00c

08020f50 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8020f50:	8802      	ldrh	r2, [r0, #0]
 8020f52:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8020f56:	429a      	cmp	r2, r3
 8020f58:	d840      	bhi.n	8020fdc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 8020f5a:	4b21      	ldr	r3, [pc, #132]	; (8020fe0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>)
 8020f5c:	881b      	ldrh	r3, [r3, #0]
 8020f5e:	429a      	cmp	r2, r3
 8020f60:	d220      	bcs.n	8020fa4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x54>
 8020f62:	4b20      	ldr	r3, [pc, #128]	; (8020fe4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8020f64:	6819      	ldr	r1, [r3, #0]
 8020f66:	2314      	movs	r3, #20
 8020f68:	fb03 1302 	mla	r3, r3, r2, r1
 8020f6c:	6858      	ldr	r0, [r3, #4]
 8020f6e:	2800      	cmp	r0, #0
 8020f70:	d035      	beq.n	8020fde <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8020f72:	491d      	ldr	r1, [pc, #116]	; (8020fe8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8020f74:	6809      	ldr	r1, [r1, #0]
 8020f76:	2900      	cmp	r1, #0
 8020f78:	d031      	beq.n	8020fde <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8020f7a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8020f7e:	b371      	cbz	r1, 8020fde <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8020f80:	895a      	ldrh	r2, [r3, #10]
 8020f82:	8918      	ldrh	r0, [r3, #8]
 8020f84:	4350      	muls	r0, r2
 8020f86:	7c5a      	ldrb	r2, [r3, #17]
 8020f88:	7cdb      	ldrb	r3, [r3, #19]
 8020f8a:	0952      	lsrs	r2, r2, #5
 8020f8c:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8020f90:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8020f94:	2b0b      	cmp	r3, #11
 8020f96:	bf18      	it	ne
 8020f98:	0040      	lslne	r0, r0, #1
 8020f9a:	3003      	adds	r0, #3
 8020f9c:	f020 0003 	bic.w	r0, r0, #3
 8020fa0:	4408      	add	r0, r1
 8020fa2:	4770      	bx	lr
 8020fa4:	4911      	ldr	r1, [pc, #68]	; (8020fec <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8020fa6:	8809      	ldrh	r1, [r1, #0]
 8020fa8:	4419      	add	r1, r3
 8020faa:	428a      	cmp	r2, r1
 8020fac:	da16      	bge.n	8020fdc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 8020fae:	4910      	ldr	r1, [pc, #64]	; (8020ff0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8020fb0:	1ad3      	subs	r3, r2, r3
 8020fb2:	200e      	movs	r0, #14
 8020fb4:	6809      	ldr	r1, [r1, #0]
 8020fb6:	fb00 1303 	mla	r3, r0, r3, r1
 8020fba:	7b19      	ldrb	r1, [r3, #12]
 8020fbc:	f001 011f 	and.w	r1, r1, #31
 8020fc0:	290b      	cmp	r1, #11
 8020fc2:	d10b      	bne.n	8020fdc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 8020fc4:	8919      	ldrh	r1, [r3, #8]
 8020fc6:	8958      	ldrh	r0, [r3, #10]
 8020fc8:	4b07      	ldr	r3, [pc, #28]	; (8020fe8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8020fca:	4348      	muls	r0, r1
 8020fcc:	6819      	ldr	r1, [r3, #0]
 8020fce:	3003      	adds	r0, #3
 8020fd0:	f020 0303 	bic.w	r3, r0, #3
 8020fd4:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8020fd8:	4418      	add	r0, r3
 8020fda:	4770      	bx	lr
 8020fdc:	2000      	movs	r0, #0
 8020fde:	4770      	bx	lr
 8020fe0:	2000c028 	.word	0x2000c028
 8020fe4:	2000c030 	.word	0x2000c030
 8020fe8:	2000c00c 	.word	0x2000c00c
 8020fec:	2000c02c 	.word	0x2000c02c
 8020ff0:	2000c010 	.word	0x2000c010

08020ff4 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8020ff4:	4b19      	ldr	r3, [pc, #100]	; (802105c <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8020ff6:	6819      	ldr	r1, [r3, #0]
 8020ff8:	8803      	ldrh	r3, [r0, #0]
 8020ffa:	b1e9      	cbz	r1, 8021038 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8020ffc:	4a18      	ldr	r2, [pc, #96]	; (8021060 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8020ffe:	8812      	ldrh	r2, [r2, #0]
 8021000:	429a      	cmp	r2, r3
 8021002:	d90a      	bls.n	802101a <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8021004:	2214      	movs	r2, #20
 8021006:	fb02 1303 	mla	r3, r2, r3, r1
 802100a:	7c58      	ldrb	r0, [r3, #17]
 802100c:	0942      	lsrs	r2, r0, #5
 802100e:	7cd8      	ldrb	r0, [r3, #19]
 8021010:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8021014:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8021018:	4770      	bx	lr
 802101a:	4912      	ldr	r1, [pc, #72]	; (8021064 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 802101c:	8809      	ldrh	r1, [r1, #0]
 802101e:	4411      	add	r1, r2
 8021020:	428b      	cmp	r3, r1
 8021022:	da09      	bge.n	8021038 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8021024:	1a9b      	subs	r3, r3, r2
 8021026:	4a10      	ldr	r2, [pc, #64]	; (8021068 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 8021028:	210e      	movs	r1, #14
 802102a:	6812      	ldr	r2, [r2, #0]
 802102c:	fb01 2303 	mla	r3, r1, r3, r2
 8021030:	7b18      	ldrb	r0, [r3, #12]
 8021032:	f000 001f 	and.w	r0, r0, #31
 8021036:	4770      	bx	lr
 8021038:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 802103c:	4293      	cmp	r3, r2
 802103e:	d10a      	bne.n	8021056 <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 8021040:	4b0a      	ldr	r3, [pc, #40]	; (802106c <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 8021042:	681b      	ldr	r3, [r3, #0]
 8021044:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8021048:	b10a      	cbz	r2, 802104e <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 802104a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 802104c:	b900      	cbnz	r0, 8021050 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 802104e:	6898      	ldr	r0, [r3, #8]
 8021050:	6803      	ldr	r3, [r0, #0]
 8021052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021054:	4718      	bx	r3
 8021056:	2000      	movs	r0, #0
 8021058:	4770      	bx	lr
 802105a:	bf00      	nop
 802105c:	2000c030 	.word	0x2000c030
 8021060:	2000c028 	.word	0x2000c028
 8021064:	2000c02c 	.word	0x2000c02c
 8021068:	2000c010 	.word	0x2000c010
 802106c:	2000bf68 	.word	0x2000bf68

08021070 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 8021070:	2018      	movs	r0, #24
 8021072:	4770      	bx	lr

08021074 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 8021074:	2001      	movs	r0, #1
 8021076:	4770      	bx	lr

08021078 <_ZNK8touchgfx8LCD24bpp20getColorFrom24BitRGBEhhh>:
 8021078:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 802107c:	ea43 4001 	orr.w	r0, r3, r1, lsl #16
 8021080:	4770      	bx	lr

08021082 <_ZNK8touchgfx8LCD24bpp11getRedColorENS_9colortypeE>:
 8021082:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8021086:	4770      	bx	lr

08021088 <_ZNK8touchgfx8LCD24bpp13getGreenColorENS_9colortypeE>:
 8021088:	f3c1 2007 	ubfx	r0, r1, #8, #8
 802108c:	4770      	bx	lr

0802108e <_ZNK8touchgfx8LCD24bpp12getBlueColorENS_9colortypeE>:
 802108e:	b2c8      	uxtb	r0, r1
 8021090:	4770      	bx	lr

08021092 <_ZN8touchgfx8LCD24bpp4initEv>:
 8021092:	4770      	bx	lr

08021094 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8021094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021098:	b085      	sub	sp, #20
 802109a:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 802109c:	9203      	str	r2, [sp, #12]
 802109e:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 80210a2:	6878      	ldr	r0, [r7, #4]
 80210a4:	9201      	str	r2, [sp, #4]
 80210a6:	9e18      	ldr	r6, [sp, #96]	; 0x60
 80210a8:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
 80210ac:	f9bd 8058 	ldrsh.w	r8, [sp, #88]	; 0x58
 80210b0:	fa1f fc84 	uxth.w	ip, r4
 80210b4:	43e4      	mvns	r4, r4
 80210b6:	9100      	str	r1, [sp, #0]
 80210b8:	b2e4      	uxtb	r4, r4
 80210ba:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 80210be:	fb00 2505 	mla	r5, r0, r5, r2
 80210c2:	683a      	ldr	r2, [r7, #0]
 80210c4:	6877      	ldr	r7, [r6, #4]
 80210c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80210ca:	3704      	adds	r7, #4
 80210cc:	4415      	add	r5, r2
 80210ce:	6832      	ldr	r2, [r6, #0]
 80210d0:	9202      	str	r2, [sp, #8]
 80210d2:	9a00      	ldr	r2, [sp, #0]
 80210d4:	2a00      	cmp	r2, #0
 80210d6:	dc03      	bgt.n	80210e0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 80210d8:	9a03      	ldr	r2, [sp, #12]
 80210da:	2a00      	cmp	r2, #0
 80210dc:	f340 8116 	ble.w	802130c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 80210e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80210e2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80210e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80210e8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80210ec:	2b00      	cmp	r3, #0
 80210ee:	dd0f      	ble.n	8021110 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 80210f0:	1406      	asrs	r6, r0, #16
 80210f2:	d406      	bmi.n	8021102 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 80210f4:	4546      	cmp	r6, r8
 80210f6:	da04      	bge.n	8021102 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 80210f8:	1416      	asrs	r6, r2, #16
 80210fa:	d402      	bmi.n	8021102 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 80210fc:	9901      	ldr	r1, [sp, #4]
 80210fe:	428e      	cmp	r6, r1
 8021100:	db07      	blt.n	8021112 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8021102:	9911      	ldr	r1, [sp, #68]	; 0x44
 8021104:	3b01      	subs	r3, #1
 8021106:	3503      	adds	r5, #3
 8021108:	4408      	add	r0, r1
 802110a:	9912      	ldr	r1, [sp, #72]	; 0x48
 802110c:	440a      	add	r2, r1
 802110e:	e7ed      	b.n	80210ec <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 8021110:	d011      	beq.n	8021136 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 8021112:	1e5e      	subs	r6, r3, #1
 8021114:	9911      	ldr	r1, [sp, #68]	; 0x44
 8021116:	fb01 0e06 	mla	lr, r1, r6, r0
 802111a:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 802111e:	d548      	bpl.n	80211b2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 8021120:	4699      	mov	r9, r3
 8021122:	462e      	mov	r6, r5
 8021124:	f1b9 0f00 	cmp.w	r9, #0
 8021128:	f300 809e 	bgt.w	8021268 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 802112c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021130:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021134:	441d      	add	r5, r3
 8021136:	9b00      	ldr	r3, [sp, #0]
 8021138:	2b00      	cmp	r3, #0
 802113a:	f340 80e7 	ble.w	802130c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 802113e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021142:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021144:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021148:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802114c:	eef0 6a62 	vmov.f32	s13, s5
 8021150:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021154:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021158:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802115c:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8021160:	eef0 6a43 	vmov.f32	s13, s6
 8021164:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021168:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 802116c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021170:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021174:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021178:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802117c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021180:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021184:	ee12 2a90 	vmov	r2, s5
 8021188:	eef0 2a47 	vmov.f32	s5, s14
 802118c:	fb92 f3f3 	sdiv	r3, r2, r3
 8021190:	ee13 2a10 	vmov	r2, s6
 8021194:	9311      	str	r3, [sp, #68]	; 0x44
 8021196:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021198:	eeb0 3a67 	vmov.f32	s6, s15
 802119c:	fb92 f3f3 	sdiv	r3, r2, r3
 80211a0:	9312      	str	r3, [sp, #72]	; 0x48
 80211a2:	9b00      	ldr	r3, [sp, #0]
 80211a4:	9a03      	ldr	r2, [sp, #12]
 80211a6:	3b01      	subs	r3, #1
 80211a8:	9300      	str	r3, [sp, #0]
 80211aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80211ac:	bf08      	it	eq
 80211ae:	4613      	moveq	r3, r2
 80211b0:	e78f      	b.n	80210d2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 80211b2:	45c6      	cmp	lr, r8
 80211b4:	dab4      	bge.n	8021120 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 80211b6:	9912      	ldr	r1, [sp, #72]	; 0x48
 80211b8:	fb01 2606 	mla	r6, r1, r6, r2
 80211bc:	1436      	asrs	r6, r6, #16
 80211be:	d4af      	bmi.n	8021120 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 80211c0:	9901      	ldr	r1, [sp, #4]
 80211c2:	428e      	cmp	r6, r1
 80211c4:	daac      	bge.n	8021120 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 80211c6:	1cee      	adds	r6, r5, #3
 80211c8:	4699      	mov	r9, r3
 80211ca:	f1b9 0f00 	cmp.w	r9, #0
 80211ce:	f106 0603 	add.w	r6, r6, #3
 80211d2:	ddab      	ble.n	802112c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 80211d4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80211d8:	9902      	ldr	r1, [sp, #8]
 80211da:	ea4f 4a20 	mov.w	sl, r0, asr #16
 80211de:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 80211e2:	fb08 1e0e 	mla	lr, r8, lr, r1
 80211e6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80211e8:	fb1b fb04 	smulbb	fp, fp, r4
 80211ec:	f109 39ff 	add.w	r9, r9, #4294967295
 80211f0:	f81e e00a 	ldrb.w	lr, [lr, sl]
 80211f4:	4408      	add	r0, r1
 80211f6:	9912      	ldr	r1, [sp, #72]	; 0x48
 80211f8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80211fc:	440a      	add	r2, r1
 80211fe:	eb07 0a0e 	add.w	sl, r7, lr
 8021202:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8021206:	fb0e be0c 	mla	lr, lr, ip, fp
 802120a:	fa1f fe8e 	uxth.w	lr, lr
 802120e:	f10e 0b01 	add.w	fp, lr, #1
 8021212:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8021216:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 802121a:	fb1b fb04 	smulbb	fp, fp, r4
 802121e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8021222:	f806 ec06 	strb.w	lr, [r6, #-6]
 8021226:	f89a e001 	ldrb.w	lr, [sl, #1]
 802122a:	fb0e be0c 	mla	lr, lr, ip, fp
 802122e:	fa1f fe8e 	uxth.w	lr, lr
 8021232:	f10e 0b01 	add.w	fp, lr, #1
 8021236:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 802123a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802123e:	f806 ec05 	strb.w	lr, [r6, #-5]
 8021242:	f89a e002 	ldrb.w	lr, [sl, #2]
 8021246:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 802124a:	fb1a fa04 	smulbb	sl, sl, r4
 802124e:	fb0e ae0c 	mla	lr, lr, ip, sl
 8021252:	fa1f fe8e 	uxth.w	lr, lr
 8021256:	f10e 0a01 	add.w	sl, lr, #1
 802125a:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 802125e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8021262:	f806 ec04 	strb.w	lr, [r6, #-4]
 8021266:	e7b0      	b.n	80211ca <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 8021268:	ea5f 4a20 	movs.w	sl, r0, asr #16
 802126c:	d446      	bmi.n	80212fc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 802126e:	45c2      	cmp	sl, r8
 8021270:	da44      	bge.n	80212fc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8021272:	ea5f 4e22 	movs.w	lr, r2, asr #16
 8021276:	d441      	bmi.n	80212fc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8021278:	9901      	ldr	r1, [sp, #4]
 802127a:	458e      	cmp	lr, r1
 802127c:	da3e      	bge.n	80212fc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 802127e:	9902      	ldr	r1, [sp, #8]
 8021280:	f896 b000 	ldrb.w	fp, [r6]
 8021284:	fb08 1e0e 	mla	lr, r8, lr, r1
 8021288:	fb1b fb04 	smulbb	fp, fp, r4
 802128c:	f81e e00a 	ldrb.w	lr, [lr, sl]
 8021290:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8021294:	eb07 0a0e 	add.w	sl, r7, lr
 8021298:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802129c:	fb0e be0c 	mla	lr, lr, ip, fp
 80212a0:	fa1f fe8e 	uxth.w	lr, lr
 80212a4:	f10e 0b01 	add.w	fp, lr, #1
 80212a8:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 80212ac:	f896 b001 	ldrb.w	fp, [r6, #1]
 80212b0:	fb1b fb04 	smulbb	fp, fp, r4
 80212b4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80212b8:	f886 e000 	strb.w	lr, [r6]
 80212bc:	f89a e001 	ldrb.w	lr, [sl, #1]
 80212c0:	fb0e be0c 	mla	lr, lr, ip, fp
 80212c4:	fa1f fe8e 	uxth.w	lr, lr
 80212c8:	f10e 0b01 	add.w	fp, lr, #1
 80212cc:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 80212d0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80212d4:	f886 e001 	strb.w	lr, [r6, #1]
 80212d8:	f89a e002 	ldrb.w	lr, [sl, #2]
 80212dc:	f896 a002 	ldrb.w	sl, [r6, #2]
 80212e0:	fb1a fa04 	smulbb	sl, sl, r4
 80212e4:	fb0e ae0c 	mla	lr, lr, ip, sl
 80212e8:	fa1f fe8e 	uxth.w	lr, lr
 80212ec:	f10e 0a01 	add.w	sl, lr, #1
 80212f0:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 80212f4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80212f8:	f886 e002 	strb.w	lr, [r6, #2]
 80212fc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80212fe:	3603      	adds	r6, #3
 8021300:	f109 39ff 	add.w	r9, r9, #4294967295
 8021304:	4408      	add	r0, r1
 8021306:	9912      	ldr	r1, [sp, #72]	; 0x48
 8021308:	440a      	add	r2, r1
 802130a:	e70b      	b.n	8021124 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 802130c:	b005      	add	sp, #20
 802130e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021312 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8021312:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021316:	b085      	sub	sp, #20
 8021318:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802131c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 802131e:	9203      	str	r2, [sp, #12]
 8021320:	6870      	ldr	r0, [r6, #4]
 8021322:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8021324:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8021328:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 802132c:	9101      	str	r1, [sp, #4]
 802132e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8021332:	e9dd c711 	ldrd	ip, r7, [sp, #68]	; 0x44
 8021336:	fb00 2404 	mla	r4, r0, r4, r2
 802133a:	6832      	ldr	r2, [r6, #0]
 802133c:	686e      	ldr	r6, [r5, #4]
 802133e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021342:	3604      	adds	r6, #4
 8021344:	4414      	add	r4, r2
 8021346:	682a      	ldr	r2, [r5, #0]
 8021348:	9202      	str	r2, [sp, #8]
 802134a:	9a01      	ldr	r2, [sp, #4]
 802134c:	2a00      	cmp	r2, #0
 802134e:	dc03      	bgt.n	8021358 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 8021350:	9a03      	ldr	r2, [sp, #12]
 8021352:	2a00      	cmp	r2, #0
 8021354:	f340 80b2 	ble.w	80214bc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 8021358:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802135a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 802135e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021360:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8021364:	2b00      	cmp	r3, #0
 8021366:	dd0c      	ble.n	8021382 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8021368:	1405      	asrs	r5, r0, #16
 802136a:	d405      	bmi.n	8021378 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 802136c:	4575      	cmp	r5, lr
 802136e:	da03      	bge.n	8021378 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 8021370:	1415      	asrs	r5, r2, #16
 8021372:	d401      	bmi.n	8021378 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 8021374:	4545      	cmp	r5, r8
 8021376:	db05      	blt.n	8021384 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8021378:	4460      	add	r0, ip
 802137a:	443a      	add	r2, r7
 802137c:	3b01      	subs	r3, #1
 802137e:	3403      	adds	r4, #3
 8021380:	e7f0      	b.n	8021364 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52>
 8021382:	d03d      	beq.n	8021400 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 8021384:	1e5d      	subs	r5, r3, #1
 8021386:	fb0c 0905 	mla	r9, ip, r5, r0
 802138a:	ea5f 4929 	movs.w	r9, r9, asr #16
 802138e:	d42c      	bmi.n	80213ea <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8021390:	45f1      	cmp	r9, lr
 8021392:	da2a      	bge.n	80213ea <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8021394:	fb07 2505 	mla	r5, r7, r5, r2
 8021398:	142d      	asrs	r5, r5, #16
 802139a:	d426      	bmi.n	80213ea <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 802139c:	4545      	cmp	r5, r8
 802139e:	da24      	bge.n	80213ea <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 80213a0:	1ce5      	adds	r5, r4, #3
 80213a2:	469a      	mov	sl, r3
 80213a4:	f1ba 0f00 	cmp.w	sl, #0
 80213a8:	f105 0503 	add.w	r5, r5, #3
 80213ac:	dd23      	ble.n	80213f6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 80213ae:	ea4f 4922 	mov.w	r9, r2, asr #16
 80213b2:	9902      	ldr	r1, [sp, #8]
 80213b4:	ea4f 4b20 	mov.w	fp, r0, asr #16
 80213b8:	443a      	add	r2, r7
 80213ba:	fb0e 1909 	mla	r9, lr, r9, r1
 80213be:	4460      	add	r0, ip
 80213c0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80213c4:	f819 900b 	ldrb.w	r9, [r9, fp]
 80213c8:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80213cc:	eb06 0b09 	add.w	fp, r6, r9
 80213d0:	f816 9009 	ldrb.w	r9, [r6, r9]
 80213d4:	f805 9c06 	strb.w	r9, [r5, #-6]
 80213d8:	f89b 9001 	ldrb.w	r9, [fp, #1]
 80213dc:	f805 9c05 	strb.w	r9, [r5, #-5]
 80213e0:	f89b 9002 	ldrb.w	r9, [fp, #2]
 80213e4:	f805 9c04 	strb.w	r9, [r5, #-4]
 80213e8:	e7dc      	b.n	80213a4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 80213ea:	2500      	movs	r5, #0
 80213ec:	eba3 0905 	sub.w	r9, r3, r5
 80213f0:	f1b9 0f00 	cmp.w	r9, #0
 80213f4:	dc3c      	bgt.n	8021470 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15e>
 80213f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80213fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80213fe:	441c      	add	r4, r3
 8021400:	9b01      	ldr	r3, [sp, #4]
 8021402:	2b00      	cmp	r3, #0
 8021404:	dd5a      	ble.n	80214bc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 8021406:	ee30 0a04 	vadd.f32	s0, s0, s8
 802140a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802140c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021410:	eeb0 6a62 	vmov.f32	s12, s5
 8021414:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021418:	ee31 1a05 	vadd.f32	s2, s2, s10
 802141c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021420:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8021424:	eeb0 6a43 	vmov.f32	s12, s6
 8021428:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802142c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8021430:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021434:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021438:	ee77 2a62 	vsub.f32	s5, s14, s5
 802143c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021440:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021444:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021448:	ee12 2a90 	vmov	r2, s5
 802144c:	eef0 2a47 	vmov.f32	s5, s14
 8021450:	fb92 fcf3 	sdiv	ip, r2, r3
 8021454:	ee13 2a10 	vmov	r2, s6
 8021458:	eeb0 3a67 	vmov.f32	s6, s15
 802145c:	fb92 f7f3 	sdiv	r7, r2, r3
 8021460:	9b01      	ldr	r3, [sp, #4]
 8021462:	9a03      	ldr	r2, [sp, #12]
 8021464:	3b01      	subs	r3, #1
 8021466:	9301      	str	r3, [sp, #4]
 8021468:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802146a:	bf08      	it	eq
 802146c:	4613      	moveq	r3, r2
 802146e:	e76c      	b.n	802134a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 8021470:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8021474:	d41e      	bmi.n	80214b4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 8021476:	45f2      	cmp	sl, lr
 8021478:	da1c      	bge.n	80214b4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 802147a:	ea5f 4922 	movs.w	r9, r2, asr #16
 802147e:	d419      	bmi.n	80214b4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 8021480:	45c1      	cmp	r9, r8
 8021482:	da17      	bge.n	80214b4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 8021484:	9902      	ldr	r1, [sp, #8]
 8021486:	fb0e 1909 	mla	r9, lr, r9, r1
 802148a:	f819 900a 	ldrb.w	r9, [r9, sl]
 802148e:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8021492:	f816 b009 	ldrb.w	fp, [r6, r9]
 8021496:	eb06 0a09 	add.w	sl, r6, r9
 802149a:	eb05 0945 	add.w	r9, r5, r5, lsl #1
 802149e:	f804 b009 	strb.w	fp, [r4, r9]
 80214a2:	44a1      	add	r9, r4
 80214a4:	f89a b001 	ldrb.w	fp, [sl, #1]
 80214a8:	f889 b001 	strb.w	fp, [r9, #1]
 80214ac:	f89a a002 	ldrb.w	sl, [sl, #2]
 80214b0:	f889 a002 	strb.w	sl, [r9, #2]
 80214b4:	4460      	add	r0, ip
 80214b6:	443a      	add	r2, r7
 80214b8:	3501      	adds	r5, #1
 80214ba:	e797      	b.n	80213ec <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 80214bc:	b005      	add	sp, #20
 80214be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080214c2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80214c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80214c6:	b087      	sub	sp, #28
 80214c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80214cc:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80214ce:	9204      	str	r2, [sp, #16]
 80214d0:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 80214d4:	6870      	ldr	r0, [r6, #4]
 80214d6:	9205      	str	r2, [sp, #20]
 80214d8:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80214da:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 80214de:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 80214e2:	9101      	str	r1, [sp, #4]
 80214e4:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 80214e8:	fb00 2505 	mla	r5, r0, r5, r2
 80214ec:	6832      	ldr	r2, [r6, #0]
 80214ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80214f2:	4415      	add	r5, r2
 80214f4:	6822      	ldr	r2, [r4, #0]
 80214f6:	9202      	str	r2, [sp, #8]
 80214f8:	6862      	ldr	r2, [r4, #4]
 80214fa:	3204      	adds	r2, #4
 80214fc:	9203      	str	r2, [sp, #12]
 80214fe:	9a01      	ldr	r2, [sp, #4]
 8021500:	2a00      	cmp	r2, #0
 8021502:	dc03      	bgt.n	802150c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 8021504:	9a04      	ldr	r2, [sp, #16]
 8021506:	2a00      	cmp	r2, #0
 8021508:	f340 8124 	ble.w	8021754 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 802150c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802150e:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8021512:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021514:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8021518:	2b00      	cmp	r3, #0
 802151a:	dd0e      	ble.n	802153a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 802151c:	1422      	asrs	r2, r4, #16
 802151e:	d405      	bmi.n	802152c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8021520:	4572      	cmp	r2, lr
 8021522:	da03      	bge.n	802152c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8021524:	1402      	asrs	r2, r0, #16
 8021526:	d401      	bmi.n	802152c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8021528:	4542      	cmp	r2, r8
 802152a:	db07      	blt.n	802153c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 802152c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802152e:	3b01      	subs	r3, #1
 8021530:	3503      	adds	r5, #3
 8021532:	4414      	add	r4, r2
 8021534:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021536:	4410      	add	r0, r2
 8021538:	e7ee      	b.n	8021518 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 802153a:	d010      	beq.n	802155e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 802153c:	1e5a      	subs	r2, r3, #1
 802153e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8021540:	fb06 4602 	mla	r6, r6, r2, r4
 8021544:	1436      	asrs	r6, r6, #16
 8021546:	d546      	bpl.n	80215d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 8021548:	4699      	mov	r9, r3
 802154a:	462f      	mov	r7, r5
 802154c:	f1b9 0f00 	cmp.w	r9, #0
 8021550:	f300 80a5 	bgt.w	802169e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 8021554:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021558:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802155c:	441d      	add	r5, r3
 802155e:	9b01      	ldr	r3, [sp, #4]
 8021560:	2b00      	cmp	r3, #0
 8021562:	f340 80f7 	ble.w	8021754 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8021566:	ee30 0a04 	vadd.f32	s0, s0, s8
 802156a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802156c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021570:	eeb0 6a62 	vmov.f32	s12, s5
 8021574:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021578:	ee31 1a05 	vadd.f32	s2, s2, s10
 802157c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021580:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8021584:	eeb0 6a43 	vmov.f32	s12, s6
 8021588:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802158c:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8021590:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021594:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021598:	ee77 2a62 	vsub.f32	s5, s14, s5
 802159c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80215a0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80215a4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80215a8:	ee12 2a90 	vmov	r2, s5
 80215ac:	eef0 2a47 	vmov.f32	s5, s14
 80215b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80215b4:	ee13 2a10 	vmov	r2, s6
 80215b8:	9313      	str	r3, [sp, #76]	; 0x4c
 80215ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80215bc:	eeb0 3a67 	vmov.f32	s6, s15
 80215c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80215c4:	9314      	str	r3, [sp, #80]	; 0x50
 80215c6:	9b01      	ldr	r3, [sp, #4]
 80215c8:	9a04      	ldr	r2, [sp, #16]
 80215ca:	3b01      	subs	r3, #1
 80215cc:	9301      	str	r3, [sp, #4]
 80215ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80215d0:	bf08      	it	eq
 80215d2:	4613      	moveq	r3, r2
 80215d4:	e793      	b.n	80214fe <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 80215d6:	4576      	cmp	r6, lr
 80215d8:	dab6      	bge.n	8021548 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 80215da:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80215dc:	fb06 0202 	mla	r2, r6, r2, r0
 80215e0:	1412      	asrs	r2, r2, #16
 80215e2:	d4b1      	bmi.n	8021548 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 80215e4:	4542      	cmp	r2, r8
 80215e6:	daaf      	bge.n	8021548 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 80215e8:	1cef      	adds	r7, r5, #3
 80215ea:	4699      	mov	r9, r3
 80215ec:	f1b9 0f00 	cmp.w	r9, #0
 80215f0:	ddb0      	ble.n	8021554 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 80215f2:	9902      	ldr	r1, [sp, #8]
 80215f4:	1402      	asrs	r2, r0, #16
 80215f6:	1426      	asrs	r6, r4, #16
 80215f8:	fb0e 1202 	mla	r2, lr, r2, r1
 80215fc:	9903      	ldr	r1, [sp, #12]
 80215fe:	5d92      	ldrb	r2, [r2, r6]
 8021600:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8021604:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 8021608:	d041      	beq.n	802168e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 802160a:	9a05      	ldr	r2, [sp, #20]
 802160c:	fa5f fb86 	uxtb.w	fp, r6
 8021610:	fb02 fc0c 	mul.w	ip, r2, ip
 8021614:	f10c 0201 	add.w	r2, ip, #1
 8021618:	eb02 222c 	add.w	r2, r2, ip, asr #8
 802161c:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 8021620:	1212      	asrs	r2, r2, #8
 8021622:	fa1f fa82 	uxth.w	sl, r2
 8021626:	43d2      	mvns	r2, r2
 8021628:	fb1b fb0a 	smulbb	fp, fp, sl
 802162c:	b2d2      	uxtb	r2, r2
 802162e:	fb0c bc02 	mla	ip, ip, r2, fp
 8021632:	fa1f fc8c 	uxth.w	ip, ip
 8021636:	f10c 0b01 	add.w	fp, ip, #1
 802163a:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 802163e:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8021642:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8021646:	fb1b fb0a 	smulbb	fp, fp, sl
 802164a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802164e:	fb16 fa0a 	smulbb	sl, r6, sl
 8021652:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8021656:	f807 cc03 	strb.w	ip, [r7, #-3]
 802165a:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 802165e:	fb06 aa02 	mla	sl, r6, r2, sl
 8021662:	fb0c bc02 	mla	ip, ip, r2, fp
 8021666:	fa1f fa8a 	uxth.w	sl, sl
 802166a:	fa1f fc8c 	uxth.w	ip, ip
 802166e:	f10a 0601 	add.w	r6, sl, #1
 8021672:	f10c 0b01 	add.w	fp, ip, #1
 8021676:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 802167a:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 802167e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021682:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8021686:	f807 ac01 	strb.w	sl, [r7, #-1]
 802168a:	f807 cc02 	strb.w	ip, [r7, #-2]
 802168e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021690:	3703      	adds	r7, #3
 8021692:	f109 39ff 	add.w	r9, r9, #4294967295
 8021696:	4414      	add	r4, r2
 8021698:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802169a:	4410      	add	r0, r2
 802169c:	e7a6      	b.n	80215ec <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 802169e:	1426      	asrs	r6, r4, #16
 80216a0:	d450      	bmi.n	8021744 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80216a2:	4576      	cmp	r6, lr
 80216a4:	da4e      	bge.n	8021744 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80216a6:	1402      	asrs	r2, r0, #16
 80216a8:	d44c      	bmi.n	8021744 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80216aa:	4542      	cmp	r2, r8
 80216ac:	da4a      	bge.n	8021744 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80216ae:	9902      	ldr	r1, [sp, #8]
 80216b0:	fb0e 1202 	mla	r2, lr, r2, r1
 80216b4:	9903      	ldr	r1, [sp, #12]
 80216b6:	5d92      	ldrb	r2, [r2, r6]
 80216b8:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 80216bc:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 80216c0:	d040      	beq.n	8021744 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80216c2:	9a05      	ldr	r2, [sp, #20]
 80216c4:	fa5f fb86 	uxtb.w	fp, r6
 80216c8:	fb02 fc0c 	mul.w	ip, r2, ip
 80216cc:	f10c 0201 	add.w	r2, ip, #1
 80216d0:	eb02 222c 	add.w	r2, r2, ip, asr #8
 80216d4:	f897 c000 	ldrb.w	ip, [r7]
 80216d8:	1212      	asrs	r2, r2, #8
 80216da:	fa1f fa82 	uxth.w	sl, r2
 80216de:	43d2      	mvns	r2, r2
 80216e0:	fb1b fb0a 	smulbb	fp, fp, sl
 80216e4:	b2d2      	uxtb	r2, r2
 80216e6:	fb0c bc02 	mla	ip, ip, r2, fp
 80216ea:	fa1f fc8c 	uxth.w	ip, ip
 80216ee:	f10c 0b01 	add.w	fp, ip, #1
 80216f2:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 80216f6:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 80216fa:	f3c6 4607 	ubfx	r6, r6, #16, #8
 80216fe:	fb1b fb0a 	smulbb	fp, fp, sl
 8021702:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8021706:	fb16 fa0a 	smulbb	sl, r6, sl
 802170a:	78be      	ldrb	r6, [r7, #2]
 802170c:	f887 c000 	strb.w	ip, [r7]
 8021710:	f897 c001 	ldrb.w	ip, [r7, #1]
 8021714:	fb06 aa02 	mla	sl, r6, r2, sl
 8021718:	fb0c bc02 	mla	ip, ip, r2, fp
 802171c:	fa1f fa8a 	uxth.w	sl, sl
 8021720:	fa1f fc8c 	uxth.w	ip, ip
 8021724:	f10a 0601 	add.w	r6, sl, #1
 8021728:	f10c 0b01 	add.w	fp, ip, #1
 802172c:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8021730:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8021734:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021738:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802173c:	f887 a002 	strb.w	sl, [r7, #2]
 8021740:	f887 c001 	strb.w	ip, [r7, #1]
 8021744:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021746:	3703      	adds	r7, #3
 8021748:	f109 39ff 	add.w	r9, r9, #4294967295
 802174c:	4414      	add	r4, r2
 802174e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021750:	4410      	add	r0, r2
 8021752:	e6fb      	b.n	802154c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8021754:	b007      	add	sp, #28
 8021756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802175a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802175a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802175e:	b085      	sub	sp, #20
 8021760:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021764:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8021766:	9203      	str	r2, [sp, #12]
 8021768:	6870      	ldr	r0, [r6, #4]
 802176a:	9d18      	ldr	r5, [sp, #96]	; 0x60
 802176c:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8021770:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 8021774:	9100      	str	r1, [sp, #0]
 8021776:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 802177a:	fb00 2404 	mla	r4, r0, r4, r2
 802177e:	6832      	ldr	r2, [r6, #0]
 8021780:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021784:	4414      	add	r4, r2
 8021786:	682a      	ldr	r2, [r5, #0]
 8021788:	9201      	str	r2, [sp, #4]
 802178a:	686a      	ldr	r2, [r5, #4]
 802178c:	3204      	adds	r2, #4
 802178e:	9202      	str	r2, [sp, #8]
 8021790:	9a00      	ldr	r2, [sp, #0]
 8021792:	2a00      	cmp	r2, #0
 8021794:	dc03      	bgt.n	802179e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 8021796:	9a03      	ldr	r2, [sp, #12]
 8021798:	2a00      	cmp	r2, #0
 802179a:	f340 8131 	ble.w	8021a00 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 802179e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80217a0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80217a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80217a6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80217aa:	2b00      	cmp	r3, #0
 80217ac:	dd0e      	ble.n	80217cc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 80217ae:	1405      	asrs	r5, r0, #16
 80217b0:	d405      	bmi.n	80217be <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 80217b2:	4575      	cmp	r5, lr
 80217b4:	da03      	bge.n	80217be <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 80217b6:	1415      	asrs	r5, r2, #16
 80217b8:	d401      	bmi.n	80217be <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 80217ba:	4545      	cmp	r5, r8
 80217bc:	db07      	blt.n	80217ce <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 80217be:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80217c0:	3b01      	subs	r3, #1
 80217c2:	3403      	adds	r4, #3
 80217c4:	4428      	add	r0, r5
 80217c6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80217c8:	442a      	add	r2, r5
 80217ca:	e7ee      	b.n	80217aa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 80217cc:	d06f      	beq.n	80218ae <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 80217ce:	1e5d      	subs	r5, r3, #1
 80217d0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80217d2:	fb06 0605 	mla	r6, r6, r5, r0
 80217d6:	1436      	asrs	r6, r6, #16
 80217d8:	d460      	bmi.n	802189c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 80217da:	4576      	cmp	r6, lr
 80217dc:	da5e      	bge.n	802189c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 80217de:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80217e0:	fb06 2505 	mla	r5, r6, r5, r2
 80217e4:	142d      	asrs	r5, r5, #16
 80217e6:	d459      	bmi.n	802189c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 80217e8:	4545      	cmp	r5, r8
 80217ea:	da57      	bge.n	802189c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 80217ec:	1ce5      	adds	r5, r4, #3
 80217ee:	469a      	mov	sl, r3
 80217f0:	f1ba 0f00 	cmp.w	sl, #0
 80217f4:	dd56      	ble.n	80218a4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14a>
 80217f6:	9901      	ldr	r1, [sp, #4]
 80217f8:	1416      	asrs	r6, r2, #16
 80217fa:	1407      	asrs	r7, r0, #16
 80217fc:	fb0e 1606 	mla	r6, lr, r6, r1
 8021800:	9902      	ldr	r1, [sp, #8]
 8021802:	5df6      	ldrb	r6, [r6, r7]
 8021804:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8021808:	0e37      	lsrs	r7, r6, #24
 802180a:	2fff      	cmp	r7, #255	; 0xff
 802180c:	f000 80ef 	beq.w	80219ee <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 8021810:	fa5f fc87 	uxtb.w	ip, r7
 8021814:	b3d7      	cbz	r7, 802188c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 8021816:	fa1f f78c 	uxth.w	r7, ip
 802181a:	ea6f 0c0c 	mvn.w	ip, ip
 802181e:	fa5f fb86 	uxtb.w	fp, r6
 8021822:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 8021826:	fa5f fc8c 	uxtb.w	ip, ip
 802182a:	fb1b fb07 	smulbb	fp, fp, r7
 802182e:	fb09 b90c 	mla	r9, r9, ip, fp
 8021832:	fa1f f989 	uxth.w	r9, r9
 8021836:	f109 0b01 	add.w	fp, r9, #1
 802183a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 802183e:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 8021842:	fb1b fb0c 	smulbb	fp, fp, ip
 8021846:	ea4f 2929 	mov.w	r9, r9, asr #8
 802184a:	f805 9c03 	strb.w	r9, [r5, #-3]
 802184e:	f3c6 2907 	ubfx	r9, r6, #8, #8
 8021852:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8021856:	fb09 b907 	mla	r9, r9, r7, fp
 802185a:	fa1f f989 	uxth.w	r9, r9
 802185e:	f109 0b01 	add.w	fp, r9, #1
 8021862:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8021866:	ea4f 2929 	mov.w	r9, r9, asr #8
 802186a:	f805 9c02 	strb.w	r9, [r5, #-2]
 802186e:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 8021872:	fb19 fc0c 	smulbb	ip, r9, ip
 8021876:	fb06 c607 	mla	r6, r6, r7, ip
 802187a:	b2b6      	uxth	r6, r6
 802187c:	f106 0c01 	add.w	ip, r6, #1
 8021880:	eb0c 2c16 	add.w	ip, ip, r6, lsr #8
 8021884:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8021888:	f805 cc01 	strb.w	ip, [r5, #-1]
 802188c:	9911      	ldr	r1, [sp, #68]	; 0x44
 802188e:	3503      	adds	r5, #3
 8021890:	f10a 3aff 	add.w	sl, sl, #4294967295
 8021894:	4408      	add	r0, r1
 8021896:	9912      	ldr	r1, [sp, #72]	; 0x48
 8021898:	440a      	add	r2, r1
 802189a:	e7a9      	b.n	80217f0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 802189c:	2600      	movs	r6, #0
 802189e:	1b9d      	subs	r5, r3, r6
 80218a0:	2d00      	cmp	r5, #0
 80218a2:	dc40      	bgt.n	8021926 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 80218a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80218a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80218ac:	441c      	add	r4, r3
 80218ae:	9b00      	ldr	r3, [sp, #0]
 80218b0:	2b00      	cmp	r3, #0
 80218b2:	f340 80a5 	ble.w	8021a00 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 80218b6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80218ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80218bc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80218c0:	eeb0 6a62 	vmov.f32	s12, s5
 80218c4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80218c8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80218cc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80218d0:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80218d4:	eeb0 6a43 	vmov.f32	s12, s6
 80218d8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80218dc:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80218e0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80218e4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80218e8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80218ec:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80218f0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80218f4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80218f8:	ee12 2a90 	vmov	r2, s5
 80218fc:	eef0 2a47 	vmov.f32	s5, s14
 8021900:	fb92 f3f3 	sdiv	r3, r2, r3
 8021904:	ee13 2a10 	vmov	r2, s6
 8021908:	9311      	str	r3, [sp, #68]	; 0x44
 802190a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802190c:	eeb0 3a67 	vmov.f32	s6, s15
 8021910:	fb92 f3f3 	sdiv	r3, r2, r3
 8021914:	9312      	str	r3, [sp, #72]	; 0x48
 8021916:	9b00      	ldr	r3, [sp, #0]
 8021918:	9a03      	ldr	r2, [sp, #12]
 802191a:	3b01      	subs	r3, #1
 802191c:	9300      	str	r3, [sp, #0]
 802191e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021920:	bf08      	it	eq
 8021922:	4613      	moveq	r3, r2
 8021924:	e734      	b.n	8021790 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 8021926:	1407      	asrs	r7, r0, #16
 8021928:	d450      	bmi.n	80219cc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 802192a:	4577      	cmp	r7, lr
 802192c:	da4e      	bge.n	80219cc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 802192e:	1415      	asrs	r5, r2, #16
 8021930:	d44c      	bmi.n	80219cc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 8021932:	4545      	cmp	r5, r8
 8021934:	da4a      	bge.n	80219cc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 8021936:	9901      	ldr	r1, [sp, #4]
 8021938:	fb0e 1505 	mla	r5, lr, r5, r1
 802193c:	9902      	ldr	r1, [sp, #8]
 802193e:	5ded      	ldrb	r5, [r5, r7]
 8021940:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 8021944:	0e2f      	lsrs	r7, r5, #24
 8021946:	2fff      	cmp	r7, #255	; 0xff
 8021948:	d046      	beq.n	80219d8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 802194a:	fa5f f987 	uxtb.w	r9, r7
 802194e:	b3ef      	cbz	r7, 80219cc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 8021950:	fa1f fc89 	uxth.w	ip, r9
 8021954:	ea6f 0909 	mvn.w	r9, r9
 8021958:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 802195c:	fa5f fb85 	uxtb.w	fp, r5
 8021960:	f814 a007 	ldrb.w	sl, [r4, r7]
 8021964:	fa5f f989 	uxtb.w	r9, r9
 8021968:	fb1b fb0c 	smulbb	fp, fp, ip
 802196c:	fb0a ba09 	mla	sl, sl, r9, fp
 8021970:	fa1f fa8a 	uxth.w	sl, sl
 8021974:	f10a 0b01 	add.w	fp, sl, #1
 8021978:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 802197c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021980:	f804 a007 	strb.w	sl, [r4, r7]
 8021984:	4427      	add	r7, r4
 8021986:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 802198a:	f3c5 4507 	ubfx	r5, r5, #16, #8
 802198e:	f897 b001 	ldrb.w	fp, [r7, #1]
 8021992:	fb1b fb09 	smulbb	fp, fp, r9
 8021996:	fb0a ba0c 	mla	sl, sl, ip, fp
 802199a:	fa1f fa8a 	uxth.w	sl, sl
 802199e:	f10a 0b01 	add.w	fp, sl, #1
 80219a2:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 80219a6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80219aa:	f887 a001 	strb.w	sl, [r7, #1]
 80219ae:	f897 a002 	ldrb.w	sl, [r7, #2]
 80219b2:	fb1a f909 	smulbb	r9, sl, r9
 80219b6:	fb05 950c 	mla	r5, r5, ip, r9
 80219ba:	b2ad      	uxth	r5, r5
 80219bc:	f105 0901 	add.w	r9, r5, #1
 80219c0:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 80219c4:	ea4f 2929 	mov.w	r9, r9, asr #8
 80219c8:	f887 9002 	strb.w	r9, [r7, #2]
 80219cc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80219ce:	3601      	adds	r6, #1
 80219d0:	4408      	add	r0, r1
 80219d2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80219d4:	440a      	add	r2, r1
 80219d6:	e762      	b.n	802189e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 80219d8:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 80219dc:	ea4f 2c15 	mov.w	ip, r5, lsr #8
 80219e0:	55e5      	strb	r5, [r4, r7]
 80219e2:	4427      	add	r7, r4
 80219e4:	0c2d      	lsrs	r5, r5, #16
 80219e6:	f887 c001 	strb.w	ip, [r7, #1]
 80219ea:	70bd      	strb	r5, [r7, #2]
 80219ec:	e7ee      	b.n	80219cc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 80219ee:	0a37      	lsrs	r7, r6, #8
 80219f0:	f805 6c03 	strb.w	r6, [r5, #-3]
 80219f4:	0c36      	lsrs	r6, r6, #16
 80219f6:	f805 7c02 	strb.w	r7, [r5, #-2]
 80219fa:	f805 6c01 	strb.w	r6, [r5, #-1]
 80219fe:	e745      	b.n	802188c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 8021a00:	b005      	add	sp, #20
 8021a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021a06 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8021a06:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a0a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8021a0c:	9201      	str	r2, [sp, #4]
 8021a0e:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 8021a12:	6870      	ldr	r0, [r6, #4]
 8021a14:	9200      	str	r2, [sp, #0]
 8021a16:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8021a1a:	f9bd e050 	ldrsh.w	lr, [sp, #80]	; 0x50
 8021a1e:	fa1f fc85 	uxth.w	ip, r5
 8021a22:	43ed      	mvns	r5, r5
 8021a24:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8021a28:	b2ed      	uxtb	r5, r5
 8021a2a:	fb00 2404 	mla	r4, r0, r4, r2
 8021a2e:	6832      	ldr	r2, [r6, #0]
 8021a30:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021a34:	4414      	add	r4, r2
 8021a36:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8021a38:	f8d2 8000 	ldr.w	r8, [r2]
 8021a3c:	2900      	cmp	r1, #0
 8021a3e:	dc03      	bgt.n	8021a48 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 8021a40:	9a01      	ldr	r2, [sp, #4]
 8021a42:	2a00      	cmp	r2, #0
 8021a44:	f340 8104 	ble.w	8021c50 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 8021a48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021a4a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8021a4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021a50:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8021a54:	2b00      	cmp	r3, #0
 8021a56:	dd0f      	ble.n	8021a78 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8021a58:	1406      	asrs	r6, r0, #16
 8021a5a:	d406      	bmi.n	8021a6a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8021a5c:	4576      	cmp	r6, lr
 8021a5e:	da04      	bge.n	8021a6a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8021a60:	1416      	asrs	r6, r2, #16
 8021a62:	d402      	bmi.n	8021a6a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8021a64:	9f00      	ldr	r7, [sp, #0]
 8021a66:	42be      	cmp	r6, r7
 8021a68:	db07      	blt.n	8021a7a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 8021a6a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8021a6c:	3b01      	subs	r3, #1
 8021a6e:	3403      	adds	r4, #3
 8021a70:	4430      	add	r0, r6
 8021a72:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8021a74:	4432      	add	r2, r6
 8021a76:	e7ed      	b.n	8021a54 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 8021a78:	d05f      	beq.n	8021b3a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x134>
 8021a7a:	1e5e      	subs	r6, r3, #1
 8021a7c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8021a7e:	fb07 0706 	mla	r7, r7, r6, r0
 8021a82:	143f      	asrs	r7, r7, #16
 8021a84:	d450      	bmi.n	8021b28 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 8021a86:	4577      	cmp	r7, lr
 8021a88:	da4e      	bge.n	8021b28 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 8021a8a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8021a8c:	fb07 2606 	mla	r6, r7, r6, r2
 8021a90:	1436      	asrs	r6, r6, #16
 8021a92:	d449      	bmi.n	8021b28 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 8021a94:	9f00      	ldr	r7, [sp, #0]
 8021a96:	42be      	cmp	r6, r7
 8021a98:	da46      	bge.n	8021b28 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 8021a9a:	1ce6      	adds	r6, r4, #3
 8021a9c:	4699      	mov	r9, r3
 8021a9e:	f1b9 0f00 	cmp.w	r9, #0
 8021aa2:	f106 0603 	add.w	r6, r6, #3
 8021aa6:	dd43      	ble.n	8021b30 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 8021aa8:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8021aac:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8021ab0:	1417      	asrs	r7, r2, #16
 8021ab2:	f109 39ff 	add.w	r9, r9, #4294967295
 8021ab6:	fb1b fb05 	smulbb	fp, fp, r5
 8021aba:	fb0e a707 	mla	r7, lr, r7, sl
 8021abe:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8021ac2:	eb08 0a07 	add.w	sl, r8, r7
 8021ac6:	f818 7007 	ldrb.w	r7, [r8, r7]
 8021aca:	fb07 b70c 	mla	r7, r7, ip, fp
 8021ace:	b2bf      	uxth	r7, r7
 8021ad0:	f107 0b01 	add.w	fp, r7, #1
 8021ad4:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8021ad8:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8021adc:	fb1b fb05 	smulbb	fp, fp, r5
 8021ae0:	123f      	asrs	r7, r7, #8
 8021ae2:	f806 7c06 	strb.w	r7, [r6, #-6]
 8021ae6:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8021aea:	fb07 b70c 	mla	r7, r7, ip, fp
 8021aee:	b2bf      	uxth	r7, r7
 8021af0:	f107 0b01 	add.w	fp, r7, #1
 8021af4:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8021af8:	123f      	asrs	r7, r7, #8
 8021afa:	f806 7c05 	strb.w	r7, [r6, #-5]
 8021afe:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8021b02:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8021b06:	fb1a fa05 	smulbb	sl, sl, r5
 8021b0a:	fb07 a70c 	mla	r7, r7, ip, sl
 8021b0e:	b2bf      	uxth	r7, r7
 8021b10:	f107 0a01 	add.w	sl, r7, #1
 8021b14:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8021b18:	123f      	asrs	r7, r7, #8
 8021b1a:	f806 7c04 	strb.w	r7, [r6, #-4]
 8021b1e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8021b20:	4438      	add	r0, r7
 8021b22:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8021b24:	443a      	add	r2, r7
 8021b26:	e7ba      	b.n	8021a9e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8021b28:	2700      	movs	r7, #0
 8021b2a:	1bde      	subs	r6, r3, r7
 8021b2c:	2e00      	cmp	r6, #0
 8021b2e:	dc3f      	bgt.n	8021bb0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 8021b30:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021b34:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021b38:	441c      	add	r4, r3
 8021b3a:	2900      	cmp	r1, #0
 8021b3c:	f340 8088 	ble.w	8021c50 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 8021b40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021b44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021b46:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021b4a:	3901      	subs	r1, #1
 8021b4c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021b50:	eef0 6a62 	vmov.f32	s13, s5
 8021b54:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021b58:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021b5c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021b60:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 8021b64:	eef0 6a43 	vmov.f32	s13, s6
 8021b68:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021b6c:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 8021b70:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021b74:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021b78:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021b7c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021b80:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021b84:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021b88:	ee12 2a90 	vmov	r2, s5
 8021b8c:	eef0 2a47 	vmov.f32	s5, s14
 8021b90:	fb92 f3f3 	sdiv	r3, r2, r3
 8021b94:	ee13 2a10 	vmov	r2, s6
 8021b98:	930f      	str	r3, [sp, #60]	; 0x3c
 8021b9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021b9c:	eeb0 3a67 	vmov.f32	s6, s15
 8021ba0:	fb92 f3f3 	sdiv	r3, r2, r3
 8021ba4:	9a01      	ldr	r2, [sp, #4]
 8021ba6:	9310      	str	r3, [sp, #64]	; 0x40
 8021ba8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021baa:	bf08      	it	eq
 8021bac:	4613      	moveq	r3, r2
 8021bae:	e745      	b.n	8021a3c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 8021bb0:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8021bb4:	d446      	bmi.n	8021c44 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 8021bb6:	45f2      	cmp	sl, lr
 8021bb8:	da44      	bge.n	8021c44 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 8021bba:	ea5f 4922 	movs.w	r9, r2, asr #16
 8021bbe:	d441      	bmi.n	8021c44 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 8021bc0:	9e00      	ldr	r6, [sp, #0]
 8021bc2:	45b1      	cmp	r9, r6
 8021bc4:	da3e      	bge.n	8021c44 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 8021bc6:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8021bca:	fb0e a909 	mla	r9, lr, r9, sl
 8021bce:	f814 b006 	ldrb.w	fp, [r4, r6]
 8021bd2:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8021bd6:	fb1b fb05 	smulbb	fp, fp, r5
 8021bda:	eb08 0a09 	add.w	sl, r8, r9
 8021bde:	f818 9009 	ldrb.w	r9, [r8, r9]
 8021be2:	fb09 b90c 	mla	r9, r9, ip, fp
 8021be6:	fa1f f989 	uxth.w	r9, r9
 8021bea:	f109 0b01 	add.w	fp, r9, #1
 8021bee:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8021bf2:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021bf6:	f804 9006 	strb.w	r9, [r4, r6]
 8021bfa:	4426      	add	r6, r4
 8021bfc:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8021c00:	f896 b001 	ldrb.w	fp, [r6, #1]
 8021c04:	fb1b fb05 	smulbb	fp, fp, r5
 8021c08:	fb09 b90c 	mla	r9, r9, ip, fp
 8021c0c:	fa1f f989 	uxth.w	r9, r9
 8021c10:	f109 0b01 	add.w	fp, r9, #1
 8021c14:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8021c18:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021c1c:	f886 9001 	strb.w	r9, [r6, #1]
 8021c20:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8021c24:	f896 a002 	ldrb.w	sl, [r6, #2]
 8021c28:	fb1a fa05 	smulbb	sl, sl, r5
 8021c2c:	fb09 a90c 	mla	r9, r9, ip, sl
 8021c30:	fa1f f989 	uxth.w	r9, r9
 8021c34:	f109 0a01 	add.w	sl, r9, #1
 8021c38:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8021c3c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021c40:	f886 9002 	strb.w	r9, [r6, #2]
 8021c44:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8021c46:	3701      	adds	r7, #1
 8021c48:	4430      	add	r0, r6
 8021c4a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8021c4c:	4432      	add	r2, r6
 8021c4e:	e76c      	b.n	8021b2a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x124>
 8021c50:	b003      	add	sp, #12
 8021c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021c56 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8021c56:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c5a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8021c5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021c60:	9201      	str	r2, [sp, #4]
 8021c62:	6868      	ldr	r0, [r5, #4]
 8021c64:	f9bd c050 	ldrsh.w	ip, [sp, #80]	; 0x50
 8021c68:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 8021c6c:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8021c70:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
 8021c74:	fb00 2404 	mla	r4, r0, r4, r2
 8021c78:	682a      	ldr	r2, [r5, #0]
 8021c7a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021c7e:	4414      	add	r4, r2
 8021c80:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8021c82:	f8d2 9000 	ldr.w	r9, [r2]
 8021c86:	2900      	cmp	r1, #0
 8021c88:	dc03      	bgt.n	8021c92 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 8021c8a:	9a01      	ldr	r2, [sp, #4]
 8021c8c:	2a00      	cmp	r2, #0
 8021c8e:	f340 80a8 	ble.w	8021de2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 8021c92:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021c94:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8021c98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021c9a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8021c9e:	2b00      	cmp	r3, #0
 8021ca0:	dd0c      	ble.n	8021cbc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 8021ca2:	1405      	asrs	r5, r0, #16
 8021ca4:	d405      	bmi.n	8021cb2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 8021ca6:	4565      	cmp	r5, ip
 8021ca8:	da03      	bge.n	8021cb2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 8021caa:	1415      	asrs	r5, r2, #16
 8021cac:	d401      	bmi.n	8021cb2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 8021cae:	4575      	cmp	r5, lr
 8021cb0:	db05      	blt.n	8021cbe <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8021cb2:	4438      	add	r0, r7
 8021cb4:	4432      	add	r2, r6
 8021cb6:	3b01      	subs	r3, #1
 8021cb8:	3403      	adds	r4, #3
 8021cba:	e7f0      	b.n	8021c9e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 8021cbc:	d03a      	beq.n	8021d34 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8021cbe:	1e5d      	subs	r5, r3, #1
 8021cc0:	fb07 0805 	mla	r8, r7, r5, r0
 8021cc4:	ea5f 4828 	movs.w	r8, r8, asr #16
 8021cc8:	d429      	bmi.n	8021d1e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 8021cca:	45e0      	cmp	r8, ip
 8021ccc:	da27      	bge.n	8021d1e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 8021cce:	fb06 2505 	mla	r5, r6, r5, r2
 8021cd2:	142d      	asrs	r5, r5, #16
 8021cd4:	d423      	bmi.n	8021d1e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 8021cd6:	4575      	cmp	r5, lr
 8021cd8:	da21      	bge.n	8021d1e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 8021cda:	f104 0803 	add.w	r8, r4, #3
 8021cde:	469a      	mov	sl, r3
 8021ce0:	f1ba 0f00 	cmp.w	sl, #0
 8021ce4:	f108 0803 	add.w	r8, r8, #3
 8021ce8:	dd1f      	ble.n	8021d2a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 8021cea:	ea4f 4b20 	mov.w	fp, r0, asr #16
 8021cee:	f10a 3aff 	add.w	sl, sl, #4294967295
 8021cf2:	1415      	asrs	r5, r2, #16
 8021cf4:	4438      	add	r0, r7
 8021cf6:	4432      	add	r2, r6
 8021cf8:	fb0c b505 	mla	r5, ip, r5, fp
 8021cfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021d00:	eb09 0b05 	add.w	fp, r9, r5
 8021d04:	f819 5005 	ldrb.w	r5, [r9, r5]
 8021d08:	f808 5c06 	strb.w	r5, [r8, #-6]
 8021d0c:	f89b 5001 	ldrb.w	r5, [fp, #1]
 8021d10:	f808 5c05 	strb.w	r5, [r8, #-5]
 8021d14:	f89b 5002 	ldrb.w	r5, [fp, #2]
 8021d18:	f808 5c04 	strb.w	r5, [r8, #-4]
 8021d1c:	e7e0      	b.n	8021ce0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8021d1e:	2500      	movs	r5, #0
 8021d20:	eba3 0805 	sub.w	r8, r3, r5
 8021d24:	f1b8 0f00 	cmp.w	r8, #0
 8021d28:	dc38      	bgt.n	8021d9c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x146>
 8021d2a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021d2e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021d32:	441c      	add	r4, r3
 8021d34:	2900      	cmp	r1, #0
 8021d36:	dd54      	ble.n	8021de2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 8021d38:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021d3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021d3e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021d42:	3901      	subs	r1, #1
 8021d44:	eeb0 6a62 	vmov.f32	s12, s5
 8021d48:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021d4c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021d50:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021d54:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8021d58:	eeb0 6a43 	vmov.f32	s12, s6
 8021d5c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021d60:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8021d64:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021d68:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021d6c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021d70:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021d74:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021d78:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021d7c:	ee12 2a90 	vmov	r2, s5
 8021d80:	eef0 2a47 	vmov.f32	s5, s14
 8021d84:	fb92 f7f3 	sdiv	r7, r2, r3
 8021d88:	ee13 2a10 	vmov	r2, s6
 8021d8c:	eeb0 3a67 	vmov.f32	s6, s15
 8021d90:	fb92 f6f3 	sdiv	r6, r2, r3
 8021d94:	9a01      	ldr	r2, [sp, #4]
 8021d96:	bf08      	it	eq
 8021d98:	4613      	moveq	r3, r2
 8021d9a:	e774      	b.n	8021c86 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 8021d9c:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8021da0:	d41b      	bmi.n	8021dda <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 8021da2:	45e2      	cmp	sl, ip
 8021da4:	da19      	bge.n	8021dda <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 8021da6:	ea5f 4822 	movs.w	r8, r2, asr #16
 8021daa:	d416      	bmi.n	8021dda <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 8021dac:	45f0      	cmp	r8, lr
 8021dae:	da14      	bge.n	8021dda <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 8021db0:	fb0c a808 	mla	r8, ip, r8, sl
 8021db4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8021db8:	f819 b008 	ldrb.w	fp, [r9, r8]
 8021dbc:	eb09 0a08 	add.w	sl, r9, r8
 8021dc0:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 8021dc4:	f804 b008 	strb.w	fp, [r4, r8]
 8021dc8:	44a0      	add	r8, r4
 8021dca:	f89a b001 	ldrb.w	fp, [sl, #1]
 8021dce:	f888 b001 	strb.w	fp, [r8, #1]
 8021dd2:	f89a a002 	ldrb.w	sl, [sl, #2]
 8021dd6:	f888 a002 	strb.w	sl, [r8, #2]
 8021dda:	4438      	add	r0, r7
 8021ddc:	4432      	add	r2, r6
 8021dde:	3501      	adds	r5, #1
 8021de0:	e79e      	b.n	8021d20 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 8021de2:	b003      	add	sp, #12
 8021de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021de8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8021de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021dec:	b085      	sub	sp, #20
 8021dee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021df2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021df4:	9202      	str	r2, [sp, #8]
 8021df6:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8021dfa:	6860      	ldr	r0, [r4, #4]
 8021dfc:	9203      	str	r2, [sp, #12]
 8021dfe:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8021e02:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 8021e06:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8021e0a:	fb00 2505 	mla	r5, r0, r5, r2
 8021e0e:	6822      	ldr	r2, [r4, #0]
 8021e10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021e14:	4415      	add	r5, r2
 8021e16:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8021e18:	6812      	ldr	r2, [r2, #0]
 8021e1a:	9201      	str	r2, [sp, #4]
 8021e1c:	2900      	cmp	r1, #0
 8021e1e:	dc03      	bgt.n	8021e28 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 8021e20:	9a02      	ldr	r2, [sp, #8]
 8021e22:	2a00      	cmp	r2, #0
 8021e24:	f340 811c 	ble.w	8022060 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8021e28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021e2a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8021e2e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021e30:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8021e34:	2b00      	cmp	r3, #0
 8021e36:	dd0e      	ble.n	8021e56 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8021e38:	1422      	asrs	r2, r4, #16
 8021e3a:	d405      	bmi.n	8021e48 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8021e3c:	4572      	cmp	r2, lr
 8021e3e:	da03      	bge.n	8021e48 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8021e40:	1402      	asrs	r2, r0, #16
 8021e42:	d401      	bmi.n	8021e48 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8021e44:	4542      	cmp	r2, r8
 8021e46:	db07      	blt.n	8021e58 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8021e48:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021e4a:	3b01      	subs	r3, #1
 8021e4c:	3503      	adds	r5, #3
 8021e4e:	4414      	add	r4, r2
 8021e50:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021e52:	4410      	add	r0, r2
 8021e54:	e7ee      	b.n	8021e34 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 8021e56:	d072      	beq.n	8021f3e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x156>
 8021e58:	1e5a      	subs	r2, r3, #1
 8021e5a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8021e5c:	fb06 4602 	mla	r6, r6, r2, r4
 8021e60:	1436      	asrs	r6, r6, #16
 8021e62:	d461      	bmi.n	8021f28 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 8021e64:	4576      	cmp	r6, lr
 8021e66:	da5f      	bge.n	8021f28 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 8021e68:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8021e6a:	fb06 0202 	mla	r2, r6, r2, r0
 8021e6e:	1412      	asrs	r2, r2, #16
 8021e70:	d45a      	bmi.n	8021f28 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 8021e72:	4542      	cmp	r2, r8
 8021e74:	da58      	bge.n	8021f28 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 8021e76:	1cef      	adds	r7, r5, #3
 8021e78:	4699      	mov	r9, r3
 8021e7a:	f1b9 0f00 	cmp.w	r9, #0
 8021e7e:	dd59      	ble.n	8021f34 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 8021e80:	1426      	asrs	r6, r4, #16
 8021e82:	1402      	asrs	r2, r0, #16
 8021e84:	fb0e 6202 	mla	r2, lr, r2, r6
 8021e88:	9e01      	ldr	r6, [sp, #4]
 8021e8a:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8021e8e:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 8021e92:	d041      	beq.n	8021f18 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x130>
 8021e94:	9a03      	ldr	r2, [sp, #12]
 8021e96:	fa5f fb86 	uxtb.w	fp, r6
 8021e9a:	fb02 fc0c 	mul.w	ip, r2, ip
 8021e9e:	f10c 0201 	add.w	r2, ip, #1
 8021ea2:	eb02 222c 	add.w	r2, r2, ip, asr #8
 8021ea6:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 8021eaa:	1212      	asrs	r2, r2, #8
 8021eac:	fa1f fa82 	uxth.w	sl, r2
 8021eb0:	43d2      	mvns	r2, r2
 8021eb2:	fb1b fb0a 	smulbb	fp, fp, sl
 8021eb6:	b2d2      	uxtb	r2, r2
 8021eb8:	fb0c bc02 	mla	ip, ip, r2, fp
 8021ebc:	fa1f fc8c 	uxth.w	ip, ip
 8021ec0:	f10c 0b01 	add.w	fp, ip, #1
 8021ec4:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8021ec8:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8021ecc:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8021ed0:	fb1b fb0a 	smulbb	fp, fp, sl
 8021ed4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8021ed8:	fb16 fa0a 	smulbb	sl, r6, sl
 8021edc:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8021ee0:	f807 cc03 	strb.w	ip, [r7, #-3]
 8021ee4:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 8021ee8:	fb06 aa02 	mla	sl, r6, r2, sl
 8021eec:	fb0c bc02 	mla	ip, ip, r2, fp
 8021ef0:	fa1f fa8a 	uxth.w	sl, sl
 8021ef4:	fa1f fc8c 	uxth.w	ip, ip
 8021ef8:	f10a 0601 	add.w	r6, sl, #1
 8021efc:	f10c 0b01 	add.w	fp, ip, #1
 8021f00:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8021f04:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8021f08:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021f0c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8021f10:	f807 ac01 	strb.w	sl, [r7, #-1]
 8021f14:	f807 cc02 	strb.w	ip, [r7, #-2]
 8021f18:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021f1a:	3703      	adds	r7, #3
 8021f1c:	f109 39ff 	add.w	r9, r9, #4294967295
 8021f20:	4414      	add	r4, r2
 8021f22:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021f24:	4410      	add	r0, r2
 8021f26:	e7a8      	b.n	8021e7a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8021f28:	f04f 0c00 	mov.w	ip, #0
 8021f2c:	eba3 020c 	sub.w	r2, r3, ip
 8021f30:	2a00      	cmp	r2, #0
 8021f32:	dc3d      	bgt.n	8021fb0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c8>
 8021f34:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021f38:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021f3c:	441d      	add	r5, r3
 8021f3e:	2900      	cmp	r1, #0
 8021f40:	f340 808e 	ble.w	8022060 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8021f44:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021f48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021f4a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021f4e:	3901      	subs	r1, #1
 8021f50:	eeb0 6a62 	vmov.f32	s12, s5
 8021f54:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021f58:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021f5c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021f60:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8021f64:	eeb0 6a43 	vmov.f32	s12, s6
 8021f68:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021f6c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8021f70:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021f74:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021f78:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021f7c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021f80:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021f84:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021f88:	ee12 2a90 	vmov	r2, s5
 8021f8c:	eef0 2a47 	vmov.f32	s5, s14
 8021f90:	fb92 f3f3 	sdiv	r3, r2, r3
 8021f94:	ee13 2a10 	vmov	r2, s6
 8021f98:	9311      	str	r3, [sp, #68]	; 0x44
 8021f9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021f9c:	eeb0 3a67 	vmov.f32	s6, s15
 8021fa0:	fb92 f3f3 	sdiv	r3, r2, r3
 8021fa4:	9a02      	ldr	r2, [sp, #8]
 8021fa6:	9312      	str	r3, [sp, #72]	; 0x48
 8021fa8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021faa:	bf08      	it	eq
 8021fac:	4613      	moveq	r3, r2
 8021fae:	e735      	b.n	8021e1c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34>
 8021fb0:	1426      	asrs	r6, r4, #16
 8021fb2:	d44e      	bmi.n	8022052 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 8021fb4:	4576      	cmp	r6, lr
 8021fb6:	da4c      	bge.n	8022052 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 8021fb8:	1402      	asrs	r2, r0, #16
 8021fba:	d44a      	bmi.n	8022052 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 8021fbc:	4542      	cmp	r2, r8
 8021fbe:	da48      	bge.n	8022052 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 8021fc0:	fb0e 6202 	mla	r2, lr, r2, r6
 8021fc4:	9e01      	ldr	r6, [sp, #4]
 8021fc6:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8021fca:	0e3a      	lsrs	r2, r7, #24
 8021fcc:	d041      	beq.n	8022052 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 8021fce:	9e03      	ldr	r6, [sp, #12]
 8021fd0:	fa5f fb87 	uxtb.w	fp, r7
 8021fd4:	4372      	muls	r2, r6
 8021fd6:	1c56      	adds	r6, r2, #1
 8021fd8:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8021fdc:	eb0c 064c 	add.w	r6, ip, ip, lsl #1
 8021fe0:	1212      	asrs	r2, r2, #8
 8021fe2:	f815 9006 	ldrb.w	r9, [r5, r6]
 8021fe6:	fa1f fa82 	uxth.w	sl, r2
 8021fea:	43d2      	mvns	r2, r2
 8021fec:	fb1b fb0a 	smulbb	fp, fp, sl
 8021ff0:	b2d2      	uxtb	r2, r2
 8021ff2:	fb09 b902 	mla	r9, r9, r2, fp
 8021ff6:	fa1f f989 	uxth.w	r9, r9
 8021ffa:	f109 0b01 	add.w	fp, r9, #1
 8021ffe:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8022002:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8022006:	f3c7 4707 	ubfx	r7, r7, #16, #8
 802200a:	fb1b fb0a 	smulbb	fp, fp, sl
 802200e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022012:	fb17 fa0a 	smulbb	sl, r7, sl
 8022016:	f805 9006 	strb.w	r9, [r5, r6]
 802201a:	442e      	add	r6, r5
 802201c:	78b7      	ldrb	r7, [r6, #2]
 802201e:	f896 9001 	ldrb.w	r9, [r6, #1]
 8022022:	fb07 aa02 	mla	sl, r7, r2, sl
 8022026:	fb09 b902 	mla	r9, r9, r2, fp
 802202a:	fa1f fa8a 	uxth.w	sl, sl
 802202e:	fa1f f989 	uxth.w	r9, r9
 8022032:	f10a 0701 	add.w	r7, sl, #1
 8022036:	f109 0b01 	add.w	fp, r9, #1
 802203a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802203e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8022042:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8022046:	ea4f 2929 	mov.w	r9, r9, asr #8
 802204a:	f886 a002 	strb.w	sl, [r6, #2]
 802204e:	f886 9001 	strb.w	r9, [r6, #1]
 8022052:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022054:	f10c 0c01 	add.w	ip, ip, #1
 8022058:	4414      	add	r4, r2
 802205a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802205c:	4410      	add	r0, r2
 802205e:	e765      	b.n	8021f2c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 8022060:	b005      	add	sp, #20
 8022062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022066 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8022066:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802206a:	b085      	sub	sp, #20
 802206c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022070:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022072:	9203      	str	r2, [sp, #12]
 8022074:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 8022078:	6860      	ldr	r0, [r4, #4]
 802207a:	9201      	str	r2, [sp, #4]
 802207c:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8022080:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8022084:	fb00 2505 	mla	r5, r0, r5, r2
 8022088:	6822      	ldr	r2, [r4, #0]
 802208a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802208e:	4415      	add	r5, r2
 8022090:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8022092:	6812      	ldr	r2, [r2, #0]
 8022094:	9202      	str	r2, [sp, #8]
 8022096:	2900      	cmp	r1, #0
 8022098:	dc03      	bgt.n	80220a2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 802209a:	9a03      	ldr	r2, [sp, #12]
 802209c:	2a00      	cmp	r2, #0
 802209e:	f340 8122 	ble.w	80222e6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 80220a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80220a4:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 80220a8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80220aa:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80220ae:	2b00      	cmp	r3, #0
 80220b0:	dd0f      	ble.n	80220d2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 80220b2:	1422      	asrs	r2, r4, #16
 80220b4:	d406      	bmi.n	80220c4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 80220b6:	4572      	cmp	r2, lr
 80220b8:	da04      	bge.n	80220c4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 80220ba:	1402      	asrs	r2, r0, #16
 80220bc:	d402      	bmi.n	80220c4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 80220be:	9e01      	ldr	r6, [sp, #4]
 80220c0:	42b2      	cmp	r2, r6
 80220c2:	db07      	blt.n	80220d4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 80220c4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80220c6:	3b01      	subs	r3, #1
 80220c8:	3503      	adds	r5, #3
 80220ca:	4414      	add	r4, r2
 80220cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80220ce:	4410      	add	r0, r2
 80220d0:	e7ed      	b.n	80220ae <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 80220d2:	d06e      	beq.n	80221b2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 80220d4:	1e5a      	subs	r2, r3, #1
 80220d6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80220d8:	fb06 4602 	mla	r6, r6, r2, r4
 80220dc:	1436      	asrs	r6, r6, #16
 80220de:	d45d      	bmi.n	802219c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 80220e0:	4576      	cmp	r6, lr
 80220e2:	da5b      	bge.n	802219c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 80220e4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80220e6:	fb06 0202 	mla	r2, r6, r2, r0
 80220ea:	1412      	asrs	r2, r2, #16
 80220ec:	d456      	bmi.n	802219c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 80220ee:	9e01      	ldr	r6, [sp, #4]
 80220f0:	42b2      	cmp	r2, r6
 80220f2:	da53      	bge.n	802219c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 80220f4:	1cee      	adds	r6, r5, #3
 80220f6:	469a      	mov	sl, r3
 80220f8:	f1ba 0f00 	cmp.w	sl, #0
 80220fc:	dd54      	ble.n	80221a8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 80220fe:	1427      	asrs	r7, r4, #16
 8022100:	1402      	asrs	r2, r0, #16
 8022102:	fb0e 7202 	mla	r2, lr, r2, r7
 8022106:	9f02      	ldr	r7, [sp, #8]
 8022108:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 802210c:	ea5f 6c17 	movs.w	ip, r7, lsr #24
 8022110:	d03c      	beq.n	802218c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 8022112:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8022116:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 802211a:	f3c7 2907 	ubfx	r9, r7, #8, #8
 802211e:	fa5f f28c 	uxtb.w	r2, ip
 8022122:	b2ff      	uxtb	r7, r7
 8022124:	f000 80d8 	beq.w	80222d8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 8022128:	fa1f f882 	uxth.w	r8, r2
 802212c:	43d2      	mvns	r2, r2
 802212e:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 8022132:	fb17 f708 	smulbb	r7, r7, r8
 8022136:	b2d2      	uxtb	r2, r2
 8022138:	fb19 f908 	smulbb	r9, r9, r8
 802213c:	fb0c 7702 	mla	r7, ip, r2, r7
 8022140:	fb1b f808 	smulbb	r8, fp, r8
 8022144:	b2bf      	uxth	r7, r7
 8022146:	f107 0c01 	add.w	ip, r7, #1
 802214a:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 802214e:	123f      	asrs	r7, r7, #8
 8022150:	f806 7c03 	strb.w	r7, [r6, #-3]
 8022154:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 8022158:	fb07 9902 	mla	r9, r7, r2, r9
 802215c:	fa1f f989 	uxth.w	r9, r9
 8022160:	f109 0701 	add.w	r7, r9, #1
 8022164:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8022168:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 802216c:	fb07 8802 	mla	r8, r7, r2, r8
 8022170:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022174:	fa1f f888 	uxth.w	r8, r8
 8022178:	f806 9c02 	strb.w	r9, [r6, #-2]
 802217c:	f108 0201 	add.w	r2, r8, #1
 8022180:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8022184:	ea4f 2828 	mov.w	r8, r8, asr #8
 8022188:	f806 8c01 	strb.w	r8, [r6, #-1]
 802218c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802218e:	3603      	adds	r6, #3
 8022190:	f10a 3aff 	add.w	sl, sl, #4294967295
 8022194:	4414      	add	r4, r2
 8022196:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022198:	4410      	add	r0, r2
 802219a:	e7ad      	b.n	80220f8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 802219c:	f04f 0c00 	mov.w	ip, #0
 80221a0:	eba3 020c 	sub.w	r2, r3, ip
 80221a4:	2a00      	cmp	r2, #0
 80221a6:	dc3d      	bgt.n	8022224 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 80221a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80221ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80221b0:	441d      	add	r5, r3
 80221b2:	2900      	cmp	r1, #0
 80221b4:	f340 8097 	ble.w	80222e6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 80221b8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80221bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80221be:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80221c2:	3901      	subs	r1, #1
 80221c4:	eeb0 6a62 	vmov.f32	s12, s5
 80221c8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80221cc:	ee31 1a05 	vadd.f32	s2, s2, s10
 80221d0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80221d4:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80221d8:	eeb0 6a43 	vmov.f32	s12, s6
 80221dc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80221e0:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80221e4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80221e8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80221ec:	ee77 2a62 	vsub.f32	s5, s14, s5
 80221f0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80221f4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80221f8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80221fc:	ee12 2a90 	vmov	r2, s5
 8022200:	eef0 2a47 	vmov.f32	s5, s14
 8022204:	fb92 f3f3 	sdiv	r3, r2, r3
 8022208:	ee13 2a10 	vmov	r2, s6
 802220c:	9311      	str	r3, [sp, #68]	; 0x44
 802220e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022210:	eeb0 3a67 	vmov.f32	s6, s15
 8022214:	fb92 f3f3 	sdiv	r3, r2, r3
 8022218:	9a03      	ldr	r2, [sp, #12]
 802221a:	9312      	str	r3, [sp, #72]	; 0x48
 802221c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802221e:	bf08      	it	eq
 8022220:	4613      	moveq	r3, r2
 8022222:	e738      	b.n	8022096 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 8022224:	1426      	asrs	r6, r4, #16
 8022226:	d448      	bmi.n	80222ba <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 8022228:	4576      	cmp	r6, lr
 802222a:	da46      	bge.n	80222ba <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 802222c:	1402      	asrs	r2, r0, #16
 802222e:	d444      	bmi.n	80222ba <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 8022230:	9f01      	ldr	r7, [sp, #4]
 8022232:	42ba      	cmp	r2, r7
 8022234:	da41      	bge.n	80222ba <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 8022236:	fb0e 6202 	mla	r2, lr, r2, r6
 802223a:	9e02      	ldr	r6, [sp, #8]
 802223c:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8022240:	0e3a      	lsrs	r2, r7, #24
 8022242:	d03a      	beq.n	80222ba <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 8022244:	2aff      	cmp	r2, #255	; 0xff
 8022246:	b2d6      	uxtb	r6, r2
 8022248:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 802224c:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8022250:	ea4f 024c 	mov.w	r2, ip, lsl #1
 8022254:	b2ff      	uxtb	r7, r7
 8022256:	d037      	beq.n	80222c8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x262>
 8022258:	fa1f f986 	uxth.w	r9, r6
 802225c:	4462      	add	r2, ip
 802225e:	43f6      	mvns	r6, r6
 8022260:	f815 8002 	ldrb.w	r8, [r5, r2]
 8022264:	fb17 f709 	smulbb	r7, r7, r9
 8022268:	fb1a fa09 	smulbb	sl, sl, r9
 802226c:	b2f6      	uxtb	r6, r6
 802226e:	fb1b f909 	smulbb	r9, fp, r9
 8022272:	fb08 7706 	mla	r7, r8, r6, r7
 8022276:	b2bf      	uxth	r7, r7
 8022278:	f107 0801 	add.w	r8, r7, #1
 802227c:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8022280:	123f      	asrs	r7, r7, #8
 8022282:	54af      	strb	r7, [r5, r2]
 8022284:	442a      	add	r2, r5
 8022286:	7857      	ldrb	r7, [r2, #1]
 8022288:	fb07 aa06 	mla	sl, r7, r6, sl
 802228c:	fa1f fa8a 	uxth.w	sl, sl
 8022290:	f10a 0701 	add.w	r7, sl, #1
 8022294:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022298:	7897      	ldrb	r7, [r2, #2]
 802229a:	fb07 9906 	mla	r9, r7, r6, r9
 802229e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80222a2:	fa1f f989 	uxth.w	r9, r9
 80222a6:	f882 a001 	strb.w	sl, [r2, #1]
 80222aa:	f109 0601 	add.w	r6, r9, #1
 80222ae:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 80222b2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80222b6:	f882 9002 	strb.w	r9, [r2, #2]
 80222ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80222bc:	f10c 0c01 	add.w	ip, ip, #1
 80222c0:	4414      	add	r4, r2
 80222c2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80222c4:	4410      	add	r0, r2
 80222c6:	e76b      	b.n	80221a0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x13a>
 80222c8:	4462      	add	r2, ip
 80222ca:	54af      	strb	r7, [r5, r2]
 80222cc:	442a      	add	r2, r5
 80222ce:	f882 a001 	strb.w	sl, [r2, #1]
 80222d2:	f882 b002 	strb.w	fp, [r2, #2]
 80222d6:	e7f0      	b.n	80222ba <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 80222d8:	f806 7c03 	strb.w	r7, [r6, #-3]
 80222dc:	f806 9c02 	strb.w	r9, [r6, #-2]
 80222e0:	f806 bc01 	strb.w	fp, [r6, #-1]
 80222e4:	e752      	b.n	802218c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 80222e6:	b005      	add	sp, #20
 80222e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080222ec <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80222ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80222f0:	b087      	sub	sp, #28
 80222f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80222f6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80222f8:	9204      	str	r2, [sp, #16]
 80222fa:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 80222fe:	6860      	ldr	r0, [r4, #4]
 8022300:	9205      	str	r2, [sp, #20]
 8022302:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 8022306:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 802230a:	9101      	str	r1, [sp, #4]
 802230c:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8022310:	fb00 2505 	mla	r5, r0, r5, r2
 8022314:	6822      	ldr	r2, [r4, #0]
 8022316:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802231a:	4415      	add	r5, r2
 802231c:	f10e 0201 	add.w	r2, lr, #1
 8022320:	f022 0201 	bic.w	r2, r2, #1
 8022324:	9202      	str	r2, [sp, #8]
 8022326:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8022328:	6812      	ldr	r2, [r2, #0]
 802232a:	9203      	str	r2, [sp, #12]
 802232c:	9a01      	ldr	r2, [sp, #4]
 802232e:	2a00      	cmp	r2, #0
 8022330:	dc03      	bgt.n	802233a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 8022332:	9a04      	ldr	r2, [sp, #16]
 8022334:	2a00      	cmp	r2, #0
 8022336:	f340 8132 	ble.w	802259e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 802233a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802233c:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8022340:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022342:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8022346:	2b00      	cmp	r3, #0
 8022348:	dd0e      	ble.n	8022368 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 802234a:	1422      	asrs	r2, r4, #16
 802234c:	d405      	bmi.n	802235a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 802234e:	4596      	cmp	lr, r2
 8022350:	dd03      	ble.n	802235a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8022352:	1402      	asrs	r2, r0, #16
 8022354:	d401      	bmi.n	802235a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8022356:	4542      	cmp	r2, r8
 8022358:	db07      	blt.n	802236a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 802235a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802235c:	3b01      	subs	r3, #1
 802235e:	3503      	adds	r5, #3
 8022360:	4414      	add	r4, r2
 8022362:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022364:	4410      	add	r0, r2
 8022366:	e7ee      	b.n	8022346 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a>
 8022368:	d010      	beq.n	802238c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 802236a:	1e5a      	subs	r2, r3, #1
 802236c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 802236e:	fb06 4602 	mla	r6, r6, r2, r4
 8022372:	1436      	asrs	r6, r6, #16
 8022374:	d546      	bpl.n	8022404 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8022376:	4699      	mov	r9, r3
 8022378:	462e      	mov	r6, r5
 802237a:	f1b9 0f00 	cmp.w	r9, #0
 802237e:	f300 80ac 	bgt.w	80224da <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ee>
 8022382:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022386:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802238a:	441d      	add	r5, r3
 802238c:	9b01      	ldr	r3, [sp, #4]
 802238e:	2b00      	cmp	r3, #0
 8022390:	f340 8105 	ble.w	802259e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 8022394:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022398:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802239a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802239e:	eeb0 6a62 	vmov.f32	s12, s5
 80223a2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80223a6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80223aa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80223ae:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80223b2:	eeb0 6a43 	vmov.f32	s12, s6
 80223b6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80223ba:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80223be:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80223c2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80223c6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80223ca:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80223ce:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80223d2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80223d6:	ee12 2a90 	vmov	r2, s5
 80223da:	eef0 2a47 	vmov.f32	s5, s14
 80223de:	fb92 f3f3 	sdiv	r3, r2, r3
 80223e2:	ee13 2a10 	vmov	r2, s6
 80223e6:	9313      	str	r3, [sp, #76]	; 0x4c
 80223e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80223ea:	eeb0 3a67 	vmov.f32	s6, s15
 80223ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80223f2:	9314      	str	r3, [sp, #80]	; 0x50
 80223f4:	9b01      	ldr	r3, [sp, #4]
 80223f6:	9a04      	ldr	r2, [sp, #16]
 80223f8:	3b01      	subs	r3, #1
 80223fa:	9301      	str	r3, [sp, #4]
 80223fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80223fe:	bf08      	it	eq
 8022400:	4613      	moveq	r3, r2
 8022402:	e793      	b.n	802232c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 8022404:	45b6      	cmp	lr, r6
 8022406:	ddb6      	ble.n	8022376 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8022408:	9e14      	ldr	r6, [sp, #80]	; 0x50
 802240a:	fb06 0202 	mla	r2, r6, r2, r0
 802240e:	1412      	asrs	r2, r2, #16
 8022410:	d4b1      	bmi.n	8022376 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8022412:	4542      	cmp	r2, r8
 8022414:	daaf      	bge.n	8022376 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8022416:	1cee      	adds	r6, r5, #3
 8022418:	4699      	mov	r9, r3
 802241a:	f1b9 0f00 	cmp.w	r9, #0
 802241e:	ddb0      	ble.n	8022382 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 8022420:	1422      	asrs	r2, r4, #16
 8022422:	9902      	ldr	r1, [sp, #8]
 8022424:	1407      	asrs	r7, r0, #16
 8022426:	fb01 2707 	mla	r7, r1, r7, r2
 802242a:	9903      	ldr	r1, [sp, #12]
 802242c:	087a      	lsrs	r2, r7, #1
 802242e:	5c8a      	ldrb	r2, [r1, r2]
 8022430:	07f9      	lsls	r1, r7, #31
 8022432:	bf54      	ite	pl
 8022434:	f002 020f 	andpl.w	r2, r2, #15
 8022438:	1112      	asrmi	r2, r2, #4
 802243a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802243e:	b2d2      	uxtb	r2, r2
 8022440:	2a00      	cmp	r2, #0
 8022442:	d042      	beq.n	80224ca <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1de>
 8022444:	4957      	ldr	r1, [pc, #348]	; (80225a4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 8022446:	680f      	ldr	r7, [r1, #0]
 8022448:	9905      	ldr	r1, [sp, #20]
 802244a:	fa5f fb87 	uxtb.w	fp, r7
 802244e:	434a      	muls	r2, r1
 8022450:	f102 0c01 	add.w	ip, r2, #1
 8022454:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 8022458:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 802245c:	1212      	asrs	r2, r2, #8
 802245e:	fa1f fa82 	uxth.w	sl, r2
 8022462:	43d2      	mvns	r2, r2
 8022464:	fb1b fb0a 	smulbb	fp, fp, sl
 8022468:	b2d2      	uxtb	r2, r2
 802246a:	fb0c bc02 	mla	ip, ip, r2, fp
 802246e:	fa1f fc8c 	uxth.w	ip, ip
 8022472:	f10c 0b01 	add.w	fp, ip, #1
 8022476:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 802247a:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 802247e:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8022482:	fb1b fb0a 	smulbb	fp, fp, sl
 8022486:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802248a:	fb17 fa0a 	smulbb	sl, r7, sl
 802248e:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8022492:	f806 cc03 	strb.w	ip, [r6, #-3]
 8022496:	f816 cc02 	ldrb.w	ip, [r6, #-2]
 802249a:	fb07 aa02 	mla	sl, r7, r2, sl
 802249e:	fb0c bc02 	mla	ip, ip, r2, fp
 80224a2:	fa1f fa8a 	uxth.w	sl, sl
 80224a6:	fa1f fc8c 	uxth.w	ip, ip
 80224aa:	f10a 0701 	add.w	r7, sl, #1
 80224ae:	f10c 0b01 	add.w	fp, ip, #1
 80224b2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80224b6:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 80224ba:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80224be:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80224c2:	f806 ac01 	strb.w	sl, [r6, #-1]
 80224c6:	f806 cc02 	strb.w	ip, [r6, #-2]
 80224ca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80224cc:	3603      	adds	r6, #3
 80224ce:	f109 39ff 	add.w	r9, r9, #4294967295
 80224d2:	4414      	add	r4, r2
 80224d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80224d6:	4410      	add	r0, r2
 80224d8:	e79f      	b.n	802241a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12e>
 80224da:	1422      	asrs	r2, r4, #16
 80224dc:	d457      	bmi.n	802258e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 80224de:	4596      	cmp	lr, r2
 80224e0:	dd55      	ble.n	802258e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 80224e2:	1407      	asrs	r7, r0, #16
 80224e4:	d453      	bmi.n	802258e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 80224e6:	4547      	cmp	r7, r8
 80224e8:	da51      	bge.n	802258e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 80224ea:	9902      	ldr	r1, [sp, #8]
 80224ec:	fb07 2701 	mla	r7, r7, r1, r2
 80224f0:	9903      	ldr	r1, [sp, #12]
 80224f2:	087a      	lsrs	r2, r7, #1
 80224f4:	07ff      	lsls	r7, r7, #31
 80224f6:	5c8a      	ldrb	r2, [r1, r2]
 80224f8:	bf54      	ite	pl
 80224fa:	f002 020f 	andpl.w	r2, r2, #15
 80224fe:	1112      	asrmi	r2, r2, #4
 8022500:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8022504:	b2d2      	uxtb	r2, r2
 8022506:	2a00      	cmp	r2, #0
 8022508:	d041      	beq.n	802258e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 802250a:	4926      	ldr	r1, [pc, #152]	; (80225a4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 802250c:	680f      	ldr	r7, [r1, #0]
 802250e:	9905      	ldr	r1, [sp, #20]
 8022510:	fa5f fb87 	uxtb.w	fp, r7
 8022514:	434a      	muls	r2, r1
 8022516:	f102 0c01 	add.w	ip, r2, #1
 802251a:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 802251e:	f896 c000 	ldrb.w	ip, [r6]
 8022522:	1212      	asrs	r2, r2, #8
 8022524:	fa1f fa82 	uxth.w	sl, r2
 8022528:	43d2      	mvns	r2, r2
 802252a:	fb1b fb0a 	smulbb	fp, fp, sl
 802252e:	b2d2      	uxtb	r2, r2
 8022530:	fb0c bc02 	mla	ip, ip, r2, fp
 8022534:	fa1f fc8c 	uxth.w	ip, ip
 8022538:	f10c 0b01 	add.w	fp, ip, #1
 802253c:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8022540:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8022544:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8022548:	fb1b fb0a 	smulbb	fp, fp, sl
 802254c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8022550:	fb17 fa0a 	smulbb	sl, r7, sl
 8022554:	78b7      	ldrb	r7, [r6, #2]
 8022556:	f886 c000 	strb.w	ip, [r6]
 802255a:	f896 c001 	ldrb.w	ip, [r6, #1]
 802255e:	fb07 aa02 	mla	sl, r7, r2, sl
 8022562:	fb0c bc02 	mla	ip, ip, r2, fp
 8022566:	fa1f fa8a 	uxth.w	sl, sl
 802256a:	fa1f fc8c 	uxth.w	ip, ip
 802256e:	f10a 0701 	add.w	r7, sl, #1
 8022572:	f10c 0b01 	add.w	fp, ip, #1
 8022576:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802257a:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 802257e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8022582:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8022586:	f886 a002 	strb.w	sl, [r6, #2]
 802258a:	f886 c001 	strb.w	ip, [r6, #1]
 802258e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022590:	3603      	adds	r6, #3
 8022592:	f109 39ff 	add.w	r9, r9, #4294967295
 8022596:	4414      	add	r4, r2
 8022598:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802259a:	4410      	add	r0, r2
 802259c:	e6ed      	b.n	802237a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 802259e:	b007      	add	sp, #28
 80225a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80225a4:	2000bf90 	.word	0x2000bf90

080225a8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80225a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80225ac:	b087      	sub	sp, #28
 80225ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80225b2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80225b4:	9205      	str	r2, [sp, #20]
 80225b6:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 80225ba:	6860      	ldr	r0, [r4, #4]
 80225bc:	9202      	str	r2, [sp, #8]
 80225be:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 80225c2:	9101      	str	r1, [sp, #4]
 80225c4:	e9dd 2616 	ldrd	r2, r6, [sp, #88]	; 0x58
 80225c8:	fb00 2606 	mla	r6, r0, r6, r2
 80225cc:	6822      	ldr	r2, [r4, #0]
 80225ce:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80225d2:	4416      	add	r6, r2
 80225d4:	f108 0201 	add.w	r2, r8, #1
 80225d8:	f022 0201 	bic.w	r2, r2, #1
 80225dc:	9203      	str	r2, [sp, #12]
 80225de:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80225e0:	6812      	ldr	r2, [r2, #0]
 80225e2:	9204      	str	r2, [sp, #16]
 80225e4:	9a01      	ldr	r2, [sp, #4]
 80225e6:	2a00      	cmp	r2, #0
 80225e8:	dc03      	bgt.n	80225f2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 80225ea:	9a05      	ldr	r2, [sp, #20]
 80225ec:	2a00      	cmp	r2, #0
 80225ee:	f340 813a 	ble.w	8022866 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 80225f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80225f4:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 80225f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80225fa:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 80225fe:	2b00      	cmp	r3, #0
 8022600:	dd0f      	ble.n	8022622 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8022602:	142a      	asrs	r2, r5, #16
 8022604:	d406      	bmi.n	8022614 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 8022606:	4590      	cmp	r8, r2
 8022608:	dd04      	ble.n	8022614 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 802260a:	1422      	asrs	r2, r4, #16
 802260c:	d402      	bmi.n	8022614 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 802260e:	9802      	ldr	r0, [sp, #8]
 8022610:	4282      	cmp	r2, r0
 8022612:	db07      	blt.n	8022624 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 8022614:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022616:	3b01      	subs	r3, #1
 8022618:	3603      	adds	r6, #3
 802261a:	4415      	add	r5, r2
 802261c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802261e:	4414      	add	r4, r2
 8022620:	e7ed      	b.n	80225fe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 8022622:	d073      	beq.n	802270c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 8022624:	1e5a      	subs	r2, r3, #1
 8022626:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8022628:	fb00 5002 	mla	r0, r0, r2, r5
 802262c:	1400      	asrs	r0, r0, #16
 802262e:	d464      	bmi.n	80226fa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 8022630:	4580      	cmp	r8, r0
 8022632:	dd62      	ble.n	80226fa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 8022634:	9814      	ldr	r0, [sp, #80]	; 0x50
 8022636:	fb00 4202 	mla	r2, r0, r2, r4
 802263a:	1412      	asrs	r2, r2, #16
 802263c:	d45d      	bmi.n	80226fa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 802263e:	9802      	ldr	r0, [sp, #8]
 8022640:	4282      	cmp	r2, r0
 8022642:	da5a      	bge.n	80226fa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 8022644:	1cf0      	adds	r0, r6, #3
 8022646:	469a      	mov	sl, r3
 8022648:	f1ba 0f00 	cmp.w	sl, #0
 802264c:	dd59      	ble.n	8022702 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 802264e:	142a      	asrs	r2, r5, #16
 8022650:	9903      	ldr	r1, [sp, #12]
 8022652:	1427      	asrs	r7, r4, #16
 8022654:	fb01 2707 	mla	r7, r1, r7, r2
 8022658:	9904      	ldr	r1, [sp, #16]
 802265a:	087a      	lsrs	r2, r7, #1
 802265c:	5c8a      	ldrb	r2, [r1, r2]
 802265e:	07f9      	lsls	r1, r7, #31
 8022660:	bf54      	ite	pl
 8022662:	f002 020f 	andpl.w	r2, r2, #15
 8022666:	1112      	asrmi	r2, r2, #4
 8022668:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802266c:	b2d2      	uxtb	r2, r2
 802266e:	2a00      	cmp	r2, #0
 8022670:	d03b      	beq.n	80226ea <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 8022672:	497e      	ldr	r1, [pc, #504]	; (802286c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 8022674:	2aff      	cmp	r2, #255	; 0xff
 8022676:	680f      	ldr	r7, [r1, #0]
 8022678:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 802267c:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8022680:	b2ff      	uxtb	r7, r7
 8022682:	f000 80e9 	beq.w	8022858 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8022686:	fa1f fe82 	uxth.w	lr, r2
 802268a:	43d2      	mvns	r2, r2
 802268c:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 8022690:	fb17 f70e 	smulbb	r7, r7, lr
 8022694:	b2d2      	uxtb	r2, r2
 8022696:	fb19 f90e 	smulbb	r9, r9, lr
 802269a:	fb0c 7702 	mla	r7, ip, r2, r7
 802269e:	fb1b fe0e 	smulbb	lr, fp, lr
 80226a2:	b2bf      	uxth	r7, r7
 80226a4:	f107 0c01 	add.w	ip, r7, #1
 80226a8:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 80226ac:	123f      	asrs	r7, r7, #8
 80226ae:	f800 7c03 	strb.w	r7, [r0, #-3]
 80226b2:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 80226b6:	fb07 9902 	mla	r9, r7, r2, r9
 80226ba:	fa1f f989 	uxth.w	r9, r9
 80226be:	f109 0701 	add.w	r7, r9, #1
 80226c2:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 80226c6:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 80226ca:	fb07 ee02 	mla	lr, r7, r2, lr
 80226ce:	ea4f 2929 	mov.w	r9, r9, asr #8
 80226d2:	fa1f fe8e 	uxth.w	lr, lr
 80226d6:	f800 9c02 	strb.w	r9, [r0, #-2]
 80226da:	f10e 0201 	add.w	r2, lr, #1
 80226de:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 80226e2:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80226e6:	f800 ec01 	strb.w	lr, [r0, #-1]
 80226ea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80226ec:	3003      	adds	r0, #3
 80226ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80226f2:	4415      	add	r5, r2
 80226f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80226f6:	4414      	add	r4, r2
 80226f8:	e7a6      	b.n	8022648 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 80226fa:	2700      	movs	r7, #0
 80226fc:	1bda      	subs	r2, r3, r7
 80226fe:	2a00      	cmp	r2, #0
 8022700:	dc40      	bgt.n	8022784 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 8022702:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022706:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802270a:	441e      	add	r6, r3
 802270c:	9b01      	ldr	r3, [sp, #4]
 802270e:	2b00      	cmp	r3, #0
 8022710:	f340 80a9 	ble.w	8022866 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 8022714:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022718:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802271a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802271e:	eeb0 6a62 	vmov.f32	s12, s5
 8022722:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8022726:	ee31 1a05 	vadd.f32	s2, s2, s10
 802272a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802272e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8022732:	eeb0 6a43 	vmov.f32	s12, s6
 8022736:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802273a:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 802273e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022742:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022746:	ee77 2a62 	vsub.f32	s5, s14, s5
 802274a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802274e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022752:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022756:	ee12 2a90 	vmov	r2, s5
 802275a:	eef0 2a47 	vmov.f32	s5, s14
 802275e:	fb92 f3f3 	sdiv	r3, r2, r3
 8022762:	ee13 2a10 	vmov	r2, s6
 8022766:	9313      	str	r3, [sp, #76]	; 0x4c
 8022768:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802276a:	eeb0 3a67 	vmov.f32	s6, s15
 802276e:	fb92 f3f3 	sdiv	r3, r2, r3
 8022772:	9314      	str	r3, [sp, #80]	; 0x50
 8022774:	9b01      	ldr	r3, [sp, #4]
 8022776:	9a05      	ldr	r2, [sp, #20]
 8022778:	3b01      	subs	r3, #1
 802277a:	9301      	str	r3, [sp, #4]
 802277c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802277e:	bf08      	it	eq
 8022780:	4613      	moveq	r3, r2
 8022782:	e72f      	b.n	80225e4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 8022784:	142a      	asrs	r2, r5, #16
 8022786:	d458      	bmi.n	802283a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8022788:	4590      	cmp	r8, r2
 802278a:	dd56      	ble.n	802283a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 802278c:	1420      	asrs	r0, r4, #16
 802278e:	d454      	bmi.n	802283a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8022790:	9902      	ldr	r1, [sp, #8]
 8022792:	4288      	cmp	r0, r1
 8022794:	da51      	bge.n	802283a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8022796:	9903      	ldr	r1, [sp, #12]
 8022798:	fb00 2001 	mla	r0, r0, r1, r2
 802279c:	9904      	ldr	r1, [sp, #16]
 802279e:	0842      	lsrs	r2, r0, #1
 80227a0:	07c0      	lsls	r0, r0, #31
 80227a2:	5c8a      	ldrb	r2, [r1, r2]
 80227a4:	bf54      	ite	pl
 80227a6:	f002 020f 	andpl.w	r2, r2, #15
 80227aa:	1112      	asrmi	r2, r2, #4
 80227ac:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80227b0:	b2d2      	uxtb	r2, r2
 80227b2:	2a00      	cmp	r2, #0
 80227b4:	d041      	beq.n	802283a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 80227b6:	492d      	ldr	r1, [pc, #180]	; (802286c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 80227b8:	2aff      	cmp	r2, #255	; 0xff
 80227ba:	6808      	ldr	r0, [r1, #0]
 80227bc:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 80227c0:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 80227c4:	fa5f fc80 	uxtb.w	ip, r0
 80227c8:	ea4f 0047 	mov.w	r0, r7, lsl #1
 80227cc:	d03b      	beq.n	8022846 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29e>
 80227ce:	fa1f f982 	uxth.w	r9, r2
 80227d2:	4438      	add	r0, r7
 80227d4:	43d2      	mvns	r2, r2
 80227d6:	f816 e000 	ldrb.w	lr, [r6, r0]
 80227da:	fb1c fc09 	smulbb	ip, ip, r9
 80227de:	fb1a fa09 	smulbb	sl, sl, r9
 80227e2:	b2d2      	uxtb	r2, r2
 80227e4:	fb1b f909 	smulbb	r9, fp, r9
 80227e8:	fb0e cc02 	mla	ip, lr, r2, ip
 80227ec:	fa1f fc8c 	uxth.w	ip, ip
 80227f0:	f10c 0e01 	add.w	lr, ip, #1
 80227f4:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 80227f8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80227fc:	f806 c000 	strb.w	ip, [r6, r0]
 8022800:	4430      	add	r0, r6
 8022802:	f890 c001 	ldrb.w	ip, [r0, #1]
 8022806:	fb0c aa02 	mla	sl, ip, r2, sl
 802280a:	fa1f fa8a 	uxth.w	sl, sl
 802280e:	f10a 0c01 	add.w	ip, sl, #1
 8022812:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022816:	f890 c002 	ldrb.w	ip, [r0, #2]
 802281a:	fb0c 9902 	mla	r9, ip, r2, r9
 802281e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8022822:	fa1f f989 	uxth.w	r9, r9
 8022826:	f880 a001 	strb.w	sl, [r0, #1]
 802282a:	f109 0201 	add.w	r2, r9, #1
 802282e:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8022832:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022836:	f880 9002 	strb.w	r9, [r0, #2]
 802283a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802283c:	3701      	adds	r7, #1
 802283e:	4415      	add	r5, r2
 8022840:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022842:	4414      	add	r4, r2
 8022844:	e75a      	b.n	80226fc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 8022846:	4438      	add	r0, r7
 8022848:	f806 c000 	strb.w	ip, [r6, r0]
 802284c:	4430      	add	r0, r6
 802284e:	f880 a001 	strb.w	sl, [r0, #1]
 8022852:	f880 b002 	strb.w	fp, [r0, #2]
 8022856:	e7f0      	b.n	802283a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8022858:	f800 7c03 	strb.w	r7, [r0, #-3]
 802285c:	f800 9c02 	strb.w	r9, [r0, #-2]
 8022860:	f800 bc01 	strb.w	fp, [r0, #-1]
 8022864:	e741      	b.n	80226ea <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 8022866:	b007      	add	sp, #28
 8022868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802286c:	2000bf90 	.word	0x2000bf90

08022870 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8022870:	4770      	bx	lr

08022872 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8022872:	4770      	bx	lr

08022874 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8022874:	4770      	bx	lr

08022876 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8022876:	4770      	bx	lr

08022878 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8022878:	4770      	bx	lr

0802287a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 802287a:	4770      	bx	lr

0802287c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 802287c:	4770      	bx	lr

0802287e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 802287e:	4770      	bx	lr

08022880 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8022880:	4770      	bx	lr

08022882 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8022882:	4770      	bx	lr

08022884 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8022884:	4770      	bx	lr

08022886 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8022886:	4770      	bx	lr

08022888 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8022888:	4770      	bx	lr

0802288a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 802288a:	4770      	bx	lr

0802288c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 802288c:	4770      	bx	lr

0802288e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 802288e:	4770      	bx	lr

08022890 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8022890:	4770      	bx	lr

08022892 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8022892:	4770      	bx	lr

08022894 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8022894:	4770      	bx	lr

08022896 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8022896:	4770      	bx	lr

08022898 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8022898:	2bff      	cmp	r3, #255	; 0xff
 802289a:	b508      	push	{r3, lr}
 802289c:	d04f      	beq.n	802293e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 802289e:	2a2c      	cmp	r2, #44	; 0x2c
 80228a0:	d032      	beq.n	8022908 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 80228a2:	d80f      	bhi.n	80228c4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 80228a4:	2a08      	cmp	r2, #8
 80228a6:	d046      	beq.n	8022936 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 80228a8:	d805      	bhi.n	80228b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 80228aa:	2a04      	cmp	r2, #4
 80228ac:	d041      	beq.n	8022932 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 80228ae:	2a05      	cmp	r2, #5
 80228b0:	d03d      	beq.n	802292e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 80228b2:	2000      	movs	r0, #0
 80228b4:	e027      	b.n	8022906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80228b6:	2a0a      	cmp	r2, #10
 80228b8:	d03d      	beq.n	8022936 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 80228ba:	d301      	bcc.n	80228c0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 80228bc:	2a0b      	cmp	r2, #11
 80228be:	d1f8      	bne.n	80228b2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80228c0:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80228c2:	e020      	b.n	8022906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80228c4:	2a30      	cmp	r2, #48	; 0x30
 80228c6:	d038      	beq.n	802293a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 80228c8:	d808      	bhi.n	80228dc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 80228ca:	2a2e      	cmp	r2, #46	; 0x2e
 80228cc:	684b      	ldr	r3, [r1, #4]
 80228ce:	d029      	beq.n	8022924 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 80228d0:	d90b      	bls.n	80228ea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 80228d2:	781b      	ldrb	r3, [r3, #0]
 80228d4:	2b00      	cmp	r3, #0
 80228d6:	d1ec      	bne.n	80228b2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80228d8:	6a00      	ldr	r0, [r0, #32]
 80228da:	e014      	b.n	8022906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80228dc:	2a32      	cmp	r2, #50	; 0x32
 80228de:	d02c      	beq.n	802293a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 80228e0:	d301      	bcc.n	80228e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 80228e2:	2a33      	cmp	r2, #51	; 0x33
 80228e4:	d1e5      	bne.n	80228b2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80228e6:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80228e8:	e00d      	b.n	8022906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80228ea:	781b      	ldrb	r3, [r3, #0]
 80228ec:	2b01      	cmp	r3, #1
 80228ee:	d009      	beq.n	8022904 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 80228f0:	d3f2      	bcc.n	80228d8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 80228f2:	2b02      	cmp	r3, #2
 80228f4:	d1dd      	bne.n	80228b2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80228f6:	4b39      	ldr	r3, [pc, #228]	; (80229dc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 80228f8:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 80228fc:	4a38      	ldr	r2, [pc, #224]	; (80229e0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 80228fe:	4839      	ldr	r0, [pc, #228]	; (80229e4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 8022900:	f007 ff3e 	bl	802a780 <__assert_func>
 8022904:	6900      	ldr	r0, [r0, #16]
 8022906:	bd08      	pop	{r3, pc}
 8022908:	684b      	ldr	r3, [r1, #4]
 802290a:	781b      	ldrb	r3, [r3, #0]
 802290c:	2b01      	cmp	r3, #1
 802290e:	d007      	beq.n	8022920 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 8022910:	d30b      	bcc.n	802292a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8022912:	2b02      	cmp	r3, #2
 8022914:	d1cd      	bne.n	80228b2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8022916:	4b31      	ldr	r3, [pc, #196]	; (80229dc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8022918:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 802291c:	4a30      	ldr	r2, [pc, #192]	; (80229e0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 802291e:	e7ee      	b.n	80228fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8022920:	6880      	ldr	r0, [r0, #8]
 8022922:	e7f0      	b.n	8022906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8022924:	781b      	ldrb	r3, [r3, #0]
 8022926:	2b00      	cmp	r3, #0
 8022928:	d1c3      	bne.n	80228b2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 802292a:	6980      	ldr	r0, [r0, #24]
 802292c:	e7eb      	b.n	8022906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 802292e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8022930:	e7e9      	b.n	8022906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8022932:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8022934:	e7e7      	b.n	8022906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8022936:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8022938:	e7e5      	b.n	8022906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 802293a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 802293c:	e7e3      	b.n	8022906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 802293e:	2a2c      	cmp	r2, #44	; 0x2c
 8022940:	d030      	beq.n	80229a4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 8022942:	d80f      	bhi.n	8022964 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 8022944:	2a08      	cmp	r2, #8
 8022946:	d044      	beq.n	80229d2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8022948:	d805      	bhi.n	8022956 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 802294a:	2a04      	cmp	r2, #4
 802294c:	d03f      	beq.n	80229ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 802294e:	2a05      	cmp	r2, #5
 8022950:	d1af      	bne.n	80228b2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8022952:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8022954:	e7d7      	b.n	8022906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8022956:	2a0a      	cmp	r2, #10
 8022958:	d03b      	beq.n	80229d2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 802295a:	d301      	bcc.n	8022960 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 802295c:	2a0b      	cmp	r2, #11
 802295e:	d1a8      	bne.n	80228b2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8022960:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8022962:	e7d0      	b.n	8022906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8022964:	2a30      	cmp	r2, #48	; 0x30
 8022966:	d036      	beq.n	80229d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8022968:	d808      	bhi.n	802297c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 802296a:	2a2e      	cmp	r2, #46	; 0x2e
 802296c:	684b      	ldr	r3, [r1, #4]
 802296e:	d028      	beq.n	80229c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 8022970:	d90b      	bls.n	802298a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 8022972:	781b      	ldrb	r3, [r3, #0]
 8022974:	2b00      	cmp	r3, #0
 8022976:	d19c      	bne.n	80228b2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8022978:	6a40      	ldr	r0, [r0, #36]	; 0x24
 802297a:	e7c4      	b.n	8022906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 802297c:	2a32      	cmp	r2, #50	; 0x32
 802297e:	d02a      	beq.n	80229d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8022980:	d301      	bcc.n	8022986 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 8022982:	2a33      	cmp	r2, #51	; 0x33
 8022984:	d195      	bne.n	80228b2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8022986:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8022988:	e7bd      	b.n	8022906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 802298a:	781b      	ldrb	r3, [r3, #0]
 802298c:	2b01      	cmp	r3, #1
 802298e:	d007      	beq.n	80229a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 8022990:	d3f2      	bcc.n	8022978 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 8022992:	2b02      	cmp	r3, #2
 8022994:	d18d      	bne.n	80228b2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8022996:	4b11      	ldr	r3, [pc, #68]	; (80229dc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8022998:	f240 31e1 	movw	r1, #993	; 0x3e1
 802299c:	4a10      	ldr	r2, [pc, #64]	; (80229e0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 802299e:	e7ae      	b.n	80228fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80229a0:	6940      	ldr	r0, [r0, #20]
 80229a2:	e7b0      	b.n	8022906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80229a4:	684b      	ldr	r3, [r1, #4]
 80229a6:	781b      	ldrb	r3, [r3, #0]
 80229a8:	2b01      	cmp	r3, #1
 80229aa:	d008      	beq.n	80229be <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 80229ac:	d30d      	bcc.n	80229ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 80229ae:	2b02      	cmp	r3, #2
 80229b0:	f47f af7f 	bne.w	80228b2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80229b4:	4b09      	ldr	r3, [pc, #36]	; (80229dc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 80229b6:	f240 31ed 	movw	r1, #1005	; 0x3ed
 80229ba:	4a09      	ldr	r2, [pc, #36]	; (80229e0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 80229bc:	e79f      	b.n	80228fe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80229be:	68c0      	ldr	r0, [r0, #12]
 80229c0:	e7a1      	b.n	8022906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80229c2:	781b      	ldrb	r3, [r3, #0]
 80229c4:	2b00      	cmp	r3, #0
 80229c6:	f47f af74 	bne.w	80228b2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80229ca:	69c0      	ldr	r0, [r0, #28]
 80229cc:	e79b      	b.n	8022906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80229ce:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80229d0:	e799      	b.n	8022906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80229d2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80229d4:	e797      	b.n	8022906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80229d6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80229d8:	e795      	b.n	8022906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80229da:	bf00      	nop
 80229dc:	0802fb83 	.word	0x0802fb83
 80229e0:	08030337 	.word	0x08030337
 80229e4:	0802fbcf 	.word	0x0802fbcf

080229e8 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 80229e8:	b508      	push	{r3, lr}
 80229ea:	4b06      	ldr	r3, [pc, #24]	; (8022a04 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 80229ec:	8818      	ldrh	r0, [r3, #0]
 80229ee:	b928      	cbnz	r0, 80229fc <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 80229f0:	4b05      	ldr	r3, [pc, #20]	; (8022a08 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 80229f2:	21d7      	movs	r1, #215	; 0xd7
 80229f4:	4a05      	ldr	r2, [pc, #20]	; (8022a0c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 80229f6:	4806      	ldr	r0, [pc, #24]	; (8022a10 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 80229f8:	f007 fec2 	bl	802a780 <__assert_func>
 80229fc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022a00:	b280      	uxth	r0, r0
 8022a02:	bd08      	pop	{r3, pc}
 8022a04:	2000bf60 	.word	0x2000bf60
 8022a08:	0802fe1e 	.word	0x0802fe1e
 8022a0c:	080302fc 	.word	0x080302fc
 8022a10:	0802fe60 	.word	0x0802fe60

08022a14 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8022a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022a18:	4616      	mov	r6, r2
 8022a1a:	b087      	sub	sp, #28
 8022a1c:	461f      	mov	r7, r3
 8022a1e:	b33b      	cbz	r3, 8022a70 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8022a20:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8022a24:	b323      	cbz	r3, 8022a70 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8022a26:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8022a2a:	b30b      	cbz	r3, 8022a70 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8022a2c:	6808      	ldr	r0, [r1, #0]
 8022a2e:	ab04      	add	r3, sp, #16
 8022a30:	6849      	ldr	r1, [r1, #4]
 8022a32:	4c5a      	ldr	r4, [pc, #360]	; (8022b9c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 8022a34:	c303      	stmia	r3!, {r0, r1}
 8022a36:	a804      	add	r0, sp, #16
 8022a38:	f7fb fd34 	bl	801e4a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022a3c:	6820      	ldr	r0, [r4, #0]
 8022a3e:	6803      	ldr	r3, [r0, #0]
 8022a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022a42:	4798      	blx	r3
 8022a44:	2fff      	cmp	r7, #255	; 0xff
 8022a46:	4623      	mov	r3, r4
 8022a48:	d015      	beq.n	8022a76 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8022a4a:	f010 0f08 	tst.w	r0, #8
 8022a4e:	d015      	beq.n	8022a7c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 8022a50:	6818      	ldr	r0, [r3, #0]
 8022a52:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8022a56:	6801      	ldr	r1, [r0, #0]
 8022a58:	9401      	str	r4, [sp, #4]
 8022a5a:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8022a5e:	9702      	str	r7, [sp, #8]
 8022a60:	9400      	str	r4, [sp, #0]
 8022a62:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8022a66:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 8022a68:	4631      	mov	r1, r6
 8022a6a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8022a6e:	47a0      	blx	r4
 8022a70:	b007      	add	sp, #28
 8022a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022a76:	f010 0f02 	tst.w	r0, #2
 8022a7a:	e7e8      	b.n	8022a4e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3a>
 8022a7c:	6818      	ldr	r0, [r3, #0]
 8022a7e:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 8022a82:	6803      	ldr	r3, [r0, #0]
 8022a84:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 8022a88:	6a1b      	ldr	r3, [r3, #32]
 8022a8a:	4798      	blx	r3
 8022a8c:	4944      	ldr	r1, [pc, #272]	; (8022ba0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 8022a8e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8022a92:	2fff      	cmp	r7, #255	; 0xff
 8022a94:	f8b1 c000 	ldrh.w	ip, [r1]
 8022a98:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 8022a9c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022aa0:	4688      	mov	r8, r1
 8022aa2:	fb0c 2303 	mla	r3, ip, r3, r2
 8022aa6:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 8022aaa:	b2f2      	uxtb	r2, r6
 8022aac:	ea24 76e4 	bic.w	r6, r4, r4, asr #31
 8022ab0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022ab4:	4418      	add	r0, r3
 8022ab6:	d112      	bne.n	8022ade <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xca>
 8022ab8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8022abc:	2100      	movs	r1, #0
 8022abe:	42a9      	cmp	r1, r5
 8022ac0:	da66      	bge.n	8022b90 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 8022ac2:	4603      	mov	r3, r0
 8022ac4:	2700      	movs	r7, #0
 8022ac6:	42a7      	cmp	r7, r4
 8022ac8:	f103 0303 	add.w	r3, r3, #3
 8022acc:	da57      	bge.n	8022b7e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16a>
 8022ace:	f803 2c03 	strb.w	r2, [r3, #-3]
 8022ad2:	3701      	adds	r7, #1
 8022ad4:	f803 ec02 	strb.w	lr, [r3, #-2]
 8022ad8:	f803 cc01 	strb.w	ip, [r3, #-1]
 8022adc:	e7f3      	b.n	8022ac6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb2>
 8022ade:	b2bb      	uxth	r3, r7
 8022ae0:	f04f 0800 	mov.w	r8, #0
 8022ae4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8022ae8:	fb0c fc03 	mul.w	ip, ip, r3
 8022aec:	fb0e fe03 	mul.w	lr, lr, r3
 8022af0:	435a      	muls	r2, r3
 8022af2:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 8022af6:	460f      	mov	r7, r1
 8022af8:	b29b      	uxth	r3, r3
 8022afa:	45a8      	cmp	r8, r5
 8022afc:	da48      	bge.n	8022b90 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 8022afe:	4601      	mov	r1, r0
 8022b00:	f04f 0a00 	mov.w	sl, #0
 8022b04:	45a2      	cmp	sl, r4
 8022b06:	f101 0103 	add.w	r1, r1, #3
 8022b0a:	da2f      	bge.n	8022b6c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x158>
 8022b0c:	f811 9c03 	ldrb.w	r9, [r1, #-3]
 8022b10:	f10a 0a01 	add.w	sl, sl, #1
 8022b14:	fb19 f903 	smulbb	r9, r9, r3
 8022b18:	4491      	add	r9, r2
 8022b1a:	fa1f f989 	uxth.w	r9, r9
 8022b1e:	f109 0b01 	add.w	fp, r9, #1
 8022b22:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8022b26:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022b2a:	f801 9c03 	strb.w	r9, [r1, #-3]
 8022b2e:	f811 9c02 	ldrb.w	r9, [r1, #-2]
 8022b32:	fb19 f903 	smulbb	r9, r9, r3
 8022b36:	44f1      	add	r9, lr
 8022b38:	fa1f f989 	uxth.w	r9, r9
 8022b3c:	f109 0b01 	add.w	fp, r9, #1
 8022b40:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8022b44:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022b48:	f801 9c02 	strb.w	r9, [r1, #-2]
 8022b4c:	f811 9c01 	ldrb.w	r9, [r1, #-1]
 8022b50:	fb19 f903 	smulbb	r9, r9, r3
 8022b54:	44e1      	add	r9, ip
 8022b56:	fa1f f989 	uxth.w	r9, r9
 8022b5a:	f109 0b01 	add.w	fp, r9, #1
 8022b5e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8022b62:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022b66:	f801 9c01 	strb.w	r9, [r1, #-1]
 8022b6a:	e7cb      	b.n	8022b04 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xf0>
 8022b6c:	8839      	ldrh	r1, [r7, #0]
 8022b6e:	f108 0801 	add.w	r8, r8, #1
 8022b72:	1b09      	subs	r1, r1, r4
 8022b74:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8022b78:	4431      	add	r1, r6
 8022b7a:	4408      	add	r0, r1
 8022b7c:	e7bd      	b.n	8022afa <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xe6>
 8022b7e:	f8b8 3000 	ldrh.w	r3, [r8]
 8022b82:	3101      	adds	r1, #1
 8022b84:	1b1b      	subs	r3, r3, r4
 8022b86:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022b8a:	4433      	add	r3, r6
 8022b8c:	4418      	add	r0, r3
 8022b8e:	e796      	b.n	8022abe <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xaa>
 8022b90:	4b02      	ldr	r3, [pc, #8]	; (8022b9c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 8022b92:	6818      	ldr	r0, [r3, #0]
 8022b94:	6803      	ldr	r3, [r0, #0]
 8022b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022b98:	4798      	blx	r3
 8022b9a:	e769      	b.n	8022a70 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8022b9c:	2000bf68 	.word	0x2000bf68
 8022ba0:	2000bf60 	.word	0x2000bf60

08022ba4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8022ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022ba8:	b08d      	sub	sp, #52	; 0x34
 8022baa:	460c      	mov	r4, r1
 8022bac:	4617      	mov	r7, r2
 8022bae:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
 8022bb2:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 8022bb6:	2e00      	cmp	r6, #0
 8022bb8:	d04a      	beq.n	8022c50 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8022bba:	6810      	ldr	r0, [r2, #0]
 8022bbc:	ad08      	add	r5, sp, #32
 8022bbe:	6851      	ldr	r1, [r2, #4]
 8022bc0:	c503      	stmia	r5!, {r0, r1}
 8022bc2:	6818      	ldr	r0, [r3, #0]
 8022bc4:	ad0a      	add	r5, sp, #40	; 0x28
 8022bc6:	6859      	ldr	r1, [r3, #4]
 8022bc8:	c503      	stmia	r5!, {r0, r1}
 8022bca:	a808      	add	r0, sp, #32
 8022bcc:	f7fb fc6a 	bl	801e4a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022bd0:	4639      	mov	r1, r7
 8022bd2:	a80a      	add	r0, sp, #40	; 0x28
 8022bd4:	4f59      	ldr	r7, [pc, #356]	; (8022d3c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>)
 8022bd6:	f7fb fc4d 	bl	801e474 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022bda:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8022bde:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8022be2:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8022be6:	6838      	ldr	r0, [r7, #0]
 8022be8:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022bec:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 8022bf0:	f9bd 802e 	ldrsh.w	r8, [sp, #46]	; 0x2e
 8022bf4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8022bf8:	440c      	add	r4, r1
 8022bfa:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8022bfe:	440a      	add	r2, r1
 8022c00:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8022c04:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8022c08:	4413      	add	r3, r2
 8022c0a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8022c0e:	6803      	ldr	r3, [r0, #0]
 8022c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022c12:	4798      	blx	r3
 8022c14:	2eff      	cmp	r6, #255	; 0xff
 8022c16:	f000 8089 	beq.w	8022d2c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x188>
 8022c1a:	0743      	lsls	r3, r0, #29
 8022c1c:	d405      	bmi.n	8022c2a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x86>
 8022c1e:	f1b9 0f00 	cmp.w	r9, #0
 8022c22:	d018      	beq.n	8022c56 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 8022c24:	f010 0f10 	tst.w	r0, #16
 8022c28:	d015      	beq.n	8022c56 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 8022c2a:	6838      	ldr	r0, [r7, #0]
 8022c2c:	b2ad      	uxth	r5, r5
 8022c2e:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8022c32:	6801      	ldr	r1, [r0, #0]
 8022c34:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8022c38:	9500      	str	r5, [sp, #0]
 8022c3a:	e9cd 6903 	strd	r6, r9, [sp, #12]
 8022c3e:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 8022c42:	9602      	str	r6, [sp, #8]
 8022c44:	fa1f f688 	uxth.w	r6, r8
 8022c48:	9601      	str	r6, [sp, #4]
 8022c4a:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 8022c4c:	4621      	mov	r1, r4
 8022c4e:	47a8      	blx	r5
 8022c50:	b00d      	add	sp, #52	; 0x34
 8022c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022c56:	6838      	ldr	r0, [r7, #0]
 8022c58:	6803      	ldr	r3, [r0, #0]
 8022c5a:	6a1b      	ldr	r3, [r3, #32]
 8022c5c:	4798      	blx	r3
 8022c5e:	4a38      	ldr	r2, [pc, #224]	; (8022d40 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>)
 8022c60:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8022c64:	2eff      	cmp	r6, #255	; 0xff
 8022c66:	8813      	ldrh	r3, [r2, #0]
 8022c68:	f9bd c02a 	ldrsh.w	ip, [sp, #42]	; 0x2a
 8022c6c:	fb0c 1303 	mla	r3, ip, r3, r1
 8022c70:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8022c74:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022c78:	4418      	add	r0, r3
 8022c7a:	d032      	beq.n	8022ce2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 8022c7c:	f1c6 03ff 	rsb	r3, r6, #255	; 0xff
 8022c80:	f04f 0c00 	mov.w	ip, #0
 8022c84:	ea21 7ae1 	bic.w	sl, r1, r1, asr #31
 8022c88:	9306      	str	r3, [sp, #24]
 8022c8a:	45c4      	cmp	ip, r8
 8022c8c:	da49      	bge.n	8022d22 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 8022c8e:	4686      	mov	lr, r0
 8022c90:	46a1      	mov	r9, r4
 8022c92:	eba9 0304 	sub.w	r3, r9, r4
 8022c96:	428b      	cmp	r3, r1
 8022c98:	da13      	bge.n	8022cc2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11e>
 8022c9a:	f819 3b01 	ldrb.w	r3, [r9], #1
 8022c9e:	f89e b000 	ldrb.w	fp, [lr]
 8022ca2:	9307      	str	r3, [sp, #28]
 8022ca4:	9b06      	ldr	r3, [sp, #24]
 8022ca6:	fb1b fb03 	smulbb	fp, fp, r3
 8022caa:	9b07      	ldr	r3, [sp, #28]
 8022cac:	fb03 b306 	mla	r3, r3, r6, fp
 8022cb0:	b29b      	uxth	r3, r3
 8022cb2:	f103 0b01 	add.w	fp, r3, #1
 8022cb6:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 8022cba:	121b      	asrs	r3, r3, #8
 8022cbc:	f80e 3b01 	strb.w	r3, [lr], #1
 8022cc0:	e7e7      	b.n	8022c92 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xee>
 8022cc2:	8813      	ldrh	r3, [r2, #0]
 8022cc4:	f10c 0c01 	add.w	ip, ip, #1
 8022cc8:	1b5b      	subs	r3, r3, r5
 8022cca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022cce:	4453      	add	r3, sl
 8022cd0:	4418      	add	r0, r3
 8022cd2:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8022cd6:	1b5b      	subs	r3, r3, r5
 8022cd8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022cdc:	4453      	add	r3, sl
 8022cde:	441c      	add	r4, r3
 8022ce0:	e7d3      	b.n	8022c8a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe6>
 8022ce2:	2600      	movs	r6, #0
 8022ce4:	ea21 7ce1 	bic.w	ip, r1, r1, asr #31
 8022ce8:	4546      	cmp	r6, r8
 8022cea:	da1a      	bge.n	8022d22 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 8022cec:	f100 3eff 	add.w	lr, r0, #4294967295
 8022cf0:	4623      	mov	r3, r4
 8022cf2:	eba3 0904 	sub.w	r9, r3, r4
 8022cf6:	4589      	cmp	r9, r1
 8022cf8:	da04      	bge.n	8022d04 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>
 8022cfa:	f813 9b01 	ldrb.w	r9, [r3], #1
 8022cfe:	f80e 9f01 	strb.w	r9, [lr, #1]!
 8022d02:	e7f6      	b.n	8022cf2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x14e>
 8022d04:	8813      	ldrh	r3, [r2, #0]
 8022d06:	3601      	adds	r6, #1
 8022d08:	1b5b      	subs	r3, r3, r5
 8022d0a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022d0e:	4463      	add	r3, ip
 8022d10:	4418      	add	r0, r3
 8022d12:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8022d16:	1b5b      	subs	r3, r3, r5
 8022d18:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022d1c:	4463      	add	r3, ip
 8022d1e:	441c      	add	r4, r3
 8022d20:	e7e2      	b.n	8022ce8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x144>
 8022d22:	6838      	ldr	r0, [r7, #0]
 8022d24:	6803      	ldr	r3, [r0, #0]
 8022d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022d28:	4798      	blx	r3
 8022d2a:	e791      	b.n	8022c50 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8022d2c:	f1b9 0f00 	cmp.w	r9, #0
 8022d30:	f47f af78 	bne.w	8022c24 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x80>
 8022d34:	f010 0f01 	tst.w	r0, #1
 8022d38:	e776      	b.n	8022c28 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x84>
 8022d3a:	bf00      	nop
 8022d3c:	2000bf68 	.word	0x2000bf68
 8022d40:	2000bf60 	.word	0x2000bf60

08022d44 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8022d44:	b510      	push	{r4, lr}
 8022d46:	4604      	mov	r4, r0
 8022d48:	2104      	movs	r1, #4
 8022d4a:	f007 fcee 	bl	802a72a <_ZdlPvj>
 8022d4e:	4620      	mov	r0, r4
 8022d50:	bd10      	pop	{r4, pc}

08022d52 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8022d52:	b510      	push	{r4, lr}
 8022d54:	4604      	mov	r4, r0
 8022d56:	2104      	movs	r1, #4
 8022d58:	f007 fce7 	bl	802a72a <_ZdlPvj>
 8022d5c:	4620      	mov	r0, r4
 8022d5e:	bd10      	pop	{r4, pc}

08022d60 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8022d60:	b510      	push	{r4, lr}
 8022d62:	4604      	mov	r4, r0
 8022d64:	2104      	movs	r1, #4
 8022d66:	f007 fce0 	bl	802a72a <_ZdlPvj>
 8022d6a:	4620      	mov	r0, r4
 8022d6c:	bd10      	pop	{r4, pc}

08022d6e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8022d6e:	b510      	push	{r4, lr}
 8022d70:	4604      	mov	r4, r0
 8022d72:	2104      	movs	r1, #4
 8022d74:	f007 fcd9 	bl	802a72a <_ZdlPvj>
 8022d78:	4620      	mov	r0, r4
 8022d7a:	bd10      	pop	{r4, pc}

08022d7c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8022d7c:	b510      	push	{r4, lr}
 8022d7e:	4604      	mov	r4, r0
 8022d80:	2104      	movs	r1, #4
 8022d82:	f007 fcd2 	bl	802a72a <_ZdlPvj>
 8022d86:	4620      	mov	r0, r4
 8022d88:	bd10      	pop	{r4, pc}

08022d8a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8022d8a:	b510      	push	{r4, lr}
 8022d8c:	4604      	mov	r4, r0
 8022d8e:	2104      	movs	r1, #4
 8022d90:	f007 fccb 	bl	802a72a <_ZdlPvj>
 8022d94:	4620      	mov	r0, r4
 8022d96:	bd10      	pop	{r4, pc}

08022d98 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8022d98:	b510      	push	{r4, lr}
 8022d9a:	4604      	mov	r4, r0
 8022d9c:	2104      	movs	r1, #4
 8022d9e:	f007 fcc4 	bl	802a72a <_ZdlPvj>
 8022da2:	4620      	mov	r0, r4
 8022da4:	bd10      	pop	{r4, pc}

08022da6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8022da6:	b510      	push	{r4, lr}
 8022da8:	4604      	mov	r4, r0
 8022daa:	2104      	movs	r1, #4
 8022dac:	f007 fcbd 	bl	802a72a <_ZdlPvj>
 8022db0:	4620      	mov	r0, r4
 8022db2:	bd10      	pop	{r4, pc}

08022db4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8022db4:	b510      	push	{r4, lr}
 8022db6:	4604      	mov	r4, r0
 8022db8:	2104      	movs	r1, #4
 8022dba:	f007 fcb6 	bl	802a72a <_ZdlPvj>
 8022dbe:	4620      	mov	r0, r4
 8022dc0:	bd10      	pop	{r4, pc}

08022dc2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8022dc2:	b510      	push	{r4, lr}
 8022dc4:	4604      	mov	r4, r0
 8022dc6:	2104      	movs	r1, #4
 8022dc8:	f007 fcaf 	bl	802a72a <_ZdlPvj>
 8022dcc:	4620      	mov	r0, r4
 8022dce:	bd10      	pop	{r4, pc}

08022dd0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8022dd0:	b510      	push	{r4, lr}
 8022dd2:	4604      	mov	r4, r0
 8022dd4:	2104      	movs	r1, #4
 8022dd6:	f007 fca8 	bl	802a72a <_ZdlPvj>
 8022dda:	4620      	mov	r0, r4
 8022ddc:	bd10      	pop	{r4, pc}

08022dde <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8022dde:	b510      	push	{r4, lr}
 8022de0:	4604      	mov	r4, r0
 8022de2:	2104      	movs	r1, #4
 8022de4:	f007 fca1 	bl	802a72a <_ZdlPvj>
 8022de8:	4620      	mov	r0, r4
 8022dea:	bd10      	pop	{r4, pc}

08022dec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8022dec:	b510      	push	{r4, lr}
 8022dee:	4604      	mov	r4, r0
 8022df0:	2104      	movs	r1, #4
 8022df2:	f007 fc9a 	bl	802a72a <_ZdlPvj>
 8022df6:	4620      	mov	r0, r4
 8022df8:	bd10      	pop	{r4, pc}

08022dfa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8022dfa:	b510      	push	{r4, lr}
 8022dfc:	4604      	mov	r4, r0
 8022dfe:	2104      	movs	r1, #4
 8022e00:	f007 fc93 	bl	802a72a <_ZdlPvj>
 8022e04:	4620      	mov	r0, r4
 8022e06:	bd10      	pop	{r4, pc}

08022e08 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8022e08:	b510      	push	{r4, lr}
 8022e0a:	4604      	mov	r4, r0
 8022e0c:	2104      	movs	r1, #4
 8022e0e:	f007 fc8c 	bl	802a72a <_ZdlPvj>
 8022e12:	4620      	mov	r0, r4
 8022e14:	bd10      	pop	{r4, pc}

08022e16 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8022e16:	b510      	push	{r4, lr}
 8022e18:	4604      	mov	r4, r0
 8022e1a:	2104      	movs	r1, #4
 8022e1c:	f007 fc85 	bl	802a72a <_ZdlPvj>
 8022e20:	4620      	mov	r0, r4
 8022e22:	bd10      	pop	{r4, pc}

08022e24 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8022e24:	b510      	push	{r4, lr}
 8022e26:	4604      	mov	r4, r0
 8022e28:	2104      	movs	r1, #4
 8022e2a:	f007 fc7e 	bl	802a72a <_ZdlPvj>
 8022e2e:	4620      	mov	r0, r4
 8022e30:	bd10      	pop	{r4, pc}

08022e32 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8022e32:	b510      	push	{r4, lr}
 8022e34:	4604      	mov	r4, r0
 8022e36:	2104      	movs	r1, #4
 8022e38:	f007 fc77 	bl	802a72a <_ZdlPvj>
 8022e3c:	4620      	mov	r0, r4
 8022e3e:	bd10      	pop	{r4, pc}

08022e40 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8022e40:	b510      	push	{r4, lr}
 8022e42:	4604      	mov	r4, r0
 8022e44:	2104      	movs	r1, #4
 8022e46:	f007 fc70 	bl	802a72a <_ZdlPvj>
 8022e4a:	4620      	mov	r0, r4
 8022e4c:	bd10      	pop	{r4, pc}

08022e4e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8022e4e:	b510      	push	{r4, lr}
 8022e50:	4604      	mov	r4, r0
 8022e52:	2104      	movs	r1, #4
 8022e54:	f007 fc69 	bl	802a72a <_ZdlPvj>
 8022e58:	4620      	mov	r0, r4
 8022e5a:	bd10      	pop	{r4, pc}

08022e5c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8022e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e60:	4d9e      	ldr	r5, [pc, #632]	; (80230dc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 8022e62:	4690      	mov	r8, r2
 8022e64:	b08f      	sub	sp, #60	; 0x3c
 8022e66:	4604      	mov	r4, r0
 8022e68:	682a      	ldr	r2, [r5, #0]
 8022e6a:	4689      	mov	r9, r1
 8022e6c:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8022e70:	2a02      	cmp	r2, #2
 8022e72:	d106      	bne.n	8022e82 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 8022e74:	4b9a      	ldr	r3, [pc, #616]	; (80230e0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 8022e76:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8022e7a:	4a9a      	ldr	r2, [pc, #616]	; (80230e4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 8022e7c:	489a      	ldr	r0, [pc, #616]	; (80230e8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 8022e7e:	f007 fc7f 	bl	802a780 <__assert_func>
 8022e82:	ae0e      	add	r6, sp, #56	; 0x38
 8022e84:	f826 3d24 	strh.w	r3, [r6, #-36]!
 8022e88:	4630      	mov	r0, r6
 8022e8a:	f7fe f8b3 	bl	8020ff4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8022e8e:	6823      	ldr	r3, [r4, #0]
 8022e90:	4607      	mov	r7, r0
 8022e92:	4620      	mov	r0, r4
 8022e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022e96:	4798      	blx	r3
 8022e98:	4287      	cmp	r7, r0
 8022e9a:	d004      	beq.n	8022ea6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 8022e9c:	4b93      	ldr	r3, [pc, #588]	; (80230ec <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 8022e9e:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8022ea2:	4a90      	ldr	r2, [pc, #576]	; (80230e4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 8022ea4:	e7ea      	b.n	8022e7c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8022ea6:	4630      	mov	r0, r6
 8022ea8:	f7fe f820 	bl	8020eec <_ZNK8touchgfx6Bitmap7getDataEv>
 8022eac:	4607      	mov	r7, r0
 8022eae:	b920      	cbnz	r0, 8022eba <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 8022eb0:	4b8f      	ldr	r3, [pc, #572]	; (80230f0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 8022eb2:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8022eb6:	4a8b      	ldr	r2, [pc, #556]	; (80230e4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 8022eb8:	e7e0      	b.n	8022e7c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8022eba:	f8d8 0000 	ldr.w	r0, [r8]
 8022ebe:	ab06      	add	r3, sp, #24
 8022ec0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8022ec4:	f9b8 a000 	ldrsh.w	sl, [r8]
 8022ec8:	c303      	stmia	r3!, {r0, r1}
 8022eca:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8022ece:	ab08      	add	r3, sp, #32
 8022ed0:	f8d9 0000 	ldr.w	r0, [r9]
 8022ed4:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 8022ed8:	c303      	stmia	r3!, {r0, r1}
 8022eda:	4630      	mov	r0, r6
 8022edc:	f7fd fefe 	bl	8020cdc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8022ee0:	4680      	mov	r8, r0
 8022ee2:	4630      	mov	r0, r6
 8022ee4:	4e83      	ldr	r6, [pc, #524]	; (80230f4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x298>)
 8022ee6:	f7fd ff33 	bl	8020d50 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8022eea:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 8022eee:	f10d 0920 	add.w	r9, sp, #32
 8022ef2:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 8022ef6:	a806      	add	r0, sp, #24
 8022ef8:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8022efc:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 8022f00:	f7fb fad0 	bl	801e4a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022f04:	4648      	mov	r0, r9
 8022f06:	f7fb facd 	bl	801e4a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022f0a:	a80a      	add	r0, sp, #40	; 0x28
 8022f0c:	f7fb faca 	bl	801e4a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022f10:	4b79      	ldr	r3, [pc, #484]	; (80230f8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 8022f12:	2100      	movs	r1, #0
 8022f14:	f9b6 2000 	ldrsh.w	r2, [r6]
 8022f18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8022f1c:	4648      	mov	r0, r9
 8022f1e:	910c      	str	r1, [sp, #48]	; 0x30
 8022f20:	a90c      	add	r1, sp, #48	; 0x30
 8022f22:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8022f26:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8022f2a:	f7f8 f8ab 	bl	801b084 <_ZN8touchgfx4RectaNERKS0_>
 8022f2e:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 8022f32:	9602      	str	r6, [sp, #8]
 8022f34:	f1bc 0f00 	cmp.w	ip, #0
 8022f38:	f000 80a4 	beq.w	8023084 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8022f3c:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 8022f40:	2e00      	cmp	r6, #0
 8022f42:	f000 809f 	beq.w	8023084 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8022f46:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 8022f4a:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 8022f4e:	4288      	cmp	r0, r1
 8022f50:	db36      	blt.n	8022fc0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 8022f52:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 8022f56:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8022f5a:	429a      	cmp	r2, r3
 8022f5c:	db30      	blt.n	8022fc0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 8022f5e:	4460      	add	r0, ip
 8022f60:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 8022f64:	4461      	add	r1, ip
 8022f66:	b200      	sxth	r0, r0
 8022f68:	b209      	sxth	r1, r1
 8022f6a:	4288      	cmp	r0, r1
 8022f6c:	dc28      	bgt.n	8022fc0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 8022f6e:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8022f72:	4432      	add	r2, r6
 8022f74:	440b      	add	r3, r1
 8022f76:	b212      	sxth	r2, r2
 8022f78:	b21b      	sxth	r3, r3
 8022f7a:	429a      	cmp	r2, r3
 8022f7c:	dc20      	bgt.n	8022fc0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 8022f7e:	6823      	ldr	r3, [r4, #0]
 8022f80:	4620      	mov	r0, r4
 8022f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022f84:	4798      	blx	r3
 8022f86:	4682      	mov	sl, r0
 8022f88:	6828      	ldr	r0, [r5, #0]
 8022f8a:	6803      	ldr	r3, [r0, #0]
 8022f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022f8e:	4798      	blx	r3
 8022f90:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 8022f94:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8022f98:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8022f9c:	9303      	str	r3, [sp, #12]
 8022f9e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8022fa2:	1a9b      	subs	r3, r3, r2
 8022fa4:	b29b      	uxth	r3, r3
 8022fa6:	b21c      	sxth	r4, r3
 8022fa8:	2c00      	cmp	r4, #0
 8022faa:	dc0e      	bgt.n	8022fca <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16e>
 8022fac:	b134      	cbz	r4, 8022fbc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 8022fae:	f8ad 2020 	strh.w	r2, [sp, #32]
 8022fb2:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8022fb6:	4413      	add	r3, r2
 8022fb8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8022fbc:	463c      	mov	r4, r7
 8022fbe:	e00b      	b.n	8022fd8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x17c>
 8022fc0:	4b4e      	ldr	r3, [pc, #312]	; (80230fc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a0>)
 8022fc2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8022fc6:	4a47      	ldr	r2, [pc, #284]	; (80230e4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 8022fc8:	e758      	b.n	8022e7c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8022fca:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022fce:	ebab 0303 	sub.w	r3, fp, r3
 8022fd2:	443c      	add	r4, r7
 8022fd4:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8022fd8:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8022fdc:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8022fe0:	1a9b      	subs	r3, r3, r2
 8022fe2:	b29b      	uxth	r3, r3
 8022fe4:	b219      	sxth	r1, r3
 8022fe6:	2900      	cmp	r1, #0
 8022fe8:	dd50      	ble.n	802308c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x230>
 8022fea:	9a03      	ldr	r2, [sp, #12]
 8022fec:	fb02 4401 	mla	r4, r2, r1, r4
 8022ff0:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 8022ff4:	1ad3      	subs	r3, r2, r3
 8022ff6:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8022ffa:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 8022ffe:	f1bc 0f00 	cmp.w	ip, #0
 8023002:	dd3f      	ble.n	8023084 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8023004:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8023008:	2e00      	cmp	r6, #0
 802300a:	dd3b      	ble.n	8023084 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 802300c:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 8023010:	2203      	movs	r2, #3
 8023012:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8023016:	fb0a f801 	mul.w	r8, sl, r1
 802301a:	fb13 8802 	smlabb	r8, r3, r2, r8
 802301e:	9a02      	ldr	r2, [sp, #8]
 8023020:	4480      	add	r8, r0
 8023022:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 8023026:	8812      	ldrh	r2, [r2, #0]
 8023028:	4584      	cmp	ip, r0
 802302a:	eba2 0303 	sub.w	r3, r2, r3
 802302e:	bfa8      	it	ge
 8023030:	4684      	movge	ip, r0
 8023032:	459c      	cmp	ip, r3
 8023034:	bfa8      	it	ge
 8023036:	469c      	movge	ip, r3
 8023038:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 802303c:	429e      	cmp	r6, r3
 802303e:	bfa8      	it	ge
 8023040:	461e      	movge	r6, r3
 8023042:	4b2d      	ldr	r3, [pc, #180]	; (80230f8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 8023044:	881b      	ldrh	r3, [r3, #0]
 8023046:	1a59      	subs	r1, r3, r1
 8023048:	4633      	mov	r3, r6
 802304a:	428e      	cmp	r6, r1
 802304c:	bfa8      	it	ge
 802304e:	460b      	movge	r3, r1
 8023050:	4562      	cmp	r2, ip
 8023052:	9302      	str	r3, [sp, #8]
 8023054:	d12d      	bne.n	80230b2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 8023056:	455a      	cmp	r2, fp
 8023058:	d12b      	bne.n	80230b2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 802305a:	6828      	ldr	r0, [r5, #0]
 802305c:	6803      	ldr	r3, [r0, #0]
 802305e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023060:	4798      	blx	r3
 8023062:	07c3      	lsls	r3, r0, #31
 8023064:	d51b      	bpl.n	802309e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x242>
 8023066:	6828      	ldr	r0, [r5, #0]
 8023068:	9b02      	ldr	r3, [sp, #8]
 802306a:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 802306e:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8023072:	6803      	ldr	r3, [r0, #0]
 8023074:	f8cd b000 	str.w	fp, [sp]
 8023078:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 802307a:	4623      	mov	r3, r4
 802307c:	e899 0006 	ldmia.w	r9, {r1, r2}
 8023080:	47a8      	blx	r5
 8023082:	4607      	mov	r7, r0
 8023084:	4638      	mov	r0, r7
 8023086:	b00f      	add	sp, #60	; 0x3c
 8023088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802308c:	bf1f      	itttt	ne
 802308e:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 8023092:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 8023096:	189b      	addne	r3, r3, r2
 8023098:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 802309c:	e7ad      	b.n	8022ffa <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19e>
 802309e:	6828      	ldr	r0, [r5, #0]
 80230a0:	4642      	mov	r2, r8
 80230a2:	4621      	mov	r1, r4
 80230a4:	6803      	ldr	r3, [r0, #0]
 80230a6:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80230a8:	9b02      	ldr	r3, [sp, #8]
 80230aa:	fb03 f30a 	mul.w	r3, r3, sl
 80230ae:	47a8      	blx	r5
 80230b0:	e7e8      	b.n	8023084 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 80230b2:	eb0c 0b4c 	add.w	fp, ip, ip, lsl #1
 80230b6:	f04f 0900 	mov.w	r9, #0
 80230ba:	9b02      	ldr	r3, [sp, #8]
 80230bc:	454b      	cmp	r3, r9
 80230be:	dde1      	ble.n	8023084 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 80230c0:	6828      	ldr	r0, [r5, #0]
 80230c2:	4642      	mov	r2, r8
 80230c4:	4621      	mov	r1, r4
 80230c6:	44d0      	add	r8, sl
 80230c8:	6803      	ldr	r3, [r0, #0]
 80230ca:	f109 0901 	add.w	r9, r9, #1
 80230ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80230d0:	461e      	mov	r6, r3
 80230d2:	465b      	mov	r3, fp
 80230d4:	47b0      	blx	r6
 80230d6:	9b03      	ldr	r3, [sp, #12]
 80230d8:	441c      	add	r4, r3
 80230da:	e7ee      	b.n	80230ba <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x25e>
 80230dc:	2000bf68 	.word	0x2000bf68
 80230e0:	0802fc01 	.word	0x0802fc01
 80230e4:	080303e1 	.word	0x080303e1
 80230e8:	0802fbcf 	.word	0x0802fbcf
 80230ec:	0802fcb5 	.word	0x0802fcb5
 80230f0:	0802fd0a 	.word	0x0802fd0a
 80230f4:	2000bf60 	.word	0x2000bf60
 80230f8:	2000bf62 	.word	0x2000bf62
 80230fc:	0802fd48 	.word	0x0802fd48

08023100 <_ZN8touchgfx8LCD24bppC1Ev>:
 8023100:	4a0b      	ldr	r2, [pc, #44]	; (8023130 <_ZN8touchgfx8LCD24bppC1Ev+0x30>)
 8023102:	6002      	str	r2, [r0, #0]
 8023104:	2200      	movs	r2, #0
 8023106:	e9c0 2202 	strd	r2, r2, [r0, #8]
 802310a:	e9c0 2204 	strd	r2, r2, [r0, #16]
 802310e:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8023112:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8023116:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 802311a:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 802311e:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8023122:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8023126:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 802312a:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 802312e:	4770      	bx	lr
 8023130:	0803002c 	.word	0x0803002c

08023134 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8023134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023138:	b093      	sub	sp, #76	; 0x4c
 802313a:	880c      	ldrh	r4, [r1, #0]
 802313c:	4605      	mov	r5, r0
 802313e:	460f      	mov	r7, r1
 8023140:	4691      	mov	r9, r2
 8023142:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 8023146:	b12c      	cbz	r4, 8023154 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 8023148:	4b71      	ldr	r3, [pc, #452]	; (8023310 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 802314a:	2167      	movs	r1, #103	; 0x67
 802314c:	4a71      	ldr	r2, [pc, #452]	; (8023314 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 802314e:	4872      	ldr	r0, [pc, #456]	; (8023318 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 8023150:	f007 fb16 	bl	802a780 <__assert_func>
 8023154:	6810      	ldr	r0, [r2, #0]
 8023156:	ae0e      	add	r6, sp, #56	; 0x38
 8023158:	6851      	ldr	r1, [r2, #4]
 802315a:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 8023320 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>
 802315e:	c603      	stmia	r6!, {r0, r1}
 8023160:	6818      	ldr	r0, [r3, #0]
 8023162:	ae10      	add	r6, sp, #64	; 0x40
 8023164:	6859      	ldr	r1, [r3, #4]
 8023166:	c603      	stmia	r6!, {r0, r1}
 8023168:	a80e      	add	r0, sp, #56	; 0x38
 802316a:	f7fb f99b 	bl	801e4a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802316e:	4649      	mov	r1, r9
 8023170:	a810      	add	r0, sp, #64	; 0x40
 8023172:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 802331c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 8023176:	f7fb f97d 	bl	801e474 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802317a:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 802317e:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8023182:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8023186:	f8d9 0000 	ldr.w	r0, [r9]
 802318a:	fb11 2103 	smlabb	r1, r1, r3, r2
 802318e:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	; 0x44
 8023192:	440d      	add	r5, r1
 8023194:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8023198:	440a      	add	r2, r1
 802319a:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 802319e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80231a2:	4413      	add	r3, r2
 80231a4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80231a8:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 80231ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80231ae:	6803      	ldr	r3, [r0, #0]
 80231b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80231b4:	4798      	blx	r3
 80231b6:	2801      	cmp	r0, #1
 80231b8:	d11e      	bne.n	80231f8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc4>
 80231ba:	220b      	movs	r2, #11
 80231bc:	9008      	str	r0, [sp, #32]
 80231be:	b2b6      	uxth	r6, r6
 80231c0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80231c4:	9207      	str	r2, [sp, #28]
 80231c6:	4629      	mov	r1, r5
 80231c8:	f8ba 2000 	ldrh.w	r2, [sl]
 80231cc:	f8cd 8010 	str.w	r8, [sp, #16]
 80231d0:	9601      	str	r6, [sp, #4]
 80231d2:	e9cd 0205 	strd	r0, r2, [sp, #20]
 80231d6:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 80231da:	9203      	str	r2, [sp, #12]
 80231dc:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80231e0:	9202      	str	r2, [sp, #8]
 80231e2:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 80231e6:	9200      	str	r2, [sp, #0]
 80231e8:	463a      	mov	r2, r7
 80231ea:	f8d9 0000 	ldr.w	r0, [r9]
 80231ee:	f7f8 fb97 	bl	801b920 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80231f2:	b013      	add	sp, #76	; 0x4c
 80231f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80231f8:	f8d9 0000 	ldr.w	r0, [r9]
 80231fc:	ea26 79e6 	bic.w	r9, r6, r6, asr #31
 8023200:	6803      	ldr	r3, [r0, #0]
 8023202:	6a1b      	ldr	r3, [r3, #32]
 8023204:	4798      	blx	r3
 8023206:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 802320a:	f8ba 3000 	ldrh.w	r3, [sl]
 802320e:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8023212:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8023216:	fb01 2303 	mla	r3, r1, r3, r2
 802321a:	4621      	mov	r1, r4
 802321c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023220:	4418      	add	r0, r3
 8023222:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 8023226:	930c      	str	r3, [sp, #48]	; 0x30
 8023228:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802322a:	4299      	cmp	r1, r3
 802322c:	da6a      	bge.n	8023304 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d0>
 802322e:	1cc2      	adds	r2, r0, #3
 8023230:	46aa      	mov	sl, r5
 8023232:	ebaa 0305 	sub.w	r3, sl, r5
 8023236:	429e      	cmp	r6, r3
 8023238:	dd55      	ble.n	80232e6 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b2>
 802323a:	2404      	movs	r4, #4
 802323c:	f81a 3b01 	ldrb.w	r3, [sl], #1
 8023240:	fb14 4303 	smlabb	r3, r4, r3, r4
 8023244:	eb07 0e03 	add.w	lr, r7, r3
 8023248:	f89e 4003 	ldrb.w	r4, [lr, #3]
 802324c:	b184      	cbz	r4, 8023270 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 802324e:	2cff      	cmp	r4, #255	; 0xff
 8023250:	f817 b003 	ldrb.w	fp, [r7, r3]
 8023254:	d10e      	bne.n	8023274 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 8023256:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802325a:	d10b      	bne.n	8023274 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 802325c:	f802 bc03 	strb.w	fp, [r2, #-3]
 8023260:	f89e 3001 	ldrb.w	r3, [lr, #1]
 8023264:	f802 3c02 	strb.w	r3, [r2, #-2]
 8023268:	f89e 3002 	ldrb.w	r3, [lr, #2]
 802326c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8023270:	3203      	adds	r2, #3
 8023272:	e7de      	b.n	8023232 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfe>
 8023274:	fb08 f404 	mul.w	r4, r8, r4
 8023278:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 802327c:	1c63      	adds	r3, r4, #1
 802327e:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8023282:	121b      	asrs	r3, r3, #8
 8023284:	b29c      	uxth	r4, r3
 8023286:	43db      	mvns	r3, r3
 8023288:	fb1b fb04 	smulbb	fp, fp, r4
 802328c:	b2db      	uxtb	r3, r3
 802328e:	fb0c bc03 	mla	ip, ip, r3, fp
 8023292:	fa1f fc8c 	uxth.w	ip, ip
 8023296:	f10c 0b01 	add.w	fp, ip, #1
 802329a:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 802329e:	f812 bc02 	ldrb.w	fp, [r2, #-2]
 80232a2:	fb1b fb03 	smulbb	fp, fp, r3
 80232a6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80232aa:	f802 cc03 	strb.w	ip, [r2, #-3]
 80232ae:	f89e c001 	ldrb.w	ip, [lr, #1]
 80232b2:	fb0c bc04 	mla	ip, ip, r4, fp
 80232b6:	fa1f fc8c 	uxth.w	ip, ip
 80232ba:	f10c 0b01 	add.w	fp, ip, #1
 80232be:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 80232c2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80232c6:	f802 cc02 	strb.w	ip, [r2, #-2]
 80232ca:	f812 cc01 	ldrb.w	ip, [r2, #-1]
 80232ce:	f89e e002 	ldrb.w	lr, [lr, #2]
 80232d2:	fb1c f303 	smulbb	r3, ip, r3
 80232d6:	fb0e 3304 	mla	r3, lr, r4, r3
 80232da:	b29b      	uxth	r3, r3
 80232dc:	1c5c      	adds	r4, r3, #1
 80232de:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 80232e2:	121b      	asrs	r3, r3, #8
 80232e4:	e7c2      	b.n	802326c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 80232e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80232e8:	3101      	adds	r1, #1
 80232ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80232ec:	881b      	ldrh	r3, [r3, #0]
 80232ee:	1b9b      	subs	r3, r3, r6
 80232f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80232f4:	4413      	add	r3, r2
 80232f6:	4418      	add	r0, r3
 80232f8:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 80232fc:	1b9b      	subs	r3, r3, r6
 80232fe:	444b      	add	r3, r9
 8023300:	441d      	add	r5, r3
 8023302:	e791      	b.n	8023228 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 8023304:	4b05      	ldr	r3, [pc, #20]	; (802331c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 8023306:	6818      	ldr	r0, [r3, #0]
 8023308:	6803      	ldr	r3, [r0, #0]
 802330a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802330c:	4798      	blx	r3
 802330e:	e770      	b.n	80231f2 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 8023310:	0802fb33 	.word	0x0802fb33
 8023314:	08030203 	.word	0x08030203
 8023318:	0802fbcf 	.word	0x0802fbcf
 802331c:	2000bf68 	.word	0x2000bf68
 8023320:	2000bf60 	.word	0x2000bf60

08023324 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8023324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023328:	4614      	mov	r4, r2
 802332a:	880a      	ldrh	r2, [r1, #0]
 802332c:	b091      	sub	sp, #68	; 0x44
 802332e:	4680      	mov	r8, r0
 8023330:	2a01      	cmp	r2, #1
 8023332:	460e      	mov	r6, r1
 8023334:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8023338:	d005      	beq.n	8023346 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22>
 802333a:	4b6d      	ldr	r3, [pc, #436]	; (80234f0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 802333c:	21b5      	movs	r1, #181	; 0xb5
 802333e:	4a6d      	ldr	r2, [pc, #436]	; (80234f4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>)
 8023340:	486d      	ldr	r0, [pc, #436]	; (80234f8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 8023342:	f007 fa1d 	bl	802a780 <__assert_func>
 8023346:	6820      	ldr	r0, [r4, #0]
 8023348:	ad0c      	add	r5, sp, #48	; 0x30
 802334a:	6861      	ldr	r1, [r4, #4]
 802334c:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80234fc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>
 8023350:	c503      	stmia	r5!, {r0, r1}
 8023352:	6818      	ldr	r0, [r3, #0]
 8023354:	ad0e      	add	r5, sp, #56	; 0x38
 8023356:	6859      	ldr	r1, [r3, #4]
 8023358:	c503      	stmia	r5!, {r0, r1}
 802335a:	a80c      	add	r0, sp, #48	; 0x30
 802335c:	f7fb f8a2 	bl	801e4a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023360:	4621      	mov	r1, r4
 8023362:	a80e      	add	r0, sp, #56	; 0x38
 8023364:	f7fb f886 	bl	801e474 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023368:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 802336c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8023370:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8023374:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 8023378:	fb11 2103 	smlabb	r1, r1, r3, r2
 802337c:	eb08 0401 	add.w	r4, r8, r1
 8023380:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8023384:	f8df 8178 	ldr.w	r8, [pc, #376]	; 8023500 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>
 8023388:	440a      	add	r2, r1
 802338a:	f8d8 0000 	ldr.w	r0, [r8]
 802338e:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8023392:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8023396:	4413      	add	r3, r2
 8023398:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 802339c:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 80233a0:	930a      	str	r3, [sp, #40]	; 0x28
 80233a2:	6803      	ldr	r3, [r0, #0]
 80233a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80233a8:	4798      	blx	r3
 80233aa:	2801      	cmp	r0, #1
 80233ac:	d11e      	bne.n	80233ec <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc8>
 80233ae:	220b      	movs	r2, #11
 80233b0:	9008      	str	r0, [sp, #32]
 80233b2:	b2ad      	uxth	r5, r5
 80233b4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80233b8:	9207      	str	r2, [sp, #28]
 80233ba:	4621      	mov	r1, r4
 80233bc:	f8b9 2000 	ldrh.w	r2, [r9]
 80233c0:	9501      	str	r5, [sp, #4]
 80233c2:	9206      	str	r2, [sp, #24]
 80233c4:	2200      	movs	r2, #0
 80233c6:	e9cd 7204 	strd	r7, r2, [sp, #16]
 80233ca:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80233ce:	9203      	str	r2, [sp, #12]
 80233d0:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80233d4:	9202      	str	r2, [sp, #8]
 80233d6:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80233da:	9200      	str	r2, [sp, #0]
 80233dc:	4632      	mov	r2, r6
 80233de:	f8d8 0000 	ldr.w	r0, [r8]
 80233e2:	f7f8 fa9d 	bl	801b920 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80233e6:	b011      	add	sp, #68	; 0x44
 80233e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80233ec:	f8d8 0000 	ldr.w	r0, [r8]
 80233f0:	ea25 78e5 	bic.w	r8, r5, r5, asr #31
 80233f4:	6803      	ldr	r3, [r0, #0]
 80233f6:	6a1b      	ldr	r3, [r3, #32]
 80233f8:	4798      	blx	r3
 80233fa:	f8b9 3000 	ldrh.w	r3, [r9]
 80233fe:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8023402:	f04f 0e00 	mov.w	lr, #0
 8023406:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 802340a:	fa1f f987 	uxth.w	r9, r7
 802340e:	fb01 2303 	mla	r3, r1, r3, r2
 8023412:	f1c7 01ff 	rsb	r1, r7, #255	; 0xff
 8023416:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802341a:	b289      	uxth	r1, r1
 802341c:	4418      	add	r0, r3
 802341e:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8023422:	930b      	str	r3, [sp, #44]	; 0x2c
 8023424:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023426:	459e      	cmp	lr, r3
 8023428:	da5c      	bge.n	80234e4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>
 802342a:	1cc3      	adds	r3, r0, #3
 802342c:	46a2      	mov	sl, r4
 802342e:	ebaa 0204 	sub.w	r2, sl, r4
 8023432:	4295      	cmp	r5, r2
 8023434:	dd46      	ble.n	80234c4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a0>
 8023436:	f04f 0c03 	mov.w	ip, #3
 802343a:	f04f 0b04 	mov.w	fp, #4
 802343e:	f81a 2b01 	ldrb.w	r2, [sl], #1
 8023442:	2fff      	cmp	r7, #255	; 0xff
 8023444:	fb1c b202 	smlabb	r2, ip, r2, fp
 8023448:	eb06 0c02 	add.w	ip, r6, r2
 802344c:	f816 b002 	ldrb.w	fp, [r6, r2]
 8023450:	d02f      	beq.n	80234b2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18e>
 8023452:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 8023456:	fb12 f201 	smulbb	r2, r2, r1
 802345a:	fb0b 2209 	mla	r2, fp, r9, r2
 802345e:	b292      	uxth	r2, r2
 8023460:	f102 0b01 	add.w	fp, r2, #1
 8023464:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8023468:	f813 bc02 	ldrb.w	fp, [r3, #-2]
 802346c:	fb1b fb01 	smulbb	fp, fp, r1
 8023470:	1212      	asrs	r2, r2, #8
 8023472:	f803 2c03 	strb.w	r2, [r3, #-3]
 8023476:	f89c 2001 	ldrb.w	r2, [ip, #1]
 802347a:	fb02 b209 	mla	r2, r2, r9, fp
 802347e:	b292      	uxth	r2, r2
 8023480:	f102 0b01 	add.w	fp, r2, #1
 8023484:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8023488:	1212      	asrs	r2, r2, #8
 802348a:	f803 2c02 	strb.w	r2, [r3, #-2]
 802348e:	f89c 2002 	ldrb.w	r2, [ip, #2]
 8023492:	f813 cc01 	ldrb.w	ip, [r3, #-1]
 8023496:	fb1c fc01 	smulbb	ip, ip, r1
 802349a:	fb02 c209 	mla	r2, r2, r9, ip
 802349e:	b292      	uxth	r2, r2
 80234a0:	f102 0c01 	add.w	ip, r2, #1
 80234a4:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80234a8:	1212      	asrs	r2, r2, #8
 80234aa:	f803 2c01 	strb.w	r2, [r3, #-1]
 80234ae:	3303      	adds	r3, #3
 80234b0:	e7bd      	b.n	802342e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10a>
 80234b2:	f803 bc03 	strb.w	fp, [r3, #-3]
 80234b6:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80234ba:	f803 2c02 	strb.w	r2, [r3, #-2]
 80234be:	f89c 2002 	ldrb.w	r2, [ip, #2]
 80234c2:	e7f2      	b.n	80234aa <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x186>
 80234c4:	4b0d      	ldr	r3, [pc, #52]	; (80234fc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 80234c6:	f10e 0e01 	add.w	lr, lr, #1
 80234ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80234cc:	881b      	ldrh	r3, [r3, #0]
 80234ce:	1b5b      	subs	r3, r3, r5
 80234d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80234d4:	4413      	add	r3, r2
 80234d6:	4418      	add	r0, r3
 80234d8:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 80234dc:	1b5b      	subs	r3, r3, r5
 80234de:	4443      	add	r3, r8
 80234e0:	441c      	add	r4, r3
 80234e2:	e79f      	b.n	8023424 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x100>
 80234e4:	4b06      	ldr	r3, [pc, #24]	; (8023500 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 80234e6:	6818      	ldr	r0, [r3, #0]
 80234e8:	6803      	ldr	r3, [r0, #0]
 80234ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80234ec:	4798      	blx	r3
 80234ee:	e77a      	b.n	80233e6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc2>
 80234f0:	0802fa3f 	.word	0x0802fa3f
 80234f4:	080300f6 	.word	0x080300f6
 80234f8:	0802fbcf 	.word	0x0802fbcf
 80234fc:	2000bf60 	.word	0x2000bf60
 8023500:	2000bf68 	.word	0x2000bf68

08023504 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8023504:	b570      	push	{r4, r5, r6, lr}
 8023506:	780d      	ldrb	r5, [r1, #0]
 8023508:	f89d 4010 	ldrb.w	r4, [sp, #16]
 802350c:	2d01      	cmp	r5, #1
 802350e:	d00d      	beq.n	802352c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 8023510:	d307      	bcc.n	8023522 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 8023512:	2d02      	cmp	r5, #2
 8023514:	d10f      	bne.n	8023536 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 8023516:	4b08      	ldr	r3, [pc, #32]	; (8023538 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 8023518:	215a      	movs	r1, #90	; 0x5a
 802351a:	4a08      	ldr	r2, [pc, #32]	; (802353c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 802351c:	4808      	ldr	r0, [pc, #32]	; (8023540 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 802351e:	f007 f92f 	bl	802a780 <__assert_func>
 8023522:	9404      	str	r4, [sp, #16]
 8023524:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8023528:	f7ff be04 	b.w	8023134 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 802352c:	9404      	str	r4, [sp, #16]
 802352e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8023532:	f7ff bef7 	b.w	8023324 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8023536:	bd70      	pop	{r4, r5, r6, pc}
 8023538:	0802f9f4 	.word	0x0802f9f4
 802353c:	08030074 	.word	0x08030074
 8023540:	0802fbcf 	.word	0x0802fbcf

08023544 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8023544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023548:	b08b      	sub	sp, #44	; 0x2c
 802354a:	460c      	mov	r4, r1
 802354c:	4680      	mov	r8, r0
 802354e:	469a      	mov	sl, r3
 8023550:	6808      	ldr	r0, [r1, #0]
 8023552:	ab06      	add	r3, sp, #24
 8023554:	6849      	ldr	r1, [r1, #4]
 8023556:	c303      	stmia	r3!, {r0, r1}
 8023558:	6810      	ldr	r0, [r2, #0]
 802355a:	ab08      	add	r3, sp, #32
 802355c:	6851      	ldr	r1, [r2, #4]
 802355e:	c303      	stmia	r3!, {r0, r1}
 8023560:	a806      	add	r0, sp, #24
 8023562:	f7fa ff9f 	bl	801e4a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023566:	4621      	mov	r1, r4
 8023568:	a808      	add	r0, sp, #32
 802356a:	4c61      	ldr	r4, [pc, #388]	; (80236f0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 802356c:	f7fa ff82 	bl	801e474 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023570:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8023574:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8023578:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 802357c:	6820      	ldr	r0, [r4, #0]
 802357e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8023582:	f9bd 7024 	ldrsh.w	r7, [sp, #36]	; 0x24
 8023586:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 802358a:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 802358e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8023592:	440a      	add	r2, r1
 8023594:	f8ad 2020 	strh.w	r2, [sp, #32]
 8023598:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 802359c:	4413      	add	r3, r2
 802359e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80235a2:	6803      	ldr	r3, [r0, #0]
 80235a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80235a6:	4798      	blx	r3
 80235a8:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80235ac:	d118      	bne.n	80235e0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 80235ae:	f010 0f20 	tst.w	r0, #32
 80235b2:	6820      	ldr	r0, [r4, #0]
 80235b4:	d017      	beq.n	80235e6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 80235b6:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 80235ba:	b2bf      	uxth	r7, r7
 80235bc:	6801      	ldr	r1, [r0, #0]
 80235be:	9402      	str	r4, [sp, #8]
 80235c0:	fa1f f489 	uxth.w	r4, r9
 80235c4:	f8cd a00c 	str.w	sl, [sp, #12]
 80235c8:	9401      	str	r4, [sp, #4]
 80235ca:	9700      	str	r7, [sp, #0]
 80235cc:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80235d0:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 80235d2:	4641      	mov	r1, r8
 80235d4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80235d8:	47a0      	blx	r4
 80235da:	b00b      	add	sp, #44	; 0x2c
 80235dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80235e0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80235e4:	e7e5      	b.n	80235b2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 80235e6:	6803      	ldr	r3, [r0, #0]
 80235e8:	6a1b      	ldr	r3, [r3, #32]
 80235ea:	4798      	blx	r3
 80235ec:	4b41      	ldr	r3, [pc, #260]	; (80236f4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b0>)
 80235ee:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 80235f2:	f04f 0c00 	mov.w	ip, #0
 80235f6:	881a      	ldrh	r2, [r3, #0]
 80235f8:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 80235fc:	fb04 1202 	mla	r2, r4, r2, r1
 8023600:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023604:	4410      	add	r0, r2
 8023606:	ea27 72e7 	bic.w	r2, r7, r7, asr #31
 802360a:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 802360e:	0092      	lsls	r2, r2, #2
 8023610:	9105      	str	r1, [sp, #20]
 8023612:	9204      	str	r2, [sp, #16]
 8023614:	45cc      	cmp	ip, r9
 8023616:	da65      	bge.n	80236e4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a0>
 8023618:	1cc4      	adds	r4, r0, #3
 802361a:	f108 0504 	add.w	r5, r8, #4
 802361e:	f04f 0e00 	mov.w	lr, #0
 8023622:	45be      	cmp	lr, r7
 8023624:	da4d      	bge.n	80236c2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17e>
 8023626:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 802362a:	b181      	cbz	r1, 802364e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 802362c:	29ff      	cmp	r1, #255	; 0xff
 802362e:	f815 bc04 	ldrb.w	fp, [r5, #-4]
 8023632:	d111      	bne.n	8023658 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 8023634:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8023638:	d10e      	bne.n	8023658 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 802363a:	f804 bc03 	strb.w	fp, [r4, #-3]
 802363e:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 8023642:	f804 2c02 	strb.w	r2, [r4, #-2]
 8023646:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 802364a:	f804 2c01 	strb.w	r2, [r4, #-1]
 802364e:	f10e 0e01 	add.w	lr, lr, #1
 8023652:	3403      	adds	r4, #3
 8023654:	3504      	adds	r5, #4
 8023656:	e7e4      	b.n	8023622 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 8023658:	fb0a f101 	mul.w	r1, sl, r1
 802365c:	1c4a      	adds	r2, r1, #1
 802365e:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8023662:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8023666:	1212      	asrs	r2, r2, #8
 8023668:	b296      	uxth	r6, r2
 802366a:	43d2      	mvns	r2, r2
 802366c:	fb1b fb06 	smulbb	fp, fp, r6
 8023670:	b2d2      	uxtb	r2, r2
 8023672:	fb01 b102 	mla	r1, r1, r2, fp
 8023676:	b289      	uxth	r1, r1
 8023678:	f101 0b01 	add.w	fp, r1, #1
 802367c:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8023680:	f814 bc02 	ldrb.w	fp, [r4, #-2]
 8023684:	fb1b fb02 	smulbb	fp, fp, r2
 8023688:	1209      	asrs	r1, r1, #8
 802368a:	f804 1c03 	strb.w	r1, [r4, #-3]
 802368e:	f815 1c03 	ldrb.w	r1, [r5, #-3]
 8023692:	fb01 b106 	mla	r1, r1, r6, fp
 8023696:	b289      	uxth	r1, r1
 8023698:	f101 0b01 	add.w	fp, r1, #1
 802369c:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 80236a0:	1209      	asrs	r1, r1, #8
 80236a2:	f804 1c02 	strb.w	r1, [r4, #-2]
 80236a6:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 80236aa:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 80236ae:	fb11 f202 	smulbb	r2, r1, r2
 80236b2:	fb0b 2206 	mla	r2, fp, r6, r2
 80236b6:	b292      	uxth	r2, r2
 80236b8:	1c56      	adds	r6, r2, #1
 80236ba:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 80236be:	1212      	asrs	r2, r2, #8
 80236c0:	e7c3      	b.n	802364a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 80236c2:	881a      	ldrh	r2, [r3, #0]
 80236c4:	f10c 0c01 	add.w	ip, ip, #1
 80236c8:	9905      	ldr	r1, [sp, #20]
 80236ca:	1bd2      	subs	r2, r2, r7
 80236cc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80236d0:	440a      	add	r2, r1
 80236d2:	9904      	ldr	r1, [sp, #16]
 80236d4:	4410      	add	r0, r2
 80236d6:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 80236da:	1bd2      	subs	r2, r2, r7
 80236dc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80236e0:	4490      	add	r8, r2
 80236e2:	e797      	b.n	8023614 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 80236e4:	4b02      	ldr	r3, [pc, #8]	; (80236f0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 80236e6:	6818      	ldr	r0, [r3, #0]
 80236e8:	6803      	ldr	r3, [r0, #0]
 80236ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80236ec:	4798      	blx	r3
 80236ee:	e774      	b.n	80235da <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 80236f0:	2000bf68 	.word	0x2000bf68
 80236f4:	2000bf60 	.word	0x2000bf60

080236f8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 80236f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80236fc:	b085      	sub	sp, #20
 80236fe:	4606      	mov	r6, r0
 8023700:	460c      	mov	r4, r1
 8023702:	4691      	mov	r9, r2
 8023704:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8023708:	4698      	mov	r8, r3
 802370a:	b385      	cbz	r5, 802376e <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 802370c:	4608      	mov	r0, r1
 802370e:	f7fd fae5 	bl	8020cdc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8023712:	4607      	mov	r7, r0
 8023714:	4620      	mov	r0, r4
 8023716:	f7fd fb1b 	bl	8020d50 <_ZNK8touchgfx6Bitmap9getHeightEv>
 802371a:	f8ad 000e 	strh.w	r0, [sp, #14]
 802371e:	4620      	mov	r0, r4
 8023720:	f8ad 9008 	strh.w	r9, [sp, #8]
 8023724:	f8ad 800a 	strh.w	r8, [sp, #10]
 8023728:	f8ad 700c 	strh.w	r7, [sp, #12]
 802372c:	f7fd fc62 	bl	8020ff4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8023730:	2801      	cmp	r0, #1
 8023732:	d00f      	beq.n	8023754 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8023734:	4620      	mov	r0, r4
 8023736:	f7fd fc5d 	bl	8020ff4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 802373a:	2802      	cmp	r0, #2
 802373c:	d00a      	beq.n	8023754 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 802373e:	4620      	mov	r0, r4
 8023740:	f7fd fc58 	bl	8020ff4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8023744:	280b      	cmp	r0, #11
 8023746:	d005      	beq.n	8023754 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8023748:	4b1b      	ldr	r3, [pc, #108]	; (80237b8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 802374a:	2142      	movs	r1, #66	; 0x42
 802374c:	4a1b      	ldr	r2, [pc, #108]	; (80237bc <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 802374e:	481c      	ldr	r0, [pc, #112]	; (80237c0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc8>)
 8023750:	f007 f816 	bl	802a780 <__assert_func>
 8023754:	4620      	mov	r0, r4
 8023756:	f7fd fc4d 	bl	8020ff4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 802375a:	2802      	cmp	r0, #2
 802375c:	4620      	mov	r0, r4
 802375e:	d109      	bne.n	8023774 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7c>
 8023760:	f7fd fbc4 	bl	8020eec <_ZNK8touchgfx6Bitmap7getDataEv>
 8023764:	462b      	mov	r3, r5
 8023766:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023768:	a902      	add	r1, sp, #8
 802376a:	f7ff feeb 	bl	8023544 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 802376e:	b005      	add	sp, #20
 8023770:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023774:	f7fd fc3e 	bl	8020ff4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8023778:	280b      	cmp	r0, #11
 802377a:	d10e      	bne.n	802379a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 802377c:	4620      	mov	r0, r4
 802377e:	f7fd fbb5 	bl	8020eec <_ZNK8touchgfx6Bitmap7getDataEv>
 8023782:	4606      	mov	r6, r0
 8023784:	4620      	mov	r0, r4
 8023786:	f7fd fbe3 	bl	8020f50 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 802378a:	9500      	str	r5, [sp, #0]
 802378c:	4601      	mov	r1, r0
 802378e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023790:	aa02      	add	r2, sp, #8
 8023792:	4630      	mov	r0, r6
 8023794:	f7ff feb6 	bl	8023504 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8023798:	e7e9      	b.n	802376e <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 802379a:	6833      	ldr	r3, [r6, #0]
 802379c:	4620      	mov	r0, r4
 802379e:	691f      	ldr	r7, [r3, #16]
 80237a0:	f7fd fba4 	bl	8020eec <_ZNK8touchgfx6Bitmap7getDataEv>
 80237a4:	2300      	movs	r3, #0
 80237a6:	4601      	mov	r1, r0
 80237a8:	aa02      	add	r2, sp, #8
 80237aa:	4630      	mov	r0, r6
 80237ac:	e9cd 5300 	strd	r5, r3, [sp]
 80237b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80237b2:	47b8      	blx	r7
 80237b4:	e7db      	b.n	802376e <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 80237b6:	bf00      	nop
 80237b8:	0802fa8d 	.word	0x0802fa8d
 80237bc:	0803017f 	.word	0x0803017f
 80237c0:	0802fbcf 	.word	0x0802fbcf

080237c4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 80237c4:	b570      	push	{r4, r5, r6, lr}
 80237c6:	9d04      	ldr	r5, [sp, #16]
 80237c8:	460c      	mov	r4, r1
 80237ca:	4619      	mov	r1, r3
 80237cc:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80237d0:	2a0c      	cmp	r2, #12
 80237d2:	d826      	bhi.n	8023822 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 80237d4:	e8df f002 	tbb	[pc, r2]
 80237d8:	200e1407 	.word	0x200e1407
 80237dc:	20202020 	.word	0x20202020
 80237e0:	20202020 	.word	0x20202020
 80237e4:	20          	.byte	0x20
 80237e5:	00          	.byte	0x00
 80237e6:	4b0f      	ldr	r3, [pc, #60]	; (8023824 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 80237e8:	f240 117f 	movw	r1, #383	; 0x17f
 80237ec:	4a0e      	ldr	r2, [pc, #56]	; (8023828 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 80237ee:	480f      	ldr	r0, [pc, #60]	; (802382c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 80237f0:	f006 ffc6 	bl	802a780 <__assert_func>
 80237f4:	462a      	mov	r2, r5
 80237f6:	4620      	mov	r0, r4
 80237f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80237fc:	f7ff bea2 	b.w	8023544 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8023800:	6802      	ldr	r2, [r0, #0]
 8023802:	2600      	movs	r6, #0
 8023804:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8023808:	6916      	ldr	r6, [r2, #16]
 802380a:	462b      	mov	r3, r5
 802380c:	460a      	mov	r2, r1
 802380e:	4621      	mov	r1, r4
 8023810:	46b4      	mov	ip, r6
 8023812:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8023816:	4760      	bx	ip
 8023818:	4b05      	ldr	r3, [pc, #20]	; (8023830 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 802381a:	f240 1191 	movw	r1, #401	; 0x191
 802381e:	4a02      	ldr	r2, [pc, #8]	; (8023828 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 8023820:	e7e5      	b.n	80237ee <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 8023822:	bd70      	pop	{r4, r5, r6, pc}
 8023824:	0802fda8 	.word	0x0802fda8
 8023828:	08030467 	.word	0x08030467
 802382c:	0802fbcf 	.word	0x0802fbcf
 8023830:	0802fde9 	.word	0x0802fde9

08023834 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 8023834:	b158      	cbz	r0, 802384e <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 8023836:	2902      	cmp	r1, #2
 8023838:	d00f      	beq.n	802385a <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 802383a:	2903      	cmp	r1, #3
 802383c:	d010      	beq.n	8023860 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 802383e:	2901      	cmp	r1, #1
 8023840:	d101      	bne.n	8023846 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 8023842:	2001      	movs	r0, #1
 8023844:	4770      	bx	lr
 8023846:	4b08      	ldr	r3, [pc, #32]	; (8023868 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 8023848:	8819      	ldrh	r1, [r3, #0]
 802384a:	4248      	negs	r0, r1
 802384c:	4770      	bx	lr
 802384e:	2902      	cmp	r1, #2
 8023850:	d006      	beq.n	8023860 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 8023852:	2903      	cmp	r1, #3
 8023854:	d0f7      	beq.n	8023846 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 8023856:	2901      	cmp	r1, #1
 8023858:	d1f3      	bne.n	8023842 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 802385a:	4b03      	ldr	r3, [pc, #12]	; (8023868 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 802385c:	8818      	ldrh	r0, [r3, #0]
 802385e:	4770      	bx	lr
 8023860:	f04f 30ff 	mov.w	r0, #4294967295
 8023864:	4770      	bx	lr
 8023866:	bf00      	nop
 8023868:	2000bf60 	.word	0x2000bf60

0802386c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 802386c:	b170      	cbz	r0, 802388c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 802386e:	2902      	cmp	r1, #2
 8023870:	d012      	beq.n	8023898 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 8023872:	2903      	cmp	r1, #3
 8023874:	d006      	beq.n	8023884 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 8023876:	2901      	cmp	r1, #1
 8023878:	d001      	beq.n	802387e <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 802387a:	2001      	movs	r0, #1
 802387c:	4770      	bx	lr
 802387e:	4b08      	ldr	r3, [pc, #32]	; (80238a0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 8023880:	8818      	ldrh	r0, [r3, #0]
 8023882:	4770      	bx	lr
 8023884:	4b06      	ldr	r3, [pc, #24]	; (80238a0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 8023886:	8818      	ldrh	r0, [r3, #0]
 8023888:	4240      	negs	r0, r0
 802388a:	4770      	bx	lr
 802388c:	2902      	cmp	r1, #2
 802388e:	d0f9      	beq.n	8023884 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 8023890:	2903      	cmp	r1, #3
 8023892:	d0f2      	beq.n	802387a <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 8023894:	2901      	cmp	r1, #1
 8023896:	d1f2      	bne.n	802387e <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 8023898:	f04f 30ff 	mov.w	r0, #4294967295
 802389c:	4770      	bx	lr
 802389e:	bf00      	nop
 80238a0:	2000bf60 	.word	0x2000bf60

080238a4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 80238a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80238a8:	b095      	sub	sp, #84	; 0x54
 80238aa:	9109      	str	r1, [sp, #36]	; 0x24
 80238ac:	a910      	add	r1, sp, #64	; 0x40
 80238ae:	f9bd 5078 	ldrsh.w	r5, [sp, #120]	; 0x78
 80238b2:	f8bd 6080 	ldrh.w	r6, [sp, #128]	; 0x80
 80238b6:	f8bd 4084 	ldrh.w	r4, [sp, #132]	; 0x84
 80238ba:	f89d 809c 	ldrb.w	r8, [sp, #156]	; 0x9c
 80238be:	f89d 90a4 	ldrb.w	r9, [sp, #164]	; 0xa4
 80238c2:	e881 000c 	stmia.w	r1, {r2, r3}
 80238c6:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
 80238ca:	9306      	str	r3, [sp, #24]
 80238cc:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 80238d0:	e9dd 2122 	ldrd	r2, r1, [sp, #136]	; 0x88
 80238d4:	930e      	str	r3, [sp, #56]	; 0x38
 80238d6:	f89d 30a0 	ldrb.w	r3, [sp, #160]	; 0xa0
 80238da:	798f      	ldrb	r7, [r1, #6]
 80238dc:	930a      	str	r3, [sp, #40]	; 0x28
 80238de:	7b4b      	ldrb	r3, [r1, #13]
 80238e0:	0158      	lsls	r0, r3, #5
 80238e2:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80238e6:	4338      	orrs	r0, r7
 80238e8:	9008      	str	r0, [sp, #32]
 80238ea:	f000 8174 	beq.w	8023bd6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 80238ee:	011b      	lsls	r3, r3, #4
 80238f0:	79c8      	ldrb	r0, [r1, #7]
 80238f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80238f6:	4303      	orrs	r3, r0
 80238f8:	9307      	str	r3, [sp, #28]
 80238fa:	f000 816c 	beq.w	8023bd6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 80238fe:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8023902:	b29b      	uxth	r3, r3
 8023904:	2e00      	cmp	r6, #0
 8023906:	f000 8112 	beq.w	8023b2e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x28a>
 802390a:	1af6      	subs	r6, r6, r3
 802390c:	b2b6      	uxth	r6, r6
 802390e:	0433      	lsls	r3, r6, #16
 8023910:	d502      	bpl.n	8023918 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8023912:	1bad      	subs	r5, r5, r6
 8023914:	2600      	movs	r6, #0
 8023916:	b22d      	sxth	r5, r5
 8023918:	f9b2 1000 	ldrsh.w	r1, [r2]
 802391c:	a810      	add	r0, sp, #64	; 0x40
 802391e:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 8023922:	428d      	cmp	r5, r1
 8023924:	b28b      	uxth	r3, r1
 8023926:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 802392a:	bfbf      	itttt	lt
 802392c:	18f6      	addlt	r6, r6, r3
 802392e:	1b75      	sublt	r5, r6, r5
 8023930:	b2ae      	uxthlt	r6, r5
 8023932:	460d      	movlt	r5, r1
 8023934:	8891      	ldrh	r1, [r2, #4]
 8023936:	440b      	add	r3, r1
 8023938:	4629      	mov	r1, r5
 802393a:	b21b      	sxth	r3, r3
 802393c:	930d      	str	r3, [sp, #52]	; 0x34
 802393e:	88d3      	ldrh	r3, [r2, #6]
 8023940:	9a06      	ldr	r2, [sp, #24]
 8023942:	449a      	add	sl, r3
 8023944:	fa0f f38a 	sxth.w	r3, sl
 8023948:	f8bd a01c 	ldrh.w	sl, [sp, #28]
 802394c:	930c      	str	r3, [sp, #48]	; 0x30
 802394e:	4bb8      	ldr	r3, [pc, #736]	; (8023c30 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 8023950:	f893 b000 	ldrb.w	fp, [r3]
 8023954:	f10b 3cff 	add.w	ip, fp, #4294967295
 8023958:	f1dc 0300 	rsbs	r3, ip, #0
 802395c:	eb43 030c 	adc.w	r3, r3, ip
 8023960:	930b      	str	r3, [sp, #44]	; 0x2c
 8023962:	464b      	mov	r3, r9
 8023964:	f7fa fc78 	bl	801e258 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8023968:	4629      	mov	r1, r5
 802396a:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
 802396e:	464b      	mov	r3, r9
 8023970:	9a06      	ldr	r2, [sp, #24]
 8023972:	a810      	add	r0, sp, #64	; 0x40
 8023974:	f7fa fc88 	bl	801e288 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8023978:	a914      	add	r1, sp, #80	; 0x50
 802397a:	f821 0d02 	strh.w	r0, [r1, #-2]!
 802397e:	a813      	add	r0, sp, #76	; 0x4c
 8023980:	f7fa fd62 	bl	801e448 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8023984:	f1b9 0f00 	cmp.w	r9, #0
 8023988:	f040 80d4 	bne.w	8023b34 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x290>
 802398c:	f1bb 0f01 	cmp.w	fp, #1
 8023990:	f040 80d8 	bne.w	8023b44 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 8023994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023996:	2b00      	cmp	r3, #0
 8023998:	f040 8122 	bne.w	8023be0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33c>
 802399c:	4ba5      	ldr	r3, [pc, #660]	; (8023c34 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 802399e:	6818      	ldr	r0, [r3, #0]
 80239a0:	6803      	ldr	r3, [r0, #0]
 80239a2:	6a1b      	ldr	r3, [r3, #32]
 80239a4:	4798      	blx	r3
 80239a6:	4aa4      	ldr	r2, [pc, #656]	; (8023c38 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>)
 80239a8:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 80239ac:	8811      	ldrh	r1, [r2, #0]
 80239ae:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 80239b2:	fb01 2303 	mla	r3, r1, r3, r2
 80239b6:	2201      	movs	r2, #1
 80239b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80239bc:	4590      	cmp	r8, r2
 80239be:	4403      	add	r3, r0
 80239c0:	9307      	str	r3, [sp, #28]
 80239c2:	fa02 f308 	lsl.w	r3, r2, r8
 80239c6:	f103 33ff 	add.w	r3, r3, #4294967295
 80239ca:	b2db      	uxtb	r3, r3
 80239cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80239ce:	f000 8109 	beq.w	8023be4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x340>
 80239d2:	f1b8 0f02 	cmp.w	r8, #2
 80239d6:	f000 813e 	beq.w	8023c56 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b2>
 80239da:	f1b8 0f04 	cmp.w	r8, #4
 80239de:	f000 8132 	beq.w	8023c46 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 80239e2:	b906      	cbnz	r6, 80239e6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x142>
 80239e4:	b174      	cbz	r4, 8023a04 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x160>
 80239e6:	fb17 6304 	smlabb	r3, r7, r4, r6
 80239ea:	9924      	ldr	r1, [sp, #144]	; 0x90
 80239ec:	ebaa 0a04 	sub.w	sl, sl, r4
 80239f0:	fb13 f308 	smulbb	r3, r3, r8
 80239f4:	fa1f fa8a 	uxth.w	sl, sl
 80239f8:	b29b      	uxth	r3, r3
 80239fa:	eb01 01d3 	add.w	r1, r1, r3, lsr #3
 80239fe:	f003 0407 	and.w	r4, r3, #7
 8023a02:	9124      	str	r1, [sp, #144]	; 0x90
 8023a04:	4649      	mov	r1, r9
 8023a06:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8023a08:	f7ff ff14 	bl	8023834 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 8023a0c:	4649      	mov	r1, r9
 8023a0e:	4683      	mov	fp, r0
 8023a10:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8023a12:	f7ff ff2b 	bl	802386c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 8023a16:	9906      	ldr	r1, [sp, #24]
 8023a18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023a1a:	1bad      	subs	r5, r5, r6
 8023a1c:	1a5b      	subs	r3, r3, r1
 8023a1e:	459a      	cmp	sl, r3
 8023a20:	bfa8      	it	ge
 8023a22:	469a      	movge	sl, r3
 8023a24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023a26:	1b5d      	subs	r5, r3, r5
 8023a28:	9b08      	ldr	r3, [sp, #32]
 8023a2a:	429d      	cmp	r5, r3
 8023a2c:	bfd4      	ite	le
 8023a2e:	ebc6 0605 	rsble	r6, r6, r5
 8023a32:	ebc6 0603 	rsbgt	r6, r6, r3
 8023a36:	1bbf      	subs	r7, r7, r6
 8023a38:	fb0b 0016 	mls	r0, fp, r6, r0
 8023a3c:	fb08 f307 	mul.w	r3, r8, r7
 8023a40:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023a44:	9308      	str	r3, [sp, #32]
 8023a46:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023a48:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8023a4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8023a4e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023a50:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023a54:	930c      	str	r3, [sp, #48]	; 0x30
 8023a56:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023a58:	b2db      	uxtb	r3, r3
 8023a5a:	930d      	str	r3, [sp, #52]	; 0x34
 8023a5c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023a5e:	7819      	ldrb	r1, [r3, #0]
 8023a60:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8023a64:	ea26 7be6 	bic.w	fp, r6, r6, asr #31
 8023a68:	4121      	asrs	r1, r4
 8023a6a:	9306      	str	r3, [sp, #24]
 8023a6c:	fb03 0b0b 	mla	fp, r3, fp, r0
 8023a70:	b2c9      	uxtb	r1, r1
 8023a72:	f1ba 0f00 	cmp.w	sl, #0
 8023a76:	f340 80d1 	ble.w	8023c1c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 8023a7a:	46b6      	mov	lr, r6
 8023a7c:	9807      	ldr	r0, [sp, #28]
 8023a7e:	f1be 0f00 	cmp.w	lr, #0
 8023a82:	f340 80b8 	ble.w	8023bf6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 8023a86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023a88:	400b      	ands	r3, r1
 8023a8a:	d03e      	beq.n	8023b0a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 8023a8c:	fb13 f302 	smulbb	r3, r3, r2
 8023a90:	2bfe      	cmp	r3, #254	; 0xfe
 8023a92:	dd03      	ble.n	8023a9c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f8>
 8023a94:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8023a96:	2dff      	cmp	r5, #255	; 0xff
 8023a98:	f000 80a6 	beq.w	8023be8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 8023a9c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8023a9e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8023aa0:	fb15 f303 	smulbb	r3, r5, r3
 8023aa4:	b29b      	uxth	r3, r3
 8023aa6:	1c5d      	adds	r5, r3, #1
 8023aa8:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 8023aac:	7805      	ldrb	r5, [r0, #0]
 8023aae:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023ab2:	fa1f fc83 	uxth.w	ip, r3
 8023ab6:	43db      	mvns	r3, r3
 8023ab8:	fb17 f90c 	smulbb	r9, r7, ip
 8023abc:	b2db      	uxtb	r3, r3
 8023abe:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8023ac0:	fb05 9503 	mla	r5, r5, r3, r9
 8023ac4:	b2ad      	uxth	r5, r5
 8023ac6:	f105 0901 	add.w	r9, r5, #1
 8023aca:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8023ace:	fb17 f90c 	smulbb	r9, r7, ip
 8023ad2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8023ad4:	122d      	asrs	r5, r5, #8
 8023ad6:	fb17 fc0c 	smulbb	ip, r7, ip
 8023ada:	7005      	strb	r5, [r0, #0]
 8023adc:	7845      	ldrb	r5, [r0, #1]
 8023ade:	fb05 9503 	mla	r5, r5, r3, r9
 8023ae2:	b2ad      	uxth	r5, r5
 8023ae4:	f105 0901 	add.w	r9, r5, #1
 8023ae8:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8023aec:	122d      	asrs	r5, r5, #8
 8023aee:	7045      	strb	r5, [r0, #1]
 8023af0:	7885      	ldrb	r5, [r0, #2]
 8023af2:	fb05 cc03 	mla	ip, r5, r3, ip
 8023af6:	fa1f fc8c 	uxth.w	ip, ip
 8023afa:	f10c 0301 	add.w	r3, ip, #1
 8023afe:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8023b02:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8023b06:	f880 c002 	strb.w	ip, [r0, #2]
 8023b0a:	4444      	add	r4, r8
 8023b0c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8023b10:	b2a4      	uxth	r4, r4
 8023b12:	2c07      	cmp	r4, #7
 8023b14:	bf89      	itett	hi
 8023b16:	9b24      	ldrhi	r3, [sp, #144]	; 0x90
 8023b18:	fa41 f108 	asrls.w	r1, r1, r8
 8023b1c:	2400      	movhi	r4, #0
 8023b1e:	7859      	ldrbhi	r1, [r3, #1]
 8023b20:	bf8a      	itet	hi
 8023b22:	3301      	addhi	r3, #1
 8023b24:	b2c9      	uxtbls	r1, r1
 8023b26:	9324      	strhi	r3, [sp, #144]	; 0x90
 8023b28:	9b06      	ldr	r3, [sp, #24]
 8023b2a:	4418      	add	r0, r3
 8023b2c:	e7a7      	b.n	8023a7e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1da>
 8023b2e:	441d      	add	r5, r3
 8023b30:	b22d      	sxth	r5, r5
 8023b32:	e6f1      	b.n	8023918 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8023b34:	f1b9 0f01 	cmp.w	r9, #1
 8023b38:	f47f af2c 	bne.w	8023994 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8023b3c:	f1bb 0f01 	cmp.w	fp, #1
 8023b40:	f47f af28 	bne.w	8023994 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8023b44:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 8023c34 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8023b48:	f8db 0000 	ldr.w	r0, [fp]
 8023b4c:	6803      	ldr	r3, [r0, #0]
 8023b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023b50:	4798      	blx	r3
 8023b52:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 8023b56:	465a      	mov	r2, fp
 8023b58:	d006      	beq.n	8023b68 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 8023b5a:	f1b8 0f04 	cmp.w	r8, #4
 8023b5e:	d13d      	bne.n	8023bdc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x338>
 8023b60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023b62:	3300      	adds	r3, #0
 8023b64:	bf18      	it	ne
 8023b66:	2301      	movne	r3, #1
 8023b68:	05c0      	lsls	r0, r0, #23
 8023b6a:	d567      	bpl.n	8023c3c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 8023b6c:	f1b8 0f08 	cmp.w	r8, #8
 8023b70:	d164      	bne.n	8023c3c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 8023b72:	2b00      	cmp	r3, #0
 8023b74:	bf0c      	ite	eq
 8023b76:	f44f 7180 	moveq.w	r1, #256	; 0x100
 8023b7a:	2180      	movne	r1, #128	; 0x80
 8023b7c:	2e00      	cmp	r6, #0
 8023b7e:	f47f af09 	bne.w	8023994 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8023b82:	2c00      	cmp	r4, #0
 8023b84:	f47f af06 	bne.w	8023994 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8023b88:	9b08      	ldr	r3, [sp, #32]
 8023b8a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8023b8c:	442b      	add	r3, r5
 8023b8e:	4283      	cmp	r3, r0
 8023b90:	f73f af00 	bgt.w	8023994 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8023b94:	e9dd 0306 	ldrd	r0, r3, [sp, #24]
 8023b98:	4403      	add	r3, r0
 8023b9a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8023b9c:	4283      	cmp	r3, r0
 8023b9e:	f73f aef9 	bgt.w	8023994 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8023ba2:	f1b8 0f08 	cmp.w	r8, #8
 8023ba6:	6810      	ldr	r0, [r2, #0]
 8023ba8:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 8023bac:	bf18      	it	ne
 8023bae:	3701      	addne	r7, #1
 8023bb0:	6804      	ldr	r4, [r0, #0]
 8023bb2:	9105      	str	r1, [sp, #20]
 8023bb4:	bf18      	it	ne
 8023bb6:	f027 0701 	bicne.w	r7, r7, #1
 8023bba:	990a      	ldr	r1, [sp, #40]	; 0x28
 8023bbc:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 8023bc0:	bf18      	it	ne
 8023bc2:	b2bf      	uxthne	r7, r7
 8023bc4:	9104      	str	r1, [sp, #16]
 8023bc6:	9926      	ldr	r1, [sp, #152]	; 0x98
 8023bc8:	e9cd 7a00 	strd	r7, sl, [sp]
 8023bcc:	e9cd 7102 	strd	r7, r1, [sp, #8]
 8023bd0:	9924      	ldr	r1, [sp, #144]	; 0x90
 8023bd2:	6c24      	ldr	r4, [r4, #64]	; 0x40
 8023bd4:	47a0      	blx	r4
 8023bd6:	b015      	add	sp, #84	; 0x54
 8023bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023bdc:	2300      	movs	r3, #0
 8023bde:	e7c3      	b.n	8023b68 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 8023be0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023be2:	e6e0      	b.n	80239a6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 8023be4:	22ff      	movs	r2, #255	; 0xff
 8023be6:	e6fc      	b.n	80239e2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 8023be8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023bea:	7003      	strb	r3, [r0, #0]
 8023bec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023bee:	7043      	strb	r3, [r0, #1]
 8023bf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023bf2:	7083      	strb	r3, [r0, #2]
 8023bf4:	e789      	b.n	8023b0a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 8023bf6:	9b08      	ldr	r3, [sp, #32]
 8023bf8:	b153      	cbz	r3, 8023c10 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x36c>
 8023bfa:	441c      	add	r4, r3
 8023bfc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023bfe:	b2a4      	uxth	r4, r4
 8023c00:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 8023c04:	f004 0407 	and.w	r4, r4, #7
 8023c08:	7819      	ldrb	r1, [r3, #0]
 8023c0a:	9324      	str	r3, [sp, #144]	; 0x90
 8023c0c:	4121      	asrs	r1, r4
 8023c0e:	b2c9      	uxtb	r1, r1
 8023c10:	9b07      	ldr	r3, [sp, #28]
 8023c12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8023c16:	445b      	add	r3, fp
 8023c18:	9307      	str	r3, [sp, #28]
 8023c1a:	e72a      	b.n	8023a72 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ce>
 8023c1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023c1e:	2b00      	cmp	r3, #0
 8023c20:	d1d9      	bne.n	8023bd6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 8023c22:	4b04      	ldr	r3, [pc, #16]	; (8023c34 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 8023c24:	6818      	ldr	r0, [r3, #0]
 8023c26:	6803      	ldr	r3, [r0, #0]
 8023c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023c2a:	4798      	blx	r3
 8023c2c:	e7d3      	b.n	8023bd6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 8023c2e:	bf00      	nop
 8023c30:	2000bf5e 	.word	0x2000bf5e
 8023c34:	2000bf68 	.word	0x2000bf68
 8023c38:	2000bf60 	.word	0x2000bf60
 8023c3c:	2b00      	cmp	r3, #0
 8023c3e:	f43f aea9 	beq.w	8023994 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8023c42:	2180      	movs	r1, #128	; 0x80
 8023c44:	e79a      	b.n	8023b7c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d8>
 8023c46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023c48:	b11b      	cbz	r3, 8023c52 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 8023c4a:	07fb      	lsls	r3, r7, #31
 8023c4c:	d501      	bpl.n	8023c52 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 8023c4e:	3701      	adds	r7, #1
 8023c50:	b2bf      	uxth	r7, r7
 8023c52:	2211      	movs	r2, #17
 8023c54:	e6c5      	b.n	80239e2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 8023c56:	2255      	movs	r2, #85	; 0x55
 8023c58:	e6c3      	b.n	80239e2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 8023c5a:	bf00      	nop

08023c5c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8023c5c:	b538      	push	{r3, r4, r5, lr}
 8023c5e:	4c15      	ldr	r4, [pc, #84]	; (8023cb4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8023c60:	4605      	mov	r5, r0
 8023c62:	7823      	ldrb	r3, [r4, #0]
 8023c64:	f3bf 8f5b 	dmb	ish
 8023c68:	07da      	lsls	r2, r3, #31
 8023c6a:	d40b      	bmi.n	8023c84 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8023c6c:	4620      	mov	r0, r4
 8023c6e:	f006 fd5e 	bl	802a72e <__cxa_guard_acquire>
 8023c72:	b138      	cbz	r0, 8023c84 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8023c74:	4620      	mov	r0, r4
 8023c76:	f006 fd66 	bl	802a746 <__cxa_guard_release>
 8023c7a:	4a0f      	ldr	r2, [pc, #60]	; (8023cb8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8023c7c:	490f      	ldr	r1, [pc, #60]	; (8023cbc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8023c7e:	4810      	ldr	r0, [pc, #64]	; (8023cc0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8023c80:	f006 fd4b 	bl	802a71a <__aeabi_atexit>
 8023c84:	4c0f      	ldr	r4, [pc, #60]	; (8023cc4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8023c86:	7823      	ldrb	r3, [r4, #0]
 8023c88:	f3bf 8f5b 	dmb	ish
 8023c8c:	07db      	lsls	r3, r3, #31
 8023c8e:	d40b      	bmi.n	8023ca8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8023c90:	4620      	mov	r0, r4
 8023c92:	f006 fd4c 	bl	802a72e <__cxa_guard_acquire>
 8023c96:	b138      	cbz	r0, 8023ca8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8023c98:	4620      	mov	r0, r4
 8023c9a:	f006 fd54 	bl	802a746 <__cxa_guard_release>
 8023c9e:	4a06      	ldr	r2, [pc, #24]	; (8023cb8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8023ca0:	4909      	ldr	r1, [pc, #36]	; (8023cc8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8023ca2:	480a      	ldr	r0, [pc, #40]	; (8023ccc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8023ca4:	f006 fd39 	bl	802a71a <__aeabi_atexit>
 8023ca8:	4b05      	ldr	r3, [pc, #20]	; (8023cc0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8023caa:	612b      	str	r3, [r5, #16]
 8023cac:	4b07      	ldr	r3, [pc, #28]	; (8023ccc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8023cae:	616b      	str	r3, [r5, #20]
 8023cb0:	bd38      	pop	{r3, r4, r5, pc}
 8023cb2:	bf00      	nop
 8023cb4:	2000c074 	.word	0x2000c074
 8023cb8:	20000000 	.word	0x20000000
 8023cbc:	08022893 	.word	0x08022893
 8023cc0:	200000c8 	.word	0x200000c8
 8023cc4:	2000c078 	.word	0x2000c078
 8023cc8:	08022891 	.word	0x08022891
 8023ccc:	200000cc 	.word	0x200000cc

08023cd0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8023cd0:	b538      	push	{r3, r4, r5, lr}
 8023cd2:	4c15      	ldr	r4, [pc, #84]	; (8023d28 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8023cd4:	4605      	mov	r5, r0
 8023cd6:	7823      	ldrb	r3, [r4, #0]
 8023cd8:	f3bf 8f5b 	dmb	ish
 8023cdc:	07da      	lsls	r2, r3, #31
 8023cde:	d40b      	bmi.n	8023cf8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8023ce0:	4620      	mov	r0, r4
 8023ce2:	f006 fd24 	bl	802a72e <__cxa_guard_acquire>
 8023ce6:	b138      	cbz	r0, 8023cf8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8023ce8:	4620      	mov	r0, r4
 8023cea:	f006 fd2c 	bl	802a746 <__cxa_guard_release>
 8023cee:	4a0f      	ldr	r2, [pc, #60]	; (8023d2c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8023cf0:	490f      	ldr	r1, [pc, #60]	; (8023d30 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8023cf2:	4810      	ldr	r0, [pc, #64]	; (8023d34 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8023cf4:	f006 fd11 	bl	802a71a <__aeabi_atexit>
 8023cf8:	4c0f      	ldr	r4, [pc, #60]	; (8023d38 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8023cfa:	7823      	ldrb	r3, [r4, #0]
 8023cfc:	f3bf 8f5b 	dmb	ish
 8023d00:	07db      	lsls	r3, r3, #31
 8023d02:	d40b      	bmi.n	8023d1c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8023d04:	4620      	mov	r0, r4
 8023d06:	f006 fd12 	bl	802a72e <__cxa_guard_acquire>
 8023d0a:	b138      	cbz	r0, 8023d1c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8023d0c:	4620      	mov	r0, r4
 8023d0e:	f006 fd1a 	bl	802a746 <__cxa_guard_release>
 8023d12:	4a06      	ldr	r2, [pc, #24]	; (8023d2c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8023d14:	4909      	ldr	r1, [pc, #36]	; (8023d3c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8023d16:	480a      	ldr	r0, [pc, #40]	; (8023d40 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8023d18:	f006 fcff 	bl	802a71a <__aeabi_atexit>
 8023d1c:	4b05      	ldr	r3, [pc, #20]	; (8023d34 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8023d1e:	60ab      	str	r3, [r5, #8]
 8023d20:	4b07      	ldr	r3, [pc, #28]	; (8023d40 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8023d22:	60eb      	str	r3, [r5, #12]
 8023d24:	bd38      	pop	{r3, r4, r5, pc}
 8023d26:	bf00      	nop
 8023d28:	2000c054 	.word	0x2000c054
 8023d2c:	20000000 	.word	0x20000000
 8023d30:	08022897 	.word	0x08022897
 8023d34:	200000a8 	.word	0x200000a8
 8023d38:	2000c058 	.word	0x2000c058
 8023d3c:	08022895 	.word	0x08022895
 8023d40:	200000ac 	.word	0x200000ac

08023d44 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 8023d44:	b510      	push	{r4, lr}
 8023d46:	4604      	mov	r4, r0
 8023d48:	f7ff ff88 	bl	8023c5c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8023d4c:	4620      	mov	r0, r4
 8023d4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023d52:	f7ff bfbd 	b.w	8023cd0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08023d58 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8023d58:	b538      	push	{r3, r4, r5, lr}
 8023d5a:	4c15      	ldr	r4, [pc, #84]	; (8023db0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8023d5c:	4605      	mov	r5, r0
 8023d5e:	7823      	ldrb	r3, [r4, #0]
 8023d60:	f3bf 8f5b 	dmb	ish
 8023d64:	07da      	lsls	r2, r3, #31
 8023d66:	d40b      	bmi.n	8023d80 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8023d68:	4620      	mov	r0, r4
 8023d6a:	f006 fce0 	bl	802a72e <__cxa_guard_acquire>
 8023d6e:	b138      	cbz	r0, 8023d80 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8023d70:	4620      	mov	r0, r4
 8023d72:	f006 fce8 	bl	802a746 <__cxa_guard_release>
 8023d76:	4a0f      	ldr	r2, [pc, #60]	; (8023db4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8023d78:	490f      	ldr	r1, [pc, #60]	; (8023db8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8023d7a:	4810      	ldr	r0, [pc, #64]	; (8023dbc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8023d7c:	f006 fccd 	bl	802a71a <__aeabi_atexit>
 8023d80:	4c0f      	ldr	r4, [pc, #60]	; (8023dc0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8023d82:	7823      	ldrb	r3, [r4, #0]
 8023d84:	f3bf 8f5b 	dmb	ish
 8023d88:	07db      	lsls	r3, r3, #31
 8023d8a:	d40b      	bmi.n	8023da4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8023d8c:	4620      	mov	r0, r4
 8023d8e:	f006 fcce 	bl	802a72e <__cxa_guard_acquire>
 8023d92:	b138      	cbz	r0, 8023da4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8023d94:	4620      	mov	r0, r4
 8023d96:	f006 fcd6 	bl	802a746 <__cxa_guard_release>
 8023d9a:	4a06      	ldr	r2, [pc, #24]	; (8023db4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8023d9c:	4909      	ldr	r1, [pc, #36]	; (8023dc4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8023d9e:	480a      	ldr	r0, [pc, #40]	; (8023dc8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8023da0:	f006 fcbb 	bl	802a71a <__aeabi_atexit>
 8023da4:	4b05      	ldr	r3, [pc, #20]	; (8023dbc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8023da6:	622b      	str	r3, [r5, #32]
 8023da8:	4b07      	ldr	r3, [pc, #28]	; (8023dc8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8023daa:	626b      	str	r3, [r5, #36]	; 0x24
 8023dac:	bd38      	pop	{r3, r4, r5, pc}
 8023dae:	bf00      	nop
 8023db0:	2000c07c 	.word	0x2000c07c
 8023db4:	20000000 	.word	0x20000000
 8023db8:	0802288b 	.word	0x0802288b
 8023dbc:	200000d0 	.word	0x200000d0
 8023dc0:	2000c080 	.word	0x2000c080
 8023dc4:	08022889 	.word	0x08022889
 8023dc8:	200000d4 	.word	0x200000d4

08023dcc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8023dcc:	b538      	push	{r3, r4, r5, lr}
 8023dce:	4c15      	ldr	r4, [pc, #84]	; (8023e24 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8023dd0:	4605      	mov	r5, r0
 8023dd2:	7823      	ldrb	r3, [r4, #0]
 8023dd4:	f3bf 8f5b 	dmb	ish
 8023dd8:	07da      	lsls	r2, r3, #31
 8023dda:	d40b      	bmi.n	8023df4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8023ddc:	4620      	mov	r0, r4
 8023dde:	f006 fca6 	bl	802a72e <__cxa_guard_acquire>
 8023de2:	b138      	cbz	r0, 8023df4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8023de4:	4620      	mov	r0, r4
 8023de6:	f006 fcae 	bl	802a746 <__cxa_guard_release>
 8023dea:	4a0f      	ldr	r2, [pc, #60]	; (8023e28 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8023dec:	490f      	ldr	r1, [pc, #60]	; (8023e2c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8023dee:	4810      	ldr	r0, [pc, #64]	; (8023e30 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8023df0:	f006 fc93 	bl	802a71a <__aeabi_atexit>
 8023df4:	4c0f      	ldr	r4, [pc, #60]	; (8023e34 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8023df6:	7823      	ldrb	r3, [r4, #0]
 8023df8:	f3bf 8f5b 	dmb	ish
 8023dfc:	07db      	lsls	r3, r3, #31
 8023dfe:	d40b      	bmi.n	8023e18 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8023e00:	4620      	mov	r0, r4
 8023e02:	f006 fc94 	bl	802a72e <__cxa_guard_acquire>
 8023e06:	b138      	cbz	r0, 8023e18 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8023e08:	4620      	mov	r0, r4
 8023e0a:	f006 fc9c 	bl	802a746 <__cxa_guard_release>
 8023e0e:	4a06      	ldr	r2, [pc, #24]	; (8023e28 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8023e10:	4909      	ldr	r1, [pc, #36]	; (8023e38 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8023e12:	480a      	ldr	r0, [pc, #40]	; (8023e3c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8023e14:	f006 fc81 	bl	802a71a <__aeabi_atexit>
 8023e18:	4b05      	ldr	r3, [pc, #20]	; (8023e30 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8023e1a:	61ab      	str	r3, [r5, #24]
 8023e1c:	4b07      	ldr	r3, [pc, #28]	; (8023e3c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8023e1e:	61eb      	str	r3, [r5, #28]
 8023e20:	bd38      	pop	{r3, r4, r5, pc}
 8023e22:	bf00      	nop
 8023e24:	2000c05c 	.word	0x2000c05c
 8023e28:	20000000 	.word	0x20000000
 8023e2c:	0802288f 	.word	0x0802288f
 8023e30:	200000b0 	.word	0x200000b0
 8023e34:	2000c060 	.word	0x2000c060
 8023e38:	0802288d 	.word	0x0802288d
 8023e3c:	200000b4 	.word	0x200000b4

08023e40 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 8023e40:	b510      	push	{r4, lr}
 8023e42:	4604      	mov	r4, r0
 8023e44:	f7ff ff88 	bl	8023d58 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8023e48:	4620      	mov	r0, r4
 8023e4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023e4e:	f7ff bfbd 	b.w	8023dcc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08023e54 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 8023e54:	b538      	push	{r3, r4, r5, lr}
 8023e56:	4c15      	ldr	r4, [pc, #84]	; (8023eac <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 8023e58:	4605      	mov	r5, r0
 8023e5a:	7823      	ldrb	r3, [r4, #0]
 8023e5c:	f3bf 8f5b 	dmb	ish
 8023e60:	07da      	lsls	r2, r3, #31
 8023e62:	d40b      	bmi.n	8023e7c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8023e64:	4620      	mov	r0, r4
 8023e66:	f006 fc62 	bl	802a72e <__cxa_guard_acquire>
 8023e6a:	b138      	cbz	r0, 8023e7c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8023e6c:	4620      	mov	r0, r4
 8023e6e:	f006 fc6a 	bl	802a746 <__cxa_guard_release>
 8023e72:	4a0f      	ldr	r2, [pc, #60]	; (8023eb0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8023e74:	490f      	ldr	r1, [pc, #60]	; (8023eb4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 8023e76:	4810      	ldr	r0, [pc, #64]	; (8023eb8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8023e78:	f006 fc4f 	bl	802a71a <__aeabi_atexit>
 8023e7c:	4c0f      	ldr	r4, [pc, #60]	; (8023ebc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 8023e7e:	7823      	ldrb	r3, [r4, #0]
 8023e80:	f3bf 8f5b 	dmb	ish
 8023e84:	07db      	lsls	r3, r3, #31
 8023e86:	d40b      	bmi.n	8023ea0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8023e88:	4620      	mov	r0, r4
 8023e8a:	f006 fc50 	bl	802a72e <__cxa_guard_acquire>
 8023e8e:	b138      	cbz	r0, 8023ea0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8023e90:	4620      	mov	r0, r4
 8023e92:	f006 fc58 	bl	802a746 <__cxa_guard_release>
 8023e96:	4a06      	ldr	r2, [pc, #24]	; (8023eb0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8023e98:	4909      	ldr	r1, [pc, #36]	; (8023ec0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 8023e9a:	480a      	ldr	r0, [pc, #40]	; (8023ec4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8023e9c:	f006 fc3d 	bl	802a71a <__aeabi_atexit>
 8023ea0:	4b05      	ldr	r3, [pc, #20]	; (8023eb8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8023ea2:	632b      	str	r3, [r5, #48]	; 0x30
 8023ea4:	4b07      	ldr	r3, [pc, #28]	; (8023ec4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8023ea6:	636b      	str	r3, [r5, #52]	; 0x34
 8023ea8:	bd38      	pop	{r3, r4, r5, pc}
 8023eaa:	bf00      	nop
 8023eac:	2000c064 	.word	0x2000c064
 8023eb0:	20000000 	.word	0x20000000
 8023eb4:	08022883 	.word	0x08022883
 8023eb8:	200000b8 	.word	0x200000b8
 8023ebc:	2000c068 	.word	0x2000c068
 8023ec0:	08022881 	.word	0x08022881
 8023ec4:	200000bc 	.word	0x200000bc

08023ec8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8023ec8:	b538      	push	{r3, r4, r5, lr}
 8023eca:	4c15      	ldr	r4, [pc, #84]	; (8023f20 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8023ecc:	4605      	mov	r5, r0
 8023ece:	7823      	ldrb	r3, [r4, #0]
 8023ed0:	f3bf 8f5b 	dmb	ish
 8023ed4:	07da      	lsls	r2, r3, #31
 8023ed6:	d40b      	bmi.n	8023ef0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8023ed8:	4620      	mov	r0, r4
 8023eda:	f006 fc28 	bl	802a72e <__cxa_guard_acquire>
 8023ede:	b138      	cbz	r0, 8023ef0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8023ee0:	4620      	mov	r0, r4
 8023ee2:	f006 fc30 	bl	802a746 <__cxa_guard_release>
 8023ee6:	4a0f      	ldr	r2, [pc, #60]	; (8023f24 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8023ee8:	490f      	ldr	r1, [pc, #60]	; (8023f28 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8023eea:	4810      	ldr	r0, [pc, #64]	; (8023f2c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8023eec:	f006 fc15 	bl	802a71a <__aeabi_atexit>
 8023ef0:	4c0f      	ldr	r4, [pc, #60]	; (8023f30 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 8023ef2:	7823      	ldrb	r3, [r4, #0]
 8023ef4:	f3bf 8f5b 	dmb	ish
 8023ef8:	07db      	lsls	r3, r3, #31
 8023efa:	d40b      	bmi.n	8023f14 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8023efc:	4620      	mov	r0, r4
 8023efe:	f006 fc16 	bl	802a72e <__cxa_guard_acquire>
 8023f02:	b138      	cbz	r0, 8023f14 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8023f04:	4620      	mov	r0, r4
 8023f06:	f006 fc1e 	bl	802a746 <__cxa_guard_release>
 8023f0a:	4a06      	ldr	r2, [pc, #24]	; (8023f24 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8023f0c:	4909      	ldr	r1, [pc, #36]	; (8023f34 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8023f0e:	480a      	ldr	r0, [pc, #40]	; (8023f38 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8023f10:	f006 fc03 	bl	802a71a <__aeabi_atexit>
 8023f14:	4b05      	ldr	r3, [pc, #20]	; (8023f2c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8023f16:	62ab      	str	r3, [r5, #40]	; 0x28
 8023f18:	4b07      	ldr	r3, [pc, #28]	; (8023f38 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8023f1a:	62eb      	str	r3, [r5, #44]	; 0x2c
 8023f1c:	bd38      	pop	{r3, r4, r5, pc}
 8023f1e:	bf00      	nop
 8023f20:	2000c03c 	.word	0x2000c03c
 8023f24:	20000000 	.word	0x20000000
 8023f28:	08022887 	.word	0x08022887
 8023f2c:	20000090 	.word	0x20000090
 8023f30:	2000c040 	.word	0x2000c040
 8023f34:	08022885 	.word	0x08022885
 8023f38:	20000094 	.word	0x20000094

08023f3c <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 8023f3c:	b510      	push	{r4, lr}
 8023f3e:	4604      	mov	r4, r0
 8023f40:	f7ff ff88 	bl	8023e54 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 8023f44:	4620      	mov	r0, r4
 8023f46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023f4a:	f7ff bfbd 	b.w	8023ec8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08023f50 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8023f50:	b538      	push	{r3, r4, r5, lr}
 8023f52:	4c15      	ldr	r4, [pc, #84]	; (8023fa8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8023f54:	4605      	mov	r5, r0
 8023f56:	7823      	ldrb	r3, [r4, #0]
 8023f58:	f3bf 8f5b 	dmb	ish
 8023f5c:	07da      	lsls	r2, r3, #31
 8023f5e:	d40b      	bmi.n	8023f78 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8023f60:	4620      	mov	r0, r4
 8023f62:	f006 fbe4 	bl	802a72e <__cxa_guard_acquire>
 8023f66:	b138      	cbz	r0, 8023f78 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8023f68:	4620      	mov	r0, r4
 8023f6a:	f006 fbec 	bl	802a746 <__cxa_guard_release>
 8023f6e:	4a0f      	ldr	r2, [pc, #60]	; (8023fac <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8023f70:	490f      	ldr	r1, [pc, #60]	; (8023fb0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8023f72:	4810      	ldr	r0, [pc, #64]	; (8023fb4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8023f74:	f006 fbd1 	bl	802a71a <__aeabi_atexit>
 8023f78:	4c0f      	ldr	r4, [pc, #60]	; (8023fb8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8023f7a:	7823      	ldrb	r3, [r4, #0]
 8023f7c:	f3bf 8f5b 	dmb	ish
 8023f80:	07db      	lsls	r3, r3, #31
 8023f82:	d40b      	bmi.n	8023f9c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8023f84:	4620      	mov	r0, r4
 8023f86:	f006 fbd2 	bl	802a72e <__cxa_guard_acquire>
 8023f8a:	b138      	cbz	r0, 8023f9c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8023f8c:	4620      	mov	r0, r4
 8023f8e:	f006 fbda 	bl	802a746 <__cxa_guard_release>
 8023f92:	4a06      	ldr	r2, [pc, #24]	; (8023fac <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8023f94:	4909      	ldr	r1, [pc, #36]	; (8023fbc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8023f96:	480a      	ldr	r0, [pc, #40]	; (8023fc0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8023f98:	f006 fbbf 	bl	802a71a <__aeabi_atexit>
 8023f9c:	4b05      	ldr	r3, [pc, #20]	; (8023fb4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8023f9e:	642b      	str	r3, [r5, #64]	; 0x40
 8023fa0:	4b07      	ldr	r3, [pc, #28]	; (8023fc0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8023fa2:	646b      	str	r3, [r5, #68]	; 0x44
 8023fa4:	bd38      	pop	{r3, r4, r5, pc}
 8023fa6:	bf00      	nop
 8023fa8:	2000c06c 	.word	0x2000c06c
 8023fac:	20000000 	.word	0x20000000
 8023fb0:	0802287b 	.word	0x0802287b
 8023fb4:	200000c0 	.word	0x200000c0
 8023fb8:	2000c070 	.word	0x2000c070
 8023fbc:	08022879 	.word	0x08022879
 8023fc0:	200000c4 	.word	0x200000c4

08023fc4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8023fc4:	b538      	push	{r3, r4, r5, lr}
 8023fc6:	4c15      	ldr	r4, [pc, #84]	; (802401c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8023fc8:	4605      	mov	r5, r0
 8023fca:	7823      	ldrb	r3, [r4, #0]
 8023fcc:	f3bf 8f5b 	dmb	ish
 8023fd0:	07da      	lsls	r2, r3, #31
 8023fd2:	d40b      	bmi.n	8023fec <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8023fd4:	4620      	mov	r0, r4
 8023fd6:	f006 fbaa 	bl	802a72e <__cxa_guard_acquire>
 8023fda:	b138      	cbz	r0, 8023fec <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8023fdc:	4620      	mov	r0, r4
 8023fde:	f006 fbb2 	bl	802a746 <__cxa_guard_release>
 8023fe2:	4a0f      	ldr	r2, [pc, #60]	; (8024020 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8023fe4:	490f      	ldr	r1, [pc, #60]	; (8024024 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8023fe6:	4810      	ldr	r0, [pc, #64]	; (8024028 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8023fe8:	f006 fb97 	bl	802a71a <__aeabi_atexit>
 8023fec:	4c0f      	ldr	r4, [pc, #60]	; (802402c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8023fee:	7823      	ldrb	r3, [r4, #0]
 8023ff0:	f3bf 8f5b 	dmb	ish
 8023ff4:	07db      	lsls	r3, r3, #31
 8023ff6:	d40b      	bmi.n	8024010 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8023ff8:	4620      	mov	r0, r4
 8023ffa:	f006 fb98 	bl	802a72e <__cxa_guard_acquire>
 8023ffe:	b138      	cbz	r0, 8024010 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8024000:	4620      	mov	r0, r4
 8024002:	f006 fba0 	bl	802a746 <__cxa_guard_release>
 8024006:	4a06      	ldr	r2, [pc, #24]	; (8024020 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8024008:	4909      	ldr	r1, [pc, #36]	; (8024030 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 802400a:	480a      	ldr	r0, [pc, #40]	; (8024034 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 802400c:	f006 fb85 	bl	802a71a <__aeabi_atexit>
 8024010:	4b05      	ldr	r3, [pc, #20]	; (8024028 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8024012:	63ab      	str	r3, [r5, #56]	; 0x38
 8024014:	4b07      	ldr	r3, [pc, #28]	; (8024034 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8024016:	63eb      	str	r3, [r5, #60]	; 0x3c
 8024018:	bd38      	pop	{r3, r4, r5, pc}
 802401a:	bf00      	nop
 802401c:	2000c04c 	.word	0x2000c04c
 8024020:	20000000 	.word	0x20000000
 8024024:	0802287f 	.word	0x0802287f
 8024028:	200000a0 	.word	0x200000a0
 802402c:	2000c050 	.word	0x2000c050
 8024030:	0802287d 	.word	0x0802287d
 8024034:	200000a4 	.word	0x200000a4

08024038 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 8024038:	b510      	push	{r4, lr}
 802403a:	4604      	mov	r4, r0
 802403c:	f7ff ff88 	bl	8023f50 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8024040:	4620      	mov	r0, r4
 8024042:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024046:	f7ff bfbd 	b.w	8023fc4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0802404c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 802404c:	b538      	push	{r3, r4, r5, lr}
 802404e:	4c15      	ldr	r4, [pc, #84]	; (80240a4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8024050:	4605      	mov	r5, r0
 8024052:	7823      	ldrb	r3, [r4, #0]
 8024054:	f3bf 8f5b 	dmb	ish
 8024058:	07da      	lsls	r2, r3, #31
 802405a:	d40b      	bmi.n	8024074 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 802405c:	4620      	mov	r0, r4
 802405e:	f006 fb66 	bl	802a72e <__cxa_guard_acquire>
 8024062:	b138      	cbz	r0, 8024074 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8024064:	4620      	mov	r0, r4
 8024066:	f006 fb6e 	bl	802a746 <__cxa_guard_release>
 802406a:	4a0f      	ldr	r2, [pc, #60]	; (80240a8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 802406c:	490f      	ldr	r1, [pc, #60]	; (80240ac <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 802406e:	4810      	ldr	r0, [pc, #64]	; (80240b0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8024070:	f006 fb53 	bl	802a71a <__aeabi_atexit>
 8024074:	4c0f      	ldr	r4, [pc, #60]	; (80240b4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8024076:	7823      	ldrb	r3, [r4, #0]
 8024078:	f3bf 8f5b 	dmb	ish
 802407c:	07db      	lsls	r3, r3, #31
 802407e:	d40b      	bmi.n	8024098 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8024080:	4620      	mov	r0, r4
 8024082:	f006 fb54 	bl	802a72e <__cxa_guard_acquire>
 8024086:	b138      	cbz	r0, 8024098 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8024088:	4620      	mov	r0, r4
 802408a:	f006 fb5c 	bl	802a746 <__cxa_guard_release>
 802408e:	4a06      	ldr	r2, [pc, #24]	; (80240a8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8024090:	4909      	ldr	r1, [pc, #36]	; (80240b8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8024092:	480a      	ldr	r0, [pc, #40]	; (80240bc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8024094:	f006 fb41 	bl	802a71a <__aeabi_atexit>
 8024098:	4b05      	ldr	r3, [pc, #20]	; (80240b0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 802409a:	652b      	str	r3, [r5, #80]	; 0x50
 802409c:	4b07      	ldr	r3, [pc, #28]	; (80240bc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 802409e:	656b      	str	r3, [r5, #84]	; 0x54
 80240a0:	bd38      	pop	{r3, r4, r5, pc}
 80240a2:	bf00      	nop
 80240a4:	2000c044 	.word	0x2000c044
 80240a8:	20000000 	.word	0x20000000
 80240ac:	08022873 	.word	0x08022873
 80240b0:	20000098 	.word	0x20000098
 80240b4:	2000c048 	.word	0x2000c048
 80240b8:	08022871 	.word	0x08022871
 80240bc:	2000009c 	.word	0x2000009c

080240c0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 80240c0:	b538      	push	{r3, r4, r5, lr}
 80240c2:	4c15      	ldr	r4, [pc, #84]	; (8024118 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 80240c4:	4605      	mov	r5, r0
 80240c6:	7823      	ldrb	r3, [r4, #0]
 80240c8:	f3bf 8f5b 	dmb	ish
 80240cc:	07da      	lsls	r2, r3, #31
 80240ce:	d40b      	bmi.n	80240e8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 80240d0:	4620      	mov	r0, r4
 80240d2:	f006 fb2c 	bl	802a72e <__cxa_guard_acquire>
 80240d6:	b138      	cbz	r0, 80240e8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 80240d8:	4620      	mov	r0, r4
 80240da:	f006 fb34 	bl	802a746 <__cxa_guard_release>
 80240de:	4a0f      	ldr	r2, [pc, #60]	; (802411c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 80240e0:	490f      	ldr	r1, [pc, #60]	; (8024120 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 80240e2:	4810      	ldr	r0, [pc, #64]	; (8024124 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 80240e4:	f006 fb19 	bl	802a71a <__aeabi_atexit>
 80240e8:	4c0f      	ldr	r4, [pc, #60]	; (8024128 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 80240ea:	7823      	ldrb	r3, [r4, #0]
 80240ec:	f3bf 8f5b 	dmb	ish
 80240f0:	07db      	lsls	r3, r3, #31
 80240f2:	d40b      	bmi.n	802410c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 80240f4:	4620      	mov	r0, r4
 80240f6:	f006 fb1a 	bl	802a72e <__cxa_guard_acquire>
 80240fa:	b138      	cbz	r0, 802410c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 80240fc:	4620      	mov	r0, r4
 80240fe:	f006 fb22 	bl	802a746 <__cxa_guard_release>
 8024102:	4a06      	ldr	r2, [pc, #24]	; (802411c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8024104:	4909      	ldr	r1, [pc, #36]	; (802412c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8024106:	480a      	ldr	r0, [pc, #40]	; (8024130 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8024108:	f006 fb07 	bl	802a71a <__aeabi_atexit>
 802410c:	4b05      	ldr	r3, [pc, #20]	; (8024124 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 802410e:	64ab      	str	r3, [r5, #72]	; 0x48
 8024110:	4b07      	ldr	r3, [pc, #28]	; (8024130 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8024112:	64eb      	str	r3, [r5, #76]	; 0x4c
 8024114:	bd38      	pop	{r3, r4, r5, pc}
 8024116:	bf00      	nop
 8024118:	2000c034 	.word	0x2000c034
 802411c:	20000000 	.word	0x20000000
 8024120:	08022877 	.word	0x08022877
 8024124:	20000088 	.word	0x20000088
 8024128:	2000c038 	.word	0x2000c038
 802412c:	08022875 	.word	0x08022875
 8024130:	2000008c 	.word	0x2000008c

08024134 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 8024134:	b510      	push	{r4, lr}
 8024136:	4604      	mov	r4, r0
 8024138:	f7ff ff88 	bl	802404c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 802413c:	4620      	mov	r0, r4
 802413e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024142:	f7ff bfbd 	b.w	80240c0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

08024146 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 8024146:	b510      	push	{r4, lr}
 8024148:	4604      	mov	r4, r0
 802414a:	f7ff fff3 	bl	8024134 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 802414e:	4620      	mov	r0, r4
 8024150:	f7ff ff72 	bl	8024038 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 8024154:	4620      	mov	r0, r4
 8024156:	f7ff fe73 	bl	8023e40 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 802415a:	4620      	mov	r0, r4
 802415c:	f7ff fdf2 	bl	8023d44 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 8024160:	4620      	mov	r0, r4
 8024162:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024166:	f7ff bee9 	b.w	8023f3c <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0802416c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 802416c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024170:	b087      	sub	sp, #28
 8024172:	7888      	ldrb	r0, [r1, #2]
 8024174:	4616      	mov	r6, r2
 8024176:	9001      	str	r0, [sp, #4]
 8024178:	7848      	ldrb	r0, [r1, #1]
 802417a:	9100      	str	r1, [sp, #0]
 802417c:	9002      	str	r0, [sp, #8]
 802417e:	7808      	ldrb	r0, [r1, #0]
 8024180:	9901      	ldr	r1, [sp, #4]
 8024182:	9003      	str	r0, [sp, #12]
 8024184:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8024188:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 802418c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8024190:	9902      	ldr	r1, [sp, #8]
 8024192:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 8024196:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 802419a:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 802419e:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 80241a2:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 80241a6:	9005      	str	r0, [sp, #20]
 80241a8:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 80241ac:	fb05 ca0e 	mla	sl, r5, lr, ip
 80241b0:	2d00      	cmp	r5, #0
 80241b2:	eb06 080a 	add.w	r8, r6, sl
 80241b6:	db4a      	blt.n	802424e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 80241b8:	45a9      	cmp	r9, r5
 80241ba:	dd48      	ble.n	802424e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 80241bc:	f1bc 0f00 	cmp.w	ip, #0
 80241c0:	db43      	blt.n	802424a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 80241c2:	45e6      	cmp	lr, ip
 80241c4:	dd41      	ble.n	802424a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 80241c6:	f816 600a 	ldrb.w	r6, [r6, sl]
 80241ca:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80241ce:	441e      	add	r6, r3
 80241d0:	f11c 0001 	adds.w	r0, ip, #1
 80241d4:	d43e      	bmi.n	8024254 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 80241d6:	4586      	cmp	lr, r0
 80241d8:	dd3c      	ble.n	8024254 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 80241da:	2a00      	cmp	r2, #0
 80241dc:	d03a      	beq.n	8024254 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 80241de:	f898 0001 	ldrb.w	r0, [r8, #1]
 80241e2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80241e6:	4418      	add	r0, r3
 80241e8:	3501      	adds	r5, #1
 80241ea:	d437      	bmi.n	802425c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 80241ec:	45a9      	cmp	r9, r5
 80241ee:	dd35      	ble.n	802425c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 80241f0:	b3a4      	cbz	r4, 802425c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 80241f2:	f1bc 0f00 	cmp.w	ip, #0
 80241f6:	db2f      	blt.n	8024258 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 80241f8:	45e6      	cmp	lr, ip
 80241fa:	dd2d      	ble.n	8024258 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 80241fc:	f818 500e 	ldrb.w	r5, [r8, lr]
 8024200:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8024204:	441d      	add	r5, r3
 8024206:	f11c 0c01 	adds.w	ip, ip, #1
 802420a:	d42a      	bmi.n	8024262 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 802420c:	45e6      	cmp	lr, ip
 802420e:	dd28      	ble.n	8024262 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 8024210:	b33a      	cbz	r2, 8024262 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 8024212:	44c6      	add	lr, r8
 8024214:	f89e c001 	ldrb.w	ip, [lr, #1]
 8024218:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 802421c:	4463      	add	r3, ip
 802421e:	ea6f 0c07 	mvn.w	ip, r7
 8024222:	2a0f      	cmp	r2, #15
 8024224:	f896 a000 	ldrb.w	sl, [r6]
 8024228:	fa5f fc8c 	uxtb.w	ip, ip
 802422c:	f890 b000 	ldrb.w	fp, [r0]
 8024230:	f895 9000 	ldrb.w	r9, [r5]
 8024234:	7819      	ldrb	r1, [r3, #0]
 8024236:	d801      	bhi.n	802423c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xd0>
 8024238:	2c0f      	cmp	r4, #15
 802423a:	d914      	bls.n	8024266 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xfa>
 802423c:	4b40      	ldr	r3, [pc, #256]	; (8024340 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 802423e:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8024242:	4a40      	ldr	r2, [pc, #256]	; (8024344 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 8024244:	4840      	ldr	r0, [pc, #256]	; (8024348 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1dc>)
 8024246:	f006 fa9b 	bl	802a780 <__assert_func>
 802424a:	ae05      	add	r6, sp, #20
 802424c:	e7c0      	b.n	80241d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x64>
 802424e:	a805      	add	r0, sp, #20
 8024250:	4606      	mov	r6, r0
 8024252:	e7c9      	b.n	80241e8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 8024254:	a805      	add	r0, sp, #20
 8024256:	e7c7      	b.n	80241e8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 8024258:	ad05      	add	r5, sp, #20
 802425a:	e7d4      	b.n	8024206 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x9a>
 802425c:	ab05      	add	r3, sp, #20
 802425e:	461d      	mov	r5, r3
 8024260:	e7dd      	b.n	802421e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 8024262:	ab05      	add	r3, sp, #20
 8024264:	e7db      	b.n	802421e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 8024266:	b292      	uxth	r2, r2
 8024268:	b2a4      	uxth	r4, r4
 802426a:	fa1f fc8c 	uxth.w	ip, ip
 802426e:	fb02 f804 	mul.w	r8, r2, r4
 8024272:	0112      	lsls	r2, r2, #4
 8024274:	b2bf      	uxth	r7, r7
 8024276:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 802427a:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 802427e:	eba2 0208 	sub.w	r2, r2, r8
 8024282:	b2a4      	uxth	r4, r4
 8024284:	b292      	uxth	r2, r2
 8024286:	ebae 0e04 	sub.w	lr, lr, r4
 802428a:	fb02 fb0b 	mul.w	fp, r2, fp
 802428e:	fa1f fe8e 	uxth.w	lr, lr
 8024292:	fb0e ba0a 	mla	sl, lr, sl, fp
 8024296:	fb04 aa09 	mla	sl, r4, r9, sl
 802429a:	fb08 aa01 	mla	sl, r8, r1, sl
 802429e:	9903      	ldr	r1, [sp, #12]
 80242a0:	fb11 f90c 	smulbb	r9, r1, ip
 80242a4:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 80242a8:	9900      	ldr	r1, [sp, #0]
 80242aa:	fb0a 9a07 	mla	sl, sl, r7, r9
 80242ae:	fa1f fa8a 	uxth.w	sl, sl
 80242b2:	f10a 0901 	add.w	r9, sl, #1
 80242b6:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 80242ba:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80242be:	f881 a000 	strb.w	sl, [r1]
 80242c2:	f890 a001 	ldrb.w	sl, [r0, #1]
 80242c6:	f896 9001 	ldrb.w	r9, [r6, #1]
 80242ca:	fb02 fa0a 	mul.w	sl, r2, sl
 80242ce:	9902      	ldr	r1, [sp, #8]
 80242d0:	fb0e aa09 	mla	sl, lr, r9, sl
 80242d4:	f895 9001 	ldrb.w	r9, [r5, #1]
 80242d8:	fb04 aa09 	mla	sl, r4, r9, sl
 80242dc:	f893 9001 	ldrb.w	r9, [r3, #1]
 80242e0:	fb08 a909 	mla	r9, r8, r9, sl
 80242e4:	fb11 fa0c 	smulbb	sl, r1, ip
 80242e8:	9900      	ldr	r1, [sp, #0]
 80242ea:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80242ee:	fb09 a907 	mla	r9, r9, r7, sl
 80242f2:	fa1f f989 	uxth.w	r9, r9
 80242f6:	f109 0a01 	add.w	sl, r9, #1
 80242fa:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 80242fe:	ea4f 2929 	mov.w	r9, r9, asr #8
 8024302:	f881 9001 	strb.w	r9, [r1, #1]
 8024306:	7880      	ldrb	r0, [r0, #2]
 8024308:	78b6      	ldrb	r6, [r6, #2]
 802430a:	4342      	muls	r2, r0
 802430c:	78a8      	ldrb	r0, [r5, #2]
 802430e:	789b      	ldrb	r3, [r3, #2]
 8024310:	fb0e 2206 	mla	r2, lr, r6, r2
 8024314:	fb04 2400 	mla	r4, r4, r0, r2
 8024318:	fb08 4803 	mla	r8, r8, r3, r4
 802431c:	9b01      	ldr	r3, [sp, #4]
 802431e:	fb13 fc0c 	smulbb	ip, r3, ip
 8024322:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8024326:	fb08 c707 	mla	r7, r8, r7, ip
 802432a:	b2bf      	uxth	r7, r7
 802432c:	f107 0c01 	add.w	ip, r7, #1
 8024330:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 8024334:	123f      	asrs	r7, r7, #8
 8024336:	708f      	strb	r7, [r1, #2]
 8024338:	b007      	add	sp, #28
 802433a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802433e:	bf00      	nop
 8024340:	0802fd97 	.word	0x0802fd97
 8024344:	0803028e 	.word	0x0803028e
 8024348:	0802fe60 	.word	0x0802fe60

0802434c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802434c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024350:	ed2d 8b08 	vpush	{d8-d11}
 8024354:	b095      	sub	sp, #84	; 0x54
 8024356:	eeb0 aa40 	vmov.f32	s20, s0
 802435a:	eef0 9a60 	vmov.f32	s19, s1
 802435e:	930a      	str	r3, [sp, #40]	; 0x28
 8024360:	eeb0 9a41 	vmov.f32	s18, s2
 8024364:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 8024368:	eeb0 8a62 	vmov.f32	s16, s5
 802436c:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 802436e:	eef0 8a43 	vmov.f32	s17, s6
 8024372:	930c      	str	r3, [sp, #48]	; 0x30
 8024374:	eef0 ba44 	vmov.f32	s23, s8
 8024378:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 802437c:	eeb0 ba64 	vmov.f32	s22, s9
 8024380:	9013      	str	r0, [sp, #76]	; 0x4c
 8024382:	eef0 aa45 	vmov.f32	s21, s10
 8024386:	9310      	str	r3, [sp, #64]	; 0x40
 8024388:	6860      	ldr	r0, [r4, #4]
 802438a:	910f      	str	r1, [sp, #60]	; 0x3c
 802438c:	9212      	str	r2, [sp, #72]	; 0x48
 802438e:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8024390:	f9bd 50b8 	ldrsh.w	r5, [sp, #184]	; 0xb8
 8024394:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8024398:	fb00 1303 	mla	r3, r0, r3, r1
 802439c:	6821      	ldr	r1, [r4, #0]
 802439e:	6854      	ldr	r4, [r2, #4]
 80243a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80243a4:	18cb      	adds	r3, r1, r3
 80243a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80243a8:	6813      	ldr	r3, [r2, #0]
 80243aa:	930e      	str	r3, [sp, #56]	; 0x38
 80243ac:	1d23      	adds	r3, r4, #4
 80243ae:	9309      	str	r3, [sp, #36]	; 0x24
 80243b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80243b2:	43db      	mvns	r3, r3
 80243b4:	b2db      	uxtb	r3, r3
 80243b6:	930d      	str	r3, [sp, #52]	; 0x34
 80243b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80243ba:	2b00      	cmp	r3, #0
 80243bc:	dc03      	bgt.n	80243c6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 80243be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80243c0:	2b00      	cmp	r3, #0
 80243c2:	f340 823c 	ble.w	802483e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 80243c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80243c8:	2b00      	cmp	r3, #0
 80243ca:	f340 8115 	ble.w	80245f8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 80243ce:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80243d0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80243d2:	1412      	asrs	r2, r2, #16
 80243d4:	ea4f 4323 	mov.w	r3, r3, asr #16
 80243d8:	d431      	bmi.n	802443e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 80243da:	1c51      	adds	r1, r2, #1
 80243dc:	428d      	cmp	r5, r1
 80243de:	dd31      	ble.n	8024444 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 80243e0:	2b00      	cmp	r3, #0
 80243e2:	db2f      	blt.n	8024444 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 80243e4:	1c59      	adds	r1, r3, #1
 80243e6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80243e8:	4288      	cmp	r0, r1
 80243ea:	dd2b      	ble.n	8024444 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 80243ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80243ee:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80243f0:	3b01      	subs	r3, #1
 80243f2:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80243f4:	fb02 1203 	mla	r2, r2, r3, r1
 80243f8:	1412      	asrs	r2, r2, #16
 80243fa:	d42d      	bmi.n	8024458 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 80243fc:	3201      	adds	r2, #1
 80243fe:	4295      	cmp	r5, r2
 8024400:	dd2a      	ble.n	8024458 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 8024402:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8024404:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8024406:	fb02 1303 	mla	r3, r2, r3, r1
 802440a:	141b      	asrs	r3, r3, #16
 802440c:	d424      	bmi.n	8024458 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 802440e:	3301      	adds	r3, #1
 8024410:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024412:	429a      	cmp	r2, r3
 8024414:	dd20      	ble.n	8024458 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 8024416:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024418:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 802441c:	f103 0c03 	add.w	ip, r3, #3
 8024420:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024422:	9311      	str	r3, [sp, #68]	; 0x44
 8024424:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024426:	2b00      	cmp	r3, #0
 8024428:	f300 814f 	bgt.w	80246ca <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37e>
 802442c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802442e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024430:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8024434:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024438:	441a      	add	r2, r3
 802443a:	920b      	str	r2, [sp, #44]	; 0x2c
 802443c:	e0de      	b.n	80245fc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 802443e:	1c51      	adds	r1, r2, #1
 8024440:	f040 80cb 	bne.w	80245da <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8024444:	42aa      	cmp	r2, r5
 8024446:	f280 80c8 	bge.w	80245da <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 802444a:	1c5f      	adds	r7, r3, #1
 802444c:	f2c0 80c5 	blt.w	80245da <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8024450:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024452:	4293      	cmp	r3, r2
 8024454:	f280 80c1 	bge.w	80245da <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8024458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802445a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 802445c:	9311      	str	r3, [sp, #68]	; 0x44
 802445e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024460:	2b00      	cmp	r3, #0
 8024462:	dde3      	ble.n	802442c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 8024464:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024466:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8024468:	141a      	asrs	r2, r3, #16
 802446a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802446c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802446e:	1400      	asrs	r0, r0, #16
 8024470:	f3c1 3103 	ubfx	r1, r1, #12, #4
 8024474:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8024478:	f100 810e 	bmi.w	8024698 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 802447c:	1c46      	adds	r6, r0, #1
 802447e:	42b5      	cmp	r5, r6
 8024480:	f340 810c 	ble.w	802469c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 8024484:	2a00      	cmp	r2, #0
 8024486:	f2c0 8109 	blt.w	802469c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 802448a:	1c56      	adds	r6, r2, #1
 802448c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802448e:	42b4      	cmp	r4, r6
 8024490:	f340 8104 	ble.w	802469c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 8024494:	fb02 0005 	mla	r0, r2, r5, r0
 8024498:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802449a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802449c:	f814 e000 	ldrb.w	lr, [r4, r0]
 80244a0:	4402      	add	r2, r0
 80244a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80244a4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80244a8:	eb00 080e 	add.w	r8, r0, lr
 80244ac:	2b00      	cmp	r3, #0
 80244ae:	f000 80e4 	beq.w	802467a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x32e>
 80244b2:	f892 c001 	ldrb.w	ip, [r2, #1]
 80244b6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80244ba:	4484      	add	ip, r0
 80244bc:	2900      	cmp	r1, #0
 80244be:	f000 80e5 	beq.w	802468c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x340>
 80244c2:	1950      	adds	r0, r2, r5
 80244c4:	5d52      	ldrb	r2, [r2, r5]
 80244c6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80244c8:	7840      	ldrb	r0, [r0, #1]
 80244ca:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80244ce:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80244d2:	4422      	add	r2, r4
 80244d4:	4420      	add	r0, r4
 80244d6:	b29b      	uxth	r3, r3
 80244d8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80244da:	b289      	uxth	r1, r1
 80244dc:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
 80244e0:	f814 b00e 	ldrb.w	fp, [r4, lr]
 80244e4:	fb03 fa01 	mul.w	sl, r3, r1
 80244e8:	011b      	lsls	r3, r3, #4
 80244ea:	f89c e000 	ldrb.w	lr, [ip]
 80244ee:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 80244f2:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 80244f6:	eba3 030a 	sub.w	r3, r3, sl
 80244fa:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80244fc:	b289      	uxth	r1, r1
 80244fe:	b29b      	uxth	r3, r3
 8024500:	eba9 0901 	sub.w	r9, r9, r1
 8024504:	fb03 fe0e 	mul.w	lr, r3, lr
 8024508:	fa1f f989 	uxth.w	r9, r9
 802450c:	fb09 ee0b 	mla	lr, r9, fp, lr
 8024510:	f892 b000 	ldrb.w	fp, [r2]
 8024514:	fb01 ee0b 	mla	lr, r1, fp, lr
 8024518:	f890 b000 	ldrb.w	fp, [r0]
 802451c:	fb0a ee0b 	mla	lr, sl, fp, lr
 8024520:	f897 b000 	ldrb.w	fp, [r7]
 8024524:	fb1b fb04 	smulbb	fp, fp, r4
 8024528:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 802452c:	fb0e be06 	mla	lr, lr, r6, fp
 8024530:	fa1f fe8e 	uxth.w	lr, lr
 8024534:	f10e 0b01 	add.w	fp, lr, #1
 8024538:	eb0b 2b1e 	add.w	fp, fp, lr, lsr #8
 802453c:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 8024540:	f887 b000 	strb.w	fp, [r7]
 8024544:	f89c e001 	ldrb.w	lr, [ip, #1]
 8024548:	f898 b001 	ldrb.w	fp, [r8, #1]
 802454c:	fb03 fe0e 	mul.w	lr, r3, lr
 8024550:	fb09 ee0b 	mla	lr, r9, fp, lr
 8024554:	f892 b001 	ldrb.w	fp, [r2, #1]
 8024558:	fb01 ee0b 	mla	lr, r1, fp, lr
 802455c:	f890 b001 	ldrb.w	fp, [r0, #1]
 8024560:	fb0a ee0b 	mla	lr, sl, fp, lr
 8024564:	f897 b001 	ldrb.w	fp, [r7, #1]
 8024568:	fb1b fb04 	smulbb	fp, fp, r4
 802456c:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8024570:	fb0e be06 	mla	lr, lr, r6, fp
 8024574:	fa1f fe8e 	uxth.w	lr, lr
 8024578:	f10e 0b01 	add.w	fp, lr, #1
 802457c:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8024580:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8024584:	f887 e001 	strb.w	lr, [r7, #1]
 8024588:	f89c c002 	ldrb.w	ip, [ip, #2]
 802458c:	f898 e002 	ldrb.w	lr, [r8, #2]
 8024590:	fb03 f30c 	mul.w	r3, r3, ip
 8024594:	fb09 330e 	mla	r3, r9, lr, r3
 8024598:	f892 e002 	ldrb.w	lr, [r2, #2]
 802459c:	7882      	ldrb	r2, [r0, #2]
 802459e:	fb01 310e 	mla	r1, r1, lr, r3
 80245a2:	fb0a 1a02 	mla	sl, sl, r2, r1
 80245a6:	78b9      	ldrb	r1, [r7, #2]
 80245a8:	fb11 f104 	smulbb	r1, r1, r4
 80245ac:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 80245b0:	fb0a 1606 	mla	r6, sl, r6, r1
 80245b4:	b2b6      	uxth	r6, r6
 80245b6:	1c73      	adds	r3, r6, #1
 80245b8:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 80245bc:	1236      	asrs	r6, r6, #8
 80245be:	70be      	strb	r6, [r7, #2]
 80245c0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80245c2:	3703      	adds	r7, #3
 80245c4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80245c6:	4413      	add	r3, r2
 80245c8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80245ca:	9327      	str	r3, [sp, #156]	; 0x9c
 80245cc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80245ce:	4413      	add	r3, r2
 80245d0:	9328      	str	r3, [sp, #160]	; 0xa0
 80245d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80245d4:	3b01      	subs	r3, #1
 80245d6:	9311      	str	r3, [sp, #68]	; 0x44
 80245d8:	e741      	b.n	802445e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x112>
 80245da:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80245dc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80245de:	4413      	add	r3, r2
 80245e0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80245e2:	9327      	str	r3, [sp, #156]	; 0x9c
 80245e4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80245e6:	4413      	add	r3, r2
 80245e8:	9328      	str	r3, [sp, #160]	; 0xa0
 80245ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80245ec:	3b01      	subs	r3, #1
 80245ee:	930a      	str	r3, [sp, #40]	; 0x28
 80245f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80245f2:	3303      	adds	r3, #3
 80245f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80245f6:	e6e6      	b.n	80243c6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 80245f8:	f47f aef8 	bne.w	80243ec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 80245fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80245fe:	2b00      	cmp	r3, #0
 8024600:	f340 811d 	ble.w	802483e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 8024604:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024608:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802460a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802460e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8024612:	eef0 6a48 	vmov.f32	s13, s16
 8024616:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802461a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802461e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024622:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 8024626:	eef0 6a68 	vmov.f32	s13, s17
 802462a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802462e:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 8024632:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024636:	ee69 7a27 	vmul.f32	s15, s18, s15
 802463a:	ee37 8a48 	vsub.f32	s16, s14, s16
 802463e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024642:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024646:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802464a:	ee18 2a10 	vmov	r2, s16
 802464e:	eeb0 8a47 	vmov.f32	s16, s14
 8024652:	fb92 f3f3 	sdiv	r3, r2, r3
 8024656:	ee18 2a90 	vmov	r2, s17
 802465a:	9329      	str	r3, [sp, #164]	; 0xa4
 802465c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802465e:	eef0 8a67 	vmov.f32	s17, s15
 8024662:	fb92 f3f3 	sdiv	r3, r2, r3
 8024666:	932a      	str	r3, [sp, #168]	; 0xa8
 8024668:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802466a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802466c:	3b01      	subs	r3, #1
 802466e:	930f      	str	r3, [sp, #60]	; 0x3c
 8024670:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024672:	bf08      	it	eq
 8024674:	4613      	moveq	r3, r2
 8024676:	930a      	str	r3, [sp, #40]	; 0x28
 8024678:	e69e      	b.n	80243b8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 802467a:	b151      	cbz	r1, 8024692 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 802467c:	5d52      	ldrb	r2, [r2, r5]
 802467e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024680:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024684:	4402      	add	r2, r0
 8024686:	4640      	mov	r0, r8
 8024688:	46c4      	mov	ip, r8
 802468a:	e724      	b.n	80244d6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 802468c:	4640      	mov	r0, r8
 802468e:	4642      	mov	r2, r8
 8024690:	e721      	b.n	80244d6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 8024692:	4640      	mov	r0, r8
 8024694:	4642      	mov	r2, r8
 8024696:	e7f7      	b.n	8024688 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33c>
 8024698:	1c46      	adds	r6, r0, #1
 802469a:	d191      	bne.n	80245c0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 802469c:	4285      	cmp	r5, r0
 802469e:	dd8f      	ble.n	80245c0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 80246a0:	1c54      	adds	r4, r2, #1
 80246a2:	db8d      	blt.n	80245c0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 80246a4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80246a6:	4294      	cmp	r4, r2
 80246a8:	dd8a      	ble.n	80245c0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 80246aa:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80246ac:	9002      	str	r0, [sp, #8]
 80246ae:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80246b0:	e9cd 2303 	strd	r2, r3, [sp, #12]
 80246b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80246b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80246b8:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80246bc:	e9cd 5300 	strd	r5, r3, [sp]
 80246c0:	4639      	mov	r1, r7
 80246c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80246c4:	f7ff fd52 	bl	802416c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 80246c8:	e77a      	b.n	80245c0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 80246ca:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80246cc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80246ce:	1410      	asrs	r0, r2, #16
 80246d0:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80246d4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80246d6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80246d8:	1412      	asrs	r2, r2, #16
 80246da:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80246de:	fb05 2000 	mla	r0, r5, r0, r2
 80246e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80246e4:	f814 8000 	ldrb.w	r8, [r4, r0]
 80246e8:	4402      	add	r2, r0
 80246ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80246ec:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80246f0:	eb00 0708 	add.w	r7, r0, r8
 80246f4:	2b00      	cmp	r3, #0
 80246f6:	f000 8093 	beq.w	8024820 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 80246fa:	7856      	ldrb	r6, [r2, #1]
 80246fc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8024700:	4406      	add	r6, r0
 8024702:	2900      	cmp	r1, #0
 8024704:	f000 8095 	beq.w	8024832 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 8024708:	1950      	adds	r0, r2, r5
 802470a:	5d52      	ldrb	r2, [r2, r5]
 802470c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802470e:	7840      	ldrb	r0, [r0, #1]
 8024710:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024714:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024718:	4422      	add	r2, r4
 802471a:	4420      	add	r0, r4
 802471c:	b29b      	uxth	r3, r3
 802471e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8024720:	b289      	uxth	r1, r1
 8024722:	f10c 0c03 	add.w	ip, ip, #3
 8024726:	f814 b008 	ldrb.w	fp, [r4, r8]
 802472a:	fb03 f901 	mul.w	r9, r3, r1
 802472e:	011b      	lsls	r3, r3, #4
 8024730:	f896 8000 	ldrb.w	r8, [r6]
 8024734:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8024738:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 802473c:	eba3 0309 	sub.w	r3, r3, r9
 8024740:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024742:	b289      	uxth	r1, r1
 8024744:	b29b      	uxth	r3, r3
 8024746:	ebae 0e01 	sub.w	lr, lr, r1
 802474a:	fb03 f808 	mul.w	r8, r3, r8
 802474e:	fa1f fe8e 	uxth.w	lr, lr
 8024752:	fb0e 880b 	mla	r8, lr, fp, r8
 8024756:	f892 b000 	ldrb.w	fp, [r2]
 802475a:	fb01 880b 	mla	r8, r1, fp, r8
 802475e:	f890 b000 	ldrb.w	fp, [r0]
 8024762:	fb09 880b 	mla	r8, r9, fp, r8
 8024766:	f81c bc06 	ldrb.w	fp, [ip, #-6]
 802476a:	fb1b fb04 	smulbb	fp, fp, r4
 802476e:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8024772:	fb08 b80a 	mla	r8, r8, sl, fp
 8024776:	fa1f f888 	uxth.w	r8, r8
 802477a:	f108 0b01 	add.w	fp, r8, #1
 802477e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8024782:	ea4f 2828 	mov.w	r8, r8, asr #8
 8024786:	f80c 8c06 	strb.w	r8, [ip, #-6]
 802478a:	f896 8001 	ldrb.w	r8, [r6, #1]
 802478e:	f897 b001 	ldrb.w	fp, [r7, #1]
 8024792:	fb03 f808 	mul.w	r8, r3, r8
 8024796:	fb0e 880b 	mla	r8, lr, fp, r8
 802479a:	f892 b001 	ldrb.w	fp, [r2, #1]
 802479e:	fb01 880b 	mla	r8, r1, fp, r8
 80247a2:	f890 b001 	ldrb.w	fp, [r0, #1]
 80247a6:	fb09 880b 	mla	r8, r9, fp, r8
 80247aa:	f81c bc05 	ldrb.w	fp, [ip, #-5]
 80247ae:	fb1b fb04 	smulbb	fp, fp, r4
 80247b2:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80247b6:	fb08 b80a 	mla	r8, r8, sl, fp
 80247ba:	fa1f f888 	uxth.w	r8, r8
 80247be:	f108 0b01 	add.w	fp, r8, #1
 80247c2:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80247c6:	ea4f 2828 	mov.w	r8, r8, asr #8
 80247ca:	f80c 8c05 	strb.w	r8, [ip, #-5]
 80247ce:	78b6      	ldrb	r6, [r6, #2]
 80247d0:	78bf      	ldrb	r7, [r7, #2]
 80247d2:	4373      	muls	r3, r6
 80247d4:	7896      	ldrb	r6, [r2, #2]
 80247d6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80247d8:	fb0e 3307 	mla	r3, lr, r7, r3
 80247dc:	fb01 3306 	mla	r3, r1, r6, r3
 80247e0:	7886      	ldrb	r6, [r0, #2]
 80247e2:	fb09 3906 	mla	r9, r9, r6, r3
 80247e6:	f81c 3c04 	ldrb.w	r3, [ip, #-4]
 80247ea:	fb13 f304 	smulbb	r3, r3, r4
 80247ee:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80247f2:	fb09 390a 	mla	r9, r9, sl, r3
 80247f6:	fa1f f989 	uxth.w	r9, r9
 80247fa:	f109 0301 	add.w	r3, r9, #1
 80247fe:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8024802:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024804:	4413      	add	r3, r2
 8024806:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8024808:	ea4f 2929 	mov.w	r9, r9, asr #8
 802480c:	9327      	str	r3, [sp, #156]	; 0x9c
 802480e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024810:	f80c 9c04 	strb.w	r9, [ip, #-4]
 8024814:	4413      	add	r3, r2
 8024816:	9328      	str	r3, [sp, #160]	; 0xa0
 8024818:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802481a:	3b01      	subs	r3, #1
 802481c:	9311      	str	r3, [sp, #68]	; 0x44
 802481e:	e601      	b.n	8024424 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8024820:	b151      	cbz	r1, 8024838 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>
 8024822:	5d52      	ldrb	r2, [r2, r5]
 8024824:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024826:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802482a:	4402      	add	r2, r0
 802482c:	4638      	mov	r0, r7
 802482e:	463e      	mov	r6, r7
 8024830:	e774      	b.n	802471c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 8024832:	4638      	mov	r0, r7
 8024834:	463a      	mov	r2, r7
 8024836:	e771      	b.n	802471c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 8024838:	4638      	mov	r0, r7
 802483a:	463a      	mov	r2, r7
 802483c:	e7f7      	b.n	802482e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 802483e:	b015      	add	sp, #84	; 0x54
 8024840:	ecbd 8b08 	vpop	{d8-d11}
 8024844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024848 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 8024848:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802484c:	780d      	ldrb	r5, [r1, #0]
 802484e:	f891 9002 	ldrb.w	r9, [r1, #2]
 8024852:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 8024856:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 802485a:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 802485e:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 8024862:	f891 9001 	ldrb.w	r9, [r1, #1]
 8024866:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 802486a:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 802486e:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8024872:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 8024876:	9501      	str	r5, [sp, #4]
 8024878:	fb06 470c 	mla	r7, r6, ip, r4
 802487c:	2e00      	cmp	r6, #0
 802487e:	eb02 0e07 	add.w	lr, r2, r7
 8024882:	db46      	blt.n	8024912 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 8024884:	45b0      	cmp	r8, r6
 8024886:	dd44      	ble.n	8024912 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 8024888:	2c00      	cmp	r4, #0
 802488a:	db40      	blt.n	802490e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 802488c:	45a4      	cmp	ip, r4
 802488e:	dd3e      	ble.n	802490e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 8024890:	5dd7      	ldrb	r7, [r2, r7]
 8024892:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8024896:	441f      	add	r7, r3
 8024898:	1c62      	adds	r2, r4, #1
 802489a:	d43d      	bmi.n	8024918 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 802489c:	4594      	cmp	ip, r2
 802489e:	dd3b      	ble.n	8024918 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 80248a0:	f1ba 0f00 	cmp.w	sl, #0
 80248a4:	d038      	beq.n	8024918 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 80248a6:	f89e 5001 	ldrb.w	r5, [lr, #1]
 80248aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80248ae:	441d      	add	r5, r3
 80248b0:	3601      	adds	r6, #1
 80248b2:	d435      	bmi.n	8024920 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 80248b4:	45b0      	cmp	r8, r6
 80248b6:	dd33      	ble.n	8024920 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 80248b8:	b390      	cbz	r0, 8024920 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 80248ba:	2c00      	cmp	r4, #0
 80248bc:	db2e      	blt.n	802491c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 80248be:	45a4      	cmp	ip, r4
 80248c0:	dd2c      	ble.n	802491c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 80248c2:	f81e 600c 	ldrb.w	r6, [lr, ip]
 80248c6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80248ca:	441e      	add	r6, r3
 80248cc:	1c62      	adds	r2, r4, #1
 80248ce:	d42a      	bmi.n	8024926 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 80248d0:	4594      	cmp	ip, r2
 80248d2:	dd28      	ble.n	8024926 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 80248d4:	f1ba 0f00 	cmp.w	sl, #0
 80248d8:	d025      	beq.n	8024926 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 80248da:	44f4      	add	ip, lr
 80248dc:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80248e0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80248e4:	4413      	add	r3, r2
 80248e6:	f1ba 0f0f 	cmp.w	sl, #15
 80248ea:	f897 8000 	ldrb.w	r8, [r7]
 80248ee:	f895 9000 	ldrb.w	r9, [r5]
 80248f2:	f896 e000 	ldrb.w	lr, [r6]
 80248f6:	f893 c000 	ldrb.w	ip, [r3]
 80248fa:	d801      	bhi.n	8024900 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb8>
 80248fc:	280f      	cmp	r0, #15
 80248fe:	d914      	bls.n	802492a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe2>
 8024900:	4b29      	ldr	r3, [pc, #164]	; (80249a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 8024902:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8024906:	4a29      	ldr	r2, [pc, #164]	; (80249ac <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 8024908:	4829      	ldr	r0, [pc, #164]	; (80249b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x168>)
 802490a:	f005 ff39 	bl	802a780 <__assert_func>
 802490e:	af01      	add	r7, sp, #4
 8024910:	e7c2      	b.n	8024898 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 8024912:	ad01      	add	r5, sp, #4
 8024914:	462f      	mov	r7, r5
 8024916:	e7cb      	b.n	80248b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8024918:	ad01      	add	r5, sp, #4
 802491a:	e7c9      	b.n	80248b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 802491c:	ae01      	add	r6, sp, #4
 802491e:	e7d5      	b.n	80248cc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x84>
 8024920:	ab01      	add	r3, sp, #4
 8024922:	461e      	mov	r6, r3
 8024924:	e7df      	b.n	80248e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 8024926:	ab01      	add	r3, sp, #4
 8024928:	e7dd      	b.n	80248e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 802492a:	fa1f f48a 	uxth.w	r4, sl
 802492e:	b280      	uxth	r0, r0
 8024930:	fb04 fa00 	mul.w	sl, r4, r0
 8024934:	0124      	lsls	r4, r4, #4
 8024936:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 802493a:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 802493e:	b282      	uxth	r2, r0
 8024940:	eba4 000a 	sub.w	r0, r4, sl
 8024944:	ebab 0b02 	sub.w	fp, fp, r2
 8024948:	b280      	uxth	r0, r0
 802494a:	fa1f fb8b 	uxth.w	fp, fp
 802494e:	fb00 f909 	mul.w	r9, r0, r9
 8024952:	fb0b 9808 	mla	r8, fp, r8, r9
 8024956:	fb02 8e0e 	mla	lr, r2, lr, r8
 802495a:	fb0a ec0c 	mla	ip, sl, ip, lr
 802495e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8024962:	f881 c000 	strb.w	ip, [r1]
 8024966:	786c      	ldrb	r4, [r5, #1]
 8024968:	f897 c001 	ldrb.w	ip, [r7, #1]
 802496c:	4344      	muls	r4, r0
 802496e:	fb0b 4c0c 	mla	ip, fp, ip, r4
 8024972:	7874      	ldrb	r4, [r6, #1]
 8024974:	fb02 cc04 	mla	ip, r2, r4, ip
 8024978:	785c      	ldrb	r4, [r3, #1]
 802497a:	fb0a c404 	mla	r4, sl, r4, ip
 802497e:	1224      	asrs	r4, r4, #8
 8024980:	704c      	strb	r4, [r1, #1]
 8024982:	78ad      	ldrb	r5, [r5, #2]
 8024984:	78bc      	ldrb	r4, [r7, #2]
 8024986:	4368      	muls	r0, r5
 8024988:	fb0b 0b04 	mla	fp, fp, r4, r0
 802498c:	78b0      	ldrb	r0, [r6, #2]
 802498e:	fb02 b000 	mla	r0, r2, r0, fp
 8024992:	789a      	ldrb	r2, [r3, #2]
 8024994:	fb0a 0a02 	mla	sl, sl, r2, r0
 8024998:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802499c:	f881 a002 	strb.w	sl, [r1, #2]
 80249a0:	b003      	add	sp, #12
 80249a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80249a6:	bf00      	nop
 80249a8:	0802fd97 	.word	0x0802fd97
 80249ac:	0803028e 	.word	0x0803028e
 80249b0:	0802fe60 	.word	0x0802fe60

080249b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80249b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80249b8:	ed2d 8b0a 	vpush	{d8-d12}
 80249bc:	b08f      	sub	sp, #60	; 0x3c
 80249be:	eeb0 aa40 	vmov.f32	s20, s0
 80249c2:	eef0 9a60 	vmov.f32	s19, s1
 80249c6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80249c8:	eeb0 9a41 	vmov.f32	s18, s2
 80249cc:	9307      	str	r3, [sp, #28]
 80249ce:	eeb0 8a62 	vmov.f32	s16, s5
 80249d2:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 80249d6:	eef0 8a43 	vmov.f32	s17, s6
 80249da:	900d      	str	r0, [sp, #52]	; 0x34
 80249dc:	eeb0 ca44 	vmov.f32	s24, s8
 80249e0:	6860      	ldr	r0, [r4, #4]
 80249e2:	eef0 ba64 	vmov.f32	s23, s9
 80249e6:	9309      	str	r3, [sp, #36]	; 0x24
 80249e8:	eeb0 ba45 	vmov.f32	s22, s10
 80249ec:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 80249f0:	f9bd 50a8 	ldrsh.w	r5, [sp, #168]	; 0xa8
 80249f4:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
 80249f8:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 80249fc:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80249fe:	fb00 1303 	mla	r3, r0, r3, r1
 8024a02:	6821      	ldr	r1, [r4, #0]
 8024a04:	6854      	ldr	r4, [r2, #4]
 8024a06:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024a0a:	3404      	adds	r4, #4
 8024a0c:	18cb      	adds	r3, r1, r3
 8024a0e:	9308      	str	r3, [sp, #32]
 8024a10:	6813      	ldr	r3, [r2, #0]
 8024a12:	930a      	str	r3, [sp, #40]	; 0x28
 8024a14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024a16:	2b00      	cmp	r3, #0
 8024a18:	dc03      	bgt.n	8024a22 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8024a1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024a1c:	2b00      	cmp	r3, #0
 8024a1e:	f340 81d2 	ble.w	8024dc6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 8024a22:	9b07      	ldr	r3, [sp, #28]
 8024a24:	2b00      	cmp	r3, #0
 8024a26:	f340 80e3 	ble.w	8024bf0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 8024a2a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8024a2c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024a2e:	1412      	asrs	r2, r2, #16
 8024a30:	ea4f 4323 	mov.w	r3, r3, asr #16
 8024a34:	d42f      	bmi.n	8024a96 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 8024a36:	1c51      	adds	r1, r2, #1
 8024a38:	428d      	cmp	r5, r1
 8024a3a:	dd2f      	ble.n	8024a9c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 8024a3c:	2b00      	cmp	r3, #0
 8024a3e:	db2d      	blt.n	8024a9c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 8024a40:	1c59      	adds	r1, r3, #1
 8024a42:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024a44:	4288      	cmp	r0, r1
 8024a46:	dd29      	ble.n	8024a9c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 8024a48:	9b07      	ldr	r3, [sp, #28]
 8024a4a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8024a4c:	3b01      	subs	r3, #1
 8024a4e:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8024a50:	fb02 1203 	mla	r2, r2, r3, r1
 8024a54:	1412      	asrs	r2, r2, #16
 8024a56:	d42b      	bmi.n	8024ab0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8024a58:	3201      	adds	r2, #1
 8024a5a:	4295      	cmp	r5, r2
 8024a5c:	dd28      	ble.n	8024ab0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8024a5e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8024a60:	9924      	ldr	r1, [sp, #144]	; 0x90
 8024a62:	fb02 1303 	mla	r3, r2, r3, r1
 8024a66:	141b      	asrs	r3, r3, #16
 8024a68:	d422      	bmi.n	8024ab0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8024a6a:	3301      	adds	r3, #1
 8024a6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024a6e:	429a      	cmp	r2, r3
 8024a70:	dd1e      	ble.n	8024ab0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8024a72:	9b08      	ldr	r3, [sp, #32]
 8024a74:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8024a78:	f103 0803 	add.w	r8, r3, #3
 8024a7c:	f1ba 0f00 	cmp.w	sl, #0
 8024a80:	f300 8119 	bgt.w	8024cb6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x302>
 8024a84:	9b07      	ldr	r3, [sp, #28]
 8024a86:	9a08      	ldr	r2, [sp, #32]
 8024a88:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8024a8c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024a90:	441a      	add	r2, r3
 8024a92:	9208      	str	r2, [sp, #32]
 8024a94:	e0ae      	b.n	8024bf4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x240>
 8024a96:	1c51      	adds	r1, r2, #1
 8024a98:	f040 809b 	bne.w	8024bd2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 8024a9c:	42aa      	cmp	r2, r5
 8024a9e:	f280 8098 	bge.w	8024bd2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 8024aa2:	1c5a      	adds	r2, r3, #1
 8024aa4:	f2c0 8095 	blt.w	8024bd2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 8024aa8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024aaa:	4293      	cmp	r3, r2
 8024aac:	f280 8091 	bge.w	8024bd2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 8024ab0:	e9dd b607 	ldrd	fp, r6, [sp, #28]
 8024ab4:	f1bb 0f00 	cmp.w	fp, #0
 8024ab8:	dde4      	ble.n	8024a84 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 8024aba:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024abc:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8024abe:	141a      	asrs	r2, r3, #16
 8024ac0:	9924      	ldr	r1, [sp, #144]	; 0x90
 8024ac2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8024ac4:	1400      	asrs	r0, r0, #16
 8024ac6:	f3c1 3103 	ubfx	r1, r1, #12, #4
 8024aca:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8024ace:	f100 80dc 	bmi.w	8024c8a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d6>
 8024ad2:	1c47      	adds	r7, r0, #1
 8024ad4:	42bd      	cmp	r5, r7
 8024ad6:	f340 80da 	ble.w	8024c8e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 8024ada:	2a00      	cmp	r2, #0
 8024adc:	f2c0 80d7 	blt.w	8024c8e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 8024ae0:	f102 0c01 	add.w	ip, r2, #1
 8024ae4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8024ae6:	4567      	cmp	r7, ip
 8024ae8:	f340 80d1 	ble.w	8024c8e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 8024aec:	fb02 0005 	mla	r0, r2, r5, r0
 8024af0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8024af2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024af4:	f817 8000 	ldrb.w	r8, [r7, r0]
 8024af8:	4402      	add	r2, r0
 8024afa:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8024afe:	eb04 0c08 	add.w	ip, r4, r8
 8024b02:	2b00      	cmp	r3, #0
 8024b04:	f000 80b3 	beq.w	8024c6e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ba>
 8024b08:	7857      	ldrb	r7, [r2, #1]
 8024b0a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8024b0e:	4427      	add	r7, r4
 8024b10:	2900      	cmp	r1, #0
 8024b12:	f000 80b4 	beq.w	8024c7e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ca>
 8024b16:	1950      	adds	r0, r2, r5
 8024b18:	5d52      	ldrb	r2, [r2, r5]
 8024b1a:	7840      	ldrb	r0, [r0, #1]
 8024b1c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024b20:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024b24:	4422      	add	r2, r4
 8024b26:	4420      	add	r0, r4
 8024b28:	b29b      	uxth	r3, r3
 8024b2a:	f814 a008 	ldrb.w	sl, [r4, r8]
 8024b2e:	b289      	uxth	r1, r1
 8024b30:	f897 8000 	ldrb.w	r8, [r7]
 8024b34:	fb03 f901 	mul.w	r9, r3, r1
 8024b38:	011b      	lsls	r3, r3, #4
 8024b3a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8024b3e:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8024b42:	eba3 0309 	sub.w	r3, r3, r9
 8024b46:	b289      	uxth	r1, r1
 8024b48:	b29b      	uxth	r3, r3
 8024b4a:	ebae 0e01 	sub.w	lr, lr, r1
 8024b4e:	fb03 f808 	mul.w	r8, r3, r8
 8024b52:	fa1f fe8e 	uxth.w	lr, lr
 8024b56:	fb0e 880a 	mla	r8, lr, sl, r8
 8024b5a:	f892 a000 	ldrb.w	sl, [r2]
 8024b5e:	fb01 880a 	mla	r8, r1, sl, r8
 8024b62:	f890 a000 	ldrb.w	sl, [r0]
 8024b66:	fb09 880a 	mla	r8, r9, sl, r8
 8024b6a:	ea4f 2828 	mov.w	r8, r8, asr #8
 8024b6e:	f886 8000 	strb.w	r8, [r6]
 8024b72:	f897 8001 	ldrb.w	r8, [r7, #1]
 8024b76:	f89c a001 	ldrb.w	sl, [ip, #1]
 8024b7a:	fb03 f808 	mul.w	r8, r3, r8
 8024b7e:	fb0e 880a 	mla	r8, lr, sl, r8
 8024b82:	f892 a001 	ldrb.w	sl, [r2, #1]
 8024b86:	fb01 880a 	mla	r8, r1, sl, r8
 8024b8a:	f890 a001 	ldrb.w	sl, [r0, #1]
 8024b8e:	fb09 880a 	mla	r8, r9, sl, r8
 8024b92:	ea4f 2828 	mov.w	r8, r8, asr #8
 8024b96:	f886 8001 	strb.w	r8, [r6, #1]
 8024b9a:	78bf      	ldrb	r7, [r7, #2]
 8024b9c:	f89c c002 	ldrb.w	ip, [ip, #2]
 8024ba0:	437b      	muls	r3, r7
 8024ba2:	7892      	ldrb	r2, [r2, #2]
 8024ba4:	fb0e 330c 	mla	r3, lr, ip, r3
 8024ba8:	fb01 3102 	mla	r1, r1, r2, r3
 8024bac:	7882      	ldrb	r2, [r0, #2]
 8024bae:	fb09 1902 	mla	r9, r9, r2, r1
 8024bb2:	ea4f 2929 	mov.w	r9, r9, asr #8
 8024bb6:	f886 9002 	strb.w	r9, [r6, #2]
 8024bba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8024bbc:	3603      	adds	r6, #3
 8024bbe:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8024bc0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024bc4:	4413      	add	r3, r2
 8024bc6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8024bc8:	9323      	str	r3, [sp, #140]	; 0x8c
 8024bca:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024bcc:	4413      	add	r3, r2
 8024bce:	9324      	str	r3, [sp, #144]	; 0x90
 8024bd0:	e770      	b.n	8024ab4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 8024bd2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8024bd4:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8024bd6:	4413      	add	r3, r2
 8024bd8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8024bda:	9323      	str	r3, [sp, #140]	; 0x8c
 8024bdc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024bde:	4413      	add	r3, r2
 8024be0:	9324      	str	r3, [sp, #144]	; 0x90
 8024be2:	9b07      	ldr	r3, [sp, #28]
 8024be4:	3b01      	subs	r3, #1
 8024be6:	9307      	str	r3, [sp, #28]
 8024be8:	9b08      	ldr	r3, [sp, #32]
 8024bea:	3303      	adds	r3, #3
 8024bec:	9308      	str	r3, [sp, #32]
 8024bee:	e718      	b.n	8024a22 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8024bf0:	f47f af2a 	bne.w	8024a48 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8024bf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024bf6:	2b00      	cmp	r3, #0
 8024bf8:	f340 80e5 	ble.w	8024dc6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 8024bfc:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8024c00:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8024c02:	ee79 9aab 	vadd.f32	s19, s19, s23
 8024c06:	eef0 6a48 	vmov.f32	s13, s16
 8024c0a:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8024c0e:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8024c12:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024c16:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8024c1a:	eef0 6a68 	vmov.f32	s13, s17
 8024c1e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024c22:	edcd 6a24 	vstr	s13, [sp, #144]	; 0x90
 8024c26:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024c2a:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024c2e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8024c32:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024c36:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024c3a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024c3e:	ee18 2a10 	vmov	r2, s16
 8024c42:	eeb0 8a47 	vmov.f32	s16, s14
 8024c46:	fb92 f3f3 	sdiv	r3, r2, r3
 8024c4a:	ee18 2a90 	vmov	r2, s17
 8024c4e:	9325      	str	r3, [sp, #148]	; 0x94
 8024c50:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8024c52:	eef0 8a67 	vmov.f32	s17, s15
 8024c56:	fb92 f3f3 	sdiv	r3, r2, r3
 8024c5a:	9326      	str	r3, [sp, #152]	; 0x98
 8024c5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024c5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024c60:	3b01      	subs	r3, #1
 8024c62:	930b      	str	r3, [sp, #44]	; 0x2c
 8024c64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8024c66:	bf08      	it	eq
 8024c68:	4613      	moveq	r3, r2
 8024c6a:	9307      	str	r3, [sp, #28]
 8024c6c:	e6d2      	b.n	8024a14 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8024c6e:	b149      	cbz	r1, 8024c84 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 8024c70:	5d52      	ldrb	r2, [r2, r5]
 8024c72:	4660      	mov	r0, ip
 8024c74:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024c78:	4422      	add	r2, r4
 8024c7a:	4667      	mov	r7, ip
 8024c7c:	e754      	b.n	8024b28 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 8024c7e:	4660      	mov	r0, ip
 8024c80:	4662      	mov	r2, ip
 8024c82:	e751      	b.n	8024b28 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 8024c84:	4660      	mov	r0, ip
 8024c86:	4662      	mov	r2, ip
 8024c88:	e7f7      	b.n	8024c7a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c6>
 8024c8a:	1c47      	adds	r7, r0, #1
 8024c8c:	d195      	bne.n	8024bba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8024c8e:	4285      	cmp	r5, r0
 8024c90:	dd93      	ble.n	8024bba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8024c92:	1c57      	adds	r7, r2, #1
 8024c94:	db91      	blt.n	8024bba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8024c96:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8024c98:	4297      	cmp	r7, r2
 8024c9a:	dd8e      	ble.n	8024bba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8024c9c:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8024ca0:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8024ca4:	e9cd 5700 	strd	r5, r7, [sp]
 8024ca8:	4623      	mov	r3, r4
 8024caa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024cac:	4631      	mov	r1, r6
 8024cae:	980d      	ldr	r0, [sp, #52]	; 0x34
 8024cb0:	f7ff fdca 	bl	8024848 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 8024cb4:	e781      	b.n	8024bba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8024cb6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8024cb8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8024cba:	1410      	asrs	r0, r2, #16
 8024cbc:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8024cc0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8024cc2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8024cc4:	1412      	asrs	r2, r2, #16
 8024cc6:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8024cca:	fb05 2000 	mla	r0, r5, r0, r2
 8024cce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024cd0:	f816 e000 	ldrb.w	lr, [r6, r0]
 8024cd4:	4402      	add	r2, r0
 8024cd6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8024cda:	eb04 070e 	add.w	r7, r4, lr
 8024cde:	2b00      	cmp	r3, #0
 8024ce0:	d063      	beq.n	8024daa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f6>
 8024ce2:	7856      	ldrb	r6, [r2, #1]
 8024ce4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8024ce8:	4426      	add	r6, r4
 8024cea:	2900      	cmp	r1, #0
 8024cec:	d065      	beq.n	8024dba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 8024cee:	1950      	adds	r0, r2, r5
 8024cf0:	5d52      	ldrb	r2, [r2, r5]
 8024cf2:	7840      	ldrb	r0, [r0, #1]
 8024cf4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024cf8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024cfc:	4422      	add	r2, r4
 8024cfe:	4420      	add	r0, r4
 8024d00:	b29b      	uxth	r3, r3
 8024d02:	f814 b00e 	ldrb.w	fp, [r4, lr]
 8024d06:	b289      	uxth	r1, r1
 8024d08:	f896 e000 	ldrb.w	lr, [r6]
 8024d0c:	f108 0803 	add.w	r8, r8, #3
 8024d10:	f10a 3aff 	add.w	sl, sl, #4294967295
 8024d14:	fb03 f901 	mul.w	r9, r3, r1
 8024d18:	011b      	lsls	r3, r3, #4
 8024d1a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8024d1e:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8024d22:	eba3 0309 	sub.w	r3, r3, r9
 8024d26:	b289      	uxth	r1, r1
 8024d28:	b29b      	uxth	r3, r3
 8024d2a:	ebac 0c01 	sub.w	ip, ip, r1
 8024d2e:	fb03 fe0e 	mul.w	lr, r3, lr
 8024d32:	fa1f fc8c 	uxth.w	ip, ip
 8024d36:	fb0c ee0b 	mla	lr, ip, fp, lr
 8024d3a:	f892 b000 	ldrb.w	fp, [r2]
 8024d3e:	fb01 ee0b 	mla	lr, r1, fp, lr
 8024d42:	f890 b000 	ldrb.w	fp, [r0]
 8024d46:	fb09 ee0b 	mla	lr, r9, fp, lr
 8024d4a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8024d4e:	f808 ec06 	strb.w	lr, [r8, #-6]
 8024d52:	f896 e001 	ldrb.w	lr, [r6, #1]
 8024d56:	f897 b001 	ldrb.w	fp, [r7, #1]
 8024d5a:	fb03 fe0e 	mul.w	lr, r3, lr
 8024d5e:	fb0c ee0b 	mla	lr, ip, fp, lr
 8024d62:	f892 b001 	ldrb.w	fp, [r2, #1]
 8024d66:	fb01 ee0b 	mla	lr, r1, fp, lr
 8024d6a:	f890 b001 	ldrb.w	fp, [r0, #1]
 8024d6e:	fb09 ee0b 	mla	lr, r9, fp, lr
 8024d72:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8024d76:	f808 ec05 	strb.w	lr, [r8, #-5]
 8024d7a:	78b6      	ldrb	r6, [r6, #2]
 8024d7c:	78bf      	ldrb	r7, [r7, #2]
 8024d7e:	4373      	muls	r3, r6
 8024d80:	7896      	ldrb	r6, [r2, #2]
 8024d82:	7882      	ldrb	r2, [r0, #2]
 8024d84:	fb0c 3307 	mla	r3, ip, r7, r3
 8024d88:	fb01 3306 	mla	r3, r1, r6, r3
 8024d8c:	fb09 3902 	mla	r9, r9, r2, r3
 8024d90:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8024d92:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8024d94:	ea4f 2929 	mov.w	r9, r9, asr #8
 8024d98:	4413      	add	r3, r2
 8024d9a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8024d9c:	f808 9c04 	strb.w	r9, [r8, #-4]
 8024da0:	9323      	str	r3, [sp, #140]	; 0x8c
 8024da2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024da4:	4413      	add	r3, r2
 8024da6:	9324      	str	r3, [sp, #144]	; 0x90
 8024da8:	e668      	b.n	8024a7c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 8024daa:	b149      	cbz	r1, 8024dc0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40c>
 8024dac:	5d52      	ldrb	r2, [r2, r5]
 8024dae:	4638      	mov	r0, r7
 8024db0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024db4:	4422      	add	r2, r4
 8024db6:	463e      	mov	r6, r7
 8024db8:	e7a2      	b.n	8024d00 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 8024dba:	4638      	mov	r0, r7
 8024dbc:	463a      	mov	r2, r7
 8024dbe:	e79f      	b.n	8024d00 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 8024dc0:	4638      	mov	r0, r7
 8024dc2:	463a      	mov	r2, r7
 8024dc4:	e7f7      	b.n	8024db6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x402>
 8024dc6:	b00f      	add	sp, #60	; 0x3c
 8024dc8:	ecbd 8b0a 	vpop	{d8-d12}
 8024dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024dd0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8024dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024dd4:	b087      	sub	sp, #28
 8024dd6:	7888      	ldrb	r0, [r1, #2]
 8024dd8:	9002      	str	r0, [sp, #8]
 8024dda:	7848      	ldrb	r0, [r1, #1]
 8024ddc:	9e02      	ldr	r6, [sp, #8]
 8024dde:	9003      	str	r0, [sp, #12]
 8024de0:	7808      	ldrb	r0, [r1, #0]
 8024de2:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 8024de6:	9004      	str	r0, [sp, #16]
 8024de8:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8024dec:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 8024df0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8024df4:	9e03      	ldr	r6, [sp, #12]
 8024df6:	f89d c050 	ldrb.w	ip, [sp, #80]	; 0x50
 8024dfa:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 8024dfe:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 8024e02:	e9dd 7412 	ldrd	r7, r4, [sp, #72]	; 0x48
 8024e06:	fb04 7508 	mla	r5, r4, r8, r7
 8024e0a:	2c00      	cmp	r4, #0
 8024e0c:	eb02 0905 	add.w	r9, r2, r5
 8024e10:	db45      	blt.n	8024e9e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 8024e12:	45a2      	cmp	sl, r4
 8024e14:	dd43      	ble.n	8024e9e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 8024e16:	2f00      	cmp	r7, #0
 8024e18:	db3f      	blt.n	8024e9a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 8024e1a:	45b8      	cmp	r8, r7
 8024e1c:	dd3d      	ble.n	8024e9a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 8024e1e:	5d52      	ldrb	r2, [r2, r5]
 8024e20:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8024e24:	1c7a      	adds	r2, r7, #1
 8024e26:	d43d      	bmi.n	8024ea4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 8024e28:	4590      	cmp	r8, r2
 8024e2a:	dd3b      	ble.n	8024ea4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 8024e2c:	f1bc 0f00 	cmp.w	ip, #0
 8024e30:	d038      	beq.n	8024ea4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 8024e32:	f899 2001 	ldrb.w	r2, [r9, #1]
 8024e36:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8024e3a:	3401      	adds	r4, #1
 8024e3c:	d436      	bmi.n	8024eac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 8024e3e:	45a2      	cmp	sl, r4
 8024e40:	dd34      	ble.n	8024eac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 8024e42:	f1be 0f00 	cmp.w	lr, #0
 8024e46:	d031      	beq.n	8024eac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 8024e48:	2f00      	cmp	r7, #0
 8024e4a:	db2d      	blt.n	8024ea8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 8024e4c:	45b8      	cmp	r8, r7
 8024e4e:	dd2b      	ble.n	8024ea8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 8024e50:	f819 2008 	ldrb.w	r2, [r9, r8]
 8024e54:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8024e58:	3701      	adds	r7, #1
 8024e5a:	d409      	bmi.n	8024e70 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8024e5c:	45b8      	cmp	r8, r7
 8024e5e:	dd07      	ble.n	8024e70 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8024e60:	f1bc 0f00 	cmp.w	ip, #0
 8024e64:	d004      	beq.n	8024e70 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8024e66:	44c8      	add	r8, r9
 8024e68:	f898 2001 	ldrb.w	r2, [r8, #1]
 8024e6c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8024e70:	f1bc 0f0f 	cmp.w	ip, #15
 8024e74:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8024e78:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8024e7c:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8024e80:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8024e84:	d802      	bhi.n	8024e8c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbc>
 8024e86:	f1be 0f0f 	cmp.w	lr, #15
 8024e8a:	d911      	bls.n	8024eb0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xe0>
 8024e8c:	4b77      	ldr	r3, [pc, #476]	; (802506c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x29c>)
 8024e8e:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8024e92:	4a77      	ldr	r2, [pc, #476]	; (8025070 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a0>)
 8024e94:	4877      	ldr	r0, [pc, #476]	; (8025074 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a4>)
 8024e96:	f005 fc73 	bl	802a780 <__assert_func>
 8024e9a:	4606      	mov	r6, r0
 8024e9c:	e7c2      	b.n	8024e24 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x54>
 8024e9e:	4605      	mov	r5, r0
 8024ea0:	4606      	mov	r6, r0
 8024ea2:	e7ca      	b.n	8024e3a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 8024ea4:	4605      	mov	r5, r0
 8024ea6:	e7c8      	b.n	8024e3a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 8024ea8:	4604      	mov	r4, r0
 8024eaa:	e7d5      	b.n	8024e58 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x88>
 8024eac:	4604      	mov	r4, r0
 8024eae:	e7df      	b.n	8024e70 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 8024eb0:	fa1f fc8c 	uxth.w	ip, ip
 8024eb4:	fa1f f28e 	uxth.w	r2, lr
 8024eb8:	fb02 fe0c 	mul.w	lr, r2, ip
 8024ebc:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8024ec0:	ebce 1202 	rsb	r2, lr, r2, lsl #4
 8024ec4:	ebac 070e 	sub.w	r7, ip, lr
 8024ec8:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8024ecc:	b292      	uxth	r2, r2
 8024ece:	b2bf      	uxth	r7, r7
 8024ed0:	1a9b      	subs	r3, r3, r2
 8024ed2:	fb07 fc0a 	mul.w	ip, r7, sl
 8024ed6:	b29b      	uxth	r3, r3
 8024ed8:	fb03 cc0b 	mla	ip, r3, fp, ip
 8024edc:	9301      	str	r3, [sp, #4]
 8024ede:	fb02 cc09 	mla	ip, r2, r9, ip
 8024ee2:	fb0e cc08 	mla	ip, lr, r8, ip
 8024ee6:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8024eea:	9305      	str	r3, [sp, #20]
 8024eec:	2b00      	cmp	r3, #0
 8024eee:	f000 80b9 	beq.w	8025064 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x294>
 8024ef2:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8024ef6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024efa:	fb0b fc0c 	mul.w	ip, fp, ip
 8024efe:	fb0b f606 	mul.w	r6, fp, r6
 8024f02:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8024f06:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024f0a:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8024f0e:	44dc      	add	ip, fp
 8024f10:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8024f14:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8024f18:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024f1c:	fb0a fb0b 	mul.w	fp, sl, fp
 8024f20:	fb0a fa05 	mul.w	sl, sl, r5
 8024f24:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8024f28:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8024f2c:	f50a 7580 	add.w	r5, sl, #256	; 0x100
 8024f30:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8024f34:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8024f38:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024f3c:	eb05 2a1a 	add.w	sl, r5, sl, lsr #8
 8024f40:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024f44:	0a36      	lsrs	r6, r6, #8
 8024f46:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024f4a:	44dc      	add	ip, fp
 8024f4c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8024f50:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8024f54:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024f58:	fb09 fb0b 	mul.w	fp, r9, fp
 8024f5c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024f60:	fb09 f904 	mul.w	r9, r9, r4
 8024f64:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024f68:	ea4f 251b 	mov.w	r5, fp, lsr #8
 8024f6c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024f70:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8024f74:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024f78:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8024f7c:	fb0c fc07 	mul.w	ip, ip, r7
 8024f80:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8024f84:	f000 14ff 	and.w	r4, r0, #16711935	; 0xff00ff
 8024f88:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024f8c:	445d      	add	r5, fp
 8024f8e:	fb08 f404 	mul.w	r4, r8, r4
 8024f92:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024f96:	fb08 f800 	mul.w	r8, r8, r0
 8024f9a:	0a2d      	lsrs	r5, r5, #8
 8024f9c:	0a20      	lsrs	r0, r4, #8
 8024f9e:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8024fa2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8024fa6:	fb07 f70a 	mul.w	r7, r7, sl
 8024faa:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8024fae:	4404      	add	r4, r0
 8024fb0:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8024fb4:	0a24      	lsrs	r4, r4, #8
 8024fb6:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 8024fba:	9801      	ldr	r0, [sp, #4]
 8024fbc:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024fc0:	fb03 cc00 	mla	ip, r3, r0, ip
 8024fc4:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8024fc8:	fb00 7606 	mla	r6, r0, r6, r7
 8024fcc:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 8024fd0:	fb04 cc0e 	mla	ip, r4, lr, ip
 8024fd4:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8024fd8:	b280      	uxth	r0, r0
 8024fda:	9c04      	ldr	r4, [sp, #16]
 8024fdc:	fb05 cc02 	mla	ip, r5, r2, ip
 8024fe0:	fb0e 6e08 	mla	lr, lr, r8, r6
 8024fe4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024fe8:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8024fec:	f409 4c7f 	and.w	ip, r9, #65280	; 0xff00
 8024ff0:	fb02 ec0c 	mla	ip, r2, ip, lr
 8024ff4:	9a05      	ldr	r2, [sp, #20]
 8024ff6:	4342      	muls	r2, r0
 8024ff8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024ffc:	1c53      	adds	r3, r2, #1
 8024ffe:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025002:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025006:	ea45 0c0c 	orr.w	ip, r5, ip
 802500a:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 802500e:	fa5f f28c 	uxtb.w	r2, ip
 8025012:	b2db      	uxtb	r3, r3
 8025014:	fb14 f403 	smulbb	r4, r4, r3
 8025018:	fb02 4200 	mla	r2, r2, r0, r4
 802501c:	b292      	uxth	r2, r2
 802501e:	1c54      	adds	r4, r2, #1
 8025020:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 8025024:	9c03      	ldr	r4, [sp, #12]
 8025026:	fb14 f403 	smulbb	r4, r4, r3
 802502a:	1212      	asrs	r2, r2, #8
 802502c:	700a      	strb	r2, [r1, #0]
 802502e:	f3cc 2207 	ubfx	r2, ip, #8, #8
 8025032:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8025036:	fb02 4200 	mla	r2, r2, r0, r4
 802503a:	b292      	uxth	r2, r2
 802503c:	1c54      	adds	r4, r2, #1
 802503e:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 8025042:	1212      	asrs	r2, r2, #8
 8025044:	704a      	strb	r2, [r1, #1]
 8025046:	9a02      	ldr	r2, [sp, #8]
 8025048:	fb12 f303 	smulbb	r3, r2, r3
 802504c:	fb0c 3c00 	mla	ip, ip, r0, r3
 8025050:	fa1f fc8c 	uxth.w	ip, ip
 8025054:	f10c 0301 	add.w	r3, ip, #1
 8025058:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 802505c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8025060:	f881 c002 	strb.w	ip, [r1, #2]
 8025064:	b007      	add	sp, #28
 8025066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802506a:	bf00      	nop
 802506c:	0802fd97 	.word	0x0802fd97
 8025070:	0803028e 	.word	0x0803028e
 8025074:	0802fe60 	.word	0x0802fe60

08025078 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8025078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802507c:	ed2d 8b08 	vpush	{d8-d11}
 8025080:	b09b      	sub	sp, #108	; 0x6c
 8025082:	eeb0 aa40 	vmov.f32	s20, s0
 8025086:	eef0 9a60 	vmov.f32	s19, s1
 802508a:	930a      	str	r3, [sp, #40]	; 0x28
 802508c:	eeb0 9a41 	vmov.f32	s18, s2
 8025090:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 8025094:	eeb0 8a62 	vmov.f32	s16, s5
 8025098:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 802509a:	eef0 8a43 	vmov.f32	s17, s6
 802509e:	9312      	str	r3, [sp, #72]	; 0x48
 80250a0:	eef0 ba44 	vmov.f32	s23, s8
 80250a4:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 80250a8:	eeb0 ba64 	vmov.f32	s22, s9
 80250ac:	9019      	str	r0, [sp, #100]	; 0x64
 80250ae:	eef0 aa45 	vmov.f32	s21, s10
 80250b2:	9114      	str	r1, [sp, #80]	; 0x50
 80250b4:	9317      	str	r3, [sp, #92]	; 0x5c
 80250b6:	6868      	ldr	r0, [r5, #4]
 80250b8:	9218      	str	r2, [sp, #96]	; 0x60
 80250ba:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 80250bc:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 80250c0:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 80250c4:	fb00 1303 	mla	r3, r0, r3, r1
 80250c8:	6829      	ldr	r1, [r5, #0]
 80250ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80250ce:	18cb      	adds	r3, r1, r3
 80250d0:	930d      	str	r3, [sp, #52]	; 0x34
 80250d2:	6813      	ldr	r3, [r2, #0]
 80250d4:	9313      	str	r3, [sp, #76]	; 0x4c
 80250d6:	6853      	ldr	r3, [r2, #4]
 80250d8:	3304      	adds	r3, #4
 80250da:	9309      	str	r3, [sp, #36]	; 0x24
 80250dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80250de:	2b00      	cmp	r3, #0
 80250e0:	dc03      	bgt.n	80250ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 80250e2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80250e4:	2b00      	cmp	r3, #0
 80250e6:	f340 8352 	ble.w	802578e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 80250ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80250ec:	2b00      	cmp	r3, #0
 80250ee:	f340 81a2 	ble.w	8025436 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3be>
 80250f2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80250f4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80250f6:	1412      	asrs	r2, r2, #16
 80250f8:	ea4f 4323 	mov.w	r3, r3, asr #16
 80250fc:	d431      	bmi.n	8025162 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 80250fe:	1c51      	adds	r1, r2, #1
 8025100:	428c      	cmp	r4, r1
 8025102:	dd31      	ble.n	8025168 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8025104:	2b00      	cmp	r3, #0
 8025106:	db2f      	blt.n	8025168 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8025108:	1c59      	adds	r1, r3, #1
 802510a:	9812      	ldr	r0, [sp, #72]	; 0x48
 802510c:	4288      	cmp	r0, r1
 802510e:	dd2b      	ble.n	8025168 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 8025110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025112:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8025114:	3b01      	subs	r3, #1
 8025116:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8025118:	fb02 1203 	mla	r2, r2, r3, r1
 802511c:	1412      	asrs	r2, r2, #16
 802511e:	d42d      	bmi.n	802517c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8025120:	3201      	adds	r2, #1
 8025122:	4294      	cmp	r4, r2
 8025124:	dd2a      	ble.n	802517c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8025126:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8025128:	992e      	ldr	r1, [sp, #184]	; 0xb8
 802512a:	fb02 1303 	mla	r3, r2, r3, r1
 802512e:	141b      	asrs	r3, r3, #16
 8025130:	d424      	bmi.n	802517c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8025132:	3301      	adds	r3, #1
 8025134:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8025136:	429a      	cmp	r2, r3
 8025138:	dd20      	ble.n	802517c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 802513a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802513c:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
 8025140:	f103 0e03 	add.w	lr, r3, #3
 8025144:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025146:	9315      	str	r3, [sp, #84]	; 0x54
 8025148:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802514a:	2b00      	cmp	r3, #0
 802514c:	f300 81de 	bgt.w	802550c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x494>
 8025150:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025152:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8025154:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8025158:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802515c:	441a      	add	r2, r3
 802515e:	920d      	str	r2, [sp, #52]	; 0x34
 8025160:	e16b      	b.n	802543a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c2>
 8025162:	1c51      	adds	r1, r2, #1
 8025164:	f040 8158 	bne.w	8025418 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 8025168:	42a2      	cmp	r2, r4
 802516a:	f280 8155 	bge.w	8025418 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 802516e:	1c5a      	adds	r2, r3, #1
 8025170:	f2c0 8152 	blt.w	8025418 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 8025174:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8025176:	4293      	cmp	r3, r2
 8025178:	f280 814e 	bge.w	8025418 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 802517c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802517e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8025180:	9316      	str	r3, [sp, #88]	; 0x58
 8025182:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 8025186:	9315      	str	r3, [sp, #84]	; 0x54
 8025188:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802518a:	2b00      	cmp	r3, #0
 802518c:	dde0      	ble.n	8025150 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 802518e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8025190:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8025192:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8025196:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8025198:	141b      	asrs	r3, r3, #16
 802519a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 802519e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80251a0:	1412      	asrs	r2, r2, #16
 80251a2:	f100 819a 	bmi.w	80254da <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x462>
 80251a6:	1c55      	adds	r5, r2, #1
 80251a8:	42ac      	cmp	r4, r5
 80251aa:	f340 8198 	ble.w	80254de <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 80251ae:	2b00      	cmp	r3, #0
 80251b0:	f2c0 8195 	blt.w	80254de <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 80251b4:	1c5d      	adds	r5, r3, #1
 80251b6:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80251b8:	42af      	cmp	r7, r5
 80251ba:	f340 8190 	ble.w	80254de <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 80251be:	fb03 2304 	mla	r3, r3, r4, r2
 80251c2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80251c4:	18d5      	adds	r5, r2, r3
 80251c6:	5cd3      	ldrb	r3, [r2, r3]
 80251c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80251ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80251ce:	0e1f      	lsrs	r7, r3, #24
 80251d0:	2800      	cmp	r0, #0
 80251d2:	f000 8171 	beq.w	80254b8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 80251d6:	f895 c001 	ldrb.w	ip, [r5, #1]
 80251da:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80251de:	920e      	str	r2, [sp, #56]	; 0x38
 80251e0:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80251e4:	2900      	cmp	r1, #0
 80251e6:	f000 8172 	beq.w	80254ce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 80251ea:	eb05 0c04 	add.w	ip, r5, r4
 80251ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80251f0:	5d2d      	ldrb	r5, [r5, r4]
 80251f2:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 80251f6:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80251fa:	950b      	str	r5, [sp, #44]	; 0x2c
 80251fc:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8025200:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8025202:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8025206:	0e15      	lsrs	r5, r2, #24
 8025208:	920f      	str	r2, [sp, #60]	; 0x3c
 802520a:	b280      	uxth	r0, r0
 802520c:	b289      	uxth	r1, r1
 802520e:	fb00 fa01 	mul.w	sl, r0, r1
 8025212:	0100      	lsls	r0, r0, #4
 8025214:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 8025218:	eba0 080a 	sub.w	r8, r0, sl
 802521c:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 8025220:	b289      	uxth	r1, r1
 8025222:	fa1f f888 	uxth.w	r8, r8
 8025226:	1a52      	subs	r2, r2, r1
 8025228:	fb08 f00e 	mul.w	r0, r8, lr
 802522c:	b292      	uxth	r2, r2
 802522e:	fb02 0007 	mla	r0, r2, r7, r0
 8025232:	fb01 0009 	mla	r0, r1, r9, r0
 8025236:	fb0a 0005 	mla	r0, sl, r5, r0
 802523a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802523e:	2800      	cmp	r0, #0
 8025240:	f000 80dd 	beq.w	80253fe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 8025244:	2fff      	cmp	r7, #255	; 0xff
 8025246:	d01a      	beq.n	802527e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8025248:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802524c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025250:	fb07 fc0c 	mul.w	ip, r7, ip
 8025254:	435f      	muls	r7, r3
 8025256:	ea4f 231c 	mov.w	r3, ip, lsr #8
 802525a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802525e:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 8025262:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025266:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 802526a:	4463      	add	r3, ip
 802526c:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8025270:	0a1b      	lsrs	r3, r3, #8
 8025272:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8025276:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802527a:	ea43 030b 	orr.w	r3, r3, fp
 802527e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8025282:	d01e      	beq.n	80252c2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 8025284:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8025286:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 802528a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802528e:	fb0e fb0b 	mul.w	fp, lr, fp
 8025292:	fb0e fe07 	mul.w	lr, lr, r7
 8025296:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 802529a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802529e:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 80252a2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80252a6:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 80252aa:	44dc      	add	ip, fp
 80252ac:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80252b0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80252b4:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80252b8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80252bc:	ea4c 070e 	orr.w	r7, ip, lr
 80252c0:	970e      	str	r7, [sp, #56]	; 0x38
 80252c2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80252c6:	d01e      	beq.n	8025306 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 80252c8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80252ca:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 80252ce:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80252d2:	fb09 fe0e 	mul.w	lr, r9, lr
 80252d6:	fb09 f907 	mul.w	r9, r9, r7
 80252da:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80252de:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80252e2:	f509 7780 	add.w	r7, r9, #256	; 0x100
 80252e6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80252ea:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 80252ee:	44f4      	add	ip, lr
 80252f0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80252f4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80252f8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80252fc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025300:	ea4c 0709 	orr.w	r7, ip, r9
 8025304:	970b      	str	r7, [sp, #44]	; 0x2c
 8025306:	2dff      	cmp	r5, #255	; 0xff
 8025308:	d01c      	beq.n	8025344 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2cc>
 802530a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 802530c:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8025310:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025314:	fb05 fe0e 	mul.w	lr, r5, lr
 8025318:	437d      	muls	r5, r7
 802531a:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802531e:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8025322:	f505 7780 	add.w	r7, r5, #256	; 0x100
 8025326:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802532a:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 802532e:	44f4      	add	ip, lr
 8025330:	0a2d      	lsrs	r5, r5, #8
 8025332:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025336:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 802533a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802533e:	ea4c 0505 	orr.w	r5, ip, r5
 8025342:	950f      	str	r5, [sp, #60]	; 0x3c
 8025344:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8025346:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 802534a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802534e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8025352:	fb08 f505 	mul.w	r5, r8, r5
 8025356:	fb02 5507 	mla	r5, r2, r7, r5
 802535a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 802535c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025360:	fb01 5507 	mla	r5, r1, r7, r5
 8025364:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8025366:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802536a:	fb0a 5507 	mla	r5, sl, r7, r5
 802536e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8025370:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025374:	0a2d      	lsrs	r5, r5, #8
 8025376:	fb08 f807 	mul.w	r8, r8, r7
 802537a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802537e:	fb02 8303 	mla	r3, r2, r3, r8
 8025382:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8025384:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8025388:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802538a:	fb01 330c 	mla	r3, r1, ip, r3
 802538e:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8025392:	fb0a 3a01 	mla	sl, sl, r1, r3
 8025396:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8025398:	9915      	ldr	r1, [sp, #84]	; 0x54
 802539a:	4343      	muls	r3, r0
 802539c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80253a0:	1c58      	adds	r0, r3, #1
 80253a2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80253a6:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80253aa:	ea45 050a 	orr.w	r5, r5, sl
 80253ae:	7833      	ldrb	r3, [r6, #0]
 80253b0:	b2ea      	uxtb	r2, r5
 80253b2:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80253b6:	fb12 f201 	smulbb	r2, r2, r1
 80253ba:	b2c0      	uxtb	r0, r0
 80253bc:	fb03 2300 	mla	r3, r3, r0, r2
 80253c0:	b29b      	uxth	r3, r3
 80253c2:	1c5a      	adds	r2, r3, #1
 80253c4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80253c8:	7872      	ldrb	r2, [r6, #1]
 80253ca:	fb12 f200 	smulbb	r2, r2, r0
 80253ce:	121b      	asrs	r3, r3, #8
 80253d0:	7033      	strb	r3, [r6, #0]
 80253d2:	f3c5 2307 	ubfx	r3, r5, #8, #8
 80253d6:	0c2d      	lsrs	r5, r5, #16
 80253d8:	fb03 2301 	mla	r3, r3, r1, r2
 80253dc:	b29b      	uxth	r3, r3
 80253de:	1c5a      	adds	r2, r3, #1
 80253e0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80253e4:	121b      	asrs	r3, r3, #8
 80253e6:	7073      	strb	r3, [r6, #1]
 80253e8:	78b3      	ldrb	r3, [r6, #2]
 80253ea:	fb13 f000 	smulbb	r0, r3, r0
 80253ee:	fb05 0501 	mla	r5, r5, r1, r0
 80253f2:	b2ad      	uxth	r5, r5
 80253f4:	1c6b      	adds	r3, r5, #1
 80253f6:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80253fa:	122d      	asrs	r5, r5, #8
 80253fc:	70b5      	strb	r5, [r6, #2]
 80253fe:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8025400:	3603      	adds	r6, #3
 8025402:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8025404:	4413      	add	r3, r2
 8025406:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8025408:	932d      	str	r3, [sp, #180]	; 0xb4
 802540a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802540c:	4413      	add	r3, r2
 802540e:	932e      	str	r3, [sp, #184]	; 0xb8
 8025410:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8025412:	3b01      	subs	r3, #1
 8025414:	9316      	str	r3, [sp, #88]	; 0x58
 8025416:	e6b7      	b.n	8025188 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8025418:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802541a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 802541c:	4413      	add	r3, r2
 802541e:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8025420:	932d      	str	r3, [sp, #180]	; 0xb4
 8025422:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8025424:	4413      	add	r3, r2
 8025426:	932e      	str	r3, [sp, #184]	; 0xb8
 8025428:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802542a:	3b01      	subs	r3, #1
 802542c:	930a      	str	r3, [sp, #40]	; 0x28
 802542e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025430:	3303      	adds	r3, #3
 8025432:	930d      	str	r3, [sp, #52]	; 0x34
 8025434:	e659      	b.n	80250ea <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8025436:	f47f ae6b 	bne.w	8025110 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 802543a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802543c:	2b00      	cmp	r3, #0
 802543e:	f340 81a6 	ble.w	802578e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 8025442:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025446:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025448:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802544c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8025450:	eef0 6a48 	vmov.f32	s13, s16
 8025454:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8025458:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802545c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025460:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 8025464:	eef0 6a68 	vmov.f32	s13, s17
 8025468:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802546c:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 8025470:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8025474:	ee69 7a27 	vmul.f32	s15, s18, s15
 8025478:	ee37 8a48 	vsub.f32	s16, s14, s16
 802547c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8025480:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8025484:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8025488:	ee18 2a10 	vmov	r2, s16
 802548c:	eeb0 8a47 	vmov.f32	s16, s14
 8025490:	fb92 f3f3 	sdiv	r3, r2, r3
 8025494:	ee18 2a90 	vmov	r2, s17
 8025498:	932f      	str	r3, [sp, #188]	; 0xbc
 802549a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802549c:	eef0 8a67 	vmov.f32	s17, s15
 80254a0:	fb92 f3f3 	sdiv	r3, r2, r3
 80254a4:	9330      	str	r3, [sp, #192]	; 0xc0
 80254a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80254a8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80254aa:	3b01      	subs	r3, #1
 80254ac:	9314      	str	r3, [sp, #80]	; 0x50
 80254ae:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80254b0:	bf08      	it	eq
 80254b2:	4613      	moveq	r3, r2
 80254b4:	930a      	str	r3, [sp, #40]	; 0x28
 80254b6:	e611      	b.n	80250dc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 80254b8:	b161      	cbz	r1, 80254d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45c>
 80254ba:	5d2a      	ldrb	r2, [r5, r4]
 80254bc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80254be:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80254c2:	25ff      	movs	r5, #255	; 0xff
 80254c4:	ea4f 6912 	mov.w	r9, r2, lsr #24
 80254c8:	920b      	str	r2, [sp, #44]	; 0x2c
 80254ca:	46ae      	mov	lr, r5
 80254cc:	e69d      	b.n	802520a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 80254ce:	25ff      	movs	r5, #255	; 0xff
 80254d0:	46a9      	mov	r9, r5
 80254d2:	e69a      	b.n	802520a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 80254d4:	25ff      	movs	r5, #255	; 0xff
 80254d6:	46a9      	mov	r9, r5
 80254d8:	e7f7      	b.n	80254ca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x452>
 80254da:	1c57      	adds	r7, r2, #1
 80254dc:	d18f      	bne.n	80253fe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 80254de:	4294      	cmp	r4, r2
 80254e0:	dd8d      	ble.n	80253fe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 80254e2:	1c5d      	adds	r5, r3, #1
 80254e4:	db8b      	blt.n	80253fe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 80254e6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80254e8:	429d      	cmp	r5, r3
 80254ea:	dd88      	ble.n	80253fe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 80254ec:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80254ee:	9202      	str	r2, [sp, #8]
 80254f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80254f2:	e9cd 3003 	strd	r3, r0, [sp, #12]
 80254f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80254f8:	9819      	ldr	r0, [sp, #100]	; 0x64
 80254fa:	e9cd 1505 	strd	r1, r5, [sp, #20]
 80254fe:	e9cd 4300 	strd	r4, r3, [sp]
 8025502:	4631      	mov	r1, r6
 8025504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025506:	f7ff fc63 	bl	8024dd0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 802550a:	e778      	b.n	80253fe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 802550c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802550e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8025510:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8025514:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8025516:	1412      	asrs	r2, r2, #16
 8025518:	f3c3 3003 	ubfx	r0, r3, #12, #4
 802551c:	141b      	asrs	r3, r3, #16
 802551e:	fb04 2303 	mla	r3, r4, r3, r2
 8025522:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8025524:	18d5      	adds	r5, r2, r3
 8025526:	5cd3      	ldrb	r3, [r2, r3]
 8025528:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802552a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802552e:	0e1e      	lsrs	r6, r3, #24
 8025530:	2900      	cmp	r1, #0
 8025532:	f000 811b 	beq.w	802576c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f4>
 8025536:	786a      	ldrb	r2, [r5, #1]
 8025538:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802553a:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 802553e:	9210      	str	r2, [sp, #64]	; 0x40
 8025540:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8025544:	2800      	cmp	r0, #0
 8025546:	f000 811c 	beq.w	8025782 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70a>
 802554a:	192a      	adds	r2, r5, r4
 802554c:	5d2d      	ldrb	r5, [r5, r4]
 802554e:	7852      	ldrb	r2, [r2, #1]
 8025550:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8025554:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8025558:	950c      	str	r5, [sp, #48]	; 0x30
 802555a:	ea4f 6915 	mov.w	r9, r5, lsr #24
 802555e:	0e15      	lsrs	r5, r2, #24
 8025560:	9211      	str	r2, [sp, #68]	; 0x44
 8025562:	b289      	uxth	r1, r1
 8025564:	b280      	uxth	r0, r0
 8025566:	fb01 fa00 	mul.w	sl, r1, r0
 802556a:	0109      	lsls	r1, r1, #4
 802556c:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8025570:	eba1 080a 	sub.w	r8, r1, sl
 8025574:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8025578:	b280      	uxth	r0, r0
 802557a:	fa1f f888 	uxth.w	r8, r8
 802557e:	1a12      	subs	r2, r2, r0
 8025580:	fb08 f10c 	mul.w	r1, r8, ip
 8025584:	b292      	uxth	r2, r2
 8025586:	fb02 1106 	mla	r1, r2, r6, r1
 802558a:	fb00 1109 	mla	r1, r0, r9, r1
 802558e:	fb0a 1105 	mla	r1, sl, r5, r1
 8025592:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8025596:	2900      	cmp	r1, #0
 8025598:	f000 80da 	beq.w	8025750 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d8>
 802559c:	2eff      	cmp	r6, #255	; 0xff
 802559e:	d016      	beq.n	80255ce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x556>
 80255a0:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80255a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80255a8:	4377      	muls	r7, r6
 80255aa:	435e      	muls	r6, r3
 80255ac:	0a3b      	lsrs	r3, r7, #8
 80255ae:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80255b2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80255b6:	443b      	add	r3, r7
 80255b8:	f506 7780 	add.w	r7, r6, #256	; 0x100
 80255bc:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 80255c0:	0a1b      	lsrs	r3, r3, #8
 80255c2:	0a3f      	lsrs	r7, r7, #8
 80255c4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80255c8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80255cc:	433b      	orrs	r3, r7
 80255ce:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80255d2:	d01d      	beq.n	8025610 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x598>
 80255d4:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80255d6:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80255d8:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80255dc:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80255e0:	fb0c f606 	mul.w	r6, ip, r6
 80255e4:	fb0c fc07 	mul.w	ip, ip, r7
 80255e8:	0a37      	lsrs	r7, r6, #8
 80255ea:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 80255ee:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80255f2:	4437      	add	r7, r6
 80255f4:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 80255f8:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 80255fc:	0a3f      	lsrs	r7, r7, #8
 80255fe:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025602:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025606:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802560a:	ea47 060c 	orr.w	r6, r7, ip
 802560e:	9610      	str	r6, [sp, #64]	; 0x40
 8025610:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8025614:	d01d      	beq.n	8025652 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5da>
 8025616:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8025618:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 802561c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8025620:	fb09 fc0c 	mul.w	ip, r9, ip
 8025624:	fb09 f906 	mul.w	r9, r9, r6
 8025628:	ea4f 271c 	mov.w	r7, ip, lsr #8
 802562c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8025630:	f509 7680 	add.w	r6, r9, #256	; 0x100
 8025634:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025638:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 802563c:	4467      	add	r7, ip
 802563e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025642:	0a3f      	lsrs	r7, r7, #8
 8025644:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8025648:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802564c:	ea47 0609 	orr.w	r6, r7, r9
 8025650:	960c      	str	r6, [sp, #48]	; 0x30
 8025652:	2dff      	cmp	r5, #255	; 0xff
 8025654:	d01a      	beq.n	802568c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x614>
 8025656:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8025658:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 802565c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8025660:	fb05 fc0c 	mul.w	ip, r5, ip
 8025664:	4375      	muls	r5, r6
 8025666:	ea4f 271c 	mov.w	r7, ip, lsr #8
 802566a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802566e:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8025672:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025676:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 802567a:	4467      	add	r7, ip
 802567c:	0a2d      	lsrs	r5, r5, #8
 802567e:	0a3f      	lsrs	r7, r7, #8
 8025680:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8025684:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025688:	433d      	orrs	r5, r7
 802568a:	9511      	str	r5, [sp, #68]	; 0x44
 802568c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802568e:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 8025692:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025696:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802569a:	fb08 f505 	mul.w	r5, r8, r5
 802569e:	fb02 5506 	mla	r5, r2, r6, r5
 80256a2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80256a4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80256a8:	fb00 5506 	mla	r5, r0, r6, r5
 80256ac:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80256ae:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80256b2:	fb0a 5506 	mla	r5, sl, r6, r5
 80256b6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80256b8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80256bc:	0a2d      	lsrs	r5, r5, #8
 80256be:	fb08 f806 	mul.w	r8, r8, r6
 80256c2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80256c6:	fb02 8303 	mla	r3, r2, r3, r8
 80256ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80256cc:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 80256d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80256d2:	fb00 3307 	mla	r3, r0, r7, r3
 80256d6:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80256da:	fb0a 3c0c 	mla	ip, sl, ip, r3
 80256de:	fb01 f30b 	mul.w	r3, r1, fp
 80256e2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80256e6:	1c59      	adds	r1, r3, #1
 80256e8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80256ec:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80256f0:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 80256f4:	ea45 050c 	orr.w	r5, r5, ip
 80256f8:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80256fc:	b2ea      	uxtb	r2, r5
 80256fe:	b2c9      	uxtb	r1, r1
 8025700:	fb12 f20b 	smulbb	r2, r2, fp
 8025704:	fb03 2301 	mla	r3, r3, r1, r2
 8025708:	b29b      	uxth	r3, r3
 802570a:	1c5a      	adds	r2, r3, #1
 802570c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025710:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8025714:	fb12 f201 	smulbb	r2, r2, r1
 8025718:	121b      	asrs	r3, r3, #8
 802571a:	f80e 3c03 	strb.w	r3, [lr, #-3]
 802571e:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8025722:	0c2d      	lsrs	r5, r5, #16
 8025724:	fb03 230b 	mla	r3, r3, fp, r2
 8025728:	b29b      	uxth	r3, r3
 802572a:	1c5a      	adds	r2, r3, #1
 802572c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025730:	121b      	asrs	r3, r3, #8
 8025732:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8025736:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 802573a:	fb13 f101 	smulbb	r1, r3, r1
 802573e:	fb05 150b 	mla	r5, r5, fp, r1
 8025742:	b2ad      	uxth	r5, r5
 8025744:	1c69      	adds	r1, r5, #1
 8025746:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 802574a:	122d      	asrs	r5, r5, #8
 802574c:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8025750:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8025752:	f10e 0e03 	add.w	lr, lr, #3
 8025756:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8025758:	4413      	add	r3, r2
 802575a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 802575c:	932d      	str	r3, [sp, #180]	; 0xb4
 802575e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8025760:	4413      	add	r3, r2
 8025762:	932e      	str	r3, [sp, #184]	; 0xb8
 8025764:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8025766:	3b01      	subs	r3, #1
 8025768:	9315      	str	r3, [sp, #84]	; 0x54
 802576a:	e4ed      	b.n	8025148 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 802576c:	b160      	cbz	r0, 8025788 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x710>
 802576e:	5d2a      	ldrb	r2, [r5, r4]
 8025770:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8025772:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8025776:	25ff      	movs	r5, #255	; 0xff
 8025778:	ea4f 6912 	mov.w	r9, r2, lsr #24
 802577c:	920c      	str	r2, [sp, #48]	; 0x30
 802577e:	46ac      	mov	ip, r5
 8025780:	e6ef      	b.n	8025562 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 8025782:	25ff      	movs	r5, #255	; 0xff
 8025784:	46a9      	mov	r9, r5
 8025786:	e6ec      	b.n	8025562 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 8025788:	25ff      	movs	r5, #255	; 0xff
 802578a:	46a9      	mov	r9, r5
 802578c:	e7f7      	b.n	802577e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x706>
 802578e:	b01b      	add	sp, #108	; 0x6c
 8025790:	ecbd 8b08 	vpop	{d8-d11}
 8025794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025798 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8025798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802579c:	b085      	sub	sp, #20
 802579e:	7888      	ldrb	r0, [r1, #2]
 80257a0:	4692      	mov	sl, r2
 80257a2:	4698      	mov	r8, r3
 80257a4:	9000      	str	r0, [sp, #0]
 80257a6:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 80257aa:	7848      	ldrb	r0, [r1, #1]
 80257ac:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 80257b0:	9001      	str	r0, [sp, #4]
 80257b2:	7808      	ldrb	r0, [r1, #0]
 80257b4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80257b8:	9002      	str	r0, [sp, #8]
 80257ba:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 80257be:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 80257c2:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 80257c6:	fb04 560c 	mla	r6, r4, ip, r5
 80257ca:	2c00      	cmp	r4, #0
 80257cc:	eb02 0e06 	add.w	lr, r2, r6
 80257d0:	9a00      	ldr	r2, [sp, #0]
 80257d2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80257d6:	9a01      	ldr	r2, [sp, #4]
 80257d8:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80257dc:	db3e      	blt.n	802585c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 80257de:	45a1      	cmp	r9, r4
 80257e0:	dd3c      	ble.n	802585c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 80257e2:	2d00      	cmp	r5, #0
 80257e4:	db38      	blt.n	8025858 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 80257e6:	45ac      	cmp	ip, r5
 80257e8:	dd36      	ble.n	8025858 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 80257ea:	f81a 2006 	ldrb.w	r2, [sl, r6]
 80257ee:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 80257f2:	1c6e      	adds	r6, r5, #1
 80257f4:	d435      	bmi.n	8025862 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 80257f6:	45b4      	cmp	ip, r6
 80257f8:	dd33      	ble.n	8025862 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 80257fa:	b393      	cbz	r3, 8025862 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 80257fc:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8025800:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 8025804:	3401      	adds	r4, #1
 8025806:	d430      	bmi.n	802586a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 8025808:	45a1      	cmp	r9, r4
 802580a:	dd2e      	ble.n	802586a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 802580c:	b36f      	cbz	r7, 802586a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 802580e:	2d00      	cmp	r5, #0
 8025810:	db29      	blt.n	8025866 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 8025812:	45ac      	cmp	ip, r5
 8025814:	dd27      	ble.n	8025866 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 8025816:	f81e 400c 	ldrb.w	r4, [lr, ip]
 802581a:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 802581e:	3501      	adds	r5, #1
 8025820:	d407      	bmi.n	8025832 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8025822:	45ac      	cmp	ip, r5
 8025824:	dd05      	ble.n	8025832 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8025826:	b123      	cbz	r3, 8025832 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 8025828:	44f4      	add	ip, lr
 802582a:	f89c 0001 	ldrb.w	r0, [ip, #1]
 802582e:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 8025832:	2b0f      	cmp	r3, #15
 8025834:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8025838:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802583c:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8025840:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8025844:	d801      	bhi.n	802584a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 8025846:	2f0f      	cmp	r7, #15
 8025848:	d911      	bls.n	802586e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd6>
 802584a:	4b76      	ldr	r3, [pc, #472]	; (8025a24 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 802584c:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8025850:	4a75      	ldr	r2, [pc, #468]	; (8025a28 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 8025852:	4876      	ldr	r0, [pc, #472]	; (8025a2c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 8025854:	f004 ff94 	bl	802a780 <__assert_func>
 8025858:	4602      	mov	r2, r0
 802585a:	e7ca      	b.n	80257f2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x5a>
 802585c:	4606      	mov	r6, r0
 802585e:	4602      	mov	r2, r0
 8025860:	e7d0      	b.n	8025804 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 8025862:	4606      	mov	r6, r0
 8025864:	e7ce      	b.n	8025804 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 8025866:	4604      	mov	r4, r0
 8025868:	e7d9      	b.n	802581e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x86>
 802586a:	4604      	mov	r4, r0
 802586c:	e7e1      	b.n	8025832 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 802586e:	b29b      	uxth	r3, r3
 8025870:	b2bf      	uxth	r7, r7
 8025872:	fb07 fe03 	mul.w	lr, r7, r3
 8025876:	011b      	lsls	r3, r3, #4
 8025878:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 802587c:	eba3 0c0e 	sub.w	ip, r3, lr
 8025880:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8025884:	b2bf      	uxth	r7, r7
 8025886:	fa1f fc8c 	uxth.w	ip, ip
 802588a:	1bed      	subs	r5, r5, r7
 802588c:	fb0c f30a 	mul.w	r3, ip, sl
 8025890:	b2ad      	uxth	r5, r5
 8025892:	fb05 330b 	mla	r3, r5, fp, r3
 8025896:	fb07 3309 	mla	r3, r7, r9, r3
 802589a:	fb0e 3308 	mla	r3, lr, r8, r3
 802589e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80258a2:	9303      	str	r3, [sp, #12]
 80258a4:	2b00      	cmp	r3, #0
 80258a6:	f000 80b9 	beq.w	8025a1c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x284>
 80258aa:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80258ae:	d018      	beq.n	80258e2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x14a>
 80258b0:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80258b4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80258b8:	fb0b f303 	mul.w	r3, fp, r3
 80258bc:	fb0b fb02 	mul.w	fp, fp, r2
 80258c0:	0a1a      	lsrs	r2, r3, #8
 80258c2:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 80258c6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80258ca:	441a      	add	r2, r3
 80258cc:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 80258d0:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 80258d4:	0a12      	lsrs	r2, r2, #8
 80258d6:	0a1b      	lsrs	r3, r3, #8
 80258d8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80258dc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80258e0:	431a      	orrs	r2, r3
 80258e2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80258e6:	d019      	beq.n	802591c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x184>
 80258e8:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 80258ec:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80258f0:	fb0a fb0b 	mul.w	fp, sl, fp
 80258f4:	fb0a fa06 	mul.w	sl, sl, r6
 80258f8:	ea4f 261b 	mov.w	r6, fp, lsr #8
 80258fc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025900:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8025904:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8025908:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 802590c:	445e      	add	r6, fp
 802590e:	0a1b      	lsrs	r3, r3, #8
 8025910:	0a36      	lsrs	r6, r6, #8
 8025912:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025916:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802591a:	431e      	orrs	r6, r3
 802591c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8025920:	d019      	beq.n	8025956 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1be>
 8025922:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8025926:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802592a:	fb09 fa0a 	mul.w	sl, r9, sl
 802592e:	fb09 f904 	mul.w	r9, r9, r4
 8025932:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8025936:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802593a:	f509 7380 	add.w	r3, r9, #256	; 0x100
 802593e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8025942:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8025946:	4454      	add	r4, sl
 8025948:	0a1b      	lsrs	r3, r3, #8
 802594a:	0a24      	lsrs	r4, r4, #8
 802594c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025950:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8025954:	431c      	orrs	r4, r3
 8025956:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802595a:	d019      	beq.n	8025990 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f8>
 802595c:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8025960:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8025964:	fb08 f909 	mul.w	r9, r8, r9
 8025968:	fb08 f800 	mul.w	r8, r8, r0
 802596c:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8025970:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8025974:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8025978:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802597c:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8025980:	4448      	add	r0, r9
 8025982:	0a1b      	lsrs	r3, r3, #8
 8025984:	0a00      	lsrs	r0, r0, #8
 8025986:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802598a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802598e:	4318      	orrs	r0, r3
 8025990:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8025994:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8025998:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802599c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80259a0:	fb0c f808 	mul.w	r8, ip, r8
 80259a4:	fb0c f606 	mul.w	r6, ip, r6
 80259a8:	fb05 8803 	mla	r8, r5, r3, r8
 80259ac:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 80259b0:	fb05 6202 	mla	r2, r5, r2, r6
 80259b4:	fb07 8803 	mla	r8, r7, r3, r8
 80259b8:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 80259bc:	fb0e 8303 	mla	r3, lr, r3, r8
 80259c0:	0a1b      	lsrs	r3, r3, #8
 80259c2:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 80259c6:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 80259ca:	9c02      	ldr	r4, [sp, #8]
 80259cc:	fb07 2703 	mla	r7, r7, r3, r2
 80259d0:	9a03      	ldr	r2, [sp, #12]
 80259d2:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 80259d6:	43d2      	mvns	r2, r2
 80259d8:	fb0e 7303 	mla	r3, lr, r3, r7
 80259dc:	b2d2      	uxtb	r2, r2
 80259de:	0a1b      	lsrs	r3, r3, #8
 80259e0:	4354      	muls	r4, r2
 80259e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80259e6:	1c60      	adds	r0, r4, #1
 80259e8:	ea48 0303 	orr.w	r3, r8, r3
 80259ec:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 80259f0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80259f4:	7008      	strb	r0, [r1, #0]
 80259f6:	9801      	ldr	r0, [sp, #4]
 80259f8:	4350      	muls	r0, r2
 80259fa:	1c44      	adds	r4, r0, #1
 80259fc:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 8025a00:	0a18      	lsrs	r0, r3, #8
 8025a02:	0c1b      	lsrs	r3, r3, #16
 8025a04:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8025a08:	7048      	strb	r0, [r1, #1]
 8025a0a:	9800      	ldr	r0, [sp, #0]
 8025a0c:	4350      	muls	r0, r2
 8025a0e:	4602      	mov	r2, r0
 8025a10:	3001      	adds	r0, #1
 8025a12:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8025a16:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025a1a:	708b      	strb	r3, [r1, #2]
 8025a1c:	b005      	add	sp, #20
 8025a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025a22:	bf00      	nop
 8025a24:	0802fd97 	.word	0x0802fd97
 8025a28:	0803028e 	.word	0x0803028e
 8025a2c:	0802fe60 	.word	0x0802fe60

08025a30 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8025a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025a34:	ed2d 8b08 	vpush	{d8-d11}
 8025a38:	b097      	sub	sp, #92	; 0x5c
 8025a3a:	eeb0 aa40 	vmov.f32	s20, s0
 8025a3e:	eef0 9a60 	vmov.f32	s19, s1
 8025a42:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 8025a44:	eeb0 9a41 	vmov.f32	s18, s2
 8025a48:	9308      	str	r3, [sp, #32]
 8025a4a:	eeb0 8a62 	vmov.f32	s16, s5
 8025a4e:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8025a52:	eef0 8a43 	vmov.f32	s17, s6
 8025a56:	9015      	str	r0, [sp, #84]	; 0x54
 8025a58:	eef0 ba44 	vmov.f32	s23, s8
 8025a5c:	6868      	ldr	r0, [r5, #4]
 8025a5e:	eeb0 ba64 	vmov.f32	s22, s9
 8025a62:	9112      	str	r1, [sp, #72]	; 0x48
 8025a64:	eef0 aa45 	vmov.f32	s21, s10
 8025a68:	9310      	str	r3, [sp, #64]	; 0x40
 8025a6a:	9214      	str	r2, [sp, #80]	; 0x50
 8025a6c:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8025a6e:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 8025a72:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8025a76:	fb00 1303 	mla	r3, r0, r3, r1
 8025a7a:	6829      	ldr	r1, [r5, #0]
 8025a7c:	6855      	ldr	r5, [r2, #4]
 8025a7e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025a82:	3504      	adds	r5, #4
 8025a84:	18cb      	adds	r3, r1, r3
 8025a86:	930b      	str	r3, [sp, #44]	; 0x2c
 8025a88:	6813      	ldr	r3, [r2, #0]
 8025a8a:	9311      	str	r3, [sp, #68]	; 0x44
 8025a8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8025a8e:	2b00      	cmp	r3, #0
 8025a90:	dc03      	bgt.n	8025a9a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8025a92:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8025a94:	2b00      	cmp	r3, #0
 8025a96:	f340 8333 	ble.w	8026100 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 8025a9a:	9b08      	ldr	r3, [sp, #32]
 8025a9c:	2b00      	cmp	r3, #0
 8025a9e:	f340 8190 	ble.w	8025dc2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8025aa2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8025aa4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025aa6:	1412      	asrs	r2, r2, #16
 8025aa8:	ea4f 4323 	mov.w	r3, r3, asr #16
 8025aac:	d42f      	bmi.n	8025b0e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8025aae:	1c51      	adds	r1, r2, #1
 8025ab0:	428c      	cmp	r4, r1
 8025ab2:	dd2f      	ble.n	8025b14 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8025ab4:	2b00      	cmp	r3, #0
 8025ab6:	db2d      	blt.n	8025b14 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8025ab8:	1c59      	adds	r1, r3, #1
 8025aba:	9810      	ldr	r0, [sp, #64]	; 0x40
 8025abc:	4288      	cmp	r0, r1
 8025abe:	dd29      	ble.n	8025b14 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8025ac0:	9b08      	ldr	r3, [sp, #32]
 8025ac2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8025ac4:	3b01      	subs	r3, #1
 8025ac6:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8025ac8:	fb02 1203 	mla	r2, r2, r3, r1
 8025acc:	1412      	asrs	r2, r2, #16
 8025ace:	d42b      	bmi.n	8025b28 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8025ad0:	3201      	adds	r2, #1
 8025ad2:	4294      	cmp	r4, r2
 8025ad4:	dd28      	ble.n	8025b28 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8025ad6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8025ad8:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8025ada:	fb02 1303 	mla	r3, r2, r3, r1
 8025ade:	141b      	asrs	r3, r3, #16
 8025ae0:	d422      	bmi.n	8025b28 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8025ae2:	3301      	adds	r3, #1
 8025ae4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025ae6:	429a      	cmp	r2, r3
 8025ae8:	dd1e      	ble.n	8025b28 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 8025aea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025aec:	f103 0803 	add.w	r8, r3, #3
 8025af0:	9b08      	ldr	r3, [sp, #32]
 8025af2:	9307      	str	r3, [sp, #28]
 8025af4:	9b07      	ldr	r3, [sp, #28]
 8025af6:	2b00      	cmp	r3, #0
 8025af8:	f300 81ca 	bgt.w	8025e90 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x460>
 8025afc:	9b08      	ldr	r3, [sp, #32]
 8025afe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8025b00:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8025b04:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8025b08:	441a      	add	r2, r3
 8025b0a:	920b      	str	r2, [sp, #44]	; 0x2c
 8025b0c:	e15b      	b.n	8025dc6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 8025b0e:	1c51      	adds	r1, r2, #1
 8025b10:	f040 8148 	bne.w	8025da4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8025b14:	42a2      	cmp	r2, r4
 8025b16:	f280 8145 	bge.w	8025da4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8025b1a:	1c5a      	adds	r2, r3, #1
 8025b1c:	f2c0 8142 	blt.w	8025da4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8025b20:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025b22:	4293      	cmp	r3, r2
 8025b24:	f280 813e 	bge.w	8025da4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8025b28:	9b08      	ldr	r3, [sp, #32]
 8025b2a:	9313      	str	r3, [sp, #76]	; 0x4c
 8025b2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025b2e:	9307      	str	r3, [sp, #28]
 8025b30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025b32:	2b00      	cmp	r3, #0
 8025b34:	dde2      	ble.n	8025afc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 8025b36:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8025b38:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025b3a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8025b3e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8025b40:	141b      	asrs	r3, r3, #16
 8025b42:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8025b46:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8025b48:	1412      	asrs	r2, r2, #16
 8025b4a:	f100 818b 	bmi.w	8025e64 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x434>
 8025b4e:	1c56      	adds	r6, r2, #1
 8025b50:	42b4      	cmp	r4, r6
 8025b52:	f340 8189 	ble.w	8025e68 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 8025b56:	2b00      	cmp	r3, #0
 8025b58:	f2c0 8186 	blt.w	8025e68 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 8025b5c:	1c5e      	adds	r6, r3, #1
 8025b5e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8025b60:	42b7      	cmp	r7, r6
 8025b62:	f340 8181 	ble.w	8025e68 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 8025b66:	fb03 2304 	mla	r3, r3, r4, r2
 8025b6a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8025b6c:	18d6      	adds	r6, r2, r3
 8025b6e:	5cd3      	ldrb	r3, [r2, r3]
 8025b70:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8025b74:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8025b78:	2900      	cmp	r1, #0
 8025b7a:	f000 8163 	beq.w	8025e44 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 8025b7e:	7872      	ldrb	r2, [r6, #1]
 8025b80:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8025b84:	920c      	str	r2, [sp, #48]	; 0x30
 8025b86:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8025b8a:	2800      	cmp	r0, #0
 8025b8c:	f000 8164 	beq.w	8025e58 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x428>
 8025b90:	1932      	adds	r2, r6, r4
 8025b92:	5d36      	ldrb	r6, [r6, r4]
 8025b94:	7852      	ldrb	r2, [r2, #1]
 8025b96:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8025b9a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8025b9e:	9609      	str	r6, [sp, #36]	; 0x24
 8025ba0:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8025ba4:	0e16      	lsrs	r6, r2, #24
 8025ba6:	920d      	str	r2, [sp, #52]	; 0x34
 8025ba8:	b289      	uxth	r1, r1
 8025baa:	b280      	uxth	r0, r0
 8025bac:	fb01 fb00 	mul.w	fp, r1, r0
 8025bb0:	0109      	lsls	r1, r1, #4
 8025bb2:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 8025bb6:	eba1 090b 	sub.w	r9, r1, fp
 8025bba:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8025bbe:	b280      	uxth	r0, r0
 8025bc0:	fa1f f989 	uxth.w	r9, r9
 8025bc4:	1a12      	subs	r2, r2, r0
 8025bc6:	fb09 f108 	mul.w	r1, r9, r8
 8025bca:	b292      	uxth	r2, r2
 8025bcc:	fb02 110c 	mla	r1, r2, ip, r1
 8025bd0:	fb00 110a 	mla	r1, r0, sl, r1
 8025bd4:	fb0b 1106 	mla	r1, fp, r6, r1
 8025bd8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8025bdc:	2900      	cmp	r1, #0
 8025bde:	f000 80d2 	beq.w	8025d86 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8025be2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8025be6:	d01b      	beq.n	8025c20 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f0>
 8025be8:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8025bec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025bf0:	fb0c fe0e 	mul.w	lr, ip, lr
 8025bf4:	fb0c fc03 	mul.w	ip, ip, r3
 8025bf8:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8025bfc:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8025c00:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025c04:	4473      	add	r3, lr
 8025c06:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8025c0a:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8025c0e:	0a1b      	lsrs	r3, r3, #8
 8025c10:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025c14:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025c18:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8025c1c:	ea43 030e 	orr.w	r3, r3, lr
 8025c20:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8025c24:	d01e      	beq.n	8025c64 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x234>
 8025c26:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8025c28:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8025c2c:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 8025c30:	fb08 fc0c 	mul.w	ip, r8, ip
 8025c34:	fb08 f80e 	mul.w	r8, r8, lr
 8025c38:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8025c3c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8025c40:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025c44:	44e6      	add	lr, ip
 8025c46:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8025c4a:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8025c4e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025c52:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8025c56:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025c5a:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8025c5e:	ea4e 0708 	orr.w	r7, lr, r8
 8025c62:	970c      	str	r7, [sp, #48]	; 0x30
 8025c64:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8025c68:	d01e      	beq.n	8025ca8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8025c6a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8025c6c:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8025c70:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8025c74:	fb0a f808 	mul.w	r8, sl, r8
 8025c78:	fb0a fa0c 	mul.w	sl, sl, ip
 8025c7c:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8025c80:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8025c84:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025c88:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025c8c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025c90:	44c6      	add	lr, r8
 8025c92:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025c96:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025c9a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025c9e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025ca2:	ea4e 070a 	orr.w	r7, lr, sl
 8025ca6:	9709      	str	r7, [sp, #36]	; 0x24
 8025ca8:	2eff      	cmp	r6, #255	; 0xff
 8025caa:	d01d      	beq.n	8025ce8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>
 8025cac:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8025cae:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8025cb2:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8025cb6:	fb06 f808 	mul.w	r8, r6, r8
 8025cba:	fb06 f60c 	mul.w	r6, r6, ip
 8025cbe:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8025cc2:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8025cc6:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8025cca:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025cce:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8025cd2:	44c6      	add	lr, r8
 8025cd4:	0a36      	lsrs	r6, r6, #8
 8025cd6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025cda:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8025cde:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025ce2:	ea4e 0606 	orr.w	r6, lr, r6
 8025ce6:	960d      	str	r6, [sp, #52]	; 0x34
 8025ce8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8025cea:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8025cee:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8025cf0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025cf4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8025cf8:	43c9      	mvns	r1, r1
 8025cfa:	fb09 f606 	mul.w	r6, r9, r6
 8025cfe:	b2c9      	uxtb	r1, r1
 8025d00:	fb02 660c 	mla	r6, r2, ip, r6
 8025d04:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8025d08:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8025d0a:	fb00 660c 	mla	r6, r0, ip, r6
 8025d0e:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8025d12:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8025d14:	fb0b 660c 	mla	r6, fp, ip, r6
 8025d18:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8025d1c:	fb09 f90c 	mul.w	r9, r9, ip
 8025d20:	0a36      	lsrs	r6, r6, #8
 8025d22:	fb02 9303 	mla	r3, r2, r3, r9
 8025d26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025d28:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8025d2c:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8025d30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8025d32:	fb00 330e 	mla	r3, r0, lr, r3
 8025d36:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8025d3a:	fb0b 3b00 	mla	fp, fp, r0, r3
 8025d3e:	9b07      	ldr	r3, [sp, #28]
 8025d40:	781b      	ldrb	r3, [r3, #0]
 8025d42:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8025d46:	fb03 f201 	mul.w	r2, r3, r1
 8025d4a:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8025d4e:	1c53      	adds	r3, r2, #1
 8025d50:	ea46 060b 	orr.w	r6, r6, fp
 8025d54:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025d58:	9a07      	ldr	r2, [sp, #28]
 8025d5a:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8025d5e:	7013      	strb	r3, [r2, #0]
 8025d60:	7853      	ldrb	r3, [r2, #1]
 8025d62:	434b      	muls	r3, r1
 8025d64:	1c5a      	adds	r2, r3, #1
 8025d66:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8025d6a:	0a33      	lsrs	r3, r6, #8
 8025d6c:	0c36      	lsrs	r6, r6, #16
 8025d6e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025d72:	9a07      	ldr	r2, [sp, #28]
 8025d74:	7053      	strb	r3, [r2, #1]
 8025d76:	7893      	ldrb	r3, [r2, #2]
 8025d78:	4359      	muls	r1, r3
 8025d7a:	1c4b      	adds	r3, r1, #1
 8025d7c:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8025d80:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 8025d84:	7096      	strb	r6, [r2, #2]
 8025d86:	9b07      	ldr	r3, [sp, #28]
 8025d88:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8025d8a:	3303      	adds	r3, #3
 8025d8c:	9307      	str	r3, [sp, #28]
 8025d8e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025d90:	4413      	add	r3, r2
 8025d92:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8025d94:	9329      	str	r3, [sp, #164]	; 0xa4
 8025d96:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025d98:	4413      	add	r3, r2
 8025d9a:	932a      	str	r3, [sp, #168]	; 0xa8
 8025d9c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025d9e:	3b01      	subs	r3, #1
 8025da0:	9313      	str	r3, [sp, #76]	; 0x4c
 8025da2:	e6c5      	b.n	8025b30 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 8025da4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025da6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8025da8:	4413      	add	r3, r2
 8025daa:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8025dac:	9329      	str	r3, [sp, #164]	; 0xa4
 8025dae:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025db0:	4413      	add	r3, r2
 8025db2:	932a      	str	r3, [sp, #168]	; 0xa8
 8025db4:	9b08      	ldr	r3, [sp, #32]
 8025db6:	3b01      	subs	r3, #1
 8025db8:	9308      	str	r3, [sp, #32]
 8025dba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025dbc:	3303      	adds	r3, #3
 8025dbe:	930b      	str	r3, [sp, #44]	; 0x2c
 8025dc0:	e66b      	b.n	8025a9a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8025dc2:	f47f ae7d 	bne.w	8025ac0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 8025dc6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8025dc8:	2b00      	cmp	r3, #0
 8025dca:	f340 8199 	ble.w	8026100 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 8025dce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025dd2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025dd4:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8025dd8:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8025ddc:	eef0 6a48 	vmov.f32	s13, s16
 8025de0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8025de4:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8025de8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025dec:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8025df0:	eef0 6a68 	vmov.f32	s13, s17
 8025df4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025df8:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 8025dfc:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8025e00:	ee69 7a27 	vmul.f32	s15, s18, s15
 8025e04:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025e08:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8025e0c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8025e10:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8025e14:	ee18 2a10 	vmov	r2, s16
 8025e18:	eeb0 8a47 	vmov.f32	s16, s14
 8025e1c:	fb92 f3f3 	sdiv	r3, r2, r3
 8025e20:	ee18 2a90 	vmov	r2, s17
 8025e24:	932b      	str	r3, [sp, #172]	; 0xac
 8025e26:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025e28:	eef0 8a67 	vmov.f32	s17, s15
 8025e2c:	fb92 f3f3 	sdiv	r3, r2, r3
 8025e30:	932c      	str	r3, [sp, #176]	; 0xb0
 8025e32:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8025e34:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8025e36:	3b01      	subs	r3, #1
 8025e38:	9312      	str	r3, [sp, #72]	; 0x48
 8025e3a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025e3c:	bf08      	it	eq
 8025e3e:	4613      	moveq	r3, r2
 8025e40:	9308      	str	r3, [sp, #32]
 8025e42:	e623      	b.n	8025a8c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 8025e44:	b158      	cbz	r0, 8025e5e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8025e46:	5d32      	ldrb	r2, [r6, r4]
 8025e48:	26ff      	movs	r6, #255	; 0xff
 8025e4a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8025e4e:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 8025e52:	9209      	str	r2, [sp, #36]	; 0x24
 8025e54:	46b0      	mov	r8, r6
 8025e56:	e6a7      	b.n	8025ba8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 8025e58:	26ff      	movs	r6, #255	; 0xff
 8025e5a:	46b2      	mov	sl, r6
 8025e5c:	e6a4      	b.n	8025ba8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 8025e5e:	26ff      	movs	r6, #255	; 0xff
 8025e60:	46b2      	mov	sl, r6
 8025e62:	e7f7      	b.n	8025e54 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 8025e64:	1c57      	adds	r7, r2, #1
 8025e66:	d18e      	bne.n	8025d86 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8025e68:	4294      	cmp	r4, r2
 8025e6a:	dd8c      	ble.n	8025d86 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8025e6c:	1c5e      	adds	r6, r3, #1
 8025e6e:	db8a      	blt.n	8025d86 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8025e70:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8025e72:	429e      	cmp	r6, r3
 8025e74:	dd87      	ble.n	8025d86 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8025e76:	e9cd 1004 	strd	r1, r0, [sp, #16]
 8025e7a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8025e7e:	e9cd 4600 	strd	r4, r6, [sp]
 8025e82:	462b      	mov	r3, r5
 8025e84:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8025e86:	9907      	ldr	r1, [sp, #28]
 8025e88:	9815      	ldr	r0, [sp, #84]	; 0x54
 8025e8a:	f7ff fc85 	bl	8025798 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8025e8e:	e77a      	b.n	8025d86 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8025e90:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025e92:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8025e94:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025e98:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025e9a:	1409      	asrs	r1, r1, #16
 8025e9c:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8025ea0:	141b      	asrs	r3, r3, #16
 8025ea2:	fb04 1303 	mla	r3, r4, r3, r1
 8025ea6:	9911      	ldr	r1, [sp, #68]	; 0x44
 8025ea8:	18ce      	adds	r6, r1, r3
 8025eaa:	5ccb      	ldrb	r3, [r1, r3]
 8025eac:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8025eb0:	0e1f      	lsrs	r7, r3, #24
 8025eb2:	2a00      	cmp	r2, #0
 8025eb4:	f000 8114 	beq.w	80260e0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b0>
 8025eb8:	7871      	ldrb	r1, [r6, #1]
 8025eba:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8025ebe:	910e      	str	r1, [sp, #56]	; 0x38
 8025ec0:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8025ec4:	2800      	cmp	r0, #0
 8025ec6:	f000 8115 	beq.w	80260f4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c4>
 8025eca:	1931      	adds	r1, r6, r4
 8025ecc:	5d36      	ldrb	r6, [r6, r4]
 8025ece:	7849      	ldrb	r1, [r1, #1]
 8025ed0:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8025ed4:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8025ed8:	960a      	str	r6, [sp, #40]	; 0x28
 8025eda:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8025ede:	0e0e      	lsrs	r6, r1, #24
 8025ee0:	910f      	str	r1, [sp, #60]	; 0x3c
 8025ee2:	b292      	uxth	r2, r2
 8025ee4:	b280      	uxth	r0, r0
 8025ee6:	fb02 fb00 	mul.w	fp, r2, r0
 8025eea:	0112      	lsls	r2, r2, #4
 8025eec:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 8025ef0:	eba2 090b 	sub.w	r9, r2, fp
 8025ef4:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8025ef8:	b280      	uxth	r0, r0
 8025efa:	fa1f f989 	uxth.w	r9, r9
 8025efe:	1a09      	subs	r1, r1, r0
 8025f00:	fb09 f20e 	mul.w	r2, r9, lr
 8025f04:	b289      	uxth	r1, r1
 8025f06:	fb01 2207 	mla	r2, r1, r7, r2
 8025f0a:	fb00 220a 	mla	r2, r0, sl, r2
 8025f0e:	fb0b 2206 	mla	r2, fp, r6, r2
 8025f12:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8025f16:	9213      	str	r2, [sp, #76]	; 0x4c
 8025f18:	2a00      	cmp	r2, #0
 8025f1a:	f000 80d4 	beq.w	80260c6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x696>
 8025f1e:	2fff      	cmp	r7, #255	; 0xff
 8025f20:	d01a      	beq.n	8025f58 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x528>
 8025f22:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8025f26:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025f2a:	fb07 fc0c 	mul.w	ip, r7, ip
 8025f2e:	435f      	muls	r7, r3
 8025f30:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8025f34:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8025f38:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025f3c:	4463      	add	r3, ip
 8025f3e:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 8025f42:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8025f46:	0a1b      	lsrs	r3, r3, #8
 8025f48:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025f4c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025f50:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025f54:	ea43 030c 	orr.w	r3, r3, ip
 8025f58:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8025f5c:	d01f      	beq.n	8025f9e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56e>
 8025f5e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8025f60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025f62:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025f66:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8025f6a:	fb0e f707 	mul.w	r7, lr, r7
 8025f6e:	fb0e fe0c 	mul.w	lr, lr, ip
 8025f72:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025f76:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025f7a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025f7e:	44bc      	add	ip, r7
 8025f80:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8025f84:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8025f88:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025f8c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025f90:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025f94:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8025f98:	ea4c 020e 	orr.w	r2, ip, lr
 8025f9c:	920e      	str	r2, [sp, #56]	; 0x38
 8025f9e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8025fa2:	d01e      	beq.n	8025fe2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b2>
 8025fa4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025fa6:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8025faa:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8025fae:	fb0a fe0e 	mul.w	lr, sl, lr
 8025fb2:	fb0a fa07 	mul.w	sl, sl, r7
 8025fb6:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8025fba:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8025fbe:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025fc2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025fc6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025fca:	44f4      	add	ip, lr
 8025fcc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025fd0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025fd4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025fd8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025fdc:	ea4c 020a 	orr.w	r2, ip, sl
 8025fe0:	920a      	str	r2, [sp, #40]	; 0x28
 8025fe2:	2eff      	cmp	r6, #255	; 0xff
 8025fe4:	d01c      	beq.n	8026020 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f0>
 8025fe6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8025fe8:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8025fec:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8025ff0:	fb06 fe0e 	mul.w	lr, r6, lr
 8025ff4:	437e      	muls	r6, r7
 8025ff6:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8025ffa:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8025ffe:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8026002:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026006:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 802600a:	44f4      	add	ip, lr
 802600c:	0a36      	lsrs	r6, r6, #8
 802600e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026012:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026016:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802601a:	ea4c 0206 	orr.w	r2, ip, r6
 802601e:	920f      	str	r2, [sp, #60]	; 0x3c
 8026020:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8026022:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8026026:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802602a:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 802602e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026030:	fb09 f606 	mul.w	r6, r9, r6
 8026034:	fb01 6607 	mla	r6, r1, r7, r6
 8026038:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 802603c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802603e:	fb00 6607 	mla	r6, r0, r7, r6
 8026042:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 8026046:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8026048:	fb0b 6607 	mla	r6, fp, r7, r6
 802604c:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8026050:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026052:	fb09 f907 	mul.w	r9, r9, r7
 8026056:	0a36      	lsrs	r6, r6, #8
 8026058:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 802605c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802605e:	fb01 9303 	mla	r3, r1, r3, r9
 8026062:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8026066:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 802606a:	fb00 330c 	mla	r3, r0, ip, r3
 802606e:	fb0b 3e0e 	mla	lr, fp, lr, r3
 8026072:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8026074:	43da      	mvns	r2, r3
 8026076:	f818 3c03 	ldrb.w	r3, [r8, #-3]
 802607a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802607e:	b2d2      	uxtb	r2, r2
 8026080:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8026084:	fb03 f102 	mul.w	r1, r3, r2
 8026088:	ea46 060e 	orr.w	r6, r6, lr
 802608c:	1c4b      	adds	r3, r1, #1
 802608e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8026092:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8026096:	f808 3c03 	strb.w	r3, [r8, #-3]
 802609a:	f818 3c02 	ldrb.w	r3, [r8, #-2]
 802609e:	4353      	muls	r3, r2
 80260a0:	1c59      	adds	r1, r3, #1
 80260a2:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80260a6:	0a33      	lsrs	r3, r6, #8
 80260a8:	0c36      	lsrs	r6, r6, #16
 80260aa:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80260ae:	f808 3c02 	strb.w	r3, [r8, #-2]
 80260b2:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80260b6:	435a      	muls	r2, r3
 80260b8:	1c53      	adds	r3, r2, #1
 80260ba:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80260be:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 80260c2:	f808 6c01 	strb.w	r6, [r8, #-1]
 80260c6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80260c8:	f108 0803 	add.w	r8, r8, #3
 80260cc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80260ce:	4413      	add	r3, r2
 80260d0:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80260d2:	9329      	str	r3, [sp, #164]	; 0xa4
 80260d4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80260d6:	4413      	add	r3, r2
 80260d8:	932a      	str	r3, [sp, #168]	; 0xa8
 80260da:	9b07      	ldr	r3, [sp, #28]
 80260dc:	3b01      	subs	r3, #1
 80260de:	e508      	b.n	8025af2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc2>
 80260e0:	b158      	cbz	r0, 80260fa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ca>
 80260e2:	5d31      	ldrb	r1, [r6, r4]
 80260e4:	26ff      	movs	r6, #255	; 0xff
 80260e6:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 80260ea:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 80260ee:	910a      	str	r1, [sp, #40]	; 0x28
 80260f0:	46b6      	mov	lr, r6
 80260f2:	e6f6      	b.n	8025ee2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 80260f4:	26ff      	movs	r6, #255	; 0xff
 80260f6:	46b2      	mov	sl, r6
 80260f8:	e6f3      	b.n	8025ee2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 80260fa:	26ff      	movs	r6, #255	; 0xff
 80260fc:	46b2      	mov	sl, r6
 80260fe:	e7f7      	b.n	80260f0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c0>
 8026100:	b017      	add	sp, #92	; 0x5c
 8026102:	ecbd 8b08 	vpop	{d8-d11}
 8026106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0802610c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 802610c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026110:	b08d      	sub	sp, #52	; 0x34
 8026112:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 8026116:	9103      	str	r1, [sp, #12]
 8026118:	fb07 5803 	mla	r8, r7, r3, r5
 802611c:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 8026120:	9803      	ldr	r0, [sp, #12]
 8026122:	2f00      	cmp	r7, #0
 8026124:	910b      	str	r1, [sp, #44]	; 0x2c
 8026126:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 802612a:	9903      	ldr	r1, [sp, #12]
 802612c:	9c03      	ldr	r4, [sp, #12]
 802612e:	eb02 0608 	add.w	r6, r2, r8
 8026132:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8026136:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 802613a:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 802613e:	7809      	ldrb	r1, [r1, #0]
 8026140:	7840      	ldrb	r0, [r0, #1]
 8026142:	78a4      	ldrb	r4, [r4, #2]
 8026144:	db51      	blt.n	80261ea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8026146:	45be      	cmp	lr, r7
 8026148:	dd4f      	ble.n	80261ea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 802614a:	2d00      	cmp	r5, #0
 802614c:	db49      	blt.n	80261e2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 802614e:	42ab      	cmp	r3, r5
 8026150:	dd47      	ble.n	80261e2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8026152:	f812 2008 	ldrb.w	r2, [r2, r8]
 8026156:	9204      	str	r2, [sp, #16]
 8026158:	7872      	ldrb	r2, [r6, #1]
 802615a:	9205      	str	r2, [sp, #20]
 802615c:	78b2      	ldrb	r2, [r6, #2]
 802615e:	9206      	str	r2, [sp, #24]
 8026160:	1c6a      	adds	r2, r5, #1
 8026162:	d449      	bmi.n	80261f8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8026164:	4293      	cmp	r3, r2
 8026166:	dd47      	ble.n	80261f8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8026168:	f1bc 0f00 	cmp.w	ip, #0
 802616c:	d044      	beq.n	80261f8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 802616e:	7972      	ldrb	r2, [r6, #5]
 8026170:	f896 b003 	ldrb.w	fp, [r6, #3]
 8026174:	f896 a004 	ldrb.w	sl, [r6, #4]
 8026178:	9201      	str	r2, [sp, #4]
 802617a:	3701      	adds	r7, #1
 802617c:	d444      	bmi.n	8026208 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 802617e:	45be      	cmp	lr, r7
 8026180:	dd42      	ble.n	8026208 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8026182:	f1b9 0f00 	cmp.w	r9, #0
 8026186:	f000 80c1 	beq.w	802630c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 802618a:	2d00      	cmp	r5, #0
 802618c:	db38      	blt.n	8026200 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 802618e:	42ab      	cmp	r3, r5
 8026190:	dd36      	ble.n	8026200 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8026192:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8026196:	f816 8002 	ldrb.w	r8, [r6, r2]
 802619a:	2203      	movs	r2, #3
 802619c:	fb03 6702 	mla	r7, r3, r2, r6
 80261a0:	fb03 6202 	mla	r2, r3, r2, r6
 80261a4:	787f      	ldrb	r7, [r7, #1]
 80261a6:	f892 e002 	ldrb.w	lr, [r2, #2]
 80261aa:	9702      	str	r7, [sp, #8]
 80261ac:	3501      	adds	r5, #1
 80261ae:	d432      	bmi.n	8026216 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 80261b0:	42ab      	cmp	r3, r5
 80261b2:	dd30      	ble.n	8026216 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 80261b4:	f1bc 0f00 	cmp.w	ip, #0
 80261b8:	d031      	beq.n	802621e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 80261ba:	2703      	movs	r7, #3
 80261bc:	fb13 7207 	smlabb	r2, r3, r7, r7
 80261c0:	5cb5      	ldrb	r5, [r6, r2]
 80261c2:	fb03 6207 	mla	r2, r3, r7, r6
 80261c6:	fb03 6307 	mla	r3, r3, r7, r6
 80261ca:	7912      	ldrb	r2, [r2, #4]
 80261cc:	795e      	ldrb	r6, [r3, #5]
 80261ce:	f1bc 0f0f 	cmp.w	ip, #15
 80261d2:	d927      	bls.n	8026224 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 80261d4:	4b53      	ldr	r3, [pc, #332]	; (8026324 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 80261d6:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80261da:	4a53      	ldr	r2, [pc, #332]	; (8026328 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 80261dc:	4853      	ldr	r0, [pc, #332]	; (802632c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 80261de:	f004 facf 	bl	802a780 <__assert_func>
 80261e2:	e9cd 0405 	strd	r0, r4, [sp, #20]
 80261e6:	9104      	str	r1, [sp, #16]
 80261e8:	e7ba      	b.n	8026160 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 80261ea:	9401      	str	r4, [sp, #4]
 80261ec:	4682      	mov	sl, r0
 80261ee:	468b      	mov	fp, r1
 80261f0:	9104      	str	r1, [sp, #16]
 80261f2:	e9cd 0405 	strd	r0, r4, [sp, #20]
 80261f6:	e7c0      	b.n	802617a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 80261f8:	9401      	str	r4, [sp, #4]
 80261fa:	4682      	mov	sl, r0
 80261fc:	468b      	mov	fp, r1
 80261fe:	e7bc      	b.n	802617a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 8026200:	46a6      	mov	lr, r4
 8026202:	9002      	str	r0, [sp, #8]
 8026204:	4688      	mov	r8, r1
 8026206:	e7d1      	b.n	80261ac <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 8026208:	4626      	mov	r6, r4
 802620a:	4602      	mov	r2, r0
 802620c:	460d      	mov	r5, r1
 802620e:	46a6      	mov	lr, r4
 8026210:	9002      	str	r0, [sp, #8]
 8026212:	4688      	mov	r8, r1
 8026214:	e7db      	b.n	80261ce <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 8026216:	4626      	mov	r6, r4
 8026218:	4602      	mov	r2, r0
 802621a:	460d      	mov	r5, r1
 802621c:	e7d7      	b.n	80261ce <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 802621e:	4626      	mov	r6, r4
 8026220:	4602      	mov	r2, r0
 8026222:	460d      	mov	r5, r1
 8026224:	f1b9 0f0f 	cmp.w	r9, #15
 8026228:	d8d4      	bhi.n	80261d4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 802622a:	fa1f f38c 	uxth.w	r3, ip
 802622e:	fa1f fc89 	uxth.w	ip, r9
 8026232:	fb03 f70c 	mul.w	r7, r3, ip
 8026236:	011b      	lsls	r3, r3, #4
 8026238:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 802623c:	9707      	str	r7, [sp, #28]
 802623e:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8026242:	fa1f fc8c 	uxth.w	ip, ip
 8026246:	eba7 070c 	sub.w	r7, r7, ip
 802624a:	b2bf      	uxth	r7, r7
 802624c:	9709      	str	r7, [sp, #36]	; 0x24
 802624e:	9f07      	ldr	r7, [sp, #28]
 8026250:	1bdb      	subs	r3, r3, r7
 8026252:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 8026256:	b29b      	uxth	r3, r3
 8026258:	9708      	str	r7, [sp, #32]
 802625a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 802625c:	930a      	str	r3, [sp, #40]	; 0x28
 802625e:	ea6f 0907 	mvn.w	r9, r7
 8026262:	fb03 fb0b 	mul.w	fp, r3, fp
 8026266:	9f04      	ldr	r7, [sp, #16]
 8026268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802626a:	fa5f f989 	uxtb.w	r9, r9
 802626e:	fb03 bb07 	mla	fp, r3, r7, fp
 8026272:	9f07      	ldr	r7, [sp, #28]
 8026274:	fb11 f109 	smulbb	r1, r1, r9
 8026278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802627a:	fb0c b808 	mla	r8, ip, r8, fp
 802627e:	fb10 f009 	smulbb	r0, r0, r9
 8026282:	fb14 f409 	smulbb	r4, r4, r9
 8026286:	fb07 8805 	mla	r8, r7, r5, r8
 802628a:	9d08      	ldr	r5, [sp, #32]
 802628c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802628e:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8026292:	fb08 1805 	mla	r8, r8, r5, r1
 8026296:	9d05      	ldr	r5, [sp, #20]
 8026298:	fa1f f888 	uxth.w	r8, r8
 802629c:	f108 0101 	add.w	r1, r8, #1
 80262a0:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 80262a4:	9903      	ldr	r1, [sp, #12]
 80262a6:	ea4f 2828 	mov.w	r8, r8, asr #8
 80262aa:	f881 8000 	strb.w	r8, [r1]
 80262ae:	fb03 f10a 	mul.w	r1, r3, sl
 80262b2:	fb07 1105 	mla	r1, r7, r5, r1
 80262b6:	9d02      	ldr	r5, [sp, #8]
 80262b8:	fb0c 1105 	mla	r1, ip, r5, r1
 80262bc:	9d07      	ldr	r5, [sp, #28]
 80262be:	fb05 1102 	mla	r1, r5, r2, r1
 80262c2:	9a08      	ldr	r2, [sp, #32]
 80262c4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80262c8:	fb01 0102 	mla	r1, r1, r2, r0
 80262cc:	9a03      	ldr	r2, [sp, #12]
 80262ce:	b289      	uxth	r1, r1
 80262d0:	1c48      	adds	r0, r1, #1
 80262d2:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80262d6:	1209      	asrs	r1, r1, #8
 80262d8:	7051      	strb	r1, [r2, #1]
 80262da:	9a01      	ldr	r2, [sp, #4]
 80262dc:	4353      	muls	r3, r2
 80262de:	9a06      	ldr	r2, [sp, #24]
 80262e0:	fb07 3702 	mla	r7, r7, r2, r3
 80262e4:	9b08      	ldr	r3, [sp, #32]
 80262e6:	fb0c 7c0e 	mla	ip, ip, lr, r7
 80262ea:	fb05 c606 	mla	r6, r5, r6, ip
 80262ee:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80262f2:	fb06 4603 	mla	r6, r6, r3, r4
 80262f6:	9b03      	ldr	r3, [sp, #12]
 80262f8:	b2b6      	uxth	r6, r6
 80262fa:	f106 0e01 	add.w	lr, r6, #1
 80262fe:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8026302:	1236      	asrs	r6, r6, #8
 8026304:	709e      	strb	r6, [r3, #2]
 8026306:	b00d      	add	sp, #52	; 0x34
 8026308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802630c:	f1bc 0f0f 	cmp.w	ip, #15
 8026310:	f63f af60 	bhi.w	80261d4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8026314:	4626      	mov	r6, r4
 8026316:	4602      	mov	r2, r0
 8026318:	460d      	mov	r5, r1
 802631a:	46a6      	mov	lr, r4
 802631c:	9002      	str	r0, [sp, #8]
 802631e:	4688      	mov	r8, r1
 8026320:	e783      	b.n	802622a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 8026322:	bf00      	nop
 8026324:	0802fd97 	.word	0x0802fd97
 8026328:	0803028e 	.word	0x0803028e
 802632c:	0802fe60 	.word	0x0802fe60

08026330 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8026330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026334:	ed2d 8b08 	vpush	{d8-d11}
 8026338:	b0a1      	sub	sp, #132	; 0x84
 802633a:	eeb0 aa40 	vmov.f32	s20, s0
 802633e:	eef0 9a60 	vmov.f32	s19, s1
 8026342:	9307      	str	r3, [sp, #28]
 8026344:	eeb0 9a41 	vmov.f32	s18, s2
 8026348:	f9bd 30e8 	ldrsh.w	r3, [sp, #232]	; 0xe8
 802634c:	eeb0 8a62 	vmov.f32	s16, s5
 8026350:	9210      	str	r2, [sp, #64]	; 0x40
 8026352:	eef0 8a43 	vmov.f32	s17, s6
 8026356:	9308      	str	r3, [sp, #32]
 8026358:	eef0 ba44 	vmov.f32	s23, s8
 802635c:	f9bd 30ec 	ldrsh.w	r3, [sp, #236]	; 0xec
 8026360:	eeb0 ba64 	vmov.f32	s22, s9
 8026364:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 8026366:	eef0 aa45 	vmov.f32	s21, s10
 802636a:	930a      	str	r3, [sp, #40]	; 0x28
 802636c:	f89d 30f4 	ldrb.w	r3, [sp, #244]	; 0xf4
 8026370:	901f      	str	r0, [sp, #124]	; 0x7c
 8026372:	930f      	str	r3, [sp, #60]	; 0x3c
 8026374:	6850      	ldr	r0, [r2, #4]
 8026376:	910e      	str	r1, [sp, #56]	; 0x38
 8026378:	6812      	ldr	r2, [r2, #0]
 802637a:	e9dd 1338 	ldrd	r1, r3, [sp, #224]	; 0xe0
 802637e:	e9dd 8b33 	ldrd	r8, fp, [sp, #204]	; 0xcc
 8026382:	fb00 1303 	mla	r3, r0, r3, r1
 8026386:	9908      	ldr	r1, [sp, #32]
 8026388:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802638c:	18d3      	adds	r3, r2, r3
 802638e:	2203      	movs	r2, #3
 8026390:	9309      	str	r3, [sp, #36]	; 0x24
 8026392:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8026394:	681b      	ldr	r3, [r3, #0]
 8026396:	930c      	str	r3, [sp, #48]	; 0x30
 8026398:	f06f 0304 	mvn.w	r3, #4
 802639c:	fb11 3302 	smlabb	r3, r1, r2, r3
 80263a0:	930d      	str	r3, [sp, #52]	; 0x34
 80263a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80263a4:	43db      	mvns	r3, r3
 80263a6:	b2db      	uxtb	r3, r3
 80263a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80263aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80263ac:	2b00      	cmp	r3, #0
 80263ae:	dc03      	bgt.n	80263b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 80263b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80263b2:	2b00      	cmp	r3, #0
 80263b4:	f340 81df 	ble.w	8026776 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 80263b8:	9b07      	ldr	r3, [sp, #28]
 80263ba:	2b00      	cmp	r3, #0
 80263bc:	f340 80f2 	ble.w	80265a4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 80263c0:	ea5f 4228 	movs.w	r2, r8, asr #16
 80263c4:	ea4f 432b 	mov.w	r3, fp, asr #16
 80263c8:	d430      	bmi.n	802642c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80263ca:	1c51      	adds	r1, r2, #1
 80263cc:	9808      	ldr	r0, [sp, #32]
 80263ce:	4281      	cmp	r1, r0
 80263d0:	da2f      	bge.n	8026432 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 80263d2:	2b00      	cmp	r3, #0
 80263d4:	db2d      	blt.n	8026432 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 80263d6:	1c59      	adds	r1, r3, #1
 80263d8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80263da:	4288      	cmp	r0, r1
 80263dc:	dd29      	ble.n	8026432 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 80263de:	9b07      	ldr	r3, [sp, #28]
 80263e0:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80263e2:	3b01      	subs	r3, #1
 80263e4:	fb02 8203 	mla	r2, r2, r3, r8
 80263e8:	1412      	asrs	r2, r2, #16
 80263ea:	d42d      	bmi.n	8026448 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 80263ec:	3201      	adds	r2, #1
 80263ee:	9908      	ldr	r1, [sp, #32]
 80263f0:	4291      	cmp	r1, r2
 80263f2:	dd29      	ble.n	8026448 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 80263f4:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 80263f6:	fb02 b303 	mla	r3, r2, r3, fp
 80263fa:	141b      	asrs	r3, r3, #16
 80263fc:	d424      	bmi.n	8026448 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 80263fe:	3301      	adds	r3, #1
 8026400:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026402:	429a      	cmp	r2, r3
 8026404:	dd20      	ble.n	8026448 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8026406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026408:	f8dd c01c 	ldr.w	ip, [sp, #28]
 802640c:	1cde      	adds	r6, r3, #3
 802640e:	f8bd e03c 	ldrh.w	lr, [sp, #60]	; 0x3c
 8026412:	f1bc 0f00 	cmp.w	ip, #0
 8026416:	f300 811f 	bgt.w	8026658 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x328>
 802641a:	9b07      	ldr	r3, [sp, #28]
 802641c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026422:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8026426:	4423      	add	r3, r4
 8026428:	9309      	str	r3, [sp, #36]	; 0x24
 802642a:	e0bd      	b.n	80265a8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 802642c:	1c57      	adds	r7, r2, #1
 802642e:	f040 80ae 	bne.w	802658e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8026432:	9908      	ldr	r1, [sp, #32]
 8026434:	428a      	cmp	r2, r1
 8026436:	f280 80aa 	bge.w	802658e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 802643a:	1c5e      	adds	r6, r3, #1
 802643c:	f2c0 80a7 	blt.w	802658e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8026440:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026442:	4293      	cmp	r3, r2
 8026444:	f280 80a3 	bge.w	802658e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8026448:	f8dd a01c 	ldr.w	sl, [sp, #28]
 802644c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 802644e:	f1ba 0f00 	cmp.w	sl, #0
 8026452:	dde2      	ble.n	802641a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 8026454:	ea5f 4028 	movs.w	r0, r8, asr #16
 8026458:	f3c8 3303 	ubfx	r3, r8, #12, #4
 802645c:	ea4f 412b 	mov.w	r1, fp, asr #16
 8026460:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8026464:	f100 80df 	bmi.w	8026626 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 8026468:	1c45      	adds	r5, r0, #1
 802646a:	9f08      	ldr	r7, [sp, #32]
 802646c:	42af      	cmp	r7, r5
 802646e:	f340 80dc 	ble.w	802662a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 8026472:	2900      	cmp	r1, #0
 8026474:	f2c0 80d9 	blt.w	802662a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 8026478:	1c4d      	adds	r5, r1, #1
 802647a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802647c:	42af      	cmp	r7, r5
 802647e:	f340 80d4 	ble.w	802662a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 8026482:	9d08      	ldr	r5, [sp, #32]
 8026484:	fb05 0101 	mla	r1, r5, r1, r0
 8026488:	980c      	ldr	r0, [sp, #48]	; 0x30
 802648a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802648e:	1845      	adds	r5, r0, r1
 8026490:	5c40      	ldrb	r0, [r0, r1]
 8026492:	792f      	ldrb	r7, [r5, #4]
 8026494:	7869      	ldrb	r1, [r5, #1]
 8026496:	9711      	str	r7, [sp, #68]	; 0x44
 8026498:	796f      	ldrb	r7, [r5, #5]
 802649a:	f895 e002 	ldrb.w	lr, [r5, #2]
 802649e:	f895 9003 	ldrb.w	r9, [r5, #3]
 80264a2:	9712      	str	r7, [sp, #72]	; 0x48
 80264a4:	b17a      	cbz	r2, 80264c6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x196>
 80264a6:	3505      	adds	r5, #5
 80264a8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80264aa:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80264ac:	19ef      	adds	r7, r5, r7
 80264ae:	5d2d      	ldrb	r5, [r5, r4]
 80264b0:	787c      	ldrb	r4, [r7, #1]
 80264b2:	9513      	str	r5, [sp, #76]	; 0x4c
 80264b4:	9415      	str	r4, [sp, #84]	; 0x54
 80264b6:	78bc      	ldrb	r4, [r7, #2]
 80264b8:	9417      	str	r4, [sp, #92]	; 0x5c
 80264ba:	78fc      	ldrb	r4, [r7, #3]
 80264bc:	9414      	str	r4, [sp, #80]	; 0x50
 80264be:	793c      	ldrb	r4, [r7, #4]
 80264c0:	9416      	str	r4, [sp, #88]	; 0x58
 80264c2:	797c      	ldrb	r4, [r7, #5]
 80264c4:	9418      	str	r4, [sp, #96]	; 0x60
 80264c6:	b29b      	uxth	r3, r3
 80264c8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80264ca:	b292      	uxth	r2, r2
 80264cc:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80264d0:	fb03 f702 	mul.w	r7, r3, r2
 80264d4:	011b      	lsls	r3, r3, #4
 80264d6:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 80264da:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 80264de:	1bdb      	subs	r3, r3, r7
 80264e0:	b292      	uxth	r2, r2
 80264e2:	b29b      	uxth	r3, r3
 80264e4:	ebac 0c02 	sub.w	ip, ip, r2
 80264e8:	fb03 f909 	mul.w	r9, r3, r9
 80264ec:	fa1f fc8c 	uxth.w	ip, ip
 80264f0:	fb0c 9000 	mla	r0, ip, r0, r9
 80264f4:	f896 9000 	ldrb.w	r9, [r6]
 80264f8:	fb02 0004 	mla	r0, r2, r4, r0
 80264fc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80264fe:	fb07 0004 	mla	r0, r7, r4, r0
 8026502:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026504:	fb19 f904 	smulbb	r9, r9, r4
 8026508:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802650c:	fb00 9005 	mla	r0, r0, r5, r9
 8026510:	b280      	uxth	r0, r0
 8026512:	f100 0901 	add.w	r9, r0, #1
 8026516:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 802651a:	9811      	ldr	r0, [sp, #68]	; 0x44
 802651c:	4358      	muls	r0, r3
 802651e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8026522:	fb0c 0101 	mla	r1, ip, r1, r0
 8026526:	9815      	ldr	r0, [sp, #84]	; 0x54
 8026528:	f886 9000 	strb.w	r9, [r6]
 802652c:	fb02 1100 	mla	r1, r2, r0, r1
 8026530:	9816      	ldr	r0, [sp, #88]	; 0x58
 8026532:	fb07 1100 	mla	r1, r7, r0, r1
 8026536:	7870      	ldrb	r0, [r6, #1]
 8026538:	fb10 f004 	smulbb	r0, r0, r4
 802653c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8026540:	fb01 0105 	mla	r1, r1, r5, r0
 8026544:	b289      	uxth	r1, r1
 8026546:	1c48      	adds	r0, r1, #1
 8026548:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802654c:	1209      	asrs	r1, r1, #8
 802654e:	7071      	strb	r1, [r6, #1]
 8026550:	9912      	ldr	r1, [sp, #72]	; 0x48
 8026552:	434b      	muls	r3, r1
 8026554:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8026556:	fb0c 330e 	mla	r3, ip, lr, r3
 802655a:	fb02 3201 	mla	r2, r2, r1, r3
 802655e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8026560:	fb07 2703 	mla	r7, r7, r3, r2
 8026564:	78b2      	ldrb	r2, [r6, #2]
 8026566:	fb12 f204 	smulbb	r2, r2, r4
 802656a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 802656e:	fb07 2505 	mla	r5, r7, r5, r2
 8026572:	b2ad      	uxth	r5, r5
 8026574:	1c6f      	adds	r7, r5, #1
 8026576:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 802657a:	122d      	asrs	r5, r5, #8
 802657c:	70b5      	strb	r5, [r6, #2]
 802657e:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8026580:	3603      	adds	r6, #3
 8026582:	f10a 3aff 	add.w	sl, sl, #4294967295
 8026586:	4498      	add	r8, r3
 8026588:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 802658a:	449b      	add	fp, r3
 802658c:	e75f      	b.n	802644e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 802658e:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8026590:	4498      	add	r8, r3
 8026592:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8026594:	449b      	add	fp, r3
 8026596:	9b07      	ldr	r3, [sp, #28]
 8026598:	3b01      	subs	r3, #1
 802659a:	9307      	str	r3, [sp, #28]
 802659c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802659e:	3303      	adds	r3, #3
 80265a0:	9309      	str	r3, [sp, #36]	; 0x24
 80265a2:	e709      	b.n	80263b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 80265a4:	f47f af1b 	bne.w	80263de <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xae>
 80265a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80265aa:	2b00      	cmp	r3, #0
 80265ac:	f340 80e3 	ble.w	8026776 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 80265b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80265b4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80265b6:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80265ba:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80265be:	eef0 6a48 	vmov.f32	s13, s16
 80265c2:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80265c6:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80265ca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80265ce:	ee16 8a90 	vmov	r8, s13
 80265d2:	eef0 6a68 	vmov.f32	s13, s17
 80265d6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80265da:	ee16 ba90 	vmov	fp, s13
 80265de:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80265e2:	ee69 7a27 	vmul.f32	s15, s18, s15
 80265e6:	ee37 8a48 	vsub.f32	s16, s14, s16
 80265ea:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80265ee:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80265f2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80265f6:	ee18 2a10 	vmov	r2, s16
 80265fa:	eeb0 8a47 	vmov.f32	s16, s14
 80265fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8026602:	ee18 2a90 	vmov	r2, s17
 8026606:	9335      	str	r3, [sp, #212]	; 0xd4
 8026608:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802660a:	eef0 8a67 	vmov.f32	s17, s15
 802660e:	fb92 f3f3 	sdiv	r3, r2, r3
 8026612:	9336      	str	r3, [sp, #216]	; 0xd8
 8026614:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8026616:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8026618:	3b01      	subs	r3, #1
 802661a:	930e      	str	r3, [sp, #56]	; 0x38
 802661c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802661e:	bf08      	it	eq
 8026620:	4613      	moveq	r3, r2
 8026622:	9307      	str	r3, [sp, #28]
 8026624:	e6c1      	b.n	80263aa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8026626:	1c45      	adds	r5, r0, #1
 8026628:	d1a9      	bne.n	802657e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 802662a:	9c08      	ldr	r4, [sp, #32]
 802662c:	42a0      	cmp	r0, r4
 802662e:	daa6      	bge.n	802657e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8026630:	1c4c      	adds	r4, r1, #1
 8026632:	dba4      	blt.n	802657e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8026634:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8026636:	428c      	cmp	r4, r1
 8026638:	dda1      	ble.n	802657e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 802663a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802663c:	9001      	str	r0, [sp, #4]
 802663e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8026640:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8026644:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026646:	4631      	mov	r1, r6
 8026648:	e9cd 2404 	strd	r2, r4, [sp, #16]
 802664c:	9300      	str	r3, [sp, #0]
 802664e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026650:	9b08      	ldr	r3, [sp, #32]
 8026652:	f7ff fd5b 	bl	802610c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8026656:	e792      	b.n	802657e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8026658:	ea4f 4228 	mov.w	r2, r8, asr #16
 802665c:	9c08      	ldr	r4, [sp, #32]
 802665e:	ea4f 402b 	mov.w	r0, fp, asr #16
 8026662:	f3cb 3103 	ubfx	r1, fp, #12, #4
 8026666:	f3c8 3303 	ubfx	r3, r8, #12, #4
 802666a:	fb04 2000 	mla	r0, r4, r0, r2
 802666e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026670:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8026672:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8026676:	4402      	add	r2, r0
 8026678:	5c25      	ldrb	r5, [r4, r0]
 802667a:	7894      	ldrb	r4, [r2, #2]
 802667c:	7850      	ldrb	r0, [r2, #1]
 802667e:	9411      	str	r4, [sp, #68]	; 0x44
 8026680:	7954      	ldrb	r4, [r2, #5]
 8026682:	f892 a003 	ldrb.w	sl, [r2, #3]
 8026686:	f892 9004 	ldrb.w	r9, [r2, #4]
 802668a:	9412      	str	r4, [sp, #72]	; 0x48
 802668c:	b171      	cbz	r1, 80266ac <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802668e:	3205      	adds	r2, #5
 8026690:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026692:	1917      	adds	r7, r2, r4
 8026694:	5d12      	ldrb	r2, [r2, r4]
 8026696:	9219      	str	r2, [sp, #100]	; 0x64
 8026698:	787a      	ldrb	r2, [r7, #1]
 802669a:	921b      	str	r2, [sp, #108]	; 0x6c
 802669c:	78ba      	ldrb	r2, [r7, #2]
 802669e:	921d      	str	r2, [sp, #116]	; 0x74
 80266a0:	78fa      	ldrb	r2, [r7, #3]
 80266a2:	921a      	str	r2, [sp, #104]	; 0x68
 80266a4:	793a      	ldrb	r2, [r7, #4]
 80266a6:	921c      	str	r2, [sp, #112]	; 0x70
 80266a8:	797a      	ldrb	r2, [r7, #5]
 80266aa:	921e      	str	r2, [sp, #120]	; 0x78
 80266ac:	b29b      	uxth	r3, r3
 80266ae:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80266b0:	b289      	uxth	r1, r1
 80266b2:	3603      	adds	r6, #3
 80266b4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80266b8:	fb03 f201 	mul.w	r2, r3, r1
 80266bc:	011b      	lsls	r3, r3, #4
 80266be:	ebc2 1101 	rsb	r1, r2, r1, lsl #4
 80266c2:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 80266c6:	1a9b      	subs	r3, r3, r2
 80266c8:	b289      	uxth	r1, r1
 80266ca:	b29b      	uxth	r3, r3
 80266cc:	1a7f      	subs	r7, r7, r1
 80266ce:	fb03 fa0a 	mul.w	sl, r3, sl
 80266d2:	b2bf      	uxth	r7, r7
 80266d4:	fb03 f909 	mul.w	r9, r3, r9
 80266d8:	fb07 a505 	mla	r5, r7, r5, sl
 80266dc:	f816 ac06 	ldrb.w	sl, [r6, #-6]
 80266e0:	fb07 9000 	mla	r0, r7, r0, r9
 80266e4:	fb01 5504 	mla	r5, r1, r4, r5
 80266e8:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80266ea:	fb02 5504 	mla	r5, r2, r4, r5
 80266ee:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80266f0:	fb1a fa04 	smulbb	sl, sl, r4
 80266f4:	f3c5 2507 	ubfx	r5, r5, #8, #8
 80266f8:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 80266fa:	fb05 a50e 	mla	r5, r5, lr, sl
 80266fe:	fb01 0004 	mla	r0, r1, r4, r0
 8026702:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8026704:	b2ad      	uxth	r5, r5
 8026706:	fb02 0004 	mla	r0, r2, r4, r0
 802670a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802670c:	f105 0a01 	add.w	sl, r5, #1
 8026710:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8026714:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8026718:	122d      	asrs	r5, r5, #8
 802671a:	f806 5c06 	strb.w	r5, [r6, #-6]
 802671e:	f816 5c05 	ldrb.w	r5, [r6, #-5]
 8026722:	fb15 f504 	smulbb	r5, r5, r4
 8026726:	fb00 500e 	mla	r0, r0, lr, r5
 802672a:	b280      	uxth	r0, r0
 802672c:	1c45      	adds	r5, r0, #1
 802672e:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8026732:	1200      	asrs	r0, r0, #8
 8026734:	f806 0c05 	strb.w	r0, [r6, #-5]
 8026738:	9812      	ldr	r0, [sp, #72]	; 0x48
 802673a:	4343      	muls	r3, r0
 802673c:	9811      	ldr	r0, [sp, #68]	; 0x44
 802673e:	fb07 3300 	mla	r3, r7, r0, r3
 8026742:	981d      	ldr	r0, [sp, #116]	; 0x74
 8026744:	fb01 3100 	mla	r1, r1, r0, r3
 8026748:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802674a:	fb02 1203 	mla	r2, r2, r3, r1
 802674e:	f816 1c04 	ldrb.w	r1, [r6, #-4]
 8026752:	fb11 f104 	smulbb	r1, r1, r4
 8026756:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802675a:	fb02 120e 	mla	r2, r2, lr, r1
 802675e:	b292      	uxth	r2, r2
 8026760:	1c53      	adds	r3, r2, #1
 8026762:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8026766:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8026768:	1212      	asrs	r2, r2, #8
 802676a:	4498      	add	r8, r3
 802676c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 802676e:	f806 2c04 	strb.w	r2, [r6, #-4]
 8026772:	449b      	add	fp, r3
 8026774:	e64d      	b.n	8026412 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 8026776:	b021      	add	sp, #132	; 0x84
 8026778:	ecbd 8b08 	vpop	{d8-d11}
 802677c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026780 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8026780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026784:	b085      	sub	sp, #20
 8026786:	784d      	ldrb	r5, [r1, #1]
 8026788:	788e      	ldrb	r6, [r1, #2]
 802678a:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 802678e:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 8026792:	9403      	str	r4, [sp, #12]
 8026794:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8026798:	780c      	ldrb	r4, [r1, #0]
 802679a:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 802679e:	fb07 ce03 	mla	lr, r7, r3, ip
 80267a2:	2f00      	cmp	r7, #0
 80267a4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80267a8:	eb02 0b0e 	add.w	fp, r2, lr
 80267ac:	db56      	blt.n	802685c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 80267ae:	45b9      	cmp	r9, r7
 80267b0:	dd54      	ble.n	802685c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 80267b2:	f1bc 0f00 	cmp.w	ip, #0
 80267b6:	db4d      	blt.n	8026854 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 80267b8:	4563      	cmp	r3, ip
 80267ba:	dd4b      	ble.n	8026854 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 80267bc:	f812 200e 	ldrb.w	r2, [r2, lr]
 80267c0:	9200      	str	r2, [sp, #0]
 80267c2:	f89b 2001 	ldrb.w	r2, [fp, #1]
 80267c6:	9201      	str	r2, [sp, #4]
 80267c8:	f89b 2002 	ldrb.w	r2, [fp, #2]
 80267cc:	9202      	str	r2, [sp, #8]
 80267ce:	f11c 0201 	adds.w	r2, ip, #1
 80267d2:	d44a      	bmi.n	802686a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 80267d4:	4293      	cmp	r3, r2
 80267d6:	dd48      	ble.n	802686a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 80267d8:	2800      	cmp	r0, #0
 80267da:	d046      	beq.n	802686a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 80267dc:	f89b e003 	ldrb.w	lr, [fp, #3]
 80267e0:	f89b 8004 	ldrb.w	r8, [fp, #4]
 80267e4:	f89b a005 	ldrb.w	sl, [fp, #5]
 80267e8:	3701      	adds	r7, #1
 80267ea:	d446      	bmi.n	802687a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 80267ec:	45b9      	cmp	r9, r7
 80267ee:	dd44      	ble.n	802687a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 80267f0:	9a03      	ldr	r2, [sp, #12]
 80267f2:	2a00      	cmp	r2, #0
 80267f4:	d045      	beq.n	8026882 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 80267f6:	f1bc 0f00 	cmp.w	ip, #0
 80267fa:	db3a      	blt.n	8026872 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 80267fc:	4563      	cmp	r3, ip
 80267fe:	dd38      	ble.n	8026872 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8026800:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8026804:	f04f 0903 	mov.w	r9, #3
 8026808:	f81b 7002 	ldrb.w	r7, [fp, r2]
 802680c:	fb03 b209 	mla	r2, r3, r9, fp
 8026810:	fb03 b909 	mla	r9, r3, r9, fp
 8026814:	7852      	ldrb	r2, [r2, #1]
 8026816:	f899 9002 	ldrb.w	r9, [r9, #2]
 802681a:	f11c 0c01 	adds.w	ip, ip, #1
 802681e:	d40d      	bmi.n	802683c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8026820:	4563      	cmp	r3, ip
 8026822:	dd0b      	ble.n	802683c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8026824:	b160      	cbz	r0, 8026840 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 8026826:	2603      	movs	r6, #3
 8026828:	fb13 6406 	smlabb	r4, r3, r6, r6
 802682c:	fb03 b506 	mla	r5, r3, r6, fp
 8026830:	fb03 b306 	mla	r3, r3, r6, fp
 8026834:	f81b 4004 	ldrb.w	r4, [fp, r4]
 8026838:	792d      	ldrb	r5, [r5, #4]
 802683a:	795e      	ldrb	r6, [r3, #5]
 802683c:	280f      	cmp	r0, #15
 802683e:	d802      	bhi.n	8026846 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8026840:	9b03      	ldr	r3, [sp, #12]
 8026842:	2b0f      	cmp	r3, #15
 8026844:	d922      	bls.n	802688c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 8026846:	4b2f      	ldr	r3, [pc, #188]	; (8026904 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 8026848:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 802684c:	4a2e      	ldr	r2, [pc, #184]	; (8026908 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 802684e:	482f      	ldr	r0, [pc, #188]	; (802690c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 8026850:	f003 ff96 	bl	802a780 <__assert_func>
 8026854:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8026858:	9400      	str	r4, [sp, #0]
 802685a:	e7b8      	b.n	80267ce <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 802685c:	46b2      	mov	sl, r6
 802685e:	46a8      	mov	r8, r5
 8026860:	46a6      	mov	lr, r4
 8026862:	9400      	str	r4, [sp, #0]
 8026864:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8026868:	e7be      	b.n	80267e8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 802686a:	46b2      	mov	sl, r6
 802686c:	46a8      	mov	r8, r5
 802686e:	46a6      	mov	lr, r4
 8026870:	e7ba      	b.n	80267e8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 8026872:	46b1      	mov	r9, r6
 8026874:	462a      	mov	r2, r5
 8026876:	4627      	mov	r7, r4
 8026878:	e7cf      	b.n	802681a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 802687a:	46b1      	mov	r9, r6
 802687c:	462a      	mov	r2, r5
 802687e:	4627      	mov	r7, r4
 8026880:	e7dc      	b.n	802683c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8026882:	280f      	cmp	r0, #15
 8026884:	d8df      	bhi.n	8026846 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8026886:	46b1      	mov	r9, r6
 8026888:	462a      	mov	r2, r5
 802688a:	4627      	mov	r7, r4
 802688c:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 8026890:	b280      	uxth	r0, r0
 8026892:	fb00 f30b 	mul.w	r3, r0, fp
 8026896:	0100      	lsls	r0, r0, #4
 8026898:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 802689c:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 80268a0:	1ac0      	subs	r0, r0, r3
 80268a2:	fa1f fb8b 	uxth.w	fp, fp
 80268a6:	b280      	uxth	r0, r0
 80268a8:	ebac 0c0b 	sub.w	ip, ip, fp
 80268ac:	9003      	str	r0, [sp, #12]
 80268ae:	fa1f fc8c 	uxth.w	ip, ip
 80268b2:	fb00 fe0e 	mul.w	lr, r0, lr
 80268b6:	9800      	ldr	r0, [sp, #0]
 80268b8:	fb0c ee00 	mla	lr, ip, r0, lr
 80268bc:	9803      	ldr	r0, [sp, #12]
 80268be:	fb00 f808 	mul.w	r8, r0, r8
 80268c2:	9801      	ldr	r0, [sp, #4]
 80268c4:	fb0b ee07 	mla	lr, fp, r7, lr
 80268c8:	fb0c 8800 	mla	r8, ip, r0, r8
 80268cc:	fb03 ee04 	mla	lr, r3, r4, lr
 80268d0:	fb0b 8202 	mla	r2, fp, r2, r8
 80268d4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80268d8:	fb03 2505 	mla	r5, r3, r5, r2
 80268dc:	9a03      	ldr	r2, [sp, #12]
 80268de:	f881 e000 	strb.w	lr, [r1]
 80268e2:	fb02 f00a 	mul.w	r0, r2, sl
 80268e6:	9a02      	ldr	r2, [sp, #8]
 80268e8:	122d      	asrs	r5, r5, #8
 80268ea:	fb0c 0c02 	mla	ip, ip, r2, r0
 80268ee:	704d      	strb	r5, [r1, #1]
 80268f0:	fb0b c909 	mla	r9, fp, r9, ip
 80268f4:	fb03 9606 	mla	r6, r3, r6, r9
 80268f8:	1236      	asrs	r6, r6, #8
 80268fa:	708e      	strb	r6, [r1, #2]
 80268fc:	b005      	add	sp, #20
 80268fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026902:	bf00      	nop
 8026904:	0802fd97 	.word	0x0802fd97
 8026908:	0803028e 	.word	0x0803028e
 802690c:	0802fe60 	.word	0x0802fe60

08026910 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8026910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026914:	ed2d 8b0a 	vpush	{d8-d12}
 8026918:	b09d      	sub	sp, #116	; 0x74
 802691a:	eeb0 aa40 	vmov.f32	s20, s0
 802691e:	eef0 9a60 	vmov.f32	s19, s1
 8026922:	9306      	str	r3, [sp, #24]
 8026924:	eeb0 9a41 	vmov.f32	s18, s2
 8026928:	f9bd 30e0 	ldrsh.w	r3, [sp, #224]	; 0xe0
 802692c:	eeb0 8a62 	vmov.f32	s16, s5
 8026930:	901b      	str	r0, [sp, #108]	; 0x6c
 8026932:	eef0 8a43 	vmov.f32	s17, s6
 8026936:	9307      	str	r3, [sp, #28]
 8026938:	eeb0 ca44 	vmov.f32	s24, s8
 802693c:	f9bd 30e4 	ldrsh.w	r3, [sp, #228]	; 0xe4
 8026940:	eef0 ba64 	vmov.f32	s23, s9
 8026944:	eeb0 ba45 	vmov.f32	s22, s10
 8026948:	9309      	str	r3, [sp, #36]	; 0x24
 802694a:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 802694e:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 8026952:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8026954:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8026958:	6850      	ldr	r0, [r2, #4]
 802695a:	6812      	ldr	r2, [r2, #0]
 802695c:	fb00 1303 	mla	r3, r0, r3, r1
 8026960:	9907      	ldr	r1, [sp, #28]
 8026962:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8026966:	18d3      	adds	r3, r2, r3
 8026968:	2203      	movs	r2, #3
 802696a:	9308      	str	r3, [sp, #32]
 802696c:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 802696e:	681b      	ldr	r3, [r3, #0]
 8026970:	930a      	str	r3, [sp, #40]	; 0x28
 8026972:	f06f 0304 	mvn.w	r3, #4
 8026976:	e9dd 6531 	ldrd	r6, r5, [sp, #196]	; 0xc4
 802697a:	fb11 3302 	smlabb	r3, r1, r2, r3
 802697e:	930b      	str	r3, [sp, #44]	; 0x2c
 8026980:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026982:	2b00      	cmp	r3, #0
 8026984:	dc03      	bgt.n	802698e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8026986:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026988:	2b00      	cmp	r3, #0
 802698a:	f340 8193 	ble.w	8026cb4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 802698e:	9b06      	ldr	r3, [sp, #24]
 8026990:	2b00      	cmp	r3, #0
 8026992:	f340 80d0 	ble.w	8026b36 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x226>
 8026996:	1432      	asrs	r2, r6, #16
 8026998:	ea4f 4325 	mov.w	r3, r5, asr #16
 802699c:	d42f      	bmi.n	80269fe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 802699e:	1c51      	adds	r1, r2, #1
 80269a0:	9807      	ldr	r0, [sp, #28]
 80269a2:	4281      	cmp	r1, r0
 80269a4:	da2e      	bge.n	8026a04 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80269a6:	2b00      	cmp	r3, #0
 80269a8:	db2c      	blt.n	8026a04 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80269aa:	1c59      	adds	r1, r3, #1
 80269ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80269ae:	4288      	cmp	r0, r1
 80269b0:	dd28      	ble.n	8026a04 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80269b2:	9b06      	ldr	r3, [sp, #24]
 80269b4:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 80269b6:	3b01      	subs	r3, #1
 80269b8:	fb02 6203 	mla	r2, r2, r3, r6
 80269bc:	1412      	asrs	r2, r2, #16
 80269be:	d42c      	bmi.n	8026a1a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 80269c0:	3201      	adds	r2, #1
 80269c2:	9907      	ldr	r1, [sp, #28]
 80269c4:	4291      	cmp	r1, r2
 80269c6:	dd28      	ble.n	8026a1a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 80269c8:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 80269ca:	fb02 5303 	mla	r3, r2, r3, r5
 80269ce:	141b      	asrs	r3, r3, #16
 80269d0:	d423      	bmi.n	8026a1a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 80269d2:	3301      	adds	r3, #1
 80269d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80269d6:	429a      	cmp	r2, r3
 80269d8:	dd1f      	ble.n	8026a1a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 80269da:	9b08      	ldr	r3, [sp, #32]
 80269dc:	f8dd e018 	ldr.w	lr, [sp, #24]
 80269e0:	f103 0c03 	add.w	ip, r3, #3
 80269e4:	f1be 0f00 	cmp.w	lr, #0
 80269e8:	f300 80fa 	bgt.w	8026be0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 80269ec:	9b06      	ldr	r3, [sp, #24]
 80269ee:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80269f2:	9b08      	ldr	r3, [sp, #32]
 80269f4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80269f8:	4423      	add	r3, r4
 80269fa:	9308      	str	r3, [sp, #32]
 80269fc:	e09d      	b.n	8026b3a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 80269fe:	1c51      	adds	r1, r2, #1
 8026a00:	f040 808e 	bne.w	8026b20 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8026a04:	9907      	ldr	r1, [sp, #28]
 8026a06:	428a      	cmp	r2, r1
 8026a08:	f280 808a 	bge.w	8026b20 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8026a0c:	1c5f      	adds	r7, r3, #1
 8026a0e:	f2c0 8087 	blt.w	8026b20 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8026a12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026a14:	4293      	cmp	r3, r2
 8026a16:	f280 8083 	bge.w	8026b20 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8026a1a:	9f06      	ldr	r7, [sp, #24]
 8026a1c:	f8dd a020 	ldr.w	sl, [sp, #32]
 8026a20:	2f00      	cmp	r7, #0
 8026a22:	dde3      	ble.n	80269ec <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 8026a24:	1432      	asrs	r2, r6, #16
 8026a26:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8026a2a:	ea4f 4325 	mov.w	r3, r5, asr #16
 8026a2e:	f3c5 3b03 	ubfx	fp, r5, #12, #4
 8026a32:	f100 80bf 	bmi.w	8026bb4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a4>
 8026a36:	1c50      	adds	r0, r2, #1
 8026a38:	9c07      	ldr	r4, [sp, #28]
 8026a3a:	4284      	cmp	r4, r0
 8026a3c:	f340 80bc 	ble.w	8026bb8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8026a40:	2b00      	cmp	r3, #0
 8026a42:	f2c0 80b9 	blt.w	8026bb8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8026a46:	1c58      	adds	r0, r3, #1
 8026a48:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8026a4a:	4284      	cmp	r4, r0
 8026a4c:	f340 80b4 	ble.w	8026bb8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8026a50:	9807      	ldr	r0, [sp, #28]
 8026a52:	fb00 2303 	mla	r3, r0, r3, r2
 8026a56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026a58:	980a      	ldr	r0, [sp, #40]	; 0x28
 8026a5a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8026a5e:	441a      	add	r2, r3
 8026a60:	f810 c003 	ldrb.w	ip, [r0, r3]
 8026a64:	7953      	ldrb	r3, [r2, #5]
 8026a66:	7850      	ldrb	r0, [r2, #1]
 8026a68:	f892 e002 	ldrb.w	lr, [r2, #2]
 8026a6c:	f892 9003 	ldrb.w	r9, [r2, #3]
 8026a70:	f892 8004 	ldrb.w	r8, [r2, #4]
 8026a74:	930e      	str	r3, [sp, #56]	; 0x38
 8026a76:	f1bb 0f00 	cmp.w	fp, #0
 8026a7a:	d00f      	beq.n	8026a9c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 8026a7c:	3205      	adds	r2, #5
 8026a7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026a80:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026a82:	18d3      	adds	r3, r2, r3
 8026a84:	5d12      	ldrb	r2, [r2, r4]
 8026a86:	920f      	str	r2, [sp, #60]	; 0x3c
 8026a88:	785a      	ldrb	r2, [r3, #1]
 8026a8a:	9211      	str	r2, [sp, #68]	; 0x44
 8026a8c:	789a      	ldrb	r2, [r3, #2]
 8026a8e:	9213      	str	r2, [sp, #76]	; 0x4c
 8026a90:	78da      	ldrb	r2, [r3, #3]
 8026a92:	9210      	str	r2, [sp, #64]	; 0x40
 8026a94:	791a      	ldrb	r2, [r3, #4]
 8026a96:	795b      	ldrb	r3, [r3, #5]
 8026a98:	9212      	str	r2, [sp, #72]	; 0x48
 8026a9a:	9314      	str	r3, [sp, #80]	; 0x50
 8026a9c:	b28b      	uxth	r3, r1
 8026a9e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8026aa0:	fa1f f28b 	uxth.w	r2, fp
 8026aa4:	fb03 fb02 	mul.w	fp, r3, r2
 8026aa8:	011b      	lsls	r3, r3, #4
 8026aaa:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 8026aae:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 8026ab2:	eba3 030b 	sub.w	r3, r3, fp
 8026ab6:	b292      	uxth	r2, r2
 8026ab8:	b29b      	uxth	r3, r3
 8026aba:	1a89      	subs	r1, r1, r2
 8026abc:	fb03 f808 	mul.w	r8, r3, r8
 8026ac0:	b289      	uxth	r1, r1
 8026ac2:	fb03 f909 	mul.w	r9, r3, r9
 8026ac6:	fb01 8800 	mla	r8, r1, r0, r8
 8026aca:	9811      	ldr	r0, [sp, #68]	; 0x44
 8026acc:	fb01 990c 	mla	r9, r1, ip, r9
 8026ad0:	fb02 8800 	mla	r8, r2, r0, r8
 8026ad4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8026ad6:	fb02 9904 	mla	r9, r2, r4, r9
 8026ada:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026adc:	fb0b 8800 	mla	r8, fp, r0, r8
 8026ae0:	980e      	ldr	r0, [sp, #56]	; 0x38
 8026ae2:	fb0b 9904 	mla	r9, fp, r4, r9
 8026ae6:	4343      	muls	r3, r0
 8026ae8:	ea4f 2828 	mov.w	r8, r8, asr #8
 8026aec:	ea4f 2929 	mov.w	r9, r9, asr #8
 8026af0:	fb01 330e 	mla	r3, r1, lr, r3
 8026af4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8026af6:	f88a 9000 	strb.w	r9, [sl]
 8026afa:	fb02 3201 	mla	r2, r2, r1, r3
 8026afe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8026b00:	f88a 8001 	strb.w	r8, [sl, #1]
 8026b04:	fb0b 2b03 	mla	fp, fp, r3, r2
 8026b08:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 8026b0c:	f88a b002 	strb.w	fp, [sl, #2]
 8026b10:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8026b12:	f10a 0a03 	add.w	sl, sl, #3
 8026b16:	3f01      	subs	r7, #1
 8026b18:	441e      	add	r6, r3
 8026b1a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8026b1c:	441d      	add	r5, r3
 8026b1e:	e77f      	b.n	8026a20 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8026b20:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8026b22:	441e      	add	r6, r3
 8026b24:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8026b26:	441d      	add	r5, r3
 8026b28:	9b06      	ldr	r3, [sp, #24]
 8026b2a:	3b01      	subs	r3, #1
 8026b2c:	9306      	str	r3, [sp, #24]
 8026b2e:	9b08      	ldr	r3, [sp, #32]
 8026b30:	3303      	adds	r3, #3
 8026b32:	9308      	str	r3, [sp, #32]
 8026b34:	e72b      	b.n	802698e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8026b36:	f47f af3c 	bne.w	80269b2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 8026b3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026b3c:	2b00      	cmp	r3, #0
 8026b3e:	f340 80b9 	ble.w	8026cb4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 8026b42:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8026b46:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8026b48:	ee79 9aab 	vadd.f32	s19, s19, s23
 8026b4c:	eef0 6a48 	vmov.f32	s13, s16
 8026b50:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8026b54:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8026b58:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026b5c:	ee16 6a90 	vmov	r6, s13
 8026b60:	eef0 6a68 	vmov.f32	s13, s17
 8026b64:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026b68:	ee16 5a90 	vmov	r5, s13
 8026b6c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8026b70:	ee69 7a27 	vmul.f32	s15, s18, s15
 8026b74:	ee37 8a48 	vsub.f32	s16, s14, s16
 8026b78:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8026b7c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8026b80:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8026b84:	ee18 2a10 	vmov	r2, s16
 8026b88:	eeb0 8a47 	vmov.f32	s16, s14
 8026b8c:	fb92 f3f3 	sdiv	r3, r2, r3
 8026b90:	ee18 2a90 	vmov	r2, s17
 8026b94:	9333      	str	r3, [sp, #204]	; 0xcc
 8026b96:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8026b98:	eef0 8a67 	vmov.f32	s17, s15
 8026b9c:	fb92 f3f3 	sdiv	r3, r2, r3
 8026ba0:	9334      	str	r3, [sp, #208]	; 0xd0
 8026ba2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026ba4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8026ba6:	3b01      	subs	r3, #1
 8026ba8:	930c      	str	r3, [sp, #48]	; 0x30
 8026baa:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8026bac:	bf08      	it	eq
 8026bae:	4613      	moveq	r3, r2
 8026bb0:	9306      	str	r3, [sp, #24]
 8026bb2:	e6e5      	b.n	8026980 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8026bb4:	1c54      	adds	r4, r2, #1
 8026bb6:	d1ab      	bne.n	8026b10 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8026bb8:	9807      	ldr	r0, [sp, #28]
 8026bba:	4282      	cmp	r2, r0
 8026bbc:	daa8      	bge.n	8026b10 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8026bbe:	1c58      	adds	r0, r3, #1
 8026bc0:	dba6      	blt.n	8026b10 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8026bc2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8026bc4:	4298      	cmp	r0, r3
 8026bc6:	dda3      	ble.n	8026b10 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8026bc8:	9000      	str	r0, [sp, #0]
 8026bca:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8026bcc:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8026bd0:	e9cd 1b03 	strd	r1, fp, [sp, #12]
 8026bd4:	9b07      	ldr	r3, [sp, #28]
 8026bd6:	4651      	mov	r1, sl
 8026bd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026bda:	f7ff fdd1 	bl	8026780 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8026bde:	e797      	b.n	8026b10 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8026be0:	1431      	asrs	r1, r6, #16
 8026be2:	9c07      	ldr	r4, [sp, #28]
 8026be4:	1428      	asrs	r0, r5, #16
 8026be6:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8026bea:	f3c6 3303 	ubfx	r3, r6, #12, #4
 8026bee:	fb04 1000 	mla	r0, r4, r0, r1
 8026bf2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8026bf4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8026bf6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8026bfa:	4401      	add	r1, r0
 8026bfc:	5c20      	ldrb	r0, [r4, r0]
 8026bfe:	f891 8002 	ldrb.w	r8, [r1, #2]
 8026c02:	900e      	str	r0, [sp, #56]	; 0x38
 8026c04:	f891 a003 	ldrb.w	sl, [r1, #3]
 8026c08:	7848      	ldrb	r0, [r1, #1]
 8026c0a:	f891 9004 	ldrb.w	r9, [r1, #4]
 8026c0e:	f891 b005 	ldrb.w	fp, [r1, #5]
 8026c12:	b172      	cbz	r2, 8026c32 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x322>
 8026c14:	3105      	adds	r1, #5
 8026c16:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026c18:	190f      	adds	r7, r1, r4
 8026c1a:	5d09      	ldrb	r1, [r1, r4]
 8026c1c:	9115      	str	r1, [sp, #84]	; 0x54
 8026c1e:	7879      	ldrb	r1, [r7, #1]
 8026c20:	9117      	str	r1, [sp, #92]	; 0x5c
 8026c22:	78b9      	ldrb	r1, [r7, #2]
 8026c24:	9119      	str	r1, [sp, #100]	; 0x64
 8026c26:	78f9      	ldrb	r1, [r7, #3]
 8026c28:	9116      	str	r1, [sp, #88]	; 0x58
 8026c2a:	7939      	ldrb	r1, [r7, #4]
 8026c2c:	9118      	str	r1, [sp, #96]	; 0x60
 8026c2e:	7979      	ldrb	r1, [r7, #5]
 8026c30:	911a      	str	r1, [sp, #104]	; 0x68
 8026c32:	b29b      	uxth	r3, r3
 8026c34:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026c36:	b292      	uxth	r2, r2
 8026c38:	f10c 0c03 	add.w	ip, ip, #3
 8026c3c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8026c40:	fb03 f102 	mul.w	r1, r3, r2
 8026c44:	011b      	lsls	r3, r3, #4
 8026c46:	ebc1 1202 	rsb	r2, r1, r2, lsl #4
 8026c4a:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8026c4e:	1a5b      	subs	r3, r3, r1
 8026c50:	b292      	uxth	r2, r2
 8026c52:	b29b      	uxth	r3, r3
 8026c54:	1abf      	subs	r7, r7, r2
 8026c56:	fb03 f909 	mul.w	r9, r3, r9
 8026c5a:	b2bf      	uxth	r7, r7
 8026c5c:	fb03 fa0a 	mul.w	sl, r3, sl
 8026c60:	fb03 f30b 	mul.w	r3, r3, fp
 8026c64:	fb07 9900 	mla	r9, r7, r0, r9
 8026c68:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8026c6a:	fb07 aa04 	mla	sl, r7, r4, sl
 8026c6e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8026c70:	fb02 9900 	mla	r9, r2, r0, r9
 8026c74:	9818      	ldr	r0, [sp, #96]	; 0x60
 8026c76:	fb07 3308 	mla	r3, r7, r8, r3
 8026c7a:	fb01 9900 	mla	r9, r1, r0, r9
 8026c7e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8026c80:	fb02 aa04 	mla	sl, r2, r4, sl
 8026c84:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8026c86:	fb02 3200 	mla	r2, r2, r0, r3
 8026c8a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8026c8c:	fb01 aa04 	mla	sl, r1, r4, sl
 8026c90:	ea4f 2929 	mov.w	r9, r9, asr #8
 8026c94:	fb01 2103 	mla	r1, r1, r3, r2
 8026c98:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8026c9a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8026c9e:	f80c 9c05 	strb.w	r9, [ip, #-5]
 8026ca2:	1209      	asrs	r1, r1, #8
 8026ca4:	441e      	add	r6, r3
 8026ca6:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8026ca8:	f80c ac06 	strb.w	sl, [ip, #-6]
 8026cac:	f80c 1c04 	strb.w	r1, [ip, #-4]
 8026cb0:	441d      	add	r5, r3
 8026cb2:	e697      	b.n	80269e4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 8026cb4:	b01d      	add	sp, #116	; 0x74
 8026cb6:	ecbd 8b0a 	vpop	{d8-d12}
 8026cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08026cc0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8026cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026cc4:	b085      	sub	sp, #20
 8026cc6:	7888      	ldrb	r0, [r1, #2]
 8026cc8:	4691      	mov	r9, r2
 8026cca:	9000      	str	r0, [sp, #0]
 8026ccc:	7848      	ldrb	r0, [r1, #1]
 8026cce:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 8026cd2:	9001      	str	r0, [sp, #4]
 8026cd4:	7808      	ldrb	r0, [r1, #0]
 8026cd6:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8026cda:	9002      	str	r0, [sp, #8]
 8026cdc:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8026ce0:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8026ce4:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 8026ce8:	fb04 c603 	mla	r6, r4, r3, ip
 8026cec:	2c00      	cmp	r4, #0
 8026cee:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 8026cf2:	9a00      	ldr	r2, [sp, #0]
 8026cf4:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8026cf8:	9a01      	ldr	r2, [sp, #4]
 8026cfa:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8026cfe:	db3a      	blt.n	8026d76 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 8026d00:	45a0      	cmp	r8, r4
 8026d02:	dd38      	ble.n	8026d76 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 8026d04:	f1bc 0f00 	cmp.w	ip, #0
 8026d08:	db33      	blt.n	8026d72 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 8026d0a:	4563      	cmp	r3, ip
 8026d0c:	dd31      	ble.n	8026d72 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 8026d0e:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 8026d12:	f11c 0601 	adds.w	r6, ip, #1
 8026d16:	d431      	bmi.n	8026d7c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8026d18:	42b3      	cmp	r3, r6
 8026d1a:	dd2f      	ble.n	8026d7c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8026d1c:	b375      	cbz	r5, 8026d7c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 8026d1e:	f8de 6004 	ldr.w	r6, [lr, #4]
 8026d22:	3401      	adds	r4, #1
 8026d24:	d42e      	bmi.n	8026d84 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8026d26:	45a0      	cmp	r8, r4
 8026d28:	dd2c      	ble.n	8026d84 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8026d2a:	b35f      	cbz	r7, 8026d84 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8026d2c:	f1bc 0f00 	cmp.w	ip, #0
 8026d30:	db26      	blt.n	8026d80 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 8026d32:	4563      	cmp	r3, ip
 8026d34:	dd24      	ble.n	8026d80 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 8026d36:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 8026d3a:	f11c 0c01 	adds.w	ip, ip, #1
 8026d3e:	d405      	bmi.n	8026d4c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8026d40:	4563      	cmp	r3, ip
 8026d42:	dd03      	ble.n	8026d4c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8026d44:	b115      	cbz	r5, 8026d4c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8026d46:	3301      	adds	r3, #1
 8026d48:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8026d4c:	2d0f      	cmp	r5, #15
 8026d4e:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8026d52:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8026d56:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8026d5a:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8026d5e:	d801      	bhi.n	8026d64 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa4>
 8026d60:	2f0f      	cmp	r7, #15
 8026d62:	d911      	bls.n	8026d88 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc8>
 8026d64:	4b80      	ldr	r3, [pc, #512]	; (8026f68 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 8026d66:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8026d6a:	4a80      	ldr	r2, [pc, #512]	; (8026f6c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 8026d6c:	4880      	ldr	r0, [pc, #512]	; (8026f70 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2b0>)
 8026d6e:	f003 fd07 	bl	802a780 <__assert_func>
 8026d72:	4602      	mov	r2, r0
 8026d74:	e7cd      	b.n	8026d12 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x52>
 8026d76:	4606      	mov	r6, r0
 8026d78:	4602      	mov	r2, r0
 8026d7a:	e7d2      	b.n	8026d22 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 8026d7c:	4606      	mov	r6, r0
 8026d7e:	e7d0      	b.n	8026d22 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 8026d80:	4604      	mov	r4, r0
 8026d82:	e7da      	b.n	8026d3a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7a>
 8026d84:	4604      	mov	r4, r0
 8026d86:	e7e1      	b.n	8026d4c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8026d88:	b2ab      	uxth	r3, r5
 8026d8a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8026d8e:	b2bf      	uxth	r7, r7
 8026d90:	fb03 fe07 	mul.w	lr, r3, r7
 8026d94:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8026d98:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8026d9c:	eba3 0c0e 	sub.w	ip, r3, lr
 8026da0:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8026da4:	b2bf      	uxth	r7, r7
 8026da6:	fa1f fc8c 	uxth.w	ip, ip
 8026daa:	eba5 0507 	sub.w	r5, r5, r7
 8026dae:	fb0c f30a 	mul.w	r3, ip, sl
 8026db2:	b2ad      	uxth	r5, r5
 8026db4:	fb05 330b 	mla	r3, r5, fp, r3
 8026db8:	fb07 3309 	mla	r3, r7, r9, r3
 8026dbc:	fb0e 3308 	mla	r3, lr, r8, r3
 8026dc0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026dc4:	9303      	str	r3, [sp, #12]
 8026dc6:	d018      	beq.n	8026dfa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x13a>
 8026dc8:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8026dcc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026dd0:	fb0b f303 	mul.w	r3, fp, r3
 8026dd4:	fb0b fb02 	mul.w	fp, fp, r2
 8026dd8:	0a1a      	lsrs	r2, r3, #8
 8026dda:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8026dde:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026de2:	441a      	add	r2, r3
 8026de4:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8026de8:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8026dec:	0a12      	lsrs	r2, r2, #8
 8026dee:	0a1b      	lsrs	r3, r3, #8
 8026df0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026df4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026df8:	431a      	orrs	r2, r3
 8026dfa:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8026dfe:	d019      	beq.n	8026e34 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x174>
 8026e00:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8026e04:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026e08:	fb0a fb0b 	mul.w	fp, sl, fp
 8026e0c:	fb0a fa06 	mul.w	sl, sl, r6
 8026e10:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8026e14:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026e18:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8026e1c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8026e20:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8026e24:	445e      	add	r6, fp
 8026e26:	0a1b      	lsrs	r3, r3, #8
 8026e28:	0a36      	lsrs	r6, r6, #8
 8026e2a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026e2e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8026e32:	431e      	orrs	r6, r3
 8026e34:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8026e38:	d019      	beq.n	8026e6e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1ae>
 8026e3a:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8026e3e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8026e42:	fb09 fa0a 	mul.w	sl, r9, sl
 8026e46:	fb09 f904 	mul.w	r9, r9, r4
 8026e4a:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8026e4e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8026e52:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8026e56:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8026e5a:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8026e5e:	4454      	add	r4, sl
 8026e60:	0a1b      	lsrs	r3, r3, #8
 8026e62:	0a24      	lsrs	r4, r4, #8
 8026e64:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026e68:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8026e6c:	431c      	orrs	r4, r3
 8026e6e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8026e72:	d019      	beq.n	8026ea8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1e8>
 8026e74:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8026e78:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026e7c:	fb08 f909 	mul.w	r9, r8, r9
 8026e80:	fb08 f800 	mul.w	r8, r8, r0
 8026e84:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8026e88:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8026e8c:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8026e90:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8026e94:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8026e98:	4448      	add	r0, r9
 8026e9a:	0a1b      	lsrs	r3, r3, #8
 8026e9c:	0a00      	lsrs	r0, r0, #8
 8026e9e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026ea2:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8026ea6:	4318      	orrs	r0, r3
 8026ea8:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8026eac:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8026eb0:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8026eb4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026eb8:	fb0c f808 	mul.w	r8, ip, r8
 8026ebc:	fb0c f606 	mul.w	r6, ip, r6
 8026ec0:	fb05 8803 	mla	r8, r5, r3, r8
 8026ec4:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8026ec8:	fb05 6202 	mla	r2, r5, r2, r6
 8026ecc:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8026ed0:	fb07 8803 	mla	r8, r7, r3, r8
 8026ed4:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8026ed8:	fb07 2704 	mla	r7, r7, r4, r2
 8026edc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026ee0:	fb0e 8303 	mla	r3, lr, r3, r8
 8026ee4:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8026ee8:	fb0e 7e00 	mla	lr, lr, r0, r7
 8026eec:	9803      	ldr	r0, [sp, #12]
 8026eee:	b292      	uxth	r2, r2
 8026ef0:	9c02      	ldr	r4, [sp, #8]
 8026ef2:	0a1b      	lsrs	r3, r3, #8
 8026ef4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026ef8:	4350      	muls	r0, r2
 8026efa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026efe:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8026f02:	ea43 0e0e 	orr.w	lr, r3, lr
 8026f06:	1c43      	adds	r3, r0, #1
 8026f08:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8026f0c:	fa5f f08e 	uxtb.w	r0, lr
 8026f10:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8026f14:	b2db      	uxtb	r3, r3
 8026f16:	fb14 f403 	smulbb	r4, r4, r3
 8026f1a:	fb00 4002 	mla	r0, r0, r2, r4
 8026f1e:	b280      	uxth	r0, r0
 8026f20:	1c44      	adds	r4, r0, #1
 8026f22:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8026f26:	9c01      	ldr	r4, [sp, #4]
 8026f28:	fb14 f403 	smulbb	r4, r4, r3
 8026f2c:	1200      	asrs	r0, r0, #8
 8026f2e:	7008      	strb	r0, [r1, #0]
 8026f30:	f3ce 2007 	ubfx	r0, lr, #8, #8
 8026f34:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8026f38:	fb00 4002 	mla	r0, r0, r2, r4
 8026f3c:	b280      	uxth	r0, r0
 8026f3e:	1c44      	adds	r4, r0, #1
 8026f40:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8026f44:	1200      	asrs	r0, r0, #8
 8026f46:	7048      	strb	r0, [r1, #1]
 8026f48:	9800      	ldr	r0, [sp, #0]
 8026f4a:	fb10 f303 	smulbb	r3, r0, r3
 8026f4e:	fb0e 3202 	mla	r2, lr, r2, r3
 8026f52:	b292      	uxth	r2, r2
 8026f54:	f102 0e01 	add.w	lr, r2, #1
 8026f58:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8026f5c:	1212      	asrs	r2, r2, #8
 8026f5e:	708a      	strb	r2, [r1, #2]
 8026f60:	b005      	add	sp, #20
 8026f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026f66:	bf00      	nop
 8026f68:	0802fd97 	.word	0x0802fd97
 8026f6c:	0803028e 	.word	0x0803028e
 8026f70:	0802fe60 	.word	0x0802fe60

08026f74 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8026f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026f78:	ed2d 8b08 	vpush	{d8-d11}
 8026f7c:	b099      	sub	sp, #100	; 0x64
 8026f7e:	eeb0 aa40 	vmov.f32	s20, s0
 8026f82:	eef0 9a60 	vmov.f32	s19, s1
 8026f86:	9306      	str	r3, [sp, #24]
 8026f88:	eeb0 9a41 	vmov.f32	s18, s2
 8026f8c:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 8026f90:	eeb0 8a62 	vmov.f32	s16, s5
 8026f94:	9216      	str	r2, [sp, #88]	; 0x58
 8026f96:	eef0 8a43 	vmov.f32	s17, s6
 8026f9a:	9307      	str	r3, [sp, #28]
 8026f9c:	eef0 ba44 	vmov.f32	s23, s8
 8026fa0:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 8026fa4:	eeb0 ba64 	vmov.f32	s22, s9
 8026fa8:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8026faa:	eef0 aa45 	vmov.f32	s21, s10
 8026fae:	9310      	str	r3, [sp, #64]	; 0x40
 8026fb0:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 8026fb4:	9017      	str	r0, [sp, #92]	; 0x5c
 8026fb6:	9112      	str	r1, [sp, #72]	; 0x48
 8026fb8:	6850      	ldr	r0, [r2, #4]
 8026fba:	9315      	str	r3, [sp, #84]	; 0x54
 8026fbc:	6812      	ldr	r2, [r2, #0]
 8026fbe:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8026fc0:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8026fc4:	fb00 1303 	mla	r3, r0, r3, r1
 8026fc8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8026fcc:	18d3      	adds	r3, r2, r3
 8026fce:	930a      	str	r3, [sp, #40]	; 0x28
 8026fd0:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8026fd2:	681b      	ldr	r3, [r3, #0]
 8026fd4:	9311      	str	r3, [sp, #68]	; 0x44
 8026fd6:	9b07      	ldr	r3, [sp, #28]
 8026fd8:	009b      	lsls	r3, r3, #2
 8026fda:	930e      	str	r3, [sp, #56]	; 0x38
 8026fdc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8026fde:	2b00      	cmp	r3, #0
 8026fe0:	dc03      	bgt.n	8026fea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8026fe2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8026fe4:	2b00      	cmp	r3, #0
 8026fe6:	f340 833b 	ble.w	8027660 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 8026fea:	9b06      	ldr	r3, [sp, #24]
 8026fec:	2b00      	cmp	r3, #0
 8026fee:	f340 8197 	ble.w	8027320 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 8026ff2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8026ff4:	1423      	asrs	r3, r4, #16
 8026ff6:	1412      	asrs	r2, r2, #16
 8026ff8:	d432      	bmi.n	8027060 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 8026ffa:	1c51      	adds	r1, r2, #1
 8026ffc:	9807      	ldr	r0, [sp, #28]
 8026ffe:	4288      	cmp	r0, r1
 8027000:	dd31      	ble.n	8027066 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8027002:	2b00      	cmp	r3, #0
 8027004:	db2f      	blt.n	8027066 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8027006:	1c59      	adds	r1, r3, #1
 8027008:	9810      	ldr	r0, [sp, #64]	; 0x40
 802700a:	4288      	cmp	r0, r1
 802700c:	dd2b      	ble.n	8027066 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 802700e:	9b06      	ldr	r3, [sp, #24]
 8027010:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8027012:	3b01      	subs	r3, #1
 8027014:	992b      	ldr	r1, [sp, #172]	; 0xac
 8027016:	fb02 1203 	mla	r2, r2, r3, r1
 802701a:	1412      	asrs	r2, r2, #16
 802701c:	d42e      	bmi.n	802707c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 802701e:	3201      	adds	r2, #1
 8027020:	9907      	ldr	r1, [sp, #28]
 8027022:	4291      	cmp	r1, r2
 8027024:	dd2a      	ble.n	802707c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8027026:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8027028:	fb02 4303 	mla	r3, r2, r3, r4
 802702c:	141b      	asrs	r3, r3, #16
 802702e:	d425      	bmi.n	802707c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8027030:	3301      	adds	r3, #1
 8027032:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8027034:	429a      	cmp	r2, r3
 8027036:	dd21      	ble.n	802707c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8027038:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802703a:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
 802703e:	f103 0e03 	add.w	lr, r3, #3
 8027042:	9b06      	ldr	r3, [sp, #24]
 8027044:	9313      	str	r3, [sp, #76]	; 0x4c
 8027046:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8027048:	2b00      	cmp	r3, #0
 802704a:	f300 81d2 	bgt.w	80273f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47e>
 802704e:	9b06      	ldr	r3, [sp, #24]
 8027050:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8027054:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027056:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802705a:	4423      	add	r3, r4
 802705c:	930a      	str	r3, [sp, #40]	; 0x28
 802705e:	e161      	b.n	8027324 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b0>
 8027060:	1c51      	adds	r1, r2, #1
 8027062:	f040 8150 	bne.w	8027306 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8027066:	9907      	ldr	r1, [sp, #28]
 8027068:	428a      	cmp	r2, r1
 802706a:	f280 814c 	bge.w	8027306 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 802706e:	1c5a      	adds	r2, r3, #1
 8027070:	f2c0 8149 	blt.w	8027306 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8027074:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8027076:	4293      	cmp	r3, r2
 8027078:	f280 8145 	bge.w	8027306 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 802707c:	9b06      	ldr	r3, [sp, #24]
 802707e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8027080:	9314      	str	r3, [sp, #80]	; 0x50
 8027082:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8027086:	9313      	str	r3, [sp, #76]	; 0x4c
 8027088:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802708a:	2b00      	cmp	r3, #0
 802708c:	dddf      	ble.n	802704e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 802708e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8027090:	1423      	asrs	r3, r4, #16
 8027092:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8027096:	f3c2 3003 	ubfx	r0, r2, #12, #4
 802709a:	1412      	asrs	r2, r2, #16
 802709c:	f100 8190 	bmi.w	80273c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44c>
 80270a0:	1c55      	adds	r5, r2, #1
 80270a2:	9f07      	ldr	r7, [sp, #28]
 80270a4:	42af      	cmp	r7, r5
 80270a6:	f340 818d 	ble.w	80273c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 80270aa:	2b00      	cmp	r3, #0
 80270ac:	f2c0 818a 	blt.w	80273c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 80270b0:	1c5d      	adds	r5, r3, #1
 80270b2:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80270b4:	42af      	cmp	r7, r5
 80270b6:	f340 8185 	ble.w	80273c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 80270ba:	9d07      	ldr	r5, [sp, #28]
 80270bc:	fb03 2305 	mla	r3, r3, r5, r2
 80270c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80270c2:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80270c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80270ca:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80270ce:	2800      	cmp	r0, #0
 80270d0:	f000 8167 	beq.w	80273a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 80270d4:	686a      	ldr	r2, [r5, #4]
 80270d6:	920b      	str	r2, [sp, #44]	; 0x2c
 80270d8:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80270dc:	2900      	cmp	r1, #0
 80270de:	f000 8169 	beq.w	80273b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 80270e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80270e4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80270e6:	18aa      	adds	r2, r5, r2
 80270e8:	59ed      	ldr	r5, [r5, r7]
 80270ea:	6852      	ldr	r2, [r2, #4]
 80270ec:	9508      	str	r5, [sp, #32]
 80270ee:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 80270f2:	0e15      	lsrs	r5, r2, #24
 80270f4:	920c      	str	r2, [sp, #48]	; 0x30
 80270f6:	b280      	uxth	r0, r0
 80270f8:	b289      	uxth	r1, r1
 80270fa:	fb00 fb01 	mul.w	fp, r0, r1
 80270fe:	0100      	lsls	r0, r0, #4
 8027100:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 8027104:	eba0 090b 	sub.w	r9, r0, fp
 8027108:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 802710c:	b289      	uxth	r1, r1
 802710e:	fa1f f989 	uxth.w	r9, r9
 8027112:	1a52      	subs	r2, r2, r1
 8027114:	fb09 f008 	mul.w	r0, r9, r8
 8027118:	b292      	uxth	r2, r2
 802711a:	fb02 000c 	mla	r0, r2, ip, r0
 802711e:	fb01 000a 	mla	r0, r1, sl, r0
 8027122:	fb0b 0005 	mla	r0, fp, r5, r0
 8027126:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802712a:	2800      	cmp	r0, #0
 802712c:	f000 80e0 	beq.w	80272f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8027130:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8027134:	d01b      	beq.n	802716e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fa>
 8027136:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 802713a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802713e:	fb0c fe0e 	mul.w	lr, ip, lr
 8027142:	fb0c fc03 	mul.w	ip, ip, r3
 8027146:	ea4f 231e 	mov.w	r3, lr, lsr #8
 802714a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802714e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027152:	4473      	add	r3, lr
 8027154:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8027158:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 802715c:	0a1b      	lsrs	r3, r3, #8
 802715e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027162:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027166:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802716a:	ea43 030e 	orr.w	r3, r3, lr
 802716e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8027172:	d01e      	beq.n	80271b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 8027174:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8027176:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 802717a:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 802717e:	fb08 fc0c 	mul.w	ip, r8, ip
 8027182:	fb08 f80e 	mul.w	r8, r8, lr
 8027186:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802718a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802718e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027192:	44e6      	add	lr, ip
 8027194:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8027198:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 802719c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80271a0:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80271a4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80271a8:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80271ac:	ea4e 0708 	orr.w	r7, lr, r8
 80271b0:	970b      	str	r7, [sp, #44]	; 0x2c
 80271b2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80271b6:	d01e      	beq.n	80271f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80271b8:	9f08      	ldr	r7, [sp, #32]
 80271ba:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 80271be:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80271c2:	fb0a f808 	mul.w	r8, sl, r8
 80271c6:	fb0a fa0c 	mul.w	sl, sl, ip
 80271ca:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 80271ce:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 80271d2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80271d6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80271da:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80271de:	44c6      	add	lr, r8
 80271e0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80271e4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80271e8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80271ec:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80271f0:	ea4e 070a 	orr.w	r7, lr, sl
 80271f4:	9708      	str	r7, [sp, #32]
 80271f6:	2dff      	cmp	r5, #255	; 0xff
 80271f8:	d01d      	beq.n	8027236 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c2>
 80271fa:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80271fc:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8027200:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8027204:	fb05 f808 	mul.w	r8, r5, r8
 8027208:	fb05 f50c 	mul.w	r5, r5, ip
 802720c:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8027210:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8027214:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8027218:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802721c:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8027220:	44c6      	add	lr, r8
 8027222:	0a2d      	lsrs	r5, r5, #8
 8027224:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027228:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 802722c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027230:	ea4e 0505 	orr.w	r5, lr, r5
 8027234:	950c      	str	r5, [sp, #48]	; 0x30
 8027236:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8027238:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802723c:	9f08      	ldr	r7, [sp, #32]
 802723e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027242:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8027246:	fb09 f505 	mul.w	r5, r9, r5
 802724a:	fb02 550c 	mla	r5, r2, ip, r5
 802724e:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8027252:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8027254:	fb01 550c 	mla	r5, r1, ip, r5
 8027258:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 802725c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 802725e:	fb0b 550c 	mla	r5, fp, ip, r5
 8027262:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8027266:	fb09 f90c 	mul.w	r9, r9, ip
 802726a:	0a2d      	lsrs	r5, r5, #8
 802726c:	fb02 9303 	mla	r3, r2, r3, r9
 8027270:	9a08      	ldr	r2, [sp, #32]
 8027272:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8027276:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 802727a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802727c:	fb01 330e 	mla	r3, r1, lr, r3
 8027280:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8027284:	fb0b 3b01 	mla	fp, fp, r1, r3
 8027288:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802728a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 802728c:	4343      	muls	r3, r0
 802728e:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8027292:	1c58      	adds	r0, r3, #1
 8027294:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8027298:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802729c:	ea45 050b 	orr.w	r5, r5, fp
 80272a0:	7833      	ldrb	r3, [r6, #0]
 80272a2:	b2ea      	uxtb	r2, r5
 80272a4:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80272a8:	fb12 f201 	smulbb	r2, r2, r1
 80272ac:	b2c0      	uxtb	r0, r0
 80272ae:	fb03 2300 	mla	r3, r3, r0, r2
 80272b2:	b29b      	uxth	r3, r3
 80272b4:	1c5a      	adds	r2, r3, #1
 80272b6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80272ba:	7872      	ldrb	r2, [r6, #1]
 80272bc:	fb12 f200 	smulbb	r2, r2, r0
 80272c0:	121b      	asrs	r3, r3, #8
 80272c2:	7033      	strb	r3, [r6, #0]
 80272c4:	f3c5 2307 	ubfx	r3, r5, #8, #8
 80272c8:	0c2d      	lsrs	r5, r5, #16
 80272ca:	fb03 2301 	mla	r3, r3, r1, r2
 80272ce:	b29b      	uxth	r3, r3
 80272d0:	1c5a      	adds	r2, r3, #1
 80272d2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80272d6:	121b      	asrs	r3, r3, #8
 80272d8:	7073      	strb	r3, [r6, #1]
 80272da:	78b3      	ldrb	r3, [r6, #2]
 80272dc:	fb13 f000 	smulbb	r0, r3, r0
 80272e0:	fb05 0501 	mla	r5, r5, r1, r0
 80272e4:	b2ad      	uxth	r5, r5
 80272e6:	1c6b      	adds	r3, r5, #1
 80272e8:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80272ec:	122d      	asrs	r5, r5, #8
 80272ee:	70b5      	strb	r5, [r6, #2]
 80272f0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80272f2:	3603      	adds	r6, #3
 80272f4:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80272f6:	4413      	add	r3, r2
 80272f8:	932b      	str	r3, [sp, #172]	; 0xac
 80272fa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80272fc:	441c      	add	r4, r3
 80272fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8027300:	3b01      	subs	r3, #1
 8027302:	9314      	str	r3, [sp, #80]	; 0x50
 8027304:	e6c0      	b.n	8027088 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 8027306:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8027308:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802730a:	4413      	add	r3, r2
 802730c:	932b      	str	r3, [sp, #172]	; 0xac
 802730e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8027310:	441c      	add	r4, r3
 8027312:	9b06      	ldr	r3, [sp, #24]
 8027314:	3b01      	subs	r3, #1
 8027316:	9306      	str	r3, [sp, #24]
 8027318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802731a:	3303      	adds	r3, #3
 802731c:	930a      	str	r3, [sp, #40]	; 0x28
 802731e:	e664      	b.n	8026fea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8027320:	f47f ae75 	bne.w	802700e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 8027324:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8027326:	2b00      	cmp	r3, #0
 8027328:	f340 819a 	ble.w	8027660 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 802732c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027330:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8027332:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8027336:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802733a:	eef0 6a48 	vmov.f32	s13, s16
 802733e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8027342:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8027346:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802734a:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 802734e:	eef0 6a68 	vmov.f32	s13, s17
 8027352:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027356:	ee16 4a90 	vmov	r4, s13
 802735a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802735e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8027362:	ee37 8a48 	vsub.f32	s16, s14, s16
 8027366:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802736a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802736e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8027372:	ee18 2a10 	vmov	r2, s16
 8027376:	eeb0 8a47 	vmov.f32	s16, s14
 802737a:	fb92 f3f3 	sdiv	r3, r2, r3
 802737e:	ee18 2a90 	vmov	r2, s17
 8027382:	932d      	str	r3, [sp, #180]	; 0xb4
 8027384:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8027386:	eef0 8a67 	vmov.f32	s17, s15
 802738a:	fb92 f3f3 	sdiv	r3, r2, r3
 802738e:	932e      	str	r3, [sp, #184]	; 0xb8
 8027390:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8027392:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8027394:	3b01      	subs	r3, #1
 8027396:	9312      	str	r3, [sp, #72]	; 0x48
 8027398:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802739a:	bf08      	it	eq
 802739c:	4613      	moveq	r3, r2
 802739e:	9306      	str	r3, [sp, #24]
 80273a0:	e61c      	b.n	8026fdc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 80273a2:	b151      	cbz	r1, 80273ba <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 80273a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80273a6:	58aa      	ldr	r2, [r5, r2]
 80273a8:	25ff      	movs	r5, #255	; 0xff
 80273aa:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 80273ae:	9208      	str	r2, [sp, #32]
 80273b0:	46a8      	mov	r8, r5
 80273b2:	e6a0      	b.n	80270f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 80273b4:	25ff      	movs	r5, #255	; 0xff
 80273b6:	46aa      	mov	sl, r5
 80273b8:	e69d      	b.n	80270f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 80273ba:	25ff      	movs	r5, #255	; 0xff
 80273bc:	46aa      	mov	sl, r5
 80273be:	e7f7      	b.n	80273b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43c>
 80273c0:	1c57      	adds	r7, r2, #1
 80273c2:	d195      	bne.n	80272f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80273c4:	9d07      	ldr	r5, [sp, #28]
 80273c6:	4295      	cmp	r5, r2
 80273c8:	dd92      	ble.n	80272f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80273ca:	1c5d      	adds	r5, r3, #1
 80273cc:	db90      	blt.n	80272f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80273ce:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80273d0:	429d      	cmp	r5, r3
 80273d2:	dd8d      	ble.n	80272f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80273d4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80273d6:	9201      	str	r2, [sp, #4]
 80273d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80273da:	e9cd 3002 	strd	r3, r0, [sp, #8]
 80273de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80273e0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80273e2:	9300      	str	r3, [sp, #0]
 80273e4:	9b07      	ldr	r3, [sp, #28]
 80273e6:	e9cd 1504 	strd	r1, r5, [sp, #16]
 80273ea:	4631      	mov	r1, r6
 80273ec:	f7ff fc68 	bl	8026cc0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 80273f0:	e77e      	b.n	80272f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80273f2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80273f4:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80273f8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80273fa:	9d07      	ldr	r5, [sp, #28]
 80273fc:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8027400:	1412      	asrs	r2, r2, #16
 8027402:	1423      	asrs	r3, r4, #16
 8027404:	fb05 2303 	mla	r3, r5, r3, r2
 8027408:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802740a:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 802740e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8027412:	0e1e      	lsrs	r6, r3, #24
 8027414:	2900      	cmp	r1, #0
 8027416:	f000 8114 	beq.w	8027642 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ce>
 802741a:	686a      	ldr	r2, [r5, #4]
 802741c:	920d      	str	r2, [sp, #52]	; 0x34
 802741e:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8027422:	2800      	cmp	r0, #0
 8027424:	f000 8116 	beq.w	8027654 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e0>
 8027428:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802742a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 802742c:	18aa      	adds	r2, r5, r2
 802742e:	59ed      	ldr	r5, [r5, r7]
 8027430:	6852      	ldr	r2, [r2, #4]
 8027432:	9509      	str	r5, [sp, #36]	; 0x24
 8027434:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8027438:	0e15      	lsrs	r5, r2, #24
 802743a:	920f      	str	r2, [sp, #60]	; 0x3c
 802743c:	b289      	uxth	r1, r1
 802743e:	b280      	uxth	r0, r0
 8027440:	fb01 fa00 	mul.w	sl, r1, r0
 8027444:	0109      	lsls	r1, r1, #4
 8027446:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 802744a:	eba1 080a 	sub.w	r8, r1, sl
 802744e:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8027452:	b280      	uxth	r0, r0
 8027454:	fa1f f888 	uxth.w	r8, r8
 8027458:	1a12      	subs	r2, r2, r0
 802745a:	fb08 f10c 	mul.w	r1, r8, ip
 802745e:	b292      	uxth	r2, r2
 8027460:	fb02 1106 	mla	r1, r2, r6, r1
 8027464:	fb00 1109 	mla	r1, r0, r9, r1
 8027468:	fb0a 1105 	mla	r1, sl, r5, r1
 802746c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8027470:	2900      	cmp	r1, #0
 8027472:	f000 80da 	beq.w	802762a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 8027476:	2eff      	cmp	r6, #255	; 0xff
 8027478:	d016      	beq.n	80274a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x534>
 802747a:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 802747e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027482:	4377      	muls	r7, r6
 8027484:	435e      	muls	r6, r3
 8027486:	0a3b      	lsrs	r3, r7, #8
 8027488:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802748c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027490:	443b      	add	r3, r7
 8027492:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8027496:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 802749a:	0a1b      	lsrs	r3, r3, #8
 802749c:	0a3f      	lsrs	r7, r7, #8
 802749e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80274a2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80274a6:	433b      	orrs	r3, r7
 80274a8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80274ac:	d01d      	beq.n	80274ea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x576>
 80274ae:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80274b0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80274b2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80274b6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80274ba:	fb0c f606 	mul.w	r6, ip, r6
 80274be:	fb0c fc07 	mul.w	ip, ip, r7
 80274c2:	0a37      	lsrs	r7, r6, #8
 80274c4:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 80274c8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80274cc:	4437      	add	r7, r6
 80274ce:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 80274d2:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 80274d6:	0a3f      	lsrs	r7, r7, #8
 80274d8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80274dc:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80274e0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80274e4:	ea47 060c 	orr.w	r6, r7, ip
 80274e8:	960d      	str	r6, [sp, #52]	; 0x34
 80274ea:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80274ee:	d01d      	beq.n	802752c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b8>
 80274f0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80274f2:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80274f6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80274fa:	fb09 fc0c 	mul.w	ip, r9, ip
 80274fe:	fb09 f906 	mul.w	r9, r9, r6
 8027502:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8027506:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802750a:	f509 7680 	add.w	r6, r9, #256	; 0x100
 802750e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8027512:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8027516:	4467      	add	r7, ip
 8027518:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802751c:	0a3f      	lsrs	r7, r7, #8
 802751e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8027522:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8027526:	ea47 0609 	orr.w	r6, r7, r9
 802752a:	9609      	str	r6, [sp, #36]	; 0x24
 802752c:	2dff      	cmp	r5, #255	; 0xff
 802752e:	d01a      	beq.n	8027566 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f2>
 8027530:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8027532:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8027536:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802753a:	fb05 fc0c 	mul.w	ip, r5, ip
 802753e:	4375      	muls	r5, r6
 8027540:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8027544:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8027548:	f505 7680 	add.w	r6, r5, #256	; 0x100
 802754c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8027550:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8027554:	4467      	add	r7, ip
 8027556:	0a2d      	lsrs	r5, r5, #8
 8027558:	0a3f      	lsrs	r7, r7, #8
 802755a:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 802755e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8027562:	433d      	orrs	r5, r7
 8027564:	950f      	str	r5, [sp, #60]	; 0x3c
 8027566:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027568:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 802756c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027570:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8027574:	fb08 f505 	mul.w	r5, r8, r5
 8027578:	fb02 5506 	mla	r5, r2, r6, r5
 802757c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 802757e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8027582:	fb00 5506 	mla	r5, r0, r6, r5
 8027586:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8027588:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802758c:	fb0a 5506 	mla	r5, sl, r6, r5
 8027590:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8027592:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8027596:	0a2d      	lsrs	r5, r5, #8
 8027598:	fb08 f806 	mul.w	r8, r8, r6
 802759c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80275a0:	fb02 8303 	mla	r3, r2, r3, r8
 80275a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80275a6:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 80275aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80275ac:	fb00 3307 	mla	r3, r0, r7, r3
 80275b0:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80275b4:	fb0a 3c0c 	mla	ip, sl, ip, r3
 80275b8:	fb01 f30b 	mul.w	r3, r1, fp
 80275bc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80275c0:	1c59      	adds	r1, r3, #1
 80275c2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80275c6:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80275ca:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 80275ce:	ea45 050c 	orr.w	r5, r5, ip
 80275d2:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80275d6:	b2ea      	uxtb	r2, r5
 80275d8:	b2c9      	uxtb	r1, r1
 80275da:	fb12 f20b 	smulbb	r2, r2, fp
 80275de:	fb03 2301 	mla	r3, r3, r1, r2
 80275e2:	b29b      	uxth	r3, r3
 80275e4:	1c5a      	adds	r2, r3, #1
 80275e6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80275ea:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 80275ee:	fb12 f201 	smulbb	r2, r2, r1
 80275f2:	121b      	asrs	r3, r3, #8
 80275f4:	f80e 3c03 	strb.w	r3, [lr, #-3]
 80275f8:	f3c5 2307 	ubfx	r3, r5, #8, #8
 80275fc:	0c2d      	lsrs	r5, r5, #16
 80275fe:	fb03 230b 	mla	r3, r3, fp, r2
 8027602:	b29b      	uxth	r3, r3
 8027604:	1c5a      	adds	r2, r3, #1
 8027606:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802760a:	121b      	asrs	r3, r3, #8
 802760c:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8027610:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8027614:	fb13 f101 	smulbb	r1, r3, r1
 8027618:	fb05 150b 	mla	r5, r5, fp, r1
 802761c:	b2ad      	uxth	r5, r5
 802761e:	1c69      	adds	r1, r5, #1
 8027620:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8027624:	122d      	asrs	r5, r5, #8
 8027626:	f80e 5c01 	strb.w	r5, [lr, #-1]
 802762a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802762c:	f10e 0e03 	add.w	lr, lr, #3
 8027630:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8027632:	4413      	add	r3, r2
 8027634:	932b      	str	r3, [sp, #172]	; 0xac
 8027636:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8027638:	441c      	add	r4, r3
 802763a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802763c:	3b01      	subs	r3, #1
 802763e:	9313      	str	r3, [sp, #76]	; 0x4c
 8027640:	e501      	b.n	8027046 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 8027642:	b150      	cbz	r0, 802765a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e6>
 8027644:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8027646:	58aa      	ldr	r2, [r5, r2]
 8027648:	25ff      	movs	r5, #255	; 0xff
 802764a:	ea4f 6912 	mov.w	r9, r2, lsr #24
 802764e:	9209      	str	r2, [sp, #36]	; 0x24
 8027650:	46ac      	mov	ip, r5
 8027652:	e6f3      	b.n	802743c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 8027654:	25ff      	movs	r5, #255	; 0xff
 8027656:	46a9      	mov	r9, r5
 8027658:	e6f0      	b.n	802743c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 802765a:	25ff      	movs	r5, #255	; 0xff
 802765c:	46a9      	mov	r9, r5
 802765e:	e7f7      	b.n	8027650 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6dc>
 8027660:	b019      	add	sp, #100	; 0x64
 8027662:	ecbd 8b08 	vpop	{d8-d11}
 8027666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0802766c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 802766c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027670:	b085      	sub	sp, #20
 8027672:	7888      	ldrb	r0, [r1, #2]
 8027674:	4691      	mov	r9, r2
 8027676:	9000      	str	r0, [sp, #0]
 8027678:	7848      	ldrb	r0, [r1, #1]
 802767a:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 802767e:	9001      	str	r0, [sp, #4]
 8027680:	7808      	ldrb	r0, [r1, #0]
 8027682:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8027686:	9002      	str	r0, [sp, #8]
 8027688:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 802768c:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8027690:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 8027694:	fb04 c603 	mla	r6, r4, r3, ip
 8027698:	2c00      	cmp	r4, #0
 802769a:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 802769e:	9a00      	ldr	r2, [sp, #0]
 80276a0:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80276a4:	9a01      	ldr	r2, [sp, #4]
 80276a6:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80276aa:	db3a      	blt.n	8027722 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 80276ac:	45a0      	cmp	r8, r4
 80276ae:	dd38      	ble.n	8027722 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 80276b0:	f1bc 0f00 	cmp.w	ip, #0
 80276b4:	db33      	blt.n	802771e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 80276b6:	4563      	cmp	r3, ip
 80276b8:	dd31      	ble.n	802771e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 80276ba:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 80276be:	f11c 0601 	adds.w	r6, ip, #1
 80276c2:	d431      	bmi.n	8027728 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 80276c4:	42b3      	cmp	r3, r6
 80276c6:	dd2f      	ble.n	8027728 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 80276c8:	b375      	cbz	r5, 8027728 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 80276ca:	f8de 6004 	ldr.w	r6, [lr, #4]
 80276ce:	3401      	adds	r4, #1
 80276d0:	d42e      	bmi.n	8027730 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 80276d2:	45a0      	cmp	r8, r4
 80276d4:	dd2c      	ble.n	8027730 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 80276d6:	b35f      	cbz	r7, 8027730 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 80276d8:	f1bc 0f00 	cmp.w	ip, #0
 80276dc:	db26      	blt.n	802772c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 80276de:	4563      	cmp	r3, ip
 80276e0:	dd24      	ble.n	802772c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 80276e2:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 80276e6:	f11c 0c01 	adds.w	ip, ip, #1
 80276ea:	d405      	bmi.n	80276f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80276ec:	4563      	cmp	r3, ip
 80276ee:	dd03      	ble.n	80276f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80276f0:	b115      	cbz	r5, 80276f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 80276f2:	3301      	adds	r3, #1
 80276f4:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 80276f8:	2d0f      	cmp	r5, #15
 80276fa:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80276fe:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8027702:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8027706:	ea4f 6810 	mov.w	r8, r0, lsr #24
 802770a:	d801      	bhi.n	8027710 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa4>
 802770c:	2f0f      	cmp	r7, #15
 802770e:	d911      	bls.n	8027734 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc8>
 8027710:	4b77      	ldr	r3, [pc, #476]	; (80278f0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x284>)
 8027712:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8027716:	4a77      	ldr	r2, [pc, #476]	; (80278f4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x288>)
 8027718:	4877      	ldr	r0, [pc, #476]	; (80278f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x28c>)
 802771a:	f003 f831 	bl	802a780 <__assert_func>
 802771e:	4602      	mov	r2, r0
 8027720:	e7cd      	b.n	80276be <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x52>
 8027722:	4606      	mov	r6, r0
 8027724:	4602      	mov	r2, r0
 8027726:	e7d2      	b.n	80276ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 8027728:	4606      	mov	r6, r0
 802772a:	e7d0      	b.n	80276ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 802772c:	4604      	mov	r4, r0
 802772e:	e7da      	b.n	80276e6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7a>
 8027730:	4604      	mov	r4, r0
 8027732:	e7e1      	b.n	80276f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8027734:	b2ab      	uxth	r3, r5
 8027736:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 802773a:	b2bf      	uxth	r7, r7
 802773c:	fb03 fe07 	mul.w	lr, r3, r7
 8027740:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8027744:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8027748:	eba3 0c0e 	sub.w	ip, r3, lr
 802774c:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8027750:	b2bf      	uxth	r7, r7
 8027752:	fa1f fc8c 	uxth.w	ip, ip
 8027756:	eba5 0507 	sub.w	r5, r5, r7
 802775a:	fb0c f30a 	mul.w	r3, ip, sl
 802775e:	b2ad      	uxth	r5, r5
 8027760:	fb05 330b 	mla	r3, r5, fp, r3
 8027764:	fb07 3309 	mla	r3, r7, r9, r3
 8027768:	fb0e 3308 	mla	r3, lr, r8, r3
 802776c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027770:	9303      	str	r3, [sp, #12]
 8027772:	d018      	beq.n	80277a6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x13a>
 8027774:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8027778:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802777c:	fb0b f303 	mul.w	r3, fp, r3
 8027780:	fb0b fb02 	mul.w	fp, fp, r2
 8027784:	0a1a      	lsrs	r2, r3, #8
 8027786:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 802778a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802778e:	441a      	add	r2, r3
 8027790:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8027794:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8027798:	0a12      	lsrs	r2, r2, #8
 802779a:	0a1b      	lsrs	r3, r3, #8
 802779c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80277a0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80277a4:	431a      	orrs	r2, r3
 80277a6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80277aa:	d019      	beq.n	80277e0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x174>
 80277ac:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 80277b0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80277b4:	fb0a fb0b 	mul.w	fp, sl, fp
 80277b8:	fb0a fa06 	mul.w	sl, sl, r6
 80277bc:	ea4f 261b 	mov.w	r6, fp, lsr #8
 80277c0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80277c4:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 80277c8:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80277cc:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80277d0:	445e      	add	r6, fp
 80277d2:	0a1b      	lsrs	r3, r3, #8
 80277d4:	0a36      	lsrs	r6, r6, #8
 80277d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80277da:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80277de:	431e      	orrs	r6, r3
 80277e0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80277e4:	d019      	beq.n	802781a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1ae>
 80277e6:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80277ea:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80277ee:	fb09 fa0a 	mul.w	sl, r9, sl
 80277f2:	fb09 f904 	mul.w	r9, r9, r4
 80277f6:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80277fa:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80277fe:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8027802:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8027806:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 802780a:	4454      	add	r4, sl
 802780c:	0a1b      	lsrs	r3, r3, #8
 802780e:	0a24      	lsrs	r4, r4, #8
 8027810:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027814:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8027818:	431c      	orrs	r4, r3
 802781a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802781e:	d019      	beq.n	8027854 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1e8>
 8027820:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8027824:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8027828:	fb08 f909 	mul.w	r9, r8, r9
 802782c:	fb08 f800 	mul.w	r8, r8, r0
 8027830:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8027834:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8027838:	f508 7380 	add.w	r3, r8, #256	; 0x100
 802783c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8027840:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8027844:	4448      	add	r0, r9
 8027846:	0a1b      	lsrs	r3, r3, #8
 8027848:	0a00      	lsrs	r0, r0, #8
 802784a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802784e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8027852:	4318      	orrs	r0, r3
 8027854:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8027858:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802785c:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8027860:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027864:	fb0c f808 	mul.w	r8, ip, r8
 8027868:	fb0c f606 	mul.w	r6, ip, r6
 802786c:	fb05 8803 	mla	r8, r5, r3, r8
 8027870:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8027874:	fb05 6202 	mla	r2, r5, r2, r6
 8027878:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802787c:	fb07 8803 	mla	r8, r7, r3, r8
 8027880:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8027884:	fb07 2704 	mla	r7, r7, r4, r2
 8027888:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802788c:	fb0e 8303 	mla	r3, lr, r3, r8
 8027890:	fb0e 7e00 	mla	lr, lr, r0, r7
 8027894:	9802      	ldr	r0, [sp, #8]
 8027896:	0a1b      	lsrs	r3, r3, #8
 8027898:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802789c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80278a0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80278a4:	ea43 0e0e 	orr.w	lr, r3, lr
 80278a8:	9b03      	ldr	r3, [sp, #12]
 80278aa:	43db      	mvns	r3, r3
 80278ac:	b2db      	uxtb	r3, r3
 80278ae:	4358      	muls	r0, r3
 80278b0:	1c42      	adds	r2, r0, #1
 80278b2:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80278b6:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 80278ba:	700a      	strb	r2, [r1, #0]
 80278bc:	9a01      	ldr	r2, [sp, #4]
 80278be:	435a      	muls	r2, r3
 80278c0:	1c50      	adds	r0, r2, #1
 80278c2:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80278c6:	ea4f 221e 	mov.w	r2, lr, lsr #8
 80278ca:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 80278ce:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80278d2:	704a      	strb	r2, [r1, #1]
 80278d4:	9a00      	ldr	r2, [sp, #0]
 80278d6:	435a      	muls	r2, r3
 80278d8:	4613      	mov	r3, r2
 80278da:	3201      	adds	r2, #1
 80278dc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80278e0:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 80278e4:	f881 e002 	strb.w	lr, [r1, #2]
 80278e8:	b005      	add	sp, #20
 80278ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80278ee:	bf00      	nop
 80278f0:	0802fd97 	.word	0x0802fd97
 80278f4:	0803028e 	.word	0x0803028e
 80278f8:	0802fe60 	.word	0x0802fe60

080278fc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80278fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027900:	ed2d 8b08 	vpush	{d8-d11}
 8027904:	b097      	sub	sp, #92	; 0x5c
 8027906:	eeb0 aa40 	vmov.f32	s20, s0
 802790a:	eef0 9a60 	vmov.f32	s19, s1
 802790e:	9306      	str	r3, [sp, #24]
 8027910:	eeb0 9a41 	vmov.f32	s18, s2
 8027914:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 8027918:	eeb0 8a62 	vmov.f32	s16, s5
 802791c:	9214      	str	r2, [sp, #80]	; 0x50
 802791e:	eef0 8a43 	vmov.f32	s17, s6
 8027922:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8027924:	eef0 ba44 	vmov.f32	s23, s8
 8027928:	9307      	str	r3, [sp, #28]
 802792a:	eeb0 ba64 	vmov.f32	s22, s9
 802792e:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8027932:	eef0 aa45 	vmov.f32	s21, s10
 8027936:	9015      	str	r0, [sp, #84]	; 0x54
 8027938:	9112      	str	r1, [sp, #72]	; 0x48
 802793a:	6850      	ldr	r0, [r2, #4]
 802793c:	9310      	str	r3, [sp, #64]	; 0x40
 802793e:	6812      	ldr	r2, [r2, #0]
 8027940:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8027942:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8027946:	fb00 1303 	mla	r3, r0, r3, r1
 802794a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802794e:	18d3      	adds	r3, r2, r3
 8027950:	930a      	str	r3, [sp, #40]	; 0x28
 8027952:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8027954:	681b      	ldr	r3, [r3, #0]
 8027956:	9311      	str	r3, [sp, #68]	; 0x44
 8027958:	9b07      	ldr	r3, [sp, #28]
 802795a:	009b      	lsls	r3, r3, #2
 802795c:	930e      	str	r3, [sp, #56]	; 0x38
 802795e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8027960:	2b00      	cmp	r3, #0
 8027962:	dc03      	bgt.n	802796c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8027964:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8027966:	2b00      	cmp	r3, #0
 8027968:	f340 832e 	ble.w	8027fc8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 802796c:	9b06      	ldr	r3, [sp, #24]
 802796e:	2b00      	cmp	r3, #0
 8027970:	f340 8186 	ble.w	8027c80 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x384>
 8027974:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8027976:	1423      	asrs	r3, r4, #16
 8027978:	1412      	asrs	r2, r2, #16
 802797a:	d42f      	bmi.n	80279dc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 802797c:	1c51      	adds	r1, r2, #1
 802797e:	9807      	ldr	r0, [sp, #28]
 8027980:	4288      	cmp	r0, r1
 8027982:	dd2e      	ble.n	80279e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8027984:	2b00      	cmp	r3, #0
 8027986:	db2c      	blt.n	80279e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8027988:	1c59      	adds	r1, r3, #1
 802798a:	9810      	ldr	r0, [sp, #64]	; 0x40
 802798c:	4288      	cmp	r0, r1
 802798e:	dd28      	ble.n	80279e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8027990:	9b06      	ldr	r3, [sp, #24]
 8027992:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8027994:	3b01      	subs	r3, #1
 8027996:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8027998:	fb02 1203 	mla	r2, r2, r3, r1
 802799c:	1412      	asrs	r2, r2, #16
 802799e:	d42b      	bmi.n	80279f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80279a0:	3201      	adds	r2, #1
 80279a2:	9907      	ldr	r1, [sp, #28]
 80279a4:	4291      	cmp	r1, r2
 80279a6:	dd27      	ble.n	80279f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80279a8:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80279aa:	fb02 4303 	mla	r3, r2, r3, r4
 80279ae:	141b      	asrs	r3, r3, #16
 80279b0:	d422      	bmi.n	80279f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80279b2:	3301      	adds	r3, #1
 80279b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80279b6:	429a      	cmp	r2, r3
 80279b8:	dd1e      	ble.n	80279f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80279ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80279bc:	f8dd b018 	ldr.w	fp, [sp, #24]
 80279c0:	1cdd      	adds	r5, r3, #3
 80279c2:	f1bb 0f00 	cmp.w	fp, #0
 80279c6:	f300 81c4 	bgt.w	8027d52 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 80279ca:	9b06      	ldr	r3, [sp, #24]
 80279cc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80279d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80279d2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80279d6:	4423      	add	r3, r4
 80279d8:	930a      	str	r3, [sp, #40]	; 0x28
 80279da:	e153      	b.n	8027c84 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 80279dc:	1c51      	adds	r1, r2, #1
 80279de:	f040 8142 	bne.w	8027c66 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 80279e2:	9907      	ldr	r1, [sp, #28]
 80279e4:	428a      	cmp	r2, r1
 80279e6:	f280 813e 	bge.w	8027c66 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 80279ea:	1c5a      	adds	r2, r3, #1
 80279ec:	f2c0 813b 	blt.w	8027c66 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 80279f0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80279f2:	4293      	cmp	r3, r2
 80279f4:	f280 8137 	bge.w	8027c66 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 80279f8:	9b06      	ldr	r3, [sp, #24]
 80279fa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80279fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80279fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8027a00:	2b00      	cmp	r3, #0
 8027a02:	dde2      	ble.n	80279ca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 8027a04:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8027a06:	1423      	asrs	r3, r4, #16
 8027a08:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8027a0a:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8027a0e:	1409      	asrs	r1, r1, #16
 8027a10:	f3c2 3203 	ubfx	r2, r2, #12, #4
 8027a14:	f100 8187 	bmi.w	8027d26 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42a>
 8027a18:	1c4e      	adds	r6, r1, #1
 8027a1a:	9f07      	ldr	r7, [sp, #28]
 8027a1c:	42b7      	cmp	r7, r6
 8027a1e:	f340 8184 	ble.w	8027d2a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8027a22:	2b00      	cmp	r3, #0
 8027a24:	f2c0 8181 	blt.w	8027d2a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8027a28:	1c5e      	adds	r6, r3, #1
 8027a2a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8027a2c:	42b7      	cmp	r7, r6
 8027a2e:	f340 817c 	ble.w	8027d2a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8027a32:	9e07      	ldr	r6, [sp, #28]
 8027a34:	fb03 1306 	mla	r3, r3, r6, r1
 8027a38:	9911      	ldr	r1, [sp, #68]	; 0x44
 8027a3a:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 8027a3e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8027a42:	0e1f      	lsrs	r7, r3, #24
 8027a44:	2a00      	cmp	r2, #0
 8027a46:	f000 815c 	beq.w	8027d02 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 8027a4a:	6871      	ldr	r1, [r6, #4]
 8027a4c:	910b      	str	r1, [sp, #44]	; 0x2c
 8027a4e:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8027a52:	2800      	cmp	r0, #0
 8027a54:	f000 815e 	beq.w	8027d14 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x418>
 8027a58:	990e      	ldr	r1, [sp, #56]	; 0x38
 8027a5a:	eb06 0c01 	add.w	ip, r6, r1
 8027a5e:	5876      	ldr	r6, [r6, r1]
 8027a60:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8027a64:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8027a68:	9608      	str	r6, [sp, #32]
 8027a6a:	0e0e      	lsrs	r6, r1, #24
 8027a6c:	910c      	str	r1, [sp, #48]	; 0x30
 8027a6e:	b292      	uxth	r2, r2
 8027a70:	b280      	uxth	r0, r0
 8027a72:	fb02 fa00 	mul.w	sl, r2, r0
 8027a76:	0112      	lsls	r2, r2, #4
 8027a78:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8027a7c:	eba2 080a 	sub.w	r8, r2, sl
 8027a80:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8027a84:	b280      	uxth	r0, r0
 8027a86:	fa1f f888 	uxth.w	r8, r8
 8027a8a:	1a09      	subs	r1, r1, r0
 8027a8c:	fb08 f20e 	mul.w	r2, r8, lr
 8027a90:	b289      	uxth	r1, r1
 8027a92:	fb01 2207 	mla	r2, r1, r7, r2
 8027a96:	fb00 2209 	mla	r2, r0, r9, r2
 8027a9a:	fb0a 2206 	mla	r2, sl, r6, r2
 8027a9e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8027aa2:	2a00      	cmp	r2, #0
 8027aa4:	f000 80d4 	beq.w	8027c50 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8027aa8:	2fff      	cmp	r7, #255	; 0xff
 8027aaa:	d01a      	beq.n	8027ae2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e6>
 8027aac:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8027ab0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027ab4:	fb07 fc0c 	mul.w	ip, r7, ip
 8027ab8:	435f      	muls	r7, r3
 8027aba:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8027abe:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8027ac2:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 8027ac6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027aca:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 8027ace:	4463      	add	r3, ip
 8027ad0:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8027ad4:	0a1b      	lsrs	r3, r3, #8
 8027ad6:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8027ada:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027ade:	ea43 030b 	orr.w	r3, r3, fp
 8027ae2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8027ae6:	d01e      	beq.n	8027b26 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 8027ae8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8027aea:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 8027aee:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8027af2:	fb0e fb0b 	mul.w	fp, lr, fp
 8027af6:	fb0e fe07 	mul.w	lr, lr, r7
 8027afa:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8027afe:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027b02:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8027b06:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027b0a:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8027b0e:	44dc      	add	ip, fp
 8027b10:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027b14:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027b18:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8027b1c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027b20:	ea4c 070e 	orr.w	r7, ip, lr
 8027b24:	970b      	str	r7, [sp, #44]	; 0x2c
 8027b26:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8027b2a:	d01e      	beq.n	8027b6a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8027b2c:	9f08      	ldr	r7, [sp, #32]
 8027b2e:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8027b32:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8027b36:	fb09 fe0e 	mul.w	lr, r9, lr
 8027b3a:	fb09 f907 	mul.w	r9, r9, r7
 8027b3e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8027b42:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8027b46:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8027b4a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027b4e:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8027b52:	44f4      	add	ip, lr
 8027b54:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027b58:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027b5c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8027b60:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027b64:	ea4c 0709 	orr.w	r7, ip, r9
 8027b68:	9708      	str	r7, [sp, #32]
 8027b6a:	2eff      	cmp	r6, #255	; 0xff
 8027b6c:	d01c      	beq.n	8027ba8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 8027b6e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8027b70:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8027b74:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8027b78:	fb06 fe0e 	mul.w	lr, r6, lr
 8027b7c:	437e      	muls	r6, r7
 8027b7e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8027b82:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8027b86:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8027b8a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027b8e:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8027b92:	44f4      	add	ip, lr
 8027b94:	0a36      	lsrs	r6, r6, #8
 8027b96:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027b9a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8027b9e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027ba2:	ea4c 0606 	orr.w	r6, ip, r6
 8027ba6:	960c      	str	r6, [sp, #48]	; 0x30
 8027ba8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8027baa:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8027bae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027bb2:	2aff      	cmp	r2, #255	; 0xff
 8027bb4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8027bb8:	fb08 f606 	mul.w	r6, r8, r6
 8027bbc:	fb01 6607 	mla	r6, r1, r7, r6
 8027bc0:	9f08      	ldr	r7, [sp, #32]
 8027bc2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8027bc6:	fb00 6607 	mla	r6, r0, r7, r6
 8027bca:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8027bcc:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8027bd0:	fb0a 6607 	mla	r6, sl, r7, r6
 8027bd4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8027bd6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8027bda:	ea4f 2616 	mov.w	r6, r6, lsr #8
 8027bde:	fb08 f807 	mul.w	r8, r8, r7
 8027be2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8027be6:	fb01 8303 	mla	r3, r1, r3, r8
 8027bea:	9908      	ldr	r1, [sp, #32]
 8027bec:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8027bf0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8027bf2:	fb00 330c 	mla	r3, r0, ip, r3
 8027bf6:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8027bfa:	fb0a 3a00 	mla	sl, sl, r0, r3
 8027bfe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027c02:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027c06:	ea46 060a 	orr.w	r6, r6, sl
 8027c0a:	b2f0      	uxtb	r0, r6
 8027c0c:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8027c10:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8027c14:	f000 8084 	beq.w	8027d20 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 8027c18:	43d2      	mvns	r2, r2
 8027c1a:	782b      	ldrb	r3, [r5, #0]
 8027c1c:	b2d2      	uxtb	r2, r2
 8027c1e:	fb03 f702 	mul.w	r7, r3, r2
 8027c22:	1c7b      	adds	r3, r7, #1
 8027c24:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8027c28:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8027c2c:	702b      	strb	r3, [r5, #0]
 8027c2e:	786b      	ldrb	r3, [r5, #1]
 8027c30:	fb03 f002 	mul.w	r0, r3, r2
 8027c34:	1c43      	adds	r3, r0, #1
 8027c36:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8027c3a:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8027c3e:	706b      	strb	r3, [r5, #1]
 8027c40:	78ab      	ldrb	r3, [r5, #2]
 8027c42:	4353      	muls	r3, r2
 8027c44:	1c5a      	adds	r2, r3, #1
 8027c46:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8027c4a:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8027c4e:	70ae      	strb	r6, [r5, #2]
 8027c50:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027c52:	3503      	adds	r5, #3
 8027c54:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8027c56:	4413      	add	r3, r2
 8027c58:	9329      	str	r3, [sp, #164]	; 0xa4
 8027c5a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027c5c:	441c      	add	r4, r3
 8027c5e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8027c60:	3b01      	subs	r3, #1
 8027c62:	9313      	str	r3, [sp, #76]	; 0x4c
 8027c64:	e6cb      	b.n	80279fe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 8027c66:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027c68:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8027c6a:	4413      	add	r3, r2
 8027c6c:	9329      	str	r3, [sp, #164]	; 0xa4
 8027c6e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027c70:	441c      	add	r4, r3
 8027c72:	9b06      	ldr	r3, [sp, #24]
 8027c74:	3b01      	subs	r3, #1
 8027c76:	9306      	str	r3, [sp, #24]
 8027c78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027c7a:	3303      	adds	r3, #3
 8027c7c:	930a      	str	r3, [sp, #40]	; 0x28
 8027c7e:	e675      	b.n	802796c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8027c80:	f47f ae86 	bne.w	8027990 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8027c84:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8027c86:	2b00      	cmp	r3, #0
 8027c88:	f340 819e 	ble.w	8027fc8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 8027c8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027c90:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027c92:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8027c96:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8027c9a:	eef0 6a48 	vmov.f32	s13, s16
 8027c9e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8027ca2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8027ca6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027caa:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8027cae:	eef0 6a68 	vmov.f32	s13, s17
 8027cb2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027cb6:	ee16 4a90 	vmov	r4, s13
 8027cba:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8027cbe:	ee69 7a27 	vmul.f32	s15, s18, s15
 8027cc2:	ee37 8a48 	vsub.f32	s16, s14, s16
 8027cc6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8027cca:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8027cce:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8027cd2:	ee18 2a10 	vmov	r2, s16
 8027cd6:	eeb0 8a47 	vmov.f32	s16, s14
 8027cda:	fb92 f3f3 	sdiv	r3, r2, r3
 8027cde:	ee18 2a90 	vmov	r2, s17
 8027ce2:	932b      	str	r3, [sp, #172]	; 0xac
 8027ce4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027ce6:	eef0 8a67 	vmov.f32	s17, s15
 8027cea:	fb92 f3f3 	sdiv	r3, r2, r3
 8027cee:	932c      	str	r3, [sp, #176]	; 0xb0
 8027cf0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8027cf2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8027cf4:	3b01      	subs	r3, #1
 8027cf6:	9312      	str	r3, [sp, #72]	; 0x48
 8027cf8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027cfa:	bf08      	it	eq
 8027cfc:	4613      	moveq	r3, r2
 8027cfe:	9306      	str	r3, [sp, #24]
 8027d00:	e62d      	b.n	802795e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 8027d02:	b150      	cbz	r0, 8027d1a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41e>
 8027d04:	990e      	ldr	r1, [sp, #56]	; 0x38
 8027d06:	5871      	ldr	r1, [r6, r1]
 8027d08:	26ff      	movs	r6, #255	; 0xff
 8027d0a:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8027d0e:	9108      	str	r1, [sp, #32]
 8027d10:	46b6      	mov	lr, r6
 8027d12:	e6ac      	b.n	8027a6e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 8027d14:	26ff      	movs	r6, #255	; 0xff
 8027d16:	46b1      	mov	r9, r6
 8027d18:	e6a9      	b.n	8027a6e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 8027d1a:	26ff      	movs	r6, #255	; 0xff
 8027d1c:	46b1      	mov	r9, r6
 8027d1e:	e7f7      	b.n	8027d10 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 8027d20:	7028      	strb	r0, [r5, #0]
 8027d22:	7069      	strb	r1, [r5, #1]
 8027d24:	e793      	b.n	8027c4e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x352>
 8027d26:	1c4f      	adds	r7, r1, #1
 8027d28:	d192      	bne.n	8027c50 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8027d2a:	9e07      	ldr	r6, [sp, #28]
 8027d2c:	428e      	cmp	r6, r1
 8027d2e:	dd8f      	ble.n	8027c50 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8027d30:	1c5e      	adds	r6, r3, #1
 8027d32:	db8d      	blt.n	8027c50 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8027d34:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8027d36:	429e      	cmp	r6, r3
 8027d38:	dd8a      	ble.n	8027c50 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8027d3a:	9600      	str	r6, [sp, #0]
 8027d3c:	e9cd 2003 	strd	r2, r0, [sp, #12]
 8027d40:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8027d44:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8027d46:	4629      	mov	r1, r5
 8027d48:	9b07      	ldr	r3, [sp, #28]
 8027d4a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8027d4c:	f7ff fc8e 	bl	802766c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8027d50:	e77e      	b.n	8027c50 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8027d52:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027d54:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8027d58:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8027d5a:	9e07      	ldr	r6, [sp, #28]
 8027d5c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8027d60:	1409      	asrs	r1, r1, #16
 8027d62:	1423      	asrs	r3, r4, #16
 8027d64:	fb06 1303 	mla	r3, r6, r3, r1
 8027d68:	9911      	ldr	r1, [sp, #68]	; 0x44
 8027d6a:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 8027d6e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8027d72:	0e1f      	lsrs	r7, r3, #24
 8027d74:	2a00      	cmp	r2, #0
 8027d76:	f000 8113 	beq.w	8027fa0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a4>
 8027d7a:	6871      	ldr	r1, [r6, #4]
 8027d7c:	910d      	str	r1, [sp, #52]	; 0x34
 8027d7e:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8027d82:	2800      	cmp	r0, #0
 8027d84:	f000 8115 	beq.w	8027fb2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 8027d88:	990e      	ldr	r1, [sp, #56]	; 0x38
 8027d8a:	eb06 0c01 	add.w	ip, r6, r1
 8027d8e:	5876      	ldr	r6, [r6, r1]
 8027d90:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8027d94:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8027d98:	9609      	str	r6, [sp, #36]	; 0x24
 8027d9a:	0e0e      	lsrs	r6, r1, #24
 8027d9c:	910f      	str	r1, [sp, #60]	; 0x3c
 8027d9e:	b292      	uxth	r2, r2
 8027da0:	b280      	uxth	r0, r0
 8027da2:	fb02 fa00 	mul.w	sl, r2, r0
 8027da6:	0112      	lsls	r2, r2, #4
 8027da8:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8027dac:	eba2 080a 	sub.w	r8, r2, sl
 8027db0:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8027db4:	b280      	uxth	r0, r0
 8027db6:	fa1f f888 	uxth.w	r8, r8
 8027dba:	1a09      	subs	r1, r1, r0
 8027dbc:	fb08 f20e 	mul.w	r2, r8, lr
 8027dc0:	b289      	uxth	r1, r1
 8027dc2:	fb01 2207 	mla	r2, r1, r7, r2
 8027dc6:	fb00 2209 	mla	r2, r0, r9, r2
 8027dca:	fb0a 2206 	mla	r2, sl, r6, r2
 8027dce:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8027dd2:	2a00      	cmp	r2, #0
 8027dd4:	f000 80da 	beq.w	8027f8c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x690>
 8027dd8:	2fff      	cmp	r7, #255	; 0xff
 8027dda:	d01a      	beq.n	8027e12 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x516>
 8027ddc:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8027de0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027de4:	fb07 fc0c 	mul.w	ip, r7, ip
 8027de8:	435f      	muls	r7, r3
 8027dea:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8027dee:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8027df2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027df6:	4463      	add	r3, ip
 8027df8:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 8027dfc:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8027e00:	0a1b      	lsrs	r3, r3, #8
 8027e02:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027e06:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027e0a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8027e0e:	ea43 030c 	orr.w	r3, r3, ip
 8027e12:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8027e16:	d021      	beq.n	8027e5c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x560>
 8027e18:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8027e1a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8027e1e:	fb0e f707 	mul.w	r7, lr, r7
 8027e22:	9713      	str	r7, [sp, #76]	; 0x4c
 8027e24:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8027e26:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8027e2a:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8027e2c:	fb0e fe0c 	mul.w	lr, lr, ip
 8027e30:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027e34:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8027e38:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027e3c:	44bc      	add	ip, r7
 8027e3e:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8027e42:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8027e46:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027e4a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027e4e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027e52:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8027e56:	ea4c 070e 	orr.w	r7, ip, lr
 8027e5a:	970d      	str	r7, [sp, #52]	; 0x34
 8027e5c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8027e60:	d01e      	beq.n	8027ea0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a4>
 8027e62:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8027e64:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8027e68:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8027e6c:	fb09 fe0e 	mul.w	lr, r9, lr
 8027e70:	fb09 f907 	mul.w	r9, r9, r7
 8027e74:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8027e78:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8027e7c:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8027e80:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027e84:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8027e88:	44f4      	add	ip, lr
 8027e8a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027e8e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027e92:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8027e96:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027e9a:	ea4c 0709 	orr.w	r7, ip, r9
 8027e9e:	9709      	str	r7, [sp, #36]	; 0x24
 8027ea0:	2eff      	cmp	r6, #255	; 0xff
 8027ea2:	d01c      	beq.n	8027ede <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e2>
 8027ea4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8027ea6:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8027eaa:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8027eae:	fb06 fe0e 	mul.w	lr, r6, lr
 8027eb2:	437e      	muls	r6, r7
 8027eb4:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8027eb8:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8027ebc:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8027ec0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027ec4:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8027ec8:	44f4      	add	ip, lr
 8027eca:	0a36      	lsrs	r6, r6, #8
 8027ecc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027ed0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8027ed4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027ed8:	ea4c 0606 	orr.w	r6, ip, r6
 8027edc:	960f      	str	r6, [sp, #60]	; 0x3c
 8027ede:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8027ee0:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8027ee4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027ee8:	2aff      	cmp	r2, #255	; 0xff
 8027eea:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8027eee:	fb08 f606 	mul.w	r6, r8, r6
 8027ef2:	fb01 6607 	mla	r6, r1, r7, r6
 8027ef6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8027ef8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8027efc:	fb00 6607 	mla	r6, r0, r7, r6
 8027f00:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8027f02:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8027f06:	fb0a 6607 	mla	r6, sl, r7, r6
 8027f0a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8027f0c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8027f10:	ea4f 2616 	mov.w	r6, r6, lsr #8
 8027f14:	fb08 f807 	mul.w	r8, r8, r7
 8027f18:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8027f1c:	fb01 8303 	mla	r3, r1, r3, r8
 8027f20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8027f22:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8027f26:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8027f28:	fb00 330c 	mla	r3, r0, ip, r3
 8027f2c:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8027f30:	fb0a 3e0e 	mla	lr, sl, lr, r3
 8027f34:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027f38:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8027f3c:	ea46 060e 	orr.w	r6, r6, lr
 8027f40:	b2f0      	uxtb	r0, r6
 8027f42:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8027f46:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8027f4a:	d038      	beq.n	8027fbe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c2>
 8027f4c:	43d2      	mvns	r2, r2
 8027f4e:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 8027f52:	b2d2      	uxtb	r2, r2
 8027f54:	4357      	muls	r7, r2
 8027f56:	1c7b      	adds	r3, r7, #1
 8027f58:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8027f5c:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8027f60:	f815 0c02 	ldrb.w	r0, [r5, #-2]
 8027f64:	4350      	muls	r0, r2
 8027f66:	f805 3c03 	strb.w	r3, [r5, #-3]
 8027f6a:	1c43      	adds	r3, r0, #1
 8027f6c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8027f70:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8027f74:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8027f78:	4353      	muls	r3, r2
 8027f7a:	f805 1c02 	strb.w	r1, [r5, #-2]
 8027f7e:	1c5a      	adds	r2, r3, #1
 8027f80:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8027f84:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8027f88:	f805 6c01 	strb.w	r6, [r5, #-1]
 8027f8c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027f8e:	3503      	adds	r5, #3
 8027f90:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8027f92:	f10b 3bff 	add.w	fp, fp, #4294967295
 8027f96:	4413      	add	r3, r2
 8027f98:	9329      	str	r3, [sp, #164]	; 0xa4
 8027f9a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027f9c:	441c      	add	r4, r3
 8027f9e:	e510      	b.n	80279c2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc6>
 8027fa0:	b150      	cbz	r0, 8027fb8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6bc>
 8027fa2:	990e      	ldr	r1, [sp, #56]	; 0x38
 8027fa4:	5871      	ldr	r1, [r6, r1]
 8027fa6:	26ff      	movs	r6, #255	; 0xff
 8027fa8:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8027fac:	9109      	str	r1, [sp, #36]	; 0x24
 8027fae:	46b6      	mov	lr, r6
 8027fb0:	e6f5      	b.n	8027d9e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8027fb2:	26ff      	movs	r6, #255	; 0xff
 8027fb4:	46b1      	mov	r9, r6
 8027fb6:	e6f2      	b.n	8027d9e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8027fb8:	26ff      	movs	r6, #255	; 0xff
 8027fba:	46b1      	mov	r9, r6
 8027fbc:	e7f7      	b.n	8027fae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b2>
 8027fbe:	f805 0c03 	strb.w	r0, [r5, #-3]
 8027fc2:	f805 1c02 	strb.w	r1, [r5, #-2]
 8027fc6:	e7df      	b.n	8027f88 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68c>
 8027fc8:	b017      	add	sp, #92	; 0x5c
 8027fca:	ecbd 8b08 	vpop	{d8-d11}
 8027fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08027fd4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8027fd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027fd8:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8027fdc:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8027fe0:	2800      	cmp	r0, #0
 8027fe2:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8027fe6:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8027fea:	fb0c 0e03 	mla	lr, ip, r3, r0
 8027fee:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8027ff2:	db6b      	blt.n	80280cc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8027ff4:	4580      	cmp	r8, r0
 8027ff6:	dd69      	ble.n	80280cc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8027ff8:	f1bc 0f00 	cmp.w	ip, #0
 8027ffc:	db66      	blt.n	80280cc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8027ffe:	45e1      	cmp	r9, ip
 8028000:	dd64      	ble.n	80280cc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8028002:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8028006:	f01e 0f01 	tst.w	lr, #1
 802800a:	5d16      	ldrb	r6, [r2, r4]
 802800c:	bf0c      	ite	eq
 802800e:	f006 060f 	andeq.w	r6, r6, #15
 8028012:	1136      	asrne	r6, r6, #4
 8028014:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8028018:	b2f6      	uxtb	r6, r6
 802801a:	f110 0a01 	adds.w	sl, r0, #1
 802801e:	d457      	bmi.n	80280d0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8028020:	45d0      	cmp	r8, sl
 8028022:	dd55      	ble.n	80280d0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8028024:	f1bc 0f00 	cmp.w	ip, #0
 8028028:	db52      	blt.n	80280d0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 802802a:	45e1      	cmp	r9, ip
 802802c:	dd50      	ble.n	80280d0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 802802e:	2f00      	cmp	r7, #0
 8028030:	f000 80ac 	beq.w	802818c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 8028034:	f10e 0b01 	add.w	fp, lr, #1
 8028038:	ea4f 045b 	mov.w	r4, fp, lsr #1
 802803c:	f01b 0f01 	tst.w	fp, #1
 8028040:	5d14      	ldrb	r4, [r2, r4]
 8028042:	bf0c      	ite	eq
 8028044:	f004 040f 	andeq.w	r4, r4, #15
 8028048:	1124      	asrne	r4, r4, #4
 802804a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802804e:	b2e4      	uxtb	r4, r4
 8028050:	2d00      	cmp	r5, #0
 8028052:	f000 8096 	beq.w	8028182 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 8028056:	2800      	cmp	r0, #0
 8028058:	f10c 0c01 	add.w	ip, ip, #1
 802805c:	db3c      	blt.n	80280d8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 802805e:	4580      	cmp	r8, r0
 8028060:	dd3a      	ble.n	80280d8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8028062:	f1bc 0f00 	cmp.w	ip, #0
 8028066:	db37      	blt.n	80280d8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8028068:	45e1      	cmp	r9, ip
 802806a:	dd35      	ble.n	80280d8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 802806c:	eb03 0b0e 	add.w	fp, r3, lr
 8028070:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8028074:	f01b 0f01 	tst.w	fp, #1
 8028078:	5c10      	ldrb	r0, [r2, r0]
 802807a:	bf0c      	ite	eq
 802807c:	f000 000f 	andeq.w	r0, r0, #15
 8028080:	1100      	asrne	r0, r0, #4
 8028082:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8028086:	b2c0      	uxtb	r0, r0
 8028088:	f1ba 0f00 	cmp.w	sl, #0
 802808c:	db26      	blt.n	80280dc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 802808e:	45d0      	cmp	r8, sl
 8028090:	dd24      	ble.n	80280dc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8028092:	f1bc 0f00 	cmp.w	ip, #0
 8028096:	db21      	blt.n	80280dc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8028098:	45e1      	cmp	r9, ip
 802809a:	dd1f      	ble.n	80280dc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 802809c:	b307      	cbz	r7, 80280e0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 802809e:	3301      	adds	r3, #1
 80280a0:	449e      	add	lr, r3
 80280a2:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80280a6:	f01e 0f01 	tst.w	lr, #1
 80280aa:	5cd3      	ldrb	r3, [r2, r3]
 80280ac:	bf0c      	ite	eq
 80280ae:	f003 030f 	andeq.w	r3, r3, #15
 80280b2:	111b      	asrne	r3, r3, #4
 80280b4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80280b8:	b2db      	uxtb	r3, r3
 80280ba:	2f0f      	cmp	r7, #15
 80280bc:	d911      	bls.n	80280e2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 80280be:	4b35      	ldr	r3, [pc, #212]	; (8028194 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 80280c0:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80280c4:	4a34      	ldr	r2, [pc, #208]	; (8028198 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 80280c6:	4835      	ldr	r0, [pc, #212]	; (802819c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 80280c8:	f002 fb5a 	bl	802a780 <__assert_func>
 80280cc:	2600      	movs	r6, #0
 80280ce:	e7a4      	b.n	802801a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 80280d0:	2400      	movs	r4, #0
 80280d2:	e7bd      	b.n	8028050 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 80280d4:	463c      	mov	r4, r7
 80280d6:	e7be      	b.n	8028056 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 80280d8:	2000      	movs	r0, #0
 80280da:	e7d5      	b.n	8028088 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 80280dc:	2300      	movs	r3, #0
 80280de:	e7ec      	b.n	80280ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 80280e0:	463b      	mov	r3, r7
 80280e2:	2d0f      	cmp	r5, #15
 80280e4:	d8eb      	bhi.n	80280be <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 80280e6:	b2bf      	uxth	r7, r7
 80280e8:	b2ad      	uxth	r5, r5
 80280ea:	fb07 f205 	mul.w	r2, r7, r5
 80280ee:	013f      	lsls	r7, r7, #4
 80280f0:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 80280f4:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 80280f8:	1abf      	subs	r7, r7, r2
 80280fa:	b2ad      	uxth	r5, r5
 80280fc:	b2bf      	uxth	r7, r7
 80280fe:	ebac 0c05 	sub.w	ip, ip, r5
 8028102:	437c      	muls	r4, r7
 8028104:	fa1f fc8c 	uxth.w	ip, ip
 8028108:	fb06 440c 	mla	r4, r6, ip, r4
 802810c:	fb05 4400 	mla	r4, r5, r0, r4
 8028110:	fb02 4203 	mla	r2, r2, r3, r4
 8028114:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8028118:	b38a      	cbz	r2, 802817e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 802811a:	4b21      	ldr	r3, [pc, #132]	; (80281a0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 802811c:	681c      	ldr	r4, [r3, #0]
 802811e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8028122:	b2e5      	uxtb	r5, r4
 8028124:	4353      	muls	r3, r2
 8028126:	1c5a      	adds	r2, r3, #1
 8028128:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802812c:	1212      	asrs	r2, r2, #8
 802812e:	b290      	uxth	r0, r2
 8028130:	43d2      	mvns	r2, r2
 8028132:	fb15 f500 	smulbb	r5, r5, r0
 8028136:	b2d3      	uxtb	r3, r2
 8028138:	780a      	ldrb	r2, [r1, #0]
 802813a:	fb02 5203 	mla	r2, r2, r3, r5
 802813e:	b292      	uxth	r2, r2
 8028140:	1c55      	adds	r5, r2, #1
 8028142:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8028146:	784d      	ldrb	r5, [r1, #1]
 8028148:	fb15 f503 	smulbb	r5, r5, r3
 802814c:	1212      	asrs	r2, r2, #8
 802814e:	700a      	strb	r2, [r1, #0]
 8028150:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8028154:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8028158:	fb02 5200 	mla	r2, r2, r0, r5
 802815c:	b292      	uxth	r2, r2
 802815e:	1c55      	adds	r5, r2, #1
 8028160:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8028164:	1212      	asrs	r2, r2, #8
 8028166:	704a      	strb	r2, [r1, #1]
 8028168:	788a      	ldrb	r2, [r1, #2]
 802816a:	fb12 f303 	smulbb	r3, r2, r3
 802816e:	fb04 3300 	mla	r3, r4, r0, r3
 8028172:	b29b      	uxth	r3, r3
 8028174:	1c5a      	adds	r2, r3, #1
 8028176:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802817a:	121b      	asrs	r3, r3, #8
 802817c:	708b      	strb	r3, [r1, #2]
 802817e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028182:	2f0f      	cmp	r7, #15
 8028184:	d89b      	bhi.n	80280be <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8028186:	462b      	mov	r3, r5
 8028188:	4628      	mov	r0, r5
 802818a:	e7ac      	b.n	80280e6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 802818c:	2d00      	cmp	r5, #0
 802818e:	d1a1      	bne.n	80280d4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 8028190:	462c      	mov	r4, r5
 8028192:	e7f8      	b.n	8028186 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 8028194:	0802fd97 	.word	0x0802fd97
 8028198:	0803028e 	.word	0x0803028e
 802819c:	0802fe60 	.word	0x0802fe60
 80281a0:	2000bf90 	.word	0x2000bf90

080281a4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80281a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80281a8:	ed2d 8b08 	vpush	{d8-d11}
 80281ac:	b097      	sub	sp, #92	; 0x5c
 80281ae:	eeb0 aa40 	vmov.f32	s20, s0
 80281b2:	eef0 9a60 	vmov.f32	s19, s1
 80281b6:	9308      	str	r3, [sp, #32]
 80281b8:	eeb0 9a41 	vmov.f32	s18, s2
 80281bc:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 80281c0:	eeb0 8a62 	vmov.f32	s16, s5
 80281c4:	9214      	str	r2, [sp, #80]	; 0x50
 80281c6:	eef0 8a43 	vmov.f32	s17, s6
 80281ca:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80281cc:	eef0 ba44 	vmov.f32	s23, s8
 80281d0:	9309      	str	r3, [sp, #36]	; 0x24
 80281d2:	eeb0 ba64 	vmov.f32	s22, s9
 80281d6:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 80281da:	eef0 aa45 	vmov.f32	s21, s10
 80281de:	9015      	str	r0, [sp, #84]	; 0x54
 80281e0:	910c      	str	r1, [sp, #48]	; 0x30
 80281e2:	930e      	str	r3, [sp, #56]	; 0x38
 80281e4:	6850      	ldr	r0, [r2, #4]
 80281e6:	f9bd b0c0 	ldrsh.w	fp, [sp, #192]	; 0xc0
 80281ea:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80281ee:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 80281f2:	fb00 1803 	mla	r8, r0, r3, r1
 80281f6:	6813      	ldr	r3, [r2, #0]
 80281f8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80281fc:	4498      	add	r8, r3
 80281fe:	f10b 0301 	add.w	r3, fp, #1
 8028202:	f023 0301 	bic.w	r3, r3, #1
 8028206:	930f      	str	r3, [sp, #60]	; 0x3c
 8028208:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802820a:	681f      	ldr	r7, [r3, #0]
 802820c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802820e:	2b00      	cmp	r3, #0
 8028210:	dc03      	bgt.n	802821a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8028212:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8028214:	2b00      	cmp	r3, #0
 8028216:	f340 8238 	ble.w	802868a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 802821a:	9b08      	ldr	r3, [sp, #32]
 802821c:	2b00      	cmp	r3, #0
 802821e:	f340 810c 	ble.w	802843a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 8028222:	142a      	asrs	r2, r5, #16
 8028224:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028228:	d42c      	bmi.n	8028284 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 802822a:	1c51      	adds	r1, r2, #1
 802822c:	458b      	cmp	fp, r1
 802822e:	dd2c      	ble.n	802828a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8028230:	2b00      	cmp	r3, #0
 8028232:	db2a      	blt.n	802828a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8028234:	1c59      	adds	r1, r3, #1
 8028236:	9809      	ldr	r0, [sp, #36]	; 0x24
 8028238:	4288      	cmp	r0, r1
 802823a:	dd26      	ble.n	802828a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 802823c:	9b08      	ldr	r3, [sp, #32]
 802823e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8028240:	3b01      	subs	r3, #1
 8028242:	fb02 5203 	mla	r2, r2, r3, r5
 8028246:	1412      	asrs	r2, r2, #16
 8028248:	d429      	bmi.n	802829e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 802824a:	3201      	adds	r2, #1
 802824c:	4593      	cmp	fp, r2
 802824e:	dd26      	ble.n	802829e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8028250:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8028252:	fb02 6303 	mla	r3, r2, r3, r6
 8028256:	141b      	asrs	r3, r3, #16
 8028258:	d421      	bmi.n	802829e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 802825a:	3301      	adds	r3, #1
 802825c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802825e:	429a      	cmp	r2, r3
 8028260:	dd1d      	ble.n	802829e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8028262:	f108 0e03 	add.w	lr, r8, #3
 8028266:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802826a:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 802826e:	f1b9 0f00 	cmp.w	r9, #0
 8028272:	f300 814f 	bgt.w	8028514 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x370>
 8028276:	9b08      	ldr	r3, [sp, #32]
 8028278:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802827c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8028280:	44a0      	add	r8, r4
 8028282:	e0dc      	b.n	802843e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29a>
 8028284:	1c51      	adds	r1, r2, #1
 8028286:	f040 80ce 	bne.w	8028426 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 802828a:	4593      	cmp	fp, r2
 802828c:	f340 80cb 	ble.w	8028426 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8028290:	1c5a      	adds	r2, r3, #1
 8028292:	f2c0 80c8 	blt.w	8028426 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8028296:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028298:	4293      	cmp	r3, r2
 802829a:	f280 80c4 	bge.w	8028426 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 802829e:	9b08      	ldr	r3, [sp, #32]
 80282a0:	46c1      	mov	r9, r8
 80282a2:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 80282a6:	930d      	str	r3, [sp, #52]	; 0x34
 80282a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80282aa:	2b00      	cmp	r3, #0
 80282ac:	dde3      	ble.n	8028276 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 80282ae:	1428      	asrs	r0, r5, #16
 80282b0:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80282b4:	ea4f 4326 	mov.w	r3, r6, asr #16
 80282b8:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80282bc:	f100 8111 	bmi.w	80284e2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 80282c0:	f100 0c01 	add.w	ip, r0, #1
 80282c4:	45e3      	cmp	fp, ip
 80282c6:	f340 810e 	ble.w	80284e6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 80282ca:	2b00      	cmp	r3, #0
 80282cc:	f2c0 810b 	blt.w	80284e6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 80282d0:	f103 0c01 	add.w	ip, r3, #1
 80282d4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80282d6:	4564      	cmp	r4, ip
 80282d8:	f340 8105 	ble.w	80284e6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 80282dc:	fb03 030a 	mla	r3, r3, sl, r0
 80282e0:	0858      	lsrs	r0, r3, #1
 80282e2:	07dc      	lsls	r4, r3, #31
 80282e4:	5c38      	ldrb	r0, [r7, r0]
 80282e6:	bf54      	ite	pl
 80282e8:	f000 000f 	andpl.w	r0, r0, #15
 80282ec:	1100      	asrmi	r0, r0, #4
 80282ee:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80282f2:	b2c0      	uxtb	r0, r0
 80282f4:	2a00      	cmp	r2, #0
 80282f6:	f000 80e1 	beq.w	80284bc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x318>
 80282fa:	f103 0e01 	add.w	lr, r3, #1
 80282fe:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8028302:	f01e 0f01 	tst.w	lr, #1
 8028306:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802830a:	bf0c      	ite	eq
 802830c:	f00c 0c0f 	andeq.w	ip, ip, #15
 8028310:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8028314:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028318:	fa5f f48c 	uxtb.w	r4, ip
 802831c:	9410      	str	r4, [sp, #64]	; 0x40
 802831e:	b1f9      	cbz	r1, 8028360 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8028320:	4453      	add	r3, sl
 8028322:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8028326:	07dc      	lsls	r4, r3, #31
 8028328:	f103 0301 	add.w	r3, r3, #1
 802832c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8028330:	bf54      	ite	pl
 8028332:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028336:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802833a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802833e:	fa5f f48c 	uxtb.w	r4, ip
 8028342:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8028346:	940a      	str	r4, [sp, #40]	; 0x28
 8028348:	07dc      	lsls	r4, r3, #31
 802834a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802834e:	bf54      	ite	pl
 8028350:	f00c 030f 	andpl.w	r3, ip, #15
 8028354:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8028358:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802835c:	b2db      	uxtb	r3, r3
 802835e:	9311      	str	r3, [sp, #68]	; 0x44
 8028360:	b292      	uxth	r2, r2
 8028362:	b289      	uxth	r1, r1
 8028364:	0113      	lsls	r3, r2, #4
 8028366:	fb02 fc01 	mul.w	ip, r2, r1
 802836a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802836c:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8028370:	ebcc 1101 	rsb	r1, ip, r1, lsl #4
 8028374:	eba3 030c 	sub.w	r3, r3, ip
 8028378:	b289      	uxth	r1, r1
 802837a:	b29b      	uxth	r3, r3
 802837c:	ebae 0e01 	sub.w	lr, lr, r1
 8028380:	4353      	muls	r3, r2
 8028382:	fa1f fe8e 	uxth.w	lr, lr
 8028386:	fb00 320e 	mla	r2, r0, lr, r3
 802838a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802838c:	fb01 2203 	mla	r2, r1, r3, r2
 8028390:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8028392:	fb0c 2203 	mla	r2, ip, r3, r2
 8028396:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802839a:	2a00      	cmp	r2, #0
 802839c:	d039      	beq.n	8028412 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 802839e:	4bbd      	ldr	r3, [pc, #756]	; (8028694 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 80283a0:	6819      	ldr	r1, [r3, #0]
 80283a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80283a4:	fa5f fc81 	uxtb.w	ip, r1
 80283a8:	435a      	muls	r2, r3
 80283aa:	1c53      	adds	r3, r2, #1
 80283ac:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80283b0:	1212      	asrs	r2, r2, #8
 80283b2:	b290      	uxth	r0, r2
 80283b4:	43d2      	mvns	r2, r2
 80283b6:	fb1c fc00 	smulbb	ip, ip, r0
 80283ba:	b2d3      	uxtb	r3, r2
 80283bc:	f899 2000 	ldrb.w	r2, [r9]
 80283c0:	fb02 c203 	mla	r2, r2, r3, ip
 80283c4:	b292      	uxth	r2, r2
 80283c6:	f102 0c01 	add.w	ip, r2, #1
 80283ca:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80283ce:	f899 c001 	ldrb.w	ip, [r9, #1]
 80283d2:	fb1c fc03 	smulbb	ip, ip, r3
 80283d6:	1212      	asrs	r2, r2, #8
 80283d8:	f889 2000 	strb.w	r2, [r9]
 80283dc:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80283e0:	f3c1 4107 	ubfx	r1, r1, #16, #8
 80283e4:	fb02 c200 	mla	r2, r2, r0, ip
 80283e8:	b292      	uxth	r2, r2
 80283ea:	f102 0c01 	add.w	ip, r2, #1
 80283ee:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80283f2:	1212      	asrs	r2, r2, #8
 80283f4:	f889 2001 	strb.w	r2, [r9, #1]
 80283f8:	f899 2002 	ldrb.w	r2, [r9, #2]
 80283fc:	fb12 f303 	smulbb	r3, r2, r3
 8028400:	fb01 3300 	mla	r3, r1, r0, r3
 8028404:	b29b      	uxth	r3, r3
 8028406:	1c5a      	adds	r2, r3, #1
 8028408:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802840c:	121b      	asrs	r3, r3, #8
 802840e:	f889 3002 	strb.w	r3, [r9, #2]
 8028412:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8028414:	f109 0903 	add.w	r9, r9, #3
 8028418:	441d      	add	r5, r3
 802841a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802841c:	441e      	add	r6, r3
 802841e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028420:	3b01      	subs	r3, #1
 8028422:	930d      	str	r3, [sp, #52]	; 0x34
 8028424:	e740      	b.n	80282a8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8028426:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8028428:	f108 0803 	add.w	r8, r8, #3
 802842c:	441d      	add	r5, r3
 802842e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028430:	441e      	add	r6, r3
 8028432:	9b08      	ldr	r3, [sp, #32]
 8028434:	3b01      	subs	r3, #1
 8028436:	9308      	str	r3, [sp, #32]
 8028438:	e6ef      	b.n	802821a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 802843a:	f47f aeff 	bne.w	802823c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 802843e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8028440:	2b00      	cmp	r3, #0
 8028442:	f340 8122 	ble.w	802868a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 8028446:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802844a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802844c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8028450:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8028454:	eef0 6a48 	vmov.f32	s13, s16
 8028458:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802845c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8028460:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028464:	ee16 5a90 	vmov	r5, s13
 8028468:	eef0 6a68 	vmov.f32	s13, s17
 802846c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028470:	ee16 6a90 	vmov	r6, s13
 8028474:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8028478:	ee69 7a27 	vmul.f32	s15, s18, s15
 802847c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8028480:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8028484:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8028488:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802848c:	ee18 2a10 	vmov	r2, s16
 8028490:	eeb0 8a47 	vmov.f32	s16, s14
 8028494:	fb92 f3f3 	sdiv	r3, r2, r3
 8028498:	ee18 2a90 	vmov	r2, s17
 802849c:	932b      	str	r3, [sp, #172]	; 0xac
 802849e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80284a0:	eef0 8a67 	vmov.f32	s17, s15
 80284a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80284a8:	932c      	str	r3, [sp, #176]	; 0xb0
 80284aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80284ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80284ae:	3b01      	subs	r3, #1
 80284b0:	930c      	str	r3, [sp, #48]	; 0x30
 80284b2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80284b4:	bf08      	it	eq
 80284b6:	4613      	moveq	r3, r2
 80284b8:	9308      	str	r3, [sp, #32]
 80284ba:	e6a7      	b.n	802820c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 80284bc:	2900      	cmp	r1, #0
 80284be:	f43f af4f 	beq.w	8028360 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 80284c2:	4453      	add	r3, sl
 80284c4:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80284c8:	07db      	lsls	r3, r3, #31
 80284ca:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80284ce:	bf54      	ite	pl
 80284d0:	f00c 030f 	andpl.w	r3, ip, #15
 80284d4:	ea4f 132c 	movmi.w	r3, ip, asr #4
 80284d8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80284dc:	b2db      	uxtb	r3, r3
 80284de:	930a      	str	r3, [sp, #40]	; 0x28
 80284e0:	e73e      	b.n	8028360 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 80284e2:	1c44      	adds	r4, r0, #1
 80284e4:	d195      	bne.n	8028412 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 80284e6:	4583      	cmp	fp, r0
 80284e8:	dd93      	ble.n	8028412 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 80284ea:	1c5c      	adds	r4, r3, #1
 80284ec:	db91      	blt.n	8028412 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 80284ee:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80284f0:	429c      	cmp	r4, r3
 80284f2:	dd8e      	ble.n	8028412 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 80284f4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80284f6:	9002      	str	r0, [sp, #8]
 80284f8:	9815      	ldr	r0, [sp, #84]	; 0x54
 80284fa:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80284fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028500:	463a      	mov	r2, r7
 8028502:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8028506:	e9cd b300 	strd	fp, r3, [sp]
 802850a:	4649      	mov	r1, r9
 802850c:	4653      	mov	r3, sl
 802850e:	f7ff fd61 	bl	8027fd4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8028512:	e77e      	b.n	8028412 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8028514:	142a      	asrs	r2, r5, #16
 8028516:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802851a:	1433      	asrs	r3, r6, #16
 802851c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8028520:	fb0a 2303 	mla	r3, sl, r3, r2
 8028524:	085a      	lsrs	r2, r3, #1
 8028526:	07dc      	lsls	r4, r3, #31
 8028528:	5cba      	ldrb	r2, [r7, r2]
 802852a:	bf54      	ite	pl
 802852c:	f002 020f 	andpl.w	r2, r2, #15
 8028530:	1112      	asrmi	r2, r2, #4
 8028532:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8028536:	b2d2      	uxtb	r2, r2
 8028538:	2900      	cmp	r1, #0
 802853a:	f000 8093 	beq.w	8028664 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c0>
 802853e:	1c5c      	adds	r4, r3, #1
 8028540:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 8028544:	07e4      	lsls	r4, r4, #31
 8028546:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802854a:	bf54      	ite	pl
 802854c:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028550:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028554:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028558:	fa5f f48c 	uxtb.w	r4, ip
 802855c:	9412      	str	r4, [sp, #72]	; 0x48
 802855e:	b300      	cbz	r0, 80285a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8028560:	4453      	add	r3, sl
 8028562:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8028566:	07dc      	lsls	r4, r3, #31
 8028568:	f103 0301 	add.w	r3, r3, #1
 802856c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8028570:	bf54      	ite	pl
 8028572:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028576:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802857a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802857e:	fa5f f48c 	uxtb.w	r4, ip
 8028582:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8028586:	940b      	str	r4, [sp, #44]	; 0x2c
 8028588:	07dc      	lsls	r4, r3, #31
 802858a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802858e:	bf54      	ite	pl
 8028590:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028594:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028598:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802859c:	fa5f f38c 	uxtb.w	r3, ip
 80285a0:	9313      	str	r3, [sp, #76]	; 0x4c
 80285a2:	b289      	uxth	r1, r1
 80285a4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80285a6:	b280      	uxth	r0, r0
 80285a8:	fb01 f300 	mul.w	r3, r1, r0
 80285ac:	0109      	lsls	r1, r1, #4
 80285ae:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 80285b2:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 80285b6:	1ac9      	subs	r1, r1, r3
 80285b8:	b280      	uxth	r0, r0
 80285ba:	b289      	uxth	r1, r1
 80285bc:	ebac 0c00 	sub.w	ip, ip, r0
 80285c0:	4361      	muls	r1, r4
 80285c2:	fa1f fc8c 	uxth.w	ip, ip
 80285c6:	fb02 120c 	mla	r2, r2, ip, r1
 80285ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80285cc:	fb00 2001 	mla	r0, r0, r1, r2
 80285d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80285d2:	fb03 0302 	mla	r3, r3, r2, r0
 80285d6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80285da:	2b00      	cmp	r3, #0
 80285dc:	d039      	beq.n	8028652 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 80285de:	4a2d      	ldr	r2, [pc, #180]	; (8028694 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 80285e0:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 80285e4:	6810      	ldr	r0, [r2, #0]
 80285e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80285e8:	fa5f fc80 	uxtb.w	ip, r0
 80285ec:	4353      	muls	r3, r2
 80285ee:	1c5a      	adds	r2, r3, #1
 80285f0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80285f4:	121b      	asrs	r3, r3, #8
 80285f6:	b29a      	uxth	r2, r3
 80285f8:	43db      	mvns	r3, r3
 80285fa:	fb1c fc02 	smulbb	ip, ip, r2
 80285fe:	b2db      	uxtb	r3, r3
 8028600:	fb01 c103 	mla	r1, r1, r3, ip
 8028604:	b289      	uxth	r1, r1
 8028606:	f101 0c01 	add.w	ip, r1, #1
 802860a:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 802860e:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8028612:	fb1c fc03 	smulbb	ip, ip, r3
 8028616:	1209      	asrs	r1, r1, #8
 8028618:	f80e 1c03 	strb.w	r1, [lr, #-3]
 802861c:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8028620:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8028624:	fb01 c102 	mla	r1, r1, r2, ip
 8028628:	b289      	uxth	r1, r1
 802862a:	f101 0c01 	add.w	ip, r1, #1
 802862e:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8028632:	1209      	asrs	r1, r1, #8
 8028634:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8028638:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 802863c:	fb11 f303 	smulbb	r3, r1, r3
 8028640:	fb00 3002 	mla	r0, r0, r2, r3
 8028644:	b280      	uxth	r0, r0
 8028646:	1c42      	adds	r2, r0, #1
 8028648:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802864c:	1200      	asrs	r0, r0, #8
 802864e:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8028652:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8028654:	f10e 0e03 	add.w	lr, lr, #3
 8028658:	f109 39ff 	add.w	r9, r9, #4294967295
 802865c:	441d      	add	r5, r3
 802865e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028660:	441e      	add	r6, r3
 8028662:	e604      	b.n	802826e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 8028664:	2800      	cmp	r0, #0
 8028666:	d09c      	beq.n	80285a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8028668:	4453      	add	r3, sl
 802866a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802866e:	07db      	lsls	r3, r3, #31
 8028670:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8028674:	bf54      	ite	pl
 8028676:	f00c 0c0f 	andpl.w	ip, ip, #15
 802867a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802867e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028682:	fa5f f38c 	uxtb.w	r3, ip
 8028686:	930b      	str	r3, [sp, #44]	; 0x2c
 8028688:	e78b      	b.n	80285a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 802868a:	b017      	add	sp, #92	; 0x5c
 802868c:	ecbd 8b08 	vpop	{d8-d11}
 8028690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028694:	2000bf90 	.word	0x2000bf90

08028698 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8028698:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802869c:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 80286a0:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80286a4:	2800      	cmp	r0, #0
 80286a6:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 80286aa:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 80286ae:	fb0c 0e03 	mla	lr, ip, r3, r0
 80286b2:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 80286b6:	db6b      	blt.n	8028790 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80286b8:	4580      	cmp	r8, r0
 80286ba:	dd69      	ble.n	8028790 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80286bc:	f1bc 0f00 	cmp.w	ip, #0
 80286c0:	db66      	blt.n	8028790 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80286c2:	45e1      	cmp	r9, ip
 80286c4:	dd64      	ble.n	8028790 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 80286c6:	ea4f 045e 	mov.w	r4, lr, lsr #1
 80286ca:	f01e 0f01 	tst.w	lr, #1
 80286ce:	5d16      	ldrb	r6, [r2, r4]
 80286d0:	bf0c      	ite	eq
 80286d2:	f006 060f 	andeq.w	r6, r6, #15
 80286d6:	1136      	asrne	r6, r6, #4
 80286d8:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80286dc:	b2f6      	uxtb	r6, r6
 80286de:	f110 0a01 	adds.w	sl, r0, #1
 80286e2:	d457      	bmi.n	8028794 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 80286e4:	45d0      	cmp	r8, sl
 80286e6:	dd55      	ble.n	8028794 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 80286e8:	f1bc 0f00 	cmp.w	ip, #0
 80286ec:	db52      	blt.n	8028794 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 80286ee:	45e1      	cmp	r9, ip
 80286f0:	dd50      	ble.n	8028794 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 80286f2:	2f00      	cmp	r7, #0
 80286f4:	f000 80a5 	beq.w	8028842 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 80286f8:	f10e 0b01 	add.w	fp, lr, #1
 80286fc:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8028700:	f01b 0f01 	tst.w	fp, #1
 8028704:	5d14      	ldrb	r4, [r2, r4]
 8028706:	bf0c      	ite	eq
 8028708:	f004 040f 	andeq.w	r4, r4, #15
 802870c:	1124      	asrne	r4, r4, #4
 802870e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8028712:	b2e4      	uxtb	r4, r4
 8028714:	2d00      	cmp	r5, #0
 8028716:	f000 808f 	beq.w	8028838 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 802871a:	2800      	cmp	r0, #0
 802871c:	f10c 0c01 	add.w	ip, ip, #1
 8028720:	db3c      	blt.n	802879c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8028722:	4580      	cmp	r8, r0
 8028724:	dd3a      	ble.n	802879c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8028726:	f1bc 0f00 	cmp.w	ip, #0
 802872a:	db37      	blt.n	802879c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 802872c:	45e1      	cmp	r9, ip
 802872e:	dd35      	ble.n	802879c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8028730:	eb03 0b0e 	add.w	fp, r3, lr
 8028734:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8028738:	f01b 0f01 	tst.w	fp, #1
 802873c:	5c10      	ldrb	r0, [r2, r0]
 802873e:	bf0c      	ite	eq
 8028740:	f000 000f 	andeq.w	r0, r0, #15
 8028744:	1100      	asrne	r0, r0, #4
 8028746:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802874a:	b2c0      	uxtb	r0, r0
 802874c:	f1ba 0f00 	cmp.w	sl, #0
 8028750:	db26      	blt.n	80287a0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8028752:	45d0      	cmp	r8, sl
 8028754:	dd24      	ble.n	80287a0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8028756:	f1bc 0f00 	cmp.w	ip, #0
 802875a:	db21      	blt.n	80287a0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 802875c:	45e1      	cmp	r9, ip
 802875e:	dd1f      	ble.n	80287a0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8028760:	b307      	cbz	r7, 80287a4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 8028762:	3301      	adds	r3, #1
 8028764:	449e      	add	lr, r3
 8028766:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802876a:	f01e 0f01 	tst.w	lr, #1
 802876e:	5cd3      	ldrb	r3, [r2, r3]
 8028770:	bf0c      	ite	eq
 8028772:	f003 030f 	andeq.w	r3, r3, #15
 8028776:	111b      	asrne	r3, r3, #4
 8028778:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802877c:	b2db      	uxtb	r3, r3
 802877e:	2f0f      	cmp	r7, #15
 8028780:	d911      	bls.n	80287a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 8028782:	4b32      	ldr	r3, [pc, #200]	; (802884c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 8028784:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8028788:	4a31      	ldr	r2, [pc, #196]	; (8028850 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 802878a:	4832      	ldr	r0, [pc, #200]	; (8028854 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 802878c:	f001 fff8 	bl	802a780 <__assert_func>
 8028790:	2600      	movs	r6, #0
 8028792:	e7a4      	b.n	80286de <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 8028794:	2400      	movs	r4, #0
 8028796:	e7bd      	b.n	8028714 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 8028798:	463c      	mov	r4, r7
 802879a:	e7be      	b.n	802871a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 802879c:	2000      	movs	r0, #0
 802879e:	e7d5      	b.n	802874c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 80287a0:	2300      	movs	r3, #0
 80287a2:	e7ec      	b.n	802877e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 80287a4:	463b      	mov	r3, r7
 80287a6:	2d0f      	cmp	r5, #15
 80287a8:	d8eb      	bhi.n	8028782 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 80287aa:	b2bf      	uxth	r7, r7
 80287ac:	b2ad      	uxth	r5, r5
 80287ae:	fb07 f205 	mul.w	r2, r7, r5
 80287b2:	013f      	lsls	r7, r7, #4
 80287b4:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 80287b8:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 80287bc:	1abf      	subs	r7, r7, r2
 80287be:	b2ad      	uxth	r5, r5
 80287c0:	b2bf      	uxth	r7, r7
 80287c2:	ebac 0c05 	sub.w	ip, ip, r5
 80287c6:	437c      	muls	r4, r7
 80287c8:	fa1f fc8c 	uxth.w	ip, ip
 80287cc:	fb06 440c 	mla	r4, r6, ip, r4
 80287d0:	fb05 4400 	mla	r4, r5, r0, r4
 80287d4:	fb02 4303 	mla	r3, r2, r3, r4
 80287d8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80287dc:	b353      	cbz	r3, 8028834 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 80287de:	4a1e      	ldr	r2, [pc, #120]	; (8028858 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 80287e0:	7808      	ldrb	r0, [r1, #0]
 80287e2:	6814      	ldr	r4, [r2, #0]
 80287e4:	b29a      	uxth	r2, r3
 80287e6:	43db      	mvns	r3, r3
 80287e8:	b2e5      	uxtb	r5, r4
 80287ea:	b2db      	uxtb	r3, r3
 80287ec:	fb15 f502 	smulbb	r5, r5, r2
 80287f0:	fb00 5003 	mla	r0, r0, r3, r5
 80287f4:	b280      	uxth	r0, r0
 80287f6:	1c45      	adds	r5, r0, #1
 80287f8:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80287fc:	784d      	ldrb	r5, [r1, #1]
 80287fe:	fb15 f503 	smulbb	r5, r5, r3
 8028802:	1200      	asrs	r0, r0, #8
 8028804:	7008      	strb	r0, [r1, #0]
 8028806:	f3c4 2007 	ubfx	r0, r4, #8, #8
 802880a:	f3c4 4407 	ubfx	r4, r4, #16, #8
 802880e:	fb00 5002 	mla	r0, r0, r2, r5
 8028812:	b280      	uxth	r0, r0
 8028814:	1c45      	adds	r5, r0, #1
 8028816:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802881a:	1200      	asrs	r0, r0, #8
 802881c:	7048      	strb	r0, [r1, #1]
 802881e:	7888      	ldrb	r0, [r1, #2]
 8028820:	fb10 f303 	smulbb	r3, r0, r3
 8028824:	fb04 3202 	mla	r2, r4, r2, r3
 8028828:	b292      	uxth	r2, r2
 802882a:	1c53      	adds	r3, r2, #1
 802882c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8028830:	1212      	asrs	r2, r2, #8
 8028832:	708a      	strb	r2, [r1, #2]
 8028834:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028838:	2f0f      	cmp	r7, #15
 802883a:	d8a2      	bhi.n	8028782 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 802883c:	462b      	mov	r3, r5
 802883e:	4628      	mov	r0, r5
 8028840:	e7b3      	b.n	80287aa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 8028842:	2d00      	cmp	r5, #0
 8028844:	d1a8      	bne.n	8028798 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 8028846:	462c      	mov	r4, r5
 8028848:	e7f8      	b.n	802883c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 802884a:	bf00      	nop
 802884c:	0802fd97 	.word	0x0802fd97
 8028850:	0803028e 	.word	0x0803028e
 8028854:	0802fe60 	.word	0x0802fe60
 8028858:	2000bf90 	.word	0x2000bf90

0802885c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802885c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028860:	ed2d 8b08 	vpush	{d8-d11}
 8028864:	b095      	sub	sp, #84	; 0x54
 8028866:	461c      	mov	r4, r3
 8028868:	eeb0 aa40 	vmov.f32	s20, s0
 802886c:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	; 0xb8
 8028870:	eef0 9a60 	vmov.f32	s19, s1
 8028874:	920e      	str	r2, [sp, #56]	; 0x38
 8028876:	eeb0 9a41 	vmov.f32	s18, s2
 802887a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802887c:	eeb0 8a62 	vmov.f32	s16, s5
 8028880:	9307      	str	r3, [sp, #28]
 8028882:	eef0 8a43 	vmov.f32	s17, s6
 8028886:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 802888a:	eef0 ba44 	vmov.f32	s23, s8
 802888e:	9013      	str	r0, [sp, #76]	; 0x4c
 8028890:	eeb0 ba64 	vmov.f32	s22, s9
 8028894:	9109      	str	r1, [sp, #36]	; 0x24
 8028896:	eef0 aa45 	vmov.f32	s21, s10
 802889a:	9308      	str	r3, [sp, #32]
 802889c:	6850      	ldr	r0, [r2, #4]
 802889e:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 80288a2:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 80288a6:	fb00 1803 	mla	r8, r0, r3, r1
 80288aa:	6813      	ldr	r3, [r2, #0]
 80288ac:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80288b0:	4498      	add	r8, r3
 80288b2:	9b07      	ldr	r3, [sp, #28]
 80288b4:	3301      	adds	r3, #1
 80288b6:	f023 0301 	bic.w	r3, r3, #1
 80288ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80288bc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80288be:	681f      	ldr	r7, [r3, #0]
 80288c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80288c2:	2b00      	cmp	r3, #0
 80288c4:	dc03      	bgt.n	80288ce <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 80288c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80288c8:	2b00      	cmp	r3, #0
 80288ca:	f340 8238 	ble.w	8028d3e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 80288ce:	2c00      	cmp	r4, #0
 80288d0:	f340 8109 	ble.w	8028ae6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 80288d4:	142a      	asrs	r2, r5, #16
 80288d6:	ea4f 4326 	mov.w	r3, r6, asr #16
 80288da:	d42b      	bmi.n	8028934 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 80288dc:	1c51      	adds	r1, r2, #1
 80288de:	9807      	ldr	r0, [sp, #28]
 80288e0:	4288      	cmp	r0, r1
 80288e2:	dd2a      	ble.n	802893a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 80288e4:	2b00      	cmp	r3, #0
 80288e6:	db28      	blt.n	802893a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 80288e8:	1c59      	adds	r1, r3, #1
 80288ea:	9808      	ldr	r0, [sp, #32]
 80288ec:	4288      	cmp	r0, r1
 80288ee:	dd24      	ble.n	802893a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 80288f0:	1e63      	subs	r3, r4, #1
 80288f2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80288f4:	fb02 5203 	mla	r2, r2, r3, r5
 80288f8:	1412      	asrs	r2, r2, #16
 80288fa:	d429      	bmi.n	8028950 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80288fc:	3201      	adds	r2, #1
 80288fe:	9907      	ldr	r1, [sp, #28]
 8028900:	4291      	cmp	r1, r2
 8028902:	dd25      	ble.n	8028950 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8028904:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8028906:	fb02 6303 	mla	r3, r2, r3, r6
 802890a:	141b      	asrs	r3, r3, #16
 802890c:	d420      	bmi.n	8028950 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 802890e:	3301      	adds	r3, #1
 8028910:	9a08      	ldr	r2, [sp, #32]
 8028912:	429a      	cmp	r2, r3
 8028914:	dd1c      	ble.n	8028950 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8028916:	f108 0e03 	add.w	lr, r8, #3
 802891a:	46a1      	mov	r9, r4
 802891c:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 8028920:	f1b9 0f00 	cmp.w	r9, #0
 8028924:	f300 8155 	bgt.w	8028bd2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x376>
 8028928:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 802892c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8028930:	44a0      	add	r8, r4
 8028932:	e0da      	b.n	8028aea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8028934:	1c50      	adds	r0, r2, #1
 8028936:	f040 80ce 	bne.w	8028ad6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 802893a:	9907      	ldr	r1, [sp, #28]
 802893c:	4291      	cmp	r1, r2
 802893e:	f340 80ca 	ble.w	8028ad6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8028942:	1c59      	adds	r1, r3, #1
 8028944:	f2c0 80c7 	blt.w	8028ad6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8028948:	9a08      	ldr	r2, [sp, #32]
 802894a:	4293      	cmp	r3, r2
 802894c:	f280 80c3 	bge.w	8028ad6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8028950:	46a3      	mov	fp, r4
 8028952:	46c1      	mov	r9, r8
 8028954:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 8028958:	f1bb 0f00 	cmp.w	fp, #0
 802895c:	dde4      	ble.n	8028928 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 802895e:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8028962:	1428      	asrs	r0, r5, #16
 8028964:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028968:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802896c:	920a      	str	r2, [sp, #40]	; 0x28
 802896e:	f100 8116 	bmi.w	8028b9e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8028972:	f100 0c01 	add.w	ip, r0, #1
 8028976:	9a07      	ldr	r2, [sp, #28]
 8028978:	4562      	cmp	r2, ip
 802897a:	f340 8112 	ble.w	8028ba2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 802897e:	2b00      	cmp	r3, #0
 8028980:	f2c0 810f 	blt.w	8028ba2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8028984:	f103 0c01 	add.w	ip, r3, #1
 8028988:	9a08      	ldr	r2, [sp, #32]
 802898a:	4562      	cmp	r2, ip
 802898c:	f340 8109 	ble.w	8028ba2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8028990:	fb03 030a 	mla	r3, r3, sl, r0
 8028994:	0858      	lsrs	r0, r3, #1
 8028996:	07da      	lsls	r2, r3, #31
 8028998:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802899a:	5c38      	ldrb	r0, [r7, r0]
 802899c:	bf54      	ite	pl
 802899e:	f000 000f 	andpl.w	r0, r0, #15
 80289a2:	1100      	asrmi	r0, r0, #4
 80289a4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80289a8:	b2c0      	uxtb	r0, r0
 80289aa:	2a00      	cmp	r2, #0
 80289ac:	f000 80dd 	beq.w	8028b6a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30e>
 80289b0:	f103 0e01 	add.w	lr, r3, #1
 80289b4:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80289b8:	f01e 0f01 	tst.w	lr, #1
 80289bc:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80289c0:	bf0c      	ite	eq
 80289c2:	f00c 0c0f 	andeq.w	ip, ip, #15
 80289c6:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 80289ca:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80289ce:	fa5f fc8c 	uxtb.w	ip, ip
 80289d2:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 80289d6:	b301      	cbz	r1, 8028a1a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 80289d8:	4453      	add	r3, sl
 80289da:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80289de:	07da      	lsls	r2, r3, #31
 80289e0:	f103 0301 	add.w	r3, r3, #1
 80289e4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80289e8:	bf54      	ite	pl
 80289ea:	f00c 0c0f 	andpl.w	ip, ip, #15
 80289ee:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80289f2:	07da      	lsls	r2, r3, #31
 80289f4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80289f8:	fa5f fc8c 	uxtb.w	ip, ip
 80289fc:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8028a00:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8028a04:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8028a08:	bf54      	ite	pl
 8028a0a:	f00c 030f 	andpl.w	r3, ip, #15
 8028a0e:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8028a12:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8028a16:	b2db      	uxtb	r3, r3
 8028a18:	9310      	str	r3, [sp, #64]	; 0x40
 8028a1a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8028a1e:	b289      	uxth	r1, r1
 8028a20:	fb02 f301 	mul.w	r3, r2, r1
 8028a24:	0112      	lsls	r2, r2, #4
 8028a26:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8028a2a:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 8028a2e:	1ad2      	subs	r2, r2, r3
 8028a30:	fa1f fe81 	uxth.w	lr, r1
 8028a34:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8028a36:	b292      	uxth	r2, r2
 8028a38:	ebac 0c0e 	sub.w	ip, ip, lr
 8028a3c:	434a      	muls	r2, r1
 8028a3e:	fa1f fc8c 	uxth.w	ip, ip
 8028a42:	fb00 200c 	mla	r0, r0, ip, r2
 8028a46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8028a48:	fb0e 0002 	mla	r0, lr, r2, r0
 8028a4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8028a4e:	fb03 0002 	mla	r0, r3, r2, r0
 8028a52:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8028a56:	b3a8      	cbz	r0, 8028ac4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8028a58:	4bbb      	ldr	r3, [pc, #748]	; (8028d48 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 8028a5a:	28ff      	cmp	r0, #255	; 0xff
 8028a5c:	681b      	ldr	r3, [r3, #0]
 8028a5e:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 8028a62:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8028a66:	b2db      	uxtb	r3, r3
 8028a68:	f000 8092 	beq.w	8028b90 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x334>
 8028a6c:	b282      	uxth	r2, r0
 8028a6e:	43c0      	mvns	r0, r0
 8028a70:	f899 e000 	ldrb.w	lr, [r9]
 8028a74:	fb13 f302 	smulbb	r3, r3, r2
 8028a78:	b2c0      	uxtb	r0, r0
 8028a7a:	fb11 f102 	smulbb	r1, r1, r2
 8028a7e:	fb0e 3300 	mla	r3, lr, r0, r3
 8028a82:	fb1c f202 	smulbb	r2, ip, r2
 8028a86:	b29b      	uxth	r3, r3
 8028a88:	f103 0e01 	add.w	lr, r3, #1
 8028a8c:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8028a90:	121b      	asrs	r3, r3, #8
 8028a92:	f889 3000 	strb.w	r3, [r9]
 8028a96:	f899 3001 	ldrb.w	r3, [r9, #1]
 8028a9a:	fb03 1100 	mla	r1, r3, r0, r1
 8028a9e:	b289      	uxth	r1, r1
 8028aa0:	1c4b      	adds	r3, r1, #1
 8028aa2:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8028aa6:	f899 3002 	ldrb.w	r3, [r9, #2]
 8028aaa:	fb03 2000 	mla	r0, r3, r0, r2
 8028aae:	1209      	asrs	r1, r1, #8
 8028ab0:	b280      	uxth	r0, r0
 8028ab2:	f889 1001 	strb.w	r1, [r9, #1]
 8028ab6:	f100 0c01 	add.w	ip, r0, #1
 8028aba:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 8028abe:	1200      	asrs	r0, r0, #8
 8028ac0:	f889 0002 	strb.w	r0, [r9, #2]
 8028ac4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8028ac6:	f109 0903 	add.w	r9, r9, #3
 8028aca:	f10b 3bff 	add.w	fp, fp, #4294967295
 8028ace:	441d      	add	r5, r3
 8028ad0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8028ad2:	441e      	add	r6, r3
 8028ad4:	e740      	b.n	8028958 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8028ad6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8028ad8:	3c01      	subs	r4, #1
 8028ada:	f108 0803 	add.w	r8, r8, #3
 8028ade:	441d      	add	r5, r3
 8028ae0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8028ae2:	441e      	add	r6, r3
 8028ae4:	e6f3      	b.n	80288ce <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8028ae6:	f47f af03 	bne.w	80288f0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8028aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028aec:	2b00      	cmp	r3, #0
 8028aee:	f340 8126 	ble.w	8028d3e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 8028af2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028af6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8028af8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8028afc:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8028b00:	eef0 6a48 	vmov.f32	s13, s16
 8028b04:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8028b08:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8028b0c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028b10:	ee16 5a90 	vmov	r5, s13
 8028b14:	eef0 6a68 	vmov.f32	s13, s17
 8028b18:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028b1c:	ee16 6a90 	vmov	r6, s13
 8028b20:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8028b24:	ee69 7a27 	vmul.f32	s15, s18, s15
 8028b28:	ee37 8a48 	vsub.f32	s16, s14, s16
 8028b2c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8028b30:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8028b34:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8028b38:	ee18 2a10 	vmov	r2, s16
 8028b3c:	eeb0 8a47 	vmov.f32	s16, s14
 8028b40:	fb92 f3f3 	sdiv	r3, r2, r3
 8028b44:	ee18 2a90 	vmov	r2, s17
 8028b48:	9329      	str	r3, [sp, #164]	; 0xa4
 8028b4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8028b4c:	eef0 8a67 	vmov.f32	s17, s15
 8028b50:	fb92 f3f3 	sdiv	r3, r2, r3
 8028b54:	932a      	str	r3, [sp, #168]	; 0xa8
 8028b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028b58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8028b5a:	3b01      	subs	r3, #1
 8028b5c:	9309      	str	r3, [sp, #36]	; 0x24
 8028b5e:	bf08      	it	eq
 8028b60:	4614      	moveq	r4, r2
 8028b62:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8028b64:	bf18      	it	ne
 8028b66:	461c      	movne	r4, r3
 8028b68:	e6aa      	b.n	80288c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8028b6a:	2900      	cmp	r1, #0
 8028b6c:	f43f af55 	beq.w	8028a1a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8028b70:	4453      	add	r3, sl
 8028b72:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8028b76:	07db      	lsls	r3, r3, #31
 8028b78:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8028b7c:	bf54      	ite	pl
 8028b7e:	f00c 030f 	andpl.w	r3, ip, #15
 8028b82:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8028b86:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8028b8a:	b2db      	uxtb	r3, r3
 8028b8c:	930c      	str	r3, [sp, #48]	; 0x30
 8028b8e:	e744      	b.n	8028a1a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8028b90:	f889 3000 	strb.w	r3, [r9]
 8028b94:	f889 1001 	strb.w	r1, [r9, #1]
 8028b98:	f889 c002 	strb.w	ip, [r9, #2]
 8028b9c:	e792      	b.n	8028ac4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8028b9e:	1c42      	adds	r2, r0, #1
 8028ba0:	d190      	bne.n	8028ac4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8028ba2:	9a07      	ldr	r2, [sp, #28]
 8028ba4:	4282      	cmp	r2, r0
 8028ba6:	dd8d      	ble.n	8028ac4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8028ba8:	1c5a      	adds	r2, r3, #1
 8028baa:	db8b      	blt.n	8028ac4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8028bac:	9a08      	ldr	r2, [sp, #32]
 8028bae:	429a      	cmp	r2, r3
 8028bb0:	dd88      	ble.n	8028ac4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8028bb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8028bb4:	9105      	str	r1, [sp, #20]
 8028bb6:	4649      	mov	r1, r9
 8028bb8:	9002      	str	r0, [sp, #8]
 8028bba:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8028bbc:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8028bc0:	9b08      	ldr	r3, [sp, #32]
 8028bc2:	463a      	mov	r2, r7
 8028bc4:	9301      	str	r3, [sp, #4]
 8028bc6:	9b07      	ldr	r3, [sp, #28]
 8028bc8:	9300      	str	r3, [sp, #0]
 8028bca:	4653      	mov	r3, sl
 8028bcc:	f7ff fd64 	bl	8028698 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8028bd0:	e778      	b.n	8028ac4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8028bd2:	142a      	asrs	r2, r5, #16
 8028bd4:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8028bd8:	1433      	asrs	r3, r6, #16
 8028bda:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8028bde:	fb0a 2303 	mla	r3, sl, r3, r2
 8028be2:	085a      	lsrs	r2, r3, #1
 8028be4:	07d9      	lsls	r1, r3, #31
 8028be6:	5cba      	ldrb	r2, [r7, r2]
 8028be8:	bf54      	ite	pl
 8028bea:	f002 020f 	andpl.w	r2, r2, #15
 8028bee:	1112      	asrmi	r2, r2, #4
 8028bf0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8028bf4:	b2d2      	uxtb	r2, r2
 8028bf6:	2800      	cmp	r0, #0
 8028bf8:	f000 808a 	beq.w	8028d10 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b4>
 8028bfc:	f103 0b01 	add.w	fp, r3, #1
 8028c00:	ea4f 015b 	mov.w	r1, fp, lsr #1
 8028c04:	f01b 0f01 	tst.w	fp, #1
 8028c08:	5c79      	ldrb	r1, [r7, r1]
 8028c0a:	bf0c      	ite	eq
 8028c0c:	f001 010f 	andeq.w	r1, r1, #15
 8028c10:	1109      	asrne	r1, r1, #4
 8028c12:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8028c16:	b2c9      	uxtb	r1, r1
 8028c18:	9111      	str	r1, [sp, #68]	; 0x44
 8028c1a:	f1bc 0f00 	cmp.w	ip, #0
 8028c1e:	d019      	beq.n	8028c54 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8028c20:	4453      	add	r3, sl
 8028c22:	0859      	lsrs	r1, r3, #1
 8028c24:	f013 0f01 	tst.w	r3, #1
 8028c28:	f103 0301 	add.w	r3, r3, #1
 8028c2c:	5c79      	ldrb	r1, [r7, r1]
 8028c2e:	bf0c      	ite	eq
 8028c30:	f001 010f 	andeq.w	r1, r1, #15
 8028c34:	1109      	asrne	r1, r1, #4
 8028c36:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8028c3a:	b2c9      	uxtb	r1, r1
 8028c3c:	910d      	str	r1, [sp, #52]	; 0x34
 8028c3e:	0859      	lsrs	r1, r3, #1
 8028c40:	07db      	lsls	r3, r3, #31
 8028c42:	5c79      	ldrb	r1, [r7, r1]
 8028c44:	bf54      	ite	pl
 8028c46:	f001 010f 	andpl.w	r1, r1, #15
 8028c4a:	1109      	asrmi	r1, r1, #4
 8028c4c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8028c50:	b2c9      	uxtb	r1, r1
 8028c52:	9112      	str	r1, [sp, #72]	; 0x48
 8028c54:	b280      	uxth	r0, r0
 8028c56:	fa1f fc8c 	uxth.w	ip, ip
 8028c5a:	fb00 f30c 	mul.w	r3, r0, ip
 8028c5e:	0100      	lsls	r0, r0, #4
 8028c60:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8028c64:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8028c68:	1ac0      	subs	r0, r0, r3
 8028c6a:	fa1f fc8c 	uxth.w	ip, ip
 8028c6e:	b280      	uxth	r0, r0
 8028c70:	eba1 010c 	sub.w	r1, r1, ip
 8028c74:	fa1f fb81 	uxth.w	fp, r1
 8028c78:	9911      	ldr	r1, [sp, #68]	; 0x44
 8028c7a:	4348      	muls	r0, r1
 8028c7c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8028c7e:	fb02 020b 	mla	r2, r2, fp, r0
 8028c82:	fb0c 2c01 	mla	ip, ip, r1, r2
 8028c86:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8028c88:	fb03 c302 	mla	r3, r3, r2, ip
 8028c8c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028c90:	b3ab      	cbz	r3, 8028cfe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8028c92:	4a2d      	ldr	r2, [pc, #180]	; (8028d48 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 8028c94:	2bff      	cmp	r3, #255	; 0xff
 8028c96:	6811      	ldr	r1, [r2, #0]
 8028c98:	f3c1 4b07 	ubfx	fp, r1, #16, #8
 8028c9c:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 8028ca0:	b2c9      	uxtb	r1, r1
 8028ca2:	d045      	beq.n	8028d30 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 8028ca4:	b298      	uxth	r0, r3
 8028ca6:	43db      	mvns	r3, r3
 8028ca8:	f81e 2c03 	ldrb.w	r2, [lr, #-3]
 8028cac:	fb11 f100 	smulbb	r1, r1, r0
 8028cb0:	b2db      	uxtb	r3, r3
 8028cb2:	fb1c fc00 	smulbb	ip, ip, r0
 8028cb6:	fb02 1103 	mla	r1, r2, r3, r1
 8028cba:	fb1b f000 	smulbb	r0, fp, r0
 8028cbe:	b289      	uxth	r1, r1
 8028cc0:	1c4a      	adds	r2, r1, #1
 8028cc2:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8028cc6:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8028cca:	fb02 cc03 	mla	ip, r2, r3, ip
 8028cce:	1209      	asrs	r1, r1, #8
 8028cd0:	fa1f fc8c 	uxth.w	ip, ip
 8028cd4:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8028cd8:	f10c 0201 	add.w	r2, ip, #1
 8028cdc:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8028ce0:	f81e 2c01 	ldrb.w	r2, [lr, #-1]
 8028ce4:	fb02 0303 	mla	r3, r2, r3, r0
 8028ce8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8028cec:	b29b      	uxth	r3, r3
 8028cee:	f80e cc02 	strb.w	ip, [lr, #-2]
 8028cf2:	1c5a      	adds	r2, r3, #1
 8028cf4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8028cf8:	121b      	asrs	r3, r3, #8
 8028cfa:	f80e 3c01 	strb.w	r3, [lr, #-1]
 8028cfe:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8028d00:	f10e 0e03 	add.w	lr, lr, #3
 8028d04:	f109 39ff 	add.w	r9, r9, #4294967295
 8028d08:	441d      	add	r5, r3
 8028d0a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8028d0c:	441e      	add	r6, r3
 8028d0e:	e607      	b.n	8028920 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 8028d10:	f1bc 0f00 	cmp.w	ip, #0
 8028d14:	d09e      	beq.n	8028c54 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8028d16:	4453      	add	r3, sl
 8028d18:	0859      	lsrs	r1, r3, #1
 8028d1a:	07db      	lsls	r3, r3, #31
 8028d1c:	5c79      	ldrb	r1, [r7, r1]
 8028d1e:	bf54      	ite	pl
 8028d20:	f001 010f 	andpl.w	r1, r1, #15
 8028d24:	1109      	asrmi	r1, r1, #4
 8028d26:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8028d2a:	b2c9      	uxtb	r1, r1
 8028d2c:	910d      	str	r1, [sp, #52]	; 0x34
 8028d2e:	e791      	b.n	8028c54 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8028d30:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8028d34:	f80e cc02 	strb.w	ip, [lr, #-2]
 8028d38:	f80e bc01 	strb.w	fp, [lr, #-1]
 8028d3c:	e7df      	b.n	8028cfe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8028d3e:	b015      	add	sp, #84	; 0x54
 8028d40:	ecbd 8b08 	vpop	{d8-d11}
 8028d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028d48:	2000bf90 	.word	0x2000bf90

08028d4c <CRC_Lock>:
 8028d4c:	4a1d      	ldr	r2, [pc, #116]	; (8028dc4 <CRC_Lock+0x78>)
 8028d4e:	b530      	push	{r4, r5, lr}
 8028d50:	6813      	ldr	r3, [r2, #0]
 8028d52:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8028d56:	f24c 2540 	movw	r5, #49728	; 0xc240
 8028d5a:	f023 0301 	bic.w	r3, r3, #1
 8028d5e:	6013      	str	r3, [r2, #0]
 8028d60:	4b19      	ldr	r3, [pc, #100]	; (8028dc8 <CRC_Lock+0x7c>)
 8028d62:	681a      	ldr	r2, [r3, #0]
 8028d64:	4022      	ands	r2, r4
 8028d66:	42aa      	cmp	r2, r5
 8028d68:	d005      	beq.n	8028d76 <CRC_Lock+0x2a>
 8028d6a:	681b      	ldr	r3, [r3, #0]
 8028d6c:	f24c 2270 	movw	r2, #49776	; 0xc270
 8028d70:	4023      	ands	r3, r4
 8028d72:	4293      	cmp	r3, r2
 8028d74:	d11d      	bne.n	8028db2 <CRC_Lock+0x66>
 8028d76:	4b15      	ldr	r3, [pc, #84]	; (8028dcc <CRC_Lock+0x80>)
 8028d78:	681b      	ldr	r3, [r3, #0]
 8028d7a:	b9d3      	cbnz	r3, 8028db2 <CRC_Lock+0x66>
 8028d7c:	4a14      	ldr	r2, [pc, #80]	; (8028dd0 <CRC_Lock+0x84>)
 8028d7e:	6813      	ldr	r3, [r2, #0]
 8028d80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8028d84:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8028d88:	d006      	beq.n	8028d98 <CRC_Lock+0x4c>
 8028d8a:	6813      	ldr	r3, [r2, #0]
 8028d8c:	f240 4283 	movw	r2, #1155	; 0x483
 8028d90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8028d94:	4293      	cmp	r3, r2
 8028d96:	d10c      	bne.n	8028db2 <CRC_Lock+0x66>
 8028d98:	4b0e      	ldr	r3, [pc, #56]	; (8028dd4 <CRC_Lock+0x88>)
 8028d9a:	2201      	movs	r2, #1
 8028d9c:	601a      	str	r2, [r3, #0]
 8028d9e:	681a      	ldr	r2, [r3, #0]
 8028da0:	2a00      	cmp	r2, #0
 8028da2:	d1fc      	bne.n	8028d9e <CRC_Lock+0x52>
 8028da4:	4b0c      	ldr	r3, [pc, #48]	; (8028dd8 <CRC_Lock+0x8c>)
 8028da6:	6018      	str	r0, [r3, #0]
 8028da8:	6818      	ldr	r0, [r3, #0]
 8028daa:	1a43      	subs	r3, r0, r1
 8028dac:	4258      	negs	r0, r3
 8028dae:	4158      	adcs	r0, r3
 8028db0:	bd30      	pop	{r4, r5, pc}
 8028db2:	4b0a      	ldr	r3, [pc, #40]	; (8028ddc <CRC_Lock+0x90>)
 8028db4:	2201      	movs	r2, #1
 8028db6:	601a      	str	r2, [r3, #0]
 8028db8:	681a      	ldr	r2, [r3, #0]
 8028dba:	2a00      	cmp	r2, #0
 8028dbc:	d1fc      	bne.n	8028db8 <CRC_Lock+0x6c>
 8028dbe:	4b08      	ldr	r3, [pc, #32]	; (8028de0 <CRC_Lock+0x94>)
 8028dc0:	e7f1      	b.n	8028da6 <CRC_Lock+0x5a>
 8028dc2:	bf00      	nop
 8028dc4:	e0002000 	.word	0xe0002000
 8028dc8:	e000ed00 	.word	0xe000ed00
 8028dcc:	e0042000 	.word	0xe0042000
 8028dd0:	5c001000 	.word	0x5c001000
 8028dd4:	58024c08 	.word	0x58024c08
 8028dd8:	58024c00 	.word	0x58024c00
 8028ddc:	40023008 	.word	0x40023008
 8028de0:	40023000 	.word	0x40023000

08028de4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8028de4:	6101      	str	r1, [r0, #16]
 8028de6:	4770      	bx	lr

08028de8 <_ZN8touchgfx8Gestures4tickEv>:
 8028de8:	7b83      	ldrb	r3, [r0, #14]
 8028dea:	b14b      	cbz	r3, 8028e00 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8028dec:	8903      	ldrh	r3, [r0, #8]
 8028dee:	3301      	adds	r3, #1
 8028df0:	b29b      	uxth	r3, r3
 8028df2:	2b07      	cmp	r3, #7
 8028df4:	8103      	strh	r3, [r0, #8]
 8028df6:	bf81      	itttt	hi
 8028df8:	2300      	movhi	r3, #0
 8028dfa:	8143      	strhhi	r3, [r0, #10]
 8028dfc:	8183      	strhhi	r3, [r0, #12]
 8028dfe:	7383      	strbhi	r3, [r0, #14]
 8028e00:	4770      	bx	lr
	...

08028e04 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8028e04:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8028e08:	4604      	mov	r4, r0
 8028e0a:	4698      	mov	r8, r3
 8028e0c:	8880      	ldrh	r0, [r0, #4]
 8028e0e:	4617      	mov	r7, r2
 8028e10:	4b1d      	ldr	r3, [pc, #116]	; (8028e88 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 8028e12:	460e      	mov	r6, r1
 8028e14:	f8ad 0006 	strh.w	r0, [sp, #6]
 8028e18:	eba8 0000 	sub.w	r0, r8, r0
 8028e1c:	9300      	str	r3, [sp, #0]
 8028e1e:	2300      	movs	r3, #0
 8028e20:	b280      	uxth	r0, r0
 8028e22:	8aa2      	ldrh	r2, [r4, #20]
 8028e24:	f88d 3004 	strb.w	r3, [sp, #4]
 8028e28:	b203      	sxth	r3, r0
 8028e2a:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8028e2e:	88e1      	ldrh	r1, [r4, #6]
 8028e30:	2b00      	cmp	r3, #0
 8028e32:	f8ad 800a 	strh.w	r8, [sp, #10]
 8028e36:	f8ad 1008 	strh.w	r1, [sp, #8]
 8028e3a:	bfb8      	it	lt
 8028e3c:	4240      	neglt	r0, r0
 8028e3e:	f8ad 500c 	strh.w	r5, [sp, #12]
 8028e42:	bfb8      	it	lt
 8028e44:	b203      	sxthlt	r3, r0
 8028e46:	4293      	cmp	r3, r2
 8028e48:	dc08      	bgt.n	8028e5c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 8028e4a:	1a69      	subs	r1, r5, r1
 8028e4c:	b289      	uxth	r1, r1
 8028e4e:	b20b      	sxth	r3, r1
 8028e50:	2b00      	cmp	r3, #0
 8028e52:	bfbc      	itt	lt
 8028e54:	4249      	neglt	r1, r1
 8028e56:	b20b      	sxthlt	r3, r1
 8028e58:	429a      	cmp	r2, r3
 8028e5a:	da13      	bge.n	8028e84 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8028e5c:	6920      	ldr	r0, [r4, #16]
 8028e5e:	4669      	mov	r1, sp
 8028e60:	eba8 0606 	sub.w	r6, r8, r6
 8028e64:	1bef      	subs	r7, r5, r7
 8028e66:	6803      	ldr	r3, [r0, #0]
 8028e68:	685b      	ldr	r3, [r3, #4]
 8028e6a:	4798      	blx	r3
 8028e6c:	2300      	movs	r3, #0
 8028e6e:	2001      	movs	r0, #1
 8028e70:	8166      	strh	r6, [r4, #10]
 8028e72:	8123      	strh	r3, [r4, #8]
 8028e74:	81a7      	strh	r7, [r4, #12]
 8028e76:	f8a4 8004 	strh.w	r8, [r4, #4]
 8028e7a:	80e5      	strh	r5, [r4, #6]
 8028e7c:	73a0      	strb	r0, [r4, #14]
 8028e7e:	b004      	add	sp, #16
 8028e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028e84:	2000      	movs	r0, #0
 8028e86:	e7fa      	b.n	8028e7e <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8028e88:	0802ef34 	.word	0x0802ef34

08028e8c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8028e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028e8e:	461e      	mov	r6, r3
 8028e90:	1e4b      	subs	r3, r1, #1
 8028e92:	b085      	sub	sp, #20
 8028e94:	4604      	mov	r4, r0
 8028e96:	2b01      	cmp	r3, #1
 8028e98:	460d      	mov	r5, r1
 8028e9a:	4617      	mov	r7, r2
 8028e9c:	d84b      	bhi.n	8028f36 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8028e9e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8028ea2:	1cd3      	adds	r3, r2, #3
 8028ea4:	b29b      	uxth	r3, r3
 8028ea6:	2b06      	cmp	r3, #6
 8028ea8:	d916      	bls.n	8028ed8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8028eaa:	f8df c098 	ldr.w	ip, [pc, #152]	; 8028f44 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8028eae:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8028eb2:	f8cd c004 	str.w	ip, [sp, #4]
 8028eb6:	f04f 0c00 	mov.w	ip, #0
 8028eba:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8028ebe:	6900      	ldr	r0, [r0, #16]
 8028ec0:	f8ad 100c 	strh.w	r1, [sp, #12]
 8028ec4:	a901      	add	r1, sp, #4
 8028ec6:	f88d c008 	strb.w	ip, [sp, #8]
 8028eca:	f8ad 200a 	strh.w	r2, [sp, #10]
 8028ece:	f8ad 300e 	strh.w	r3, [sp, #14]
 8028ed2:	6803      	ldr	r3, [r0, #0]
 8028ed4:	689b      	ldr	r3, [r3, #8]
 8028ed6:	4798      	blx	r3
 8028ed8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8028edc:	1cd3      	adds	r3, r2, #3
 8028ede:	b29b      	uxth	r3, r3
 8028ee0:	2b06      	cmp	r3, #6
 8028ee2:	d916      	bls.n	8028f12 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8028ee4:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8028f44 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8028ee8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8028eec:	f8cd c004 	str.w	ip, [sp, #4]
 8028ef0:	f04f 0c01 	mov.w	ip, #1
 8028ef4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8028ef8:	6920      	ldr	r0, [r4, #16]
 8028efa:	f8ad 100c 	strh.w	r1, [sp, #12]
 8028efe:	a901      	add	r1, sp, #4
 8028f00:	f88d c008 	strb.w	ip, [sp, #8]
 8028f04:	f8ad 200a 	strh.w	r2, [sp, #10]
 8028f08:	f8ad 300e 	strh.w	r3, [sp, #14]
 8028f0c:	6803      	ldr	r3, [r0, #0]
 8028f0e:	689b      	ldr	r3, [r3, #8]
 8028f10:	4798      	blx	r3
 8028f12:	4b0b      	ldr	r3, [pc, #44]	; (8028f40 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb4>)
 8028f14:	a901      	add	r1, sp, #4
 8028f16:	6920      	ldr	r0, [r4, #16]
 8028f18:	9301      	str	r3, [sp, #4]
 8028f1a:	2300      	movs	r3, #0
 8028f1c:	f88d 5008 	strb.w	r5, [sp, #8]
 8028f20:	f8ad 700a 	strh.w	r7, [sp, #10]
 8028f24:	f8ad 600c 	strh.w	r6, [sp, #12]
 8028f28:	f8ad 300e 	strh.w	r3, [sp, #14]
 8028f2c:	6803      	ldr	r3, [r0, #0]
 8028f2e:	681b      	ldr	r3, [r3, #0]
 8028f30:	4798      	blx	r3
 8028f32:	b005      	add	sp, #20
 8028f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028f36:	2900      	cmp	r1, #0
 8028f38:	d1eb      	bne.n	8028f12 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8028f3a:	80a2      	strh	r2, [r4, #4]
 8028f3c:	80c6      	strh	r6, [r0, #6]
 8028f3e:	e7e8      	b.n	8028f12 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8028f40:	0802ef20 	.word	0x0802ef20
 8028f44:	0802ef48 	.word	0x0802ef48

08028f48 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>:
 8028f48:	10c9      	asrs	r1, r1, #3
 8028f4a:	2900      	cmp	r1, #0
 8028f4c:	bfb8      	it	lt
 8028f4e:	4249      	neglt	r1, r1
 8028f50:	2801      	cmp	r0, #1
 8028f52:	d108      	bne.n	8028f66 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 8028f54:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8028f58:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8028f5c:	4601      	mov	r1, r0
 8028f5e:	dd02      	ble.n	8028f66 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 8028f60:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 8028f64:	4770      	bx	lr
 8028f66:	29ff      	cmp	r1, #255	; 0xff
 8028f68:	bfa8      	it	ge
 8028f6a:	21ff      	movge	r1, #255	; 0xff
 8028f6c:	4608      	mov	r0, r1
 8028f6e:	4770      	bx	lr

08028f70 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 8028f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028f74:	688c      	ldr	r4, [r1, #8]
 8028f76:	b087      	sub	sp, #28
 8028f78:	4607      	mov	r7, r0
 8028f7a:	2c00      	cmp	r4, #0
 8028f7c:	db2b      	blt.n	8028fd6 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8028f7e:	6803      	ldr	r3, [r0, #0]
 8028f80:	68da      	ldr	r2, [r3, #12]
 8028f82:	42a2      	cmp	r2, r4
 8028f84:	dd27      	ble.n	8028fd6 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8028f86:	681a      	ldr	r2, [r3, #0]
 8028f88:	691e      	ldr	r6, [r3, #16]
 8028f8a:	68cd      	ldr	r5, [r1, #12]
 8028f8c:	fb06 2604 	mla	r6, r6, r4, r2
 8028f90:	f8d1 901c 	ldr.w	r9, [r1, #28]
 8028f94:	698a      	ldr	r2, [r1, #24]
 8028f96:	f893 a004 	ldrb.w	sl, [r3, #4]
 8028f9a:	f8d1 8020 	ldr.w	r8, [r1, #32]
 8028f9e:	9205      	str	r2, [sp, #20]
 8028fa0:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 8028fa4:	9b05      	ldr	r3, [sp, #20]
 8028fa6:	6839      	ldr	r1, [r7, #0]
 8028fa8:	eb03 0c02 	add.w	ip, r3, r2
 8028fac:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 8028fb0:	6889      	ldr	r1, [r1, #8]
 8028fb2:	1898      	adds	r0, r3, r2
 8028fb4:	4288      	cmp	r0, r1
 8028fb6:	db02      	blt.n	8028fbe <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 8028fb8:	1a8b      	subs	r3, r1, r2
 8028fba:	2b00      	cmp	r3, #0
 8028fbc:	dd09      	ble.n	8028fd2 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 8028fbe:	6878      	ldr	r0, [r7, #4]
 8028fc0:	6801      	ldr	r1, [r0, #0]
 8028fc2:	9400      	str	r4, [sp, #0]
 8028fc4:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 8028fc8:	4653      	mov	r3, sl
 8028fca:	f8d1 b008 	ldr.w	fp, [r1, #8]
 8028fce:	4631      	mov	r1, r6
 8028fd0:	47d8      	blx	fp
 8028fd2:	3d01      	subs	r5, #1
 8028fd4:	d1e4      	bne.n	8028fa0 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 8028fd6:	b007      	add	sp, #28
 8028fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08028fdc <_ZN8touchgfx10Rasterizer6lineToEii>:
 8028fdc:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8028fe0:	b90b      	cbnz	r3, 8028fe6 <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 8028fe2:	f001 b974 	b.w	802a2ce <_ZN8touchgfx7Outline6lineToEii>
 8028fe6:	4770      	bx	lr

08028fe8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 8028fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028fec:	4604      	mov	r4, r0
 8028fee:	2600      	movs	r6, #0
 8028ff0:	4b8e      	ldr	r3, [pc, #568]	; (802922c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x244>)
 8028ff2:	f100 0518 	add.w	r5, r0, #24
 8028ff6:	f104 072c 	add.w	r7, r4, #44	; 0x2c
 8028ffa:	b086      	sub	sp, #24
 8028ffc:	4690      	mov	r8, r2
 8028ffe:	e9c0 3100 	strd	r3, r1, [r0]
 8029002:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8029006:	e9c0 6604 	strd	r6, r6, [r0, #16]
 802900a:	4628      	mov	r0, r5
 802900c:	f001 fb75 	bl	802a6fa <_ZN8touchgfx15RenderingBufferC1Ev>
 8029010:	4638      	mov	r0, r7
 8029012:	f000 fb45 	bl	80296a0 <_ZN8touchgfx7OutlineC1Ev>
 8029016:	f104 0074 	add.w	r0, r4, #116	; 0x74
 802901a:	f001 fb23 	bl	802a664 <_ZN8touchgfx8ScanlineC1Ev>
 802901e:	2301      	movs	r3, #1
 8029020:	f884 6098 	strb.w	r6, [r4, #152]	; 0x98
 8029024:	f884 60a0 	strb.w	r6, [r4, #160]	; 0xa0
 8029028:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 802902c:	f884 60a2 	strb.w	r6, [r4, #162]	; 0xa2
 8029030:	f8a4 60ac 	strh.w	r6, [r4, #172]	; 0xac
 8029034:	e9c4 6629 	strd	r6, r6, [r4, #164]	; 0xa4
 8029038:	e9c4 662c 	strd	r6, r6, [r4, #176]	; 0xb0
 802903c:	f7f4 fbac 	bl	801d798 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 8029040:	b928      	cbnz	r0, 802904e <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x66>
 8029042:	4b7b      	ldr	r3, [pc, #492]	; (8029230 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 8029044:	2118      	movs	r1, #24
 8029046:	4a7b      	ldr	r2, [pc, #492]	; (8029234 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8029048:	487b      	ldr	r0, [pc, #492]	; (8029238 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 802904a:	f001 fb99 	bl	802a780 <__assert_func>
 802904e:	f9b8 2000 	ldrsh.w	r2, [r8]
 8029052:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8029056:	f8d4 c004 	ldr.w	ip, [r4, #4]
 802905a:	4410      	add	r0, r2
 802905c:	9602      	str	r6, [sp, #8]
 802905e:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 8029062:	b280      	uxth	r0, r0
 8029064:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 8029068:	fa0f fa80 	sxth.w	sl, r0
 802906c:	f1ba 0f00 	cmp.w	sl, #0
 8029070:	dd70      	ble.n	8029154 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8029072:	4591      	cmp	r9, r2
 8029074:	dd6e      	ble.n	8029154 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8029076:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 802907a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 802907e:	440b      	add	r3, r1
 8029080:	b29b      	uxth	r3, r3
 8029082:	b21e      	sxth	r6, r3
 8029084:	2e00      	cmp	r6, #0
 8029086:	dd65      	ble.n	8029154 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8029088:	458e      	cmp	lr, r1
 802908a:	dd63      	ble.n	8029154 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 802908c:	45d1      	cmp	r9, sl
 802908e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8029092:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8029096:	bfb8      	it	lt
 8029098:	fa1f f089 	uxthlt.w	r0, r9
 802909c:	45b6      	cmp	lr, r6
 802909e:	f8ad 2008 	strh.w	r2, [sp, #8]
 80290a2:	bfb8      	it	lt
 80290a4:	fa1f f38e 	uxthlt.w	r3, lr
 80290a8:	1a80      	subs	r0, r0, r2
 80290aa:	f8ad 100a 	strh.w	r1, [sp, #10]
 80290ae:	1a5b      	subs	r3, r3, r1
 80290b0:	f8ad 000c 	strh.w	r0, [sp, #12]
 80290b4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80290b8:	f10d 0808 	add.w	r8, sp, #8
 80290bc:	ae04      	add	r6, sp, #16
 80290be:	e898 0003 	ldmia.w	r8, {r0, r1}
 80290c2:	e886 0003 	stmia.w	r6, {r0, r1}
 80290c6:	f8dc 3000 	ldr.w	r3, [ip]
 80290ca:	4660      	mov	r0, ip
 80290cc:	4631      	mov	r1, r6
 80290ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80290d0:	4798      	blx	r3
 80290d2:	6861      	ldr	r1, [r4, #4]
 80290d4:	4640      	mov	r0, r8
 80290d6:	3104      	adds	r1, #4
 80290d8:	f7f5 f9cc 	bl	801e474 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80290dc:	4630      	mov	r0, r6
 80290de:	f7f5 f9e1 	bl	801e4a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80290e2:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 80290e6:	f7f4 fae7 	bl	801d6b8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 80290ea:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
 80290ee:	4638      	mov	r0, r7
 80290f0:	f000 fab2 	bl	8029658 <_ZN8touchgfx7Outline5resetEv>
 80290f4:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80290f8:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80290fc:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 8029100:	015b      	lsls	r3, r3, #5
 8029102:	f8a4 209c 	strh.w	r2, [r4, #156]	; 0x9c
 8029106:	0152      	lsls	r2, r2, #5
 8029108:	60e3      	str	r3, [r4, #12]
 802910a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 802910e:	60a2      	str	r2, [r4, #8]
 8029110:	015b      	lsls	r3, r3, #5
 8029112:	6123      	str	r3, [r4, #16]
 8029114:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8029118:	015b      	lsls	r3, r3, #5
 802911a:	6163      	str	r3, [r4, #20]
 802911c:	4b47      	ldr	r3, [pc, #284]	; (802923c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 802911e:	6818      	ldr	r0, [r3, #0]
 8029120:	6803      	ldr	r3, [r0, #0]
 8029122:	6a1b      	ldr	r3, [r3, #32]
 8029124:	4798      	blx	r3
 8029126:	4606      	mov	r6, r0
 8029128:	f7e7 fe52 	bl	8010dd0 <_ZN8touchgfx3HAL3lcdEv>
 802912c:	6803      	ldr	r3, [r0, #0]
 802912e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029130:	4798      	blx	r3
 8029132:	4607      	mov	r7, r0
 8029134:	f7e7 fe4c 	bl	8010dd0 <_ZN8touchgfx3HAL3lcdEv>
 8029138:	6803      	ldr	r3, [r0, #0]
 802913a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802913c:	4798      	blx	r3
 802913e:	280c      	cmp	r0, #12
 8029140:	d854      	bhi.n	80291ec <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x204>
 8029142:	e8df f000 	tbb	[pc, r0]
 8029146:	554b      	.short	0x554b
 8029148:	2b6e0a66 	.word	0x2b6e0a66
 802914c:	5f5f5f3b 	.word	0x5f5f5f3b
 8029150:	5f5f      	.short	0x5f5f
 8029152:	6e          	.byte	0x6e
 8029153:	00          	.byte	0x00
 8029154:	2300      	movs	r3, #0
 8029156:	9303      	str	r3, [sp, #12]
 8029158:	e7ae      	b.n	80290b8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd0>
 802915a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802915e:	2108      	movs	r1, #8
 8029160:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8029164:	fb92 f1f1 	sdiv	r1, r2, r1
 8029168:	fb07 1303 	mla	r3, r7, r3, r1
 802916c:	441e      	add	r6, r3
 802916e:	4253      	negs	r3, r2
 8029170:	f002 0207 	and.w	r2, r2, #7
 8029174:	f003 0307 	and.w	r3, r3, #7
 8029178:	bf58      	it	pl
 802917a:	425a      	negpl	r2, r3
 802917c:	b2d2      	uxtb	r2, r2
 802917e:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8029182:	4628      	mov	r0, r5
 8029184:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8029188:	66e1      	str	r1, [r4, #108]	; 0x6c
 802918a:	e9cd 1700 	strd	r1, r7, [sp]
 802918e:	4631      	mov	r1, r6
 8029190:	f001 fabb 	bl	802a70a <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 8029194:	4620      	mov	r0, r4
 8029196:	b006      	add	sp, #24
 8029198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802919c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80291a0:	2104      	movs	r1, #4
 80291a2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80291a6:	fb92 f1f1 	sdiv	r1, r2, r1
 80291aa:	fb07 1303 	mla	r3, r7, r3, r1
 80291ae:	441e      	add	r6, r3
 80291b0:	4253      	negs	r3, r2
 80291b2:	f002 0203 	and.w	r2, r2, #3
 80291b6:	f003 0303 	and.w	r3, r3, #3
 80291ba:	e7dd      	b.n	8029178 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x190>
 80291bc:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80291c0:	2102      	movs	r1, #2
 80291c2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80291c6:	2a00      	cmp	r2, #0
 80291c8:	fb92 f1f1 	sdiv	r1, r2, r1
 80291cc:	f002 0201 	and.w	r2, r2, #1
 80291d0:	fb07 1303 	mla	r3, r7, r3, r1
 80291d4:	bfb8      	it	lt
 80291d6:	4252      	neglt	r2, r2
 80291d8:	441e      	add	r6, r3
 80291da:	e7cf      	b.n	802917c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 80291dc:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80291e0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80291e4:	437b      	muls	r3, r7
 80291e6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80291ea:	441e      	add	r6, r3
 80291ec:	2200      	movs	r2, #0
 80291ee:	e7c6      	b.n	802917e <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x196>
 80291f0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80291f4:	2103      	movs	r1, #3
 80291f6:	fb07 f203 	mul.w	r2, r7, r3
 80291fa:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80291fe:	fb13 2301 	smlabb	r3, r3, r1, r2
 8029202:	e7f2      	b.n	80291ea <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8029204:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8029208:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802920c:	fb07 2303 	mla	r3, r7, r3, r2
 8029210:	e7eb      	b.n	80291ea <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8029212:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8029216:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802921a:	437b      	muls	r3, r7
 802921c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8029220:	e7e3      	b.n	80291ea <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8029222:	4b07      	ldr	r3, [pc, #28]	; (8029240 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 8029224:	2156      	movs	r1, #86	; 0x56
 8029226:	4a03      	ldr	r2, [pc, #12]	; (8029234 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8029228:	e70e      	b.n	8029048 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x60>
 802922a:	bf00      	nop
 802922c:	080305b4 	.word	0x080305b4
 8029230:	080304fe 	.word	0x080304fe
 8029234:	080305bc 	.word	0x080305bc
 8029238:	0803055a 	.word	0x0803055a
 802923c:	2000bf68 	.word	0x2000bf68
 8029240:	0803058e 	.word	0x0803058e

08029244 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 8029244:	6812      	ldr	r2, [r2, #0]
 8029246:	2a00      	cmp	r2, #0
 8029248:	db0b      	blt.n	8029262 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 802924a:	9800      	ldr	r0, [sp, #0]
 802924c:	6800      	ldr	r0, [r0, #0]
 802924e:	4290      	cmp	r0, r2
 8029250:	bfd4      	ite	le
 8029252:	2002      	movle	r0, #2
 8029254:	2000      	movgt	r0, #0
 8029256:	680a      	ldr	r2, [r1, #0]
 8029258:	2a00      	cmp	r2, #0
 802925a:	da04      	bge.n	8029266 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 802925c:	f040 0004 	orr.w	r0, r0, #4
 8029260:	4770      	bx	lr
 8029262:	2001      	movs	r0, #1
 8029264:	e7f7      	b.n	8029256 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 8029266:	681b      	ldr	r3, [r3, #0]
 8029268:	4293      	cmp	r3, r2
 802926a:	bfd8      	it	le
 802926c:	f040 0008 	orrle.w	r0, r0, #8
 8029270:	4770      	bx	lr
	...

08029274 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8029274:	4b07      	ldr	r3, [pc, #28]	; (8029294 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 8029276:	b510      	push	{r4, lr}
 8029278:	781b      	ldrb	r3, [r3, #0]
 802927a:	2b01      	cmp	r3, #1
 802927c:	d108      	bne.n	8029290 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 802927e:	6843      	ldr	r3, [r0, #4]
 8029280:	6814      	ldr	r4, [r2, #0]
 8029282:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8029286:	680b      	ldr	r3, [r1, #0]
 8029288:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 802928c:	6013      	str	r3, [r2, #0]
 802928e:	600c      	str	r4, [r1, #0]
 8029290:	bd10      	pop	{r4, pc}
 8029292:	bf00      	nop
 8029294:	2000bf5e 	.word	0x2000bf5e

08029298 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8029298:	b5f0      	push	{r4, r5, r6, r7, lr}
 802929a:	b085      	sub	sp, #20
 802929c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80292a0:	4604      	mov	r4, r0
 80292a2:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80292a6:	b33b      	cbz	r3, 80292f8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 80292a8:	aa02      	add	r2, sp, #8
 80292aa:	a903      	add	r1, sp, #12
 80292ac:	f7ff ffe2 	bl	8029274 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 80292b0:	68a3      	ldr	r3, [r4, #8]
 80292b2:	9e03      	ldr	r6, [sp, #12]
 80292b4:	aa02      	add	r2, sp, #8
 80292b6:	9f02      	ldr	r7, [sp, #8]
 80292b8:	a903      	add	r1, sp, #12
 80292ba:	1af6      	subs	r6, r6, r3
 80292bc:	68e3      	ldr	r3, [r4, #12]
 80292be:	4620      	mov	r0, r4
 80292c0:	1aff      	subs	r7, r7, r3
 80292c2:	f104 0314 	add.w	r3, r4, #20
 80292c6:	9603      	str	r6, [sp, #12]
 80292c8:	9300      	str	r3, [sp, #0]
 80292ca:	f104 0310 	add.w	r3, r4, #16
 80292ce:	9702      	str	r7, [sp, #8]
 80292d0:	f7ff ffb8 	bl	8029244 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 80292d4:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 80292d8:	4605      	mov	r5, r0
 80292da:	b97b      	cbnz	r3, 80292fc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 80292dc:	463a      	mov	r2, r7
 80292de:	4631      	mov	r1, r6
 80292e0:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80292e4:	f7ff fe7a 	bl	8028fdc <_ZN8touchgfx10Rasterizer6lineToEii>
 80292e8:	9b03      	ldr	r3, [sp, #12]
 80292ea:	f884 50ac 	strb.w	r5, [r4, #172]	; 0xac
 80292ee:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 80292f2:	9b02      	ldr	r3, [sp, #8]
 80292f4:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 80292f8:	b005      	add	sp, #20
 80292fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80292fc:	b110      	cbz	r0, 8029304 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 80292fe:	ea13 0200 	ands.w	r2, r3, r0
 8029302:	d11c      	bne.n	802933e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 8029304:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
 8029308:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 802930c:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
 8029310:	b188      	cbz	r0, 8029336 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 8029312:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 8029316:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 802931a:	b913      	cbnz	r3, 8029322 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 802931c:	4630      	mov	r0, r6
 802931e:	f001 f806 	bl	802a32e <_ZN8touchgfx7Outline6moveToEii>
 8029322:	2300      	movs	r3, #0
 8029324:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8029328:	2301      	movs	r3, #1
 802932a:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 802932e:	4630      	mov	r0, r6
 8029330:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8029334:	e7d6      	b.n	80292e4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 8029336:	4630      	mov	r0, r6
 8029338:	f7ff fe50 	bl	8028fdc <_ZN8touchgfx10Rasterizer6lineToEii>
 802933c:	e7f7      	b.n	802932e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 802933e:	4615      	mov	r5, r2
 8029340:	e7d2      	b.n	80292e8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

08029342 <_ZN8touchgfx6Canvas5closeEv>:
 8029342:	b538      	push	{r3, r4, r5, lr}
 8029344:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8029348:	4604      	mov	r4, r0
 802934a:	b993      	cbnz	r3, 8029372 <_ZN8touchgfx6Canvas5closeEv+0x30>
 802934c:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 8029350:	f890 20ad 	ldrb.w	r2, [r0, #173]	; 0xad
 8029354:	4213      	tst	r3, r2
 8029356:	d10c      	bne.n	8029372 <_ZN8touchgfx6Canvas5closeEv+0x30>
 8029358:	f100 052c 	add.w	r5, r0, #44	; 0x2c
 802935c:	b123      	cbz	r3, 8029368 <_ZN8touchgfx6Canvas5closeEv+0x26>
 802935e:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
 8029362:	4628      	mov	r0, r5
 8029364:	f7ff fe3a 	bl	8028fdc <_ZN8touchgfx10Rasterizer6lineToEii>
 8029368:	4628      	mov	r0, r5
 802936a:	e9d4 122c 	ldrd	r1, r2, [r4, #176]	; 0xb0
 802936e:	f7ff fe35 	bl	8028fdc <_ZN8touchgfx10Rasterizer6lineToEii>
 8029372:	2300      	movs	r3, #0
 8029374:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8029378:	bd38      	pop	{r3, r4, r5, pc}

0802937a <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 802937a:	b5f0      	push	{r4, r5, r6, r7, lr}
 802937c:	b085      	sub	sp, #20
 802937e:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8029382:	4604      	mov	r4, r0
 8029384:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8029388:	b353      	cbz	r3, 80293e0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 802938a:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 802938e:	b90b      	cbnz	r3, 8029394 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 8029390:	f7ff ffd7 	bl	8029342 <_ZN8touchgfx6Canvas5closeEv>
 8029394:	aa02      	add	r2, sp, #8
 8029396:	a903      	add	r1, sp, #12
 8029398:	4620      	mov	r0, r4
 802939a:	f7ff ff6b 	bl	8029274 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802939e:	68a3      	ldr	r3, [r4, #8]
 80293a0:	9d03      	ldr	r5, [sp, #12]
 80293a2:	aa02      	add	r2, sp, #8
 80293a4:	9e02      	ldr	r6, [sp, #8]
 80293a6:	a903      	add	r1, sp, #12
 80293a8:	1aed      	subs	r5, r5, r3
 80293aa:	68e3      	ldr	r3, [r4, #12]
 80293ac:	4620      	mov	r0, r4
 80293ae:	1af6      	subs	r6, r6, r3
 80293b0:	f104 0314 	add.w	r3, r4, #20
 80293b4:	9503      	str	r5, [sp, #12]
 80293b6:	9300      	str	r3, [sp, #0]
 80293b8:	f104 0310 	add.w	r3, r4, #16
 80293bc:	9602      	str	r6, [sp, #8]
 80293be:	f7ff ff41 	bl	8029244 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 80293c2:	4607      	mov	r7, r0
 80293c4:	b170      	cbz	r0, 80293e4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 80293c6:	2301      	movs	r3, #1
 80293c8:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 80293cc:	9a03      	ldr	r2, [sp, #12]
 80293ce:	9b02      	ldr	r3, [sp, #8]
 80293d0:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
 80293d4:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
 80293d8:	f884 70ac 	strb.w	r7, [r4, #172]	; 0xac
 80293dc:	e9c4 2329 	strd	r2, r3, [r4, #164]	; 0xa4
 80293e0:	b005      	add	sp, #20
 80293e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80293e4:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 80293e8:	f884 00ad 	strb.w	r0, [r4, #173]	; 0xad
 80293ec:	b92b      	cbnz	r3, 80293fa <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 80293ee:	4632      	mov	r2, r6
 80293f0:	4629      	mov	r1, r5
 80293f2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80293f6:	f000 ff9a 	bl	802a32e <_ZN8touchgfx7Outline6moveToEii>
 80293fa:	2300      	movs	r3, #0
 80293fc:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8029400:	2301      	movs	r3, #1
 8029402:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 8029406:	e7e1      	b.n	80293cc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

08029408 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 8029408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802940c:	4604      	mov	r4, r0
 802940e:	b087      	sub	sp, #28
 8029410:	9105      	str	r1, [sp, #20]
 8029412:	f001 f8d0 	bl	802a5b6 <_ZN8touchgfx7Outline8getCellsEv>
 8029416:	f8d4 9008 	ldr.w	r9, [r4, #8]
 802941a:	4605      	mov	r5, r0
 802941c:	f1b9 0f00 	cmp.w	r9, #0
 8029420:	d103      	bne.n	802942a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 8029422:	2001      	movs	r0, #1
 8029424:	b007      	add	sp, #28
 8029426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802942a:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 802942e:	2e00      	cmp	r6, #0
 8029430:	d139      	bne.n	80294a6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 8029432:	f104 0848 	add.w	r8, r4, #72	; 0x48
 8029436:	f105 0708 	add.w	r7, r5, #8
 802943a:	4640      	mov	r0, r8
 802943c:	f001 f8fd 	bl	802a63a <_ZN8touchgfx8Scanline5resetEv>
 8029440:	f109 33ff 	add.w	r3, r9, #4294967295
 8029444:	9303      	str	r3, [sp, #12]
 8029446:	f9b5 b000 	ldrsh.w	fp, [r5]
 802944a:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 802944e:	46da      	mov	sl, fp
 8029450:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8029454:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 8029458:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 802945c:	9b03      	ldr	r3, [sp, #12]
 802945e:	4416      	add	r6, r2
 8029460:	9504      	str	r5, [sp, #16]
 8029462:	463d      	mov	r5, r7
 8029464:	3b01      	subs	r3, #1
 8029466:	9303      	str	r3, [sp, #12]
 8029468:	3301      	adds	r3, #1
 802946a:	d01e      	beq.n	80294aa <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 802946c:	3708      	adds	r7, #8
 802946e:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 8029472:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 8029476:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 802947a:	4290      	cmp	r0, r2
 802947c:	d11e      	bne.n	80294bc <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 802947e:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 8029482:	4411      	add	r1, r2
 8029484:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 8029488:	e7e8      	b.n	802945c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 802948a:	1c91      	adds	r1, r2, #2
 802948c:	f04f 0301 	mov.w	r3, #1
 8029490:	65e1      	str	r1, [r4, #92]	; 0x5c
 8029492:	8053      	strh	r3, [r2, #2]
 8029494:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8029496:	1c91      	adds	r1, r2, #2
 8029498:	65a1      	str	r1, [r4, #88]	; 0x58
 802949a:	f8a2 b002 	strh.w	fp, [r2, #2]
 802949e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80294a0:	3201      	adds	r2, #1
 80294a2:	6562      	str	r2, [r4, #84]	; 0x54
 80294a4:	e03a      	b.n	802951c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 80294a6:	2000      	movs	r0, #0
 80294a8:	e7bc      	b.n	8029424 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 80294aa:	b951      	cbnz	r1, 80294c2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 80294ac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80294ae:	2b00      	cmp	r3, #0
 80294b0:	d0b7      	beq.n	8029422 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 80294b2:	4641      	mov	r1, r8
 80294b4:	9805      	ldr	r0, [sp, #20]
 80294b6:	f7ff fd5b 	bl	8028f70 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 80294ba:	e7b2      	b.n	8029422 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 80294bc:	2900      	cmp	r1, #0
 80294be:	d035      	beq.n	802952c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 80294c0:	9504      	str	r5, [sp, #16]
 80294c2:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 80294c6:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 80294ca:	f7ff fd3d 	bl	8028f48 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 80294ce:	4605      	mov	r5, r0
 80294d0:	b330      	cbz	r0, 8029520 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 80294d2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80294d4:	b182      	cbz	r2, 80294f8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 80294d6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80294d8:	454a      	cmp	r2, r9
 80294da:	d00d      	beq.n	80294f8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 80294dc:	4641      	mov	r1, r8
 80294de:	9805      	ldr	r0, [sp, #20]
 80294e0:	f7ff fd46 	bl	8028f70 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 80294e4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80294e8:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80294ea:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 80294ee:	65e2      	str	r2, [r4, #92]	; 0x5c
 80294f0:	2300      	movs	r3, #0
 80294f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80294f4:	6563      	str	r3, [r4, #84]	; 0x54
 80294f6:	65a2      	str	r2, [r4, #88]	; 0x58
 80294f8:	f1bb 0f00 	cmp.w	fp, #0
 80294fc:	db10      	blt.n	8029520 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 80294fe:	f7f4 f959 	bl	801d7b4 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8029502:	4583      	cmp	fp, r0
 8029504:	d20c      	bcs.n	8029520 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8029506:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8029508:	f802 500b 	strb.w	r5, [r2, fp]
 802950c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 802950e:	3201      	adds	r2, #1
 8029510:	455a      	cmp	r2, fp
 8029512:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8029514:	d1b9      	bne.n	802948a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 8029516:	8811      	ldrh	r1, [r2, #0]
 8029518:	3101      	adds	r1, #1
 802951a:	8011      	strh	r1, [r2, #0]
 802951c:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 8029520:	9b03      	ldr	r3, [sp, #12]
 8029522:	3301      	adds	r3, #1
 8029524:	d0c2      	beq.n	80294ac <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 8029526:	f10b 0a01 	add.w	sl, fp, #1
 802952a:	9d04      	ldr	r5, [sp, #16]
 802952c:	f9b5 3000 	ldrsh.w	r3, [r5]
 8029530:	4553      	cmp	r3, sl
 8029532:	dd88      	ble.n	8029446 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8029534:	01b1      	lsls	r1, r6, #6
 8029536:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 802953a:	f7ff fd05 	bl	8028f48 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 802953e:	4683      	mov	fp, r0
 8029540:	2800      	cmp	r0, #0
 8029542:	d080      	beq.n	8029446 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8029544:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8029546:	b183      	cbz	r3, 802956a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8029548:	6d23      	ldr	r3, [r4, #80]	; 0x50
 802954a:	454b      	cmp	r3, r9
 802954c:	d00d      	beq.n	802956a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 802954e:	4641      	mov	r1, r8
 8029550:	9805      	ldr	r0, [sp, #20]
 8029552:	f7ff fd0d 	bl	8028f70 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8029556:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802955a:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 802955e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8029560:	65e3      	str	r3, [r4, #92]	; 0x5c
 8029562:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8029564:	65a3      	str	r3, [r4, #88]	; 0x58
 8029566:	2300      	movs	r3, #0
 8029568:	6563      	str	r3, [r4, #84]	; 0x54
 802956a:	f9b5 3000 	ldrsh.w	r3, [r5]
 802956e:	464a      	mov	r2, r9
 8029570:	f8cd b000 	str.w	fp, [sp]
 8029574:	4651      	mov	r1, sl
 8029576:	eba3 030a 	sub.w	r3, r3, sl
 802957a:	4640      	mov	r0, r8
 802957c:	f001 f884 	bl	802a688 <_ZN8touchgfx8Scanline7addSpanEiijj>
 8029580:	e761      	b.n	8029446 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

08029582 <_ZN8touchgfx6Canvas6renderEv>:
 8029582:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8029584:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8029588:	4604      	mov	r4, r0
 802958a:	b913      	cbnz	r3, 8029592 <_ZN8touchgfx6Canvas6renderEv+0x10>
 802958c:	2001      	movs	r0, #1
 802958e:	b003      	add	sp, #12
 8029590:	bd30      	pop	{r4, r5, pc}
 8029592:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8029596:	2b00      	cmp	r3, #0
 8029598:	d131      	bne.n	80295fe <_ZN8touchgfx6Canvas6renderEv+0x7c>
 802959a:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
 802959e:	2b00      	cmp	r3, #0
 80295a0:	d0f4      	beq.n	802958c <_ZN8touchgfx6Canvas6renderEv+0xa>
 80295a2:	6840      	ldr	r0, [r0, #4]
 80295a4:	6803      	ldr	r3, [r0, #0]
 80295a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80295a8:	4798      	blx	r3
 80295aa:	2800      	cmp	r0, #0
 80295ac:	d0ee      	beq.n	802958c <_ZN8touchgfx6Canvas6renderEv+0xa>
 80295ae:	4620      	mov	r0, r4
 80295b0:	f7ff fec7 	bl	8029342 <_ZN8touchgfx6Canvas5closeEv>
 80295b4:	6860      	ldr	r0, [r4, #4]
 80295b6:	6803      	ldr	r3, [r0, #0]
 80295b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80295ba:	4798      	blx	r3
 80295bc:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
 80295c0:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 80295c4:	f7f2 feab 	bl	801c31e <_ZN8touchgfx15AbstractPainter9setOffsetEtt>
 80295c8:	6860      	ldr	r0, [r4, #4]
 80295ca:	6803      	ldr	r3, [r0, #0]
 80295cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80295ce:	4798      	blx	r3
 80295d0:	4605      	mov	r5, r0
 80295d2:	6860      	ldr	r0, [r4, #4]
 80295d4:	6803      	ldr	r3, [r0, #0]
 80295d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80295d8:	4798      	blx	r3
 80295da:	4601      	mov	r1, r0
 80295dc:	4628      	mov	r0, r5
 80295de:	f7f2 fea1 	bl	801c324 <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>
 80295e2:	6860      	ldr	r0, [r4, #4]
 80295e4:	6803      	ldr	r3, [r0, #0]
 80295e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80295e8:	4798      	blx	r3
 80295ea:	f104 0318 	add.w	r3, r4, #24
 80295ee:	4669      	mov	r1, sp
 80295f0:	e9cd 3000 	strd	r3, r0, [sp]
 80295f4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80295f8:	f7ff ff06 	bl	8029408 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 80295fc:	e7c7      	b.n	802958e <_ZN8touchgfx6Canvas6renderEv+0xc>
 80295fe:	2000      	movs	r0, #0
 8029600:	e7c5      	b.n	802958e <_ZN8touchgfx6Canvas6renderEv+0xc>
	...

08029604 <_ZN8touchgfx6CanvasD1Ev>:
 8029604:	b538      	push	{r3, r4, r5, lr}
 8029606:	4605      	mov	r5, r0
 8029608:	4b08      	ldr	r3, [pc, #32]	; (802962c <_ZN8touchgfx6CanvasD1Ev+0x28>)
 802960a:	4604      	mov	r4, r0
 802960c:	f845 3b2c 	str.w	r3, [r5], #44
 8029610:	4b07      	ldr	r3, [pc, #28]	; (8029630 <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 8029612:	6818      	ldr	r0, [r3, #0]
 8029614:	6803      	ldr	r3, [r0, #0]
 8029616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029618:	4798      	blx	r3
 802961a:	4628      	mov	r0, r5
 802961c:	f000 f814 	bl	8029648 <_ZN8touchgfx7OutlineD1Ev>
 8029620:	f104 0018 	add.w	r0, r4, #24
 8029624:	f001 f870 	bl	802a708 <_ZN8touchgfx15RenderingBufferD1Ev>
 8029628:	4620      	mov	r0, r4
 802962a:	bd38      	pop	{r3, r4, r5, pc}
 802962c:	080305b4 	.word	0x080305b4
 8029630:	2000bf68 	.word	0x2000bf68

08029634 <_ZN8touchgfx6CanvasD0Ev>:
 8029634:	b510      	push	{r4, lr}
 8029636:	4604      	mov	r4, r0
 8029638:	f7ff ffe4 	bl	8029604 <_ZN8touchgfx6CanvasD1Ev>
 802963c:	21b8      	movs	r1, #184	; 0xb8
 802963e:	4620      	mov	r0, r4
 8029640:	f001 f873 	bl	802a72a <_ZdlPvj>
 8029644:	4620      	mov	r0, r4
 8029646:	bd10      	pop	{r4, pc}

08029648 <_ZN8touchgfx7OutlineD1Ev>:
 8029648:	4770      	bx	lr

0802964a <_ZN8touchgfx7OutlineD0Ev>:
 802964a:	b510      	push	{r4, lr}
 802964c:	4604      	mov	r4, r0
 802964e:	2148      	movs	r1, #72	; 0x48
 8029650:	f001 f86b 	bl	802a72a <_ZdlPvj>
 8029654:	4620      	mov	r0, r4
 8029656:	bd10      	pop	{r4, pc}

08029658 <_ZN8touchgfx7Outline5resetEv>:
 8029658:	b510      	push	{r4, lr}
 802965a:	4604      	mov	r4, r0
 802965c:	f7f4 f8c2 	bl	801d7e4 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8029660:	60e0      	str	r0, [r4, #12]
 8029662:	f7f4 f8c5 	bl	801d7f0 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8029666:	68e3      	ldr	r3, [r4, #12]
 8029668:	2200      	movs	r2, #0
 802966a:	08c0      	lsrs	r0, r0, #3
 802966c:	6123      	str	r3, [r4, #16]
 802966e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8029672:	6060      	str	r0, [r4, #4]
 8029674:	82a3      	strh	r3, [r4, #20]
 8029676:	82e3      	strh	r3, [r4, #22]
 8029678:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802967a:	60a2      	str	r2, [r4, #8]
 802967c:	f023 0301 	bic.w	r3, r3, #1
 8029680:	8322      	strh	r2, [r4, #24]
 8029682:	8362      	strh	r2, [r4, #26]
 8029684:	f043 0302 	orr.w	r3, r3, #2
 8029688:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802968c:	63e3      	str	r3, [r4, #60]	; 0x3c
 802968e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8029692:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 8029696:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802969a:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 802969e:	bd10      	pop	{r4, pc}

080296a0 <_ZN8touchgfx7OutlineC1Ev>:
 80296a0:	4b0f      	ldr	r3, [pc, #60]	; (80296e0 <_ZN8touchgfx7OutlineC1Ev+0x40>)
 80296a2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80296a6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80296aa:	b510      	push	{r4, lr}
 80296ac:	6003      	str	r3, [r0, #0]
 80296ae:	2300      	movs	r3, #0
 80296b0:	4604      	mov	r4, r0
 80296b2:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 80296b6:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80296ba:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80296be:	e9c0 3305 	strd	r3, r3, [r0, #20]
 80296c2:	e9c0 3307 	strd	r3, r3, [r0, #28]
 80296c6:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 80296ca:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 80296ce:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 80296d2:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 80296d6:	f7ff ffbf 	bl	8029658 <_ZN8touchgfx7Outline5resetEv>
 80296da:	4620      	mov	r0, r4
 80296dc:	bd10      	pop	{r4, pc}
 80296de:	bf00      	nop
 80296e0:	08030614 	.word	0x08030614

080296e4 <_ZN8touchgfx7Outline10renderLineEiiii>:
 80296e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80296e8:	b093      	sub	sp, #76	; 0x4c
 80296ea:	4604      	mov	r4, r0
 80296ec:	1156      	asrs	r6, r2, #5
 80296ee:	f002 0e1f 	and.w	lr, r2, #31
 80296f2:	981c      	ldr	r0, [sp, #112]	; 0x70
 80296f4:	9305      	str	r3, [sp, #20]
 80296f6:	1143      	asrs	r3, r0, #5
 80296f8:	1145      	asrs	r5, r0, #5
 80296fa:	930c      	str	r3, [sp, #48]	; 0x30
 80296fc:	f000 031f 	and.w	r3, r0, #31
 8029700:	9303      	str	r3, [sp, #12]
 8029702:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8029704:	42b3      	cmp	r3, r6
 8029706:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8029708:	bfc8      	it	gt
 802970a:	6326      	strgt	r6, [r4, #48]	; 0x30
 802970c:	42b3      	cmp	r3, r6
 802970e:	bfdc      	itt	le
 8029710:	1c73      	addle	r3, r6, #1
 8029712:	63a3      	strle	r3, [r4, #56]	; 0x38
 8029714:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8029716:	42ab      	cmp	r3, r5
 8029718:	bfc8      	it	gt
 802971a:	462b      	movgt	r3, r5
 802971c:	ea4f 1560 	mov.w	r5, r0, asr #5
 8029720:	bfc8      	it	gt
 8029722:	6323      	strgt	r3, [r4, #48]	; 0x30
 8029724:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8029726:	42ab      	cmp	r3, r5
 8029728:	bfd8      	it	le
 802972a:	462b      	movle	r3, r5
 802972c:	ea4f 1561 	mov.w	r5, r1, asr #5
 8029730:	bfdc      	itt	le
 8029732:	3301      	addle	r3, #1
 8029734:	63a3      	strle	r3, [r4, #56]	; 0x38
 8029736:	9b05      	ldr	r3, [sp, #20]
 8029738:	eba3 0a01 	sub.w	sl, r3, r1
 802973c:	1143      	asrs	r3, r0, #5
 802973e:	429e      	cmp	r6, r3
 8029740:	f040 8119 	bne.w	8029976 <_ZN8touchgfx7Outline10renderLineEiiii+0x292>
 8029744:	9b05      	ldr	r3, [sp, #20]
 8029746:	ea4f 1c63 	mov.w	ip, r3, asr #5
 802974a:	9b03      	ldr	r3, [sp, #12]
 802974c:	459e      	cmp	lr, r3
 802974e:	d12c      	bne.n	80297aa <_ZN8touchgfx7Outline10renderLineEiiii+0xc6>
 8029750:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8029754:	eb0c 4106 	add.w	r1, ip, r6, lsl #16
 8029758:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 802975c:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 8029760:	4291      	cmp	r1, r2
 8029762:	d037      	beq.n	80297d4 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8029764:	8b61      	ldrh	r1, [r4, #26]
 8029766:	8b22      	ldrh	r2, [r4, #24]
 8029768:	430a      	orrs	r2, r1
 802976a:	d00b      	beq.n	8029784 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 802976c:	2b00      	cmp	r3, #0
 802976e:	db09      	blt.n	8029784 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8029770:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8029772:	429a      	cmp	r2, r3
 8029774:	dd06      	ble.n	8029784 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8029776:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 802977a:	429a      	cmp	r2, r3
 802977c:	d308      	bcc.n	8029790 <_ZN8touchgfx7Outline10renderLineEiiii+0xac>
 802977e:	2301      	movs	r3, #1
 8029780:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8029784:	f8a4 c014 	strh.w	ip, [r4, #20]
 8029788:	82e6      	strh	r6, [r4, #22]
 802978a:	2300      	movs	r3, #0
 802978c:	8323      	strh	r3, [r4, #24]
 802978e:	e0c6      	b.n	802991e <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 8029790:	f104 0314 	add.w	r3, r4, #20
 8029794:	6922      	ldr	r2, [r4, #16]
 8029796:	cb03      	ldmia	r3!, {r0, r1}
 8029798:	6010      	str	r0, [r2, #0]
 802979a:	6051      	str	r1, [r2, #4]
 802979c:	6923      	ldr	r3, [r4, #16]
 802979e:	3308      	adds	r3, #8
 80297a0:	6123      	str	r3, [r4, #16]
 80297a2:	68a3      	ldr	r3, [r4, #8]
 80297a4:	3301      	adds	r3, #1
 80297a6:	60a3      	str	r3, [r4, #8]
 80297a8:	e7ec      	b.n	8029784 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 80297aa:	9b05      	ldr	r3, [sp, #20]
 80297ac:	45ac      	cmp	ip, r5
 80297ae:	f001 011f 	and.w	r1, r1, #31
 80297b2:	8b20      	ldrh	r0, [r4, #24]
 80297b4:	f003 031f 	and.w	r3, r3, #31
 80297b8:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 80297bc:	9304      	str	r3, [sp, #16]
 80297be:	9b03      	ldr	r3, [sp, #12]
 80297c0:	eba3 020e 	sub.w	r2, r3, lr
 80297c4:	d109      	bne.n	80297da <_ZN8touchgfx7Outline10renderLineEiiii+0xf6>
 80297c6:	9b04      	ldr	r3, [sp, #16]
 80297c8:	4410      	add	r0, r2
 80297ca:	4419      	add	r1, r3
 80297cc:	8320      	strh	r0, [r4, #24]
 80297ce:	fb02 8201 	mla	r2, r2, r1, r8
 80297d2:	8362      	strh	r2, [r4, #26]
 80297d4:	b013      	add	sp, #76	; 0x4c
 80297d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80297da:	f1ba 0f00 	cmp.w	sl, #0
 80297de:	f2c0 80a0 	blt.w	8029922 <_ZN8touchgfx7Outline10renderLineEiiii+0x23e>
 80297e2:	f1c1 0320 	rsb	r3, r1, #32
 80297e6:	f04f 0b20 	mov.w	fp, #32
 80297ea:	435a      	muls	r2, r3
 80297ec:	2301      	movs	r3, #1
 80297ee:	9302      	str	r3, [sp, #8]
 80297f0:	4459      	add	r1, fp
 80297f2:	fb92 f7fa 	sdiv	r7, r2, sl
 80297f6:	fb0a 2217 	mls	r2, sl, r7, r2
 80297fa:	2a00      	cmp	r2, #0
 80297fc:	bfbc      	itt	lt
 80297fe:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8029802:	4452      	addlt	r2, sl
 8029804:	fb07 8101 	mla	r1, r7, r1, r8
 8029808:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 802980c:	4438      	add	r0, r7
 802980e:	b20b      	sxth	r3, r1
 8029810:	9902      	ldr	r1, [sp, #8]
 8029812:	b200      	sxth	r0, r0
 8029814:	9301      	str	r3, [sp, #4]
 8029816:	8363      	strh	r3, [r4, #26]
 8029818:	186b      	adds	r3, r5, r1
 802981a:	0435      	lsls	r5, r6, #16
 802981c:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8029820:	8320      	strh	r0, [r4, #24]
 8029822:	eb03 0905 	add.w	r9, r3, r5
 8029826:	eb08 4801 	add.w	r8, r8, r1, lsl #16
 802982a:	9300      	str	r3, [sp, #0]
 802982c:	45c1      	cmp	r9, r8
 802982e:	9505      	str	r5, [sp, #20]
 8029830:	d014      	beq.n	802985c <_ZN8touchgfx7Outline10renderLineEiiii+0x178>
 8029832:	9b01      	ldr	r3, [sp, #4]
 8029834:	4303      	orrs	r3, r0
 8029836:	d00b      	beq.n	8029850 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8029838:	2900      	cmp	r1, #0
 802983a:	db09      	blt.n	8029850 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 802983c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802983e:	428b      	cmp	r3, r1
 8029840:	dd06      	ble.n	8029850 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8029842:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8029846:	4299      	cmp	r1, r3
 8029848:	d374      	bcc.n	8029934 <_ZN8touchgfx7Outline10renderLineEiiii+0x250>
 802984a:	2301      	movs	r3, #1
 802984c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8029850:	9b00      	ldr	r3, [sp, #0]
 8029852:	82e6      	strh	r6, [r4, #22]
 8029854:	82a3      	strh	r3, [r4, #20]
 8029856:	2300      	movs	r3, #0
 8029858:	8323      	strh	r3, [r4, #24]
 802985a:	8363      	strh	r3, [r4, #26]
 802985c:	9900      	ldr	r1, [sp, #0]
 802985e:	eb0e 0307 	add.w	r3, lr, r7
 8029862:	458c      	cmp	ip, r1
 8029864:	d04e      	beq.n	8029904 <_ZN8touchgfx7Outline10renderLineEiiii+0x220>
 8029866:	9903      	ldr	r1, [sp, #12]
 8029868:	eba2 020a 	sub.w	r2, r2, sl
 802986c:	1ac9      	subs	r1, r1, r3
 802986e:	9201      	str	r2, [sp, #4]
 8029870:	440f      	add	r7, r1
 8029872:	017f      	lsls	r7, r7, #5
 8029874:	fb97 fefa 	sdiv	lr, r7, sl
 8029878:	fb0a 771e 	mls	r7, sl, lr, r7
 802987c:	2f00      	cmp	r7, #0
 802987e:	bfbc      	itt	lt
 8029880:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8029884:	4457      	addlt	r7, sl
 8029886:	f10e 0101 	add.w	r1, lr, #1
 802988a:	9106      	str	r1, [sp, #24]
 802988c:	9a01      	ldr	r2, [sp, #4]
 802988e:	8b20      	ldrh	r0, [r4, #24]
 8029890:	19d2      	adds	r2, r2, r7
 8029892:	8b61      	ldrh	r1, [r4, #26]
 8029894:	9d02      	ldr	r5, [sp, #8]
 8029896:	9201      	str	r2, [sp, #4]
 8029898:	bf5b      	ittet	pl
 802989a:	eba2 020a 	subpl.w	r2, r2, sl
 802989e:	f8dd 8018 	ldrpl.w	r8, [sp, #24]
 80298a2:	46f0      	movmi	r8, lr
 80298a4:	9201      	strpl	r2, [sp, #4]
 80298a6:	9a00      	ldr	r2, [sp, #0]
 80298a8:	4440      	add	r0, r8
 80298aa:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 80298ae:	4443      	add	r3, r8
 80298b0:	442a      	add	r2, r5
 80298b2:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 80298b6:	9d05      	ldr	r5, [sp, #20]
 80298b8:	b200      	sxth	r0, r0
 80298ba:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 80298be:	b209      	sxth	r1, r1
 80298c0:	4415      	add	r5, r2
 80298c2:	8320      	strh	r0, [r4, #24]
 80298c4:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 80298c8:	8361      	strh	r1, [r4, #26]
 80298ca:	9200      	str	r2, [sp, #0]
 80298cc:	454d      	cmp	r5, r9
 80298ce:	d016      	beq.n	80298fe <_ZN8touchgfx7Outline10renderLineEiiii+0x21a>
 80298d0:	4301      	orrs	r1, r0
 80298d2:	d00d      	beq.n	80298f0 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 80298d4:	f1b8 0f00 	cmp.w	r8, #0
 80298d8:	db0a      	blt.n	80298f0 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 80298da:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80298dc:	4541      	cmp	r1, r8
 80298de:	dd07      	ble.n	80298f0 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 80298e0:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80298e4:	4288      	cmp	r0, r1
 80298e6:	d335      	bcc.n	8029954 <_ZN8touchgfx7Outline10renderLineEiiii+0x270>
 80298e8:	f04f 0101 	mov.w	r1, #1
 80298ec:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 80298f0:	9900      	ldr	r1, [sp, #0]
 80298f2:	82e6      	strh	r6, [r4, #22]
 80298f4:	82a1      	strh	r1, [r4, #20]
 80298f6:	f04f 0100 	mov.w	r1, #0
 80298fa:	8321      	strh	r1, [r4, #24]
 80298fc:	8361      	strh	r1, [r4, #26]
 80298fe:	9a00      	ldr	r2, [sp, #0]
 8029900:	4594      	cmp	ip, r2
 8029902:	d1c3      	bne.n	802988c <_ZN8touchgfx7Outline10renderLineEiiii+0x1a8>
 8029904:	9a03      	ldr	r2, [sp, #12]
 8029906:	f8b4 c01a 	ldrh.w	ip, [r4, #26]
 802990a:	1ad3      	subs	r3, r2, r3
 802990c:	8b22      	ldrh	r2, [r4, #24]
 802990e:	441a      	add	r2, r3
 8029910:	8322      	strh	r2, [r4, #24]
 8029912:	9a04      	ldr	r2, [sp, #16]
 8029914:	3220      	adds	r2, #32
 8029916:	eba2 020b 	sub.w	r2, r2, fp
 802991a:	fb03 c302 	mla	r3, r3, r2, ip
 802991e:	8363      	strh	r3, [r4, #26]
 8029920:	e758      	b.n	80297d4 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8029922:	f04f 33ff 	mov.w	r3, #4294967295
 8029926:	434a      	muls	r2, r1
 8029928:	f1ca 0a00 	rsb	sl, sl, #0
 802992c:	f04f 0b00 	mov.w	fp, #0
 8029930:	9302      	str	r3, [sp, #8]
 8029932:	e75d      	b.n	80297f0 <_ZN8touchgfx7Outline10renderLineEiiii+0x10c>
 8029934:	f104 0314 	add.w	r3, r4, #20
 8029938:	f8d4 8010 	ldr.w	r8, [r4, #16]
 802993c:	cb03      	ldmia	r3!, {r0, r1}
 802993e:	f8c8 0000 	str.w	r0, [r8]
 8029942:	f8c8 1004 	str.w	r1, [r8, #4]
 8029946:	6923      	ldr	r3, [r4, #16]
 8029948:	3308      	adds	r3, #8
 802994a:	6123      	str	r3, [r4, #16]
 802994c:	68a3      	ldr	r3, [r4, #8]
 802994e:	3301      	adds	r3, #1
 8029950:	60a3      	str	r3, [r4, #8]
 8029952:	e77d      	b.n	8029850 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8029954:	f104 0814 	add.w	r8, r4, #20
 8029958:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802995c:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8029960:	f8c9 0000 	str.w	r0, [r9]
 8029964:	f8c9 1004 	str.w	r1, [r9, #4]
 8029968:	6921      	ldr	r1, [r4, #16]
 802996a:	3108      	adds	r1, #8
 802996c:	6121      	str	r1, [r4, #16]
 802996e:	68a1      	ldr	r1, [r4, #8]
 8029970:	3101      	adds	r1, #1
 8029972:	60a1      	str	r1, [r4, #8]
 8029974:	e7bc      	b.n	80298f0 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8029976:	1a83      	subs	r3, r0, r2
 8029978:	9301      	str	r3, [sp, #4]
 802997a:	f1ba 0f00 	cmp.w	sl, #0
 802997e:	f040 8094 	bne.w	8029aaa <_ZN8touchgfx7Outline10renderLineEiiii+0x3c6>
 8029982:	9a01      	ldr	r2, [sp, #4]
 8029984:	0049      	lsls	r1, r1, #1
 8029986:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 802998a:	2a00      	cmp	r2, #0
 802998c:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 8029990:	8b62      	ldrh	r2, [r4, #26]
 8029992:	bfaa      	itet	ge
 8029994:	f04f 0a20 	movge.w	sl, #32
 8029998:	f04f 38ff 	movlt.w	r8, #4294967295
 802999c:	f04f 0801 	movge.w	r8, #1
 80299a0:	8b21      	ldrh	r1, [r4, #24]
 80299a2:	ebaa 0e0e 	sub.w	lr, sl, lr
 80299a6:	4471      	add	r1, lr
 80299a8:	fb0e 2e03 	mla	lr, lr, r3, r2
 80299ac:	eb08 0206 	add.w	r2, r8, r6
 80299b0:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 80299b4:	b209      	sxth	r1, r1
 80299b6:	eb05 4702 	add.w	r7, r5, r2, lsl #16
 80299ba:	eb06 4600 	add.w	r6, r6, r0, lsl #16
 80299be:	8321      	strh	r1, [r4, #24]
 80299c0:	fa0f fe8e 	sxth.w	lr, lr
 80299c4:	42b7      	cmp	r7, r6
 80299c6:	f8a4 e01a 	strh.w	lr, [r4, #26]
 80299ca:	d013      	beq.n	80299f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x310>
 80299cc:	ea51 010e 	orrs.w	r1, r1, lr
 80299d0:	d00b      	beq.n	80299ea <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 80299d2:	2800      	cmp	r0, #0
 80299d4:	db09      	blt.n	80299ea <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 80299d6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80299d8:	4281      	cmp	r1, r0
 80299da:	dd06      	ble.n	80299ea <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 80299dc:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80299e0:	4288      	cmp	r0, r1
 80299e2:	d339      	bcc.n	8029a58 <_ZN8touchgfx7Outline10renderLineEiiii+0x374>
 80299e4:	2101      	movs	r1, #1
 80299e6:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 80299ea:	2100      	movs	r1, #0
 80299ec:	82a5      	strh	r5, [r4, #20]
 80299ee:	82e2      	strh	r2, [r4, #22]
 80299f0:	8321      	strh	r1, [r4, #24]
 80299f2:	8361      	strh	r1, [r4, #26]
 80299f4:	f1aa 0610 	sub.w	r6, sl, #16
 80299f8:	f04f 0e00 	mov.w	lr, #0
 80299fc:	f04f 0b01 	mov.w	fp, #1
 8029a00:	0076      	lsls	r6, r6, #1
 8029a02:	fb06 f703 	mul.w	r7, r6, r3
 8029a06:	b236      	sxth	r6, r6
 8029a08:	b23f      	sxth	r7, r7
 8029a0a:	ea46 0107 	orr.w	r1, r6, r7
 8029a0e:	9100      	str	r1, [sp, #0]
 8029a10:	990c      	ldr	r1, [sp, #48]	; 0x30
 8029a12:	428a      	cmp	r2, r1
 8029a14:	d03e      	beq.n	8029a94 <_ZN8touchgfx7Outline10renderLineEiiii+0x3b0>
 8029a16:	4442      	add	r2, r8
 8029a18:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8029a1c:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8029a20:	eb05 4c02 	add.w	ip, r5, r2, lsl #16
 8029a24:	8326      	strh	r6, [r4, #24]
 8029a26:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 8029a2a:	8367      	strh	r7, [r4, #26]
 8029a2c:	4584      	cmp	ip, r0
 8029a2e:	d0ef      	beq.n	8029a10 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 8029a30:	9800      	ldr	r0, [sp, #0]
 8029a32:	b150      	cbz	r0, 8029a4a <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8029a34:	2900      	cmp	r1, #0
 8029a36:	db08      	blt.n	8029a4a <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8029a38:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8029a3a:	4288      	cmp	r0, r1
 8029a3c:	dd05      	ble.n	8029a4a <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8029a3e:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8029a42:	4288      	cmp	r0, r1
 8029a44:	d315      	bcc.n	8029a72 <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 8029a46:	f884 b044 	strb.w	fp, [r4, #68]	; 0x44
 8029a4a:	82a5      	strh	r5, [r4, #20]
 8029a4c:	82e2      	strh	r2, [r4, #22]
 8029a4e:	f8a4 e018 	strh.w	lr, [r4, #24]
 8029a52:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8029a56:	e7db      	b.n	8029a10 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 8029a58:	f104 0614 	add.w	r6, r4, #20
 8029a5c:	6927      	ldr	r7, [r4, #16]
 8029a5e:	ce03      	ldmia	r6!, {r0, r1}
 8029a60:	6038      	str	r0, [r7, #0]
 8029a62:	6079      	str	r1, [r7, #4]
 8029a64:	6921      	ldr	r1, [r4, #16]
 8029a66:	3108      	adds	r1, #8
 8029a68:	6121      	str	r1, [r4, #16]
 8029a6a:	68a1      	ldr	r1, [r4, #8]
 8029a6c:	3101      	adds	r1, #1
 8029a6e:	60a1      	str	r1, [r4, #8]
 8029a70:	e7bb      	b.n	80299ea <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8029a72:	f104 0c14 	add.w	ip, r4, #20
 8029a76:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8029a7a:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 8029a7e:	f8c9 0000 	str.w	r0, [r9]
 8029a82:	f8c9 1004 	str.w	r1, [r9, #4]
 8029a86:	6921      	ldr	r1, [r4, #16]
 8029a88:	3108      	adds	r1, #8
 8029a8a:	6121      	str	r1, [r4, #16]
 8029a8c:	68a1      	ldr	r1, [r4, #8]
 8029a8e:	3101      	adds	r1, #1
 8029a90:	60a1      	str	r1, [r4, #8]
 8029a92:	e7da      	b.n	8029a4a <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8029a94:	9a03      	ldr	r2, [sp, #12]
 8029a96:	8b61      	ldrh	r1, [r4, #26]
 8029a98:	f1a2 0c20 	sub.w	ip, r2, #32
 8029a9c:	8b22      	ldrh	r2, [r4, #24]
 8029a9e:	44d4      	add	ip, sl
 8029aa0:	4462      	add	r2, ip
 8029aa2:	fb0c 1303 	mla	r3, ip, r3, r1
 8029aa6:	8322      	strh	r2, [r4, #24]
 8029aa8:	e739      	b.n	802991e <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 8029aaa:	9b01      	ldr	r3, [sp, #4]
 8029aac:	2b00      	cmp	r3, #0
 8029aae:	db3f      	blt.n	8029b30 <_ZN8touchgfx7Outline10renderLineEiiii+0x44c>
 8029ab0:	2201      	movs	r2, #1
 8029ab2:	f1ce 0320 	rsb	r3, lr, #32
 8029ab6:	920b      	str	r2, [sp, #44]	; 0x2c
 8029ab8:	2220      	movs	r2, #32
 8029aba:	fb0a f303 	mul.w	r3, sl, r3
 8029abe:	9202      	str	r2, [sp, #8]
 8029ac0:	9a01      	ldr	r2, [sp, #4]
 8029ac2:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8029ac6:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8029aca:	fb93 f7f2 	sdiv	r7, r3, r2
 8029ace:	fb02 3317 	mls	r3, r2, r7, r3
 8029ad2:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8029ad6:	2b00      	cmp	r3, #0
 8029ad8:	9308      	str	r3, [sp, #32]
 8029ada:	bfbc      	itt	lt
 8029adc:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8029ae0:	189b      	addlt	r3, r3, r2
 8029ae2:	eb07 0b01 	add.w	fp, r7, r1
 8029ae6:	bfb8      	it	lt
 8029ae8:	9308      	strlt	r3, [sp, #32]
 8029aea:	ea4f 136b 	mov.w	r3, fp, asr #5
 8029aee:	9304      	str	r3, [sp, #16]
 8029af0:	9b02      	ldr	r3, [sp, #8]
 8029af2:	4573      	cmp	r3, lr
 8029af4:	d133      	bne.n	8029b5e <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 8029af6:	9b04      	ldr	r3, [sp, #16]
 8029af8:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 8029afc:	454b      	cmp	r3, r9
 8029afe:	d045      	beq.n	8029b8c <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 8029b00:	8b62      	ldrh	r2, [r4, #26]
 8029b02:	8b23      	ldrh	r3, [r4, #24]
 8029b04:	4313      	orrs	r3, r2
 8029b06:	d00c      	beq.n	8029b22 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8029b08:	f1b8 0f00 	cmp.w	r8, #0
 8029b0c:	db09      	blt.n	8029b22 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8029b0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8029b10:	4543      	cmp	r3, r8
 8029b12:	dd06      	ble.n	8029b22 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8029b14:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8029b18:	429a      	cmp	r2, r3
 8029b1a:	d313      	bcc.n	8029b44 <_ZN8touchgfx7Outline10renderLineEiiii+0x460>
 8029b1c:	2301      	movs	r3, #1
 8029b1e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8029b22:	9b04      	ldr	r3, [sp, #16]
 8029b24:	82e6      	strh	r6, [r4, #22]
 8029b26:	82a3      	strh	r3, [r4, #20]
 8029b28:	2300      	movs	r3, #0
 8029b2a:	8323      	strh	r3, [r4, #24]
 8029b2c:	8363      	strh	r3, [r4, #26]
 8029b2e:	e02d      	b.n	8029b8c <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 8029b30:	9a01      	ldr	r2, [sp, #4]
 8029b32:	fb0a f30e 	mul.w	r3, sl, lr
 8029b36:	4252      	negs	r2, r2
 8029b38:	9201      	str	r2, [sp, #4]
 8029b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8029b3e:	920b      	str	r2, [sp, #44]	; 0x2c
 8029b40:	2200      	movs	r2, #0
 8029b42:	e7bc      	b.n	8029abe <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8029b44:	f104 0314 	add.w	r3, r4, #20
 8029b48:	6922      	ldr	r2, [r4, #16]
 8029b4a:	cb03      	ldmia	r3!, {r0, r1}
 8029b4c:	6010      	str	r0, [r2, #0]
 8029b4e:	6051      	str	r1, [r2, #4]
 8029b50:	6923      	ldr	r3, [r4, #16]
 8029b52:	3308      	adds	r3, #8
 8029b54:	6123      	str	r3, [r4, #16]
 8029b56:	68a3      	ldr	r3, [r4, #8]
 8029b58:	3301      	adds	r3, #1
 8029b5a:	60a3      	str	r3, [r4, #8]
 8029b5c:	e7e1      	b.n	8029b22 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8029b5e:	f00b 031f 	and.w	r3, fp, #31
 8029b62:	f001 011f 	and.w	r1, r1, #31
 8029b66:	8b20      	ldrh	r0, [r4, #24]
 8029b68:	9309      	str	r3, [sp, #36]	; 0x24
 8029b6a:	9b02      	ldr	r3, [sp, #8]
 8029b6c:	eba3 020e 	sub.w	r2, r3, lr
 8029b70:	8b63      	ldrh	r3, [r4, #26]
 8029b72:	9300      	str	r3, [sp, #0]
 8029b74:	9b04      	ldr	r3, [sp, #16]
 8029b76:	42ab      	cmp	r3, r5
 8029b78:	f040 80ef 	bne.w	8029d5a <_ZN8touchgfx7Outline10renderLineEiiii+0x676>
 8029b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029b7e:	4410      	add	r0, r2
 8029b80:	4419      	add	r1, r3
 8029b82:	9b00      	ldr	r3, [sp, #0]
 8029b84:	8320      	strh	r0, [r4, #24]
 8029b86:	fb02 3101 	mla	r1, r2, r1, r3
 8029b8a:	8361      	strh	r1, [r4, #26]
 8029b8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8029b8e:	9904      	ldr	r1, [sp, #16]
 8029b90:	4433      	add	r3, r6
 8029b92:	9300      	str	r3, [sp, #0]
 8029b94:	9a00      	ldr	r2, [sp, #0]
 8029b96:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8029b9a:	eb01 4002 	add.w	r0, r1, r2, lsl #16
 8029b9e:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8029ba2:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8029ba6:	4288      	cmp	r0, r1
 8029ba8:	d018      	beq.n	8029bdc <_ZN8touchgfx7Outline10renderLineEiiii+0x4f8>
 8029baa:	8b60      	ldrh	r0, [r4, #26]
 8029bac:	8b21      	ldrh	r1, [r4, #24]
 8029bae:	ea50 0201 	orrs.w	r2, r0, r1
 8029bb2:	d00c      	beq.n	8029bce <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8029bb4:	2b00      	cmp	r3, #0
 8029bb6:	db0a      	blt.n	8029bce <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8029bb8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8029bba:	4299      	cmp	r1, r3
 8029bbc:	dd07      	ble.n	8029bce <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8029bbe:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8029bc2:	4299      	cmp	r1, r3
 8029bc4:	f0c0 818b 	bcc.w	8029ede <_ZN8touchgfx7Outline10renderLineEiiii+0x7fa>
 8029bc8:	2301      	movs	r3, #1
 8029bca:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8029bce:	9b04      	ldr	r3, [sp, #16]
 8029bd0:	82a3      	strh	r3, [r4, #20]
 8029bd2:	9b00      	ldr	r3, [sp, #0]
 8029bd4:	82e3      	strh	r3, [r4, #22]
 8029bd6:	2300      	movs	r3, #0
 8029bd8:	8323      	strh	r3, [r4, #24]
 8029bda:	8363      	strh	r3, [r4, #26]
 8029bdc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8029bde:	9a00      	ldr	r2, [sp, #0]
 8029be0:	4293      	cmp	r3, r2
 8029be2:	f000 808d 	beq.w	8029d00 <_ZN8touchgfx7Outline10renderLineEiiii+0x61c>
 8029be6:	ea4f 134a 	mov.w	r3, sl, lsl #5
 8029bea:	9901      	ldr	r1, [sp, #4]
 8029bec:	9801      	ldr	r0, [sp, #4]
 8029bee:	fb93 f1f1 	sdiv	r1, r3, r1
 8029bf2:	fb00 3311 	mls	r3, r0, r1, r3
 8029bf6:	9106      	str	r1, [sp, #24]
 8029bf8:	2b00      	cmp	r3, #0
 8029bfa:	9307      	str	r3, [sp, #28]
 8029bfc:	da04      	bge.n	8029c08 <_ZN8touchgfx7Outline10renderLineEiiii+0x524>
 8029bfe:	1e4b      	subs	r3, r1, #1
 8029c00:	9306      	str	r3, [sp, #24]
 8029c02:	9b07      	ldr	r3, [sp, #28]
 8029c04:	4403      	add	r3, r0
 8029c06:	9307      	str	r3, [sp, #28]
 8029c08:	9b08      	ldr	r3, [sp, #32]
 8029c0a:	f04f 0c00 	mov.w	ip, #0
 8029c0e:	9901      	ldr	r1, [sp, #4]
 8029c10:	1a5b      	subs	r3, r3, r1
 8029c12:	4659      	mov	r1, fp
 8029c14:	9308      	str	r3, [sp, #32]
 8029c16:	9b02      	ldr	r3, [sp, #8]
 8029c18:	f1c3 0320 	rsb	r3, r3, #32
 8029c1c:	930a      	str	r3, [sp, #40]	; 0x28
 8029c1e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8029c20:	9b02      	ldr	r3, [sp, #8]
 8029c22:	1a1b      	subs	r3, r3, r0
 8029c24:	9309      	str	r3, [sp, #36]	; 0x24
 8029c26:	f9b4 e016 	ldrsh.w	lr, [r4, #22]
 8029c2a:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8029c2e:	e9dd 0307 	ldrd	r0, r3, [sp, #28]
 8029c32:	eb08 480e 	add.w	r8, r8, lr, lsl #16
 8029c36:	181b      	adds	r3, r3, r0
 8029c38:	bf58      	it	pl
 8029c3a:	9801      	ldrpl	r0, [sp, #4]
 8029c3c:	9308      	str	r3, [sp, #32]
 8029c3e:	bf54      	ite	pl
 8029c40:	1a1b      	subpl	r3, r3, r0
 8029c42:	9d06      	ldrmi	r5, [sp, #24]
 8029c44:	9802      	ldr	r0, [sp, #8]
 8029c46:	bf5e      	ittt	pl
 8029c48:	9308      	strpl	r3, [sp, #32]
 8029c4a:	9b06      	ldrpl	r3, [sp, #24]
 8029c4c:	1c5d      	addpl	r5, r3, #1
 8029c4e:	44ab      	add	fp, r5
 8029c50:	ea4f 136b 	mov.w	r3, fp, asr #5
 8029c54:	9304      	str	r3, [sp, #16]
 8029c56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029c58:	4283      	cmp	r3, r0
 8029c5a:	f040 815a 	bne.w	8029f12 <_ZN8touchgfx7Outline10renderLineEiiii+0x82e>
 8029c5e:	9b04      	ldr	r3, [sp, #16]
 8029c60:	9a00      	ldr	r2, [sp, #0]
 8029c62:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8029c66:	4543      	cmp	r3, r8
 8029c68:	d01a      	beq.n	8029ca0 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8029c6a:	8b61      	ldrh	r1, [r4, #26]
 8029c6c:	8b23      	ldrh	r3, [r4, #24]
 8029c6e:	430b      	orrs	r3, r1
 8029c70:	d00e      	beq.n	8029c90 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8029c72:	f1be 0f00 	cmp.w	lr, #0
 8029c76:	db0b      	blt.n	8029c90 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8029c78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8029c7a:	4573      	cmp	r3, lr
 8029c7c:	dd08      	ble.n	8029c90 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8029c7e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8029c82:	4299      	cmp	r1, r3
 8029c84:	f0c0 8138 	bcc.w	8029ef8 <_ZN8touchgfx7Outline10renderLineEiiii+0x814>
 8029c88:	f04f 0301 	mov.w	r3, #1
 8029c8c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8029c90:	9b04      	ldr	r3, [sp, #16]
 8029c92:	f8a4 c018 	strh.w	ip, [r4, #24]
 8029c96:	82a3      	strh	r3, [r4, #20]
 8029c98:	9b00      	ldr	r3, [sp, #0]
 8029c9a:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8029c9e:	82e3      	strh	r3, [r4, #22]
 8029ca0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8029ca2:	9a00      	ldr	r2, [sp, #0]
 8029ca4:	441a      	add	r2, r3
 8029ca6:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8029caa:	9200      	str	r2, [sp, #0]
 8029cac:	9900      	ldr	r1, [sp, #0]
 8029cae:	9a04      	ldr	r2, [sp, #16]
 8029cb0:	eb02 4001 	add.w	r0, r2, r1, lsl #16
 8029cb4:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8029cb8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8029cbc:	4288      	cmp	r0, r1
 8029cbe:	d01a      	beq.n	8029cf6 <_ZN8touchgfx7Outline10renderLineEiiii+0x612>
 8029cc0:	8b60      	ldrh	r0, [r4, #26]
 8029cc2:	8b21      	ldrh	r1, [r4, #24]
 8029cc4:	ea50 0201 	orrs.w	r2, r0, r1
 8029cc8:	d00d      	beq.n	8029ce6 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8029cca:	2b00      	cmp	r3, #0
 8029ccc:	db0b      	blt.n	8029ce6 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8029cce:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8029cd0:	4299      	cmp	r1, r3
 8029cd2:	dd08      	ble.n	8029ce6 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8029cd4:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8029cd8:	4299      	cmp	r1, r3
 8029cda:	f0c0 81f9 	bcc.w	802a0d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ec>
 8029cde:	f04f 0301 	mov.w	r3, #1
 8029ce2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8029ce6:	9b04      	ldr	r3, [sp, #16]
 8029ce8:	f8a4 c018 	strh.w	ip, [r4, #24]
 8029cec:	82a3      	strh	r3, [r4, #20]
 8029cee:	9b00      	ldr	r3, [sp, #0]
 8029cf0:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8029cf4:	82e3      	strh	r3, [r4, #22]
 8029cf6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8029cf8:	4659      	mov	r1, fp
 8029cfa:	9a00      	ldr	r2, [sp, #0]
 8029cfc:	4293      	cmp	r3, r2
 8029cfe:	d192      	bne.n	8029c26 <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8029d00:	9b02      	ldr	r3, [sp, #8]
 8029d02:	f1c3 0c20 	rsb	ip, r3, #32
 8029d06:	9b05      	ldr	r3, [sp, #20]
 8029d08:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8029d0c:	9b03      	ldr	r3, [sp, #12]
 8029d0e:	459c      	cmp	ip, r3
 8029d10:	f040 81f8 	bne.w	802a104 <_ZN8touchgfx7Outline10renderLineEiiii+0xa20>
 8029d14:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8029d18:	9a00      	ldr	r2, [sp, #0]
 8029d1a:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8029d1e:	eb0e 4002 	add.w	r0, lr, r2, lsl #16
 8029d22:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8029d26:	4288      	cmp	r0, r1
 8029d28:	f43f ad54 	beq.w	80297d4 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8029d2c:	8b60      	ldrh	r0, [r4, #26]
 8029d2e:	8b21      	ldrh	r1, [r4, #24]
 8029d30:	ea50 0201 	orrs.w	r2, r0, r1
 8029d34:	d00c      	beq.n	8029d50 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8029d36:	2b00      	cmp	r3, #0
 8029d38:	db0a      	blt.n	8029d50 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8029d3a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8029d3c:	4299      	cmp	r1, r3
 8029d3e:	dd07      	ble.n	8029d50 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8029d40:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8029d44:	4299      	cmp	r1, r3
 8029d46:	f0c0 81d0 	bcc.w	802a0ea <_ZN8touchgfx7Outline10renderLineEiiii+0xa06>
 8029d4a:	2301      	movs	r3, #1
 8029d4c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8029d50:	9b00      	ldr	r3, [sp, #0]
 8029d52:	f8a4 e014 	strh.w	lr, [r4, #20]
 8029d56:	82e3      	strh	r3, [r4, #22]
 8029d58:	e517      	b.n	802978a <_ZN8touchgfx7Outline10renderLineEiiii+0xa6>
 8029d5a:	2f00      	cmp	r7, #0
 8029d5c:	f2c0 8097 	blt.w	8029e8e <_ZN8touchgfx7Outline10renderLineEiiii+0x7aa>
 8029d60:	2301      	movs	r3, #1
 8029d62:	f1c1 0c20 	rsb	ip, r1, #32
 8029d66:	9307      	str	r3, [sp, #28]
 8029d68:	2320      	movs	r3, #32
 8029d6a:	fb02 f20c 	mul.w	r2, r2, ip
 8029d6e:	9306      	str	r3, [sp, #24]
 8029d70:	9b06      	ldr	r3, [sp, #24]
 8029d72:	fb92 fcf7 	sdiv	ip, r2, r7
 8029d76:	fb07 221c 	mls	r2, r7, ip, r2
 8029d7a:	4419      	add	r1, r3
 8029d7c:	9b00      	ldr	r3, [sp, #0]
 8029d7e:	2a00      	cmp	r2, #0
 8029d80:	bfbc      	itt	lt
 8029d82:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8029d86:	19d2      	addlt	r2, r2, r7
 8029d88:	fb0c 3101 	mla	r1, ip, r1, r3
 8029d8c:	9b07      	ldr	r3, [sp, #28]
 8029d8e:	4460      	add	r0, ip
 8029d90:	441d      	add	r5, r3
 8029d92:	0433      	lsls	r3, r6, #16
 8029d94:	b200      	sxth	r0, r0
 8029d96:	930a      	str	r3, [sp, #40]	; 0x28
 8029d98:	18eb      	adds	r3, r5, r3
 8029d9a:	b209      	sxth	r1, r1
 8029d9c:	8320      	strh	r0, [r4, #24]
 8029d9e:	454b      	cmp	r3, r9
 8029da0:	8361      	strh	r1, [r4, #26]
 8029da2:	d014      	beq.n	8029dce <_ZN8touchgfx7Outline10renderLineEiiii+0x6ea>
 8029da4:	ea50 0301 	orrs.w	r3, r0, r1
 8029da8:	d00c      	beq.n	8029dc4 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8029daa:	f1b8 0f00 	cmp.w	r8, #0
 8029dae:	db09      	blt.n	8029dc4 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8029db0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8029db2:	4543      	cmp	r3, r8
 8029db4:	dd06      	ble.n	8029dc4 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8029db6:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8029dba:	4299      	cmp	r1, r3
 8029dbc:	d36e      	bcc.n	8029e9c <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 8029dbe:	2301      	movs	r3, #1
 8029dc0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8029dc4:	2300      	movs	r3, #0
 8029dc6:	82a5      	strh	r5, [r4, #20]
 8029dc8:	82e6      	strh	r6, [r4, #22]
 8029dca:	8323      	strh	r3, [r4, #24]
 8029dcc:	8363      	strh	r3, [r4, #26]
 8029dce:	9904      	ldr	r1, [sp, #16]
 8029dd0:	eb0e 030c 	add.w	r3, lr, ip
 8029dd4:	42a9      	cmp	r1, r5
 8029dd6:	d04d      	beq.n	8029e74 <_ZN8touchgfx7Outline10renderLineEiiii+0x790>
 8029dd8:	9902      	ldr	r1, [sp, #8]
 8029dda:	1bd2      	subs	r2, r2, r7
 8029ddc:	1ac9      	subs	r1, r1, r3
 8029dde:	9200      	str	r2, [sp, #0]
 8029de0:	448c      	add	ip, r1
 8029de2:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 8029de6:	fb9c fef7 	sdiv	lr, ip, r7
 8029dea:	fb07 cc1e 	mls	ip, r7, lr, ip
 8029dee:	f1bc 0f00 	cmp.w	ip, #0
 8029df2:	bfbc      	itt	lt
 8029df4:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8029df8:	44bc      	addlt	ip, r7
 8029dfa:	f10e 0101 	add.w	r1, lr, #1
 8029dfe:	910d      	str	r1, [sp, #52]	; 0x34
 8029e00:	9a00      	ldr	r2, [sp, #0]
 8029e02:	8b20      	ldrh	r0, [r4, #24]
 8029e04:	eb12 020c 	adds.w	r2, r2, ip
 8029e08:	8b61      	ldrh	r1, [r4, #26]
 8029e0a:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8029e0e:	9200      	str	r2, [sp, #0]
 8029e10:	bf5b      	ittet	pl
 8029e12:	1bd2      	subpl	r2, r2, r7
 8029e14:	f8dd 8034 	ldrpl.w	r8, [sp, #52]	; 0x34
 8029e18:	46f0      	movmi	r8, lr
 8029e1a:	9200      	strpl	r2, [sp, #0]
 8029e1c:	9a07      	ldr	r2, [sp, #28]
 8029e1e:	4440      	add	r0, r8
 8029e20:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 8029e24:	4443      	add	r3, r8
 8029e26:	4415      	add	r5, r2
 8029e28:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8029e2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8029e2e:	b200      	sxth	r0, r0
 8029e30:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8029e34:	442a      	add	r2, r5
 8029e36:	b209      	sxth	r1, r1
 8029e38:	8320      	strh	r0, [r4, #24]
 8029e3a:	454a      	cmp	r2, r9
 8029e3c:	8361      	strh	r1, [r4, #26]
 8029e3e:	d016      	beq.n	8029e6e <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8029e40:	ea50 0201 	orrs.w	r2, r0, r1
 8029e44:	d00d      	beq.n	8029e62 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8029e46:	f1b8 0f00 	cmp.w	r8, #0
 8029e4a:	db0a      	blt.n	8029e62 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8029e4c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8029e4e:	4541      	cmp	r1, r8
 8029e50:	dd07      	ble.n	8029e62 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8029e52:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8029e56:	4288      	cmp	r0, r1
 8029e58:	d330      	bcc.n	8029ebc <_ZN8touchgfx7Outline10renderLineEiiii+0x7d8>
 8029e5a:	f04f 0201 	mov.w	r2, #1
 8029e5e:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8029e62:	f04f 0200 	mov.w	r2, #0
 8029e66:	82a5      	strh	r5, [r4, #20]
 8029e68:	82e6      	strh	r6, [r4, #22]
 8029e6a:	8322      	strh	r2, [r4, #24]
 8029e6c:	8362      	strh	r2, [r4, #26]
 8029e6e:	9904      	ldr	r1, [sp, #16]
 8029e70:	42a9      	cmp	r1, r5
 8029e72:	d1c5      	bne.n	8029e00 <_ZN8touchgfx7Outline10renderLineEiiii+0x71c>
 8029e74:	9a02      	ldr	r2, [sp, #8]
 8029e76:	9909      	ldr	r1, [sp, #36]	; 0x24
 8029e78:	1ad3      	subs	r3, r2, r3
 8029e7a:	8b22      	ldrh	r2, [r4, #24]
 8029e7c:	3120      	adds	r1, #32
 8029e7e:	441a      	add	r2, r3
 8029e80:	8322      	strh	r2, [r4, #24]
 8029e82:	9a06      	ldr	r2, [sp, #24]
 8029e84:	1a89      	subs	r1, r1, r2
 8029e86:	8b62      	ldrh	r2, [r4, #26]
 8029e88:	fb03 2301 	mla	r3, r3, r1, r2
 8029e8c:	e64e      	b.n	8029b2c <_ZN8touchgfx7Outline10renderLineEiiii+0x448>
 8029e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8029e92:	434a      	muls	r2, r1
 8029e94:	427f      	negs	r7, r7
 8029e96:	9307      	str	r3, [sp, #28]
 8029e98:	2300      	movs	r3, #0
 8029e9a:	e768      	b.n	8029d6e <_ZN8touchgfx7Outline10renderLineEiiii+0x68a>
 8029e9c:	f104 0314 	add.w	r3, r4, #20
 8029ea0:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8029ea4:	cb03      	ldmia	r3!, {r0, r1}
 8029ea6:	f8c8 0000 	str.w	r0, [r8]
 8029eaa:	f8c8 1004 	str.w	r1, [r8, #4]
 8029eae:	6923      	ldr	r3, [r4, #16]
 8029eb0:	3308      	adds	r3, #8
 8029eb2:	6123      	str	r3, [r4, #16]
 8029eb4:	68a3      	ldr	r3, [r4, #8]
 8029eb6:	3301      	adds	r3, #1
 8029eb8:	60a3      	str	r3, [r4, #8]
 8029eba:	e783      	b.n	8029dc4 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8029ebc:	f104 0814 	add.w	r8, r4, #20
 8029ec0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8029ec4:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8029ec8:	f8c9 0000 	str.w	r0, [r9]
 8029ecc:	f8c9 1004 	str.w	r1, [r9, #4]
 8029ed0:	6921      	ldr	r1, [r4, #16]
 8029ed2:	3108      	adds	r1, #8
 8029ed4:	6121      	str	r1, [r4, #16]
 8029ed6:	68a1      	ldr	r1, [r4, #8]
 8029ed8:	3101      	adds	r1, #1
 8029eda:	60a1      	str	r1, [r4, #8]
 8029edc:	e7c1      	b.n	8029e62 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8029ede:	f104 0314 	add.w	r3, r4, #20
 8029ee2:	6925      	ldr	r5, [r4, #16]
 8029ee4:	cb03      	ldmia	r3!, {r0, r1}
 8029ee6:	6028      	str	r0, [r5, #0]
 8029ee8:	6069      	str	r1, [r5, #4]
 8029eea:	6923      	ldr	r3, [r4, #16]
 8029eec:	3308      	adds	r3, #8
 8029eee:	6123      	str	r3, [r4, #16]
 8029ef0:	68a3      	ldr	r3, [r4, #8]
 8029ef2:	3301      	adds	r3, #1
 8029ef4:	60a3      	str	r3, [r4, #8]
 8029ef6:	e66a      	b.n	8029bce <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8029ef8:	f104 0314 	add.w	r3, r4, #20
 8029efc:	6925      	ldr	r5, [r4, #16]
 8029efe:	cb03      	ldmia	r3!, {r0, r1}
 8029f00:	6028      	str	r0, [r5, #0]
 8029f02:	6069      	str	r1, [r5, #4]
 8029f04:	6923      	ldr	r3, [r4, #16]
 8029f06:	3308      	adds	r3, #8
 8029f08:	6123      	str	r3, [r4, #16]
 8029f0a:	68a3      	ldr	r3, [r4, #8]
 8029f0c:	3301      	adds	r3, #1
 8029f0e:	60a3      	str	r3, [r4, #8]
 8029f10:	e6be      	b.n	8029c90 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8029f12:	f00b 031f 	and.w	r3, fp, #31
 8029f16:	114f      	asrs	r7, r1, #5
 8029f18:	8b20      	ldrh	r0, [r4, #24]
 8029f1a:	f001 011f 	and.w	r1, r1, #31
 8029f1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8029f20:	9b04      	ldr	r3, [sp, #16]
 8029f22:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8029f26:	429f      	cmp	r7, r3
 8029f28:	d10a      	bne.n	8029f40 <_ZN8touchgfx7Outline10renderLineEiiii+0x85c>
 8029f2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029f2c:	4418      	add	r0, r3
 8029f2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8029f30:	4419      	add	r1, r3
 8029f32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029f34:	8320      	strh	r0, [r4, #24]
 8029f36:	fb03 9901 	mla	r9, r3, r1, r9
 8029f3a:	f8a4 901a 	strh.w	r9, [r4, #26]
 8029f3e:	e6af      	b.n	8029ca0 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8029f40:	2d00      	cmp	r5, #0
 8029f42:	f2c0 809b 	blt.w	802a07c <_ZN8touchgfx7Outline10renderLineEiiii+0x998>
 8029f46:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8029f48:	f1c1 0320 	rsb	r3, r1, #32
 8029f4c:	4373      	muls	r3, r6
 8029f4e:	2601      	movs	r6, #1
 8029f50:	960e      	str	r6, [sp, #56]	; 0x38
 8029f52:	2620      	movs	r6, #32
 8029f54:	960d      	str	r6, [sp, #52]	; 0x34
 8029f56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8029f58:	fb93 f6f5 	sdiv	r6, r3, r5
 8029f5c:	4411      	add	r1, r2
 8029f5e:	fb05 3316 	mls	r3, r5, r6, r3
 8029f62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8029f64:	2b00      	cmp	r3, #0
 8029f66:	4417      	add	r7, r2
 8029f68:	9a00      	ldr	r2, [sp, #0]
 8029f6a:	bfbc      	itt	lt
 8029f6c:	f106 36ff 	addlt.w	r6, r6, #4294967295
 8029f70:	195b      	addlt	r3, r3, r5
 8029f72:	0412      	lsls	r2, r2, #16
 8029f74:	fb06 9101 	mla	r1, r6, r1, r9
 8029f78:	4430      	add	r0, r6
 8029f7a:	eb07 0902 	add.w	r9, r7, r2
 8029f7e:	9210      	str	r2, [sp, #64]	; 0x40
 8029f80:	b200      	sxth	r0, r0
 8029f82:	b209      	sxth	r1, r1
 8029f84:	45c1      	cmp	r9, r8
 8029f86:	8320      	strh	r0, [r4, #24]
 8029f88:	8361      	strh	r1, [r4, #26]
 8029f8a:	d017      	beq.n	8029fbc <_ZN8touchgfx7Outline10renderLineEiiii+0x8d8>
 8029f8c:	ea50 0201 	orrs.w	r2, r0, r1
 8029f90:	d00d      	beq.n	8029fae <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8029f92:	f1be 0f00 	cmp.w	lr, #0
 8029f96:	db0a      	blt.n	8029fae <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8029f98:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8029f9a:	4571      	cmp	r1, lr
 8029f9c:	dd07      	ble.n	8029fae <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8029f9e:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8029fa2:	4288      	cmp	r0, r1
 8029fa4:	d372      	bcc.n	802a08c <_ZN8touchgfx7Outline10renderLineEiiii+0x9a8>
 8029fa6:	f04f 0201 	mov.w	r2, #1
 8029faa:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8029fae:	9a00      	ldr	r2, [sp, #0]
 8029fb0:	82a7      	strh	r7, [r4, #20]
 8029fb2:	82e2      	strh	r2, [r4, #22]
 8029fb4:	f8a4 c018 	strh.w	ip, [r4, #24]
 8029fb8:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8029fbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8029fbe:	eb02 0e06 	add.w	lr, r2, r6
 8029fc2:	9a04      	ldr	r2, [sp, #16]
 8029fc4:	42ba      	cmp	r2, r7
 8029fc6:	d049      	beq.n	802a05c <_ZN8touchgfx7Outline10renderLineEiiii+0x978>
 8029fc8:	9a02      	ldr	r2, [sp, #8]
 8029fca:	1b5b      	subs	r3, r3, r5
 8029fcc:	eba2 010e 	sub.w	r1, r2, lr
 8029fd0:	440e      	add	r6, r1
 8029fd2:	0176      	lsls	r6, r6, #5
 8029fd4:	fb96 f8f5 	sdiv	r8, r6, r5
 8029fd8:	fb05 6618 	mls	r6, r5, r8, r6
 8029fdc:	2e00      	cmp	r6, #0
 8029fde:	bfbc      	itt	lt
 8029fe0:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8029fe4:	1976      	addlt	r6, r6, r5
 8029fe6:	f108 0201 	add.w	r2, r8, #1
 8029fea:	9211      	str	r2, [sp, #68]	; 0x44
 8029fec:	199b      	adds	r3, r3, r6
 8029fee:	8b20      	ldrh	r0, [r4, #24]
 8029ff0:	8b61      	ldrh	r1, [r4, #26]
 8029ff2:	bf54      	ite	pl
 8029ff4:	f8dd 9044 	ldrpl.w	r9, [sp, #68]	; 0x44
 8029ff8:	46c1      	movmi	r9, r8
 8029ffa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8029ffc:	bf58      	it	pl
 8029ffe:	1b5b      	subpl	r3, r3, r5
 802a000:	4448      	add	r0, r9
 802a002:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 802a006:	4417      	add	r7, r2
 802a008:	44ce      	add	lr, r9
 802a00a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802a00c:	b200      	sxth	r0, r0
 802a00e:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 802a012:	b209      	sxth	r1, r1
 802a014:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 802a018:	443a      	add	r2, r7
 802a01a:	8320      	strh	r0, [r4, #24]
 802a01c:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 802a020:	8361      	strh	r1, [r4, #26]
 802a022:	4552      	cmp	r2, sl
 802a024:	d017      	beq.n	802a056 <_ZN8touchgfx7Outline10renderLineEiiii+0x972>
 802a026:	ea50 0201 	orrs.w	r2, r0, r1
 802a02a:	d00d      	beq.n	802a048 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 802a02c:	f1b9 0f00 	cmp.w	r9, #0
 802a030:	db0a      	blt.n	802a048 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 802a032:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802a034:	4549      	cmp	r1, r9
 802a036:	dd07      	ble.n	802a048 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 802a038:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802a03c:	4288      	cmp	r0, r1
 802a03e:	d336      	bcc.n	802a0ae <_ZN8touchgfx7Outline10renderLineEiiii+0x9ca>
 802a040:	f04f 0201 	mov.w	r2, #1
 802a044:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802a048:	9a00      	ldr	r2, [sp, #0]
 802a04a:	82a7      	strh	r7, [r4, #20]
 802a04c:	82e2      	strh	r2, [r4, #22]
 802a04e:	f8a4 c018 	strh.w	ip, [r4, #24]
 802a052:	f8a4 c01a 	strh.w	ip, [r4, #26]
 802a056:	9a04      	ldr	r2, [sp, #16]
 802a058:	42ba      	cmp	r2, r7
 802a05a:	d1c7      	bne.n	8029fec <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 802a05c:	9b02      	ldr	r3, [sp, #8]
 802a05e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802a060:	eba3 0e0e 	sub.w	lr, r3, lr
 802a064:	8b23      	ldrh	r3, [r4, #24]
 802a066:	3120      	adds	r1, #32
 802a068:	4473      	add	r3, lr
 802a06a:	8323      	strh	r3, [r4, #24]
 802a06c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802a06e:	1ac9      	subs	r1, r1, r3
 802a070:	8b63      	ldrh	r3, [r4, #26]
 802a072:	fb0e 3e01 	mla	lr, lr, r1, r3
 802a076:	f8a4 e01a 	strh.w	lr, [r4, #26]
 802a07a:	e611      	b.n	8029ca0 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 802a07c:	f04f 36ff 	mov.w	r6, #4294967295
 802a080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a082:	426d      	negs	r5, r5
 802a084:	960e      	str	r6, [sp, #56]	; 0x38
 802a086:	2600      	movs	r6, #0
 802a088:	434b      	muls	r3, r1
 802a08a:	e763      	b.n	8029f54 <_ZN8touchgfx7Outline10renderLineEiiii+0x870>
 802a08c:	f104 0e14 	add.w	lr, r4, #20
 802a090:	f8d4 8010 	ldr.w	r8, [r4, #16]
 802a094:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 802a098:	f8c8 0000 	str.w	r0, [r8]
 802a09c:	f8c8 1004 	str.w	r1, [r8, #4]
 802a0a0:	6921      	ldr	r1, [r4, #16]
 802a0a2:	3108      	adds	r1, #8
 802a0a4:	6121      	str	r1, [r4, #16]
 802a0a6:	68a1      	ldr	r1, [r4, #8]
 802a0a8:	3101      	adds	r1, #1
 802a0aa:	60a1      	str	r1, [r4, #8]
 802a0ac:	e77f      	b.n	8029fae <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 802a0ae:	f104 0914 	add.w	r9, r4, #20
 802a0b2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 802a0b6:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 802a0ba:	f8ca 0000 	str.w	r0, [sl]
 802a0be:	f8ca 1004 	str.w	r1, [sl, #4]
 802a0c2:	6921      	ldr	r1, [r4, #16]
 802a0c4:	3108      	adds	r1, #8
 802a0c6:	6121      	str	r1, [r4, #16]
 802a0c8:	68a1      	ldr	r1, [r4, #8]
 802a0ca:	3101      	adds	r1, #1
 802a0cc:	60a1      	str	r1, [r4, #8]
 802a0ce:	e7bb      	b.n	802a048 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 802a0d0:	f104 0314 	add.w	r3, r4, #20
 802a0d4:	6925      	ldr	r5, [r4, #16]
 802a0d6:	cb03      	ldmia	r3!, {r0, r1}
 802a0d8:	6028      	str	r0, [r5, #0]
 802a0da:	6069      	str	r1, [r5, #4]
 802a0dc:	6923      	ldr	r3, [r4, #16]
 802a0de:	3308      	adds	r3, #8
 802a0e0:	6123      	str	r3, [r4, #16]
 802a0e2:	68a3      	ldr	r3, [r4, #8]
 802a0e4:	3301      	adds	r3, #1
 802a0e6:	60a3      	str	r3, [r4, #8]
 802a0e8:	e5fd      	b.n	8029ce6 <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 802a0ea:	f104 0314 	add.w	r3, r4, #20
 802a0ee:	6925      	ldr	r5, [r4, #16]
 802a0f0:	cb03      	ldmia	r3!, {r0, r1}
 802a0f2:	6028      	str	r0, [r5, #0]
 802a0f4:	6069      	str	r1, [r5, #4]
 802a0f6:	6923      	ldr	r3, [r4, #16]
 802a0f8:	3308      	adds	r3, #8
 802a0fa:	6123      	str	r3, [r4, #16]
 802a0fc:	68a3      	ldr	r3, [r4, #8]
 802a0fe:	3301      	adds	r3, #1
 802a100:	60a3      	str	r3, [r4, #8]
 802a102:	e625      	b.n	8029d50 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 802a104:	9b05      	ldr	r3, [sp, #20]
 802a106:	ea4f 176b 	mov.w	r7, fp, asr #5
 802a10a:	f00b 081f 	and.w	r8, fp, #31
 802a10e:	8b20      	ldrh	r0, [r4, #24]
 802a110:	f003 031f 	and.w	r3, r3, #31
 802a114:	4577      	cmp	r7, lr
 802a116:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 802a11a:	9302      	str	r3, [sp, #8]
 802a11c:	9b03      	ldr	r3, [sp, #12]
 802a11e:	eba3 050c 	sub.w	r5, r3, ip
 802a122:	d108      	bne.n	802a136 <_ZN8touchgfx7Outline10renderLineEiiii+0xa52>
 802a124:	9b02      	ldr	r3, [sp, #8]
 802a126:	4428      	add	r0, r5
 802a128:	4498      	add	r8, r3
 802a12a:	8320      	strh	r0, [r4, #24]
 802a12c:	fb05 9508 	mla	r5, r5, r8, r9
 802a130:	8365      	strh	r5, [r4, #26]
 802a132:	f7ff bb4f 	b.w	80297d4 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 802a136:	9b05      	ldr	r3, [sp, #20]
 802a138:	ebb3 030b 	subs.w	r3, r3, fp
 802a13c:	f100 809c 	bmi.w	802a278 <_ZN8touchgfx7Outline10renderLineEiiii+0xb94>
 802a140:	f1c8 0120 	rsb	r1, r8, #32
 802a144:	2201      	movs	r2, #1
 802a146:	f04f 0b20 	mov.w	fp, #32
 802a14a:	434d      	muls	r5, r1
 802a14c:	9201      	str	r2, [sp, #4]
 802a14e:	9a01      	ldr	r2, [sp, #4]
 802a150:	44d8      	add	r8, fp
 802a152:	fb95 f6f3 	sdiv	r6, r5, r3
 802a156:	fb03 5516 	mls	r5, r3, r6, r5
 802a15a:	4417      	add	r7, r2
 802a15c:	9a00      	ldr	r2, [sp, #0]
 802a15e:	2d00      	cmp	r5, #0
 802a160:	ea4f 4202 	mov.w	r2, r2, lsl #16
 802a164:	bfbc      	itt	lt
 802a166:	f106 36ff 	addlt.w	r6, r6, #4294967295
 802a16a:	18ed      	addlt	r5, r5, r3
 802a16c:	eb07 0a02 	add.w	sl, r7, r2
 802a170:	9204      	str	r2, [sp, #16]
 802a172:	fb06 9808 	mla	r8, r6, r8, r9
 802a176:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 802a17a:	4430      	add	r0, r6
 802a17c:	fa0f f188 	sxth.w	r1, r8
 802a180:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 802a184:	b200      	sxth	r0, r0
 802a186:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 802a18a:	8361      	strh	r1, [r4, #26]
 802a18c:	8320      	strh	r0, [r4, #24]
 802a18e:	45ca      	cmp	sl, r9
 802a190:	d015      	beq.n	802a1be <_ZN8touchgfx7Outline10renderLineEiiii+0xada>
 802a192:	ea50 0201 	orrs.w	r2, r0, r1
 802a196:	d00c      	beq.n	802a1b2 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 802a198:	f1b8 0f00 	cmp.w	r8, #0
 802a19c:	db09      	blt.n	802a1b2 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 802a19e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802a1a0:	4541      	cmp	r1, r8
 802a1a2:	dd06      	ble.n	802a1b2 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 802a1a4:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802a1a8:	4288      	cmp	r0, r1
 802a1aa:	d36e      	bcc.n	802a28a <_ZN8touchgfx7Outline10renderLineEiiii+0xba6>
 802a1ac:	2101      	movs	r1, #1
 802a1ae:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802a1b2:	2100      	movs	r1, #0
 802a1b4:	9a00      	ldr	r2, [sp, #0]
 802a1b6:	82a7      	strh	r7, [r4, #20]
 802a1b8:	82e2      	strh	r2, [r4, #22]
 802a1ba:	8321      	strh	r1, [r4, #24]
 802a1bc:	8361      	strh	r1, [r4, #26]
 802a1be:	45be      	cmp	lr, r7
 802a1c0:	44b4      	add	ip, r6
 802a1c2:	d048      	beq.n	802a256 <_ZN8touchgfx7Outline10renderLineEiiii+0xb72>
 802a1c4:	9a03      	ldr	r2, [sp, #12]
 802a1c6:	1aed      	subs	r5, r5, r3
 802a1c8:	eba2 010c 	sub.w	r1, r2, ip
 802a1cc:	440e      	add	r6, r1
 802a1ce:	0176      	lsls	r6, r6, #5
 802a1d0:	fb96 f8f3 	sdiv	r8, r6, r3
 802a1d4:	fb03 6618 	mls	r6, r3, r8, r6
 802a1d8:	2e00      	cmp	r6, #0
 802a1da:	bfbc      	itt	lt
 802a1dc:	f108 38ff 	addlt.w	r8, r8, #4294967295
 802a1e0:	18f6      	addlt	r6, r6, r3
 802a1e2:	f108 0201 	add.w	r2, r8, #1
 802a1e6:	9205      	str	r2, [sp, #20]
 802a1e8:	19ad      	adds	r5, r5, r6
 802a1ea:	8b20      	ldrh	r0, [r4, #24]
 802a1ec:	8b61      	ldrh	r1, [r4, #26]
 802a1ee:	bf54      	ite	pl
 802a1f0:	f8dd 9014 	ldrpl.w	r9, [sp, #20]
 802a1f4:	46c1      	movmi	r9, r8
 802a1f6:	9a01      	ldr	r2, [sp, #4]
 802a1f8:	bf58      	it	pl
 802a1fa:	1aed      	subpl	r5, r5, r3
 802a1fc:	4448      	add	r0, r9
 802a1fe:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 802a202:	4417      	add	r7, r2
 802a204:	44cc      	add	ip, r9
 802a206:	9a04      	ldr	r2, [sp, #16]
 802a208:	b200      	sxth	r0, r0
 802a20a:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 802a20e:	b209      	sxth	r1, r1
 802a210:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 802a214:	443a      	add	r2, r7
 802a216:	8320      	strh	r0, [r4, #24]
 802a218:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 802a21c:	8361      	strh	r1, [r4, #26]
 802a21e:	4552      	cmp	r2, sl
 802a220:	d017      	beq.n	802a252 <_ZN8touchgfx7Outline10renderLineEiiii+0xb6e>
 802a222:	ea50 0201 	orrs.w	r2, r0, r1
 802a226:	d00d      	beq.n	802a244 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 802a228:	f1b9 0f00 	cmp.w	r9, #0
 802a22c:	db0a      	blt.n	802a244 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 802a22e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802a230:	4549      	cmp	r1, r9
 802a232:	dd07      	ble.n	802a244 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 802a234:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802a238:	4288      	cmp	r0, r1
 802a23a:	d337      	bcc.n	802a2ac <_ZN8touchgfx7Outline10renderLineEiiii+0xbc8>
 802a23c:	f04f 0201 	mov.w	r2, #1
 802a240:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802a244:	9a00      	ldr	r2, [sp, #0]
 802a246:	82a7      	strh	r7, [r4, #20]
 802a248:	82e2      	strh	r2, [r4, #22]
 802a24a:	f04f 0200 	mov.w	r2, #0
 802a24e:	8322      	strh	r2, [r4, #24]
 802a250:	8362      	strh	r2, [r4, #26]
 802a252:	45be      	cmp	lr, r7
 802a254:	d1c8      	bne.n	802a1e8 <_ZN8touchgfx7Outline10renderLineEiiii+0xb04>
 802a256:	9b03      	ldr	r3, [sp, #12]
 802a258:	8b62      	ldrh	r2, [r4, #26]
 802a25a:	eba3 0c0c 	sub.w	ip, r3, ip
 802a25e:	8b23      	ldrh	r3, [r4, #24]
 802a260:	4463      	add	r3, ip
 802a262:	8323      	strh	r3, [r4, #24]
 802a264:	9b02      	ldr	r3, [sp, #8]
 802a266:	3320      	adds	r3, #32
 802a268:	eba3 030b 	sub.w	r3, r3, fp
 802a26c:	fb0c 2c03 	mla	ip, ip, r3, r2
 802a270:	f8a4 c01a 	strh.w	ip, [r4, #26]
 802a274:	f7ff baae 	b.w	80297d4 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 802a278:	f04f 32ff 	mov.w	r2, #4294967295
 802a27c:	fb05 f508 	mul.w	r5, r5, r8
 802a280:	425b      	negs	r3, r3
 802a282:	f04f 0b00 	mov.w	fp, #0
 802a286:	9201      	str	r2, [sp, #4]
 802a288:	e761      	b.n	802a14e <_ZN8touchgfx7Outline10renderLineEiiii+0xa6a>
 802a28a:	f104 0814 	add.w	r8, r4, #20
 802a28e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802a292:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 802a296:	f8c9 0000 	str.w	r0, [r9]
 802a29a:	f8c9 1004 	str.w	r1, [r9, #4]
 802a29e:	6921      	ldr	r1, [r4, #16]
 802a2a0:	3108      	adds	r1, #8
 802a2a2:	6121      	str	r1, [r4, #16]
 802a2a4:	68a1      	ldr	r1, [r4, #8]
 802a2a6:	3101      	adds	r1, #1
 802a2a8:	60a1      	str	r1, [r4, #8]
 802a2aa:	e782      	b.n	802a1b2 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 802a2ac:	f104 0914 	add.w	r9, r4, #20
 802a2b0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 802a2b4:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 802a2b8:	f8ca 0000 	str.w	r0, [sl]
 802a2bc:	f8ca 1004 	str.w	r1, [sl, #4]
 802a2c0:	6921      	ldr	r1, [r4, #16]
 802a2c2:	3108      	adds	r1, #8
 802a2c4:	6121      	str	r1, [r4, #16]
 802a2c6:	68a1      	ldr	r1, [r4, #8]
 802a2c8:	3101      	adds	r1, #1
 802a2ca:	60a1      	str	r1, [r4, #8]
 802a2cc:	e7ba      	b.n	802a244 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>

0802a2ce <_ZN8touchgfx7Outline6lineToEii>:
 802a2ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802a2d0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802a2d2:	4604      	mov	r4, r0
 802a2d4:	460d      	mov	r5, r1
 802a2d6:	4616      	mov	r6, r2
 802a2d8:	079b      	lsls	r3, r3, #30
 802a2da:	d526      	bpl.n	802a32a <_ZN8touchgfx7Outline6lineToEii+0x5c>
 802a2dc:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 802a2e0:	ea85 0001 	eor.w	r0, r5, r1
 802a2e4:	ea86 0302 	eor.w	r3, r6, r2
 802a2e8:	4303      	orrs	r3, r0
 802a2ea:	d01e      	beq.n	802a32a <_ZN8touchgfx7Outline6lineToEii+0x5c>
 802a2ec:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802a2ee:	114b      	asrs	r3, r1, #5
 802a2f0:	9600      	str	r6, [sp, #0]
 802a2f2:	4283      	cmp	r3, r0
 802a2f4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 802a2f6:	bfb8      	it	lt
 802a2f8:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 802a2fa:	3301      	adds	r3, #1
 802a2fc:	4283      	cmp	r3, r0
 802a2fe:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802a300:	bfc8      	it	gt
 802a302:	6363      	strgt	r3, [r4, #52]	; 0x34
 802a304:	116b      	asrs	r3, r5, #5
 802a306:	4283      	cmp	r3, r0
 802a308:	6b60      	ldr	r0, [r4, #52]	; 0x34
 802a30a:	bfb8      	it	lt
 802a30c:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 802a30e:	3301      	adds	r3, #1
 802a310:	4283      	cmp	r3, r0
 802a312:	4620      	mov	r0, r4
 802a314:	bfc8      	it	gt
 802a316:	6363      	strgt	r3, [r4, #52]	; 0x34
 802a318:	462b      	mov	r3, r5
 802a31a:	f7ff f9e3 	bl	80296e4 <_ZN8touchgfx7Outline10renderLineEiiii>
 802a31e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802a320:	f043 0301 	orr.w	r3, r3, #1
 802a324:	e9c4 5607 	strd	r5, r6, [r4, #28]
 802a328:	63e3      	str	r3, [r4, #60]	; 0x3c
 802a32a:	b002      	add	sp, #8
 802a32c:	bd70      	pop	{r4, r5, r6, pc}

0802a32e <_ZN8touchgfx7Outline6moveToEii>:
 802a32e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a330:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802a332:	4615      	mov	r5, r2
 802a334:	4604      	mov	r4, r0
 802a336:	460e      	mov	r6, r1
 802a338:	079a      	lsls	r2, r3, #30
 802a33a:	d401      	bmi.n	802a340 <_ZN8touchgfx7Outline6moveToEii+0x12>
 802a33c:	f7ff f98c 	bl	8029658 <_ZN8touchgfx7Outline5resetEv>
 802a340:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802a342:	07db      	lsls	r3, r3, #31
 802a344:	d504      	bpl.n	802a350 <_ZN8touchgfx7Outline6moveToEii+0x22>
 802a346:	4620      	mov	r0, r4
 802a348:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 802a34c:	f7ff ffbf 	bl	802a2ce <_ZN8touchgfx7Outline6lineToEii>
 802a350:	ea4f 1c66 	mov.w	ip, r6, asr #5
 802a354:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802a358:	116f      	asrs	r7, r5, #5
 802a35a:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 802a35e:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 802a362:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 802a366:	4291      	cmp	r1, r2
 802a368:	d015      	beq.n	802a396 <_ZN8touchgfx7Outline6moveToEii+0x68>
 802a36a:	8b61      	ldrh	r1, [r4, #26]
 802a36c:	8b22      	ldrh	r2, [r4, #24]
 802a36e:	430a      	orrs	r2, r1
 802a370:	d00b      	beq.n	802a38a <_ZN8touchgfx7Outline6moveToEii+0x5c>
 802a372:	2b00      	cmp	r3, #0
 802a374:	db09      	blt.n	802a38a <_ZN8touchgfx7Outline6moveToEii+0x5c>
 802a376:	6c22      	ldr	r2, [r4, #64]	; 0x40
 802a378:	429a      	cmp	r2, r3
 802a37a:	dd06      	ble.n	802a38a <_ZN8touchgfx7Outline6moveToEii+0x5c>
 802a37c:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 802a380:	429a      	cmp	r2, r3
 802a382:	d30d      	bcc.n	802a3a0 <_ZN8touchgfx7Outline6moveToEii+0x72>
 802a384:	2301      	movs	r3, #1
 802a386:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802a38a:	2300      	movs	r3, #0
 802a38c:	f8a4 c014 	strh.w	ip, [r4, #20]
 802a390:	82e7      	strh	r7, [r4, #22]
 802a392:	8323      	strh	r3, [r4, #24]
 802a394:	8363      	strh	r3, [r4, #26]
 802a396:	61e6      	str	r6, [r4, #28]
 802a398:	62a5      	str	r5, [r4, #40]	; 0x28
 802a39a:	e9c4 5608 	strd	r5, r6, [r4, #32]
 802a39e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802a3a0:	f104 0314 	add.w	r3, r4, #20
 802a3a4:	6922      	ldr	r2, [r4, #16]
 802a3a6:	cb03      	ldmia	r3!, {r0, r1}
 802a3a8:	6010      	str	r0, [r2, #0]
 802a3aa:	6051      	str	r1, [r2, #4]
 802a3ac:	6923      	ldr	r3, [r4, #16]
 802a3ae:	3308      	adds	r3, #8
 802a3b0:	6123      	str	r3, [r4, #16]
 802a3b2:	68a3      	ldr	r3, [r4, #8]
 802a3b4:	3301      	adds	r3, #1
 802a3b6:	60a3      	str	r3, [r4, #8]
 802a3b8:	e7e7      	b.n	802a38a <_ZN8touchgfx7Outline6moveToEii+0x5c>

0802a3ba <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 802a3ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a3be:	b0d1      	sub	sp, #324	; 0x144
 802a3c0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 802a3c4:	466c      	mov	r4, sp
 802a3c6:	1a0d      	subs	r5, r1, r0
 802a3c8:	f100 0208 	add.w	r2, r0, #8
 802a3cc:	2d48      	cmp	r5, #72	; 0x48
 802a3ce:	f340 80ba 	ble.w	802a546 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 802a3d2:	112d      	asrs	r5, r5, #4
 802a3d4:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 802a3d8:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 802a3dc:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 802a3e0:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 802a3e4:	f9b0 8000 	ldrsh.w	r8, [r0]
 802a3e8:	681e      	ldr	r6, [r3, #0]
 802a3ea:	6006      	str	r6, [r0, #0]
 802a3ec:	685e      	ldr	r6, [r3, #4]
 802a3ee:	6046      	str	r6, [r0, #4]
 802a3f0:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 802a3f4:	f8a3 c004 	strh.w	ip, [r3, #4]
 802a3f8:	f8a3 e002 	strh.w	lr, [r3, #2]
 802a3fc:	80df      	strh	r7, [r3, #6]
 802a3fe:	f1a1 0308 	sub.w	r3, r1, #8
 802a402:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 802a406:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 802a40a:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 802a40e:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 802a412:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802a416:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 802a41a:	45ac      	cmp	ip, r5
 802a41c:	dd0f      	ble.n	802a43e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 802a41e:	681d      	ldr	r5, [r3, #0]
 802a420:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 802a424:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 802a428:	6015      	str	r5, [r2, #0]
 802a42a:	685d      	ldr	r5, [r3, #4]
 802a42c:	6055      	str	r5, [r2, #4]
 802a42e:	f821 7c08 	strh.w	r7, [r1, #-8]
 802a432:	f821 6c06 	strh.w	r6, [r1, #-6]
 802a436:	f821 ec04 	strh.w	lr, [r1, #-4]
 802a43a:	f821 cc02 	strh.w	ip, [r1, #-2]
 802a43e:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 802a442:	f9b0 7000 	ldrsh.w	r7, [r0]
 802a446:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 802a44a:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 802a44e:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 802a452:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802a456:	4565      	cmp	r5, ip
 802a458:	dd0d      	ble.n	802a476 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 802a45a:	6815      	ldr	r5, [r2, #0]
 802a45c:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 802a460:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 802a464:	6005      	str	r5, [r0, #0]
 802a466:	6855      	ldr	r5, [r2, #4]
 802a468:	8107      	strh	r7, [r0, #8]
 802a46a:	6045      	str	r5, [r0, #4]
 802a46c:	8146      	strh	r6, [r0, #10]
 802a46e:	f8a0 e00c 	strh.w	lr, [r0, #12]
 802a472:	f8a0 c00e 	strh.w	ip, [r0, #14]
 802a476:	f9b0 7000 	ldrsh.w	r7, [r0]
 802a47a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 802a47e:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 802a482:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 802a486:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802a48a:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 802a48e:	45ac      	cmp	ip, r5
 802a490:	dd0f      	ble.n	802a4b2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 802a492:	681d      	ldr	r5, [r3, #0]
 802a494:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 802a498:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 802a49c:	6005      	str	r5, [r0, #0]
 802a49e:	685d      	ldr	r5, [r3, #4]
 802a4a0:	6045      	str	r5, [r0, #4]
 802a4a2:	f821 7c08 	strh.w	r7, [r1, #-8]
 802a4a6:	f821 6c06 	strh.w	r6, [r1, #-6]
 802a4aa:	f821 ec04 	strh.w	lr, [r1, #-4]
 802a4ae:	f821 cc02 	strh.w	ip, [r1, #-2]
 802a4b2:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 802a4b6:	f102 0508 	add.w	r5, r2, #8
 802a4ba:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 802a4be:	f9b0 e000 	ldrsh.w	lr, [r0]
 802a4c2:	462f      	mov	r7, r5
 802a4c4:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 802a4c8:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 802a4cc:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 802a4d0:	45b2      	cmp	sl, r6
 802a4d2:	dc18      	bgt.n	802a506 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 802a4d4:	3b08      	subs	r3, #8
 802a4d6:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 802a4da:	f9b3 6000 	ldrsh.w	r6, [r3]
 802a4de:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 802a4e2:	45b2      	cmp	sl, r6
 802a4e4:	dbf6      	blt.n	802a4d4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 802a4e6:	42ab      	cmp	r3, r5
 802a4e8:	681e      	ldr	r6, [r3, #0]
 802a4ea:	d30e      	bcc.n	802a50a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 802a4ec:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 802a4f0:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 802a4f4:	602e      	str	r6, [r5, #0]
 802a4f6:	685e      	ldr	r6, [r3, #4]
 802a4f8:	606e      	str	r6, [r5, #4]
 802a4fa:	f8a3 9000 	strh.w	r9, [r3]
 802a4fe:	f8a3 8002 	strh.w	r8, [r3, #2]
 802a502:	809f      	strh	r7, [r3, #4]
 802a504:	80da      	strh	r2, [r3, #6]
 802a506:	462a      	mov	r2, r5
 802a508:	e7d3      	b.n	802a4b2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 802a50a:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 802a50e:	6006      	str	r6, [r0, #0]
 802a510:	685e      	ldr	r6, [r3, #4]
 802a512:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 802a516:	6046      	str	r6, [r0, #4]
 802a518:	1a1e      	subs	r6, r3, r0
 802a51a:	80da      	strh	r2, [r3, #6]
 802a51c:	1b4a      	subs	r2, r1, r5
 802a51e:	f8a3 e000 	strh.w	lr, [r3]
 802a522:	10d2      	asrs	r2, r2, #3
 802a524:	f8a3 c002 	strh.w	ip, [r3, #2]
 802a528:	f8a3 8004 	strh.w	r8, [r3, #4]
 802a52c:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 802a530:	bfb5      	itete	lt
 802a532:	e9c4 0300 	strdlt	r0, r3, [r4]
 802a536:	4607      	movge	r7, r0
 802a538:	460b      	movlt	r3, r1
 802a53a:	e9c4 5100 	strdge	r5, r1, [r4]
 802a53e:	4638      	mov	r0, r7
 802a540:	3408      	adds	r4, #8
 802a542:	4619      	mov	r1, r3
 802a544:	e73f      	b.n	802a3c6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 802a546:	4291      	cmp	r1, r2
 802a548:	d925      	bls.n	802a596 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 802a54a:	f1a2 0310 	sub.w	r3, r2, #16
 802a54e:	f9b3 600a 	ldrsh.w	r6, [r3, #10]
 802a552:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 802a556:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 802a55a:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 802a55e:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 802a562:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 802a566:	42b5      	cmp	r5, r6
 802a568:	dd13      	ble.n	802a592 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1d8>
 802a56a:	461d      	mov	r5, r3
 802a56c:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 802a570:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 802a574:	3b08      	subs	r3, #8
 802a576:	f855 6f08 	ldr.w	r6, [r5, #8]!
 802a57a:	619e      	str	r6, [r3, #24]
 802a57c:	42a8      	cmp	r0, r5
 802a57e:	686e      	ldr	r6, [r5, #4]
 802a580:	f8a3 c010 	strh.w	ip, [r3, #16]
 802a584:	61de      	str	r6, [r3, #28]
 802a586:	825f      	strh	r7, [r3, #18]
 802a588:	f8a3 8014 	strh.w	r8, [r3, #20]
 802a58c:	f8a3 e016 	strh.w	lr, [r3, #22]
 802a590:	d1dd      	bne.n	802a54e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x194>
 802a592:	3208      	adds	r2, #8
 802a594:	e7d7      	b.n	802a546 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 802a596:	466b      	mov	r3, sp
 802a598:	429c      	cmp	r4, r3
 802a59a:	d903      	bls.n	802a5a4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ea>
 802a59c:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 802a5a0:	3c08      	subs	r4, #8
 802a5a2:	e710      	b.n	802a3c6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 802a5a4:	b051      	add	sp, #324	; 0x144
 802a5a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802a5aa <_ZN8touchgfx7Outline9sortCellsEv>:
 802a5aa:	6881      	ldr	r1, [r0, #8]
 802a5ac:	b111      	cbz	r1, 802a5b4 <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 802a5ae:	68c0      	ldr	r0, [r0, #12]
 802a5b0:	f7ff bf03 	b.w	802a3ba <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 802a5b4:	4770      	bx	lr

0802a5b6 <_ZN8touchgfx7Outline8getCellsEv>:
 802a5b6:	b510      	push	{r4, lr}
 802a5b8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802a5ba:	4604      	mov	r4, r0
 802a5bc:	07da      	lsls	r2, r3, #31
 802a5be:	d507      	bpl.n	802a5d0 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 802a5c0:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 802a5c4:	f7ff fe83 	bl	802a2ce <_ZN8touchgfx7Outline6lineToEii>
 802a5c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802a5ca:	f023 0301 	bic.w	r3, r3, #1
 802a5ce:	63e3      	str	r3, [r4, #60]	; 0x3c
 802a5d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802a5d2:	079b      	lsls	r3, r3, #30
 802a5d4:	d51a      	bpl.n	802a60c <_ZN8touchgfx7Outline8getCellsEv+0x56>
 802a5d6:	8b62      	ldrh	r2, [r4, #26]
 802a5d8:	8b23      	ldrh	r3, [r4, #24]
 802a5da:	4313      	orrs	r3, r2
 802a5dc:	d00d      	beq.n	802a5fa <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802a5de:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802a5e2:	2b00      	cmp	r3, #0
 802a5e4:	db09      	blt.n	802a5fa <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802a5e6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 802a5e8:	4293      	cmp	r3, r2
 802a5ea:	da06      	bge.n	802a5fa <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802a5ec:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 802a5f0:	429a      	cmp	r2, r3
 802a5f2:	d80d      	bhi.n	802a610 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 802a5f4:	2301      	movs	r3, #1
 802a5f6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802a5fa:	68a0      	ldr	r0, [r4, #8]
 802a5fc:	b138      	cbz	r0, 802a60e <_ZN8touchgfx7Outline8getCellsEv+0x58>
 802a5fe:	4620      	mov	r0, r4
 802a600:	f7ff ffd3 	bl	802a5aa <_ZN8touchgfx7Outline9sortCellsEv>
 802a604:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802a606:	f023 0302 	bic.w	r3, r3, #2
 802a60a:	63e3      	str	r3, [r4, #60]	; 0x3c
 802a60c:	68e0      	ldr	r0, [r4, #12]
 802a60e:	bd10      	pop	{r4, pc}
 802a610:	f104 0314 	add.w	r3, r4, #20
 802a614:	6922      	ldr	r2, [r4, #16]
 802a616:	cb03      	ldmia	r3!, {r0, r1}
 802a618:	6010      	str	r0, [r2, #0]
 802a61a:	6051      	str	r1, [r2, #4]
 802a61c:	6923      	ldr	r3, [r4, #16]
 802a61e:	3308      	adds	r3, #8
 802a620:	6123      	str	r3, [r4, #16]
 802a622:	68a3      	ldr	r3, [r4, #8]
 802a624:	3301      	adds	r3, #1
 802a626:	60a3      	str	r3, [r4, #8]
 802a628:	e7e7      	b.n	802a5fa <_ZN8touchgfx7Outline8getCellsEv+0x44>

0802a62a <_ZN8touchgfx8ScanlineD1Ev>:
 802a62a:	4770      	bx	lr

0802a62c <_ZN8touchgfx8ScanlineD0Ev>:
 802a62c:	b510      	push	{r4, lr}
 802a62e:	4604      	mov	r4, r0
 802a630:	2124      	movs	r1, #36	; 0x24
 802a632:	f000 f87a 	bl	802a72a <_ZdlPvj>
 802a636:	4620      	mov	r0, r4
 802a638:	bd10      	pop	{r4, pc}

0802a63a <_ZN8touchgfx8Scanline5resetEv>:
 802a63a:	b510      	push	{r4, lr}
 802a63c:	4604      	mov	r4, r0
 802a63e:	f7f3 f8bf 	bl	801d7c0 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 802a642:	61a0      	str	r0, [r4, #24]
 802a644:	f7f3 f8c2 	bl	801d7cc <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 802a648:	61e0      	str	r0, [r4, #28]
 802a64a:	f7f3 f8c5 	bl	801d7d8 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 802a64e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802a652:	6220      	str	r0, [r4, #32]
 802a654:	6160      	str	r0, [r4, #20]
 802a656:	e9c4 3301 	strd	r3, r3, [r4, #4]
 802a65a:	69e3      	ldr	r3, [r4, #28]
 802a65c:	6123      	str	r3, [r4, #16]
 802a65e:	2300      	movs	r3, #0
 802a660:	60e3      	str	r3, [r4, #12]
 802a662:	bd10      	pop	{r4, pc}

0802a664 <_ZN8touchgfx8ScanlineC1Ev>:
 802a664:	4b07      	ldr	r3, [pc, #28]	; (802a684 <_ZN8touchgfx8ScanlineC1Ev+0x20>)
 802a666:	b510      	push	{r4, lr}
 802a668:	6003      	str	r3, [r0, #0]
 802a66a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802a66e:	4604      	mov	r4, r0
 802a670:	e9c0 3301 	strd	r3, r3, [r0, #4]
 802a674:	2300      	movs	r3, #0
 802a676:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802a67a:	6143      	str	r3, [r0, #20]
 802a67c:	f7ff ffdd 	bl	802a63a <_ZN8touchgfx8Scanline5resetEv>
 802a680:	4620      	mov	r0, r4
 802a682:	bd10      	pop	{r4, pc}
 802a684:	08030624 	.word	0x08030624

0802a688 <_ZN8touchgfx8Scanline7addSpanEiijj>:
 802a688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a68c:	1e0c      	subs	r4, r1, #0
 802a68e:	4605      	mov	r5, r0
 802a690:	4617      	mov	r7, r2
 802a692:	461e      	mov	r6, r3
 802a694:	da03      	bge.n	802a69e <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 802a696:	4426      	add	r6, r4
 802a698:	2e01      	cmp	r6, #1
 802a69a:	d421      	bmi.n	802a6e0 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 802a69c:	2400      	movs	r4, #0
 802a69e:	f7f3 f889 	bl	801d7b4 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802a6a2:	42a0      	cmp	r0, r4
 802a6a4:	d91c      	bls.n	802a6e0 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 802a6a6:	eb04 0806 	add.w	r8, r4, r6
 802a6aa:	f7f3 f883 	bl	801d7b4 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802a6ae:	4580      	cmp	r8, r0
 802a6b0:	d902      	bls.n	802a6b8 <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 802a6b2:	f7f3 f87f 	bl	801d7b4 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 802a6b6:	1b06      	subs	r6, r0, r4
 802a6b8:	69a8      	ldr	r0, [r5, #24]
 802a6ba:	4632      	mov	r2, r6
 802a6bc:	f89d 1018 	ldrb.w	r1, [sp, #24]
 802a6c0:	4420      	add	r0, r4
 802a6c2:	f7f4 fd76 	bl	801f1b2 <_ZN8touchgfx6memsetEPvhm>
 802a6c6:	686b      	ldr	r3, [r5, #4]
 802a6c8:	b2b2      	uxth	r2, r6
 802a6ca:	3301      	adds	r3, #1
 802a6cc:	42a3      	cmp	r3, r4
 802a6ce:	696b      	ldr	r3, [r5, #20]
 802a6d0:	d108      	bne.n	802a6e4 <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 802a6d2:	8819      	ldrh	r1, [r3, #0]
 802a6d4:	440a      	add	r2, r1
 802a6d6:	801a      	strh	r2, [r3, #0]
 802a6d8:	3c01      	subs	r4, #1
 802a6da:	4434      	add	r4, r6
 802a6dc:	e9c5 4701 	strd	r4, r7, [r5, #4]
 802a6e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a6e4:	1c99      	adds	r1, r3, #2
 802a6e6:	6169      	str	r1, [r5, #20]
 802a6e8:	805a      	strh	r2, [r3, #2]
 802a6ea:	692b      	ldr	r3, [r5, #16]
 802a6ec:	1c9a      	adds	r2, r3, #2
 802a6ee:	612a      	str	r2, [r5, #16]
 802a6f0:	805c      	strh	r4, [r3, #2]
 802a6f2:	68eb      	ldr	r3, [r5, #12]
 802a6f4:	3301      	adds	r3, #1
 802a6f6:	60eb      	str	r3, [r5, #12]
 802a6f8:	e7ee      	b.n	802a6d8 <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

0802a6fa <_ZN8touchgfx15RenderingBufferC1Ev>:
 802a6fa:	2200      	movs	r2, #0
 802a6fc:	6002      	str	r2, [r0, #0]
 802a6fe:	7102      	strb	r2, [r0, #4]
 802a700:	6102      	str	r2, [r0, #16]
 802a702:	e9c0 2202 	strd	r2, r2, [r0, #8]
 802a706:	4770      	bx	lr

0802a708 <_ZN8touchgfx15RenderingBufferD1Ev>:
 802a708:	4770      	bx	lr

0802a70a <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 802a70a:	6083      	str	r3, [r0, #8]
 802a70c:	9b00      	ldr	r3, [sp, #0]
 802a70e:	6001      	str	r1, [r0, #0]
 802a710:	60c3      	str	r3, [r0, #12]
 802a712:	9b01      	ldr	r3, [sp, #4]
 802a714:	7102      	strb	r2, [r0, #4]
 802a716:	6103      	str	r3, [r0, #16]
 802a718:	4770      	bx	lr

0802a71a <__aeabi_atexit>:
 802a71a:	460b      	mov	r3, r1
 802a71c:	4601      	mov	r1, r0
 802a71e:	4618      	mov	r0, r3
 802a720:	f000 b852 	b.w	802a7c8 <__cxa_atexit>

0802a724 <__cxa_pure_virtual>:
 802a724:	b508      	push	{r3, lr}
 802a726:	f000 f81f 	bl	802a768 <_ZSt9terminatev>

0802a72a <_ZdlPvj>:
 802a72a:	f000 b80f 	b.w	802a74c <_ZdlPv>

0802a72e <__cxa_guard_acquire>:
 802a72e:	6803      	ldr	r3, [r0, #0]
 802a730:	07db      	lsls	r3, r3, #31
 802a732:	d406      	bmi.n	802a742 <__cxa_guard_acquire+0x14>
 802a734:	7843      	ldrb	r3, [r0, #1]
 802a736:	b103      	cbz	r3, 802a73a <__cxa_guard_acquire+0xc>
 802a738:	deff      	udf	#255	; 0xff
 802a73a:	2301      	movs	r3, #1
 802a73c:	7043      	strb	r3, [r0, #1]
 802a73e:	4618      	mov	r0, r3
 802a740:	4770      	bx	lr
 802a742:	2000      	movs	r0, #0
 802a744:	4770      	bx	lr

0802a746 <__cxa_guard_release>:
 802a746:	2301      	movs	r3, #1
 802a748:	6003      	str	r3, [r0, #0]
 802a74a:	4770      	bx	lr

0802a74c <_ZdlPv>:
 802a74c:	f000 b88e 	b.w	802a86c <free>

0802a750 <_ZN10__cxxabiv111__terminateEPFvvE>:
 802a750:	b508      	push	{r3, lr}
 802a752:	4780      	blx	r0
 802a754:	f000 f80d 	bl	802a772 <abort>

0802a758 <_ZSt13get_terminatev>:
 802a758:	4b02      	ldr	r3, [pc, #8]	; (802a764 <_ZSt13get_terminatev+0xc>)
 802a75a:	6818      	ldr	r0, [r3, #0]
 802a75c:	f3bf 8f5b 	dmb	ish
 802a760:	4770      	bx	lr
 802a762:	bf00      	nop
 802a764:	200000d8 	.word	0x200000d8

0802a768 <_ZSt9terminatev>:
 802a768:	b508      	push	{r3, lr}
 802a76a:	f7ff fff5 	bl	802a758 <_ZSt13get_terminatev>
 802a76e:	f7ff ffef 	bl	802a750 <_ZN10__cxxabiv111__terminateEPFvvE>

0802a772 <abort>:
 802a772:	b508      	push	{r3, lr}
 802a774:	2006      	movs	r0, #6
 802a776:	f000 fc3d 	bl	802aff4 <raise>
 802a77a:	2001      	movs	r0, #1
 802a77c:	f7d9 f8ee 	bl	800395c <_exit>

0802a780 <__assert_func>:
 802a780:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802a782:	461c      	mov	r4, r3
 802a784:	4b09      	ldr	r3, [pc, #36]	; (802a7ac <__assert_func+0x2c>)
 802a786:	681b      	ldr	r3, [r3, #0]
 802a788:	4605      	mov	r5, r0
 802a78a:	68d8      	ldr	r0, [r3, #12]
 802a78c:	b152      	cbz	r2, 802a7a4 <__assert_func+0x24>
 802a78e:	4b08      	ldr	r3, [pc, #32]	; (802a7b0 <__assert_func+0x30>)
 802a790:	9100      	str	r1, [sp, #0]
 802a792:	e9cd 3201 	strd	r3, r2, [sp, #4]
 802a796:	4907      	ldr	r1, [pc, #28]	; (802a7b4 <__assert_func+0x34>)
 802a798:	462b      	mov	r3, r5
 802a79a:	4622      	mov	r2, r4
 802a79c:	f000 f828 	bl	802a7f0 <fiprintf>
 802a7a0:	f7ff ffe7 	bl	802a772 <abort>
 802a7a4:	4b04      	ldr	r3, [pc, #16]	; (802a7b8 <__assert_func+0x38>)
 802a7a6:	461a      	mov	r2, r3
 802a7a8:	e7f2      	b.n	802a790 <__assert_func+0x10>
 802a7aa:	bf00      	nop
 802a7ac:	200000dc 	.word	0x200000dc
 802a7b0:	0803062c 	.word	0x0803062c
 802a7b4:	08030639 	.word	0x08030639
 802a7b8:	08030667 	.word	0x08030667

0802a7bc <atexit>:
 802a7bc:	2300      	movs	r3, #0
 802a7be:	4601      	mov	r1, r0
 802a7c0:	461a      	mov	r2, r3
 802a7c2:	4618      	mov	r0, r3
 802a7c4:	f000 bcf2 	b.w	802b1ac <__register_exitproc>

0802a7c8 <__cxa_atexit>:
 802a7c8:	b510      	push	{r4, lr}
 802a7ca:	4c05      	ldr	r4, [pc, #20]	; (802a7e0 <__cxa_atexit+0x18>)
 802a7cc:	4613      	mov	r3, r2
 802a7ce:	b12c      	cbz	r4, 802a7dc <__cxa_atexit+0x14>
 802a7d0:	460a      	mov	r2, r1
 802a7d2:	4601      	mov	r1, r0
 802a7d4:	2002      	movs	r0, #2
 802a7d6:	f000 fce9 	bl	802b1ac <__register_exitproc>
 802a7da:	bd10      	pop	{r4, pc}
 802a7dc:	4620      	mov	r0, r4
 802a7de:	e7fc      	b.n	802a7da <__cxa_atexit+0x12>
 802a7e0:	0802b1ad 	.word	0x0802b1ad

0802a7e4 <__errno>:
 802a7e4:	4b01      	ldr	r3, [pc, #4]	; (802a7ec <__errno+0x8>)
 802a7e6:	6818      	ldr	r0, [r3, #0]
 802a7e8:	4770      	bx	lr
 802a7ea:	bf00      	nop
 802a7ec:	200000dc 	.word	0x200000dc

0802a7f0 <fiprintf>:
 802a7f0:	b40e      	push	{r1, r2, r3}
 802a7f2:	b503      	push	{r0, r1, lr}
 802a7f4:	4601      	mov	r1, r0
 802a7f6:	ab03      	add	r3, sp, #12
 802a7f8:	4805      	ldr	r0, [pc, #20]	; (802a810 <fiprintf+0x20>)
 802a7fa:	f853 2b04 	ldr.w	r2, [r3], #4
 802a7fe:	6800      	ldr	r0, [r0, #0]
 802a800:	9301      	str	r3, [sp, #4]
 802a802:	f000 f921 	bl	802aa48 <_vfiprintf_r>
 802a806:	b002      	add	sp, #8
 802a808:	f85d eb04 	ldr.w	lr, [sp], #4
 802a80c:	b003      	add	sp, #12
 802a80e:	4770      	bx	lr
 802a810:	200000dc 	.word	0x200000dc

0802a814 <__libc_init_array>:
 802a814:	b570      	push	{r4, r5, r6, lr}
 802a816:	4e0d      	ldr	r6, [pc, #52]	; (802a84c <__libc_init_array+0x38>)
 802a818:	4c0d      	ldr	r4, [pc, #52]	; (802a850 <__libc_init_array+0x3c>)
 802a81a:	1ba4      	subs	r4, r4, r6
 802a81c:	10a4      	asrs	r4, r4, #2
 802a81e:	2500      	movs	r5, #0
 802a820:	42a5      	cmp	r5, r4
 802a822:	d109      	bne.n	802a838 <__libc_init_array+0x24>
 802a824:	4e0b      	ldr	r6, [pc, #44]	; (802a854 <__libc_init_array+0x40>)
 802a826:	4c0c      	ldr	r4, [pc, #48]	; (802a858 <__libc_init_array+0x44>)
 802a828:	f000 ffb0 	bl	802b78c <_init>
 802a82c:	1ba4      	subs	r4, r4, r6
 802a82e:	10a4      	asrs	r4, r4, #2
 802a830:	2500      	movs	r5, #0
 802a832:	42a5      	cmp	r5, r4
 802a834:	d105      	bne.n	802a842 <__libc_init_array+0x2e>
 802a836:	bd70      	pop	{r4, r5, r6, pc}
 802a838:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802a83c:	4798      	blx	r3
 802a83e:	3501      	adds	r5, #1
 802a840:	e7ee      	b.n	802a820 <__libc_init_array+0xc>
 802a842:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802a846:	4798      	blx	r3
 802a848:	3501      	adds	r5, #1
 802a84a:	e7f2      	b.n	802a832 <__libc_init_array+0x1e>
 802a84c:	0806a92c 	.word	0x0806a92c
 802a850:	0806a92c 	.word	0x0806a92c
 802a854:	0806a92c 	.word	0x0806a92c
 802a858:	0806a940 	.word	0x0806a940

0802a85c <malloc>:
 802a85c:	4b02      	ldr	r3, [pc, #8]	; (802a868 <malloc+0xc>)
 802a85e:	4601      	mov	r1, r0
 802a860:	6818      	ldr	r0, [r3, #0]
 802a862:	f000 b86d 	b.w	802a940 <_malloc_r>
 802a866:	bf00      	nop
 802a868:	200000dc 	.word	0x200000dc

0802a86c <free>:
 802a86c:	4b02      	ldr	r3, [pc, #8]	; (802a878 <free+0xc>)
 802a86e:	4601      	mov	r1, r0
 802a870:	6818      	ldr	r0, [r3, #0]
 802a872:	f000 b817 	b.w	802a8a4 <_free_r>
 802a876:	bf00      	nop
 802a878:	200000dc 	.word	0x200000dc

0802a87c <memcpy>:
 802a87c:	b510      	push	{r4, lr}
 802a87e:	1e43      	subs	r3, r0, #1
 802a880:	440a      	add	r2, r1
 802a882:	4291      	cmp	r1, r2
 802a884:	d100      	bne.n	802a888 <memcpy+0xc>
 802a886:	bd10      	pop	{r4, pc}
 802a888:	f811 4b01 	ldrb.w	r4, [r1], #1
 802a88c:	f803 4f01 	strb.w	r4, [r3, #1]!
 802a890:	e7f7      	b.n	802a882 <memcpy+0x6>

0802a892 <memset>:
 802a892:	4402      	add	r2, r0
 802a894:	4603      	mov	r3, r0
 802a896:	4293      	cmp	r3, r2
 802a898:	d100      	bne.n	802a89c <memset+0xa>
 802a89a:	4770      	bx	lr
 802a89c:	f803 1b01 	strb.w	r1, [r3], #1
 802a8a0:	e7f9      	b.n	802a896 <memset+0x4>
	...

0802a8a4 <_free_r>:
 802a8a4:	b538      	push	{r3, r4, r5, lr}
 802a8a6:	4605      	mov	r5, r0
 802a8a8:	2900      	cmp	r1, #0
 802a8aa:	d045      	beq.n	802a938 <_free_r+0x94>
 802a8ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802a8b0:	1f0c      	subs	r4, r1, #4
 802a8b2:	2b00      	cmp	r3, #0
 802a8b4:	bfb8      	it	lt
 802a8b6:	18e4      	addlt	r4, r4, r3
 802a8b8:	f000 feba 	bl	802b630 <__malloc_lock>
 802a8bc:	4a1f      	ldr	r2, [pc, #124]	; (802a93c <_free_r+0x98>)
 802a8be:	6813      	ldr	r3, [r2, #0]
 802a8c0:	4610      	mov	r0, r2
 802a8c2:	b933      	cbnz	r3, 802a8d2 <_free_r+0x2e>
 802a8c4:	6063      	str	r3, [r4, #4]
 802a8c6:	6014      	str	r4, [r2, #0]
 802a8c8:	4628      	mov	r0, r5
 802a8ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802a8ce:	f000 beb0 	b.w	802b632 <__malloc_unlock>
 802a8d2:	42a3      	cmp	r3, r4
 802a8d4:	d90c      	bls.n	802a8f0 <_free_r+0x4c>
 802a8d6:	6821      	ldr	r1, [r4, #0]
 802a8d8:	1862      	adds	r2, r4, r1
 802a8da:	4293      	cmp	r3, r2
 802a8dc:	bf04      	itt	eq
 802a8de:	681a      	ldreq	r2, [r3, #0]
 802a8e0:	685b      	ldreq	r3, [r3, #4]
 802a8e2:	6063      	str	r3, [r4, #4]
 802a8e4:	bf04      	itt	eq
 802a8e6:	1852      	addeq	r2, r2, r1
 802a8e8:	6022      	streq	r2, [r4, #0]
 802a8ea:	6004      	str	r4, [r0, #0]
 802a8ec:	e7ec      	b.n	802a8c8 <_free_r+0x24>
 802a8ee:	4613      	mov	r3, r2
 802a8f0:	685a      	ldr	r2, [r3, #4]
 802a8f2:	b10a      	cbz	r2, 802a8f8 <_free_r+0x54>
 802a8f4:	42a2      	cmp	r2, r4
 802a8f6:	d9fa      	bls.n	802a8ee <_free_r+0x4a>
 802a8f8:	6819      	ldr	r1, [r3, #0]
 802a8fa:	1858      	adds	r0, r3, r1
 802a8fc:	42a0      	cmp	r0, r4
 802a8fe:	d10b      	bne.n	802a918 <_free_r+0x74>
 802a900:	6820      	ldr	r0, [r4, #0]
 802a902:	4401      	add	r1, r0
 802a904:	1858      	adds	r0, r3, r1
 802a906:	4282      	cmp	r2, r0
 802a908:	6019      	str	r1, [r3, #0]
 802a90a:	d1dd      	bne.n	802a8c8 <_free_r+0x24>
 802a90c:	6810      	ldr	r0, [r2, #0]
 802a90e:	6852      	ldr	r2, [r2, #4]
 802a910:	605a      	str	r2, [r3, #4]
 802a912:	4401      	add	r1, r0
 802a914:	6019      	str	r1, [r3, #0]
 802a916:	e7d7      	b.n	802a8c8 <_free_r+0x24>
 802a918:	d902      	bls.n	802a920 <_free_r+0x7c>
 802a91a:	230c      	movs	r3, #12
 802a91c:	602b      	str	r3, [r5, #0]
 802a91e:	e7d3      	b.n	802a8c8 <_free_r+0x24>
 802a920:	6820      	ldr	r0, [r4, #0]
 802a922:	1821      	adds	r1, r4, r0
 802a924:	428a      	cmp	r2, r1
 802a926:	bf04      	itt	eq
 802a928:	6811      	ldreq	r1, [r2, #0]
 802a92a:	6852      	ldreq	r2, [r2, #4]
 802a92c:	6062      	str	r2, [r4, #4]
 802a92e:	bf04      	itt	eq
 802a930:	1809      	addeq	r1, r1, r0
 802a932:	6021      	streq	r1, [r4, #0]
 802a934:	605c      	str	r4, [r3, #4]
 802a936:	e7c7      	b.n	802a8c8 <_free_r+0x24>
 802a938:	bd38      	pop	{r3, r4, r5, pc}
 802a93a:	bf00      	nop
 802a93c:	2000c084 	.word	0x2000c084

0802a940 <_malloc_r>:
 802a940:	b570      	push	{r4, r5, r6, lr}
 802a942:	1ccd      	adds	r5, r1, #3
 802a944:	f025 0503 	bic.w	r5, r5, #3
 802a948:	3508      	adds	r5, #8
 802a94a:	2d0c      	cmp	r5, #12
 802a94c:	bf38      	it	cc
 802a94e:	250c      	movcc	r5, #12
 802a950:	2d00      	cmp	r5, #0
 802a952:	4606      	mov	r6, r0
 802a954:	db01      	blt.n	802a95a <_malloc_r+0x1a>
 802a956:	42a9      	cmp	r1, r5
 802a958:	d903      	bls.n	802a962 <_malloc_r+0x22>
 802a95a:	230c      	movs	r3, #12
 802a95c:	6033      	str	r3, [r6, #0]
 802a95e:	2000      	movs	r0, #0
 802a960:	bd70      	pop	{r4, r5, r6, pc}
 802a962:	f000 fe65 	bl	802b630 <__malloc_lock>
 802a966:	4a21      	ldr	r2, [pc, #132]	; (802a9ec <_malloc_r+0xac>)
 802a968:	6814      	ldr	r4, [r2, #0]
 802a96a:	4621      	mov	r1, r4
 802a96c:	b991      	cbnz	r1, 802a994 <_malloc_r+0x54>
 802a96e:	4c20      	ldr	r4, [pc, #128]	; (802a9f0 <_malloc_r+0xb0>)
 802a970:	6823      	ldr	r3, [r4, #0]
 802a972:	b91b      	cbnz	r3, 802a97c <_malloc_r+0x3c>
 802a974:	4630      	mov	r0, r6
 802a976:	f000 fb05 	bl	802af84 <_sbrk_r>
 802a97a:	6020      	str	r0, [r4, #0]
 802a97c:	4629      	mov	r1, r5
 802a97e:	4630      	mov	r0, r6
 802a980:	f000 fb00 	bl	802af84 <_sbrk_r>
 802a984:	1c43      	adds	r3, r0, #1
 802a986:	d124      	bne.n	802a9d2 <_malloc_r+0x92>
 802a988:	230c      	movs	r3, #12
 802a98a:	6033      	str	r3, [r6, #0]
 802a98c:	4630      	mov	r0, r6
 802a98e:	f000 fe50 	bl	802b632 <__malloc_unlock>
 802a992:	e7e4      	b.n	802a95e <_malloc_r+0x1e>
 802a994:	680b      	ldr	r3, [r1, #0]
 802a996:	1b5b      	subs	r3, r3, r5
 802a998:	d418      	bmi.n	802a9cc <_malloc_r+0x8c>
 802a99a:	2b0b      	cmp	r3, #11
 802a99c:	d90f      	bls.n	802a9be <_malloc_r+0x7e>
 802a99e:	600b      	str	r3, [r1, #0]
 802a9a0:	50cd      	str	r5, [r1, r3]
 802a9a2:	18cc      	adds	r4, r1, r3
 802a9a4:	4630      	mov	r0, r6
 802a9a6:	f000 fe44 	bl	802b632 <__malloc_unlock>
 802a9aa:	f104 000b 	add.w	r0, r4, #11
 802a9ae:	1d23      	adds	r3, r4, #4
 802a9b0:	f020 0007 	bic.w	r0, r0, #7
 802a9b4:	1ac3      	subs	r3, r0, r3
 802a9b6:	d0d3      	beq.n	802a960 <_malloc_r+0x20>
 802a9b8:	425a      	negs	r2, r3
 802a9ba:	50e2      	str	r2, [r4, r3]
 802a9bc:	e7d0      	b.n	802a960 <_malloc_r+0x20>
 802a9be:	428c      	cmp	r4, r1
 802a9c0:	684b      	ldr	r3, [r1, #4]
 802a9c2:	bf16      	itet	ne
 802a9c4:	6063      	strne	r3, [r4, #4]
 802a9c6:	6013      	streq	r3, [r2, #0]
 802a9c8:	460c      	movne	r4, r1
 802a9ca:	e7eb      	b.n	802a9a4 <_malloc_r+0x64>
 802a9cc:	460c      	mov	r4, r1
 802a9ce:	6849      	ldr	r1, [r1, #4]
 802a9d0:	e7cc      	b.n	802a96c <_malloc_r+0x2c>
 802a9d2:	1cc4      	adds	r4, r0, #3
 802a9d4:	f024 0403 	bic.w	r4, r4, #3
 802a9d8:	42a0      	cmp	r0, r4
 802a9da:	d005      	beq.n	802a9e8 <_malloc_r+0xa8>
 802a9dc:	1a21      	subs	r1, r4, r0
 802a9de:	4630      	mov	r0, r6
 802a9e0:	f000 fad0 	bl	802af84 <_sbrk_r>
 802a9e4:	3001      	adds	r0, #1
 802a9e6:	d0cf      	beq.n	802a988 <_malloc_r+0x48>
 802a9e8:	6025      	str	r5, [r4, #0]
 802a9ea:	e7db      	b.n	802a9a4 <_malloc_r+0x64>
 802a9ec:	2000c084 	.word	0x2000c084
 802a9f0:	2000c088 	.word	0x2000c088

0802a9f4 <__sfputc_r>:
 802a9f4:	6893      	ldr	r3, [r2, #8]
 802a9f6:	3b01      	subs	r3, #1
 802a9f8:	2b00      	cmp	r3, #0
 802a9fa:	b410      	push	{r4}
 802a9fc:	6093      	str	r3, [r2, #8]
 802a9fe:	da08      	bge.n	802aa12 <__sfputc_r+0x1e>
 802aa00:	6994      	ldr	r4, [r2, #24]
 802aa02:	42a3      	cmp	r3, r4
 802aa04:	db01      	blt.n	802aa0a <__sfputc_r+0x16>
 802aa06:	290a      	cmp	r1, #10
 802aa08:	d103      	bne.n	802aa12 <__sfputc_r+0x1e>
 802aa0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802aa0e:	f000 bb0d 	b.w	802b02c <__swbuf_r>
 802aa12:	6813      	ldr	r3, [r2, #0]
 802aa14:	1c58      	adds	r0, r3, #1
 802aa16:	6010      	str	r0, [r2, #0]
 802aa18:	7019      	strb	r1, [r3, #0]
 802aa1a:	4608      	mov	r0, r1
 802aa1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 802aa20:	4770      	bx	lr

0802aa22 <__sfputs_r>:
 802aa22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802aa24:	4606      	mov	r6, r0
 802aa26:	460f      	mov	r7, r1
 802aa28:	4614      	mov	r4, r2
 802aa2a:	18d5      	adds	r5, r2, r3
 802aa2c:	42ac      	cmp	r4, r5
 802aa2e:	d101      	bne.n	802aa34 <__sfputs_r+0x12>
 802aa30:	2000      	movs	r0, #0
 802aa32:	e007      	b.n	802aa44 <__sfputs_r+0x22>
 802aa34:	463a      	mov	r2, r7
 802aa36:	f814 1b01 	ldrb.w	r1, [r4], #1
 802aa3a:	4630      	mov	r0, r6
 802aa3c:	f7ff ffda 	bl	802a9f4 <__sfputc_r>
 802aa40:	1c43      	adds	r3, r0, #1
 802aa42:	d1f3      	bne.n	802aa2c <__sfputs_r+0xa>
 802aa44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802aa48 <_vfiprintf_r>:
 802aa48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802aa4c:	460c      	mov	r4, r1
 802aa4e:	b09d      	sub	sp, #116	; 0x74
 802aa50:	4617      	mov	r7, r2
 802aa52:	461d      	mov	r5, r3
 802aa54:	4606      	mov	r6, r0
 802aa56:	b118      	cbz	r0, 802aa60 <_vfiprintf_r+0x18>
 802aa58:	6983      	ldr	r3, [r0, #24]
 802aa5a:	b90b      	cbnz	r3, 802aa60 <_vfiprintf_r+0x18>
 802aa5c:	f000 fcfa 	bl	802b454 <__sinit>
 802aa60:	4b7c      	ldr	r3, [pc, #496]	; (802ac54 <_vfiprintf_r+0x20c>)
 802aa62:	429c      	cmp	r4, r3
 802aa64:	d158      	bne.n	802ab18 <_vfiprintf_r+0xd0>
 802aa66:	6874      	ldr	r4, [r6, #4]
 802aa68:	89a3      	ldrh	r3, [r4, #12]
 802aa6a:	0718      	lsls	r0, r3, #28
 802aa6c:	d55e      	bpl.n	802ab2c <_vfiprintf_r+0xe4>
 802aa6e:	6923      	ldr	r3, [r4, #16]
 802aa70:	2b00      	cmp	r3, #0
 802aa72:	d05b      	beq.n	802ab2c <_vfiprintf_r+0xe4>
 802aa74:	2300      	movs	r3, #0
 802aa76:	9309      	str	r3, [sp, #36]	; 0x24
 802aa78:	2320      	movs	r3, #32
 802aa7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802aa7e:	2330      	movs	r3, #48	; 0x30
 802aa80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802aa84:	9503      	str	r5, [sp, #12]
 802aa86:	f04f 0b01 	mov.w	fp, #1
 802aa8a:	46b8      	mov	r8, r7
 802aa8c:	4645      	mov	r5, r8
 802aa8e:	f815 3b01 	ldrb.w	r3, [r5], #1
 802aa92:	b10b      	cbz	r3, 802aa98 <_vfiprintf_r+0x50>
 802aa94:	2b25      	cmp	r3, #37	; 0x25
 802aa96:	d154      	bne.n	802ab42 <_vfiprintf_r+0xfa>
 802aa98:	ebb8 0a07 	subs.w	sl, r8, r7
 802aa9c:	d00b      	beq.n	802aab6 <_vfiprintf_r+0x6e>
 802aa9e:	4653      	mov	r3, sl
 802aaa0:	463a      	mov	r2, r7
 802aaa2:	4621      	mov	r1, r4
 802aaa4:	4630      	mov	r0, r6
 802aaa6:	f7ff ffbc 	bl	802aa22 <__sfputs_r>
 802aaaa:	3001      	adds	r0, #1
 802aaac:	f000 80c2 	beq.w	802ac34 <_vfiprintf_r+0x1ec>
 802aab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802aab2:	4453      	add	r3, sl
 802aab4:	9309      	str	r3, [sp, #36]	; 0x24
 802aab6:	f898 3000 	ldrb.w	r3, [r8]
 802aaba:	2b00      	cmp	r3, #0
 802aabc:	f000 80ba 	beq.w	802ac34 <_vfiprintf_r+0x1ec>
 802aac0:	2300      	movs	r3, #0
 802aac2:	f04f 32ff 	mov.w	r2, #4294967295
 802aac6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802aaca:	9304      	str	r3, [sp, #16]
 802aacc:	9307      	str	r3, [sp, #28]
 802aace:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802aad2:	931a      	str	r3, [sp, #104]	; 0x68
 802aad4:	46a8      	mov	r8, r5
 802aad6:	2205      	movs	r2, #5
 802aad8:	f818 1b01 	ldrb.w	r1, [r8], #1
 802aadc:	485e      	ldr	r0, [pc, #376]	; (802ac58 <_vfiprintf_r+0x210>)
 802aade:	f7d5 fb97 	bl	8000210 <memchr>
 802aae2:	9b04      	ldr	r3, [sp, #16]
 802aae4:	bb78      	cbnz	r0, 802ab46 <_vfiprintf_r+0xfe>
 802aae6:	06d9      	lsls	r1, r3, #27
 802aae8:	bf44      	itt	mi
 802aaea:	2220      	movmi	r2, #32
 802aaec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802aaf0:	071a      	lsls	r2, r3, #28
 802aaf2:	bf44      	itt	mi
 802aaf4:	222b      	movmi	r2, #43	; 0x2b
 802aaf6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802aafa:	782a      	ldrb	r2, [r5, #0]
 802aafc:	2a2a      	cmp	r2, #42	; 0x2a
 802aafe:	d02a      	beq.n	802ab56 <_vfiprintf_r+0x10e>
 802ab00:	9a07      	ldr	r2, [sp, #28]
 802ab02:	46a8      	mov	r8, r5
 802ab04:	2000      	movs	r0, #0
 802ab06:	250a      	movs	r5, #10
 802ab08:	4641      	mov	r1, r8
 802ab0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802ab0e:	3b30      	subs	r3, #48	; 0x30
 802ab10:	2b09      	cmp	r3, #9
 802ab12:	d969      	bls.n	802abe8 <_vfiprintf_r+0x1a0>
 802ab14:	b360      	cbz	r0, 802ab70 <_vfiprintf_r+0x128>
 802ab16:	e024      	b.n	802ab62 <_vfiprintf_r+0x11a>
 802ab18:	4b50      	ldr	r3, [pc, #320]	; (802ac5c <_vfiprintf_r+0x214>)
 802ab1a:	429c      	cmp	r4, r3
 802ab1c:	d101      	bne.n	802ab22 <_vfiprintf_r+0xda>
 802ab1e:	68b4      	ldr	r4, [r6, #8]
 802ab20:	e7a2      	b.n	802aa68 <_vfiprintf_r+0x20>
 802ab22:	4b4f      	ldr	r3, [pc, #316]	; (802ac60 <_vfiprintf_r+0x218>)
 802ab24:	429c      	cmp	r4, r3
 802ab26:	bf08      	it	eq
 802ab28:	68f4      	ldreq	r4, [r6, #12]
 802ab2a:	e79d      	b.n	802aa68 <_vfiprintf_r+0x20>
 802ab2c:	4621      	mov	r1, r4
 802ab2e:	4630      	mov	r0, r6
 802ab30:	f000 face 	bl	802b0d0 <__swsetup_r>
 802ab34:	2800      	cmp	r0, #0
 802ab36:	d09d      	beq.n	802aa74 <_vfiprintf_r+0x2c>
 802ab38:	f04f 30ff 	mov.w	r0, #4294967295
 802ab3c:	b01d      	add	sp, #116	; 0x74
 802ab3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ab42:	46a8      	mov	r8, r5
 802ab44:	e7a2      	b.n	802aa8c <_vfiprintf_r+0x44>
 802ab46:	4a44      	ldr	r2, [pc, #272]	; (802ac58 <_vfiprintf_r+0x210>)
 802ab48:	1a80      	subs	r0, r0, r2
 802ab4a:	fa0b f000 	lsl.w	r0, fp, r0
 802ab4e:	4318      	orrs	r0, r3
 802ab50:	9004      	str	r0, [sp, #16]
 802ab52:	4645      	mov	r5, r8
 802ab54:	e7be      	b.n	802aad4 <_vfiprintf_r+0x8c>
 802ab56:	9a03      	ldr	r2, [sp, #12]
 802ab58:	1d11      	adds	r1, r2, #4
 802ab5a:	6812      	ldr	r2, [r2, #0]
 802ab5c:	9103      	str	r1, [sp, #12]
 802ab5e:	2a00      	cmp	r2, #0
 802ab60:	db01      	blt.n	802ab66 <_vfiprintf_r+0x11e>
 802ab62:	9207      	str	r2, [sp, #28]
 802ab64:	e004      	b.n	802ab70 <_vfiprintf_r+0x128>
 802ab66:	4252      	negs	r2, r2
 802ab68:	f043 0302 	orr.w	r3, r3, #2
 802ab6c:	9207      	str	r2, [sp, #28]
 802ab6e:	9304      	str	r3, [sp, #16]
 802ab70:	f898 3000 	ldrb.w	r3, [r8]
 802ab74:	2b2e      	cmp	r3, #46	; 0x2e
 802ab76:	d10e      	bne.n	802ab96 <_vfiprintf_r+0x14e>
 802ab78:	f898 3001 	ldrb.w	r3, [r8, #1]
 802ab7c:	2b2a      	cmp	r3, #42	; 0x2a
 802ab7e:	d138      	bne.n	802abf2 <_vfiprintf_r+0x1aa>
 802ab80:	9b03      	ldr	r3, [sp, #12]
 802ab82:	1d1a      	adds	r2, r3, #4
 802ab84:	681b      	ldr	r3, [r3, #0]
 802ab86:	9203      	str	r2, [sp, #12]
 802ab88:	2b00      	cmp	r3, #0
 802ab8a:	bfb8      	it	lt
 802ab8c:	f04f 33ff 	movlt.w	r3, #4294967295
 802ab90:	f108 0802 	add.w	r8, r8, #2
 802ab94:	9305      	str	r3, [sp, #20]
 802ab96:	4d33      	ldr	r5, [pc, #204]	; (802ac64 <_vfiprintf_r+0x21c>)
 802ab98:	f898 1000 	ldrb.w	r1, [r8]
 802ab9c:	2203      	movs	r2, #3
 802ab9e:	4628      	mov	r0, r5
 802aba0:	f7d5 fb36 	bl	8000210 <memchr>
 802aba4:	b140      	cbz	r0, 802abb8 <_vfiprintf_r+0x170>
 802aba6:	2340      	movs	r3, #64	; 0x40
 802aba8:	1b40      	subs	r0, r0, r5
 802abaa:	fa03 f000 	lsl.w	r0, r3, r0
 802abae:	9b04      	ldr	r3, [sp, #16]
 802abb0:	4303      	orrs	r3, r0
 802abb2:	f108 0801 	add.w	r8, r8, #1
 802abb6:	9304      	str	r3, [sp, #16]
 802abb8:	f898 1000 	ldrb.w	r1, [r8]
 802abbc:	482a      	ldr	r0, [pc, #168]	; (802ac68 <_vfiprintf_r+0x220>)
 802abbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802abc2:	2206      	movs	r2, #6
 802abc4:	f108 0701 	add.w	r7, r8, #1
 802abc8:	f7d5 fb22 	bl	8000210 <memchr>
 802abcc:	2800      	cmp	r0, #0
 802abce:	d037      	beq.n	802ac40 <_vfiprintf_r+0x1f8>
 802abd0:	4b26      	ldr	r3, [pc, #152]	; (802ac6c <_vfiprintf_r+0x224>)
 802abd2:	bb1b      	cbnz	r3, 802ac1c <_vfiprintf_r+0x1d4>
 802abd4:	9b03      	ldr	r3, [sp, #12]
 802abd6:	3307      	adds	r3, #7
 802abd8:	f023 0307 	bic.w	r3, r3, #7
 802abdc:	3308      	adds	r3, #8
 802abde:	9303      	str	r3, [sp, #12]
 802abe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802abe2:	444b      	add	r3, r9
 802abe4:	9309      	str	r3, [sp, #36]	; 0x24
 802abe6:	e750      	b.n	802aa8a <_vfiprintf_r+0x42>
 802abe8:	fb05 3202 	mla	r2, r5, r2, r3
 802abec:	2001      	movs	r0, #1
 802abee:	4688      	mov	r8, r1
 802abf0:	e78a      	b.n	802ab08 <_vfiprintf_r+0xc0>
 802abf2:	2300      	movs	r3, #0
 802abf4:	f108 0801 	add.w	r8, r8, #1
 802abf8:	9305      	str	r3, [sp, #20]
 802abfa:	4619      	mov	r1, r3
 802abfc:	250a      	movs	r5, #10
 802abfe:	4640      	mov	r0, r8
 802ac00:	f810 2b01 	ldrb.w	r2, [r0], #1
 802ac04:	3a30      	subs	r2, #48	; 0x30
 802ac06:	2a09      	cmp	r2, #9
 802ac08:	d903      	bls.n	802ac12 <_vfiprintf_r+0x1ca>
 802ac0a:	2b00      	cmp	r3, #0
 802ac0c:	d0c3      	beq.n	802ab96 <_vfiprintf_r+0x14e>
 802ac0e:	9105      	str	r1, [sp, #20]
 802ac10:	e7c1      	b.n	802ab96 <_vfiprintf_r+0x14e>
 802ac12:	fb05 2101 	mla	r1, r5, r1, r2
 802ac16:	2301      	movs	r3, #1
 802ac18:	4680      	mov	r8, r0
 802ac1a:	e7f0      	b.n	802abfe <_vfiprintf_r+0x1b6>
 802ac1c:	ab03      	add	r3, sp, #12
 802ac1e:	9300      	str	r3, [sp, #0]
 802ac20:	4622      	mov	r2, r4
 802ac22:	4b13      	ldr	r3, [pc, #76]	; (802ac70 <_vfiprintf_r+0x228>)
 802ac24:	a904      	add	r1, sp, #16
 802ac26:	4630      	mov	r0, r6
 802ac28:	f3af 8000 	nop.w
 802ac2c:	f1b0 3fff 	cmp.w	r0, #4294967295
 802ac30:	4681      	mov	r9, r0
 802ac32:	d1d5      	bne.n	802abe0 <_vfiprintf_r+0x198>
 802ac34:	89a3      	ldrh	r3, [r4, #12]
 802ac36:	065b      	lsls	r3, r3, #25
 802ac38:	f53f af7e 	bmi.w	802ab38 <_vfiprintf_r+0xf0>
 802ac3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802ac3e:	e77d      	b.n	802ab3c <_vfiprintf_r+0xf4>
 802ac40:	ab03      	add	r3, sp, #12
 802ac42:	9300      	str	r3, [sp, #0]
 802ac44:	4622      	mov	r2, r4
 802ac46:	4b0a      	ldr	r3, [pc, #40]	; (802ac70 <_vfiprintf_r+0x228>)
 802ac48:	a904      	add	r1, sp, #16
 802ac4a:	4630      	mov	r0, r6
 802ac4c:	f000 f888 	bl	802ad60 <_printf_i>
 802ac50:	e7ec      	b.n	802ac2c <_vfiprintf_r+0x1e4>
 802ac52:	bf00      	nop
 802ac54:	080306c4 	.word	0x080306c4
 802ac58:	0803066c 	.word	0x0803066c
 802ac5c:	080306e4 	.word	0x080306e4
 802ac60:	080306a4 	.word	0x080306a4
 802ac64:	08030672 	.word	0x08030672
 802ac68:	08030676 	.word	0x08030676
 802ac6c:	00000000 	.word	0x00000000
 802ac70:	0802aa23 	.word	0x0802aa23

0802ac74 <_printf_common>:
 802ac74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802ac78:	4691      	mov	r9, r2
 802ac7a:	461f      	mov	r7, r3
 802ac7c:	688a      	ldr	r2, [r1, #8]
 802ac7e:	690b      	ldr	r3, [r1, #16]
 802ac80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802ac84:	4293      	cmp	r3, r2
 802ac86:	bfb8      	it	lt
 802ac88:	4613      	movlt	r3, r2
 802ac8a:	f8c9 3000 	str.w	r3, [r9]
 802ac8e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802ac92:	4606      	mov	r6, r0
 802ac94:	460c      	mov	r4, r1
 802ac96:	b112      	cbz	r2, 802ac9e <_printf_common+0x2a>
 802ac98:	3301      	adds	r3, #1
 802ac9a:	f8c9 3000 	str.w	r3, [r9]
 802ac9e:	6823      	ldr	r3, [r4, #0]
 802aca0:	0699      	lsls	r1, r3, #26
 802aca2:	bf42      	ittt	mi
 802aca4:	f8d9 3000 	ldrmi.w	r3, [r9]
 802aca8:	3302      	addmi	r3, #2
 802acaa:	f8c9 3000 	strmi.w	r3, [r9]
 802acae:	6825      	ldr	r5, [r4, #0]
 802acb0:	f015 0506 	ands.w	r5, r5, #6
 802acb4:	d107      	bne.n	802acc6 <_printf_common+0x52>
 802acb6:	f104 0a19 	add.w	sl, r4, #25
 802acba:	68e3      	ldr	r3, [r4, #12]
 802acbc:	f8d9 2000 	ldr.w	r2, [r9]
 802acc0:	1a9b      	subs	r3, r3, r2
 802acc2:	42ab      	cmp	r3, r5
 802acc4:	dc28      	bgt.n	802ad18 <_printf_common+0xa4>
 802acc6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 802acca:	6822      	ldr	r2, [r4, #0]
 802accc:	3300      	adds	r3, #0
 802acce:	bf18      	it	ne
 802acd0:	2301      	movne	r3, #1
 802acd2:	0692      	lsls	r2, r2, #26
 802acd4:	d42d      	bmi.n	802ad32 <_printf_common+0xbe>
 802acd6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802acda:	4639      	mov	r1, r7
 802acdc:	4630      	mov	r0, r6
 802acde:	47c0      	blx	r8
 802ace0:	3001      	adds	r0, #1
 802ace2:	d020      	beq.n	802ad26 <_printf_common+0xb2>
 802ace4:	6823      	ldr	r3, [r4, #0]
 802ace6:	68e5      	ldr	r5, [r4, #12]
 802ace8:	f8d9 2000 	ldr.w	r2, [r9]
 802acec:	f003 0306 	and.w	r3, r3, #6
 802acf0:	2b04      	cmp	r3, #4
 802acf2:	bf08      	it	eq
 802acf4:	1aad      	subeq	r5, r5, r2
 802acf6:	68a3      	ldr	r3, [r4, #8]
 802acf8:	6922      	ldr	r2, [r4, #16]
 802acfa:	bf0c      	ite	eq
 802acfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802ad00:	2500      	movne	r5, #0
 802ad02:	4293      	cmp	r3, r2
 802ad04:	bfc4      	itt	gt
 802ad06:	1a9b      	subgt	r3, r3, r2
 802ad08:	18ed      	addgt	r5, r5, r3
 802ad0a:	f04f 0900 	mov.w	r9, #0
 802ad0e:	341a      	adds	r4, #26
 802ad10:	454d      	cmp	r5, r9
 802ad12:	d11a      	bne.n	802ad4a <_printf_common+0xd6>
 802ad14:	2000      	movs	r0, #0
 802ad16:	e008      	b.n	802ad2a <_printf_common+0xb6>
 802ad18:	2301      	movs	r3, #1
 802ad1a:	4652      	mov	r2, sl
 802ad1c:	4639      	mov	r1, r7
 802ad1e:	4630      	mov	r0, r6
 802ad20:	47c0      	blx	r8
 802ad22:	3001      	adds	r0, #1
 802ad24:	d103      	bne.n	802ad2e <_printf_common+0xba>
 802ad26:	f04f 30ff 	mov.w	r0, #4294967295
 802ad2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802ad2e:	3501      	adds	r5, #1
 802ad30:	e7c3      	b.n	802acba <_printf_common+0x46>
 802ad32:	18e1      	adds	r1, r4, r3
 802ad34:	1c5a      	adds	r2, r3, #1
 802ad36:	2030      	movs	r0, #48	; 0x30
 802ad38:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802ad3c:	4422      	add	r2, r4
 802ad3e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802ad42:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802ad46:	3302      	adds	r3, #2
 802ad48:	e7c5      	b.n	802acd6 <_printf_common+0x62>
 802ad4a:	2301      	movs	r3, #1
 802ad4c:	4622      	mov	r2, r4
 802ad4e:	4639      	mov	r1, r7
 802ad50:	4630      	mov	r0, r6
 802ad52:	47c0      	blx	r8
 802ad54:	3001      	adds	r0, #1
 802ad56:	d0e6      	beq.n	802ad26 <_printf_common+0xb2>
 802ad58:	f109 0901 	add.w	r9, r9, #1
 802ad5c:	e7d8      	b.n	802ad10 <_printf_common+0x9c>
	...

0802ad60 <_printf_i>:
 802ad60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802ad64:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 802ad68:	460c      	mov	r4, r1
 802ad6a:	7e09      	ldrb	r1, [r1, #24]
 802ad6c:	b085      	sub	sp, #20
 802ad6e:	296e      	cmp	r1, #110	; 0x6e
 802ad70:	4617      	mov	r7, r2
 802ad72:	4606      	mov	r6, r0
 802ad74:	4698      	mov	r8, r3
 802ad76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802ad78:	f000 80b3 	beq.w	802aee2 <_printf_i+0x182>
 802ad7c:	d822      	bhi.n	802adc4 <_printf_i+0x64>
 802ad7e:	2963      	cmp	r1, #99	; 0x63
 802ad80:	d036      	beq.n	802adf0 <_printf_i+0x90>
 802ad82:	d80a      	bhi.n	802ad9a <_printf_i+0x3a>
 802ad84:	2900      	cmp	r1, #0
 802ad86:	f000 80b9 	beq.w	802aefc <_printf_i+0x19c>
 802ad8a:	2958      	cmp	r1, #88	; 0x58
 802ad8c:	f000 8083 	beq.w	802ae96 <_printf_i+0x136>
 802ad90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802ad94:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 802ad98:	e032      	b.n	802ae00 <_printf_i+0xa0>
 802ad9a:	2964      	cmp	r1, #100	; 0x64
 802ad9c:	d001      	beq.n	802ada2 <_printf_i+0x42>
 802ad9e:	2969      	cmp	r1, #105	; 0x69
 802ada0:	d1f6      	bne.n	802ad90 <_printf_i+0x30>
 802ada2:	6820      	ldr	r0, [r4, #0]
 802ada4:	6813      	ldr	r3, [r2, #0]
 802ada6:	0605      	lsls	r5, r0, #24
 802ada8:	f103 0104 	add.w	r1, r3, #4
 802adac:	d52a      	bpl.n	802ae04 <_printf_i+0xa4>
 802adae:	681b      	ldr	r3, [r3, #0]
 802adb0:	6011      	str	r1, [r2, #0]
 802adb2:	2b00      	cmp	r3, #0
 802adb4:	da03      	bge.n	802adbe <_printf_i+0x5e>
 802adb6:	222d      	movs	r2, #45	; 0x2d
 802adb8:	425b      	negs	r3, r3
 802adba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 802adbe:	486f      	ldr	r0, [pc, #444]	; (802af7c <_printf_i+0x21c>)
 802adc0:	220a      	movs	r2, #10
 802adc2:	e039      	b.n	802ae38 <_printf_i+0xd8>
 802adc4:	2973      	cmp	r1, #115	; 0x73
 802adc6:	f000 809d 	beq.w	802af04 <_printf_i+0x1a4>
 802adca:	d808      	bhi.n	802adde <_printf_i+0x7e>
 802adcc:	296f      	cmp	r1, #111	; 0x6f
 802adce:	d020      	beq.n	802ae12 <_printf_i+0xb2>
 802add0:	2970      	cmp	r1, #112	; 0x70
 802add2:	d1dd      	bne.n	802ad90 <_printf_i+0x30>
 802add4:	6823      	ldr	r3, [r4, #0]
 802add6:	f043 0320 	orr.w	r3, r3, #32
 802adda:	6023      	str	r3, [r4, #0]
 802addc:	e003      	b.n	802ade6 <_printf_i+0x86>
 802adde:	2975      	cmp	r1, #117	; 0x75
 802ade0:	d017      	beq.n	802ae12 <_printf_i+0xb2>
 802ade2:	2978      	cmp	r1, #120	; 0x78
 802ade4:	d1d4      	bne.n	802ad90 <_printf_i+0x30>
 802ade6:	2378      	movs	r3, #120	; 0x78
 802ade8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802adec:	4864      	ldr	r0, [pc, #400]	; (802af80 <_printf_i+0x220>)
 802adee:	e055      	b.n	802ae9c <_printf_i+0x13c>
 802adf0:	6813      	ldr	r3, [r2, #0]
 802adf2:	1d19      	adds	r1, r3, #4
 802adf4:	681b      	ldr	r3, [r3, #0]
 802adf6:	6011      	str	r1, [r2, #0]
 802adf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802adfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802ae00:	2301      	movs	r3, #1
 802ae02:	e08c      	b.n	802af1e <_printf_i+0x1be>
 802ae04:	681b      	ldr	r3, [r3, #0]
 802ae06:	6011      	str	r1, [r2, #0]
 802ae08:	f010 0f40 	tst.w	r0, #64	; 0x40
 802ae0c:	bf18      	it	ne
 802ae0e:	b21b      	sxthne	r3, r3
 802ae10:	e7cf      	b.n	802adb2 <_printf_i+0x52>
 802ae12:	6813      	ldr	r3, [r2, #0]
 802ae14:	6825      	ldr	r5, [r4, #0]
 802ae16:	1d18      	adds	r0, r3, #4
 802ae18:	6010      	str	r0, [r2, #0]
 802ae1a:	0628      	lsls	r0, r5, #24
 802ae1c:	d501      	bpl.n	802ae22 <_printf_i+0xc2>
 802ae1e:	681b      	ldr	r3, [r3, #0]
 802ae20:	e002      	b.n	802ae28 <_printf_i+0xc8>
 802ae22:	0668      	lsls	r0, r5, #25
 802ae24:	d5fb      	bpl.n	802ae1e <_printf_i+0xbe>
 802ae26:	881b      	ldrh	r3, [r3, #0]
 802ae28:	4854      	ldr	r0, [pc, #336]	; (802af7c <_printf_i+0x21c>)
 802ae2a:	296f      	cmp	r1, #111	; 0x6f
 802ae2c:	bf14      	ite	ne
 802ae2e:	220a      	movne	r2, #10
 802ae30:	2208      	moveq	r2, #8
 802ae32:	2100      	movs	r1, #0
 802ae34:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802ae38:	6865      	ldr	r5, [r4, #4]
 802ae3a:	60a5      	str	r5, [r4, #8]
 802ae3c:	2d00      	cmp	r5, #0
 802ae3e:	f2c0 8095 	blt.w	802af6c <_printf_i+0x20c>
 802ae42:	6821      	ldr	r1, [r4, #0]
 802ae44:	f021 0104 	bic.w	r1, r1, #4
 802ae48:	6021      	str	r1, [r4, #0]
 802ae4a:	2b00      	cmp	r3, #0
 802ae4c:	d13d      	bne.n	802aeca <_printf_i+0x16a>
 802ae4e:	2d00      	cmp	r5, #0
 802ae50:	f040 808e 	bne.w	802af70 <_printf_i+0x210>
 802ae54:	4665      	mov	r5, ip
 802ae56:	2a08      	cmp	r2, #8
 802ae58:	d10b      	bne.n	802ae72 <_printf_i+0x112>
 802ae5a:	6823      	ldr	r3, [r4, #0]
 802ae5c:	07db      	lsls	r3, r3, #31
 802ae5e:	d508      	bpl.n	802ae72 <_printf_i+0x112>
 802ae60:	6923      	ldr	r3, [r4, #16]
 802ae62:	6862      	ldr	r2, [r4, #4]
 802ae64:	429a      	cmp	r2, r3
 802ae66:	bfde      	ittt	le
 802ae68:	2330      	movle	r3, #48	; 0x30
 802ae6a:	f805 3c01 	strble.w	r3, [r5, #-1]
 802ae6e:	f105 35ff 	addle.w	r5, r5, #4294967295
 802ae72:	ebac 0305 	sub.w	r3, ip, r5
 802ae76:	6123      	str	r3, [r4, #16]
 802ae78:	f8cd 8000 	str.w	r8, [sp]
 802ae7c:	463b      	mov	r3, r7
 802ae7e:	aa03      	add	r2, sp, #12
 802ae80:	4621      	mov	r1, r4
 802ae82:	4630      	mov	r0, r6
 802ae84:	f7ff fef6 	bl	802ac74 <_printf_common>
 802ae88:	3001      	adds	r0, #1
 802ae8a:	d14d      	bne.n	802af28 <_printf_i+0x1c8>
 802ae8c:	f04f 30ff 	mov.w	r0, #4294967295
 802ae90:	b005      	add	sp, #20
 802ae92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802ae96:	4839      	ldr	r0, [pc, #228]	; (802af7c <_printf_i+0x21c>)
 802ae98:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 802ae9c:	6813      	ldr	r3, [r2, #0]
 802ae9e:	6821      	ldr	r1, [r4, #0]
 802aea0:	1d1d      	adds	r5, r3, #4
 802aea2:	681b      	ldr	r3, [r3, #0]
 802aea4:	6015      	str	r5, [r2, #0]
 802aea6:	060a      	lsls	r2, r1, #24
 802aea8:	d50b      	bpl.n	802aec2 <_printf_i+0x162>
 802aeaa:	07ca      	lsls	r2, r1, #31
 802aeac:	bf44      	itt	mi
 802aeae:	f041 0120 	orrmi.w	r1, r1, #32
 802aeb2:	6021      	strmi	r1, [r4, #0]
 802aeb4:	b91b      	cbnz	r3, 802aebe <_printf_i+0x15e>
 802aeb6:	6822      	ldr	r2, [r4, #0]
 802aeb8:	f022 0220 	bic.w	r2, r2, #32
 802aebc:	6022      	str	r2, [r4, #0]
 802aebe:	2210      	movs	r2, #16
 802aec0:	e7b7      	b.n	802ae32 <_printf_i+0xd2>
 802aec2:	064d      	lsls	r5, r1, #25
 802aec4:	bf48      	it	mi
 802aec6:	b29b      	uxthmi	r3, r3
 802aec8:	e7ef      	b.n	802aeaa <_printf_i+0x14a>
 802aeca:	4665      	mov	r5, ip
 802aecc:	fbb3 f1f2 	udiv	r1, r3, r2
 802aed0:	fb02 3311 	mls	r3, r2, r1, r3
 802aed4:	5cc3      	ldrb	r3, [r0, r3]
 802aed6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 802aeda:	460b      	mov	r3, r1
 802aedc:	2900      	cmp	r1, #0
 802aede:	d1f5      	bne.n	802aecc <_printf_i+0x16c>
 802aee0:	e7b9      	b.n	802ae56 <_printf_i+0xf6>
 802aee2:	6813      	ldr	r3, [r2, #0]
 802aee4:	6825      	ldr	r5, [r4, #0]
 802aee6:	6961      	ldr	r1, [r4, #20]
 802aee8:	1d18      	adds	r0, r3, #4
 802aeea:	6010      	str	r0, [r2, #0]
 802aeec:	0628      	lsls	r0, r5, #24
 802aeee:	681b      	ldr	r3, [r3, #0]
 802aef0:	d501      	bpl.n	802aef6 <_printf_i+0x196>
 802aef2:	6019      	str	r1, [r3, #0]
 802aef4:	e002      	b.n	802aefc <_printf_i+0x19c>
 802aef6:	066a      	lsls	r2, r5, #25
 802aef8:	d5fb      	bpl.n	802aef2 <_printf_i+0x192>
 802aefa:	8019      	strh	r1, [r3, #0]
 802aefc:	2300      	movs	r3, #0
 802aefe:	6123      	str	r3, [r4, #16]
 802af00:	4665      	mov	r5, ip
 802af02:	e7b9      	b.n	802ae78 <_printf_i+0x118>
 802af04:	6813      	ldr	r3, [r2, #0]
 802af06:	1d19      	adds	r1, r3, #4
 802af08:	6011      	str	r1, [r2, #0]
 802af0a:	681d      	ldr	r5, [r3, #0]
 802af0c:	6862      	ldr	r2, [r4, #4]
 802af0e:	2100      	movs	r1, #0
 802af10:	4628      	mov	r0, r5
 802af12:	f7d5 f97d 	bl	8000210 <memchr>
 802af16:	b108      	cbz	r0, 802af1c <_printf_i+0x1bc>
 802af18:	1b40      	subs	r0, r0, r5
 802af1a:	6060      	str	r0, [r4, #4]
 802af1c:	6863      	ldr	r3, [r4, #4]
 802af1e:	6123      	str	r3, [r4, #16]
 802af20:	2300      	movs	r3, #0
 802af22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802af26:	e7a7      	b.n	802ae78 <_printf_i+0x118>
 802af28:	6923      	ldr	r3, [r4, #16]
 802af2a:	462a      	mov	r2, r5
 802af2c:	4639      	mov	r1, r7
 802af2e:	4630      	mov	r0, r6
 802af30:	47c0      	blx	r8
 802af32:	3001      	adds	r0, #1
 802af34:	d0aa      	beq.n	802ae8c <_printf_i+0x12c>
 802af36:	6823      	ldr	r3, [r4, #0]
 802af38:	079b      	lsls	r3, r3, #30
 802af3a:	d413      	bmi.n	802af64 <_printf_i+0x204>
 802af3c:	68e0      	ldr	r0, [r4, #12]
 802af3e:	9b03      	ldr	r3, [sp, #12]
 802af40:	4298      	cmp	r0, r3
 802af42:	bfb8      	it	lt
 802af44:	4618      	movlt	r0, r3
 802af46:	e7a3      	b.n	802ae90 <_printf_i+0x130>
 802af48:	2301      	movs	r3, #1
 802af4a:	464a      	mov	r2, r9
 802af4c:	4639      	mov	r1, r7
 802af4e:	4630      	mov	r0, r6
 802af50:	47c0      	blx	r8
 802af52:	3001      	adds	r0, #1
 802af54:	d09a      	beq.n	802ae8c <_printf_i+0x12c>
 802af56:	3501      	adds	r5, #1
 802af58:	68e3      	ldr	r3, [r4, #12]
 802af5a:	9a03      	ldr	r2, [sp, #12]
 802af5c:	1a9b      	subs	r3, r3, r2
 802af5e:	42ab      	cmp	r3, r5
 802af60:	dcf2      	bgt.n	802af48 <_printf_i+0x1e8>
 802af62:	e7eb      	b.n	802af3c <_printf_i+0x1dc>
 802af64:	2500      	movs	r5, #0
 802af66:	f104 0919 	add.w	r9, r4, #25
 802af6a:	e7f5      	b.n	802af58 <_printf_i+0x1f8>
 802af6c:	2b00      	cmp	r3, #0
 802af6e:	d1ac      	bne.n	802aeca <_printf_i+0x16a>
 802af70:	7803      	ldrb	r3, [r0, #0]
 802af72:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802af76:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802af7a:	e76c      	b.n	802ae56 <_printf_i+0xf6>
 802af7c:	0803067d 	.word	0x0803067d
 802af80:	0803068e 	.word	0x0803068e

0802af84 <_sbrk_r>:
 802af84:	b538      	push	{r3, r4, r5, lr}
 802af86:	4c06      	ldr	r4, [pc, #24]	; (802afa0 <_sbrk_r+0x1c>)
 802af88:	2300      	movs	r3, #0
 802af8a:	4605      	mov	r5, r0
 802af8c:	4608      	mov	r0, r1
 802af8e:	6023      	str	r3, [r4, #0]
 802af90:	f7d8 fd5c 	bl	8003a4c <_sbrk>
 802af94:	1c43      	adds	r3, r0, #1
 802af96:	d102      	bne.n	802af9e <_sbrk_r+0x1a>
 802af98:	6823      	ldr	r3, [r4, #0]
 802af9a:	b103      	cbz	r3, 802af9e <_sbrk_r+0x1a>
 802af9c:	602b      	str	r3, [r5, #0]
 802af9e:	bd38      	pop	{r3, r4, r5, pc}
 802afa0:	2000ce28 	.word	0x2000ce28

0802afa4 <_raise_r>:
 802afa4:	291f      	cmp	r1, #31
 802afa6:	b538      	push	{r3, r4, r5, lr}
 802afa8:	4604      	mov	r4, r0
 802afaa:	460d      	mov	r5, r1
 802afac:	d904      	bls.n	802afb8 <_raise_r+0x14>
 802afae:	2316      	movs	r3, #22
 802afb0:	6003      	str	r3, [r0, #0]
 802afb2:	f04f 30ff 	mov.w	r0, #4294967295
 802afb6:	bd38      	pop	{r3, r4, r5, pc}
 802afb8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802afba:	b112      	cbz	r2, 802afc2 <_raise_r+0x1e>
 802afbc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802afc0:	b94b      	cbnz	r3, 802afd6 <_raise_r+0x32>
 802afc2:	4620      	mov	r0, r4
 802afc4:	f000 f830 	bl	802b028 <_getpid_r>
 802afc8:	462a      	mov	r2, r5
 802afca:	4601      	mov	r1, r0
 802afcc:	4620      	mov	r0, r4
 802afce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802afd2:	f000 b817 	b.w	802b004 <_kill_r>
 802afd6:	2b01      	cmp	r3, #1
 802afd8:	d00a      	beq.n	802aff0 <_raise_r+0x4c>
 802afda:	1c59      	adds	r1, r3, #1
 802afdc:	d103      	bne.n	802afe6 <_raise_r+0x42>
 802afde:	2316      	movs	r3, #22
 802afe0:	6003      	str	r3, [r0, #0]
 802afe2:	2001      	movs	r0, #1
 802afe4:	e7e7      	b.n	802afb6 <_raise_r+0x12>
 802afe6:	2400      	movs	r4, #0
 802afe8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802afec:	4628      	mov	r0, r5
 802afee:	4798      	blx	r3
 802aff0:	2000      	movs	r0, #0
 802aff2:	e7e0      	b.n	802afb6 <_raise_r+0x12>

0802aff4 <raise>:
 802aff4:	4b02      	ldr	r3, [pc, #8]	; (802b000 <raise+0xc>)
 802aff6:	4601      	mov	r1, r0
 802aff8:	6818      	ldr	r0, [r3, #0]
 802affa:	f7ff bfd3 	b.w	802afa4 <_raise_r>
 802affe:	bf00      	nop
 802b000:	200000dc 	.word	0x200000dc

0802b004 <_kill_r>:
 802b004:	b538      	push	{r3, r4, r5, lr}
 802b006:	4c07      	ldr	r4, [pc, #28]	; (802b024 <_kill_r+0x20>)
 802b008:	2300      	movs	r3, #0
 802b00a:	4605      	mov	r5, r0
 802b00c:	4608      	mov	r0, r1
 802b00e:	4611      	mov	r1, r2
 802b010:	6023      	str	r3, [r4, #0]
 802b012:	f7d8 fc93 	bl	800393c <_kill>
 802b016:	1c43      	adds	r3, r0, #1
 802b018:	d102      	bne.n	802b020 <_kill_r+0x1c>
 802b01a:	6823      	ldr	r3, [r4, #0]
 802b01c:	b103      	cbz	r3, 802b020 <_kill_r+0x1c>
 802b01e:	602b      	str	r3, [r5, #0]
 802b020:	bd38      	pop	{r3, r4, r5, pc}
 802b022:	bf00      	nop
 802b024:	2000ce28 	.word	0x2000ce28

0802b028 <_getpid_r>:
 802b028:	f7d8 bc80 	b.w	800392c <_getpid>

0802b02c <__swbuf_r>:
 802b02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b02e:	460e      	mov	r6, r1
 802b030:	4614      	mov	r4, r2
 802b032:	4605      	mov	r5, r0
 802b034:	b118      	cbz	r0, 802b03e <__swbuf_r+0x12>
 802b036:	6983      	ldr	r3, [r0, #24]
 802b038:	b90b      	cbnz	r3, 802b03e <__swbuf_r+0x12>
 802b03a:	f000 fa0b 	bl	802b454 <__sinit>
 802b03e:	4b21      	ldr	r3, [pc, #132]	; (802b0c4 <__swbuf_r+0x98>)
 802b040:	429c      	cmp	r4, r3
 802b042:	d12a      	bne.n	802b09a <__swbuf_r+0x6e>
 802b044:	686c      	ldr	r4, [r5, #4]
 802b046:	69a3      	ldr	r3, [r4, #24]
 802b048:	60a3      	str	r3, [r4, #8]
 802b04a:	89a3      	ldrh	r3, [r4, #12]
 802b04c:	071a      	lsls	r2, r3, #28
 802b04e:	d52e      	bpl.n	802b0ae <__swbuf_r+0x82>
 802b050:	6923      	ldr	r3, [r4, #16]
 802b052:	b363      	cbz	r3, 802b0ae <__swbuf_r+0x82>
 802b054:	6923      	ldr	r3, [r4, #16]
 802b056:	6820      	ldr	r0, [r4, #0]
 802b058:	1ac0      	subs	r0, r0, r3
 802b05a:	6963      	ldr	r3, [r4, #20]
 802b05c:	b2f6      	uxtb	r6, r6
 802b05e:	4283      	cmp	r3, r0
 802b060:	4637      	mov	r7, r6
 802b062:	dc04      	bgt.n	802b06e <__swbuf_r+0x42>
 802b064:	4621      	mov	r1, r4
 802b066:	4628      	mov	r0, r5
 802b068:	f000 f98a 	bl	802b380 <_fflush_r>
 802b06c:	bb28      	cbnz	r0, 802b0ba <__swbuf_r+0x8e>
 802b06e:	68a3      	ldr	r3, [r4, #8]
 802b070:	3b01      	subs	r3, #1
 802b072:	60a3      	str	r3, [r4, #8]
 802b074:	6823      	ldr	r3, [r4, #0]
 802b076:	1c5a      	adds	r2, r3, #1
 802b078:	6022      	str	r2, [r4, #0]
 802b07a:	701e      	strb	r6, [r3, #0]
 802b07c:	6963      	ldr	r3, [r4, #20]
 802b07e:	3001      	adds	r0, #1
 802b080:	4283      	cmp	r3, r0
 802b082:	d004      	beq.n	802b08e <__swbuf_r+0x62>
 802b084:	89a3      	ldrh	r3, [r4, #12]
 802b086:	07db      	lsls	r3, r3, #31
 802b088:	d519      	bpl.n	802b0be <__swbuf_r+0x92>
 802b08a:	2e0a      	cmp	r6, #10
 802b08c:	d117      	bne.n	802b0be <__swbuf_r+0x92>
 802b08e:	4621      	mov	r1, r4
 802b090:	4628      	mov	r0, r5
 802b092:	f000 f975 	bl	802b380 <_fflush_r>
 802b096:	b190      	cbz	r0, 802b0be <__swbuf_r+0x92>
 802b098:	e00f      	b.n	802b0ba <__swbuf_r+0x8e>
 802b09a:	4b0b      	ldr	r3, [pc, #44]	; (802b0c8 <__swbuf_r+0x9c>)
 802b09c:	429c      	cmp	r4, r3
 802b09e:	d101      	bne.n	802b0a4 <__swbuf_r+0x78>
 802b0a0:	68ac      	ldr	r4, [r5, #8]
 802b0a2:	e7d0      	b.n	802b046 <__swbuf_r+0x1a>
 802b0a4:	4b09      	ldr	r3, [pc, #36]	; (802b0cc <__swbuf_r+0xa0>)
 802b0a6:	429c      	cmp	r4, r3
 802b0a8:	bf08      	it	eq
 802b0aa:	68ec      	ldreq	r4, [r5, #12]
 802b0ac:	e7cb      	b.n	802b046 <__swbuf_r+0x1a>
 802b0ae:	4621      	mov	r1, r4
 802b0b0:	4628      	mov	r0, r5
 802b0b2:	f000 f80d 	bl	802b0d0 <__swsetup_r>
 802b0b6:	2800      	cmp	r0, #0
 802b0b8:	d0cc      	beq.n	802b054 <__swbuf_r+0x28>
 802b0ba:	f04f 37ff 	mov.w	r7, #4294967295
 802b0be:	4638      	mov	r0, r7
 802b0c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802b0c2:	bf00      	nop
 802b0c4:	080306c4 	.word	0x080306c4
 802b0c8:	080306e4 	.word	0x080306e4
 802b0cc:	080306a4 	.word	0x080306a4

0802b0d0 <__swsetup_r>:
 802b0d0:	4b32      	ldr	r3, [pc, #200]	; (802b19c <__swsetup_r+0xcc>)
 802b0d2:	b570      	push	{r4, r5, r6, lr}
 802b0d4:	681d      	ldr	r5, [r3, #0]
 802b0d6:	4606      	mov	r6, r0
 802b0d8:	460c      	mov	r4, r1
 802b0da:	b125      	cbz	r5, 802b0e6 <__swsetup_r+0x16>
 802b0dc:	69ab      	ldr	r3, [r5, #24]
 802b0de:	b913      	cbnz	r3, 802b0e6 <__swsetup_r+0x16>
 802b0e0:	4628      	mov	r0, r5
 802b0e2:	f000 f9b7 	bl	802b454 <__sinit>
 802b0e6:	4b2e      	ldr	r3, [pc, #184]	; (802b1a0 <__swsetup_r+0xd0>)
 802b0e8:	429c      	cmp	r4, r3
 802b0ea:	d10f      	bne.n	802b10c <__swsetup_r+0x3c>
 802b0ec:	686c      	ldr	r4, [r5, #4]
 802b0ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b0f2:	b29a      	uxth	r2, r3
 802b0f4:	0715      	lsls	r5, r2, #28
 802b0f6:	d42c      	bmi.n	802b152 <__swsetup_r+0x82>
 802b0f8:	06d0      	lsls	r0, r2, #27
 802b0fa:	d411      	bmi.n	802b120 <__swsetup_r+0x50>
 802b0fc:	2209      	movs	r2, #9
 802b0fe:	6032      	str	r2, [r6, #0]
 802b100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802b104:	81a3      	strh	r3, [r4, #12]
 802b106:	f04f 30ff 	mov.w	r0, #4294967295
 802b10a:	e03e      	b.n	802b18a <__swsetup_r+0xba>
 802b10c:	4b25      	ldr	r3, [pc, #148]	; (802b1a4 <__swsetup_r+0xd4>)
 802b10e:	429c      	cmp	r4, r3
 802b110:	d101      	bne.n	802b116 <__swsetup_r+0x46>
 802b112:	68ac      	ldr	r4, [r5, #8]
 802b114:	e7eb      	b.n	802b0ee <__swsetup_r+0x1e>
 802b116:	4b24      	ldr	r3, [pc, #144]	; (802b1a8 <__swsetup_r+0xd8>)
 802b118:	429c      	cmp	r4, r3
 802b11a:	bf08      	it	eq
 802b11c:	68ec      	ldreq	r4, [r5, #12]
 802b11e:	e7e6      	b.n	802b0ee <__swsetup_r+0x1e>
 802b120:	0751      	lsls	r1, r2, #29
 802b122:	d512      	bpl.n	802b14a <__swsetup_r+0x7a>
 802b124:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802b126:	b141      	cbz	r1, 802b13a <__swsetup_r+0x6a>
 802b128:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802b12c:	4299      	cmp	r1, r3
 802b12e:	d002      	beq.n	802b136 <__swsetup_r+0x66>
 802b130:	4630      	mov	r0, r6
 802b132:	f7ff fbb7 	bl	802a8a4 <_free_r>
 802b136:	2300      	movs	r3, #0
 802b138:	6363      	str	r3, [r4, #52]	; 0x34
 802b13a:	89a3      	ldrh	r3, [r4, #12]
 802b13c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802b140:	81a3      	strh	r3, [r4, #12]
 802b142:	2300      	movs	r3, #0
 802b144:	6063      	str	r3, [r4, #4]
 802b146:	6923      	ldr	r3, [r4, #16]
 802b148:	6023      	str	r3, [r4, #0]
 802b14a:	89a3      	ldrh	r3, [r4, #12]
 802b14c:	f043 0308 	orr.w	r3, r3, #8
 802b150:	81a3      	strh	r3, [r4, #12]
 802b152:	6923      	ldr	r3, [r4, #16]
 802b154:	b94b      	cbnz	r3, 802b16a <__swsetup_r+0x9a>
 802b156:	89a3      	ldrh	r3, [r4, #12]
 802b158:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802b15c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802b160:	d003      	beq.n	802b16a <__swsetup_r+0x9a>
 802b162:	4621      	mov	r1, r4
 802b164:	4630      	mov	r0, r6
 802b166:	f000 fa23 	bl	802b5b0 <__smakebuf_r>
 802b16a:	89a2      	ldrh	r2, [r4, #12]
 802b16c:	f012 0301 	ands.w	r3, r2, #1
 802b170:	d00c      	beq.n	802b18c <__swsetup_r+0xbc>
 802b172:	2300      	movs	r3, #0
 802b174:	60a3      	str	r3, [r4, #8]
 802b176:	6963      	ldr	r3, [r4, #20]
 802b178:	425b      	negs	r3, r3
 802b17a:	61a3      	str	r3, [r4, #24]
 802b17c:	6923      	ldr	r3, [r4, #16]
 802b17e:	b953      	cbnz	r3, 802b196 <__swsetup_r+0xc6>
 802b180:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b184:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 802b188:	d1ba      	bne.n	802b100 <__swsetup_r+0x30>
 802b18a:	bd70      	pop	{r4, r5, r6, pc}
 802b18c:	0792      	lsls	r2, r2, #30
 802b18e:	bf58      	it	pl
 802b190:	6963      	ldrpl	r3, [r4, #20]
 802b192:	60a3      	str	r3, [r4, #8]
 802b194:	e7f2      	b.n	802b17c <__swsetup_r+0xac>
 802b196:	2000      	movs	r0, #0
 802b198:	e7f7      	b.n	802b18a <__swsetup_r+0xba>
 802b19a:	bf00      	nop
 802b19c:	200000dc 	.word	0x200000dc
 802b1a0:	080306c4 	.word	0x080306c4
 802b1a4:	080306e4 	.word	0x080306e4
 802b1a8:	080306a4 	.word	0x080306a4

0802b1ac <__register_exitproc>:
 802b1ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b1b0:	4d2c      	ldr	r5, [pc, #176]	; (802b264 <__register_exitproc+0xb8>)
 802b1b2:	682c      	ldr	r4, [r5, #0]
 802b1b4:	4607      	mov	r7, r0
 802b1b6:	460e      	mov	r6, r1
 802b1b8:	4691      	mov	r9, r2
 802b1ba:	4698      	mov	r8, r3
 802b1bc:	b934      	cbnz	r4, 802b1cc <__register_exitproc+0x20>
 802b1be:	4b2a      	ldr	r3, [pc, #168]	; (802b268 <__register_exitproc+0xbc>)
 802b1c0:	4c2a      	ldr	r4, [pc, #168]	; (802b26c <__register_exitproc+0xc0>)
 802b1c2:	602c      	str	r4, [r5, #0]
 802b1c4:	b113      	cbz	r3, 802b1cc <__register_exitproc+0x20>
 802b1c6:	681b      	ldr	r3, [r3, #0]
 802b1c8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802b1cc:	6863      	ldr	r3, [r4, #4]
 802b1ce:	2b1f      	cmp	r3, #31
 802b1d0:	dd3d      	ble.n	802b24e <__register_exitproc+0xa2>
 802b1d2:	4b27      	ldr	r3, [pc, #156]	; (802b270 <__register_exitproc+0xc4>)
 802b1d4:	b91b      	cbnz	r3, 802b1de <__register_exitproc+0x32>
 802b1d6:	f04f 30ff 	mov.w	r0, #4294967295
 802b1da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b1de:	208c      	movs	r0, #140	; 0x8c
 802b1e0:	f7ff fb3c 	bl	802a85c <malloc>
 802b1e4:	4604      	mov	r4, r0
 802b1e6:	2800      	cmp	r0, #0
 802b1e8:	d0f5      	beq.n	802b1d6 <__register_exitproc+0x2a>
 802b1ea:	2300      	movs	r3, #0
 802b1ec:	682a      	ldr	r2, [r5, #0]
 802b1ee:	6002      	str	r2, [r0, #0]
 802b1f0:	6043      	str	r3, [r0, #4]
 802b1f2:	6028      	str	r0, [r5, #0]
 802b1f4:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 802b1f8:	b30f      	cbz	r7, 802b23e <__register_exitproc+0x92>
 802b1fa:	f44f 7084 	mov.w	r0, #264	; 0x108
 802b1fe:	f7ff fb2d 	bl	802a85c <malloc>
 802b202:	2800      	cmp	r0, #0
 802b204:	d0e7      	beq.n	802b1d6 <__register_exitproc+0x2a>
 802b206:	2300      	movs	r3, #0
 802b208:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802b20c:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 802b210:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802b214:	6862      	ldr	r2, [r4, #4]
 802b216:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 802b21a:	2301      	movs	r3, #1
 802b21c:	4093      	lsls	r3, r2
 802b21e:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 802b222:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 802b226:	431a      	orrs	r2, r3
 802b228:	2f02      	cmp	r7, #2
 802b22a:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 802b22e:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 802b232:	bf02      	ittt	eq
 802b234:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 802b238:	4313      	orreq	r3, r2
 802b23a:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 802b23e:	6863      	ldr	r3, [r4, #4]
 802b240:	1c5a      	adds	r2, r3, #1
 802b242:	3302      	adds	r3, #2
 802b244:	6062      	str	r2, [r4, #4]
 802b246:	2000      	movs	r0, #0
 802b248:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 802b24c:	e7c5      	b.n	802b1da <__register_exitproc+0x2e>
 802b24e:	2f00      	cmp	r7, #0
 802b250:	d0f5      	beq.n	802b23e <__register_exitproc+0x92>
 802b252:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802b256:	2800      	cmp	r0, #0
 802b258:	d1dc      	bne.n	802b214 <__register_exitproc+0x68>
 802b25a:	4b05      	ldr	r3, [pc, #20]	; (802b270 <__register_exitproc+0xc4>)
 802b25c:	2b00      	cmp	r3, #0
 802b25e:	d0ba      	beq.n	802b1d6 <__register_exitproc+0x2a>
 802b260:	e7cb      	b.n	802b1fa <__register_exitproc+0x4e>
 802b262:	bf00      	nop
 802b264:	2000c220 	.word	0x2000c220
 802b268:	080306a0 	.word	0x080306a0
 802b26c:	2000c194 	.word	0x2000c194
 802b270:	0802a85d 	.word	0x0802a85d

0802b274 <__sflush_r>:
 802b274:	898a      	ldrh	r2, [r1, #12]
 802b276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b27a:	4605      	mov	r5, r0
 802b27c:	0710      	lsls	r0, r2, #28
 802b27e:	460c      	mov	r4, r1
 802b280:	d458      	bmi.n	802b334 <__sflush_r+0xc0>
 802b282:	684b      	ldr	r3, [r1, #4]
 802b284:	2b00      	cmp	r3, #0
 802b286:	dc05      	bgt.n	802b294 <__sflush_r+0x20>
 802b288:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802b28a:	2b00      	cmp	r3, #0
 802b28c:	dc02      	bgt.n	802b294 <__sflush_r+0x20>
 802b28e:	2000      	movs	r0, #0
 802b290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b294:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802b296:	2e00      	cmp	r6, #0
 802b298:	d0f9      	beq.n	802b28e <__sflush_r+0x1a>
 802b29a:	2300      	movs	r3, #0
 802b29c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802b2a0:	682f      	ldr	r7, [r5, #0]
 802b2a2:	6a21      	ldr	r1, [r4, #32]
 802b2a4:	602b      	str	r3, [r5, #0]
 802b2a6:	d032      	beq.n	802b30e <__sflush_r+0x9a>
 802b2a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802b2aa:	89a3      	ldrh	r3, [r4, #12]
 802b2ac:	075a      	lsls	r2, r3, #29
 802b2ae:	d505      	bpl.n	802b2bc <__sflush_r+0x48>
 802b2b0:	6863      	ldr	r3, [r4, #4]
 802b2b2:	1ac0      	subs	r0, r0, r3
 802b2b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802b2b6:	b10b      	cbz	r3, 802b2bc <__sflush_r+0x48>
 802b2b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802b2ba:	1ac0      	subs	r0, r0, r3
 802b2bc:	2300      	movs	r3, #0
 802b2be:	4602      	mov	r2, r0
 802b2c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802b2c2:	6a21      	ldr	r1, [r4, #32]
 802b2c4:	4628      	mov	r0, r5
 802b2c6:	47b0      	blx	r6
 802b2c8:	1c43      	adds	r3, r0, #1
 802b2ca:	89a3      	ldrh	r3, [r4, #12]
 802b2cc:	d106      	bne.n	802b2dc <__sflush_r+0x68>
 802b2ce:	6829      	ldr	r1, [r5, #0]
 802b2d0:	291d      	cmp	r1, #29
 802b2d2:	d848      	bhi.n	802b366 <__sflush_r+0xf2>
 802b2d4:	4a29      	ldr	r2, [pc, #164]	; (802b37c <__sflush_r+0x108>)
 802b2d6:	40ca      	lsrs	r2, r1
 802b2d8:	07d6      	lsls	r6, r2, #31
 802b2da:	d544      	bpl.n	802b366 <__sflush_r+0xf2>
 802b2dc:	2200      	movs	r2, #0
 802b2de:	6062      	str	r2, [r4, #4]
 802b2e0:	04d9      	lsls	r1, r3, #19
 802b2e2:	6922      	ldr	r2, [r4, #16]
 802b2e4:	6022      	str	r2, [r4, #0]
 802b2e6:	d504      	bpl.n	802b2f2 <__sflush_r+0x7e>
 802b2e8:	1c42      	adds	r2, r0, #1
 802b2ea:	d101      	bne.n	802b2f0 <__sflush_r+0x7c>
 802b2ec:	682b      	ldr	r3, [r5, #0]
 802b2ee:	b903      	cbnz	r3, 802b2f2 <__sflush_r+0x7e>
 802b2f0:	6560      	str	r0, [r4, #84]	; 0x54
 802b2f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802b2f4:	602f      	str	r7, [r5, #0]
 802b2f6:	2900      	cmp	r1, #0
 802b2f8:	d0c9      	beq.n	802b28e <__sflush_r+0x1a>
 802b2fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802b2fe:	4299      	cmp	r1, r3
 802b300:	d002      	beq.n	802b308 <__sflush_r+0x94>
 802b302:	4628      	mov	r0, r5
 802b304:	f7ff face 	bl	802a8a4 <_free_r>
 802b308:	2000      	movs	r0, #0
 802b30a:	6360      	str	r0, [r4, #52]	; 0x34
 802b30c:	e7c0      	b.n	802b290 <__sflush_r+0x1c>
 802b30e:	2301      	movs	r3, #1
 802b310:	4628      	mov	r0, r5
 802b312:	47b0      	blx	r6
 802b314:	1c41      	adds	r1, r0, #1
 802b316:	d1c8      	bne.n	802b2aa <__sflush_r+0x36>
 802b318:	682b      	ldr	r3, [r5, #0]
 802b31a:	2b00      	cmp	r3, #0
 802b31c:	d0c5      	beq.n	802b2aa <__sflush_r+0x36>
 802b31e:	2b1d      	cmp	r3, #29
 802b320:	d001      	beq.n	802b326 <__sflush_r+0xb2>
 802b322:	2b16      	cmp	r3, #22
 802b324:	d101      	bne.n	802b32a <__sflush_r+0xb6>
 802b326:	602f      	str	r7, [r5, #0]
 802b328:	e7b1      	b.n	802b28e <__sflush_r+0x1a>
 802b32a:	89a3      	ldrh	r3, [r4, #12]
 802b32c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802b330:	81a3      	strh	r3, [r4, #12]
 802b332:	e7ad      	b.n	802b290 <__sflush_r+0x1c>
 802b334:	690f      	ldr	r7, [r1, #16]
 802b336:	2f00      	cmp	r7, #0
 802b338:	d0a9      	beq.n	802b28e <__sflush_r+0x1a>
 802b33a:	0793      	lsls	r3, r2, #30
 802b33c:	680e      	ldr	r6, [r1, #0]
 802b33e:	bf08      	it	eq
 802b340:	694b      	ldreq	r3, [r1, #20]
 802b342:	600f      	str	r7, [r1, #0]
 802b344:	bf18      	it	ne
 802b346:	2300      	movne	r3, #0
 802b348:	eba6 0807 	sub.w	r8, r6, r7
 802b34c:	608b      	str	r3, [r1, #8]
 802b34e:	f1b8 0f00 	cmp.w	r8, #0
 802b352:	dd9c      	ble.n	802b28e <__sflush_r+0x1a>
 802b354:	4643      	mov	r3, r8
 802b356:	463a      	mov	r2, r7
 802b358:	6a21      	ldr	r1, [r4, #32]
 802b35a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802b35c:	4628      	mov	r0, r5
 802b35e:	47b0      	blx	r6
 802b360:	2800      	cmp	r0, #0
 802b362:	dc06      	bgt.n	802b372 <__sflush_r+0xfe>
 802b364:	89a3      	ldrh	r3, [r4, #12]
 802b366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802b36a:	81a3      	strh	r3, [r4, #12]
 802b36c:	f04f 30ff 	mov.w	r0, #4294967295
 802b370:	e78e      	b.n	802b290 <__sflush_r+0x1c>
 802b372:	4407      	add	r7, r0
 802b374:	eba8 0800 	sub.w	r8, r8, r0
 802b378:	e7e9      	b.n	802b34e <__sflush_r+0xda>
 802b37a:	bf00      	nop
 802b37c:	20400001 	.word	0x20400001

0802b380 <_fflush_r>:
 802b380:	b538      	push	{r3, r4, r5, lr}
 802b382:	690b      	ldr	r3, [r1, #16]
 802b384:	4605      	mov	r5, r0
 802b386:	460c      	mov	r4, r1
 802b388:	b1db      	cbz	r3, 802b3c2 <_fflush_r+0x42>
 802b38a:	b118      	cbz	r0, 802b394 <_fflush_r+0x14>
 802b38c:	6983      	ldr	r3, [r0, #24]
 802b38e:	b90b      	cbnz	r3, 802b394 <_fflush_r+0x14>
 802b390:	f000 f860 	bl	802b454 <__sinit>
 802b394:	4b0c      	ldr	r3, [pc, #48]	; (802b3c8 <_fflush_r+0x48>)
 802b396:	429c      	cmp	r4, r3
 802b398:	d109      	bne.n	802b3ae <_fflush_r+0x2e>
 802b39a:	686c      	ldr	r4, [r5, #4]
 802b39c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b3a0:	b17b      	cbz	r3, 802b3c2 <_fflush_r+0x42>
 802b3a2:	4621      	mov	r1, r4
 802b3a4:	4628      	mov	r0, r5
 802b3a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802b3aa:	f7ff bf63 	b.w	802b274 <__sflush_r>
 802b3ae:	4b07      	ldr	r3, [pc, #28]	; (802b3cc <_fflush_r+0x4c>)
 802b3b0:	429c      	cmp	r4, r3
 802b3b2:	d101      	bne.n	802b3b8 <_fflush_r+0x38>
 802b3b4:	68ac      	ldr	r4, [r5, #8]
 802b3b6:	e7f1      	b.n	802b39c <_fflush_r+0x1c>
 802b3b8:	4b05      	ldr	r3, [pc, #20]	; (802b3d0 <_fflush_r+0x50>)
 802b3ba:	429c      	cmp	r4, r3
 802b3bc:	bf08      	it	eq
 802b3be:	68ec      	ldreq	r4, [r5, #12]
 802b3c0:	e7ec      	b.n	802b39c <_fflush_r+0x1c>
 802b3c2:	2000      	movs	r0, #0
 802b3c4:	bd38      	pop	{r3, r4, r5, pc}
 802b3c6:	bf00      	nop
 802b3c8:	080306c4 	.word	0x080306c4
 802b3cc:	080306e4 	.word	0x080306e4
 802b3d0:	080306a4 	.word	0x080306a4

0802b3d4 <std>:
 802b3d4:	2300      	movs	r3, #0
 802b3d6:	b510      	push	{r4, lr}
 802b3d8:	4604      	mov	r4, r0
 802b3da:	e9c0 3300 	strd	r3, r3, [r0]
 802b3de:	6083      	str	r3, [r0, #8]
 802b3e0:	8181      	strh	r1, [r0, #12]
 802b3e2:	6643      	str	r3, [r0, #100]	; 0x64
 802b3e4:	81c2      	strh	r2, [r0, #14]
 802b3e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802b3ea:	6183      	str	r3, [r0, #24]
 802b3ec:	4619      	mov	r1, r3
 802b3ee:	2208      	movs	r2, #8
 802b3f0:	305c      	adds	r0, #92	; 0x5c
 802b3f2:	f7ff fa4e 	bl	802a892 <memset>
 802b3f6:	4b05      	ldr	r3, [pc, #20]	; (802b40c <std+0x38>)
 802b3f8:	6263      	str	r3, [r4, #36]	; 0x24
 802b3fa:	4b05      	ldr	r3, [pc, #20]	; (802b410 <std+0x3c>)
 802b3fc:	62a3      	str	r3, [r4, #40]	; 0x28
 802b3fe:	4b05      	ldr	r3, [pc, #20]	; (802b414 <std+0x40>)
 802b400:	62e3      	str	r3, [r4, #44]	; 0x2c
 802b402:	4b05      	ldr	r3, [pc, #20]	; (802b418 <std+0x44>)
 802b404:	6224      	str	r4, [r4, #32]
 802b406:	6323      	str	r3, [r4, #48]	; 0x30
 802b408:	bd10      	pop	{r4, pc}
 802b40a:	bf00      	nop
 802b40c:	0802b635 	.word	0x0802b635
 802b410:	0802b657 	.word	0x0802b657
 802b414:	0802b68f 	.word	0x0802b68f
 802b418:	0802b6b3 	.word	0x0802b6b3

0802b41c <_cleanup_r>:
 802b41c:	4901      	ldr	r1, [pc, #4]	; (802b424 <_cleanup_r+0x8>)
 802b41e:	f000 b885 	b.w	802b52c <_fwalk_reent>
 802b422:	bf00      	nop
 802b424:	0802b381 	.word	0x0802b381

0802b428 <__sfmoreglue>:
 802b428:	b570      	push	{r4, r5, r6, lr}
 802b42a:	1e4a      	subs	r2, r1, #1
 802b42c:	2568      	movs	r5, #104	; 0x68
 802b42e:	4355      	muls	r5, r2
 802b430:	460e      	mov	r6, r1
 802b432:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802b436:	f7ff fa83 	bl	802a940 <_malloc_r>
 802b43a:	4604      	mov	r4, r0
 802b43c:	b140      	cbz	r0, 802b450 <__sfmoreglue+0x28>
 802b43e:	2100      	movs	r1, #0
 802b440:	e9c0 1600 	strd	r1, r6, [r0]
 802b444:	300c      	adds	r0, #12
 802b446:	60a0      	str	r0, [r4, #8]
 802b448:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802b44c:	f7ff fa21 	bl	802a892 <memset>
 802b450:	4620      	mov	r0, r4
 802b452:	bd70      	pop	{r4, r5, r6, pc}

0802b454 <__sinit>:
 802b454:	6983      	ldr	r3, [r0, #24]
 802b456:	b510      	push	{r4, lr}
 802b458:	4604      	mov	r4, r0
 802b45a:	bb33      	cbnz	r3, 802b4aa <__sinit+0x56>
 802b45c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 802b460:	6503      	str	r3, [r0, #80]	; 0x50
 802b462:	4b12      	ldr	r3, [pc, #72]	; (802b4ac <__sinit+0x58>)
 802b464:	4a12      	ldr	r2, [pc, #72]	; (802b4b0 <__sinit+0x5c>)
 802b466:	681b      	ldr	r3, [r3, #0]
 802b468:	6282      	str	r2, [r0, #40]	; 0x28
 802b46a:	4298      	cmp	r0, r3
 802b46c:	bf04      	itt	eq
 802b46e:	2301      	moveq	r3, #1
 802b470:	6183      	streq	r3, [r0, #24]
 802b472:	f000 f81f 	bl	802b4b4 <__sfp>
 802b476:	6060      	str	r0, [r4, #4]
 802b478:	4620      	mov	r0, r4
 802b47a:	f000 f81b 	bl	802b4b4 <__sfp>
 802b47e:	60a0      	str	r0, [r4, #8]
 802b480:	4620      	mov	r0, r4
 802b482:	f000 f817 	bl	802b4b4 <__sfp>
 802b486:	2200      	movs	r2, #0
 802b488:	60e0      	str	r0, [r4, #12]
 802b48a:	2104      	movs	r1, #4
 802b48c:	6860      	ldr	r0, [r4, #4]
 802b48e:	f7ff ffa1 	bl	802b3d4 <std>
 802b492:	2201      	movs	r2, #1
 802b494:	2109      	movs	r1, #9
 802b496:	68a0      	ldr	r0, [r4, #8]
 802b498:	f7ff ff9c 	bl	802b3d4 <std>
 802b49c:	2202      	movs	r2, #2
 802b49e:	2112      	movs	r1, #18
 802b4a0:	68e0      	ldr	r0, [r4, #12]
 802b4a2:	f7ff ff97 	bl	802b3d4 <std>
 802b4a6:	2301      	movs	r3, #1
 802b4a8:	61a3      	str	r3, [r4, #24]
 802b4aa:	bd10      	pop	{r4, pc}
 802b4ac:	08030668 	.word	0x08030668
 802b4b0:	0802b41d 	.word	0x0802b41d

0802b4b4 <__sfp>:
 802b4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b4b6:	4b1b      	ldr	r3, [pc, #108]	; (802b524 <__sfp+0x70>)
 802b4b8:	681e      	ldr	r6, [r3, #0]
 802b4ba:	69b3      	ldr	r3, [r6, #24]
 802b4bc:	4607      	mov	r7, r0
 802b4be:	b913      	cbnz	r3, 802b4c6 <__sfp+0x12>
 802b4c0:	4630      	mov	r0, r6
 802b4c2:	f7ff ffc7 	bl	802b454 <__sinit>
 802b4c6:	3648      	adds	r6, #72	; 0x48
 802b4c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802b4cc:	3b01      	subs	r3, #1
 802b4ce:	d503      	bpl.n	802b4d8 <__sfp+0x24>
 802b4d0:	6833      	ldr	r3, [r6, #0]
 802b4d2:	b133      	cbz	r3, 802b4e2 <__sfp+0x2e>
 802b4d4:	6836      	ldr	r6, [r6, #0]
 802b4d6:	e7f7      	b.n	802b4c8 <__sfp+0x14>
 802b4d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802b4dc:	b16d      	cbz	r5, 802b4fa <__sfp+0x46>
 802b4de:	3468      	adds	r4, #104	; 0x68
 802b4e0:	e7f4      	b.n	802b4cc <__sfp+0x18>
 802b4e2:	2104      	movs	r1, #4
 802b4e4:	4638      	mov	r0, r7
 802b4e6:	f7ff ff9f 	bl	802b428 <__sfmoreglue>
 802b4ea:	6030      	str	r0, [r6, #0]
 802b4ec:	2800      	cmp	r0, #0
 802b4ee:	d1f1      	bne.n	802b4d4 <__sfp+0x20>
 802b4f0:	230c      	movs	r3, #12
 802b4f2:	603b      	str	r3, [r7, #0]
 802b4f4:	4604      	mov	r4, r0
 802b4f6:	4620      	mov	r0, r4
 802b4f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802b4fa:	4b0b      	ldr	r3, [pc, #44]	; (802b528 <__sfp+0x74>)
 802b4fc:	6665      	str	r5, [r4, #100]	; 0x64
 802b4fe:	e9c4 5500 	strd	r5, r5, [r4]
 802b502:	60a5      	str	r5, [r4, #8]
 802b504:	e9c4 3503 	strd	r3, r5, [r4, #12]
 802b508:	e9c4 5505 	strd	r5, r5, [r4, #20]
 802b50c:	2208      	movs	r2, #8
 802b50e:	4629      	mov	r1, r5
 802b510:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802b514:	f7ff f9bd 	bl	802a892 <memset>
 802b518:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802b51c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802b520:	e7e9      	b.n	802b4f6 <__sfp+0x42>
 802b522:	bf00      	nop
 802b524:	08030668 	.word	0x08030668
 802b528:	ffff0001 	.word	0xffff0001

0802b52c <_fwalk_reent>:
 802b52c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b530:	4680      	mov	r8, r0
 802b532:	4689      	mov	r9, r1
 802b534:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802b538:	2600      	movs	r6, #0
 802b53a:	b914      	cbnz	r4, 802b542 <_fwalk_reent+0x16>
 802b53c:	4630      	mov	r0, r6
 802b53e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b542:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 802b546:	3f01      	subs	r7, #1
 802b548:	d501      	bpl.n	802b54e <_fwalk_reent+0x22>
 802b54a:	6824      	ldr	r4, [r4, #0]
 802b54c:	e7f5      	b.n	802b53a <_fwalk_reent+0xe>
 802b54e:	89ab      	ldrh	r3, [r5, #12]
 802b550:	2b01      	cmp	r3, #1
 802b552:	d907      	bls.n	802b564 <_fwalk_reent+0x38>
 802b554:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802b558:	3301      	adds	r3, #1
 802b55a:	d003      	beq.n	802b564 <_fwalk_reent+0x38>
 802b55c:	4629      	mov	r1, r5
 802b55e:	4640      	mov	r0, r8
 802b560:	47c8      	blx	r9
 802b562:	4306      	orrs	r6, r0
 802b564:	3568      	adds	r5, #104	; 0x68
 802b566:	e7ee      	b.n	802b546 <_fwalk_reent+0x1a>

0802b568 <__swhatbuf_r>:
 802b568:	b570      	push	{r4, r5, r6, lr}
 802b56a:	460e      	mov	r6, r1
 802b56c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b570:	2900      	cmp	r1, #0
 802b572:	b096      	sub	sp, #88	; 0x58
 802b574:	4614      	mov	r4, r2
 802b576:	461d      	mov	r5, r3
 802b578:	da07      	bge.n	802b58a <__swhatbuf_r+0x22>
 802b57a:	2300      	movs	r3, #0
 802b57c:	602b      	str	r3, [r5, #0]
 802b57e:	89b3      	ldrh	r3, [r6, #12]
 802b580:	061a      	lsls	r2, r3, #24
 802b582:	d410      	bmi.n	802b5a6 <__swhatbuf_r+0x3e>
 802b584:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802b588:	e00e      	b.n	802b5a8 <__swhatbuf_r+0x40>
 802b58a:	466a      	mov	r2, sp
 802b58c:	f000 f8b8 	bl	802b700 <_fstat_r>
 802b590:	2800      	cmp	r0, #0
 802b592:	dbf2      	blt.n	802b57a <__swhatbuf_r+0x12>
 802b594:	9a01      	ldr	r2, [sp, #4]
 802b596:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802b59a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802b59e:	425a      	negs	r2, r3
 802b5a0:	415a      	adcs	r2, r3
 802b5a2:	602a      	str	r2, [r5, #0]
 802b5a4:	e7ee      	b.n	802b584 <__swhatbuf_r+0x1c>
 802b5a6:	2340      	movs	r3, #64	; 0x40
 802b5a8:	2000      	movs	r0, #0
 802b5aa:	6023      	str	r3, [r4, #0]
 802b5ac:	b016      	add	sp, #88	; 0x58
 802b5ae:	bd70      	pop	{r4, r5, r6, pc}

0802b5b0 <__smakebuf_r>:
 802b5b0:	898b      	ldrh	r3, [r1, #12]
 802b5b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802b5b4:	079d      	lsls	r5, r3, #30
 802b5b6:	4606      	mov	r6, r0
 802b5b8:	460c      	mov	r4, r1
 802b5ba:	d507      	bpl.n	802b5cc <__smakebuf_r+0x1c>
 802b5bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802b5c0:	6023      	str	r3, [r4, #0]
 802b5c2:	6123      	str	r3, [r4, #16]
 802b5c4:	2301      	movs	r3, #1
 802b5c6:	6163      	str	r3, [r4, #20]
 802b5c8:	b002      	add	sp, #8
 802b5ca:	bd70      	pop	{r4, r5, r6, pc}
 802b5cc:	ab01      	add	r3, sp, #4
 802b5ce:	466a      	mov	r2, sp
 802b5d0:	f7ff ffca 	bl	802b568 <__swhatbuf_r>
 802b5d4:	9900      	ldr	r1, [sp, #0]
 802b5d6:	4605      	mov	r5, r0
 802b5d8:	4630      	mov	r0, r6
 802b5da:	f7ff f9b1 	bl	802a940 <_malloc_r>
 802b5de:	b948      	cbnz	r0, 802b5f4 <__smakebuf_r+0x44>
 802b5e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b5e4:	059a      	lsls	r2, r3, #22
 802b5e6:	d4ef      	bmi.n	802b5c8 <__smakebuf_r+0x18>
 802b5e8:	f023 0303 	bic.w	r3, r3, #3
 802b5ec:	f043 0302 	orr.w	r3, r3, #2
 802b5f0:	81a3      	strh	r3, [r4, #12]
 802b5f2:	e7e3      	b.n	802b5bc <__smakebuf_r+0xc>
 802b5f4:	4b0d      	ldr	r3, [pc, #52]	; (802b62c <__smakebuf_r+0x7c>)
 802b5f6:	62b3      	str	r3, [r6, #40]	; 0x28
 802b5f8:	89a3      	ldrh	r3, [r4, #12]
 802b5fa:	6020      	str	r0, [r4, #0]
 802b5fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802b600:	81a3      	strh	r3, [r4, #12]
 802b602:	9b00      	ldr	r3, [sp, #0]
 802b604:	6163      	str	r3, [r4, #20]
 802b606:	9b01      	ldr	r3, [sp, #4]
 802b608:	6120      	str	r0, [r4, #16]
 802b60a:	b15b      	cbz	r3, 802b624 <__smakebuf_r+0x74>
 802b60c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802b610:	4630      	mov	r0, r6
 802b612:	f000 f887 	bl	802b724 <_isatty_r>
 802b616:	b128      	cbz	r0, 802b624 <__smakebuf_r+0x74>
 802b618:	89a3      	ldrh	r3, [r4, #12]
 802b61a:	f023 0303 	bic.w	r3, r3, #3
 802b61e:	f043 0301 	orr.w	r3, r3, #1
 802b622:	81a3      	strh	r3, [r4, #12]
 802b624:	89a3      	ldrh	r3, [r4, #12]
 802b626:	431d      	orrs	r5, r3
 802b628:	81a5      	strh	r5, [r4, #12]
 802b62a:	e7cd      	b.n	802b5c8 <__smakebuf_r+0x18>
 802b62c:	0802b41d 	.word	0x0802b41d

0802b630 <__malloc_lock>:
 802b630:	4770      	bx	lr

0802b632 <__malloc_unlock>:
 802b632:	4770      	bx	lr

0802b634 <__sread>:
 802b634:	b510      	push	{r4, lr}
 802b636:	460c      	mov	r4, r1
 802b638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b63c:	f000 f894 	bl	802b768 <_read_r>
 802b640:	2800      	cmp	r0, #0
 802b642:	bfab      	itete	ge
 802b644:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802b646:	89a3      	ldrhlt	r3, [r4, #12]
 802b648:	181b      	addge	r3, r3, r0
 802b64a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802b64e:	bfac      	ite	ge
 802b650:	6563      	strge	r3, [r4, #84]	; 0x54
 802b652:	81a3      	strhlt	r3, [r4, #12]
 802b654:	bd10      	pop	{r4, pc}

0802b656 <__swrite>:
 802b656:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b65a:	461f      	mov	r7, r3
 802b65c:	898b      	ldrh	r3, [r1, #12]
 802b65e:	05db      	lsls	r3, r3, #23
 802b660:	4605      	mov	r5, r0
 802b662:	460c      	mov	r4, r1
 802b664:	4616      	mov	r6, r2
 802b666:	d505      	bpl.n	802b674 <__swrite+0x1e>
 802b668:	2302      	movs	r3, #2
 802b66a:	2200      	movs	r2, #0
 802b66c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b670:	f000 f868 	bl	802b744 <_lseek_r>
 802b674:	89a3      	ldrh	r3, [r4, #12]
 802b676:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802b67a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802b67e:	81a3      	strh	r3, [r4, #12]
 802b680:	4632      	mov	r2, r6
 802b682:	463b      	mov	r3, r7
 802b684:	4628      	mov	r0, r5
 802b686:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802b68a:	f000 b817 	b.w	802b6bc <_write_r>

0802b68e <__sseek>:
 802b68e:	b510      	push	{r4, lr}
 802b690:	460c      	mov	r4, r1
 802b692:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b696:	f000 f855 	bl	802b744 <_lseek_r>
 802b69a:	1c43      	adds	r3, r0, #1
 802b69c:	89a3      	ldrh	r3, [r4, #12]
 802b69e:	bf15      	itete	ne
 802b6a0:	6560      	strne	r0, [r4, #84]	; 0x54
 802b6a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802b6a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802b6aa:	81a3      	strheq	r3, [r4, #12]
 802b6ac:	bf18      	it	ne
 802b6ae:	81a3      	strhne	r3, [r4, #12]
 802b6b0:	bd10      	pop	{r4, pc}

0802b6b2 <__sclose>:
 802b6b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b6b6:	f000 b813 	b.w	802b6e0 <_close_r>
	...

0802b6bc <_write_r>:
 802b6bc:	b538      	push	{r3, r4, r5, lr}
 802b6be:	4c07      	ldr	r4, [pc, #28]	; (802b6dc <_write_r+0x20>)
 802b6c0:	4605      	mov	r5, r0
 802b6c2:	4608      	mov	r0, r1
 802b6c4:	4611      	mov	r1, r2
 802b6c6:	2200      	movs	r2, #0
 802b6c8:	6022      	str	r2, [r4, #0]
 802b6ca:	461a      	mov	r2, r3
 802b6cc:	f7d8 f96d 	bl	80039aa <_write>
 802b6d0:	1c43      	adds	r3, r0, #1
 802b6d2:	d102      	bne.n	802b6da <_write_r+0x1e>
 802b6d4:	6823      	ldr	r3, [r4, #0]
 802b6d6:	b103      	cbz	r3, 802b6da <_write_r+0x1e>
 802b6d8:	602b      	str	r3, [r5, #0]
 802b6da:	bd38      	pop	{r3, r4, r5, pc}
 802b6dc:	2000ce28 	.word	0x2000ce28

0802b6e0 <_close_r>:
 802b6e0:	b538      	push	{r3, r4, r5, lr}
 802b6e2:	4c06      	ldr	r4, [pc, #24]	; (802b6fc <_close_r+0x1c>)
 802b6e4:	2300      	movs	r3, #0
 802b6e6:	4605      	mov	r5, r0
 802b6e8:	4608      	mov	r0, r1
 802b6ea:	6023      	str	r3, [r4, #0]
 802b6ec:	f7d8 f979 	bl	80039e2 <_close>
 802b6f0:	1c43      	adds	r3, r0, #1
 802b6f2:	d102      	bne.n	802b6fa <_close_r+0x1a>
 802b6f4:	6823      	ldr	r3, [r4, #0]
 802b6f6:	b103      	cbz	r3, 802b6fa <_close_r+0x1a>
 802b6f8:	602b      	str	r3, [r5, #0]
 802b6fa:	bd38      	pop	{r3, r4, r5, pc}
 802b6fc:	2000ce28 	.word	0x2000ce28

0802b700 <_fstat_r>:
 802b700:	b538      	push	{r3, r4, r5, lr}
 802b702:	4c07      	ldr	r4, [pc, #28]	; (802b720 <_fstat_r+0x20>)
 802b704:	2300      	movs	r3, #0
 802b706:	4605      	mov	r5, r0
 802b708:	4608      	mov	r0, r1
 802b70a:	4611      	mov	r1, r2
 802b70c:	6023      	str	r3, [r4, #0]
 802b70e:	f7d8 f974 	bl	80039fa <_fstat>
 802b712:	1c43      	adds	r3, r0, #1
 802b714:	d102      	bne.n	802b71c <_fstat_r+0x1c>
 802b716:	6823      	ldr	r3, [r4, #0]
 802b718:	b103      	cbz	r3, 802b71c <_fstat_r+0x1c>
 802b71a:	602b      	str	r3, [r5, #0]
 802b71c:	bd38      	pop	{r3, r4, r5, pc}
 802b71e:	bf00      	nop
 802b720:	2000ce28 	.word	0x2000ce28

0802b724 <_isatty_r>:
 802b724:	b538      	push	{r3, r4, r5, lr}
 802b726:	4c06      	ldr	r4, [pc, #24]	; (802b740 <_isatty_r+0x1c>)
 802b728:	2300      	movs	r3, #0
 802b72a:	4605      	mov	r5, r0
 802b72c:	4608      	mov	r0, r1
 802b72e:	6023      	str	r3, [r4, #0]
 802b730:	f7d8 f973 	bl	8003a1a <_isatty>
 802b734:	1c43      	adds	r3, r0, #1
 802b736:	d102      	bne.n	802b73e <_isatty_r+0x1a>
 802b738:	6823      	ldr	r3, [r4, #0]
 802b73a:	b103      	cbz	r3, 802b73e <_isatty_r+0x1a>
 802b73c:	602b      	str	r3, [r5, #0]
 802b73e:	bd38      	pop	{r3, r4, r5, pc}
 802b740:	2000ce28 	.word	0x2000ce28

0802b744 <_lseek_r>:
 802b744:	b538      	push	{r3, r4, r5, lr}
 802b746:	4c07      	ldr	r4, [pc, #28]	; (802b764 <_lseek_r+0x20>)
 802b748:	4605      	mov	r5, r0
 802b74a:	4608      	mov	r0, r1
 802b74c:	4611      	mov	r1, r2
 802b74e:	2200      	movs	r2, #0
 802b750:	6022      	str	r2, [r4, #0]
 802b752:	461a      	mov	r2, r3
 802b754:	f7d8 f96c 	bl	8003a30 <_lseek>
 802b758:	1c43      	adds	r3, r0, #1
 802b75a:	d102      	bne.n	802b762 <_lseek_r+0x1e>
 802b75c:	6823      	ldr	r3, [r4, #0]
 802b75e:	b103      	cbz	r3, 802b762 <_lseek_r+0x1e>
 802b760:	602b      	str	r3, [r5, #0]
 802b762:	bd38      	pop	{r3, r4, r5, pc}
 802b764:	2000ce28 	.word	0x2000ce28

0802b768 <_read_r>:
 802b768:	b538      	push	{r3, r4, r5, lr}
 802b76a:	4c07      	ldr	r4, [pc, #28]	; (802b788 <_read_r+0x20>)
 802b76c:	4605      	mov	r5, r0
 802b76e:	4608      	mov	r0, r1
 802b770:	4611      	mov	r1, r2
 802b772:	2200      	movs	r2, #0
 802b774:	6022      	str	r2, [r4, #0]
 802b776:	461a      	mov	r2, r3
 802b778:	f7d8 f8fa 	bl	8003970 <_read>
 802b77c:	1c43      	adds	r3, r0, #1
 802b77e:	d102      	bne.n	802b786 <_read_r+0x1e>
 802b780:	6823      	ldr	r3, [r4, #0]
 802b782:	b103      	cbz	r3, 802b786 <_read_r+0x1e>
 802b784:	602b      	str	r3, [r5, #0]
 802b786:	bd38      	pop	{r3, r4, r5, pc}
 802b788:	2000ce28 	.word	0x2000ce28

0802b78c <_init>:
 802b78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b78e:	bf00      	nop
 802b790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802b792:	bc08      	pop	{r3}
 802b794:	469e      	mov	lr, r3
 802b796:	4770      	bx	lr

0802b798 <_fini>:
 802b798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b79a:	bf00      	nop
 802b79c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802b79e:	bc08      	pop	{r3}
 802b7a0:	469e      	mov	lr, r3
 802b7a2:	4770      	bx	lr
